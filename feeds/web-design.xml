<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - web design</title><link>http://v4.chriskrycho.com/</link><description></description><lastBuildDate>Sun, 17 Nov 2019 15:30:00 -0500</lastBuildDate><item><title>Sympolymathesy, or: v5.chriskrycho.com:</title><link>http://v4.chriskrycho.com/2019/sympolymathesy-or-v5chriskrychocom.html</link><description>&lt;p&gt;&lt;i&gt;&lt;b&gt;&lt;a href="https://v4.chriskrycho.com/2018/assumed-audiences.html"&gt;Assumed Audience&lt;/a&gt;:&lt;/b&gt; literally every single subscriber of this blog!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôve just officially launched v5.chriskrycho.com, ‚ÄúSympolymathesy‚Äù. As such, this is the final post on this site! For all the details, check out &lt;a href="https://v5.chriskrycho.com/journal/relaunch/"&gt;the relaunch post&lt;/a&gt;!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 17 Nov 2019 15:30:00 -0500</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2019-11-17:/2019/sympolymathesy-or-v5chriskrychocom.html</guid><category>writing</category><category>links</category><category>web design</category></item><item><title>My Final Round of URL Rewrites‚Ä¶ Ever.</title><link>http://v4.chriskrycho.com/2019/my-final-round-of-url-rewrites-ever.html</link><description>&lt;p&gt;&lt;i&gt;&lt;b&gt;&lt;a href="https://v4.chriskrycho.com/2018/assumed-audiences.html"&gt;Assumed Audience&lt;/a&gt;:&lt;/b&gt; web development nerds like me.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Those of you subscribed to my &lt;abbr&gt;RSS&lt;/abbr&gt; feed most likely saw a bunch of posts again earlier this week. That‚Äôs because the canonical &lt;abbr&gt;URL&lt;/abbr&gt;s for the posts on my site changed: from &lt;code&gt;www.chriskrycho.com/&amp;lt;year&amp;gt;/&amp;lt;title slug&amp;gt;&lt;/code&gt; to &lt;code&gt;v4.chriskrycho.com/&amp;lt;year&amp;gt;/&amp;lt;title slug&amp;gt;&lt;/code&gt;. So, for example, &lt;a href="https://v4.chriskrycho.com/2019/all-things-open-2019"&gt;my announcement&lt;/a&gt; that I‚Äôm speaking at All Things Open 2019 moved from &lt;code&gt;www.chriskrycho.com/2019/all-things-open-2019.html&lt;/code&gt; to &lt;code&gt;v4.chriskrycho.com/2019/all-things-open-2019.html&lt;/code&gt;. I spent much of this past Wednesday working on getting this migration done, after spending a fair bit of time over the last week &lt;em&gt;planning&lt;/em&gt; it. Over the course of the next few days, you‚Äôll see &lt;a href="https://v1.chriskrycho.com"&gt;v1&lt;/a&gt; and &lt;a href="https://v3.chriskrycho.com"&gt;v3&lt;/a&gt; start working; &lt;a href="https://v2.chriskrycho.com"&gt;v2&lt;/a&gt; is already up as I write this.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But &lt;em&gt;why&lt;/em&gt;, you ask? Because I now have‚Äîat last!‚Äîa stable &lt;abbr&gt;URL&lt;/abbr&gt; design for my website, which will &lt;em&gt;never have to change again&lt;/em&gt;. (‚ÄúAt last‚Äù I say because I‚Äôve been thinking about doing this since 2015. It feels &lt;em&gt;great&lt;/em&gt; to finally have it done.) I care about stable &lt;abbr&gt;URL&lt;/abbr&gt;s. I want a link to my content to work just exactly as well in 10 years as it does today. Don‚Äôt break the web! Don‚Äôt break all the documents that &lt;em&gt;aren‚Äôt&lt;/em&gt; on the web but which point to places on the web! Historically, that has meant that &lt;em&gt;every&lt;/em&gt; time I launch a new website design, I have to do a bunch of work to move the &lt;em&gt;previous&lt;/em&gt; version of the site and create redirects for it.&lt;/p&gt;
&lt;p&gt;No more! From this point forward, my content will always live at a &lt;em&gt;versioned&lt;/em&gt; &lt;abbr&gt;URL&lt;/abbr&gt;. This site is &lt;code&gt;v4.chriskrycho.com&lt;/code&gt;. When I launch the redesign I‚Äôve been working on (very soon!), it‚Äôll be &lt;code&gt;v5.chriskrycho.com&lt;/code&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; When I launch another redesign in 5 years, that‚Äôll live at &lt;code&gt;v6.chriskrycho.com&lt;/code&gt;‚Äîand so on. All I‚Äôll have to do at that point is change where &lt;code&gt;www&lt;/code&gt; and the root &lt;code&gt;feed.xml&lt;/code&gt; redirect to, and everything else will just keep working.&lt;/p&gt;
&lt;p&gt;The idea isn‚Äôt new to me‚ÄîI got it originally from &lt;em&gt;someone&lt;/em&gt; else; but I don‚Äôt remember who because it has been such a long time since I first saw the idea. I had done something &lt;em&gt;somewhat&lt;/em&gt; similar when I launched the last version of my site, archiving the previous version at &lt;code&gt;2012-2013.chriskrycho.com&lt;/code&gt;, but I failed to start the &lt;em&gt;new&lt;/em&gt; version at a similarly specific location. What this means is that I had to take and redirect every piece of content that lived on what is now &lt;code&gt;v3.chriskrycho.com&lt;/code&gt; from &lt;code&gt;www.chriskrycho.com&lt;/code&gt; to its new home. Now, as I‚Äôm preparing to do the &lt;code&gt;v5&lt;/code&gt; launch, I had to do the same &lt;em&gt;again&lt;/em&gt;, but this time for what is now at &lt;code&gt;v4&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;I don‚Äôt want to do this again! Even with building &lt;a href="https://github.com/chriskrycho/redirects"&gt;a small tool&lt;/a&gt; to generate either file-based or Netlify redirect rules, getting it right is both time-consuming and error-prone, especially when &lt;em&gt;also&lt;/em&gt; needing to do a &lt;abbr title="domain name server"&gt;DNS&lt;/abbr&gt; migration to &lt;em&gt;create&lt;/em&gt; &lt;code&gt;v4.chriskrycho.com&lt;/code&gt; and get myself off some old shared hosting and‚Ä¶ it was a pain and a lot of manual work.&lt;a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; The new approach means I will never have to do this again, and I cannot express just how happy that makes me.&lt;/p&gt;
&lt;p&gt;So: &lt;code&gt;v4&lt;/code&gt; it is for now, and &lt;code&gt;v5&lt;/code&gt; coming soon. When that happens, you‚Äôll see an announcement post in your feed, and then you‚Äôll automatically be switched over to the new root feed on the &lt;code&gt;v5&lt;/code&gt; site, without having to do anything at all. üéâ&lt;/p&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;For &lt;em&gt;very&lt;/em&gt; long-time readers: I also used this as an opportunity to get my old &lt;a href="https://52verses.chriskrycho.com"&gt;52 Verses&lt;/a&gt; site off of Blogger‚Äôs infrastructure and into a purely-static-&lt;abbr&gt;HTML&lt;/abbr&gt; setup as well. Happily, that one doesn‚Äôt involve any &lt;abbr&gt;URL&lt;/abbr&gt; tweaking‚Äîjust extracting the content from Blogger and pushing it to a static site host.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;Feel free to watch that space as I iterate on it! It‚Äôs coming together nicely but still has a long way to go.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3" role="doc-endnote"&gt;&lt;p&gt;The final redirects file is &lt;a href="https://github.com/chriskrycho/www.chriskrycho.com/blob/d0b2584d94b55060d89c500bf0f146635e17d84f/public/_redirects"&gt;here&lt;/a&gt;, if you‚Äôre curious.&lt;a href="#fnref3" class="footnote-back" role="doc-backlink"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 05 Jul 2019 10:45:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2019-07-05:/2019/my-final-round-of-url-rewrites-ever.html</guid><category>web development</category><category>writing</category><category>web design</category></item><item><title>Client-Side Ideas for Server-Side Apps</title><link>http://v4.chriskrycho.com/2018/client-side-ideas-for-server-side-apps.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;A quick note: I drafted this back in June, but forgot to actually publish it!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôve been working on the design of a particular website I maintain (not this one; keep your eyes open), and besides the fact that I have learned a &lt;em&gt;lot&lt;/em&gt; about web design in general in the years since I originally built that site, I discovered that I desperately want to use a component-drive model for developing sites on the client.&lt;/p&gt;
&lt;p&gt;In my day job, I‚Äôm used to breaking down my application into discrete components with their own responsibilities. I‚Äôve gotten spoiled by the component-driven model that dominates the front-end web development world now. (My tool of choice is usually Ember, but you‚Äôd get the same with React or Vue or whatever else.) And on the server development side, I‚Äôm desperately missing those.&lt;/p&gt;
&lt;p&gt;I‚Äôm using &lt;a href="https://getpelican.com"&gt;Pelican&lt;/a&gt; for this particular site because that‚Äôs what it‚Äôs been built on for the past few years and I have no desire to change it at the moment. And that means using &lt;a href="http://jinja.pocoo.org"&gt;Jinja2&lt;/a&gt; for templating. And Jinja2 has no notion of &lt;em&gt;components&lt;/em&gt;. Partials, yes‚Äîwith all the implicit context you have to carry around in your head. It has a few different ways you can sort of hack your way to something sort of vaguely component-like using some of its &lt;a href="http://jinja.pocoo.org/docs/2.10/templates/#block-assignments"&gt;fancy features&lt;/a&gt;. But without any kind of ‚Äúargument‚Äù or ‚Äúreturn value‚Äù/yielding (&lt;em&gt;a la&lt;/em&gt; the ideas I discussed in &lt;a href="https://v4.chriskrycho.com/2018/higher-order-components-in-emberjs.html" title="Higher-Order Components in Ember.js"&gt;this post&lt;/a&gt;). All of the solutions available in &lt;em&gt;any&lt;/em&gt; of these server-side frameworks for breaking up pages are &lt;em&gt;partial&lt;/em&gt;-style: which means they‚Äôre basically just dumb string includes!&lt;/p&gt;
&lt;p&gt;There‚Äôs nothing like the way I solve this problem in an Ember app every single day: &lt;em&gt;components&lt;/em&gt;. There‚Äôs no particular reason that the same component-based approach that has flourished on the client &lt;em&gt;can‚Äôt&lt;/em&gt; be done on the client side. It just‚Ä¶ hasn‚Äôt, mostly. Which is kind of weird.&lt;/p&gt;
&lt;p&gt;Until this week, projects like &lt;a href="https://github.com/gatsbyjs/gatsby"&gt;Gatsby&lt;/a&gt; in the React world made no sense to me at all. It seemed like using a sledgehammer to kill a spider. But after this week, I‚Äôm suddenly &lt;em&gt;very&lt;/em&gt; interested in it‚Äîand I might in fact experiment with some server-side component-driven approaches to this at some point in the future‚Äîbecause a couple of days mucking with Jinja2 has me desperately wishing for a good old Ember or React component.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As an aside: people talk about client-side development being overly complicated. I know some of what they mean, but the truth is that my experience hacking on this over the last week has actually served to remind me of just how &lt;em&gt;great&lt;/em&gt; the tooling is in this world.&lt;/p&gt;
&lt;p&gt;It‚Äôs true that there‚Äôs more complexity in many ways to building things with Ember or React or whatever other &lt;abbr&gt;JS&lt;/abbr&gt;-powered client-side framework than with plain-old &lt;abbr&gt;HTML&lt;/abbr&gt;. It‚Äôs more complex even than with something like Jinja2 or Liquid or whatever other server-side templating language you use. There‚Äôs good reason for that complexity, though: it comes with &lt;em&gt;more power&lt;/em&gt; and &lt;em&gt;more expressiveness&lt;/em&gt;. And the thing many critiquing the front-end seem to miss is that once you are used to having that power and expressiveness, it‚Äôs &lt;em&gt;really&lt;/em&gt; painful to go back to not having it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 07 Jun 2018 16:00:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2018-06-07:/2018/client-side-ideas-for-server-side-apps.html</guid><category>emberjs</category><category>javascript</category><category>web design</category></item></channel></rss>