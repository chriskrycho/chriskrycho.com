<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - web development</title><link>http://v4.chriskrycho.com/</link><description></description><lastBuildDate>Fri, 05 Jul 2019 10:45:00 -0400</lastBuildDate><item><title>My Final Round of URL Rewrites‚Ä¶ Ever.</title><link>http://v4.chriskrycho.com/2019/my-final-round-of-url-rewrites-ever.html</link><description>&lt;p&gt;&lt;i&gt;&lt;b&gt;&lt;a href="https://v4.chriskrycho.com/2018/assumed-audiences.html"&gt;Assumed Audience&lt;/a&gt;:&lt;/b&gt; web development nerds like me.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Those of you subscribed to my &lt;abbr&gt;RSS&lt;/abbr&gt; feed most likely saw a bunch of posts again earlier this week. That‚Äôs because the canonical &lt;abbr&gt;URL&lt;/abbr&gt;s for the posts on my site changed: from &lt;code&gt;www.chriskrycho.com/&amp;lt;year&amp;gt;/&amp;lt;title slug&amp;gt;&lt;/code&gt; to &lt;code&gt;v4.chriskrycho.com/&amp;lt;year&amp;gt;/&amp;lt;title slug&amp;gt;&lt;/code&gt;. So, for example, &lt;a href="https://v4.chriskrycho.com/2019/all-things-open-2019"&gt;my announcement&lt;/a&gt; that I‚Äôm speaking at All Things Open 2019 moved from &lt;code&gt;www.chriskrycho.com/2019/all-things-open-2019.html&lt;/code&gt; to &lt;code&gt;v4.chriskrycho.com/2019/all-things-open-2019.html&lt;/code&gt;. I spent much of this past Wednesday working on getting this migration done, after spending a fair bit of time over the last week &lt;em&gt;planning&lt;/em&gt; it. Over the course of the next few days, you‚Äôll see &lt;a href="https://v1.chriskrycho.com"&gt;v1&lt;/a&gt; and &lt;a href="https://v3.chriskrycho.com"&gt;v3&lt;/a&gt; start working; &lt;a href="https://v2.chriskrycho.com"&gt;v2&lt;/a&gt; is already up as I write this.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But &lt;em&gt;why&lt;/em&gt;, you ask? Because I now have‚Äîat last!‚Äîa stable &lt;abbr&gt;URL&lt;/abbr&gt; design for my website, which will &lt;em&gt;never have to change again&lt;/em&gt;. (‚ÄúAt last‚Äù I say because I‚Äôve been thinking about doing this since 2015. It feels &lt;em&gt;great&lt;/em&gt; to finally have it done.) I care about stable &lt;abbr&gt;URL&lt;/abbr&gt;s. I want a link to my content to work just exactly as well in 10 years as it does today. Don‚Äôt break the web! Don‚Äôt break all the documents that &lt;em&gt;aren‚Äôt&lt;/em&gt; on the web but which point to places on the web! Historically, that has meant that &lt;em&gt;every&lt;/em&gt; time I launch a new website design, I have to do a bunch of work to move the &lt;em&gt;previous&lt;/em&gt; version of the site and create redirects for it.&lt;/p&gt;
&lt;p&gt;No more! From this point forward, my content will always live at a &lt;em&gt;versioned&lt;/em&gt; &lt;abbr&gt;URL&lt;/abbr&gt;. This site is &lt;code&gt;v4.chriskrycho.com&lt;/code&gt;. When I launch the redesign I‚Äôve been working on (very soon!), it‚Äôll be &lt;code&gt;v5.chriskrycho.com&lt;/code&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; When I launch another redesign in 5 years, that‚Äôll live at &lt;code&gt;v6.chriskrycho.com&lt;/code&gt;‚Äîand so on. All I‚Äôll have to do at that point is change where &lt;code&gt;www&lt;/code&gt; and the root &lt;code&gt;feed.xml&lt;/code&gt; redirect to, and everything else will just keep working.&lt;/p&gt;
&lt;p&gt;The idea isn‚Äôt new to me‚ÄîI got it originally from &lt;em&gt;someone&lt;/em&gt; else; but I don‚Äôt remember who because it has been such a long time since I first saw the idea. I had done something &lt;em&gt;somewhat&lt;/em&gt; similar when I launched the last version of my site, archiving the previous version at &lt;code&gt;2012-2013.chriskrycho.com&lt;/code&gt;, but I failed to start the &lt;em&gt;new&lt;/em&gt; version at a similarly specific location. What this means is that I had to take and redirect every piece of content that lived on what is now &lt;code&gt;v3.chriskrycho.com&lt;/code&gt; from &lt;code&gt;www.chriskrycho.com&lt;/code&gt; to its new home. Now, as I‚Äôm preparing to do the &lt;code&gt;v5&lt;/code&gt; launch, I had to do the same &lt;em&gt;again&lt;/em&gt;, but this time for what is now at &lt;code&gt;v4&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;I don‚Äôt want to do this again! Even with building &lt;a href="https://github.com/chriskrycho/redirects"&gt;a small tool&lt;/a&gt; to generate either file-based or Netlify redirect rules, getting it right is both time-consuming and error-prone, especially when &lt;em&gt;also&lt;/em&gt; needing to do a &lt;abbr title="domain name server"&gt;DNS&lt;/abbr&gt; migration to &lt;em&gt;create&lt;/em&gt; &lt;code&gt;v4.chriskrycho.com&lt;/code&gt; and get myself off some old shared hosting and‚Ä¶ it was a pain and a lot of manual work.&lt;a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; The new approach means I will never have to do this again, and I cannot express just how happy that makes me.&lt;/p&gt;
&lt;p&gt;So: &lt;code&gt;v4&lt;/code&gt; it is for now, and &lt;code&gt;v5&lt;/code&gt; coming soon. When that happens, you‚Äôll see an announcement post in your feed, and then you‚Äôll automatically be switched over to the new root feed on the &lt;code&gt;v5&lt;/code&gt; site, without having to do anything at all. üéâ&lt;/p&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;For &lt;em&gt;very&lt;/em&gt; long-time readers: I also used this as an opportunity to get my old &lt;a href="https://52verses.chriskrycho.com"&gt;52 Verses&lt;/a&gt; site off of Blogger‚Äôs infrastructure and into a purely-static-&lt;abbr&gt;HTML&lt;/abbr&gt; setup as well. Happily, that one doesn‚Äôt involve any &lt;abbr&gt;URL&lt;/abbr&gt; tweaking‚Äîjust extracting the content from Blogger and pushing it to a static site host.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;Feel free to watch that space as I iterate on it! It‚Äôs coming together nicely but still has a long way to go.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3" role="doc-endnote"&gt;&lt;p&gt;The final redirects file is &lt;a href="https://github.com/chriskrycho/www.chriskrycho.com/blob/d0b2584d94b55060d89c500bf0f146635e17d84f/public/_redirects"&gt;here&lt;/a&gt;, if you‚Äôre curious.&lt;a href="#fnref3" class="footnote-back" role="doc-backlink"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 05 Jul 2019 10:45:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2019-07-05:/2019/my-final-round-of-url-rewrites-ever.html</guid><category>web development</category><category>writing</category><category>web design</category></item><item><title>I Want JSON Decoders</title><link>http://v4.chriskrycho.com/2017/i-want-json-decoders.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;This post was originally published at &lt;a href="https://www.dailydrip.com/blog/i-want-json-decoders.html"&gt;DailyDrip.com&lt;/a&gt;. They‚Äôre doing really great work over there, so I encourage you to check out their content and consider subscribing!&lt;/i&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;The other day, I got a report about the Ember.js app I‚Äôm working on: when a customer applied a coupon in the basket, they‚Äôd see an indication that the coupon was applied, but the basket total would still display as if it hadn‚Äôt been updated. Orders were &lt;em&gt;placed&lt;/em&gt; correctly, but they wouldn‚Äôt render right. I dug around for a bit, and then discovered that it was one of the (many) places where &lt;code&gt;undefined&lt;/code&gt; was biting us.&lt;/p&gt;
&lt;p&gt;How did this happen? It turned out it was a perfect storm: a confusingly-designed &lt;abbr&gt;API&lt;/abbr&gt; combined with a reasonable (but in this case, very unhelpful) assumption in our data layer. When the total on a given basket dropped to zero, our &lt;abbr&gt;API&lt;/abbr&gt; simply didn‚Äôt send back a value on the payload at all. Instead of &lt;code&gt;{ total: 0, ... }&lt;/code&gt;, there was just, well, &lt;code&gt;{ ... }&lt;/code&gt; ‚Äì¬†no &lt;code&gt;total&lt;/code&gt; field at all. Meanwhile, our data layer was designed to let a server send back only the fields which &lt;em&gt;required&lt;/em&gt; updating. That way, you can send back partial records to indicate only what has changed, instead of having to send back the whole of what might be a very large record, or a very large collection of records.&lt;/p&gt;
&lt;p&gt;The combination was terrible, though: because the server didn‚Äôt send back the &lt;code&gt;total&lt;/code&gt; field at all when it dropped to &lt;code&gt;0&lt;/code&gt;, the client never updated the total it displayed to the user: as far as it was concerned, the server was saying ‚Äúno change here!‚Äù&lt;/p&gt;
&lt;p&gt;The first and most obvious solution here, of course, is the one we implemented: we had the &lt;abbr&gt;API&lt;/abbr&gt; always send back a value, even if that value was &lt;code&gt;0&lt;/code&gt;. But it seems like there should be a better way.&lt;/p&gt;
&lt;p&gt;Lots of languages have fairly nice facilities for parsing JavaScript. Several languages even have tools for automatically constructing local, strongly-typed data structures from the structure of a &lt;abbr&gt;JSON&lt;/abbr&gt; response on an &lt;abbr&gt;API&lt;/abbr&gt;. F‚ôØ‚Äôs &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/"&gt;type providers&lt;/a&gt; are like this and &lt;em&gt;really fancy&lt;/em&gt; in the way they‚Äôll automatically derive the type for you so you don‚Äôt even have to write it out as you would in everything from Haskell to C#. But for the most part in JavaScript, you have at most a way to map data to a local record in your data store ‚Äì¬†certainly none of those type safe guarantees. In TypeScript, you can write the types you receive out carefully ‚Äì though, as I discovered in this case, probably not carefully &lt;em&gt;enough&lt;/em&gt; unless you model &lt;em&gt;everything&lt;/em&gt; as an optional field, and then you‚Äôre back to checking for &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; everywhere, and &lt;em&gt;why isn‚Äôt this already a solved problem?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And it turns out, it &lt;em&gt;is&lt;/em&gt; a solved problem ‚Äì or at least, it is in Elm, &lt;a href="https://guide.elm-lang.org/interop/json.html"&gt;via&lt;/a&gt; those &lt;a href="https://guide.elm-lang.org/interop/json.html"&gt;&lt;abbr&gt;JSON&lt;/abbr&gt; Decoders&lt;/a&gt;. I don‚Äôt get to write Elm at work right now (or any time in the foreseeable future) ‚Äì but if I can‚Äôt write Elm, I can at least try to steal a bunch of its great ideas and push them back into my TypeScript.&lt;/p&gt;
&lt;p&gt;So‚Ä¶ what exactly are &lt;abbr&gt;JSON&lt;/abbr&gt; Decoders and how would they have solved this problem? (And why, if you‚Äôre already familiar a little with Elm and possibly feeling frustrated with decoding, are they actually worth it?)&lt;/p&gt;
&lt;p&gt;A &lt;abbr&gt;JSON&lt;/abbr&gt; Decoder is just a way of guaranteeing that once you‚Äôre inside the boundary of your program, you &lt;em&gt;always&lt;/em&gt; have a valid instance of the data type you‚Äôve decoded it into, &lt;em&gt;or&lt;/em&gt; an error which tells you why you &lt;em&gt;don‚Äôt&lt;/em&gt; have a valid instance of the data. They‚Äôre composable, so you can stack them together and take smaller decoders to build bigger ones, so if you have a complex &lt;abbr&gt;JSON&lt;/abbr&gt; structure, you can define repeated substructures in it, or decoders for dissimilar sibling items in it, and use them to put together a grand decoder for your whole final structure. The decoders use the &lt;a href="http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Result"&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; type, and they hand back either &lt;code&gt;Ok&lt;/code&gt; with the decoded value or &lt;code&gt;Err&lt;/code&gt; with the reason for the failure ‚Äì and if &lt;em&gt;any&lt;/em&gt; piece of a decoded type doesn‚Äôt match with what you‚Äôve specified, you‚Äôll end up with an &lt;code&gt;Err&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, initially that might sound like a recipe for disaster ‚Äì &lt;abbr&gt;JSON&lt;/abbr&gt; payloads can be formed in weird ways all the time! ‚Äì but in fact it encourages you to think through the various ways your payloads can be formed and to account for them. &lt;em&gt;Sometimes&lt;/em&gt;, if the payload doesn‚Äôt have what you expect, that really does mean something is wrong either in your request or in the server-side implementation. In that case, getting an &lt;code&gt;Err&lt;/code&gt; is &lt;em&gt;exactly&lt;/em&gt; what you want. Other times, the server might be perfectly legitimate in sending back a variety of shapes in its response, and your responsibility is to decide how to decode it to make sense in your app. Remember, the problem I had was that I received a payload which didn‚Äôt have the data. With Elm‚Äôs decoders, I would have had three choices:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I could have treated this as an error, and passed that along to be dealt with in some way.&lt;/li&gt;
&lt;li&gt;I could have normalized it as a 0-value payload.&lt;/li&gt;
&lt;li&gt;I could have treated it &lt;em&gt;explicitly&lt;/em&gt; as a no-op, maintaining whatever previous state I had in the data store, i.e.¬†the implicit behavior of my actual data store.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What I &lt;em&gt;couldn‚Äôt&lt;/em&gt; do, though, is do any one of those &lt;em&gt;accidentally&lt;/em&gt;. I could still support incomplete payloads (via option 3), but I‚Äôd be explicitly opting into that, and there would be an obvious place where that was the case. This would be particularly helpful in a scenario where I wasn‚Äôt also in charge of the &lt;abbr&gt;API&lt;/abbr&gt;: if I couldn‚Äôt just go change it so the &lt;abbr&gt;API&lt;/abbr&gt; itself had a more sensible behavior, I could enforce whichever desired behavior on my own end. More than that, with something modeled on the Elm &lt;abbr&gt;JSON&lt;/abbr&gt; Decoders, I would &lt;em&gt;have&lt;/em&gt; to: there would be no implicit consumption of raw &lt;abbr&gt;JSON&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;The first time I played with the Elm &lt;abbr&gt;JSON&lt;/abbr&gt; Decoder approach, I thought it was a lot of work. I was used to just doing &lt;code&gt;JSON.parse()&lt;/code&gt; in JS or &lt;code&gt;json.loads()&lt;/code&gt; in Python. Now I needed to define a whole series of decode steps explicitly for every field in a response? Good grief! But it grew on me. More than that, I now actively miss it in my apps; I‚Äôd have been really happy not to have to spend a morning hunting down this particular bug.&lt;/p&gt;
&lt;p&gt;Sometimes that explicitness can seem like quite a lot of boilerplate, and indeed it is: there‚Äôs a reason the Elm &lt;a href="https://github.com/NoRedInk/elm-decode-pipeline"&gt;elm-decode-pipeline&lt;/a&gt; project exists. But even given the &lt;em&gt;initial&lt;/em&gt; nicety of something like F‚ôØ type providers, I think the Elm approach has a slight edge in the long-term for &lt;em&gt;maintainability&lt;/em&gt; specifically. It‚Äôs one thing to be able to just get to work right away and have a type definition you know to conform to a given &lt;abbr&gt;API&lt;/abbr&gt; response. It‚Äôs something else entirely to be able to &lt;em&gt;know&lt;/em&gt; that you‚Äôve accounted for all the varieties of responses you might get (and without throwing an exception for failed &lt;abbr&gt;JSON&lt;/abbr&gt; decoding at that!).&lt;/p&gt;
&lt;p&gt;Given all of this, I‚Äôve started mentally teasing out what such a &lt;abbr&gt;JSON&lt;/abbr&gt; decoding library for Ember.js might look like in TypeScript. It‚Äôs a long way off, but it‚Äôs the kind of thing that I &lt;em&gt;really&lt;/em&gt; want to experiment with, and that I think would make for a big win for the maintainability of our apps. Keep your eyes peeled, because I suspect this is another thing JS will steal from Elm, and that‚Äôs &lt;em&gt;great&lt;/em&gt; in my book.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 25 Dec 2017 19:20:00 -0500</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2017-12-25:/2017/i-want-json-decoders.html</guid><category>JavaScript</category><category>Elm</category><category>TypeScript</category><category>web development</category><category>software development</category></item><item><title>Chrome is Not the Standard</title><link>http://v4.chriskrycho.com/2017/chrome-is-not-the-standard.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;This got an enormous amount of play around the web, and as a result people have ended up translating it to other languages. If you have a translation, I‚Äôll be happy to link it here!&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://softdroid.net/chrome-ne-yavlyaetsya-standartom"&gt;Russian&lt;/a&gt;, translated by Vlad Brown (&lt;a href="http://softdroid.net" class="uri"&gt;http://softdroid.net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://getdrawings.com/uz-chrome-standart-emas"&gt;Uzbek&lt;/a&gt;, translated by Alisher&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jeremylee.sh/various/chromp.html"&gt;French&lt;/a&gt;, translated by Jeremy Lee Shields (&lt;a href="http://jeremylee.sh" class="uri"&gt;http://jeremylee.sh&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;section id="the-post" class="level2"&gt;
&lt;h2&gt;The post&lt;/h2&gt;
&lt;p&gt;Over the past few years, I‚Äôve increasingly seen articles with headlines that run something like, ‚ÄúNew Feature Coming To the Web‚Äù‚Äîfollowed by content which described how Chrome had implemented an experimental new feature. ‚ÄúYou‚Äôll be able to use this soon!‚Äù has been the promise.&lt;/p&gt;
&lt;p&gt;The reality is a bit more complicated. Sometimes, ideas the Chrome team pioneers make their way out to the rest of the browsers and become tools we can all use. Sometimes‚Ä¶ they get shelved because none of the other browsers decide to implement them.&lt;/p&gt;
&lt;p&gt;Many times, when this latter tack happens, developers grouse about the other browser makers who are ‚Äúholding the web back.‚Äù But there is a fundamental problem in this way of looking at things: &lt;em&gt;Chrome isn‚Äôt the standard.&lt;/em&gt; The fact that Chrome proposes something, and even the fact that a bunch of developers like it, does not a standard make. Nor does it impose an obligation to other browsers to prioritize it, or even to ship it.&lt;/p&gt;
&lt;p&gt;As web developers, it can be easy to become focused on interesting new features for the platform we work on. That‚Äôs no different than the excitement Android and iOS developers have when Google and Apple release new SDKs for developing on their platforms. It‚Äôs healthy to be excited about possible new features, things that might make our jobs easier or enable us to do things we couldn‚Äôt do before.&lt;/p&gt;
&lt;p&gt;But there &lt;em&gt;is&lt;/em&gt; an important difference between those platforms and the web. Those platforms are the domain of a single vendor. The web is a shared platform. This is its unique benefit, and its unique cost. It uniquely allows us to write software that can actually run, and run reasonably well, &lt;em&gt;everywhere&lt;/em&gt;. But it also means that a minimum of four companies‚Äîthe major browser vendors‚Äîget a say in whether a feature is a &lt;em&gt;feature&lt;/em&gt; or whether it‚Äôs just an interesting idea one of the teams had.&lt;/p&gt;
&lt;p&gt;Let‚Äôs get concrete about an example that‚Äôs been extremely high-profile for the last couple years‚Äîand, to be clear, one I think is a &lt;em&gt;good&lt;/em&gt; idea from Google: &lt;a href="https://developers.google.com/web/progressive-web-apps/" title="Google‚Äôs PWA page"&gt;progressive web apps&lt;/a&gt; (hereafter &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;). They have been pitched by Google and other supporters as an unambiguous win for the user experience of complex web applications. And, as a web developer myself, I‚Äôm actually inclined to agree with that assessment! However, I have fairly regularly seen people getting angry at especially Apple for not prioritizing support for &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;s in (especially iOS) Safari‚ÄîApple is, in this view, ‚Äúholding back the future of the web.‚Äù&lt;/p&gt;
&lt;p&gt;Well‚Ä¶ no. For any given idea Google pitches, Apple may or may not be sold on Google‚Äôs vision of the web, or they may even think it‚Äôs a good idea but not &lt;em&gt;more&lt;/em&gt; important than other things they‚Äôre working on.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And this is what it &lt;em&gt;means&lt;/em&gt; to be part of the web platform. No single company gets to dominate the others in terms of setting the agenda for the web. Not Firefox, with its development and advocacy of &lt;a href="http://webassembly.org/"&gt;WebAssembly&lt;/a&gt;, dear to my heart though that is. Not Microsoft and the IE/Edge team, with its proposal of the CSS grid spec in &lt;em&gt;2011&lt;/em&gt;, sad though I am that it languished for as long as it did. Not Apple, with its pitch for &lt;a href="https://webkit.org/blog/7846/concurrent-javascript-it-can-work/" title="‚ÄúConcurrent JavaScript: it can work!‚Äù"&gt;concurrent JavaScript&lt;/a&gt;. And not‚Äîhowever good its developer relations team is‚ÄîChrome, with any of the many ideas it‚Äôs constantly trying out, including &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;s.&lt;/p&gt;
&lt;p&gt;It‚Äôs also worth recognizing how these decisions aren‚Äôt, in almost any case, unalloyed pushes for ‚Äúthe future of the web.‚Äù They reflect &lt;em&gt;business&lt;/em&gt; priorities, just like any other technical prioritization. Google cares about &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;s because Google makes its money from the web and wants people to spend more of their time on the web. Apple cares about things like the battery life implications and the sheer speed of its iOS JavaScript engine because it makes money from hardware and it wants people to be happy with their iPhones and iPads.&lt;/p&gt;
&lt;p&gt;Does any one of those browser‚Äôs commitments map cleanly to &lt;em&gt;all&lt;/em&gt; users‚Äô (or even all &lt;em&gt;developers‚Äô&lt;/em&gt;) priorities? Of course not! This is and always has been the beauty of a competitive browser landscape. I‚Äôm a web developer who wants &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt; support everywhere‚Äîso I want Apple supporting it. But I‚Äôm also a smartphone user who wants those applications to &lt;em&gt;scream&lt;/em&gt; on my device‚Äînot to crawl, like they do on Chrome on Android, which is still years behind iOS in performance. As an end user, not just a developer, it matters to me that running Safari on my laptop instead of Chrome can dramatically increase my battery life.&lt;/p&gt;
&lt;p&gt;These are tradeoffs, plain and simple. Chrome ships new features fast, but they‚Äôre not always stable and they often have performance costs. Safari ships new features on a much slower cadence, but they‚Äôre usually solid and always perform incredibly well. These are both engineering and business tradeoffs, and the companies behind the browsers are making because of their own business and engineering priorities. Don‚Äôt valorize any of the browser vendors, and don‚Äôt act as if &lt;em&gt;any&lt;/em&gt; of them is the standard, or a reliable predictor of the future. Instead, value what each brings to the table, but also value the interplay &lt;em&gt;at&lt;/em&gt; the table, and the ways each of these vendors pushes the others and challenges the others‚Äô assumptions of what is most important. That‚Äôs what makes the web so great, even when it makes things move more slowly. Sometimes‚Äîoften, even!‚Äîmoving more slowly not in the &lt;em&gt;experimental&lt;/em&gt; phase but in the &lt;em&gt;finalizing&lt;/em&gt; phase makes for a much better outcome overall.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;In this case, it seems to have been the latter, since yesterday‚Äôs release of Safari Tech Preview enabled Service Workers, one of the major pieces of the &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt; push.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 21 Dec 2017 07:10:00 -0500</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2017-12-21:/2017/chrome-is-not-the-standard.html</guid><category>web development</category></item></channel></rss>