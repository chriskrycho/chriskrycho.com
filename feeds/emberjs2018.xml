<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - emberjs2018</title><link>http://v4.chriskrycho.com/</link><description></description><lastBuildDate>Tue, 29 May 2018 07:45:00 -0400</lastBuildDate><item><title>#EmberJS2018, Part 4</title><link>http://v4.chriskrycho.com/2018/emberjs2018-part-4.html</link><description>&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://v4.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v4.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v4.chriskrycho.com/2018/emberjs2018-part-3.html"&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Over the last few weeks, I’ve talked about a few big ideas that I think the Ember.js community should go after in 2018 which will help the framework excel over the next few years. This last one (like Part 3 before it) is more a &lt;em&gt;culture shift&lt;/em&gt; than a matter of &lt;em&gt;things to build&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We need to shift from a posture of defensiveness about Ember.js to one of embracing the ecosystem, and embracing our role in the ecosystem.&lt;/p&gt;
&lt;p&gt;It’s easy to end up in an us-vs.-them mentality when looking at different libraries and frameworks. It’s doubly easy to go there when you often hear “Isn’t Ember dead?” or variations on that theme. We should avoid that way of thinking anyway. And there are three big pieces to this: &lt;em&gt;contributing outwards&lt;/em&gt;, &lt;em&gt;smoothing the paths into Ember&lt;/em&gt; from other ecosystems, and &lt;em&gt;embracing the rest of the ecosystem&lt;/em&gt;.&lt;/p&gt;
&lt;section id="contributing-outwards" class="level3"&gt;
&lt;h3&gt;Contributing outwards&lt;/h3&gt;
&lt;p&gt;There is genuinely great stuff happening all over the place in the front-end, and many of the things we love about working with Ember today have come directly out of e.g. React—hello, “data-down-actions-up”! The same is true in reverse: Ember has contributed many important ideas to the broader front-end ecosystem, from its early emphasis on rigorously linking URLs and application state to helping pioneer and popularize the use of good command line tooling, to more recent emphasis on &lt;em&gt;compilation&lt;/em&gt; as a way of solving certain classes of problems.&lt;/p&gt;
&lt;p&gt;So as we build all of these things, one of the best things to do—and, I believe, one of the ways we help Ember grow!—is think about how our work can benefit the larger ecosystem. When you build a library, you should consider whether there are parts of it that &lt;em&gt;don’t&lt;/em&gt; have to be Ember specific. For example, a colleague and I recently built out the foundation of a solution for well-rationalized form-handling.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; We build it in two pieces, though: a core library in TypeScript that will work as well in Vue or React as in Ember, and an Ember component library that consumes that core functionality.&lt;/p&gt;
&lt;p&gt;The more we can take that tack in &lt;em&gt;general&lt;/em&gt;, the better. It’s the first piece of making the gap between people’s experience in other parts of the front-end ecosystem and the Ember part smaller. Ember will seem much more interesting if people find themselves &lt;em&gt;often&lt;/em&gt; getting value out of things we’ve built.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="smoothing-the-paths-in" class="level3"&gt;
&lt;h3&gt;Smoothing the paths in&lt;/h3&gt;
&lt;p&gt;The flip side of this is figuring out ways to make it easier for people coming &lt;em&gt;into&lt;/em&gt; Ember.js to map patterns from their existing experience onto the framework’s tools and patterns. The simple reality is that there are far, far more developers familiar with React, Angular, and Vue than with modern Ember.js. Ember genuinely has a lot to offer there, but we need to make it easier for people to see that value and to recognize how it’s a lot like the good parts of what they already know!&lt;/p&gt;
&lt;p&gt;This is primarily a communications effort; it means changes to the docs and to the homepage, but also to what we do in blog posts and tutorials and talks as a community!&lt;/p&gt;
&lt;p&gt;At the highest level, I cannot recommend strongly enough the model suggested by Chris Garrett in &lt;a href="https://medium.com/@pzuraq/emberjs-2018-ember-as-a-component-service-framework-2e49492734f1"&gt;his #EmberJS2018 post&lt;/a&gt;: treat Ember.js (both in the docs and also in our presentations and communications about it) as a &lt;em&gt;component-service&lt;/em&gt; framework. This not only maps more easily to patterns people know from other communities, it has the really important effect of demystifying a lot of the “magic” that seems perplexing in the framework, especially around Ember Data—which is, after all, just a service you can inject!&lt;/p&gt;
&lt;p&gt;When we write blog posts, we can accomplish a lot of this simply by being aware of the rest of the ecosystem and making analogies there. You can see an example of how I’ve started trying to do this in my recent blog post on &lt;a href="http://v4.chriskrycho.com/2018/higher-order-components-in-emberjs.html"&gt;higher-order components in Ember.js&lt;/a&gt;. It was just one little line:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In React, the [higher-order components] pattern as a whole is often known as the &lt;code&gt;renderProps&lt;/code&gt; pattern, for the way you most often accomplish it. It’s all the same idea, though!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s not a lot of extra work, but it means that if someone searches for “renderProps Ember.js” there now exists a blog post which will help someone map there existing knowledge over! I wasn’t writing a “how to do React renderProps in Ember” post—but I still smoothed the path in just a little bit. We should be doing that everywhere we can. It’s usually not a lot of effort to make those kinds of moves in talks or blog posts, but the yield is high: Ember stops being some super weird foreign entity and starts looking like a variation on a theme.&lt;/p&gt;
&lt;p&gt;There is also a much larger effort we &lt;em&gt;do&lt;/em&gt; need to undertake to make that story clearer on the home page and in the documentation—an effort that I know is already very much in consideration from chatting with the really amazing crew in &lt;code&gt;#-team-learning&lt;/code&gt; on Slack. In the &lt;strong&gt;how you can help&lt;/strong&gt; bucket: seriously please go into that channel and start chipping away at small tasks! There’s (&lt;a href="https://m.youtube.com/watch?v=Abu2BNixXak" title="“Becoming a Contributor”, my Rust Belt Rust 2017 talk"&gt;always!&lt;/a&gt;) way more work to be done than hands to do it.&lt;/p&gt;
&lt;p&gt;I think this also means prioritizing technical work that eases this. The sooner we can land the Glimmer component model, the better. The sooner we can hash out a more cogent story on routes and controllers and components, the better. The sooner we can make “npm-install-your-way-to-Ember” an actually viable strategy, the better. Because each of those things makes Ember dramatically more accessible to people working in other ecosystems today; each lowers the barrier to entry in some substantial way; and the combination of them all makes it far more viable for someone to &lt;em&gt;try&lt;/em&gt; Ember in an existing application.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="embracing-the-rest-of-the-ecosystem" class="level3"&gt;
&lt;h3&gt;Embracing the rest of the ecosystem&lt;/h3&gt;
&lt;p&gt;The final piece of this is actively embracing the best parts of the rest of the ecosystem.&lt;/p&gt;
&lt;p&gt;We as a community need to avoid defensiveness and recognize that there’s a &lt;em&gt;lot&lt;/em&gt; of good in the rest of the front-end space. I understand how it can be easy to feel defensive. Being dismissed, having people be surprised that the project even still exists, etc. gets really old after a while. But however reasonable that defensiveness is, it’s ultimately counterproductive. It makes us hold onto things we don’t need to hold onto, and it makes us ignore things that might benefit us, and as a result it can make us &lt;em&gt;needlessly weird&lt;/em&gt; technically.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Needless weirdness&lt;/em&gt; is an important idea I’d love for us to keep in mind. Any time you’re willing to move more slowly, to let the “new shiny” bake for a while to see whether it’s genuinely worth investing in, you’re going to seem weird. Likewise when you strongly embrace stability, in a broader ecosystem which hasn’t. Likewise when you value convention over configuration, in a broader ecosystem which hasn’t. But it’s important to be able to distinguish between &lt;em&gt;needful&lt;/em&gt; and &lt;em&gt;needless&lt;/em&gt; weirdness.&lt;/p&gt;
&lt;p&gt;We should have regular conversations as a community—through &lt;abbr title="request for comments"&gt;RFC&lt;/abbr&gt;s, through forum threads, through blog post arguments, etc.—about what’s &lt;em&gt;needful&lt;/em&gt; weirdness, and what has become &lt;em&gt;needless&lt;/em&gt; weirdness. (Because which weird things are needful change over time!) We should gleefully embrace the needful weirdness. But we should equally gleefully drop the needless weirdness.&lt;/p&gt;
&lt;p&gt;What makes Ember special is, by and large, &lt;em&gt;not&lt;/em&gt; the specific technical implementations we’ve landed on.&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; What makes Ember valuable is having a coherent top-to-bottom story and a rich community with a commitment to aggressively seeking out shared solutions, and an even deeper commitment to providing good migration paths forward when we change things.&lt;/p&gt;
&lt;p&gt;But here’s the thing: those values are increasingly (if slowly) being embraced &lt;em&gt;outside&lt;/em&gt; the Ember ecosystem as well. Ember can contribute and even lead in many ways here—but only if we start actively embracing the good of other parts of the front-end ecosystem.&lt;/p&gt;
&lt;p&gt;For example: I’ve heard more times than I can count over the last few years that our use of Broccoli.js is really important for Ember, and the reality is… that isn’t true. We could have built on top of just about &lt;em&gt;any&lt;/em&gt; solution, and it would have been &lt;em&gt;fine&lt;/em&gt;. Broccoli &lt;em&gt;does&lt;/em&gt; have some advantages; it also has some real disadvantages (one of which is that we’re the only ones using it!), and we should forthrightly acknowledge those. By the same token, if Webpack is working well for many people, let’s neither trash it in discussion nor ignore it in implementation. Instead, let’s make it easy for people to integrate Webpack into the Ember world.&lt;/p&gt;
&lt;p&gt;That doesn’t oblige us to chuck out our existing build tooling! It just means making our own build pipelines robust enough to interoperate well with other packaging systems. And that’s precisely what the Ember &lt;abbr&gt;CLI&lt;/abbr&gt; team has been doing! This needs to be our pattern across the board going forward.&lt;/p&gt;
&lt;p&gt;It’s truly well and good to have made a call a few years ago, and to be going out of our way to mitigate the costs of churn. At the same time, we need to communicate—to a degree that probably feels like &lt;em&gt;over&lt;/em&gt;communicating to the people who already understand all these decisions!—so that both the original rationales and the current status are accessible to all the people who &lt;em&gt;weren’t&lt;/em&gt; there when the decisions were made.&lt;/p&gt;
&lt;p&gt;Insofar as it’s true that Broccoli and Webpack solve different problems, &lt;em&gt;explaining&lt;/em&gt; how Broccoli and Webpack actually solve meaningfully different problems —or at least, &lt;em&gt;excel&lt;/em&gt; at solving different problems—is one of the most important things we can do as well. Props to Chris Thoburn (&lt;a href="https://twitter.com/runspired"&gt;@runspired&lt;/a&gt;) for doing this in a few different contexts recently, but we need a lot more of it—because it’s one example I think most people both inside and outside the Ember community have just kind of scratched their heads at for a long time (me included).&lt;/p&gt;
&lt;p&gt;Again: I take the Broccoli/Webpack example simply because it’s an obvious one. The broader point is that we need to find ways to embrace the shared solutions which emerge not only in the Ember community but in the front-end ecosystem as a whole, even as we also do the hard work to make our own shared solutions useful to the rest of the front-end ecosystem. That two-way exchange will benefit us, and smooth the paths in for newcomers, and benefit the rest of the ecosystem, too—and that’s a huge win. Because in a very real sense, we front-end developers are all in this together.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;Keep your eyes open; you’ll see a blog post announcing that along with a full set of documentation for it sometime in the next month or so!&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;To be clear: many, though certainly not all, of those specific implementations I like, but that’s beside the point.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 29 May 2018 07:45:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2018-05-29:/2018/emberjs2018-part-4.html</guid><category>emberjs</category><category>javascript</category><category>typescript</category><category>emberjs2018</category></item><item><title>#EmberJS2018, Part 3</title><link>http://v4.chriskrycho.com/2018/emberjs2018-part-3.html</link><description>&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://v4.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v4.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v4.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;One of the small changes I think would substantially improve the Ember.js ecosystem is: &lt;strong&gt;defaulting to public for discussions&lt;/strong&gt; among the core team. Indeed: for any open-source project with community involvement like Ember.js has, that should be the default. Not the &lt;em&gt;only&lt;/em&gt; option, just the default option.&lt;/p&gt;
&lt;p&gt;There is plenty of value in having private channels for discussion in contexts like this. Sometimes you have to deal with something awkward or socially difficult. Sometimes you have already taken the community’s input and just have to come to a decision about what to do on something. Private channels are useful.&lt;/p&gt;
&lt;p&gt;But: they shouldn’t be the default. They should be what you turn to when you’re in one of those particular kinds of situations which require it. The default should be public discussion and interaction.&lt;/p&gt;
&lt;p&gt;Over the last year, the maintainer-ship (and therefore decision-making) of ember-cli-typescript and the surrounding TypeScript ecosystem has grown from being pretty much just me to being a small group of four of us: Derek Wickern, Dan Freeman, James Davis, and me. We have the “final say,” so to speak, on the things we’re doing with the addon and the typings and so on. (What that actually means in practice is mostly just we all try to shoulder the burden of staying on top of pull requests.) And we have a private channel for discussions as a “core team” for projects in the &lt;a href="https://github.com/typed-ember"&gt;typed-ember&lt;/a&gt; organization.&lt;/p&gt;
&lt;p&gt;But: it’s not the default. It’s what we turn to when we’re in one of those particular kinds of situations which require it. The default is public discussion and interaction.&lt;/p&gt;
&lt;p&gt;And this isn’t just an unspoken norm or something. As a team, we all explicitly agreed that we default to public. Pretty much the only times we chat in our private channel is if we’re figuring out how to diffuse an awkward situation kindly, or if we’re adding someone else to the team. Otherwise, we try to have all our discussions in the GitHub issues for the projects or the &lt;code&gt;#topic-typescript&lt;/code&gt; room in the Ember Community Slack.&lt;/p&gt;
&lt;p&gt;This has a few major effects, as I see it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No one should feel left out or in the dark about what we’re up to. Even if we’re hashing out crazy-seeming ideas for how to move stuff forward, it’s all there for everyone to see. This includes neat things like Dan Freeman’s proof-of-concept on &lt;a href="https://twitter.com/__dfreeman/status/994410180661170177"&gt;type-checked templates&lt;/a&gt;, or our mad sprint (as a team!) to get some core improvements landed before I gave a workshop at EmberConf, or anything else we’re going after.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’re obviously available for input on things as people have questions, because we’re interacting with &lt;em&gt;each other&lt;/em&gt; in those public forums. And if we’d like to start moving some of the oft-repeated questions over to the &lt;a href="https://discuss.emberjs.com"&gt;Ember Discourse&lt;/a&gt; or to &lt;a href="https://stackoverflow.com/questions/tagged/ember.js"&gt;Stack Overflow&lt;/a&gt;, it’s still really helpful for people who &lt;em&gt;are&lt;/em&gt; on the Slack to see that we’re there and available for help.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We get to see the regular pain points others run into. That often turns into issues, priorities, etc. for us as a group. The slowly growing issue &lt;a href="https://github.com/typed-ember/ember-cli-typescript/issues/170"&gt;tracking things we need to document&lt;/a&gt; is essentially a direct product of that constant cycle of interaction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We get the benefit of input from others! If we’ve missed something, or simply failed to think of something, others in the community often haven’t. One prime example of this: the “registry” strategy we use for making things like Ember Data store, adapter, etc. lookups work came out of conversations with a community member (&lt;a href="https://github.com/maerten"&gt;Maarten Veenstra&lt;/a&gt;) which happened many months before we were in a spot where we could land that kind of thing—and initially I was pretty skeptical of it, but they were totally right, and it’s now core to how Ember’s typings work!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recommend—very strongly—that the Ember.js core team adopt the same strategy. Teams &lt;em&gt;do&lt;/em&gt; need private channels sometimes. But they shouldn’t be the default. They should be for those particular circumstances which &lt;em&gt;require&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;The biggest things I think could come out of this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A greater confidence from within the Ember.js community about what the core team is up to and where we’re going. Technical leadership seems to me to be about 10% technical brilliance and 90% clear communication. We have loads of technical brilliance; we need more communication!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More confidence in the trajectory of Ember.js from &lt;em&gt;outside&lt;/em&gt; its existing community. Seeing that there is active leadership is essential for people to have confidence that choosing Ember.js is a good choice both today and for the medium-to-long-term.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we need both of those—a lot—for Ember.js to continue to grow and thrive in the years ahead!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 23 May 2018 07:30:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2018-05-23:/2018/emberjs2018-part-3.html</guid><category>emberjs</category><category>emberjs2018</category><category>javascript</category><category>leadership</category></item><item><title>#EmberJS2018, Part 2</title><link>http://v4.chriskrycho.com/2018/emberjs2018-part-2.html</link><description>&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://v4.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://v4.chriskrycho.com/2018/emberjs2018-part-3.html"&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v4.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;section id="part-2-double-down-on-docs" class="level2"&gt;
&lt;h2&gt;Part 2: Double down on docs&lt;/h2&gt;
&lt;p&gt;The best project in the world is useless without documentation. As such, my &lt;em&gt;second&lt;/em&gt; major goal for Ember.js this year is to see our documentation story improve dramatically across a number of fronts. This is not just the kind of thing that’s important in principle or because we care about doing the right thing, though those alone &lt;em&gt;are&lt;/em&gt; sufficient motivation. It’s &lt;em&gt;also&lt;/em&gt; absolutely necessary for Ember to grow and thrive in the ways it deserves to in the years ahead.&lt;/p&gt;
&lt;p&gt;To be clear: Ember’s story around documentation is &lt;em&gt;pretty good&lt;/em&gt; and it continues to improve all the time. A few years ago, the base documentation was a mess and even figuring out where to start was hard. Today, Ember.js itself has great guides along with versioned-and-searchable &lt;abbr title="application programming interface"&gt;API&lt;/abbr&gt; documentation. The gaps now are in the &lt;em&gt;surrounding ecosystem&lt;/em&gt; and in the &lt;em&gt;framework internals&lt;/em&gt;. That’s huge progress! But if we want Ember to excel, we need to go after both of these with gusto.&lt;/p&gt;
&lt;section id="the-surrounding-ecosystem" class="level3"&gt;
&lt;h3&gt;The surrounding ecosystem&lt;/h3&gt;
&lt;p&gt;Ember Data, Ember Engines, and perhaps most important Ember &lt;abbr title="command line interface"&gt;CLI&lt;/abbr&gt; and its core dependency Broccoli all &lt;em&gt;desperately&lt;/em&gt; need documentation work just at the “how do you even use these things level.”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Broccoli.js&lt;/strong&gt; in particular is core to pretty much everything in Ember’s ecosystem, and its docs today are in roughly the state Webpack’s were back in its sad 1.0 days. We should take a page out of our own history (and Webpack’s for that matter!) and make it easy for people to use Broccoli in whatever ways their apps need, and that mostly means documenting it!&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Oli Griffith’s recent &lt;a href="http://www.oligriffiths.com/broccolijs/"&gt;blog post series&lt;/a&gt; is an incredibly valuable first step in that direction. But we need really solid documentation for &lt;a href="http://broccolijs.com"&gt;Broccoli itself&lt;/a&gt;, and also for the equally important &lt;a href="https://www.npmjs.com/search?q=keywords:broccoli-plugin"&gt;plugin ecosystem&lt;/a&gt; which is the primary way people interact with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The docs for &lt;strong&gt;Ember &lt;abbr&gt;CLI&lt;/abbr&gt;&lt;/strong&gt; itself are &lt;em&gt;decent&lt;/em&gt;, but they’re quite out of date and are about to be a lot more so because of the previously-mentioned packager bits. We need accurate and up-to-date guides and &lt;abbr&gt;API&lt;/abbr&gt; docs for the &lt;abbr&gt;CLI&lt;/abbr&gt;, and we also need clarity about the seams between Ember &lt;abbr&gt;CLI&lt;/abbr&gt; and Broccoli—something I’ve only begun to become clear on after a year of hacking on &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt;! This includes a number of kinds of documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;up-to-date guides&lt;/li&gt;
&lt;li&gt;complete &lt;abbr&gt;API&lt;/abbr&gt; documentation&lt;/li&gt;
&lt;li&gt;a “cookbook” of common patterns to use&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;Ember Data&lt;/strong&gt; docs need to be split into two parts: one for &lt;em&gt;users&lt;/em&gt; of Ember Data, and one for people building Ember Data integrations and addons. Right now, all the docs are targeted squarely at implementors of Ember Data addons. This means that one of the pieces of the Ember ecosystem that’s in widest use (and is &lt;em&gt;most&lt;/em&gt; distinct from the rest of the JS ecosystem!) is really, really hard to learn. This is the part of the framework I still struggle the most with, despite having worked full time on an Ember app for over two years now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ember Engines&lt;/strong&gt; are really need for manually breaking up your app into discrete sections which can be worked on independently and even loaded dynamically as you need them, and they provide a different level of abstraction than route-splitting and other similar approaches. (Not necessarily better or worse, but different.) Unfortunately, most of the documentation hasn’t been touched in over a year. That means if you &lt;em&gt;want&lt;/em&gt; to use Ember Engines, almost all of the information is in an example here and a Slack conversation there. We need to turn that sort of “tribal knowledge” into actual docs!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be clear, the Ember docs team is doing great work and is already going after a lot of these areas; but there’s an enormous amount of ground to cover. They could use your help! Because if Ember is going to flourish in the year(s) ahead, we need good docs. And users are the people best-placed in all the world to help write docs.&lt;/p&gt;
&lt;p&gt;So &lt;strong&gt;how you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open issues about things you don’t understand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you see an error in the documentation, open a pull request to fix it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Volunteer to proofread or edit as new materials are produced. Yes, seriously: proofreading is &lt;em&gt;incredibly&lt;/em&gt; valuable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Volunteer to write documentation of things you &lt;em&gt;do&lt;/em&gt; understand where you see gaps.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="framework-internals" class="level3"&gt;
&lt;h3&gt;Framework internals&lt;/h3&gt;
&lt;p&gt;Every time I have started poking into Ember’s own codebase—to ship a fix for some small bug, or simply to understand the behavior of my own application—I have found myself stymied by a really serious issue. &lt;em&gt;Almost nothing is documented.&lt;/em&gt; This is true of Ember proper, of Ember Data, of Ember &lt;abbr&gt;CLI&lt;/abbr&gt;, of Broccoli’s internals… Everything I named above as being in need of &lt;em&gt;user&lt;/em&gt;-facing documentation also desperately needs &lt;em&gt;developer&lt;/em&gt;-facing documentation.&lt;/p&gt;
&lt;p&gt;A lot of this happens naturally in projects developed organically by small teams. I’ve seen it in my own current job: the &lt;em&gt;vast&lt;/em&gt; majority of our codebase is without any formal documentation, because it didn’t &lt;em&gt;require&lt;/em&gt; it when we were a much smaller organization working on a much smaller codebase. But no project—whether private or open-source—can grow or thrive unless it becomes possible for new contributors to come in, understand the system as it exists, and start making changes effectively. “Tribal knowledge” is &lt;em&gt;not&lt;/em&gt; a bad thing in some contexts, but it does not scale.&lt;/p&gt;
&lt;p&gt;The Ember.js ecosystem needs developer documentation of several sorts, then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Architecture documents:&lt;/strong&gt; what are the pieces of the framework or library in question, and how do they fit together? This is often the hardest piece to maintain, simply because it changes organically over time, and unlike the next couple examples it doesn’t have an inherent attachment to the code. However, it’s also the piece that’s absolutely the most important, because it’s what gives anyone trying to dive in and contribute the orientation they need to be effective.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“Why” comments:&lt;/strong&gt; The internals of the core libraries very often have good reasons for doing things even in apparently odd ways. However, the reasons for those are &lt;em&gt;very&lt;/em&gt; rarely written down anywhere. This is &lt;em&gt;precisely&lt;/em&gt; what comments are for! If some implementation actually &lt;em&gt;can’t&lt;/em&gt; be simplified in the way it looks like it can, write it down right there in a comment! This will save both you and other developers lots of wasted time with false starts and useless pull requests and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Documentation of private &lt;abbr&gt;API&lt;/abbr&gt;:&lt;/strong&gt; Much of the public-facing &lt;abbr&gt;API&lt;/abbr&gt; for Ember is fairly clear (modulo caveats around completeness and accuracy). However, most internal &lt;abbr&gt;API&lt;/abbr&gt; is essentially entirely undocumented. This makes it &lt;em&gt;extremely&lt;/em&gt; difficult for someone to know how to use the internal &lt;abbr&gt;API&lt;/abbr&gt;s when working on internal code!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these things came home to me pretty sharply as I started poking at the Glimmer VM project to see where and how I can pull together my knowledge of both TypeScript and Rust to drive some of those efforts forward. The core team folks I’ve interacted with have all been &lt;em&gt;extremely&lt;/em&gt; helpful—and that’s always been true all along the way!—but they’re also busy, and taking the time to write down something &lt;em&gt;once&lt;/em&gt; ends up being a major “force multiplier”. You can explain the same thing to multiple different people via multiple different conversations, or you can write it down &lt;em&gt;once&lt;/em&gt; and make it a resource that anyone can use to start working effectively in the system!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you’re a current Ember developer in any part of the ecosystem: &lt;em&gt;start writing down what you know.&lt;/em&gt; If a question comes up more than once, put it in a document somewhere. If nothing else, then you can link to it instead of typing it up one more time in Slack!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re just getting started on developing core Ember functionality: &lt;em&gt;write down what you learn.&lt;/em&gt; If you’re working through some section of the codebase, don’t understand it, and then come to understand it by way of asking questions, add documentation for that! You’ll help the next person coming along behind you!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;In short: please write more things down! We need user-facing and developer-facing documentation; they need to be different and distinct from each other; and we need the whole range in both. That’s an &lt;em&gt;enormous&lt;/em&gt; amount of work, and it’s very different from programming (and therefore harder for many of us).&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But it’s also work that will pay equally enormous dividends in enabling the Ember community to grow in both the &lt;em&gt;number&lt;/em&gt; and the &lt;em&gt;effectiveness&lt;/em&gt; of its contributors—and that’s something we very much need!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;Most of Webpack’s bad reputation is long-since undeserved: it &lt;em&gt;was&lt;/em&gt; poorly documented… a few years ago. So was Ember!&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;I’ll let you draw your own conclusions about my own relationship to writing given the absurd number of words I put out on this site.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 18 May 2018 22:00:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2018-05-18:/2018/emberjs2018-part-2.html</guid><category>emberjs</category><category>javascript</category><category>typescript</category><category>emberjs2018</category></item><item><title>#EmberJS2018, Part 1</title><link>http://v4.chriskrycho.com/2018/emberjs2018-part-1.html</link><description>&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v4.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Docs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://v4.chriskrycho.com/2018/emberjs2018-part-3.html"&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v4.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;section id="finishing-what-weve-started" class="level2"&gt;
&lt;h2&gt;Finishing What We’ve Started&lt;/h2&gt;
&lt;p&gt;What I want, more than any new feature anyone could come up with, is for this to be the year Ember.js commits to &lt;em&gt;finishing what we have started&lt;/em&gt;. The last few years have seen the Ember team do a lot of really important exploratory work, including projects like &lt;a href="https://glimmerjs.com"&gt;Glimmer.js&lt;/a&gt;; and we have landed some of the initiatives we have started. But I think it’s fair to say that focus has not been our strong suit. It’s time for a year of &lt;em&gt;shipping&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We need to land all the things we have in flight, and as much as possible avoid the temptation (much though I feel it myself!) to go haring off after interesting new ideas. As such, literally everything I list below is an effort &lt;em&gt;already in progress&lt;/em&gt;. It’s just a matter of making concerted efforts as a community to land them.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that way of putting it is important: we have to make concerted efforts &lt;em&gt;as a community&lt;/em&gt; to land these things. Very, very few people are paid to work on Ember.js full time—far too few to accomplish all of this! If these things matter to you and your company, find a way to carve out time for it. Even if it’s just a few hours a week, even if it’s “just” (and there’s no “just” about these!) helping out with triage of open issues or answering questions in Slack or Discourse or Stack Overflow, even if it doesn’t &lt;em&gt;feel&lt;/em&gt; like a lot… it adds up.&lt;/p&gt;
&lt;p&gt;To be very clear, before I go any further: none of this is a knock on everything that the Ember core team and community have done in the last couple years. A lot of things that have landed along the way—dropping in the Glimmer rendering engine midway through the 2.x series, landing ES5 getters just weeks ago in Ember 3.1, and so on—are genuinely great! &lt;em&gt;All&lt;/em&gt; that I mean is, a year where we land and polish everything would make everything that much more awesome (and make Ember that much more competitive a choice in the client-side framework world).&lt;/p&gt;
&lt;p&gt;So: what do we need to ship this year?&lt;/p&gt;
&lt;section id="land-glimmer-components-in-ember.js-proper" class="level3"&gt;
&lt;h3&gt;Land Glimmer &lt;code&gt;&amp;lt;Component&amp;gt;&lt;/code&gt;s in Ember.js proper&lt;/h3&gt;
&lt;p&gt;We’ve taken the first steps toward this already via a number of &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;s that were written late last year and merged since. We need to finish the implementation for these. That means getting the &lt;a href="https://github.com/emberjs/ember.js/issues/16301"&gt;Glimmer Components in Ember&lt;/a&gt; quest across the finish line.&lt;/p&gt;
&lt;p&gt;The whole story here will make Ember &lt;em&gt;feel&lt;/em&gt; much more modern in a variety of ways, as well as enabling some great performance and programming model wins: Immutable component arguments! Auto-tracked class properties! &lt;code&gt;&amp;lt;AngleBracketComponent&amp;gt;&lt;/code&gt; invocation! Clear semantic distinctions between arguments and local context! So many good things. We just need to land it! &lt;a href="https://github.com/emberjs/ember.js/issues/16301"&gt;The quest&lt;/a&gt; needs to be moving forward, not stagnant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Show up and volunteer to go after pieces of the quest. There are people willing to mentor you through the work that needs to be done!&lt;/li&gt;
&lt;li&gt;Test it as it lands! You don’t have to commit to &lt;em&gt;shipping&lt;/em&gt; things in your app to &lt;em&gt;test&lt;/em&gt; them in your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="land-a-lot-of-ember-cli-efforts" class="level3"&gt;
&lt;h3&gt;Land a &lt;em&gt;lot&lt;/em&gt; of Ember CLI efforts&lt;/h3&gt;
&lt;p&gt;There are a great many Ember CLI efforts in flight. Every last one of them should be on stable and in use before the end of the year.&lt;/p&gt;
&lt;section id="module-unification" class="level4"&gt;
&lt;h4&gt;Module Unification&lt;/h4&gt;
&lt;p&gt;The &lt;a href="https://github.com/dgeb/rfcs/blob/module-unification/text/0000-module-unification.md"&gt;Module Unification &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;&lt;/a&gt; was opened in May 2016 and merged October 2016. There has been a lot of progress made, but we need to &lt;em&gt;ship it&lt;/em&gt;—from where I stand, it’d be nice if it landed less than 2 years after we approved it! And we’re &lt;a href="https://github.com/emberjs/ember.js/issues/16373"&gt;getting pretty close&lt;/a&gt;; you can actually use the Module Unification blueprint in an Ember application today. Some stuff doesn’t work &lt;em&gt;quite&lt;/em&gt; right yet, but it’s getting close.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; try it out! Spin up new apps with the module unification blueprint flag, and try running the migrator codemod, and report back on what breaks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="broccoli-1.0" class="level4"&gt;
&lt;h4&gt;Broccoli 1.0&lt;/h4&gt;
&lt;p&gt;We’re &lt;em&gt;super&lt;/em&gt; close on this one—Oli Griffiths has done some heroic work on this since EmberConf—but we need to finish it. Ember CLI, for historical reasons, has been using a fork of Broccoli.js for quite some time. This divergence has caused all manner of trouble, including compatibility issues between Broccoli plugins and an inability to take advantage of the best things that have landed in Broccoli since the fork happened.&lt;/p&gt;
&lt;p&gt;Perhaps the single most important example of that is that Broccoli 1.0 supports the use of the system &lt;code&gt;tmp&lt;/code&gt; directory. That single change will improve the performance of Ember CLI &lt;em&gt;dramatically&lt;/em&gt;, especially on Windows. It will also flat-out eliminate a number of bugs and odd behaviors that appear when trying to integrate Ember CLI with other file watching tools (e.g. TypeScript’s &lt;code&gt;--watch&lt;/code&gt; invocation).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; once the Ember CLI team says it’s ready for testing, test your app and addons with it! Make sure that everything works as it should—specifically, that you’re not making any assumptions that depend on either the forked &lt;abbr&gt;API&lt;/abbr&gt; or the location of the &lt;code&gt;tmp&lt;/code&gt; directory used for intermediate build steps.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-new-packager-setup-with-tree-shaking-and-app-splitting" class="level4"&gt;
&lt;h4&gt;The new &lt;code&gt;Packager&lt;/code&gt; setup, with tree-shaking and app-splitting&lt;/h4&gt;
&lt;p&gt;One of the current major pain points with Ember’s build pipeline is that it’s hard to extend, and not really documented at all. (I’ll have a &lt;em&gt;lot&lt;/em&gt; more to say on the question of documentation in the next post!) However, work is in progress to change that, too!&lt;/p&gt;
&lt;p&gt;The accepted-and-actively-being-worked-on &lt;a href="https://github.com/ember-cli/rfcs/blob/master/active/0051-packaging.md"&gt;Packaging Ember CLI &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;&lt;/a&gt; aims to fix both of these. Quoting from it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The current application build process merges and concatenates input broccoli trees. This behaviour is not well documented and is a tribal knowledge. While the simplicity of this approach is nice, it doesn’t allow for extension. We can refactor our build process and provide more flexibility when desired.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few of the things we can expect to be possible once that effort lands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tree-shaking – we can lean on Rollup.js to get &lt;em&gt;only&lt;/em&gt; the code we actually need, cutting shipped file size dramatically&lt;/li&gt;
&lt;li&gt;app-splitting – lots of different strategies to explore, including route-based or “section”-based, etc.&lt;/li&gt;
&lt;li&gt;static-build-asset-splitting – no reason to cache-bust your &lt;em&gt;dependencies&lt;/em&gt; every time the app releases!&lt;/li&gt;
&lt;li&gt;distinct app builds – you could ship one build of your app for browsers which support ES Modules and one for browsers which don’t (heeeeey, IE11) – letting you minimize the payload size for the ones that do&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you know Ember CLI internals: pop into #-dev-ember-cli and ask how you can help land the features&lt;/li&gt;
&lt;li&gt;If you don’t know Ember CLI internals: also pop into #-dev-ember-cli, but ask instead how you can &lt;em&gt;test&lt;/em&gt; the changes&lt;/li&gt;
&lt;li&gt;Help document those internals (see the next post in this series)&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="install-your-way-to-ember" class="level3"&gt;
&lt;h3&gt;Install-your-way-to-Ember&lt;/h3&gt;
&lt;p&gt;We need to finish splitting apart the Ember source from its current state of still being fairly monolith and get it turned into a true set of packages. The new Modules API which landed last year was a huge step toward this and made the experience on the developer side &lt;em&gt;look&lt;/em&gt; like this should be possible—but that’s still a shim around the actual non-modularized Ember core code. The process of splitting it apart &lt;em&gt;is happening&lt;/em&gt;, but we need to finish it.&lt;/p&gt;
&lt;p&gt;The promise here is huge: Ember will be able to be the kind of thing you can progressively add to your existing applications and slowly convert them, rather than something that comes along all as a large bundle. It’s technically possible to do this today, but you cannot drop in &lt;em&gt;just the view layer&lt;/em&gt;, for example, and that’s a huge value for people who want to try out the programming model or add it for just one feature in an existing application.&lt;/p&gt;
&lt;p&gt;Making it possible for people to install Glimmer components, then the service layer, then the router, and so on as they need it will make adoption easier for people who are curious about the framework. But it will also be a huge boon to those of us already using Ember and wanting to migrate existing applications (often a tangled mix of server-side rendering and massive jQuery spaghetti files!) to Ember progressively. I’ve had multiple scenarios come up at my own job in just the last month where this would have been hugely useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; make it known that you’re willing to help work on breaking apart Ember into its constituent pieces, and as that effort lands (hopefully over the rest of this year!) test it in your own apps and addons, and find the pain points in the install-your-way-to-the-framework process.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="make-typescript-great-everywhere" class="level3"&gt;
&lt;h3&gt;Make TypeScript &lt;em&gt;great&lt;/em&gt; everywhere&lt;/h3&gt;
&lt;p&gt;This one is near and dear to my heart… and it also really falls in no small part to me and the rest of the group working on ember-cli-typescript and type definitions for the Ember ecosystem!&lt;/p&gt;
&lt;p&gt;There are two big wins we can land this year:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Built-in support in Ember.js itself.&lt;/li&gt;
&lt;li&gt;Solid type definitions for the rest of the Ember.js ecosystem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you don’t like TypeScript, don’t panic! The upshot here will actually be a better experience for &lt;em&gt;all&lt;/em&gt; users of Ember.js.&lt;/p&gt;
&lt;section id="built-in-support-in-ember.js-itself" class="level4"&gt;
&lt;h4&gt;1. Built-in support in Ember.js itself&lt;/h4&gt;
&lt;p&gt;One of my goals for this summer&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; is to finish an &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; making TypeScript a first-class citizen of the Ember.js ecosystem. To clarify what this will and won’t entail (assuming it’s accepted, assuming I ever manage to finish writing it!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ember will &lt;em&gt;always&lt;/em&gt; be JS-first, and it will &lt;em&gt;never&lt;/em&gt; require type metadata reflected to runtime, unlike e.g. Angular. No one will ever have a &lt;em&gt;worse&lt;/em&gt; experience because they prefer JS to TS. The idea will be to make TypeScript an &lt;em&gt;equally&lt;/em&gt; good experience, and to include it for consideration when thinking about design choices for new features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember users, both JS and TS, will get the &lt;em&gt;benefits&lt;/em&gt; of having good types available right out of the box: many editors and IDEs can use TypeScript type definitions to enable better docs, autocompletion, etc.—and we may even be able to leverage it for &lt;a href="https://twitter.com/__dfreeman/status/994410180661170177"&gt;better validation of Handlebars templates&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll have (because we’ll have to have!) a story on what we support in terms of backwards compatibility and SemVer for TypeScript and Ember and the type definitions. Necessarily, it has been the Wild West for the first year of concentrated effort here, trying to get our type definitions from “barely exist and not useful” to “full coverage and 99% right.” But as TypeScript becomes more widely used, we have to have a stability story, and we very soon will.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s also ongoing work to convert Ember’s own internals to TypeScript, and landing that will help guarantee that the type definitions for Ember are actually &lt;em&gt;correct&lt;/em&gt;, which in turn will make the experience for everyone better. (Bad type definitions are worse than &lt;em&gt;no&lt;/em&gt; type definitions!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; engage in the &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process once we get it started, and if you are up for it show up to help convert the Ember internals to TypeScript as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solid-type-definitions-for-the-rest-of-the-ember.js-ecosystem" class="level4"&gt;
&lt;h4&gt;2. Solid type definitions for the rest of the Ember.js ecosystem&lt;/h4&gt;
&lt;p&gt;Closely related to making TypeScript a first-class citizen for Ember.js itself is getting the pieces in place for the rest of the ecosystem as well. That means we need type definitions for addons—a &lt;em&gt;lot&lt;/em&gt; of them! The ember-cli-typescript team will (hopefully late this month or in early June) be launching a quest issue to get type definitions for the whole Ember ecosystem in place—by helping convert addons to TS if their authors desire it, or by adding type definitions to the addons if they’re up for it, or by getting them up on DefinitelyTyped if they’re totally disinterested. (And, as I’ll note again in that quest issue, it’s totally fine for people &lt;em&gt;not&lt;/em&gt; to be interested: there &lt;em&gt;is&lt;/em&gt; a maintenance burden there!) The goal, again, is that when you’re using &lt;em&gt;any&lt;/em&gt; part of the Ember ecosystem it’ll be easy to get all the benefits of TypeScript—and indeed that in many cases you’ll get a fair number of those benefits as a JS user.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; participate in the quest issue once it’s live! We’ll help mentor you through the process of converting addons to TypeScript, writing type definitions and getting them well-validated, and so on!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That’s a lot to do. More than enough all by itself, and a lot of moving parts. As such, I’ll reiterate what I said at the start: we don’t need new features this year. &lt;strong&gt;It’s time for a year of &lt;em&gt;shipping&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;To put it in the terms the Rust community used for their similar push at the end of 2017, and which we have often used to describe the ongoing efforts in Rust to land the “Rust 2018 edition”: this is an “impl period”—a play on the Rust &lt;code&gt;impl&lt;/code&gt; keyword, used to describe the &lt;em&gt;implementation&lt;/em&gt; of the behavior associated with a given data type. You can think of this as the same: it’s the implementation of the good ideas we have.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;Confession: it was a goal for the spring but I found myself utterly exhausted after EmberConf… and had a full month with &lt;em&gt;another&lt;/em&gt; major talk given for internal purposes afterwards. I’m worn out.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 11 May 2018 09:30:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2018-05-11:/2018/emberjs2018-part-1.html</guid><category>emberjs</category><category>javascript</category><category>typescript</category><category>emberjs2018</category></item></channel></rss>