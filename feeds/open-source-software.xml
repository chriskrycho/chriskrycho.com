<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - open-source software</title><link>http://www.chriskrycho.com/</link><description></description><lastBuildDate>Thu, 11 Oct 2018 08:30:00 -0400</lastBuildDate><item><title>Making Things Helps</title><link>http://www.chriskrycho.com/2018/making-things-helps.html</link><description>&lt;p&gt;As a small bit of follow-up to my recent post on &lt;a href="https://www.chriskrycho.com/2018/cant-stop-wont-stop.html" title="Can’t Stop, Won’t Stop"&gt;blogging as part of what helps with my burnout&lt;/a&gt;, I thought it worth noting that this principle is a bit broader than just &lt;em&gt;blogging&lt;/em&gt; for me. Writing (currently mostly expressed in the form of blogging) is deep in me, and so blogging remains a helpful outlet.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; But so a fair number of other things which might look like &lt;em&gt;work&lt;/em&gt; to other people.&lt;/p&gt;
&lt;p&gt;Tonight I started putting together some thoughts on what some extensions to an open source software library I maintain might look like.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; This after what has to be a record-setting week: the kind in which I reviewed and merged 60 pull requests for a ridiculous crunch of a project I’m on at work. I’m exhausted. I had another one of those moments this evening where I started crying a bit as I was sitting down to eat dinner and praying beforehand. Why? Just because I’m &lt;em&gt;that&lt;/em&gt; emotionally wrung out: nothing was wrong in the particular moment at all, and probably the “trigger” was actually the small bit of relief of being &lt;em&gt;away&lt;/em&gt; from the particular (very weird) stressors of this project at work for a while.&lt;/p&gt;
&lt;p&gt;So why in the world did I start writing up thoughts about an open-source library after that? And why have I been spending my evenings reading all about a particularly nerdy bit of computer science this week?&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Because, as I suggested at the beginning, these things are what end up feeling restful or re-energizing to me. (That might make me weird. I’m okay with that. I’ve been weird for a long time.)&lt;/p&gt;
&lt;p&gt;Much of the advice around burnout emphasizes “not working.” There’s good reason for that, but it’s important to understand the underlying reasons for that advice. Burnout &lt;em&gt;usually&lt;/em&gt; stems from work-related stress, for an appropriately broad definition of “work.”&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Besides the stressors themselves, many of us—whether we admit it or not!—put far too much of our self-worth into our work. Putting it aside leaves us feeling worthless or useless. If your burnout is coming from the combo of stress and having invested your self-worth in your work, then you’re not likely to get better until you disengage from that work &lt;em&gt;entirely&lt;/em&gt; for large stretches of time: that is, until you are &lt;em&gt;forced&lt;/em&gt; to divest your self-worth from your work.&lt;/p&gt;
&lt;p&gt;But there are other ways burnout comes to pass. For me, it’s a combination of particular work stressors with the stress my family has undergone over the last year: a cross-country move, building a house, and most of all my father’s (so far blessedly successful) fight with a brain tumor. The work stressors are largely not related to the work &lt;em&gt;load&lt;/em&gt;, though; and I have by God’s grace kept my personal sense of meaning and value detached from my job. Insofar as my work is involved, the burnout is much more about frustrations and stymied aims and boredom with certain parts of the job than it is about overwork! The net of that is that doing some open-source brainstorming in the evenings is not a way of reinforcing the things that have caused this (though it very well &lt;em&gt;could&lt;/em&gt; become that). Rather, left in the same kinds of space as my blogging (“not on a schedule, not on a deadline, but whenever I feel like it”), it ends up being a &lt;em&gt;counter&lt;/em&gt; to burnout.&lt;/p&gt;
&lt;p&gt;All of which is a long way of saying: if you’re experiencing burnout, you need to figure out &lt;em&gt;why&lt;/em&gt; if you want to have a chance of getting through it. Otherwise good advice will actually mislead you otherwise. If your problem is that you’ve dumped all your self-worth into your open-source work, &lt;em&gt;stop doing open-source work&lt;/em&gt;. On the other hand, if the cause of your burnout is that you’re deeply invested in caretaking for someone in your family, it might well be that doing something that looks like &lt;em&gt;work&lt;/em&gt; to someone else—even writing a novel or something similarly massive in scale—might be a genuine relief and outlet for you.&lt;/p&gt;
&lt;p&gt;For me, &lt;em&gt;genuine rest&lt;/em&gt; often includes writing and learning and thinking and creating—not by themselves, but as part of a healthy mix that includes many other good things: a healthy dose of exercise and building LEGO contraptions with my daughters and watching &lt;cite&gt;The Expanse&lt;/cite&gt; with my wife, and enjoying the company of good friends over good food and good drinks.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’ve actually been blogging longer than I’ve been writing software in any meaningful way. I did tiny bits of Visual Basic and C++ in middle school and high school, and I started picking up &lt;abbr&gt;HTML&lt;/abbr&gt; and &lt;abbr&gt;CSS&lt;/abbr&gt; for the sake of my website and blog in college. I didn’t pick up programming in a more general sense until I learned Fortran for my senior capstone project in physics!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’m thinking about &lt;code&gt;Future&lt;/code&gt; and/or &lt;code&gt;Task&lt;/code&gt; extensions to &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt;, for those of you interested in the details. I’ll have a GitHub issue up sometime soon-ish, and might blog about it here as well.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;&lt;a href="https://en.m.wikipedia.org/wiki/Conflict-free_replicated_data_type"&gt;&lt;abbr title="Conflict-free Replicated Data Type"&gt;CRDT&lt;/abbr&gt;s&lt;/a&gt;, for my fellow software nerds out there. &lt;a href="http://archagon.net/blog/2018/03/24/data-laced-with-history/" title="Data Laced With History"&gt;This introduction&lt;/a&gt; is absolutely outstanding, as are a number of the pieces it links to. Among other things, I actually &lt;em&gt;understand&lt;/em&gt; a few concepts in set theory I’ve had a hard time wrapping my head around in the past, because the explanations here are so good.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;As I talked about in my &lt;a href="https://newrustacean.com/show_notes/bonus/burnout/"&gt;New Rustacean episode about burnout&lt;/a&gt;, lots of things which &lt;em&gt;aren’t&lt;/em&gt; “work” in the “what I do to pay the bills” sense can also be triggers.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 28 Sep 2018 20:45:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-09-28:/2018/making-things-helps.html</guid><category>burnout</category><category>open-source software</category><category>productivity</category><category>rest</category></item><item><title>True Myth 2.1.0 Released</title><link>http://www.chriskrycho.com/2018/true-myth-210-released.html</link><description>&lt;p&gt;I’ve just released True Myth 2.1.0 (&lt;a href="https://github.com/chriskrycho/true-myth/tree/v2.1.0"&gt;source&lt;/a&gt;, &lt;a href="https://true-myth.js.org"&gt;docs&lt;/a&gt;), which includes a handful of new utility functions for use with the &lt;code&gt;Maybe&lt;/code&gt; types and arrays or tuples. Note that to make use of these you’ll need to be on at least TypeScript 3.0: they take advantage of the some of the shiny new features in the type system!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; and, five minutes later, versions 2.1.1 and 2.1.2 are out with bugfixes consisting of “I forgot to export two functions. Now they’re exported.” Because that’s how this &lt;em&gt;always&lt;/em&gt; works, right?&lt;/p&gt;
&lt;p&gt;Here’s what’s new:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.find&lt;/code&gt;:&lt;/strong&gt; for those times when you want to do &lt;code&gt;Array.prototype.find&lt;/code&gt; and would love to not have to wrap up the result with a &lt;code&gt;Maybe&lt;/code&gt; explicitly every time. As with most functions in True Myth, it’s curried so you can easily use it in a functional programming style.&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

let foundRegular = Maybe.find(n =&amp;gt; n &amp;gt; 1, [1, 2, 3]);
console.log(foundRegular.toString());  // Just(2)

let notFound = Maybe.find(n = n &amp;lt; 1, [1, 2, 3]);
console.log(notFound.toString());  // Nothing

let findAtLeast5 = Maybe.find((n: number) =&amp;gt; n &amp;gt; 5);
let foundCurried = findAtLeastFive([2, 4, 6, 8, 10]);
console.log(foundCurried.toString());  // Just(6)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.head&lt;/code&gt; (aliased as &lt;code&gt;Maybe.first&lt;/code&gt;):&lt;/strong&gt; for getting the first item of an array safely. Like lodash’s &lt;code&gt;_.head&lt;/code&gt; (or &lt;code&gt;someArray[0]&lt;/code&gt;) but it returns a &lt;code&gt;Maybe&lt;/code&gt; instead of possibly giving you back &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

let empty = Maybe.head([]);
console.log(empty.toString());  // Nothing

let hasItems = Maybe.head([1, 2, 3]);
console.log(hasItems.toString());  // Just(1)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.last&lt;/code&gt;:&lt;/strong&gt; the same as &lt;code&gt;Maybe.head&lt;/code&gt;, but for getting the &lt;em&gt;last&lt;/em&gt; element in an array.&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

let empty = Maybe.last([]);
console.log(empty.toString());  // Nothing

let hasItems = Maybe.last([1, 2, 3]);
console.log(hasItems.toString());  // Just(3)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.all&lt;/code&gt;:&lt;/strong&gt; for converting an array of &lt;code&gt;Maybe&lt;/code&gt;s to a &lt;code&gt;Maybe&lt;/code&gt; of an array. If you have an array whose contents are all &lt;code&gt;Maybe&lt;/code&gt;s, it’s sometimes useful to be able to flip that around so that if all of the items are &lt;code&gt;Just&lt;/code&gt;s, you get back a single &lt;code&gt;Just&lt;/code&gt; wrapping the array of the values which were wrapped in all the &lt;code&gt;Just&lt;/code&gt;s in the array, but if any were &lt;code&gt;Nothing&lt;/code&gt;, the whole thing is a single &lt;code&gt;Nothing&lt;/code&gt;. This works for both heterogeneous and homogenous arrays, which is pretty cool. A code sample will make this a lot clearer:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { just, nothing } from &amp;#39;true-myth/maybe&amp;#39;;

let includesNothing = Maybe.all(just(2), nothing&amp;lt;string&amp;gt;());
console.log(includesNothing.toString());  // Nothing

let allJusts = Maybe.all(just(2), just(&amp;#39;hi&amp;#39;), just([42]));
console.log(allJusts.toString());  // Just([2, &amp;#39;hi&amp;#39;, [42]]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting type of both &lt;code&gt;includesNothing&lt;/code&gt; and &lt;code&gt;allJusts&lt;/code&gt; here is &lt;code&gt;Maybe&amp;lt;Array&amp;lt;string | number | Array&amp;lt;number&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.tuple&lt;/code&gt;:&lt;/strong&gt; just like &lt;code&gt;Maybe.all&lt;/code&gt; except it works in tuples (preserving their types’ order) for up to five-item tuples. (As the docs I wrote say: if you’re doing a larger tuple than that I don’t want to know what you’re doing but I won’t help with it!)&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { just, nothing } from &amp;#39;true-myth/maybe&amp;#39;;

type Tuple = [Maybe&amp;lt;number&amp;gt;, Maybe&amp;lt;string&amp;gt;, Maybe&amp;lt;number[]&amp;gt;];

let withNothing: Tuple = [just(2), nothing(), just([42])];
let withNothingResult = Maybe.tuple(withNothing);
console.log(withNothingResult.toString());  // Nothing

let allJusts: Tuple = [just(2), just(&amp;#39;hi&amp;#39;), just([42])];
let allJustsResult = Maybe.tuple(allJusts);
console.log(allJustsResult.toString());  // Just([2, &amp;quot;hi&amp;quot;, [42]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These have the same &lt;em&gt;output&lt;/em&gt; (i.e. the same underlying representation) as the array output, but a different type. The resulting type of both &lt;code&gt;includesNothing&lt;/code&gt; and &lt;code&gt;allJusts&lt;/code&gt; here is &lt;code&gt;Maybe&amp;lt;[number, string, Array&amp;lt;number&amp;gt;]&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once TypeScript 3.1 is out, I should be able to collapse these into a single &lt;code&gt;all&lt;/code&gt;, and &lt;code&gt;tuple&lt;/code&gt; will just become an alias for it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 02 Sep 2018 16:25:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-09-02:/2018/true-myth-210-released.html</guid><category>TypeScript</category><category>functional programming</category><category>monads</category><category>libraries</category><category>software development</category><category>open source software</category><category>True Myth</category></item><item><title>Stable Libraries</title><link>http://www.chriskrycho.com/2018/stable-libraries.html</link><description>&lt;p&gt;&lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt; has changed very little since I first released it, and although I have a few ideas for small additions I might make, I don’t really expect it to change much in the future. &lt;em&gt;That’s okay.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There’s a strange idea in some parts of the software development ecosystem—a way of think I also find myself falling into from time—which takes a lack of changes to a library as a sign that the library is &lt;em&gt;dead&lt;/em&gt; and shouldn’t be used. I call this idea “strange” because if you take a step back, it’s actually not necessarily very healthy for certain kinds of libraries to be changing all the time.&lt;/p&gt;
&lt;p&gt;But if you’re in an ecosystem where rapid change in libraries is normal, you end up assuming that something which &lt;em&gt;isn’t changing&lt;/em&gt; is &lt;em&gt;unmaintained&lt;/em&gt; or &lt;em&gt;not usable&lt;/em&gt; when in fact the opposite may be true. If someone opens a pull request or an issue for True Myth, I generally get to it in under a day, often under an hour if it’s in my normal working time. (That’s easy enough for me to do because it’s a small, simple library; I don’t have the scale problems that larger projects do.) The project isn’t &lt;em&gt;dead&lt;/em&gt;. It’s just mostly &lt;em&gt;done&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One of the things I’d like to see in the front-end/JavaScript community in particular is a growing embrace of the idea that some libraries can genuinely be finished. They might need a tweak here or there to work with a new packaging solution, or to fix some corner case bug that has been found. But the “churn” we all feel to varying degrees would be much diminished if maintainers didn’t feel a constant push to be changing for the sake of, well… change. The burden on maintainers would be lower, too. Maybe we’d all get to spend less time on small changes that just keep us “up to date” and more on solving bigger problems.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: sometimes changing perspective warrants a rewrite. But in libraries as in apps, just as often you’ll end up with a bad case of &lt;a href="https://en.m.wikipedia.org/wiki/Second-system_effect"&gt;second system syndrome&lt;/a&gt;; and rewrites are &lt;em&gt;rarely&lt;/em&gt;—not never, but rarely—clean wins.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 14 Aug 2018 19:45:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-08-14:/2018/stable-libraries.html</guid><category>software development</category><category>open source software</category><category>libraries</category><category>true myth</category><category>javascript</category></item><item><title>Destructuring with True Myth 1.3+</title><link>http://www.chriskrycho.com/2018/destructuring-with-true-myth-13.html</link><description>&lt;p&gt;I just realized a neat capability that &lt;a href="#"&gt;True Myth 1.3+&lt;/a&gt; unlocks: you can now use destructuring of the &lt;code&gt;value&lt;/code&gt; property on &lt;code&gt;Just&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; and the &lt;code&gt;error&lt;/code&gt; property on &lt;code&gt;Error&lt;/code&gt; instances.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;Maybe&lt;/code&gt; instances:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { just, nothing, isJust } from &amp;#39;true-myth/maybe&amp;#39;;

const maybeStrings: Maybe&amp;lt;string&amp;gt;[] =
  [just(&amp;#39;hello&amp;#39;), nothing(), just(&amp;#39;bye&amp;#39;), nothing()];

const lengths = maybeStrings
  .filter(Maybe.isJust)
  .map(({ value }) =&amp;gt; value.length);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;Result&lt;/code&gt; instances:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Result, { ok, err } from &amp;#39;true-myth/result&amp;#39;;

const results: Result&amp;lt;number, string&amp;gt;[] =
  [ok(12), err(&amp;#39;wat&amp;#39;), err(&amp;#39;oh teh noes&amp;#39;), ok(42)];

const okDoubles = results
  .filter(Result.isOk)
  .map(({ value }) =&amp;gt; value * 2);

const errLengths = results
  .filter(Result.isErr)
  .map(({ error }) =&amp;gt; error.length);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;None of this is especially novel or anything. It was just a neat thing to realize after the fact, because it wasn’t something I had in mind when I was making these changes!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This was a very strange experience. There’s nothing quite like learning something about a library &lt;em&gt;you wrote&lt;/em&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 19 May 2018 12:20:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-05-19:/2018/destructuring-with-true-myth-13.html</guid><category>functional programming</category><category>typescript</category><category>open source software</category><category>libraries</category><category>true myth</category></item><item><title>True Myth 1.3.0 and 2.0.0</title><link>http://www.chriskrycho.com/2018/true-myth-130-and-200.html</link><description>&lt;p&gt;Today I released two versions of &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt;: &lt;a href="https://github.com/chriskrycho/true-myth/releases/tag/v1.3.0"&gt;1.3.0&lt;/a&gt; and &lt;a href="https://github.com/chriskrycho/true-myth/releases/tag/v2.0.0"&gt;2.0.0&lt;/a&gt;. You can read the &lt;a href="https://www.chriskrycho.com/2017/announcing-true-myth-10.html"&gt;1.0 announcement&lt;/a&gt; from last November for an overview of the library and a discussion of why you might want to use the library in the first place!&lt;/p&gt;
&lt;p&gt;Since its initial release last November, True Myth has gone through a number of small &lt;a href="https://github.com/chriskrycho/true-myth/releases" title="True Myth releases on GitHub"&gt;feature and bug fix releases&lt;/a&gt;, each of which is more interesting in its own right than 2.0 is—because there are almost no new “features” here, and the changes to the &lt;em&gt;functionality&lt;/em&gt; which are in 2.0 are purely additive and could readily have gone in 1.3 instead.&lt;/p&gt;
&lt;p&gt;In fact, the act of writing that sentence made me realize that there really &lt;em&gt;should&lt;/em&gt; be a 1.3 which people can trivially upgrade to and then take on the changes in 2.0 later.&lt;/p&gt;
&lt;section id="section" class="level2"&gt;
&lt;h2&gt;– 1.3.0 –&lt;/h2&gt;
&lt;p&gt;There are a few very small changes in 1.3 that are just nice ergonomic wins. (You may also be interested in looking back at the &lt;a href="https://github.com/chriskrycho/true-myth/releases"&gt;list of other releases&lt;/a&gt; to see what else has landed since 1.0.)&lt;/p&gt;
&lt;section id="expose-value-and-error" class="level3"&gt;
&lt;h3&gt;Expose &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; property in &lt;code&gt;Maybe.Just&lt;/code&gt; and &lt;code&gt;Result.Ok&lt;/code&gt; instances, and the &lt;code&gt;error&lt;/code&gt; property in &lt;code&gt;Result.Err&lt;/code&gt; instances, are now &lt;em&gt;public, readonly properties&lt;/em&gt; instead of &lt;em&gt;private properties&lt;/em&gt;. I made those private in the initial implementation because I thought it made more sense to expose them via methods, but experience showed that this is a relatively common pattern in practice:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;function dealsWithAMaybe(couldBeAString: Maybe&amp;lt;string&amp;gt;) {
  if (couldBeAString.isJust()) {
    console.log(`It was! ${couldBeAString.unsafelyUnwrap()}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a contrived example of course, but I and my colleagues found in practice that this is a scenario that comes up relatively often, &lt;em&gt;especially&lt;/em&gt; when integrating with existing code rather than writing new code – control flow patterns there tend to assume early-return-on-&lt;code&gt;null&lt;/code&gt; or similar instead.&lt;/p&gt;
&lt;p&gt;So I made a change (leaning on TypeScript’s notion of &lt;a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards" title="“User-Defined Type Guards” in the TypeScript handbook"&gt;“type narrowing”&lt;/a&gt;) so that you don’t have to use &lt;code&gt;unsafelyUnwrap&lt;/code&gt; in this scenario anymore! You can use the method types, the standalone functions, or direct matching against the variants on the property&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

function dealsWithAMaybe(maybe: Maybe&amp;lt;string&amp;gt;) {
  if (maybe.isJust()) {
    console.log(`It was! ${maybe.value}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;code&gt;Result&lt;/code&gt; case this is even nicer (notice that I’m using the variant, rather than a function, to discriminate between the two and narrow the types here):&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Result, { Variant } from &amp;#39;true-myth/result&amp;#39;;

function dealsWithAResult(result: Result&amp;lt;string, Error&amp;gt;) {
  if (result.variant === Variant.Ok) {
    console.log(`Huzzah: ${result.value}`);
  } else {
    console.log(`Alas: ${result.error.message}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically: you now have more options for handling these scenarios, a nicer &lt;abbr title="application programming interface"&gt;API&lt;/abbr&gt;, and—not that it should &lt;em&gt;usually&lt;/em&gt; matter that much, but for whatever it’s worth—better performance by way of doing things with property lookups instead of function invocations in quite a few places.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="static-helper-methods" class="level3"&gt;
&lt;h3&gt;Static helper methods&lt;/h3&gt;
&lt;p&gt;At my friend and collaborator &lt;a href="https://mobile.twitter.com/bmakuh"&gt;Ben Makuh&lt;/a&gt;’s suggestion, I built a couple static helper methods to go with those. These helpers just give you nice abstractions to drop into functional pipelines. For example, you can lean on the type-narrowing capabilities described above while working through a &lt;em&gt;list&lt;/em&gt; of &lt;code&gt;Maybe&lt;/code&gt;s to &lt;em&gt;know&lt;/em&gt; that an item is a &lt;code&gt;Just&lt;/code&gt; and use the new &lt;code&gt;Just.unwrap&lt;/code&gt; static method in the pipeline:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { Just } from &amp;#39;true-myth/maybe&amp;#39;;

function justLengths(maybeStrings: Array&amp;lt;Maybe&amp;lt;string&amp;gt;&amp;gt;) {
  return maybeStrings
    .filter(Maybe.isJust)
.map(Just.unwrap)
    .map(s =&amp;gt; s.length);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Analogous helpers exist for &lt;code&gt;Result&lt;/code&gt; in the form of the &lt;code&gt;Ok.unwrap&lt;/code&gt; and &lt;code&gt;Err.unwrapErr&lt;/code&gt; methods. (&lt;code&gt;Nothing&lt;/code&gt; has no analog for what I hope are obvious reasons!)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tweaks-to-the-variant-properties" class="level3"&gt;
&lt;h3&gt;Tweaks to the &lt;code&gt;variant&lt;/code&gt; properties&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;variant&lt;/code&gt; property on both &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; has changed in two ways:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It is now &lt;code&gt;readonly&lt;/code&gt;. This was an implicit invariant previously—you would break &lt;em&gt;everything&lt;/em&gt; in the library if you changed the &lt;code&gt;variant&lt;/code&gt; value—and I’ve just made it explicit in the type system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is now properly constrained with a &lt;em&gt;literal type&lt;/em&gt; on the concrete instances. That is, the type of &lt;code&gt;Just.variant&lt;/code&gt; is no longer &lt;code&gt;Variant&lt;/code&gt; but specifically &lt;code&gt;Variant.Just&lt;/code&gt;. (This is what enables you to use the variant for narrowing as demonstrated above. I should have done this in 1.0, and just forgot to!)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s it for 1.3.0!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="section-1" class="level2"&gt;
&lt;h2&gt;– 2.0.0 –&lt;/h2&gt;
&lt;p&gt;The 2.0 release is identical in &lt;em&gt;features&lt;/em&gt; with the 1.3 release. However, it makes a breaking change to how consumers interact with the application, requiring updates to your &lt;code&gt;tsconfig.json&lt;/code&gt; file and your bundler configuration, and removing support for Flow types.&lt;/p&gt;
&lt;section id="configuration-file-updates" class="level3"&gt;
&lt;h3&gt;Configuration file updates&lt;/h3&gt;
&lt;p&gt;Getting True Myth working nicely with consuming TypeScript packages has been a source of frustration for me &lt;em&gt;and&lt;/em&gt; others. In short, requiring you to use the &lt;code&gt;&amp;quot;paths&amp;quot;&lt;/code&gt; key in the &lt;code&gt;&amp;quot;compilerOptions&amp;quot;&lt;/code&gt; section of the &lt;code&gt;tsconfig.json&lt;/code&gt; made for an annoying amount of setup work, &lt;em&gt;and&lt;/em&gt; it meant that using True Myth in a library &lt;em&gt;required&lt;/em&gt; you to set it up in any consuming app. No good.&lt;/p&gt;
&lt;p&gt;For type resolution to Just Work™, the types &lt;em&gt;must&lt;/em&gt; be at the root of the distributed package.&lt;/p&gt;
&lt;p&gt;As a result, I’ve stopped using &lt;a href="https://github.com/tildeio/libkit"&gt;libkit&lt;/a&gt;, which put the generated types in a reasonable-seeming but (in my experience) painful-to-use place, and have simplified the build layout substantially.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The types themselves are generated only when publishing an update to npm. They go in the root at that point, and they get cleaned up after publishing. (This is pretty much identical to the solution we came up in &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;The other build files no longer get dropped in a nested &lt;code&gt;src&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Since I was already at it, I renamed the two build directories from &lt;code&gt;commonjs&lt;/code&gt; to &lt;code&gt;cjs&lt;/code&gt; and from &lt;code&gt;modules&lt;/code&gt; to &lt;code&gt;es&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the distributed build now looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/
  index.d.ts
  maybe.d.ts
  result.d.ts
  unit.d.ts
  utils.d.ts
  dist/
    cjs/
      index.js
      maybe.js
      result.js
      unit.js
      utils.js
    es/
      index.js
      maybe.js
      result.js
      unit.js
      utils.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll just need to completely remove the &lt;code&gt;&amp;quot;paths&amp;quot;&lt;/code&gt; mapping for True Myth from your &lt;code&gt;tsconfig.json&lt;/code&gt; and, if you’ve done anything unusual with it, update your bundler configuration to point to the new build location, i.e. &lt;code&gt;dist/commonjs/src&lt;/code&gt; should now just be &lt;code&gt;dist/cjs&lt;/code&gt;. Bundlers which respect the &lt;code&gt;modules&lt;/code&gt; key in &lt;code&gt;package.json&lt;/code&gt; will pick it up automatically, as will Ember &lt;abbr&gt;CLI&lt;/abbr&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="removing-flow-types" class="level3"&gt;
&lt;h3&gt;Removing Flow types&lt;/h3&gt;
&lt;p&gt;To my knowledge, no one is actually using the Flow types for the library. When I first started on it, my collaborator &lt;a href="https://github.com/bmakuh"&gt;Ben Makuh&lt;/a&gt; &lt;em&gt;was&lt;/em&gt; using Flow, but he ended up migrating to TypeScript in the intervening time, and there are no consumers I know of. I was always relatively unsure of their correctness, &lt;em&gt;and&lt;/em&gt; I don’t have a good way to validate their correctness, &lt;em&gt;and&lt;/em&gt; maintaining them involved doing manual work on every release to update the types by hand.&lt;/p&gt;
&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; use True Myth with Flow, and you’re missing the types, please let me know. I just can’t maintain them myself at this point!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And that’s it! We’ve been using True Myth in production at Olo for quite some time, and it’s proved to be a really valuable tool. Give it a spin and let me know how these latest versions work for you!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’ve made some changes under the hood to take advantage of this as well, so the library should be faster. Probably &lt;em&gt;trivially&lt;/em&gt; faster, but my philosophy around library code is very much &lt;em&gt;be as fast as you can&lt;/em&gt;; it’s a way of considering the people using your code—not just the developers, but the end users.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 18 May 2018 19:15:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-05-18:/2018/true-myth-130-and-200.html</guid><category>TypeScript</category><category>functional programming</category><category>libraries</category><category>software development</category><category>open source software</category><category>versioning</category><category>True Myth</category></item><item><title>On Steam (Specifically, Running Out of It)</title><link>http://www.chriskrycho.com/2018/on-steam-specifically-running-out-of-it.html</link><description>&lt;p&gt;I find myself this morning almost unable to write at all, and quite unable to write what I was &lt;em&gt;planning&lt;/em&gt; to be writing today. (I’ve been steadily pushing forward on &lt;a href="https://github.com/typed-ember/ember-typings/issues/14"&gt;a big “quest”-style issue for an open source software project I help maintain&lt;/a&gt;, and that’s how I planned to spend my writing time today.) But I’m feeling quite keenly the need of some time away from that project and indeed from a lot of the things that have had me burning the candle at both ends.&lt;/p&gt;
&lt;p&gt;I’ve noted before that I &lt;a href="http://www.chriskrycho.com/2018/intentional-cyclicality.html"&gt;go in cycles&lt;/a&gt;; one thing that I’ve also started to notice is that those cycles, unsurprisingly, include points where I’m just &lt;em&gt;done&lt;/em&gt;. I’m all out of steam. And I seem to have hit one of those just this week.&lt;/p&gt;
&lt;p&gt;It makes sense: since last October, as a family we’ve moved across the country; lived with my parents for three months, during which time we learned that my dad had brain cancer and helped him and my mom through the surgery, recovery, and early parts of chemo and radiation); then moved into a new house; and joined a new church.&lt;/p&gt;
&lt;p&gt;On top of that I’ve personally continued working on &lt;a href="https://newrustacean.com"&gt;New Rustacean&lt;/a&gt; and &lt;a href="https://winningslowly.org"&gt;Winning Slowly&lt;/a&gt;, helped ship the most important release of &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt; in the project’s history, taught a workshop on TypeScript at EmberConf, and helped kick off one of the most important front-end development projects in Olo’s history.&lt;/p&gt;
&lt;p&gt;Of &lt;em&gt;course&lt;/em&gt; I’m tired. Of &lt;em&gt;course&lt;/em&gt; I feel like I’m just out of steam.&lt;/p&gt;
&lt;p&gt;The trick, for the moment, is that there are some things I really feel I should carry to some specific points &lt;em&gt;before&lt;/em&gt; I take a week or two off. Getting that quest issue that I was going to be writing this morning done, and a related &lt;a href="https://github.com/emberjs/rfcs"&gt;Ember.js RFC&lt;/a&gt; on the relationship of TypeScript and Ember.js, and getting the first of our beta releases for this project at Olo out the door… all of those are things that really just &lt;em&gt;need&lt;/em&gt; to happen before I take that time off. After I get through those, though, I think I’m taking a week or so off. Maybe time it with Memorial Day to make it a full 10 days or something.&lt;/p&gt;
&lt;p&gt;And in the meantime, I do things like write little blog posts thinking about “running out of steam” not because it’s all that important for the world to know, but because it’s a way of keeping &lt;em&gt;some&lt;/em&gt; degree of forward momentum, continuing to maintain my &lt;a href="http://www.chriskrycho.com/2017/momentum.html"&gt;daily writing habit&lt;/a&gt;, and generally doing all the little things that make it possible for me to actually get across the finish line on those projects.&lt;/p&gt;
&lt;p&gt;Because—weird though it may seem in some ways—even when I’m tired like it, I know through long experience that the way I actually get across those finish lines is by keeping up my forward motion. It’s very much like the feeling in the last 5k of a half marathon. (A half marathon is two five-milers and a 5k, and thinking about it that way is the way to run it effectively.)&lt;/p&gt;
&lt;p&gt;Everything hurts. You don’t feel like you have anything left. But in fact, if you’ve done the right things up to that point, you &lt;em&gt;do&lt;/em&gt; have enough left. The way to finish well is not only to keep putting one foot in front of the other, but also to push a little harder, and a little harder, and a little harder, until you hit the finish line. You have to watch out, of course, and not hurt yourself. That’s the trick with mental fatigue, too. Burnout is a real thing. But, as with running, if you’ve built up your mental muscles well and built up the reserves of &lt;em&gt;experience&lt;/em&gt; that you need, you know the difference. You know when you need to stop early for a day and go read a novel. You know when to push through. You know when to take a day off of the quest issue and write a quirky, and not-all-that-coherent, blog post about the experience of fatigue and thinking about pushing on. And you know that you still need to finish.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit (October 11, 2018):&lt;/strong&gt; I’ve added my &lt;a href="https://www.chriskrycho.com/burnout/"&gt;#burnout&lt;/a&gt; tag to this post retroactively because I now recognize much of what I wrote here as some of the earlier symptoms of what I didn’t concretely identify until &lt;a href="https://www.chriskrycho.com/2018/some-mild-burnout.html"&gt;a bit later&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 05 Apr 2018 07:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-04-05:/2018/on-steam-specifically-running-out-of-it.html</guid><category>productivity</category><category>writing</category><category>open-source software</category><category>burnout</category></item><item><title>A Meander</title><link>http://www.chriskrycho.com/2018/a-meander.html</link><description>&lt;p&gt;This is a meander. I have a bunch of mostly-unformed thoughts, and I want to write, and the two come out here, together, in the next few minutes before I start my workday proper (because I stayed up late last night working on open source software and got up late accordingly, and so have a great deal less of &lt;a href="http://www.chriskrycho.com/2017/knowing-your-rhythms.html" title="“Knowing Your Rhythms”"&gt;my normally-allocated writing time&lt;/a&gt; available today).&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="section" class="level2"&gt;
&lt;h2&gt;1.&lt;/h2&gt;
&lt;p&gt;Open-source software is a very strange place, and the dynamics of it favor those of us who already have well-paying jobs and lots of flexibility in our schedule.&lt;/p&gt;
&lt;p&gt;This isn’t &lt;em&gt;necessarily&lt;/em&gt; a bad thing. It means that anyone who wants to use open-source contribution as a gauge of someone’s fitness to work is making a pretty foolish decision, though: they’re inherently cutting off a whole sector—dare I say it, a whole &lt;em&gt;class&lt;/em&gt;—of people who simply do not (and, barring being given a pretty surprising break, will never) have that kind of stability and flexibility.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="section-1" class="level2"&gt;
&lt;h2&gt;2.&lt;/h2&gt;
&lt;p&gt;Twitter is really, &lt;em&gt;really&lt;/em&gt; bad for meaningful discussion. I follow both &lt;a href="https://mobile.twitter.com/noahpinion"&gt;Noah Smith (@noahpinion)&lt;/a&gt; and &lt;a href="https://mobile.twitter.com/lymanstoneky"&gt;Lyman Stone (@lymanstoneky)&lt;/a&gt;, and they’re both extremely interesting follows, and they’re both clearly &lt;em&gt;really&lt;/em&gt; smart and &lt;em&gt;really&lt;/em&gt; well-informed, and in their off-Twitter writing they both do a good job of fairly representing others’ views and interacting with them.&lt;/p&gt;
&lt;p&gt;On Twitter, their arguments are a disaster.&lt;/p&gt;
&lt;p&gt;This is not specific to Smith and Stone. This is Twitter in one pair of interlocutors.&lt;/p&gt;
&lt;p&gt;Seriously: stop tweeting and start blogging again, if you have an &lt;em&gt;argument&lt;/em&gt; to make rather than just a pithy, one-off observation or a link to share.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="section-2" class="level2"&gt;
&lt;h2&gt;3.&lt;/h2&gt;
&lt;p&gt;You can get a surprising amount of writing done in 5 minutes, if you’re willing to just word-vomit. (This whole post, start to finish, took me 12 minutes.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="section-3" class="level2"&gt;
&lt;h2&gt;4.&lt;/h2&gt;
&lt;p&gt;I need to read more poetry; more rich, good fiction; more rich, good nonfiction. I’ve read a lot of nonfiction in the last five years, but I wouldn’t call most of it &lt;em&gt;rich&lt;/em&gt;. Most of it—most of my seminary reading, that is—was &lt;em&gt;just okay&lt;/em&gt;; very little of it engaged deeply with thought critical of its own perspective. (Major exceptions: David Koyzis’ really excellent &lt;em&gt;Political Visions and Illusions&lt;/em&gt;, Alvin Plantinga’s &lt;em&gt;Where the Conflict Really Lies&lt;/em&gt;, and of course St. Athanasius’ &lt;em&gt;On the Incarnation&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;But I find that my own writing is far sharper, clearer, and better when I’m drawing &lt;em&gt;widely&lt;/em&gt; and from &lt;em&gt;deep wells&lt;/em&gt;. Widely, because I find that too much time in the same spot overly narrows my focus, whether that is apologetics or programming languages. From deep wells because, frankly, there is too much out there which warrants nothing more than a skim &lt;em&gt;at most&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And that is all!&lt;/p&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 09 Feb 2018 07:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-02-09:/2018/a-meander.html</guid><category>writing</category><category>open-source software</category><category>ethics</category><category>reading</category><category>literature</category></item><item><title>Becoming a Contributor</title><link>http://www.chriskrycho.com/2017/becoming-a-contributor.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;Here is the full text of the talk I gave at Rust Belt Rust, as it was prepared; headings correspond to individual slides. You can see the slides as they were presented &lt;a href="/talks/rust-belt-rust/"&gt;here&lt;/a&gt;. Note that I extemporize fairly freely when actually giving a talk, so this is &lt;em&gt;not&lt;/em&gt; a word-for-word equivalent of the talk as delivered, but the gist is the same!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;I’ll update this post with the video once it’s available!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/family.jpg" alt="family" /&gt;&lt;figcaption&gt;family&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Hello, everyone! It’s good to see all of you. We only have half an hour, and even if that’s ten to fifteen minutes longer than a normal New Rustacean episode, that’s still not much time, so let’s jump right in! Our theme is “Becoming a Contributor.” There are two prongs to this talk, two big ideas I hope you all walk away with.&lt;/p&gt;
&lt;section id="introduction-the-big-ideas" class="level3"&gt;
&lt;h3&gt;Introduction: The Big Ideas&lt;/h3&gt;
&lt;p&gt;The first thing I hope all of you take away is that &lt;strong&gt;there is no reason &lt;em&gt;you&lt;/em&gt; cannot contribute meaningfully&lt;/strong&gt; to the success of Rust – or indeed any open-source project you care about. Anyone can be a contributor. And not “even you” but perhaps “&lt;em&gt;especially&lt;/em&gt; you”. The fact that you’re an outsider, or new to programming, or new to systems programming: sometimes that makes you a &lt;em&gt;better&lt;/em&gt; contributor. Because you don’t necessarily share the biases of – you’re not wearing the same blinders that – someone who’s been writing systems-level code for 20 years have. So the first idea: &lt;strong&gt;you can contribute&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The second idea I hope you take away is &lt;strong&gt;just &lt;em&gt;how many&lt;/em&gt; ways there are to contribute meaningfully&lt;/strong&gt;. It has almost become a cliche in the Rust community to say “code isn’t the only thing that matters,” but I want to show you today just how true that is. And I want to make that point again more forcefully, because for all that we often say that, the idea that &lt;em&gt;shipping code&lt;/em&gt; is what really matters is the kind of pernicious lie that can come back and bite any of us. It certainly gets to me at times! But it’s a lie, and we’re going to see that in detail. That’s the second big idea: &lt;strong&gt;there are an &lt;em&gt;astounding&lt;/em&gt; number of ways you can contribute&lt;/strong&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction-why" class="level3"&gt;
&lt;h3&gt;Introduction: Why?&lt;/h3&gt;
&lt;p&gt;There are a lot of things to be passionate about in the world of software development. But at the end of the day, I care about software because I care about &lt;em&gt;people&lt;/em&gt;. To borrow a label from Scott Wlaschin – a developer I admire enormously, mostly working over in the F# community – I am a &lt;em&gt;humanist&lt;/em&gt;, not a &lt;em&gt;technologist&lt;/em&gt;. The technologies are interesting in themselves to a degree; but I mostly care about the ways that technologies can help us serve people more effectively. As software developers, that takes a lot of shapes. But today I want to zoom in on just these two ideas about open-source software:&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction-the-big-ideas-1" class="level3"&gt;
&lt;h3&gt;Introduction: The Big Ideas&lt;/h3&gt;
&lt;p&gt;So: why these two ideas? For one thing, because I think they are among the most applicable to everyone here. We have an enormous open-source focus. But for another, because they can also serve as windows into the ways we can – and should – think about software more generally. So: let’s talk about how you become a &lt;em&gt;contributor&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction-outline" class="level3"&gt;
&lt;h3&gt;Introduction: Outline&lt;/h3&gt;
&lt;p&gt;We’re going to take this on in the good old grammar-school fashion: &lt;em&gt;who&lt;/em&gt;, &lt;em&gt;what&lt;/em&gt;, &lt;em&gt;when&lt;/em&gt;, &lt;em&gt;where&lt;/em&gt;, &lt;em&gt;why&lt;/em&gt;, and &lt;em&gt;how&lt;/em&gt;. We’re not going to take them in that order though, and we might smash a few of them together.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Why bother contributing? &lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;Who is a contributor? &lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;What is a contribution? How can you contribute? &lt;!-- .element: class="fragment" data-fragment-index="3" --&gt;
&lt;ul&gt;
&lt;li&gt;…so many things they won’t fit on this slide. &lt;!-- .element: class="fragment" data-fragment-index="4" --&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When and where to contribute? &lt;!-- .element: class="fragment" data-fragment-index="5" --&gt;&lt;/li&gt;
&lt;li&gt;Conclusion &lt;!-- .element: class="fragment" data-fragment-index="6" --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="why-bother-contributing" class="level2"&gt;
&lt;h2&gt;Why bother contributing?&lt;/h2&gt;
&lt;p&gt;The first question we might be asking is: &lt;em&gt;why contribute at all&lt;/em&gt;? Why should you be interested in becoming a contributor? And the best answer I can offer is: because there is more work than hands to do it. Always. Every open-source maintainer can tell you the truth of this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor" class="level2"&gt;
&lt;h2&gt;Who is a contributor?&lt;/h2&gt;
&lt;p&gt;People define this differently, but I have a very simple definition: &lt;strong&gt;A contributor is &lt;em&gt;anyone&lt;/em&gt; who improves a project.&lt;/strong&gt;&lt;/p&gt;
&lt;section id="who-is-a-contributor-examples" class="level3"&gt;
&lt;h3&gt;Who is a contributor? Examples&lt;/h3&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;submit a patch to fix a typo &lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;add a small correction for a code sample in a project &lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;file an issue instead of just suffering through a problem in silence &lt;!-- .element: class="fragment" data-fragment-index="3" --&gt;&lt;/li&gt;
&lt;li&gt;everything else we’re going to talk about today &lt;!-- .element: class="fragment" data-fragment-index="4" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor-me" class="level3"&gt;
&lt;h3&gt;Who is a contributor? Me!&lt;/h3&gt;
&lt;p&gt;That might sound overblown, but it’s really not. I am literally standing on this stage in front of you today because I submitted some small typo and code sample improvements to “Rust by Example” a few years ago, and realized: I can make a difference in this community. And that gave me the motivation I needed to &lt;em&gt;keep&lt;/em&gt; contributing.&lt;/p&gt;
&lt;p&gt;&lt;img src="/talks/rust-belt-rust/img/first-commit.png" alt="my first Rust commit" /&gt;&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor-1" class="level3"&gt;
&lt;h3&gt;Who is a contributor?&lt;/h3&gt;
&lt;p&gt;I don’t imagine the story is all that different for &lt;em&gt;most&lt;/em&gt; people who are open-source contributors in this room. Something got them over the hump, and it was probably something small, insignificant-seeming at the time. They might be particularly skilled in this thing or that thing, but in fact a lot of them are in those roles just because they saw a need and stepped up to fill it. And then kept at it for a long time. But it made them a contributor. And that feeling – of helping build something bigger than you can build on your own – is a good one. I’d go so far as to say it’s part of what humans are &lt;em&gt;meant&lt;/em&gt; for. It’s part of us in a deep, deep way.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor-2" class="level2"&gt;
&lt;h2&gt;Who is a contributor?&lt;/h2&gt;
&lt;p&gt;If you’re inclined to quibble with that definition, I challenge you to ask &lt;em&gt;why?&lt;/em&gt; I think, most often, it’s because we feel defensive about wanting to project our own particular kinds of contribution as the most important, or the most valuable. But I’m more of the mindset that, as I read recently, “anyone who would be first… must be last of all, and servant of all.” We should stop worrying about our own prestige and turf-marking, and start rejoicing in the many different ways people are able to make our projects better.&lt;/p&gt;
&lt;p&gt;There’s no magic that makes you qualified to be a contributor. There’s just a willingness to serve where you see a need.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-how-can-you-contribute" class="level2"&gt;
&lt;h2&gt;What &amp;amp; how can you contribute?&lt;/h2&gt;
&lt;p&gt;And that takes us into the “what” of all of this, the &lt;em&gt;how&lt;/em&gt;. (Yes, I’m combining those two). &lt;strong&gt;&lt;em&gt;What&lt;/em&gt; is a contribution? &lt;em&gt;How&lt;/em&gt; can you contribute?&lt;/strong&gt; Turns out, this is a &lt;em&gt;long&lt;/em&gt; list.&lt;/p&gt;
&lt;section id="what-how-code" class="level3"&gt;
&lt;h3&gt;What &amp;amp; how: code&lt;/h3&gt;
&lt;p&gt;Let’s get this right out of the way up front, because it’s the most obvious: you can write code. You can fix bugs or help implement new features. You can do that even if you’re not an expert – especially in the Rust community. Many Rust projects have gone out of their way to mark issues as good-first-issues, or easy-to-tackle, or mentorship-available. Maybe it’s your first contribution to an open-source project: that’s okay. You can take a stab at it, and the fact that it might not be good &lt;em&gt;is okay&lt;/em&gt;. The whole point of these kinds of issues is that they give you a place where you can jump in safely.&lt;/p&gt;
&lt;p&gt;&lt;img src="/talks/rust-belt-rust/img/good-first-issue.png" alt="good first issue" /&gt; &lt;img src="/talks/rust-belt-rust/img/mentored.png" alt="mentored" /&gt; &lt;img src="/talks/rust-belt-rust/img/easy.png" alt="easy" /&gt;&lt;/p&gt;
&lt;p&gt;That goes equally for everything from the Rust compiler itself to many of the other projects in the ecosystem. Look at the repository, for example! And it’s not just this project. &lt;em&gt;Lots&lt;/em&gt; of projects in the Rust ecosystem are like this.&lt;/p&gt;
&lt;section id="what-how-code-were-kind-here" class="level4"&gt;
&lt;h4&gt;What &amp;amp; how: code – we’re kind here&lt;/h4&gt;
&lt;p&gt;And no one is going to swear at you or insult for making a mistake here. Not even if you’re working on something important, and not even if you’ve been doing it for a while. That is not. how. we. roll. here. &lt;em&gt;Everyone&lt;/em&gt; makes mistakes!&lt;/p&gt;
&lt;p&gt;Instead, we &lt;em&gt;want&lt;/em&gt; people to show up, knowing nothing: we’re happy to help. Remember: we want people to contribute! So: try opening a PR and let people help you learn how to do it well! In fact, if you haven’t ever opened a PR on a Rust project, find one that looks interesting to you and has an issue tagged that way, and submit a PR before the weekend is out! You can do it!&lt;/p&gt;
&lt;p&gt;&lt;img src="/talks/rust-belt-rust/img/good-first-issue.png" alt="good first issue" /&gt; &lt;img src="/talks/rust-belt-rust/img/mentored.png" alt="mentored" /&gt; &lt;img src="/talks/rust-belt-rust/img/easy.png" alt="easy" /&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-how-code-a-caveat" class="level4"&gt;
&lt;h4&gt;What &amp;amp; how: code – a caveat&lt;/h4&gt;
&lt;p&gt;But code is not the only thing that makes you a contributor. I put it up front because I think it’s worth doing – but I also wanted to get it out of the way. In every software community, it’s easy to &lt;em&gt;over&lt;/em&gt;-value the code. That might sound crazy, given that it’s open-source &lt;em&gt;software&lt;/em&gt;, but the reality is that no one fails to value the code. We &lt;em&gt;do&lt;/em&gt; often fail to value all the other things that make an open-source software project actually useful. It’s certainly true that there’s no project without the code. But it’s also the case that there’s no &lt;em&gt;useful&lt;/em&gt; software without a lot of other things besides the code, and we often undervalue those.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="filing-bugs" class="level3"&gt;
&lt;h3&gt;Filing bugs&lt;/h3&gt;
&lt;p&gt;So let’s take one step away from code, and talk about what is probably the single &lt;em&gt;easiest&lt;/em&gt; way anyone can contribute. &lt;em&gt;File issues.&lt;/em&gt; If you’re using a binary and it doesn’t work, open a ticket. If you’re integrating a library and it seems like the API doesn’t do what it should, or if it seems like it’s missing some functionality… well, you can suffer in silence, or you can open a bug ticket! Many times, the author of the software &lt;em&gt;doesn’t know there’s a problem&lt;/em&gt;. The only way they can fix it is if they know about it!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/new-issue.png" alt="filing bugs" /&gt;&lt;figcaption&gt;filing bugs&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="docs" class="level3"&gt;
&lt;h3&gt;Docs&lt;/h3&gt;
&lt;p&gt;Perhaps the thing most of you will be most persuaded of the utility of is &lt;em&gt;documentation&lt;/em&gt;. All of us have faced the difficulty of trying to figure out how to integrate some poorly-documented (or undocumented!) library into our own codebase. That experience, in word, &lt;em&gt;sucks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So working on documentation is one of the highest-value areas you can contribute to any project. It’s also really hard, in a bunch of ways – harder, in some ways, than writing the code is!&lt;/p&gt;
&lt;section id="docs-who" class="level4"&gt;
&lt;h4&gt;Docs: who?&lt;/h4&gt;
&lt;p&gt;One kind of documentation is &lt;strong&gt;explanation of how things work under the hood&lt;/strong&gt;. The implementer is the most qualified there! That doesn’t mean they don’t still need help even with that, though! Some people are incredible implementors and terrible explainers; you can often do a great service by serving as an “interpreter” for them – taking their explanations and making the literary tweaks and cleanups and polish that they need.&lt;/p&gt;
&lt;p&gt;Another kind of documentation, though, developers and maintainers are often really poorly equipped to write, and that’s &lt;strong&gt;introductory documentation&lt;/strong&gt;. This is the problem of expertise: when you know exactly how something is &lt;em&gt;meant&lt;/em&gt; to work, and especially when you’re the one who implemented it, there are things that seem obvious to you which simply aren’t obvious to someone approaching it for the first time. And as hard as you try, you &lt;em&gt;can’t&lt;/em&gt; escape that entirely. You can imagine what it might be like not to know something, but there’s no substitute for actually not knowing something.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="docs-how" class="level4"&gt;
&lt;h4&gt;Docs – how?&lt;/h4&gt;
&lt;p&gt;What that means is that one of the most valuable things you can do as you learn a new library is &lt;em&gt;write down the things you don’t understand from the docs as you go&lt;/em&gt;. And when you figure them out, &lt;em&gt;write that down, too&lt;/em&gt;. If nothing else, writing up that experience – filing it as an issue on the bug tracker, or otherwise getting it in the hands of the maintainers – can help them make important changes to things like the order various concepts are introduced, or adding little notes to help people feel comfortable with not knowing something until it &lt;em&gt;can&lt;/em&gt; be introduced later, and other things like that. It can help them recognize and fill in gaps in their docs – things they simply assumed but which they didn’t realize they were assuming – and fill those in. At the most extreme, you might even help them realize that some parts of the docs need full rewrites… and the work you’ve done in writing things down might just be the foundation or the actual content of those new docs.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Write down the things you don’t understand from the docs as you go.&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;When you figure them out, write that down, too.&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;Then: file an issue or write a PR to improve it!&lt;!-- .element: class="fragment" data-fragment-index="3" --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="docs-varieties" class="level4"&gt;
&lt;h4&gt;Docs: varieties&lt;/h4&gt;
&lt;p&gt;So what kinds of things would we call &lt;em&gt;documentation&lt;/em&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API documentation&lt;!-- .element class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;READMEs&lt;!-- .element class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;Tutorials&lt;!-- .element class="fragment" data-fragment-index="3" --&gt;&lt;/li&gt;
&lt;li&gt;Books&lt;!-- .element class="fragment" data-fragment-index="4" --&gt;&lt;/li&gt;
&lt;li&gt;The Rust Reference&lt;!-- .element class="fragment" data-fragment-index="5" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, books are a &lt;em&gt;huge&lt;/em&gt; undertaking, but they can genuinely serve as documentation. Especially for large projects. In fact, several of the most important pieces of “documentation” the Rust project itself has are books: “The Rust Programming Language”, “Rust by Example”, and “The Rustonomicon”. But there are also important but totally unofficial books like Daniel Keep’s “A Practical Intro to Macros in Rust 1.0” and “The Little Book of Rust Macros”, or Jorge Aparicio’s book on microcontrollers with Rust.&lt;/p&gt;
&lt;p&gt;The Rust Reference: This is a special category, and one that’s especially important to me. The Rust Reference is supposed to be an exhaustive guide to the language, and the value of that being complete and accurate is hard to overstate. It’s also wildly out of date today. I wrote an RFC last year that said, basically, “We need to actually document everything! That includes updating the Reference!” The trick is: it’s a huge undertaking, and while I and a few others made a good start on it earlier this year, that effort got bogged down by life, and it needs to be resuscitated. And it’s not just Rust which could use investment in that area. Other languages and frameworks have the same issue. It’s &lt;em&gt;really&lt;/em&gt; important that there be an answer other than “dive into the source and try to figure out what its intent is” – the more central the component is in the ecosystem, the more important that is.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="docs-translation" class="level4"&gt;
&lt;h4&gt;Docs: Translation&lt;/h4&gt;
&lt;p&gt;Another huge place you can contribute to documentation is &lt;em&gt;translation&lt;/em&gt;. For good or ill, English has become the sort of &lt;em&gt;primary&lt;/em&gt; language of programming, but that doesn’t mean we should treat it as the &lt;em&gt;only&lt;/em&gt; language, or as &lt;em&gt;more important&lt;/em&gt; than other languages. Translating documentation is amazing and very needed work, and it’s work that not everyone is really capable of! I’m fluent in English and… ancient Hebrew and ancient Greek. For some reason, there’s not much demand for technical writing in Greek from the era when Plato was alive. So I’m not much use at translation.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/translation.png" alt="translation" /&gt;&lt;figcaption&gt;translation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;But many of you out there &lt;em&gt;are&lt;/em&gt; multilingual, and could take docs written in English and convert them for, say, Czech-speaking developers. Perhaps just as importantly, you can go the &lt;em&gt;other&lt;/em&gt; direction, and help non-English-speaking maintainers reach a broader audience. Take an amazing project which only has documentation in Amharic (because its developers don’t feel comfortable enough in English to translate it themselves) and translate it to English: &lt;em&gt;use&lt;/em&gt; the fact that English &lt;em&gt;is&lt;/em&gt; the common language to increase the reach of non-Western developers!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="visual-design" class="level3"&gt;
&lt;h3&gt;Visual Design&lt;/h3&gt;
&lt;p&gt;One of the areas where you could move the ball down the field fastest in the Rust community is with &lt;strong&gt;&lt;em&gt;visual&lt;/em&gt; design&lt;/strong&gt;. (To be clear, the &lt;em&gt;language&lt;/em&gt; design is great!) But our websites could sometimes use some work.&lt;/p&gt;
&lt;section id="visual-design-its-not-just-us" class="level4"&gt;
&lt;h4&gt;Visual design: it’s not just us&lt;/h4&gt;
&lt;p&gt;Systems programming language types have historically &lt;em&gt;not&lt;/em&gt; spent a lot of time on the &lt;em&gt;presentation&lt;/em&gt; of their tools. In part this is just a matter of what these kinds of languages have been oriented towards: if you spend all day hacking on kernel code, you’re &lt;em&gt;likelier&lt;/em&gt; to be a person for whom user interface and visual design is less interesting than, say, optimizing memory performance or minimizing the number of cache misses a given approach has. But presentation &lt;em&gt;does&lt;/em&gt; matter, and it matters especially as we want to enable more and more people to be able to write this kind of code.&lt;/p&gt;
&lt;p&gt;Speaking frankly, though I’ve spent a large chunk of my career to date writing systems-level languages, I’ve found the way a lot of these tools are presented to be a huge turn-off, and at times a barrier even to getting them working for me locally. Perhaps the most egregious example of that was some of the “documentation” – I’m not sure I should even call it that! – for Fortran, when I was first getting started programming back in college. The presentation of the material was essentially hacker-ish in a &lt;em&gt;bad&lt;/em&gt; way: no CSS, no attention to organization of the material, no structure to help you find your way through it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="visual-design-how" class="level4"&gt;
&lt;h4&gt;Visual design: how&lt;/h4&gt;
&lt;p&gt;If you’re an expert or just a talented amateur, please pitch in&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/p&gt;
&lt;p&gt;You can help here even if you’re not especially comfortable with visual design or even if you’re outright bad at it if you’re willing to spend just a little time on it! For example, you can simply help a team adopt something like Bootstrap. Yes, it’ll look like many other open-source projects out there. But it won’t be horribly, catastrophically ugly and unreadable! Or you can do use one of these simple starter kits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://usewing.ml"&gt;Wing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://purecss.io"&gt;Pure.css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://getskeleton.coma"&gt;Skeleton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So don’t think that just because you aren’t a design expert means you can’t help here.&lt;/p&gt;
&lt;p&gt;Just as important as the &lt;em&gt;visual&lt;/em&gt; design is thinking about and actively designing the &lt;strong&gt;information hierarchy&lt;/strong&gt; of your content. What leads to what? Which pieces go together, and which pieces can be broken up into their own pages or sections within pages? Think about the content like an &lt;em&gt;outline&lt;/em&gt;. Many sites don’t have any such structure to them; they’re kind of haphazardly cobbled together. If you can help the maintainers with the &lt;em&gt;structure&lt;/em&gt; and &lt;em&gt;organization&lt;/em&gt; of their content, that can make an enormous differences as well.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="blogging" class="level3"&gt;
&lt;h3&gt;Blogging&lt;/h3&gt;
&lt;p&gt;One of the other big ways you can help a project may not even end up in the repository at all. You can &lt;em&gt;blog&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I know blogging can seem intimidating, for many of the same reasons that writing documentation can. Technical writing is hard, and it’s a completely different skill from programming. But it doesn’t have to be amazing; it just has to get the information out there – and you’ll get better as you practice.&lt;/p&gt;
&lt;section id="blogging-easy-mode" class="level4"&gt;
&lt;h4&gt;Blogging: “Easy Mode”&lt;/h4&gt;
&lt;p&gt;You can start on “easy mode”, too. I mentioned this earlier when talking about documentation, but “just write down what you’re learning” is an incredibly effective technique for generating content. If you look at a lot of the technical blogging I’ve done over the years, it has been nothing more complicated than “here is what I just learned.” And if you want a &lt;em&gt;superb&lt;/em&gt; example of this which is &lt;em&gt;very&lt;/em&gt; different from mine, take a look at the work that Julia Evans does on her blog! She regularly writes down, in an inimitable way, highly technical ideas she’s just learning. If you want someone to make arcane Linux command line tools seem amazing and approachable, her blog is your ticket.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just write down what you’re learning.&lt;br/&gt; —Me, just now&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="blogging-good-examples" class="level4"&gt;
&lt;h4&gt;Blogging: good examples&lt;/h4&gt;
&lt;p&gt;But even beyond “what I just learned,” blogging is a superb way for teaching in general. Over the course of this year, for example, Vaidehi Joshi has been writing what is essentially a friendly introduction to computer science on her blog on Medium. This is a totally different style of &lt;em&gt;content&lt;/em&gt; (as well as of presentation!) from the kind of “what I just learned” content that Julia Evans writes,but it’s also really effective, because she takes her knowledge and translates it into something others can pick up. That’s obviously more work than just writing down things you just learned, but it can also pay really high dividends as others are able to substantially deepen their knowledge.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="blogging-all-the-options" class="level4"&gt;
&lt;h4&gt;Blogging: all the options!&lt;/h4&gt;
&lt;p&gt;In blogging, as in documentation, there is a whole spectrum of basic teaching content you can contribute! And communities need the whole spectrum for simple introductions to extremely thorough, advanced tutorials.&lt;/p&gt;
&lt;p&gt;But blog posts can also be much more versatile than traditional documentation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;They can be one-offs, or series.&lt;/strong&gt; You can give a topic as much depth, or as little depth, as you &lt;em&gt;care about&lt;/em&gt; or &lt;em&gt;think it deserves&lt;/em&gt;. I wrote an 18-part series comparing Rust and Swift, and it could have been 30 parts if I hadn’t eventually gotten derailed. That’s not &lt;em&gt;documentation&lt;/em&gt;, but there’s a lot people can learn from those kinds of things.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can introduce a technology, or dig deep into how to use it, or how it’s built.&lt;/strong&gt; You’re not limited to just one particular tack when blogging. Is your interest in the specific implementation details of some corner of the compiler? Write about that! Is your interest in how a given Rust library solves a specific kind of problem you’ve run into with another library, or with a similar library in another language? Write about that! You get the idea.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can critique or highlight problems with specific pieces of the ecosystem!&lt;/strong&gt; A careful, well-articulated, critical blog post can do wonders for showing the problems with a given approach and can even sometimes help suggest the right solutions to those problems. I’ve repeatedly watched, for example, as people have blogged about their struggles getting their heads around the Tokio tooling; the result has been a &lt;em&gt;lot&lt;/em&gt; of work by the Tokio team to respond to those problems. The more thoughtful and careful you are in that kind of criticism, the better! Good criticism is &lt;em&gt;incredibly&lt;/em&gt; valuable. Because we all have blind spots, and someone else’s perspective can help jar us out of those.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can show how to &lt;em&gt;integrate&lt;/em&gt; different parts of the ecosystem.&lt;/strong&gt; For example, as part of the “Increasing Rust’s Reach” initiative, Ryan Blecher recently wrote up a detailed walk-through on how to use the Diesel ORM and the Rocket web framework together to build a small blogging engine. That’s &lt;em&gt;huge&lt;/em&gt;! It makes it that much easier for someone who’s just starting out with Rust, coming in from something like Python or Ruby, to dive in and get that intensely rewarding feeling of &lt;em&gt;having built something&lt;/em&gt; in a relatively small amount of time. That’s also helpful because (almost) no one is building something with &lt;em&gt;just&lt;/em&gt; Diesel, or just &lt;em&gt;any&lt;/em&gt; crate. A huge part of what every software developer does is about fitting together other pieces of software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can invite feedback on your own projects.&lt;/strong&gt; Talk about what you’re doing, what your stumbling blocks are, what you don’t understand. People will often show up and help you with comments and clarifications!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that’s just scratching the surface. Blogs are incredibly versatile, and you should lean on that.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="audio-and-video" class="level3"&gt;
&lt;h3&gt;Audio and Video&lt;/h3&gt;
&lt;p&gt;Not just words! Noises and pictures, too!&lt;/p&gt;
&lt;section id="audio-podcasts" class="level4"&gt;
&lt;h4&gt;Audio: podcasts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Not everyone learns the same way.&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;Lots of people have commutes.&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="audio-but-there-are-already-podcasts" class="level4"&gt;
&lt;h4&gt;Audio: but there are already podcasts&lt;/h4&gt;
&lt;p&gt;Everything I’ve talked about so far has been in written form. But audio and video media can also be really helpful. Not everyone learns best by reading. And not everyone has tons of time to sit down and read a book every day. One of the reasons I started the New Rustacean podcast is that it gives people a way to get up to speed on the language while on a daily commute. But there’s still a &lt;em&gt;huge&lt;/em&gt; need for more audio and video content in this space!&lt;/p&gt;
&lt;p&gt;One podcast is not enough!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/newrustacean.png" alt="New Rustacean" /&gt;&lt;figcaption&gt;New Rustacean&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Two&lt;/em&gt; podcasts is not enough!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/rfe.png" alt="Request for Explanation" /&gt;&lt;figcaption&gt;Request for Explanation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Seriously, not even &lt;em&gt;three&lt;/em&gt; podcasts is enough!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/rusty-spike.png" alt="Rusty Spike" /&gt;&lt;figcaption&gt;Rusty Spike&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So I’m laying down another challenge: there’s plenty of room for more, and more kinds, of audio content in this ecosystem.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="video" class="level4"&gt;
&lt;h4&gt;Video&lt;/h4&gt;
&lt;p&gt;Again: people have different learning styles!&lt;/p&gt;
&lt;p&gt;There’s also a huge opening for people to produce good video content. I’ve heard often from people that things like RailsCasts were essential in helping them learn the Ruby on Rails ecosystem. We &lt;em&gt;need&lt;/em&gt; video tutorials which might look kind of like that, or like the kinds of things I’m doing on the podcast. If you have any skill that way, and any interest in teaching, you should make Rust videos – there aren’t many out there.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="video-what" class="level4"&gt;
&lt;h4&gt;Video: what&lt;/h4&gt;
&lt;p&gt;There are lots of options here—not just live streaming!&lt;/p&gt;
&lt;p&gt;Another, totally different tack you can take with video is &lt;em&gt;live-streaming&lt;/em&gt;. Sean Griffin has done this at times, and I’ve actually done it just once, and it’s a ton of fun – and it can be incredibly illuminating for other people to see how you work and how you solve problems. You can also do like I did and live-pair on something. It’s a pain to set up, but it’s also a lot of fun.&lt;/p&gt;
&lt;p&gt;And no doubt there are more ideas you have—please just go do them!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="talk-to-people" class="level3"&gt;
&lt;h3&gt;Talk to people&lt;/h3&gt;
&lt;p&gt;Just talking with people matters. And there are lots of places to do it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IRC/Gitter/Slack/Discourse&lt;/li&gt;
&lt;li&gt;Meetups&lt;/li&gt;
&lt;li&gt;Conferences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also host or help with a local meet-up! For a lot of people, one of the major challenges of learning &lt;em&gt;any&lt;/em&gt; new piece of technology is that – even with IRC and Gitter and Slack and so on – you can feel isolated and alone. And people can help you solve problems in person, and make you feel supported in person, in ways that even a great community can’t really manage online. So &lt;em&gt;go&lt;/em&gt; to meet-ups, at a minimum. And help the organizers. And if there isn’t a meet-up in your community… you can start one! The #rust-community team has a ton of resources.&lt;/p&gt;
&lt;p&gt;Physicality matters. Presence matters. (We know this! We’re at a conference!)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="being-inviting" class="level3"&gt;
&lt;h3&gt;Being inviting&lt;/h3&gt;
&lt;p&gt;Last but not least in this list of &lt;em&gt;how&lt;/em&gt; to be a contributor, I want to take a minute and talk about “being a contributor” to those of you who’ve been contributors for a long time. Some of you have been shipping open-source software for years – some of you even for decades. Much of what I’ve said so far is old hat for you. Maybe not the design bits quite so much! But you’ve been doing this for a long time, and you’re not trying to get over the hump of making your first contribution. You have other things to contribute here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The most important thing you can do is practice &lt;strong&gt;welcome people.&lt;/strong&gt; The Rust community does this well, in general, but it’s something we need to keep in front of us as a goal as the community grows. It’s easy to get frustrated with newcomers as your project grows, demands on your time increase, and your work as a maintainer seems less like fun and more like a second job. But continuing to actively welcome newcomers in is &lt;em&gt;incredibly&lt;/em&gt; powerful. You can make it possible for people to go from zero to really making a difference. And remember: so once were you. None of us started out as magical wizards of Rust and open-source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second big thing you can do is &lt;strong&gt;mentoring.&lt;/strong&gt; As I mentioned, I’m now the maintainer of one of the core pieces necessary to make Ember.js and TypeScript play nicely together. But while I’ve done &lt;em&gt;some&lt;/em&gt; writing-of-code with that, a much larger part of my current and future work there is about helping other people learn TypeScript well enough to start using it in their apps and add-ons. But the flip-side of that is: even a fair bit of the code I &lt;em&gt;have&lt;/em&gt; written, I was able to write because someone more comfortable with some of the infrastructure mentored &lt;em&gt;me&lt;/em&gt; through its quirks and oddities.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="when-where-to-contribute" class="level2"&gt;
&lt;h2&gt;When &amp;amp; where to contribute&lt;/h2&gt;
&lt;p&gt;The last thing I want to touch on is &lt;em&gt;when and where&lt;/em&gt; to contribute. There are two things I’d suggest you should consider here:&lt;/p&gt;
&lt;section id="when-where-you" class="level3"&gt;
&lt;h3&gt;When &amp;amp; where: you&lt;/h3&gt;
&lt;p&gt;Where are &lt;em&gt;you&lt;/em&gt; in the process of becoming comfortable with contributing?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just getting started?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;Already comfortable?&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’ve never done any open-source work at all before, that’s different than if you’ve gotten pretty comfortable with it in a different ecosystem and are just figuring out where to make yourself useful in &lt;em&gt;this&lt;/em&gt; ecosystem.&lt;/p&gt;
&lt;section id="when-where-if-youre-just-getting-started" class="level4"&gt;
&lt;h4&gt;When &amp;amp; where: if you’re just getting started&lt;/h4&gt;
&lt;p&gt;If you’re just getting started, I’d pick a big project with lots of those “Help Wanted” and “Mentoring” and “Easy” tags on issues, and let the size of the project help you out. Those are projects that are &lt;em&gt;used to&lt;/em&gt; helping people make their first contributions. Crazy as it seems, something like Servo can actually be an &lt;em&gt;easier&lt;/em&gt; place to start out that a much smaller project. Sure, the technical lift is higher, but there are also a lot more people actively invested in your success there.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Look for these!&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/p&gt;
&lt;p class="fragment" data-fragment-index="1"&gt;
&lt;img src="/talks/rust-belt-rust/img/help-wanted.png" alt="help wanted" /&gt; &lt;img src="/talks/rust-belt-rust/img/easy.png" alt="help wanted" /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pick big projects!&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="when-where-if-youre-experienced" class="level4"&gt;
&lt;h4&gt;When &amp;amp; where: if you’re experienced&lt;/h4&gt;
&lt;p&gt;On the other hand, if you’re already comfortable contributing and have some idea what you’re best at, you might look around and find smaller projects with fewer contributors which look interesting and &lt;em&gt;could use the help&lt;/em&gt;. Because again, there’s always more work to do than hands to do it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="when-where-project-lifecycles" class="level4"&gt;
&lt;h4&gt;When &amp;amp; where: project lifecycles&lt;/h4&gt;
&lt;p&gt;The second consideration dovetails nicely with that: &lt;strong&gt;where is a given project at in its life-cycle?&lt;/strong&gt; As enthusiastic as you might be about some project, if it’s a small project and it’s already in a “basically done” state, well… that’s probably a lot less useful a place to invest your time &lt;em&gt;if&lt;/em&gt; you’re focusing on code. On the other hand, it’s often the case that projects are “done” in terms of code, but desperately need help with documentation, their web site, etc. Big projects, or projects just starting out, are often better places to dig in if you’re really looking to flex your coding muscles (but both of them &lt;em&gt;also&lt;/em&gt; usually have huge needs in terms of all those non-code avenues we talked about).&lt;/p&gt;
&lt;p&gt;Where is a given project at in its life-cycle?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;small project, basically done?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;need docs?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;big project, a billion needs?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Think about those, and then see if you can pick a project that’s a good fit for your current skillset and comfort level and jump in!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that’s a good place to wrap things up! I hope you’re feeling like &lt;em&gt;you can do this&lt;/em&gt;. Because you can. Open-source a project of your own and see where it goes. Write a blog post. Add some docs. Open a PR. Record a podcast. Make some videos. Start a meet up. Become a contributor! And remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anyone can contribute meaningfully.&lt;/li&gt;
&lt;li&gt;People can contribute in a stunning variety of ways.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="more-info" class="level2"&gt;
&lt;h2&gt;More info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rust-lang.org/en-US/contribute.html" class="uri"&gt;https://www.rust-lang.org/en-US/contribute.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2017/09/18-impl-future-for-rust.html" class="uri"&gt;https://blog.rust-lang.org/2017/09/18-impl-future-for-rust.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/" class="uri"&gt;https://internals.rust-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#rust&lt;/code&gt;, &lt;code&gt;#rust-community&lt;/code&gt;, &lt;code&gt;#rust-internals&lt;/code&gt;, etc. on irc.mozilla.org&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 02 Nov 2017 07:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-11-02:/2017/becoming-a-contributor.html</guid><category>talks</category><category>software development</category><category>rust</category><category>open source software</category></item></channel></rss>