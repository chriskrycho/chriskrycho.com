<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - typography</title><link>http://v4.chriskrycho.com/</link><description></description><lastBuildDate>Mon, 26 Aug 2019 08:50:00 -0400</lastBuildDate><item><title>Cronos Follow-Up</title><link>http://v4.chriskrycho.com/2019/cronos-follow-up.html</link><description>&lt;p&gt;&lt;i&gt;&lt;b&gt;&lt;a href="https://v4.chriskrycho.com/2018/assumed-audiences.html"&gt;Assumed Audience&lt;/a&gt;:&lt;/b&gt; design types and typography nerds… and digital economics and licensing geeks.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Yesterday, I wrote a &lt;a href="https://v4.chriskrycho.com/2019/cronos.html"&gt;post&lt;/a&gt; extolling the virtues of the lovely (and quirky!) typeface &lt;a href="https://www.myfonts.com/fonts/adobe/cronos/"&gt;Cronos&lt;/a&gt;. Today, I’m back to report on at least &lt;em&gt;one&lt;/em&gt; of the reasons why it’s not in wider use. In short: Adobe has made it available for web font usage &lt;em&gt;only&lt;/em&gt; if you’re on a subscription plan through Typekit or one of their other partners (e.g. Fonts.com).&lt;/p&gt;
&lt;p&gt;For context, most web fonts are licensed on a per-pageview basis, where once you exceed the number of allotted views using that web font, you need to pay again to extend or increase the license. The aim—whether it works well or not, I can’t say—is to make it so that high-volume sites pay more to the type foundry (and hopefully designer). The idea makes sense: if your brand relies heavily on someone’s design work, and specifically you’re raking in the profits becuase of your website’s use of that design work, one way to monetize that effectively is to align cost and usage.&lt;/p&gt;
&lt;p&gt;Many foundries allow you to get this two ways: either via a subscription, or via a one-time purchase, which you only need to revisit if you exceed the number of page views you paid for. This is how the fantastic type faces at &lt;a href="https://klim.co.nz"&gt;Klim Type Foundry&lt;/a&gt; work, for example—and it’s one of the reasons I went with &lt;a href="https://klim.co.nz/retail-fonts/tiempos-headline/"&gt;Tiempos&lt;/a&gt; for the &lt;a href="https://winningslowly.org"&gt;Winning Slowly&lt;/a&gt; site redesign last year. Unfortunately, Adobe is &lt;em&gt;not&lt;/em&gt; one of those foundries.&lt;/p&gt;
&lt;p&gt;As I’m in the process of reworking this site—you can see the work-in-progress version &lt;a href="https://v5.chriskrycho.com"&gt;here&lt;/a&gt;; I will probably launch it in a couple weeks—I wanted to move off my subscription to Fonts.com, and simply pay for these fonts on a one-time basis. I don’t use anything near the actual page views a normal license would account for, so that would be far, far more cost effective for me than paying $300 every three years. But… I can’t, if I want to keep using Cronos. Worse: that Fonts.com license is the lowest rate I can pay. If I try to get it directly through Adobe, I have to pay for &lt;a href="https://www.adobe.com/creativecloud/plans.html"&gt;a Creative Cloud subscription&lt;/a&gt;—which &lt;em&gt;starts&lt;/em&gt; at $20/month for a plan that includes their fonts (vs. the ~$8.33/month that Fonts.com works out to).&lt;/p&gt;
&lt;p&gt;These plans no doubt make sense for Adobe, and they’re no doubt economical if you’re a designer who is providing typography work (including web fonts) for a large number of clients. But I’m not. I’m just building my own website, and I only need a couple typefaces for it. The math isn’t there for me.&lt;/p&gt;
&lt;p&gt;And the net of that is that I might drop Cronos from &lt;a href="https://v5.chriskrycho.com"&gt;v5.chriskrycho.com&lt;/a&gt; and replace it with something that I can justify price-wise. The prospect makes me genuinely sad—because I meant every word of yesterday’s paean to the typeface.&lt;/p&gt;
&lt;p&gt;This is one of those places where the absolute best commercial outcome for an organization is at odds with the best overall outcome: because the point of a typeface is to be &lt;em&gt;used&lt;/em&gt;. And Adobe’s current licensing means Cronos (and many other of its fonts) will get used a lot less than they otherwise might. Alas.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 26 Aug 2019 08:50:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2019-08-26:/2019/cronos-follow-up.html</guid><category>typography</category><category>design</category><category>licenses</category></item><item><title>Cronos</title><link>http://v4.chriskrycho.com/2019/cronos.html</link><description>&lt;p&gt;&lt;i&gt;&lt;b&gt;&lt;a href="https://v4.chriskrycho.com/2018/assumed-audiences.html"&gt;Assumed Audience&lt;/a&gt;:&lt;/b&gt; design types and typography nerds.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I’m not sure when I first stumbled on &lt;a href="https://www.myfonts.com/fonts/adobe/cronos/"&gt;Cronos&lt;/a&gt;, but it was a &lt;em&gt;long&lt;/em&gt; time ago at this point. I launched a version of this website using Cronos for titles back in 2012. I’ve experimented with a number of typefaces for the body text since then—including &lt;a href="https://www.myfonts.com/fonts/adobe/minion/"&gt;Minion&lt;/a&gt;, &lt;a href="https://software.sil.org/gentium/"&gt;Gentium&lt;/a&gt;, and finally &lt;a href="https://www.myfonts.com/fonts/linotype/sabon/"&gt;Sabon&lt;/a&gt;—but Cronos has never changed. Every time I’ve thought about moving away from it, I’ve been dissatisfied with everything else I’ve looked at using in its place. It makes for a &lt;em&gt;solid&lt;/em&gt; choice for body text, but is a &lt;em&gt;remarkable&lt;/em&gt; titling face.&lt;/p&gt;
&lt;p&gt;And yet no one seems to know about it. I have never seen it on another website, or in print. (The three body typefaces I’ve used I have seen &lt;em&gt;plenty&lt;/em&gt; of other places—online, in apps, and in print.) On the one hand, that’s kind of delightful: it gives my site a fairly distinctive identity. On the other hand, it’s a shame, because it’s such a lovely sans! It deserves a wider audience! I’ll gladly give up some of my site’s uniqueness to see this beautiful thing get more use.&lt;/p&gt;
&lt;p&gt;It has &lt;em&gt;just&lt;/em&gt; enough character to stand out from the wash of geometric and humanist sans that are in vogue these days, but it doesn’t call attention to itself or cross over into being &lt;em&gt;weird&lt;/em&gt;. (“Weird” isn’t bad, to be clear: it’s often very good! But Cronos isn’t weird.) It’s interesting, but only if you stop to look at it closely. It almost wants to be a serif: there are little curls and hooks—as on the &lt;em&gt;r&lt;/em&gt; or &lt;em&gt;m&lt;/em&gt; or &lt;em&gt;n&lt;/em&gt; ascenders, or at the caps of the &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;N&lt;/em&gt; and &lt;em&gt;M&lt;/em&gt;. The &lt;em&gt;t&lt;/em&gt; has a little jag between its ascender and its crossbar. The descender of the &lt;em&gt;y&lt;/em&gt; is curved, just a little. End caps all swoop away, refusing to be totally straight. And yet when you take it all in on the page, none of those details are so bold that they actively draw your eye. They make it interesting, but never distract. It’s quirky and balanced and pairs perfectly with just about any serif you can throw at it (and many a sans, too). Go wild and pair with a monospace if you want! It somehow just &lt;em&gt;works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.myfonts.com/fonts/adobe/cronos/"&gt;Go use it&lt;/a&gt;, people!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 25 Aug 2019 12:10:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2019-08-25:/2019/cronos.html</guid><category>typography</category><category>design</category></item><item><title>CSS Fallback for OpenType Small Caps</title><link>http://v4.chriskrycho.com/2015/css-fallback-for-opentype-small-caps.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;I wrote this up as &lt;a href="http://stackoverflow.com/questions/24846264/css-fallback-for-opentype-small-caps/25172932#25172932"&gt;a question on Stack Overflow&lt;/a&gt; a bit over a year ago. It has continued to get a fair bit of traffic, so I’ve republished it here and cleaned it up a bit.&lt;/i&gt;&lt;/p&gt;
&lt;section id="the-problem" class="level2"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over the last year, I’ve worked on &lt;a href="//holybible.com"&gt;a site&lt;/a&gt; where small caps are important: setting the text of the Bible. In the Old Testament the name of God is transliterated as &lt;code&gt;Lord&lt;/code&gt; but in small caps—not “LORD” but &lt;span class="divine-name"&gt;Lord&lt;/span&gt; (RSS readers will want to click through and see this on my site). However, the state of OpenType small caps support at the moment is… less than optimal. Safari (even up through Safari 9 on El Capitan, from which I am typing this) still doesn’t support the &lt;code&gt;-webkit-font-feature-settings: 'smcp'&lt;/code&gt; option, and a lot of the hits for this website will be coming from mobile.&lt;/p&gt;
&lt;p&gt;Unfortunately, “graceful degradation” is problematic here: if you specify both &lt;code&gt;font-variant: small-caps&lt;/code&gt; and &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; in a browser that supports the latter (e.g. Chrome), the &lt;code&gt;font-variant&lt;/code&gt; declaration overrides it, so the horribly ugly old-style version still comes into play. (Note: this is as it should be per the &lt;a href="http://www.w3.org/TR/css-fonts-3/#feature-precedence"&gt;spec&lt;/a&gt;: the &lt;code&gt;font-variant&lt;/code&gt; declaration has a higher priority than the &lt;code&gt;font-feature-settings&lt;/code&gt; declaration). Given the current implementations of &lt;code&gt;font-variant: small-caps&lt;/code&gt;, though—shrunken capitals rather than actual small capitals—the result is that using &lt;code&gt;font-variant: small-caps&lt;/code&gt; realists in not-so-gracefully degrading &lt;em&gt;everyone’s&lt;/em&gt; reading experience.&lt;/p&gt;
&lt;p&gt;In the past, I have exported the small caps as a distinct webfont and specified them directly; see &lt;a href="http://v4.chriskrycho.com/2014/learning-qml-part-1.html"&gt;this post&lt;/a&gt; for a simple example: the first line of each paragraph is specified that way.&lt;/p&gt;
&lt;p&gt;While I &lt;em&gt;can&lt;/em&gt; do the same thing here (and at least in theory could deliver a pretty small typeface, since I really only need three characters: &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt;), I’d prefer simply to enable sane fallbacks. As noted above, however, that’s not possible. I am &lt;em&gt;open to&lt;/em&gt; but would very much prefer to avoid server-side solutions (browser detection, etc.) as a point of complexity that is better to minimize, especially given how rapidly browsers change. How else might one solve this problem, and especially are there existing solutions for it?&lt;/p&gt;
&lt;p&gt;In the future, &lt;code&gt;font-variant: small-caps&lt;/code&gt; will handle this nicely, as per &lt;a href="http://www.w3.org/TR/css3-fonts/#small-caps"&gt;the spec&lt;/a&gt; it should display a small-capitals-variant of the typeface if the typeface supplies it. However, at present, &lt;em&gt;no browser supports this&lt;/em&gt; (at least, none that I can find!). This means that instead, they all render fake small capitals simply by scaling down actual capitals. The result is typographically unpleasant, and unacceptable on this project.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solutions" class="level2"&gt;
&lt;h2&gt;The Solution(s)&lt;/h2&gt;
&lt;p&gt;I spent a considerable amount of time researching this and wrestling with it. After digging around as best I could, the top solutions for now are:&lt;/p&gt;
&lt;section id="supports" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Take advantage of the &lt;code&gt;@supports&lt;/code&gt; rule in browsers. This is what I initially opted to do on this project.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; You use the rule this way:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.some-class {
    font-variant: small-caps;
}

@supports(font-feature-settings: &amp;#39;smcp&amp;#39;) {
    .some-class {
        font-variant: normal;
        font-feature-settings: &amp;#39;smcp&amp;#39;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I’ve simplified by leaving out the prefixed versions; you’ll need to add the &lt;code&gt;-webkit-&lt;/code&gt; and &lt;code&gt;-moz-&lt;/code&gt; prefixes to get this actually working.) This has the advantage that support for real small caps and support for the &lt;code&gt;@supports&lt;/code&gt; rule are very similar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@supports&lt;/code&gt;: &lt;a href="http://caniuse.com/#feat=css-featurequeries"&gt;Can I Use Feature Queries?&lt;/a&gt;: Chrome 31+, Firefox 29+, Opera 23+, Android 4.4+, Safari 9+, Edge 12+, Chrome for Android&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-feature-settings&lt;/code&gt;: &lt;a href="http://usabilitypost.com/2014/05/10/using-small-caps-and-text-figures-on-the-web/"&gt;Using Small Caps &amp;amp; Text Figures on the Web&lt;/a&gt;: Chrome, Firefox, IE10+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This isn’t perfect: since IE10/11 don’t implement &lt;code&gt;@supports&lt;/code&gt;, you miss one browser—sort of. At this point, IE is a legacy browser, and Edge has had &lt;code&gt;@supports&lt;/code&gt; available from the start. Thus, this gets you most of the way there, and it should be future-facing: this should progressively enhance the site nicely. The normal (bad, but functional) small caps are displayed in the meantime, and when browsers eventually get around to using OpenType small caps by default for &lt;code&gt;font-variant: small-caps&lt;/code&gt;, this will continue to work just fine. It’s “progressive enhancement” and it’ll work nicely for most purposes.&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="typeface-subsetting" class="level3"&gt;
&lt;h3&gt;Typeface subsetting&lt;/h3&gt;
&lt;p&gt;As mentioned above, one can create a subset of the typeface that includes only small capitals. This is what I have done for the small caps on this site; see the example in the first paragraph.&lt;/p&gt;
&lt;p&gt;To pull this off, you’ll need to start by subsetting the typeface. You can do this manually with a font tool, or (the simpler way) you can use FontSquirrel’s custom subsetting tool in their &lt;a href="http://www.fontsquirrel.com/tools/webfont-generator"&gt;webfont generator&lt;/a&gt;. (&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; You &lt;em&gt;must&lt;/em&gt; check the license and confirm that the typeface in question allows this kind of modification. See below.) In the web font generator, first upload the file you wish to modify. Then choose the &lt;strong&gt;Expert&lt;/strong&gt; radio button. Most of the settings you can leave as they are; they’re good sane defaults. Midway down the page you’ll see &lt;strong&gt;OpenType Flattening&lt;/strong&gt; options. Here, select only “Small Caps”. Run the generator. The result will be a complete replacement of the normal lowercase letters with the small caps set.&lt;a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In that case, you can simply apply a style to the elements you want to have small capitals, e.g.:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.divine-name {
    font-family: &amp;#39;my_typeface_smcp&amp;#39;, &amp;#39;my_typeface&amp;#39;, serif;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The major advantage to this approach is consistency: that typeface is going to display on every browser out there, back to IE5.5, as long as you deliver it correctly using the various hooks required by &lt;code&gt;@font-face&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a few disadvantages to this approach, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It means delivering another font file. In my case, this would be an acceeptably low size (since I actually only need four characters), but it’s still something to consider in general. It is in any case another HTTP request, which is going to further slow the page load time or at least give you some flash of unstyled text when it reloads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It may violate the licenses of the typefaces in question. For at least one of the fonts I used on this project, it &lt;em&gt;does&lt;/em&gt;: the license explicitly forbids rebuilding the font using tools like FontSquirrel. (FontSquirrel was the tool I used for this approach before, and it works quite well.) This is a make-or-break issue for using a subset of a typeface to accomplish the goal. That being said, if you have a good reason to do it, you may be able to get support from the vendor (especially if they’re a small shop). For the project that prompted this question, I was able to do just that with a nice email—the designer is a great guy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The other major reason not to do it this way is that it has a significantly higher maintenance cost. If at any point you need to change or update the typeface, you have to go through the subsetting process all over again. By contrast, the first option will simply &lt;em&gt;work&lt;/em&gt;, though admittedly not as pleasantly as one might hope, and will not only continue to work but will actually improve over time as browsers increase their implementation of the CSS3 standard.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I opted for the second solution on HolyBible.com—typography was one of the driving differentiators for the site, so I prioritized it and did the necessary legwork for it. In general, though, the first option should work well for most sites. In any case, both ways work, though the first one is a &lt;em&gt;better&lt;/em&gt; example of progressive enhancement. And we can all look forward to the day when true small-caps support is available on every browser, right?&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;For various reasons (especially see note 2 below), I actually opted for the second approach outlined here, which is the same approach I was trying to avoid. Alas.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;Issues remain: even in the latest Chrome (46 as of the time of this post), using the &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; approach has some issues. For example, if you turn on &lt;code&gt;letter-spacing&lt;/code&gt; (a fairly common &lt;a href="http://practicaltypography.com/letterspacing.html"&gt;recommendation&lt;/a&gt; for small caps), the small caps will revert to normal lowercase letters.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3" role="doc-endnote"&gt;&lt;p&gt;From the FontSquirrel blog post that introduced the feature:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have a font with OpenType features, you can now flatten some of them into your webfont. For instance, some fonts have small caps built in, but they are completely inaccessible in a web browser. By selecting the “Small Cap” option, the Generator will replace all the lowercase glyphs with the small cap variants, giving you a small cap font. Please note that not all OpenType features are supported and if the font lacks OpenType features, using these options won’t create them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a href="#fnref3" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 19 Oct 2015 20:00:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2015-10-19:/2015/css-fallback-for-opentype-small-caps.html</guid><category>design</category><category>software development</category><category>typography</category></item><item><title>Tolle Lege!</title><link>http://v4.chriskrycho.com/2015/tolle-lege.html</link><description>&lt;p&gt;I was delighted to be able to give a talk at &lt;a href="http://bibletechconference.com/"&gt;BibleTech&lt;/a&gt; this year. I spoke for almost exactly 40 minutes on the subject of digital typography, with a focus on some of the nitty-gritty details that make texts readable… or not. Here is the screen capture and audio from the talk!&lt;/p&gt;
&lt;div class="iframe-wrapper four-to-three"&gt;
&lt;iframe src="https://player.vimeo.com/video/126655499" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;You can also access the &lt;a href="/talks/bibletech2015/"&gt;slides&lt;/a&gt; whenever you like (though note that they were designed to be complements to the talk, &lt;em&gt;not&lt;/em&gt; the content of the talk, and as such they elide a great deal of the content).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 01 May 2015 10:30:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2015-05-01:/2015/tolle-lege.html</guid><category>design</category><category>typography</category><category>talks</category></item></channel></rss>