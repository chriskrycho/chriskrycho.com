<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - emberjs</title><link>http://www.chriskrycho.com/</link><description></description><lastBuildDate>Fri, 11 May 2018 20:45:00 -0400</lastBuildDate><item><title>#EmberJS2018, Part 1</title><link>http://www.chriskrycho.com/2018/emberjs2018-part-1.html</link><description>&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doubling Down on Docs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;section id="finishing-what-weve-started" class="level2"&gt;
&lt;h2&gt;Finishing What We’ve Started&lt;/h2&gt;
&lt;p&gt;What I want, more than any new feature anyone could come up with, is for this to be the year Ember.js commits to &lt;em&gt;finishing what we have started&lt;/em&gt;. The last few years have seen the Ember team do a lot of really important exploratory work, including projects like &lt;a href="https://glimmerjs.com"&gt;Glimmer.js&lt;/a&gt;; and we have landed some of the initiatives we have started. But I think it’s fair to say that focus has not been our strong suit. It’s time for a year of &lt;em&gt;shipping&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We need to land all the things we have in flight, and as much as possible avoid the temptation (much though I feel it myself!) to go haring off after interesting new ideas. As such, literally everything I list below is an effort &lt;em&gt;already in progress&lt;/em&gt;. It’s just a matter of making concerted efforts as a community to land them.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that way of putting it is important: we have to make concerted efforts &lt;em&gt;as a community&lt;/em&gt; to land these things. Very, very few people are paid to work on Ember.js full time—far too few to accomplish all of this! If these things matter to you and your company, find a way to carve out time for it. Even if it’s just a few hours a week, even if it’s “just” (and there’s no “just” about these!) helping out with triage of open issues or answering questions in Slack or Discourse or Stack Overflow, even if it doesn’t &lt;em&gt;feel&lt;/em&gt; like a lot… it adds up.&lt;/p&gt;
&lt;p&gt;To be very clear, before I go any further: none of this is a knock on everything that the Ember core team and community have done in the last couple years. A lot of things that have landed along the way—dropping in the Glimmer rendering engine midway through the 2.x series, landing ES5 getters just weeks ago in Ember 3.1, and so on—are genuinely great! &lt;em&gt;All&lt;/em&gt; that I mean is, a year where we land and polish everything would make everything that much more awesome (and make Ember that much more competitive a choice in the client-side framework world).&lt;/p&gt;
&lt;p&gt;So: what do we need to ship this year?&lt;/p&gt;
&lt;section id="land-glimmer-components-in-ember.js-proper" class="level3"&gt;
&lt;h3&gt;Land Glimmer &lt;code&gt;&amp;lt;Component&amp;gt;&lt;/code&gt;s in Ember.js proper&lt;/h3&gt;
&lt;p&gt;We’ve taken the first steps toward this already via a number of &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;s that were written late last year and merged since. We need to finish the implementation for these. That means getting the &lt;a href="https://github.com/emberjs/ember.js/issues/16301"&gt;Glimmer Components in Ember&lt;/a&gt; quest across the finish line.&lt;/p&gt;
&lt;p&gt;The whole story here will make Ember &lt;em&gt;feel&lt;/em&gt; much more modern in a variety of ways, as well as enabling some great performance and programming model wins: Immutable component arguments! Auto-tracked class properties! &lt;code&gt;&amp;lt;AngleBracketComponent&amp;gt;&lt;/code&gt; invocation! Clear semantic distinctions between arguments and local context! So many good things. We just need to land it! &lt;a href="https://github.com/emberjs/ember.js/issues/16301"&gt;The quest&lt;/a&gt; needs to be moving forward, not stagnant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Show up and volunteer to go after pieces of the quest. There are people willing to mentor you through the work that needs to be done!&lt;/li&gt;
&lt;li&gt;Test it as it lands! You don’t have to commit to &lt;em&gt;shipping&lt;/em&gt; things in your app to &lt;em&gt;test&lt;/em&gt; them in your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="land-a-lot-of-ember-cli-efforts" class="level3"&gt;
&lt;h3&gt;Land a &lt;em&gt;lot&lt;/em&gt; of Ember CLI efforts&lt;/h3&gt;
&lt;p&gt;There are a great many Ember CLI efforts in flight. Every last one of them should be on stable and in use before the end of the year.&lt;/p&gt;
&lt;section id="module-unification" class="level4"&gt;
&lt;h4&gt;Module Unification&lt;/h4&gt;
&lt;p&gt;The &lt;a href="https://github.com/dgeb/rfcs/blob/module-unification/text/0000-module-unification.md"&gt;Module Unification &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;&lt;/a&gt; was opened in May 2016 and merged October 2016. There has been a lot of progress made, but we need to &lt;em&gt;ship it&lt;/em&gt;—from where I stand, it’d be nice if it landed less than 2 years after we approved it! And we’re &lt;a href="https://github.com/emberjs/ember.js/issues/16373"&gt;getting pretty close&lt;/a&gt;; you can actually use the Module Unification blueprint in an Ember application today. Some stuff doesn’t work &lt;em&gt;quite&lt;/em&gt; right yet, but it’s getting close.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; try it out! Spin up new apps with the module unification blueprint flag, and try running the migrator codemod, and report back on what breaks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="broccoli-1.0" class="level4"&gt;
&lt;h4&gt;Broccoli 1.0&lt;/h4&gt;
&lt;p&gt;We’re &lt;em&gt;super&lt;/em&gt; close on this one—Oli Griffiths has done some heroic work on this since EmberConf—but we need to finish it. Ember CLI, for historical reasons, has been using a fork of Broccoli.js for quite some time. This divergence has caused all manner of trouble, including compatibility issues between Broccoli plugins and an inability to take advantage of the best things that have landed in Broccoli since the fork happened.&lt;/p&gt;
&lt;p&gt;Perhaps the single most important example of that is that Broccoli 1.0 supports the use of the system &lt;code&gt;tmp&lt;/code&gt; directory. That single change will improve the performance of Ember CLI &lt;em&gt;dramatically&lt;/em&gt;, especially on Windows. It will also flat-out eliminate a number of bugs and odd behaviors that appear when trying to integrate Ember CLI with other file watching tools (e.g. TypeScript’s &lt;code&gt;--watch&lt;/code&gt; invocation).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; once the Ember CLI team says it’s ready for testing, test your app and addons with it! Make sure that everything works as it should—specifically, that you’re not making any assumptions that depend on either the forked &lt;abbr&gt;API&lt;/abbr&gt; or the location of the &lt;code&gt;tmp&lt;/code&gt; directory used for intermediate build steps.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-new-packager-setup-with-tree-shaking-and-app-splitting" class="level4"&gt;
&lt;h4&gt;The new &lt;code&gt;Packager&lt;/code&gt; setup, with tree-shaking and app-splitting&lt;/h4&gt;
&lt;p&gt;One of the current major pain points with Ember’s build pipeline is that it’s hard to extend, and not really documented at all. (I’ll have a &lt;em&gt;lot&lt;/em&gt; more to say on the question of documentation in the next post!) However, work is in progress to change that, too!&lt;/p&gt;
&lt;p&gt;The accepted-and-actively-being-worked-on &lt;a href="https://github.com/ember-cli/rfcs/blob/master/active/0051-packaging.md"&gt;Packaging Ember CLI &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;&lt;/a&gt; aims to fix both of these. Quoting from it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The current application build process merges and concatenates input broccoli trees. This behaviour is not well documented and is a tribal knowledge. While the simplicity of this approach is nice, it doesn’t allow for extension. We can refactor our build process and provide more flexibility when desired.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few of the things we can expect to be possible once that effort lands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tree-shaking – we can lean on Rollup.js to get &lt;em&gt;only&lt;/em&gt; the code we actually need, cutting shipped file size dramatically&lt;/li&gt;
&lt;li&gt;app-splitting – lots of different strategies to explore, including route-based or “section”-based, etc.&lt;/li&gt;
&lt;li&gt;static-build-asset-splitting – no reason to cache-bust your &lt;em&gt;dependencies&lt;/em&gt; every time the app releases!&lt;/li&gt;
&lt;li&gt;distinct app builds – you could ship one build of your app for browsers which support ES Modules and one for browsers which don’t (heeeeey, IE11) – letting you minimize the payload size for the ones that do&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you know Ember CLI internals: pop into #-dev-ember-cli and ask how you can help land the features&lt;/li&gt;
&lt;li&gt;If you don’t know Ember CLI internals: also pop into #-dev-ember-cli, but ask instead how you can &lt;em&gt;test&lt;/em&gt; the changes&lt;/li&gt;
&lt;li&gt;Help document those internals (see the next post in this series)&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="install-your-way-to-ember" class="level3"&gt;
&lt;h3&gt;Install-your-way-to-Ember&lt;/h3&gt;
&lt;p&gt;We need to finish splitting apart the Ember source from its current state of still being fairly monolith and get it turned into a true set of packages. The new Modules API which landed last year was a huge step toward this and made the experience on the developer side &lt;em&gt;look&lt;/em&gt; like this should be possible—but that’s still a shim around the actual non-modularized Ember core code. The process of splitting it apart &lt;em&gt;is happening&lt;/em&gt;, but we need to finish it.&lt;/p&gt;
&lt;p&gt;The promise here is huge: Ember will be able to be the kind of thing you can progressively add to your existing applications and slowly convert them, rather than something that comes along all as a large bundle. It’s technically possible to do this today, but you cannot drop in &lt;em&gt;just the view layer&lt;/em&gt;, for example, and that’s a huge value for people who want to try out the programming model or add it for just one feature in an existing application.&lt;/p&gt;
&lt;p&gt;Making it possible for people to install Glimmer components, then the service layer, then the router, and so on as they need it will make adoption easier for people who are curious about the framework. But it will also be a huge boon to those of us already using Ember and wanting to migrate existing applications (often a tangled mix of server-side rendering and massive jQuery spaghetti files!) to Ember progressively. I’ve had multiple scenarios come up at my own job in just the last month where this would have been hugely useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; make it known that you’re willing to help work on breaking apart Ember into its constituent pieces, and as that effort lands (hopefully over the rest of this year!) test it in your own apps and addons, and find the pain points in the install-your-way-to-the-framework process.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="make-typescript-great-everywhere" class="level3"&gt;
&lt;h3&gt;Make TypeScript &lt;em&gt;great&lt;/em&gt; everywhere&lt;/h3&gt;
&lt;p&gt;This one is near and dear to my heart… and it also really falls in no small part to me and the rest of the group working on ember-cli-typescript and type definitions for the Ember ecosystem!&lt;/p&gt;
&lt;p&gt;There are two big wins we can land this year:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Built-in support in Ember.js itself.&lt;/li&gt;
&lt;li&gt;Solid type definitions for the rest of the Ember.js ecosystem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you don’t like TypeScript, don’t panic! The upshot here will actually be a better experience for &lt;em&gt;all&lt;/em&gt; users of Ember.js.&lt;/p&gt;
&lt;section id="built-in-support-in-ember.js-itself" class="level4"&gt;
&lt;h4&gt;1. Built-in support in Ember.js itself&lt;/h4&gt;
&lt;p&gt;One of my goals for this summer&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; is to finish an &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; making TypeScript a first-class citizen of the Ember.js ecosystem. To clarify what this will and won’t entail (assuming it’s accepted, assuming I ever manage to finish writing it!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ember will &lt;em&gt;always&lt;/em&gt; be JS-first, and it will &lt;em&gt;never&lt;/em&gt; require type metadata reflected to runtime, unlike e.g. Angular. No one will ever have a &lt;em&gt;worse&lt;/em&gt; experience because they prefer JS to TS. The idea will be to make TypeScript an &lt;em&gt;equally&lt;/em&gt; good experience, and to include it for consideration when thinking about design choices for new features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember users, both JS and TS, will get the &lt;em&gt;benefits&lt;/em&gt; of having good types available right out of the box: many editors and IDEs can use TypeScript type definitions to enable better docs, autocompletion, etc.—and we may even be able to leverage it for &lt;a href="https://twitter.com/__dfreeman/status/994410180661170177"&gt;better validation of Handlebars templates&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll have (because we’ll have to have!) a story on what we support in terms of backwards compatibility and SemVer for TypeScript and Ember and the type definitions. Necessarily, it has been the Wild West for the first year of concentrated effort here, trying to get our type definitions from “barely exist and not useful” to “full coverage and 99% right.” But as TypeScript becomes more widely used, we have to have a stability story, and we very soon will.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s also ongoing work to convert Ember’s own internals to TypeScript, and landing that will help guarantee that the type definitions for Ember are actually &lt;em&gt;correct&lt;/em&gt;, which in turn will make the experience for everyone better. (Bad type definitions are worse than &lt;em&gt;no&lt;/em&gt; type definitions!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; engage in the &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process once we get it started, and if you are up for it show up to help convert the Ember internals to TypeScript as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solid-type-definitions-for-the-rest-of-the-ember.js-ecosystem" class="level4"&gt;
&lt;h4&gt;2. Solid type definitions for the rest of the Ember.js ecosystem&lt;/h4&gt;
&lt;p&gt;Closely related to making TypeScript a first-class citizen for Ember.js itself is getting the pieces in place for the rest of the ecosystem as well. That means we need type definitions for addons—a &lt;em&gt;lot&lt;/em&gt; of them! The ember-cli-typescript team will (hopefully late this month or in early June) be launching a quest issue to get type definitions for the whole Ember ecosystem in place—by helping convert addons to TS if their authors desire it, or by adding type definitions to the addons if they’re up for it, or by getting them up on DefinitelyTyped if they’re totally disinterested. (And, as I’ll note again in that quest issue, it’s totally fine for people &lt;em&gt;not&lt;/em&gt; to be interested: there &lt;em&gt;is&lt;/em&gt; a maintenance burden there!) The goal, again, is that when you’re using &lt;em&gt;any&lt;/em&gt; part of the Ember ecosystem it’ll be easy to get all the benefits of TypeScript—and indeed that in many cases you’ll get a fair number of those benefits as a JS user.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; participate in the quest issue once it’s live! We’ll help mentor you through the process of converting addons to TypeScript, writing type definitions and getting them well-validated, and so on!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That’s a lot to do. More than enough all by itself, and a lot of moving parts. As such, I’ll reiterate what I said at the start: we don’t need new features this year. &lt;strong&gt;It’s time for a year of &lt;em&gt;shipping&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;To put it in the terms the Rust community used for their similar push at the end of 2017, and which we have often used to describe the ongoing efforts in Rust to land the “Rust 2018 edition”: this is an “impl period”—a play on the Rust &lt;code&gt;impl&lt;/code&gt; keyword, used to describe the &lt;em&gt;implementation&lt;/em&gt; of the behavior associated with a given data type. You can think of this as the same: it’s the implementation of the good ideas we have.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Confession: it was a goal for the spring but I found myself utterly exhausted after EmberConf… and had a full month with &lt;em&gt;another&lt;/em&gt; major talk given for internal purposes afterwards. I’m worn out.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 11 May 2018 09:30:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-05-11:/2018/emberjs2018-part-1.html</guid><category>emberjs</category><category>javascript</category><category>typescript</category><category>emberjs2018</category></item><item><title>Announcing ember-cli-typescript 1.1.0</title><link>http://www.chriskrycho.com/2018/announcing-ember-cli-typescript-110.html</link><description>&lt;p&gt;I’m delighted to announce the release of &lt;a href="https://github.com/typed-ember/ember-cli-typescript/releases/tag/v1.1.0"&gt;ember-cli-typescript 1.1.0&lt;/a&gt;. This first minor release since 1.0 includes the following shiny and awesome new features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#generators"&gt;Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#developing-addons"&gt;Support for developing addons in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#incremental-compilation"&gt;Incremental compilation (a.k.a. fast rebuilds in &lt;code&gt;ember serve&lt;/code&gt; mode)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="generators" class="level2"&gt;
&lt;h2&gt;Generators&lt;/h2&gt;
&lt;p&gt;We’ve now added support for generating &lt;em&gt;all&lt;/em&gt; standard Ember items as TypeScript files instead of JavaScript files. So now when you run &lt;code&gt;ember generate component user-profile&lt;/code&gt; for example, you’ll get &lt;code&gt;user-profile.ts&lt;/code&gt;, &lt;code&gt;user-profile-test.ts&lt;/code&gt;, and &lt;code&gt;user-profile.hbs&lt;/code&gt;. For most files, this is just a nicety—just two files you don’t have to rename!—but in the case of services, controllers, and Ember Data models, adapters, and serializers it will actually make a really big difference in your experience of using TypeScript in your app or addon.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those generators are &lt;em&gt;mostly&lt;/em&gt; identical with ones in Ember and Ember Data, just with &lt;code&gt;.ts&lt;/code&gt; instead of &lt;code&gt;.js&lt;/code&gt; for the extension. The only changes we have made are: (a) we’ve tweaked them to use classes where possible, and (b) we have customized the controller, service, and Ember Data model, adapter, and serializer generators so you get the most mileage out of TypeScript for the least effort we can manage today. So when you do &lt;code&gt;ember generate service session&lt;/code&gt;, this is what you’ll see:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;

export default class Session extends Service.extend({
  // anything which *must* be merged on the prototype
}) {
  // normal class definition
}

// DO NOT DELETE: this is how TypeScript knows how to look up your services.
declare module &amp;quot;ember&amp;quot; {
  interface ServiceRegistry {
    session: Session;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Courtesy of these generators, you can now write &lt;em&gt;almost&lt;/em&gt; exactly what you’d write in vanilla Ember and get full support for autocompletion of properties and methods on the &lt;code&gt;Session&lt;/code&gt; service, as well as type-checking for how you use those. Service and controller injections just require you to explicitly name the service or controller being injected:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { inject as service } from &amp;quot;@ember/service&amp;quot;;

export default class UserProfile extends Component {
  session = service(&amp;quot;session&amp;quot;);
  // note the string ^ naming the service explicitly
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, for example, if your &lt;code&gt;session&lt;/code&gt; service had a &lt;code&gt;login&lt;/code&gt; method on it:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;
import RSVP from &amp;quot;rsvp&amp;quot;;

export default class Session extends Service {
  login(email: string, password: string): RSVP.Promise&amp;lt;string&amp;gt; {
    // some API call to log in
  }
}

// DO NOT DELETE: this is how TypeScript knows how to look up your services.
declare module &amp;quot;ember&amp;quot; {
  interface ServiceRegistry {
    session: Session;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then anywhere you injected and used it, you’ll get auto-complete suggestions and type checking:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/ts-autocomplete.png" alt="autocompletion" /&gt;&lt;figcaption&gt;autocompletion&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/ts-type-checking.png" alt="type-checking" /&gt;&lt;figcaption&gt;type-checking&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(You’ll see the same kinds of things in other editors, from Vim to IntelliJ IDEA. Visual Studio Code is just my current editor of choice.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="addon-development" class="level2"&gt;
&lt;h2&gt;Addon development&lt;/h2&gt;
&lt;p&gt;As &lt;a href="http://www.chriskrycho.com/2017/announcing-ember-cli-typescript-100.html#the-roadmap"&gt;promised with the 1.0 release&lt;/a&gt;, 1.1 (though arriving much later than I hoped it would) includes support for developing addons with TypeScript.&lt;/p&gt;
&lt;p&gt;Strictly speaking, of course, you could &lt;em&gt;always&lt;/em&gt; develop addons using TypeScript, but there were two problems with it: (1) dependency management and (2) manual work required to deal with the dependency management problems.&lt;/p&gt;
&lt;section id="dependency-management" class="level3"&gt;
&lt;h3&gt;1. Dependency management&lt;/h3&gt;
&lt;p&gt;In the normal Ember CLI workflow, TypeScript had to be a &lt;code&gt;dependency&lt;/code&gt;—not a &lt;code&gt;devDependency&lt;/code&gt;—of the addon, because the normal pattern with Ember CLI is to ship the uncompiled files and have the consumer compile them all together at build time.&lt;/p&gt;
&lt;p&gt;This makes a certain amount of sense for Babel given the Ember community’s shared reliance on Babel: it’s just assumed to be part of every app build. In that case, it gives consumers control over their compilation target. If an app only needs to target evergreen browsers, it can do that and ship a smaller payload, because an addon won’t have pre-compiled in things like generator support, etc.&lt;/p&gt;
&lt;p&gt;In the case of TypeScript, however, this makes a lot less sense: many (probably &lt;em&gt;most&lt;/em&gt;) consumers of addons written in TypeScript will still be normal JavaScript consumers. We did not want to burden normal consumers with a TypeScript compile step. We &lt;em&gt;also&lt;/em&gt; didn’t want to burden any consumers with the reality that TypeScript is a &lt;em&gt;large&lt;/em&gt; install. TypeScript 2.6.2 is 32MB on disk for me. Even with some degree of deduplication by npm or yarn, if addons used a variety of versions of TypeScript for development—as they surely would!—the install cost for consumers would quickly spiral into a nasty spot. And again: that’s bad enough for someone who &lt;em&gt;wants&lt;/em&gt; to use TypeScript in their app; it’s far worse for someone who just wants to consume the compiled JavaScript.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="manual-workarounds" class="level3"&gt;
&lt;h3&gt;2. Manual workarounds&lt;/h3&gt;
&lt;p&gt;You could work around all of that by building the JavaScript (and TypeScript definitions) yourself. But as part of that, you had to do all the work of making sure both the JavaScript files and the type definitions you generated ended up in the right place for distribution and consumption. That was always possible, but it was also always going to be a lot of work. In practice, as far as I know, &lt;em&gt;no one has done this&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution" class="level3"&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;We now support TypeScript as a &lt;code&gt;devDependency&lt;/code&gt; and also manage the work of generating JavaScript and type definitions for you. All you have to do is install ember-cli-typescript into an addon, and then when you do your build step, we’ll automatically do the work (on prepublish) of generating TypeScript &lt;code&gt;.d.ts&lt;/code&gt; files and JavaScript source for you.&lt;/p&gt;
&lt;p&gt;Consumers of your addon, therefore, will (a) not know or care that the addon is written in TypeScript if they just want to consume it as normal JavaScript&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; or (b) will get the benefits of your having written the library in TypeScript without paying the penalty of having to have multiple versions of the TypeScript compiler downloaded to their own app.&lt;/p&gt;
&lt;p&gt;One important caveat: we do &lt;em&gt;not&lt;/em&gt; support TypeScript in an addon’s &lt;code&gt;app&lt;/code&gt; directory. However, for most addons, we don’t think this should be a problem. It’s rare for addons to put actual implementation in the &lt;code&gt;app&lt;/code&gt; directory; instead it has simply become conventional for the &lt;code&gt;app&lt;/code&gt; directory simply to have re-exports for convenient access to the functionality supplied by the addon.&lt;/p&gt;
&lt;p&gt;Also note that you can supply type definitions for your addon &lt;em&gt;without&lt;/em&gt; developing the addon itself in TypeScript.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; You do &lt;em&gt;not&lt;/em&gt; need ember-cli-typescript installed for that. You only need the addon if you actually want to take advantage of the opportunities TypeScript affords for developing your own addon.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="incremental-compilation" class="level2"&gt;
&lt;h2&gt;Incremental compilation&lt;/h2&gt;
&lt;p&gt;Last but not least, we’ve managed—mostly through the hard work of both Dan Freeman (&lt;a href="https://github.com/dfreeman"&gt;@dfreeman&lt;/a&gt;) and Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;—to get support for TypeScript’s &lt;code&gt;--watch&lt;/code&gt; mode integrated.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; What this means in practice is: &lt;em&gt;way&lt;/em&gt; faster iteration as you work.&lt;/p&gt;
&lt;p&gt;Previously, every time you triggered &lt;em&gt;any&lt;/em&gt; change in your app (even if it didn’t involve any TypeScript files at all), the TypeScript compiler would recompile &lt;em&gt;all&lt;/em&gt; the TypeScript files in your application. We didn’t initially have a good way to make TypeScript and Broccoli (and therefore Ember CLI) communicate clearly about what had changed. Now, courtesy of Dan and Derek’s hard work (and my cheerleading, testing, and fixing a few corner pieces along the way), we do! So when you change a &lt;code&gt;.hbs&lt;/code&gt; file or a &lt;code&gt;.js&lt;/code&gt; file… the TypeScript compiler won’t do anything. And when you change a TypeScript file, the TypeScript compiler will &lt;em&gt;only&lt;/em&gt; recompile that file.&lt;/p&gt;
&lt;p&gt;On my own app (~35,000 lines of TypeScript across ~700 files), that’s the difference between rebuilds involving TypeScript taking 15–20 seconds and their taking 1–2 seconds. Literally an order of magnitude faster! Over the course of a day of development, that saves a &lt;em&gt;huge&lt;/em&gt; amount of time.&lt;/p&gt;
&lt;p&gt;The way we did it also solved an incredibly annoying problem we had in the previous pass: &lt;em&gt;any&lt;/em&gt; change to your app was triggering &lt;code&gt;tsc&lt;/code&gt; to rebuild the entire TypeScript tree of your app, even if you didn’t so much as look at &lt;code&gt;.ts&lt;/code&gt; file. This was particularly annoying when combined with the long rebuild times: change a CSS file and wait for your TypeScript files to rebuild? Ugh. But not anymore!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="credit-and-thanks" class="level2"&gt;
&lt;h2&gt;Credit and Thanks&lt;/h2&gt;
&lt;p&gt;Massive credit goes to Dan Freeman (&lt;a href="https://github.com/dfreeman"&gt;@dfreeman&lt;/a&gt;) and Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;), who did most of the heavy lifting on the internals for this release, and together unlocked both incremental compilation and addon support. Derek also did the lion’s share of the work on writing the types for Ember and Ember Data.&lt;/p&gt;
&lt;p&gt;Thanks to Maarten Veenstra (&lt;a href="https://github.com/maerten"&gt;@maerten&lt;/a&gt;) for the original inspiration (and a spike last summer) for using a type registry, and to Mike North (&lt;a href="https://github.com/maerten"&gt;@mike-north&lt;/a&gt;) for some discussion and planning around the idea late in 2017. I may have implemented them, but the ideas came from the community!&lt;/p&gt;
&lt;p&gt;Thanks to Frank Tan (&lt;a href="https://github.com/tansongyang"&gt;@tansongyang&lt;/a&gt;) for doing a lot of the work on porting the generators from the Ember and Ember Data repositories to ember-cli-typescript, as well as converting them to TypeScript and to use the new formats. He also contributed the type definitions for the new (&lt;a href="https://github.com/emberjs/rfcs/pull/232/"&gt;RFC #232&lt;/a&gt;) QUnit testing API.&lt;/p&gt;
&lt;p&gt;Thanks to everyone who contributed to ember-cli-typescript or the Ember typings in any way since we released 1.0.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ember-cli-typescript contributors (note that I intentionally include here everyone who opened issues on the repository: that is &lt;em&gt;not&lt;/em&gt; a small thing and has helped us immensely):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bryan Crotaz (&lt;a href="https://github.com/BryanCrotaz"&gt;@BryanCrotaz&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Daniel Gratzl (&lt;a href="https://github.com/danielgratzl"&gt;@danielgratzl&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guangda Zhang (&lt;a href="https://github.com/inkless"&gt;@inkless&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/guangda-prosperworks"&gt;@guangda-prosperworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Krati Ahuja (&lt;a href="https://github.com/kratiahuja"&gt;@kratiahuja&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Martin Feckie (&lt;a href="https://github.com/mfeckie"&gt;@mfeckie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Nikos Katsikanis (&lt;a href="https://github.com/QuantumInformation"&gt;@QuantumInformation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Per Lundberg (&lt;a href="https://github.com/perlun"&gt;@perlun&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Prabhakar Poudel (&lt;a href="https://github.com/prabhakar-poudel"&gt;@Prabhakar-Poudel&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ryan LaBouve (&lt;a href="https://github.com/ryanlabouve"&gt;@ryanlabouve&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Simon Ihmig (&lt;a href="https://github.com/simonihmig"&gt;@simonihmig&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Theron Cross (&lt;a href="https://github.com/theroncross"&gt;@theroncross&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Thomas Gossman (&lt;a href="https://github.com/gossi"&gt;@gossi&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Vince Cipriani (&lt;a href="https://github.com/vcipriani"&gt;@vcipriani&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember typings contributors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adnan Chowdhury (&lt;a href="https://github.com/bttf"&gt;@bttf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Frank Tan (&lt;a href="https://github.com/tansongyang"&gt;@tansongyang&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guangda Zhang (&lt;a href="https://github.com/inkless"&gt;@inkless&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ignacio Bona Piedrabuena (&lt;a href="https://github.com/igbopie"&gt;@igbopie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Leonard Thieu &lt;a href="https://github.com/leonard-thieu"&gt;@leonard-thieu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logan Tegman &lt;a href="https://github.com/ltegman"&gt;@ltegman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Martin Feckie (&lt;a href="https://github.com/mfeckie"&gt;@mfeckie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mike North (&lt;a href="https://github.com/maerten"&gt;@mike-north&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Nathan Jacobson (&lt;a href="https://github.com/natecj"&gt;@natecj&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Per Lundberg (&lt;a href="https://github.com/perlun"&gt;@perlun&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Robin Ward (&lt;a href="https://github.com/eviltrout"&gt;@eviltrout&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to Rob Jackson (&lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt;) and Tobias Bieniek (&lt;a href="https://github.com/Turbo87"&gt;@Turbo87&lt;/a&gt; on GitHub, @tbieniek in the Ember Slack) for answering tons of questions and putting up with regular pestering about Ember CLI.&lt;/p&gt;
&lt;p&gt;And last but not least, thanks to everyone who’s popped into #topic-typescript on the Ember Community Slack with questions, comments, problem reports, and the occasional word of encouragement. It really does help.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For details on how this all works, see &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;TypeScript and Ember.js Update: Part 4&lt;/a&gt;, where I discuss these changes in detail.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;although they may actually get some benefits in a number of modern editors, since e.g. VS Code and the JetBrains IDEs will leverage types if they exist!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;More on that in a post to be released in the next couple weeks—one I promised &lt;em&gt;long&lt;/em&gt; ago, but which we’re now in a place to actually do: a plan and a roadmap for typing the whole Ember ecosystem!&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;And of course, right as we finally landed our support for it, by hacking around the &lt;code&gt;--watch&lt;/code&gt; invocation in a lot of really weird ways, Microsoft shipped API-level support for it. We hope to switch to using that under the hood, but that shouldn’t make any difference at all to you as a consumer of the addon, except that if/when we land it at some point, you’ll just have a nicer experience.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 12 Feb 2018 07:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-02-12:/2018/announcing-ember-cli-typescript-110.html</guid><category>emberjs</category><category>typescript</category><category>javascript</category><category>typing-your-ember</category></item><item><title>TypeScript and Ember.js Update, Part 4</title><link>http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the previous posts in this series, I introduced the big picture of how the story around TypeScript and Ember.js has improved over the last several months, walked through some important background on class properties, and dug deep on computed properties, actions, and mixins.&lt;/p&gt;
&lt;p&gt;In today’s post, we’ll look at how to write Ember Data models so they work correctly throughout your codebase, and see some improvements to how we can do &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; injections even from a few weeks ago.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s the outline of this update sequence:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Overview, normal Ember objects, component arguments, and injections.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Computed properties, actions, mixins, and class methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;&lt;strong&gt;Using Ember Data, and service and controller injections improvements.&lt;/strong&gt; (this post)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="ember-data" class="level2"&gt;
&lt;h2&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;There remains one significant challenges to using Ember Data effectively with TypeScript today: Ember Data, for reasons I haven’t yet dug into myself, does not play nicely with ES6 classes. However, we &lt;em&gt;need&lt;/em&gt; named class exports for the sake of being able to use them as types elsewhere in our programs. The hack to work around this is much the same as anywhere else we need named exports but have to get things back into the prototype:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can still define other items of the class normally, but attributes have to be prototypally bound or &lt;em&gt;you will have problems&lt;/em&gt;. Note that this only applies (as far as I can tell) to Ember Data &lt;code&gt;Model&lt;/code&gt;s specifically—&lt;code&gt;Adapter&lt;/code&gt; and &lt;code&gt;Serializer&lt;/code&gt; classes work just fine.&lt;/p&gt;
&lt;p&gt;The other problem we’ve historically had was dealing with lookups—the situation was similar to that I described in &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Part 3&lt;/a&gt; for service injection. However, as of &lt;em&gt;this week&lt;/em&gt;, we’re landing a solution that means you can drop the type coercions and just do a lookup like you would normally, and it will Just Work™️.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Keep your eyes open for the ember-cli-typescript 1.1 release in the next couple days!&lt;/p&gt;
&lt;p&gt;Once this release of both ember-cli-typescript and the updated typings land, when you generate an Ember Data model by doing &lt;code&gt;ember generate model person firstName:string lastName:string&lt;/code&gt;, it will look like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {
  // normal class body definition here
}

// DO NOT DELETE: this is how TypeScript knows how to look up your models.
declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That module and interface declaration at the bottom &lt;em&gt;merges&lt;/em&gt; the declaration for this model with the declarations for all the other models. You’ll see the same basic pattern for &lt;code&gt;DS.Adapter&lt;/code&gt; and &lt;code&gt;DS.Serializer&lt;/code&gt; instances. The result is that &lt;em&gt;using&lt;/em&gt; a model will now look like this. In addition to the &lt;code&gt;Person&lt;/code&gt; model definition just above, our adapter might be like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Adapter {
  update(changes: { firstName?: string; lastName?: string }) {
    fetch(&amp;quot;the-url-to-change-it&amp;quot;, {
      method: &amp;quot;POST&amp;quot;,
      body: JSON.stringify(changes)
    });
  }
}

declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then putting the pieces together, our component definition will just look like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { inject as service } from &amp;quot;@ember/service&amp;quot;;

export default class PersonCard extends Component {
  id: string | number;

  store = service(&amp;quot;store&amp;quot;);
  model = this.store.findRecord(&amp;quot;person&amp;quot;, this.id);

  actions = {
    savePerson(changes: { firstName?: string; lastName?: string }) {
      this.store.adapterFor(&amp;quot;person&amp;quot;).update(changes);
    }
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The type of &lt;code&gt;model&lt;/code&gt; here is now &lt;code&gt;Person &amp;amp; DS.PromiseObject&amp;lt;Person&amp;gt;&lt;/code&gt; (which is actually what Ember Data returns for these kinds of things!), and the &lt;code&gt;this.store.adapterFor&lt;/code&gt; actually correctly returns the &lt;code&gt;Person&lt;/code&gt; adapter as well, so the call to its &lt;code&gt;update&lt;/code&gt; method type-checks as well (including guaranteeing that the arguments to it are correct). That also means you’ll get autocompletion for those, including for their types, if you’re using an editor configured for it. And, happily for everyone, if you mistype a string (&lt;code&gt;preson&lt;/code&gt; instead of &lt;code&gt;person&lt;/code&gt;, for example), you’ll get a compile-time error!&lt;/p&gt;
&lt;p&gt;Notice as well that the service injection is much cleaner than it was in earlier examples in the series. That’s because we made the same “registry”-type changes—as I suggested we might back in &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Part 1&lt;/a&gt;!—for controller and service injections. Before, for this kind of thing:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;export default class PersonCard extends Component {
  store: Computed&amp;lt;DS.Store&amp;gt; = service();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;export default class PersonCard extends Component {
  store = service(&amp;quot;store&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s not &lt;em&gt;quite&lt;/em&gt; as minimalist as what you get in vanilla Ember (where the name of the property is used to do the lookup at runtime), but it’s pretty close, and a huge improvement! Not least since it’s &lt;em&gt;exactly&lt;/em&gt; as type-checked, and therefore as friendly to autocomplete/IntelliSense/etc. as it was before.&lt;/p&gt;
&lt;section id="migrating-existing-items" class="level3"&gt;
&lt;h3&gt;Migrating existing items&lt;/h3&gt;
&lt;p&gt;Your path forward for using the new approach is straightforward and fairly mechanical:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Add the module-and-interface declaration for each Ember Data &lt;code&gt;Model&lt;/code&gt;, &lt;code&gt;Adapter&lt;/code&gt;, and &lt;code&gt;Serializer&lt;/code&gt;; and also each Ember &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; you have defined.&lt;/li&gt;
&lt;li&gt;Remove any type coercions you’ve written out already for these.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="add-declaration" class="level4"&gt;
&lt;h4&gt;1. Add declaration&lt;/h4&gt;
&lt;section id="ds.model" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;DS.Model&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {}

declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ds.adapter" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;DS.Adapter&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Adapter {
  // customization
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Adapter {
  // customization
}

declare module &amp;quot;ember-data&amp;quot; {
  interface AdapterRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ds.serializer" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;DS.Serializer&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Serializer {
  // customization
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Serializer {
  // customization
}

declare module &amp;quot;ember-data&amp;quot; {
  interface SerializerRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="service" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;Service&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;

export default class ExternalLogging extends Service {
  // implementation
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;

export default class ExternalLogging extends Service {
  // implementation
}

declare module &amp;quot;ember&amp;quot; {
  interface ServiceRegistry {
    &amp;quot;external-logging&amp;quot;: ExternalLogging;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="controller" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;Controller&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Controller from &amp;quot;@ember/controller&amp;quot;;

export default class Profile extends Controller {
  // implementation
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Controller from &amp;quot;@ember/controller&amp;quot;;

export default class Profile extends Controller {
  // implementation
}

declare module &amp;quot;@ember/controller&amp;quot; {
  interface ControllerRegistry {
    profile: Profile;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you &lt;em&gt;don’t&lt;/em&gt; do add the type registry declarations, you’ll just get back:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;compiler errors&lt;/em&gt; for any use of a string key in your service and controller lookups&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; (the top-level classes we inherit from) instead of the specific class you created if you use the no-argument version of the &lt;code&gt;inject&lt;/code&gt; helpers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;compiler errors&lt;/em&gt; for &lt;code&gt;DS.Model&lt;/code&gt;, &lt;code&gt;DS.Adapter&lt;/code&gt;, and &lt;code&gt;DS.Serializer&lt;/code&gt; lookups (since they always have a string key)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re looking to allow your existing code to all just continue working while you &lt;em&gt;slowly&lt;/em&gt; migrate to TypeScript, you can add this as a fallback somewhere in your own project (adapted to whichever of the registries you need):&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    [key: string]: DS.Model;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will lose you the type-checking if you type a key that doesn’t exist, but it means that models you haven’t yet added the type definition for won’t throw compile errors. (We’ve made this opt-in because otherwise you’d never be able to get that type-checking for using an invalid key.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="remove-any-existing-coercions" class="level4"&gt;
&lt;h4&gt;2. Remove any existing coercions&lt;/h4&gt;
&lt;p&gt;Now that we have the necessary updates to be able to do these lookups automatically in the compiler, we need to remove any existing type coercions.&lt;/p&gt;
&lt;section id="service-and-controller" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This change is really straightforward (and actually just simplifies things a lot!) for &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; injections.&lt;/p&gt;
&lt;pre class="diff"&gt;&lt;code&gt;  import Component from &amp;#39;@ember/component&amp;#39;;
  import { inject as service } from &amp;#39;@ember/service&amp;#39;;
- import Computed from &amp;#39;@ember/object/computed&amp;#39;;
-
- import ExternalLogging from &amp;#39;my-app/services/external-logging&amp;#39;;

  export default class UserProfile extends Component {
-   externalLogging: Computed&amp;lt;ExternalLogging&amp;gt; = service();
+   externalLogging = service(&amp;#39;external-logging&amp;#39;);
    // other implementation
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ember-data-1" class="level5"&gt;
&lt;h5&gt;Ember Data&lt;/h5&gt;
&lt;p&gt;This looks &lt;em&gt;slightly&lt;/em&gt; different for the Ember Data side.&lt;/p&gt;
&lt;p&gt;If you’ve been using the type coercion forms we shipped as a stopgap, like this—&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;const person = this.store.findRecord&amp;lt;Person&amp;gt;(&amp;quot;person&amp;quot;, 123);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;—you’ll need to drop the type coercion on &lt;code&gt;findRecord&amp;lt;Person&amp;gt;&lt;/code&gt;, which will give you a type error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[ts] Type ‘Person’ does not satisfy the constraint ‘string’.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is because, behind the scenes, &lt;code&gt;findRecord&lt;/code&gt; still takes a type parameter, but it’s now a string—the name of the model you’re looking up—&lt;em&gt;not&lt;/em&gt; the model itself. As such, you should &lt;em&gt;never&lt;/em&gt; supply that type parameter yourself; it’s taken care of automatically. As a result, your invocation should just be:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;const person = this.store.findRecord(&amp;quot;person&amp;quot;, 123);&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-full-type-of-lookups" class="level3"&gt;
&lt;h3&gt;The full type of lookups&lt;/h3&gt;
&lt;p&gt;One last note on Ember Data: calls like &lt;code&gt;findRecord('person', 123)&lt;/code&gt; actually return the type &lt;code&gt;Person &amp;amp; DS.PromiseObject&amp;lt;Person&amp;gt;&lt;/code&gt; – i.e., a type that acts like both the model and a promise wrapping the model. This is, to be sure, &lt;em&gt;weird&lt;/em&gt;, but it’s the reality, so that’s what our types give you.&lt;/p&gt;
&lt;p&gt;If you find yourself needing to write out that type locally for some reason—e.g. because part of your app deals explicitly with the result of a lookup—you may find it convenient to define a global type alias like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;type Loaded&amp;lt;T&amp;gt; = T &amp;amp; DS.PromiseObject&amp;lt;T&amp;gt;;
const person: Loaded&amp;lt;Person&amp;gt; = this.store.findRecord(&amp;quot;person&amp;quot;, 123);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the new support for getting that type automatically, you shouldn’t &lt;em&gt;normally&lt;/em&gt; need that, but it’s convenient if or when you &lt;em&gt;do&lt;/em&gt; need it. For example, if a component is passed the result of a &lt;code&gt;Person&lt;/code&gt; lookup and needs to be able to treat it as a promise &lt;em&gt;or&lt;/em&gt; the model, you could write it like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;

export default class PersonDisplay extends Component {
  model: Loaded&amp;lt;Person&amp;gt;; // instead of just `model: Person`
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="preview-mirage" class="level3"&gt;
&lt;h3&gt;Preview: Mirage&lt;/h3&gt;
&lt;p&gt;As it turns out, Ember CLI Mirage’s approach is a lot like Ember Data’s (although it’s actually a lot more dynamic!), so I have a very similar approach working in our codebase for doing lookups with Mirage’s database. Sometime in February or March, we hope to get that completed and upstreamed into Mirage itself, so that you can get these exact same benefits when using Mirage to write your tests.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that’s pretty much a wrap on Ember Data! The &lt;em&gt;next&lt;/em&gt; post you can expect in this series will be a break from nitty-gritty “how to use TS in Ember” posts for a very exciting, closely related announcement—probably tomorrow or Monday! The post after that will be a deep dive into (mostly the limitations of!) writing types for mixins and proxies.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re curious about the mechanics, we’re basically setting up a “type registry” which maps the string keys to the correct model, so that the type of e.g. &lt;code&gt;store.createRecord('some-model', { ... })&lt;/code&gt; will do a lookup in an interface which defines a mapping from model name, i.e. &lt;code&gt;some-model&lt;/code&gt; here, to the model type, e.g. &lt;code&gt;export default class SomeModel extends DS.Model.extend({ ... }) {}&lt;/code&gt;. I’ll write up a full blog post on the mechanics of that sometime soon.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 08 Feb 2018 07:30:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-02-08:/2018/typing-your-ember-update-part-4.html</guid><category>TypeScript</category><category>emberjs</category><category>typing-your-ember</category></item><item><title>TypeScript and Ember.js Update, Part 3</title><link>http://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you’re following along with this &lt;em&gt;as I publish it&lt;/em&gt; in late January 2018, please go back and read the end of &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Part 2&lt;/a&gt;, which I updated substantially yesterday evening to include more material I missed in the first version of that post, but which belonged there and not here.&lt;/p&gt;
&lt;p&gt;In the previous posts in this series, I introduced the big picture of how the story around TypeScript and Ember.js has improved over the last several months and walked through some important background on class properties. In this post, I’ll build on that foundation to look closely at computed properties, actions, and mixins.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s the outline of this update sequence:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Overview, normal Ember objects, component arguments, and injections.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;&lt;strong&gt;Computed properties, actions, mixins, and class methods (this post).&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Using Ember Data, and service and controller injections improvements.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="a-detailed-example-contd.-computed-properties-mixins-actions-and-class-methods" class="level2"&gt;
&lt;h2&gt;A detailed example (cont’d.) – computed properties, mixins, actions, and class methods&lt;/h2&gt;
&lt;p&gt;Let’s start by recalling the example Component we’re working through:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import Computed from &amp;#39;@ember/object/computed&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;section id="computed-properties" class="level3"&gt;
&lt;h3&gt;Computed properties&lt;/h3&gt;
&lt;p&gt;We already covered component arguments and injections as well as basic class properties and the exceptions to normal class-property ways of doing things, in Parts &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;1&lt;/a&gt; and &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;2&lt;/a&gt;. With that background out of the way, we can now turn to computed properties. I’m including the component arguments in this code sample because they’re referenced in the computed property. Assume &lt;code&gt;Person&lt;/code&gt; is a pretty “person” representation, with a &lt;code&gt;firstName&lt;/code&gt; and a &lt;code&gt;lastName&lt;/code&gt;and maybe a few other properties.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;section id="computed-properties-1" class="level4"&gt;
&lt;h4&gt;&lt;code&gt;computed&lt;/code&gt; properties&lt;/h4&gt;
&lt;p&gt;When using a computed property in the brave new world of ES6 classes, we normally just assign them as instance properties. As mentioned in &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;the previous post&lt;/a&gt;, and in line with my comments above, this has some important tradeoffs around performance. If you need the absolute &lt;em&gt;best&lt;/em&gt; performance, you can continue to install them on the prototype by doing this instead:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component.extend({
  fromModel: computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  ),
}) {
  // other properties
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whichever way you do it, TypeScript will correctly infer the type of the computed property in question (here &lt;code&gt;fromModel&lt;/code&gt;) as long as you explicitly annotate the return type of the callback passed to &lt;code&gt;computed&lt;/code&gt;. Accordingly, in this case, the type of &lt;code&gt;fromModel&lt;/code&gt; is &lt;code&gt;ComputedProperty&amp;lt;string&amp;gt;&lt;/code&gt;. The fact that it’s a &lt;code&gt;ComputedProperty&lt;/code&gt; means if you try to treat it as a plain string, without using &lt;code&gt;Ember.get&lt;/code&gt; to unwrap it, TypeScript will complain at you.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// type checking error:
this.fromModel.length;

// type checking valid:
this.get(&amp;#39;fromModel&amp;#39;).length;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other really important thing to note here is the use of &lt;code&gt;this: MyComputed&lt;/code&gt;. By doing this, we’re telling TypeScript explicitly that the type of &lt;code&gt;this&lt;/code&gt; in this particular function is the class context. We have to do this here, because we don’t have any way to tell the &lt;code&gt;computed&lt;/code&gt; helper itself that the function inside it will be bound to the &lt;code&gt;this&lt;/code&gt; context of the containing class. Put another way: we don’t have any &lt;em&gt;other&lt;/em&gt; way to tell TypeScript that one of the things &lt;code&gt;computed&lt;/code&gt; does is bind &lt;code&gt;this&lt;/code&gt; appropriately to the function passed into it; but gladly we do have &lt;em&gt;this&lt;/em&gt; way—otherwise we’d be out of luck entirely! (You’ll see the same thing below when we look at actions). The boilerplate is a bit annoying, admittedly—but it at least makes it type-check.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="computed-property-macros" class="level4"&gt;
&lt;h4&gt;Computed property macros&lt;/h4&gt;
&lt;p&gt;Beyond &lt;code&gt;computed&lt;/code&gt;, there are a lot of other computed property tools we use all the time. Some of them can (and therefore &lt;em&gt;do&lt;/em&gt;) infer the type of the resulting computed property correctly. But there are a bunch of idiomatic things that TypeScript does not and cannot validate – a number of the computed property macros are in this bucket, because they tend to be used for nested keys, and as noted above, TypeScript does not and &lt;em&gt;cannot&lt;/em&gt; validate nested keys like that.&lt;/p&gt;
&lt;p&gt;We have a representative of each of these scenarios:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the case of &lt;code&gt;isLoggedIn&lt;/code&gt;, the &lt;code&gt;bool&lt;/code&gt; helper only ever returns a boolean, so the type of &lt;code&gt;isLoggedIn&lt;/code&gt; is &lt;code&gt;ComputedProperty&amp;lt;boolean&amp;gt;&lt;/code&gt;. In the case of &lt;code&gt;savedUser&lt;/code&gt;, since TypeScript can’t figure out what the nested key means, we have to specify it explicitly, using &lt;code&gt;Computed&amp;lt;Person&amp;gt;&lt;/code&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; In these cases, you have to do the work yourself to check that the type you specify is the &lt;em&gt;correct&lt;/em&gt; type. If you write down the wrong type here, TypeScript will believe you (it doesn’t have any other good option!) and you’ll be back to things blowing up unexpectedly at runtime.&lt;/p&gt;
&lt;p&gt;The typings supply the concrete (non-&lt;code&gt;any&lt;/code&gt;) return type for: &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;gte&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;lte&lt;/code&gt;, &lt;code&gt;match&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;notEmpty&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="on-nested-keys" class="level4"&gt;
&lt;h4&gt;On nested keys&lt;/h4&gt;
&lt;p&gt;As noted above, TypeScript cannot do a lookup for any place using nested keys—which means that &lt;code&gt;this.get('some.nested.key')&lt;/code&gt; won’t type-check, sadly. This is an inherent limitation of the type system as it stands today, and for any future I can foresee. The problem is this: what exactly &lt;em&gt;is&lt;/em&gt; &lt;code&gt;'some.nested.key'&lt;/code&gt;? It &lt;em&gt;could&lt;/em&gt; be what we use it for in the usual scenario in Ember, of course: a string representing a lookup on a property of a property of a property of whatever &lt;code&gt;this&lt;/code&gt; is. But it could equally well be a key named &lt;code&gt;'some.nested.key'&lt;/code&gt;. This is perfectly valid JavaScript, after all:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;const foo = {
  [&amp;#39;some.nested.key&amp;#39;]: &amp;#39;Well, this is weird, but it works&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TypeScript does not today and presumably &lt;em&gt;never will&lt;/em&gt; be able to do that lookup. The workaround is to do one of two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;If you &lt;em&gt;know&lt;/em&gt; you have a valid parent, you can do the (catastrophically ugly, but functional) nested &lt;code&gt;Ember.get&lt;/code&gt; that now litters our codebase:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import { get } from &amp;#39;@ember/object&amp;#39;;
const value = get(get(get(anObject, &amp;#39;some&amp;#39;), &amp;#39;nested&amp;#39;), &amp;#39;key&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, it’s a nightmare. But… it type-checks, and it works well &lt;em&gt;enough&lt;/em&gt; in the interim until we get a decorators-based solution that lets us leverage &lt;a href="https://github.com/emberjs/rfcs/pull/281"&gt;RFC #281&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;// @ts-ignore&lt;/code&gt; to simply ignore the type-unsafety of the lookup. This approach is preferable when you don’t know if any of the keys might be missing. If, for example, either &lt;code&gt;some&lt;/code&gt; or &lt;code&gt;nested&lt;/code&gt; were &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, the lookup example above in (1) would fail.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import { get } from &amp;#39;@ember/object&amp;#39;;
// @ts-ignore -- deep lookup with possibly missing parents
const value = get(anObject, &amp;#39;some.nested.key&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="actions" class="level3"&gt;
&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;What about actions? As usual, these just become class instance properties in the current scheme.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with computed properties, we need the &lt;code&gt;this&lt;/code&gt; type declaration to tell TypeScript that this method is going to be automatically bound to the class instance. Otherwise, TypeScript thinks the &lt;code&gt;this&lt;/code&gt; here is the &lt;code&gt;actions&lt;/code&gt; hash, rather than the &lt;code&gt;MyComponent&lt;/code&gt; class.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happily, that’s really all there is to it for actions: they’re quite straightforward other than needing the &lt;code&gt;this&lt;/code&gt; type specification.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="types-in-.extend...-blocks" class="level3"&gt;
&lt;h3&gt;Types in &lt;code&gt;.extend({...})&lt;/code&gt; blocks&lt;/h3&gt;
&lt;p&gt;By and large, you can get away with using the same &lt;code&gt;this: MyComponent&lt;/code&gt; trick when hacking around prototypal extension problems, or performance problems, by putting computed properties in a &lt;code&gt;.extend({...}&lt;/code&gt; block. However, you &lt;em&gt;will&lt;/em&gt; sometimes see a type error indicating that the class is referenced in its own definition expression. In that case, you may need to judiciously apply &lt;code&gt;any&lt;/code&gt;, if you can’t make it work by using normal class properties.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="constructor-and-class-methods" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;constructor&lt;/code&gt; and class methods&lt;/h3&gt;
&lt;p&gt;ES6 class constructors and class methods both work as you’d expect, though as we’ll see you’ll need an extra bit of boilerplate for methods, at least for now.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample): void {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the most part, you can just switch to using normal ES6 class constructors instead of the Ember &lt;code&gt;init&lt;/code&gt; method. You can, if you so desire, also move existing &lt;code&gt;init&lt;/code&gt; functions passed to a &lt;code&gt;.extends({ ...})&lt;/code&gt; hash to class methods, and they’ll work once you change &lt;code&gt;this._super(...arguments)&lt;/code&gt; to &lt;code&gt;super.init(...arguments)&lt;/code&gt;. It’s worth pausing to understand the relationship between &lt;code&gt;init&lt;/code&gt; and prototypal &lt;code&gt;init&lt;/code&gt; and the &lt;code&gt;constructor&lt;/code&gt;. An &lt;code&gt;init&lt;/code&gt; in the &lt;code&gt;.extends()&lt;/code&gt; hash runs first, then an &lt;code&gt;init&lt;/code&gt; method on the class, then the normal &lt;code&gt;constructor&lt;/code&gt;.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that you do not need to (and cannot) annotate the &lt;code&gt;constructor&lt;/code&gt; with &lt;code&gt;this: MyComponent&lt;/code&gt;. Depending on the class you’re building, you may &lt;em&gt;occasionally&lt;/em&gt; have type-checking problems that come up as a result of this. I’ve only ever seen that happen when using computed properties while defining a proxy,&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; but it does come up. In that case, you can fall back to using &lt;code&gt;init&lt;/code&gt; as a method, and set &lt;code&gt;this: MyComponent&lt;/code&gt; on &lt;em&gt;it&lt;/em&gt;, and things will generally fall out as working correctly at that point. When it comes up, this seems to be just a limitation of what &lt;code&gt;this&lt;/code&gt; is understood to be in a &lt;code&gt;constructor&lt;/code&gt; given Ember’s rather more-complex-than-normal-classes view of what a given item being constructed is.&lt;/p&gt;
&lt;p&gt;Other class methods do also need the &lt;code&gt;this&lt;/code&gt; type specified if they touch computed properties. (Normal property access is fine without it.) That’s because the lookups for &lt;code&gt;ComputedProperty&lt;/code&gt; instances (using &lt;code&gt;Ember.get&lt;/code&gt; or &lt;code&gt;Ember.set&lt;/code&gt;) need to know what &lt;code&gt;this&lt;/code&gt; is where they should do the lookup, and the full &lt;code&gt;this&lt;/code&gt; context isn’t inferred correctly at present. You can either write that on every invocation of &lt;code&gt;get&lt;/code&gt;and &lt;code&gt;set&lt;/code&gt;, like &lt;code&gt;(this as MyComponent).get(...)&lt;/code&gt;, or you can do it once at the start of the method. Again, a bit boiler-platey, but it gets the job done and once you’re used to it it’s minimal hassle.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One last note, which I didn’t include in the example: if you have a function (usually an action) passed into the component, you can define it most simply by just using &lt;code&gt;onSomeAction: Function;&lt;/code&gt; in the class definition, right with other class arguments. However, it’s usually most helpful to define what the type should actually &lt;em&gt;be&lt;/em&gt;, for your own sanity check if nothing else. As with e.g. &lt;code&gt;model&lt;/code&gt; in this example, we don’t actually have a good way to type-check that what is passed is correct. We can, however, at least verify in the constructor that the caller passed in a function using &lt;a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Fdebug/methods/assert?anchor=assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;, just as with other arguments.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So that’s a wrap on components (and controllers, which behave much the same way).&lt;/p&gt;
&lt;p&gt;In the next post, I’ll look at the elephant in the room: Ember Data (and closely related concern Ember CLI Mirage). While you &lt;em&gt;can&lt;/em&gt; make Ember Data stuff largely work today, it’s still a ways from &lt;em&gt;Just Works™️&lt;/em&gt;, sadly, but we’ll cover how to work around the missing pieces—we’ve gotten there in our own codebase, so you can, too!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;As mentioned in &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Part 2&lt;/a&gt;, this problem doesn’t go away until we get decorators, unless you’re putting them on the prototype via &lt;code&gt;.extends()&lt;/code&gt;—but see below for the problems with &lt;em&gt;that&lt;/em&gt;. The short version is, we need decorators for this to actually be &lt;em&gt;nice&lt;/em&gt;. Once we get decorators, we will be able to combine them with the work done for &lt;a href="https://github.com/emberjs/rfcs/pull/281"&gt;RFC #281&lt;/a&gt; and normal lookup will just work:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;@computed(&amp;#39;model.firstName&amp;#39;)
get fromModel() {
  return `My name is ${this.model.firstName};`;
}&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’ve used &lt;code&gt;Computed&amp;lt;Person&amp;gt;&lt;/code&gt; and similar throughout here because it’s the most clear while still being reasonably concise. The actual type name in Ember’s own code is &lt;code&gt;ComputedProperty&lt;/code&gt;, but &lt;code&gt;ComputedProperty&amp;lt;Person&amp;gt;&lt;/code&gt; is &lt;em&gt;long&lt;/em&gt;, and it wouldn’t have added any real clarity here. In my own codebase, we use &lt;code&gt;CP&lt;/code&gt; (for “&lt;strong&gt;C&lt;/strong&gt;omputed &lt;strong&gt;P&lt;/strong&gt;roperty”) for the sake of brevity—so here that would just be &lt;code&gt;CP&amp;lt;Person&amp;gt;&lt;/code&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;In the future, this problem will hopefully be solved neatly by decorators:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  @action
  addToCollection(value: string) {
    const current = this.get(&amp;#39;aCollection&amp;#39;);
    this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For today, however, specifying a &lt;code&gt;this&lt;/code&gt; type is where it’s at.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;You can see this for yourself in &lt;a href="https://ember-twiddle.com/36844717dcc50d734139368edf2e87da"&gt;this Ember Twiddle&lt;/a&gt;—just open your developer tools and note the sequence.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Proxies, along with details of mixins, are a subject I’m leaving aside for Part 5, otherwise known as the “wow, this stuff is really weird to type” entry in the series.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Not &lt;em&gt;no&lt;/em&gt; hassle, though, and I look forward to a future where we can drop it, as Ember moves more and more toward modern JavaScript ways of solving these same problems!&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 25 Jan 2018 07:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-01-25:/2018/typing-your-ember-update-part-3.html</guid><category>TypeScript</category><category>emberjs</category><category>typing-your-ember</category></item><item><title>TypeScript and Ember.js Update, Part 2</title><link>http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the previous post in this series, I introduced the big picture of how the story around TypeScript and Ember.js has improved over the last several months. In this post, I’ll be pausing from TypeScript-specific to take a look at how things work with &lt;em&gt;class properties&lt;/em&gt;, since they have some big implications for how we work, which then have ripple effects on computed properties, actions, etc.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s the outline of this update sequence:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Overview, normal Ember objects, component arguments, and injections.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;&lt;strong&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world (this post).&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Computed properties, actions, mixins, and class methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Using Ember Data, and service and controller injections improvements.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="a-detailed-example-contd.-class-properties" class="level2"&gt;
&lt;h2&gt;A detailed example (cont’d.) – class properties&lt;/h2&gt;
&lt;p&gt;Let’s start by recalling the example Component we’re working through:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import Computed from &amp;#39;@ember/object/computed&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Throughout, you’ll note that we’re using &lt;em&gt;assignment&lt;/em&gt; to create these class properties—a big change from the key/value setup in the old &lt;code&gt;.extends({ ... })&lt;/code&gt; model:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Class properties like this are &lt;em&gt;instance properties&lt;/em&gt;. These are compiled to, because they are &lt;em&gt;equivalent to&lt;/em&gt;, assigning a property in the constructor. That is, these two ways of writing class property initialization are equivalent—&lt;/p&gt;
&lt;p&gt;At the property definition site:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // snip...

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // snip..

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  // snip...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the constructor:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // snip...

  // -- Class properties -- //
  aString: string;
  aCollection: string[];

  constructor() {
    super();

    this.aString = &amp;#39;this is fine&amp;#39;;
    this.aCollection = [];

    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  // snip...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see why the first one is preferable: if you don’t need any input to the component to set the value, you can simply set the definition inline where the property is declared.&lt;/p&gt;
&lt;p&gt;However, this is &lt;em&gt;quite&lt;/em&gt; unlike using &lt;code&gt;.extend&lt;/code&gt;, which installs the property on the prototype. Three very important differences from what you’re used to fall out of this, and &lt;em&gt;none of them are specific to TypeScript.&lt;/em&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section id="default-values" class="level3"&gt;
&lt;h3&gt;1. Default values&lt;/h3&gt;
&lt;p&gt;Since class property setup runs during the constructor, if you want the caller to be able to override it, you &lt;em&gt;must&lt;/em&gt; give it an explicit fallback that references what’s passed into the function. Something like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;class AnyClass {
  aDefaultProp = this.aDefaultProp || 0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, translated back into the constructor form:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;class AnyClass {
  constructor() {
    this.aDefaultProp = this.aDefaultProp || 0;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, you can see that if something has &lt;em&gt;already set&lt;/em&gt; the &lt;code&gt;aDefaultProp&lt;/code&gt; value (before the class constructor is called), we’ll use that value; otherwise, we’ll use the default. You can think of this as being something like default arguments to a function. In our codebase, we have started using &lt;a href="https://lodash.com/docs/4.17.4#defaultTo"&gt;&lt;code&gt;_.defaultTo&lt;/code&gt;&lt;/a&gt;, which works quite nicely. In the old world of declaring props with their values in the &lt;code&gt;.extends({ ... })&lt;/code&gt; hash, we got this behavior “for free”—but without a lot of other benefits of classes, so not &lt;em&gt;actually&lt;/em&gt; for free.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="no-more-shared-state" class="level3"&gt;
&lt;h3&gt;2. No more shared state&lt;/h3&gt;
&lt;p&gt;Because these are instance properties, &lt;em&gt;not&lt;/em&gt; assigned on the prototype, you do not have to worry about the problem—&lt;a href="https://dockyard.com/blog/2014/04/17/ember-object-self-troll"&gt;well-known among experienced Ember.js developers, but prone to bite people new to the framework&lt;/a&gt;—where you assign an array or object in the &lt;code&gt;.extend()&lt;/code&gt; method and then find that it’s shared between instances.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default Component.extend({
  anArray: [],  // &amp;lt;- this *will* be shared between instances
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ve long had to handle this by setting up those properties in our &lt;code&gt;init()&lt;/code&gt; method instead, so that they are created during object instantiation, rather than on the prototype. This problem goes away entirely with classes, including in TypeScript.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component {
  anArray = [];  // &amp;lt;- this will *not* be shared between instances
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note that here, we don’t have a type for the array, so it’s of type &lt;code&gt;any[]&lt;/code&gt;; we &lt;em&gt;always&lt;/em&gt; need type annotations for empty arrays if we want them to be a “narrower,” or more specific, type than that.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="performance-changes" class="level3"&gt;
&lt;h3&gt;3. Performance changes&lt;/h3&gt;
&lt;p&gt;The flip-side of this is that the only way we currently have to create computed property instances (until decorators stabilize) is &lt;em&gt;also&lt;/em&gt; as instance, not prototype, properties. I’ll look at computed properties (and their types) in more detail in the next post, so here mostly just note how the computed is set up on the class: by assignment, &lt;em&gt;not&lt;/em&gt; as a prototypal property.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component {
  aString = &amp;#39;Hello, there!&amp;#39;;

  itsLength = computed(&amp;#39;aString&amp;#39;, function(this: MyComponent): number {
    return this.aString.length;
  });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;does&lt;/em&gt; have a performance cost, which will be negligible in the ordinary case but pretty nasty if you’re rendering hundreds to thousands of these items onto the page. You can use this workaround for these as well as for any other properties which need to be prototypal (more on &lt;em&gt;that&lt;/em&gt; in the next post as well):&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component.extend({
  itsLength: computed(&amp;#39;aString&amp;#39;, function(this: MyComponent): number {
      return this.aString.length;
    }
  );
}) {
  aString = &amp;#39;Hello, there!&amp;#39;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;looks&lt;/em&gt; really weird, but it works exactly as you’d expect.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="class-property-variants" class="level2"&gt;
&lt;h2&gt;Class property variants&lt;/h2&gt;
&lt;p&gt;There are two times when things will look different from basic class properties. Both have to do with setting up the prototype to work the way other parts of the Ember object ecosystem expect.&lt;/p&gt;
&lt;section id="variant-1-prototypalmerged-properties" class="level3"&gt;
&lt;h3&gt;Variant 1: Prototypal/merged properties&lt;/h3&gt;
&lt;p&gt;The first is when you’re using properties that need to be merged with properties in the prototype chain, e.g. &lt;code&gt;attributeBindings&lt;/code&gt; or &lt;code&gt;classNameBindings&lt;/code&gt;, or which (because of details of how components are constructed) have to be set on the prototype rather than as instance properties, e.g. &lt;code&gt;tagClass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For those, we can just leverage &lt;code&gt;.extend&lt;/code&gt; in conjunction with classes:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;

export default class MyListItem extends Component.extend({
  tagName: &amp;#39;li&amp;#39;,
  classNameBindings: [&amp;#39;itemClass&amp;#39;]
}) {
  itemClass = &amp;#39;this-be-a-list&amp;#39;;

  // etc.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is also how you’ll &lt;em&gt;use&lt;/em&gt; mixins (on defining them, see below):&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import MyMixin from &amp;#39;my-app/mixins/my-mixin&amp;#39;;

export default class AnExample extends Component.extend(MyMixin) {
  // the rest of the definition.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, however—and this is very important—that you cannot &lt;code&gt;.extend&lt;/code&gt; an existing &lt;code&gt;class&lt;/code&gt; implementation. As a result, deep inheritance hierarchies &lt;em&gt;may&lt;/em&gt; make transitioning to classes in Ember painful. Most importantly: they may work &lt;em&gt;some&lt;/em&gt; of the time in &lt;em&gt;some&lt;/em&gt; ways, but will break when you least expect. So don’t do that! (This isn’t a TypeScript limitation; it’s a limitation of classes in Ember today.)&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="variant-2-mixins" class="level3"&gt;
&lt;h3&gt;Variant 2: Mixins&lt;/h3&gt;
&lt;p&gt;The other time you’ll have to take a different tack—and this falls directly out of the need for prototypal merging—is with &lt;code&gt;Mixin&lt;/code&gt;s, which don’t yet work properly with classes. Worse, it’s difficult (if not impossible) to get rigorous type-checking internally in &lt;code&gt;Mixin&lt;/code&gt; definitions, because you cannot define them as classes: you &lt;em&gt;have&lt;/em&gt; to use the old style throughout, because mixins are created with &lt;code&gt;.create()&lt;/code&gt;, not &lt;code&gt;.extend()&lt;/code&gt;.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;Note that if you’re writing &lt;em&gt;new&lt;/em&gt; code in Ember.js—using TypeScript or not—I strongly encourage you to simply avoid using mixins at all. Instead, use services (or, occasionally, inheritance). This will require you to change how you write some of your code, but in my experience that change will make your codebase much easier to understand, and therefore much easier to maintain.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I’ll have a lot more to say about these in part 5 of this series, including a detailed example of how to carefully type-annotate one and use it in another class. For now, suffice it to say that you’ll still need to incorporate &lt;code&gt;Mixin&lt;/code&gt;s via &lt;code&gt;.extend()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import MyMixin from &amp;#39;my-app/mixins/my-mixin&amp;#39;;

export default class SomeNewComponent extends Component.extend(MyMixin) {
  // normal class properties
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Those are the &lt;em&gt;biggest&lt;/em&gt; differences from &lt;code&gt;Ember.Object&lt;/code&gt; that you need to be aware of when working with class properties in Ember.js today, at least in my experience working with them day to day. These are not the only differences with &lt;em&gt;classes&lt;/em&gt;, though, especially when dealing with TypeScript, so in my next entry we’ll take a look at how classes work (and work well!) with most things in Ember.js and TypeScript together.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;You can use this same feature on classes using Babel, with the &lt;a href="https://babeljs.io/docs/plugins/transform-class-properties/"&gt;class properties transform&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Even when &lt;a href="https://github.com/emberjs/rfcs/pull/281"&gt;Ember.js RFC #281&lt;/a&gt; lands, this problem will not go away, at least under the current implementation, since &lt;a href="https://github.com/emberjs/rfcs/pull/281#issuecomment-360023258"&gt;&lt;em&gt;these&lt;/em&gt; will &lt;em&gt;not&lt;/em&gt; be transformed into getters on the prototype&lt;/a&gt;. We are waiting for decorators to solve this problem completely.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;In the future, we’ll (hopefully and presumably 🤞🏼) have an escape hatch for those merged or prototypally-set properties via decorators. That’ll look something like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { className, tagName } from &amp;#39;ember-decorators/component&amp;#39;;

@tagName(&amp;quot;li&amp;quot;)
export default class MyListItem extends Component {
  @className itemClass = &amp;#39;this-be-a-list&amp;#39;;

  @action
  sendAMessage(contents: string): void {

  }
  // etc.
}&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 24 Jan 2018 07:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-01-24:/2018/typing-your-ember-update-part-2.html</guid><category>TypeScript</category><category>emberjs</category><category>typing-your-ember</category></item><item><title>TypeScript and Ember.js Update, Part 1</title><link>http://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Back in July 2017, I wrote &lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-3.html"&gt;a post&lt;/a&gt; on how to using TypeScript in your Ember.js apps. At the time, we were still busy working on getting the typings more solid for Ember itself, and &lt;code&gt;class&lt;/code&gt; syntax for Ember was apparently a long way away.&lt;/p&gt;
&lt;p&gt;Things have gotten quite a bit better since then, so I thought I’d update that post with recommendations for using TypeScript in an app &lt;em&gt;now&lt;/em&gt; with the updated typings, as well as with another six months of experience using TypeScript in our app at Olo (~20k lines of code in the app and another ~15k in tests).&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s how I expect this update series to go:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;&lt;strong&gt;Overview, normal Ember objects, component arguments, and injections (this post).&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Computed properties, actions, mixins, and class methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Using Ember Data, and service and controller injections improvements.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="normal-ember-objects" class="level2"&gt;
&lt;h2&gt;Normal Ember objects&lt;/h2&gt;
&lt;p&gt;For normal Ember objects, things now &lt;em&gt;mostly&lt;/em&gt; just work if you’re using class-based syntax, with a single (though very important) qualification I’ll get to in a minute. And you can use the class-based syntax &lt;em&gt;today&lt;/em&gt; in Ember.js—all the way back to 1.13, as it turns out. If you want to learn more, you can read &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0240-es-classes.md"&gt;this RFC&lt;/a&gt; or &lt;a href="https://medium.com/build-addepar/es-classes-in-ember-js-63e948e9d78e"&gt;this blog post&lt;/a&gt;, both by &lt;a href="https://github.com/pzuraq"&gt;@pzuraq (Chris Garrett)&lt;/a&gt;, who did most of the legwork to research this and flesh out the constraints, and who has also been doing a lot of work on &lt;a href="https://ember-decorators.github.io/ember-decorators/docs/index.html"&gt;Ember Decorators&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Accordingly, I’m assuming the use of ES6 &lt;code&gt;class&lt;/code&gt; syntax throughout. The big reason for this is that things mostly just &lt;em&gt;don’t work&lt;/em&gt; without it. And we’ll see (in a later post) some hacks to deal with places where parts of Ember’s ecosystem don’t yet support classes properly. In general, however, if you see an error like &lt;code&gt;&amp;quot;Cannot use 'new' with an expression whose type lacks a call or construct signature.&amp;quot;&lt;/code&gt;, the reason is almost certainly that you’ve done &lt;code&gt;export default Component.extend({...})&lt;/code&gt; rather than creating a class.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-detailed-example" class="level2"&gt;
&lt;h2&gt;A detailed example&lt;/h2&gt;
&lt;p&gt;That means that every new bit of code I write today in our app looks roughly like this, with only the obvious modifications for services, routes, and controllers—I picked components because they’re far and away the most common things in our applications.&lt;/p&gt;
&lt;p&gt;In order to explain all this clearly, I’m going to start by showing a whole component written in the new style. Then, over the rest of this post and the next post, I’ll zoom in on and explain specific parts of it.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { computed, get } from &amp;quot;@ember/object&amp;quot;;
import Computed from &amp;quot;@ember/object/computed&amp;quot;;
import { inject as service } from &amp;quot;@ember/service&amp;quot;;
import { assert } from &amp;quot;@ember/debug&amp;quot;;
import { isNone } from &amp;quot;@ember/utils&amp;quot;;

import Session from &amp;quot;my-app/services/session&amp;quot;;
import Person from &amp;quot;my-app/models/person&amp;quot;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person; // required
  modifier?: string; // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;quot;this is fine&amp;quot;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(&amp;quot;model.firstName&amp;quot;, function(this: AnExample): string {
    return `My name is ${get(this.model, &amp;quot;firstName&amp;quot;)};`;
  });

  aComputed = computed(&amp;quot;aString&amp;quot;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;quot;session.user&amp;quot;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;quot;session.user&amp;quot;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;quot;aCollection&amp;quot;);
      this.set(&amp;quot;aCollection&amp;quot;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;quot;`model` is required&amp;quot;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;quot;aCollection&amp;quot;).includes(&amp;quot;ahoy&amp;quot;)) {
      this.set(&amp;quot;aCollection&amp;quot;, current.concat(&amp;quot;ahoy&amp;quot;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;section id="component-arguments" class="level3"&gt;
&lt;h3&gt;Component arguments&lt;/h3&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // Component arguments
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I always put these first so that the “interface” of the object is clear and obvious. You can do the same thing on a controller instance; in that case you would export a &lt;code&gt;Model&lt;/code&gt; from the corresponding &lt;code&gt;Route&lt;/code&gt; class and import it into the &lt;code&gt;Controller&lt;/code&gt;. It’s a bit of boilerplate, to be sure, but it lets you communicate your interface clearly to consumers of the &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An important note about these kind of arguments: you do &lt;em&gt;not&lt;/em&gt; have to do &lt;code&gt;this.get(...)&lt;/code&gt; (or, if you prefer, &lt;code&gt;get(this, ...)&lt;/code&gt;) to access the properties themselves: they’re class instance properties. You can simply access them as normal properties: &lt;code&gt;this.model&lt;/code&gt;, &lt;code&gt;this.modifier&lt;/code&gt;, etc. That even goes for referencing them as computed properties, as we’ll see below.&lt;/p&gt;
&lt;p&gt;For optional arguments, you use the &lt;code&gt;?&lt;/code&gt; operator to indicate they may be &lt;code&gt;undefined&lt;/code&gt;. To get the &lt;em&gt;most&lt;/em&gt; mileage out of this, you’ll want to enable &lt;code&gt;strictNullChecks&lt;/code&gt; in the compiler options.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; However, note that we don’t currently have any way to validate component argument invocation.[^ts-templates] The way I’ve been doing this is using Ember’s debug &lt;a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Fdebug/methods/assert?anchor=assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; in the constructor:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;assert(&amp;quot;`model` is required&amp;quot;, !isNone(this.model));&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { Maybe } from &amp;quot;true-myth&amp;quot;;

export default class MyComponent extends Component {
  optionalArg?: string;
  optionalProperty = Maybe.of(this.optionalArg);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then if you invoke the property without the argument, it’ll construct a &lt;code&gt;Nothing&lt;/code&gt;; if you invoke it with the argument, it’ll be &lt;code&gt;Just&lt;/code&gt; with the value. [^ts-templates]: A few of us have batted around some ideas for how to solve that particular problem, but &lt;em&gt;if&lt;/em&gt; we manage those, it’ll probably be way, way later in 2018.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit, January 24, 2018:&lt;/strong&gt; Starting in TypeScript 2.7, you can enable a flag, &lt;code&gt;--strictPropertyInitialization&lt;/code&gt;, which requires that all declared, non-optional properties on a class be initialized in the constructor or with a class property assignment. (There’s more on class property assignment in &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;part 2&lt;/a&gt; of this series.) If you do that, all &lt;em&gt;arguments&lt;/em&gt; to a component should be defined with the &lt;em&gt;definite assignment assertion modifier&lt;/em&gt;, a &lt;code&gt;!&lt;/code&gt; after the name of the property, as on &lt;code&gt;model&lt;/code&gt; here:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // Component arguments
  model!: Person;     // required
  modifier?: string;  // optional, thus the `?`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should still combine that with use of &lt;a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Fdebug/methods/assert?anchor=assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; so that any misses in template invocation will get caught in your tests.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="injections" class="level3"&gt;
&lt;h3&gt;Injections&lt;/h3&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the most important thing to note is the required type annotation. In principle, we could work around this by requiring you to explicitly name the service and using a “type registry” to look up what the service type is – more on that below in my discussion of using Ember Data – but I’m not yet persuaded that’s better than just writing the appropriate type annotation. Either way, there’s some duplication. 🤔 We (everyone working in the &lt;a href="https://github.com/typed-ember"&gt;typed-ember&lt;/a&gt; project) would welcome feedback here, because the one thing we &lt;em&gt;can’t&lt;/em&gt; do is get the proper type &lt;em&gt;without&lt;/em&gt; one or the other of these.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit, February 5, 2018:&lt;/strong&gt; see &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Part 4&lt;/a&gt; for some updates to this—I actually went ahead and built and implemented that approach, and everything is much nicer now.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // the current approach -- requires importing `Session` so you can define it
  // on the property here
  session: Computed&amp;lt;Session&amp;gt; = service();

  // the alternative approach I&amp;#39;ve considered -- requires writing boilerplate
  // elsewhere, similar to what you&amp;#39;ll see below in the Ember Data section
  session = service(&amp;#39;session&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One other thing to notice here is that because TypeScript is a &lt;em&gt;structural&lt;/em&gt; type system, it doesn’t matter if what is injected is the actual &lt;code&gt;Session&lt;/code&gt; service; it just needs to be something that &lt;em&gt;matches the shape&lt;/em&gt; of the service – so your normal behavior around dependency injection, etc. is all still as expected.&lt;/p&gt;
&lt;p&gt;That’s enough for one post, I think. In the next entry, we’ll pick up with how you handle class properties, including computed properties, and then talk about mixins as well. In the post after that, we’ll look at Ember Data and some related concerns.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This isn’t my preferred way of handling optional types; &lt;a href="https://true-myth.js.org"&gt;a &lt;code&gt;Maybe&lt;/code&gt; type&lt;/a&gt; is. And you can, if you like, use &lt;code&gt;Maybe&lt;/code&gt; here:&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 22 Jan 2018 07:10:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-01-22:/2018/typing-your-ember-update-part-1.html</guid><category>TypeScript</category><category>emberjs</category><category>typing-your-ember</category></item><item><title>Announcing ember-cli-typescript 1.0.0</title><link>http://www.chriskrycho.com/2017/announcing-ember-cli-typescript-100.html</link><description>&lt;p&gt;I’m extremely pleased to announce the release of &lt;a href="https://github.com/typed-ember/ember-cli-typescript/releases/tag/v1.0.0"&gt;ember-cli-typescript 1.0.0&lt;/a&gt;! You can get it the same way you do &lt;em&gt;any&lt;/em&gt; Ember addon:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a detailed walkthrough of adding TypeScript to your projects, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-1.html"&gt;Typing Your Ember, Part 1: Set your Ember.js project up to use TypeScript.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-2.html"&gt;Typing Your Ember, Part 2: Adding TypeScript to an existing Ember.js project.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what are we shipping today, and what’s on the roadmap?&lt;/p&gt;
&lt;section id="whats-in-1.0" class="level2"&gt;
&lt;h2&gt;What’s In 1.0?&lt;/h2&gt;
&lt;p&gt;This release is intentionally relatively minimal: the goal here is provide stable foundation for building Ember.js applications with TypeScript in the toolchain. This means that in any app you can install the add-on and just start &lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-3.html"&gt;progressively converting your app over to TypeScript&lt;/a&gt;. However, we don’t expect to change the way you &lt;em&gt;use&lt;/em&gt; the addon at all in the foreseeable future.&lt;/p&gt;
&lt;p&gt;I’ll give you fair warning that there is one &lt;em&gt;major&lt;/em&gt; challenge you will find as you work with ember-cli-typescript today: the lack of type definitions for most projects, and the limits of the existing type definitions for Ember.js itself. That’s not as bad as it sounds, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;See the &lt;a href="#the-roadmap"&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt; below—we’re working on that, and you can help!&lt;/li&gt;
&lt;li&gt;I’ve been using TypeScript successfully in the app I work on at my day job for the last nine months or so. While the lack of (good or any) typings has had its frustrations, &lt;a href="https://www.dailydrip.com/blog/domain-driven-design-and-typed-functional-programming-in-typescript"&gt;TypeScript has already added a &lt;em&gt;lot&lt;/em&gt; of value for us&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="the-roadmap" class="level2"&gt;
&lt;h2&gt;The Roadmap&lt;/h2&gt;
&lt;p&gt;We have a bunch of things we’re actively working on and which you can expect to land in the next few weeks to months.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-1-a-prepublish-build-process-for-addons"&gt;1.1: A prepublish build process for addons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#community-driven-work-on-typings"&gt;Community-driven work on typings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="a-prepublish-build-process-for-addons" class="level3"&gt;
&lt;h3&gt;1.1: A prepublish build process for addons&lt;/h3&gt;
&lt;p&gt;The major priority for the 1.1 release is an npm prepublication step to generate JavaScript and typing files from add-ons which are using TypeScript. Currently, addons have to take TypeScript as a full dependency, not a dev dependency, because they currently just ship the &lt;code&gt;.ts&lt;/code&gt; files up to npm and they have to be compiled in your app at build time.&lt;/p&gt;
&lt;p&gt;We really don’t want to make any app developer who is using your addon download either the TypeScript files or &lt;em&gt;especially&lt;/em&gt; the TypeScript compiler if we can avoid it. There are three reasons for this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;The fact that an add-on is developed in TypeScript really shouldn’t affect app developers. If they’re writing a plain-old JavaScript app, the fact that your addon is originally written in TypeScript is irrelevant to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript is &lt;em&gt;large&lt;/em&gt;. The v2.4 installation I have in the app I’m working on right now weights 26MB. If I were using four add-ons which required TypeScript, my install cost could easily go up by a hundred megabytes. That’s not always a huge deal on a corporate network, but even where people &lt;em&gt;do&lt;/em&gt; have good download speeds, it’s a hit to developer time. Every time someone has to reinstall all the dependencies, those 26MB have to come down again. If TypeScript becomes common, you might suddenly find yourself with addons using 2.4, 2.5, 2.6, etc.; it’s not hard to see that ballooning up the size of your installation in a really non-trivial way: 26MB × &lt;em&gt;n&lt;/em&gt; versions of TypeScript = &lt;em&gt;do not want&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The TypeScript compilation step takes time. Addons can do this &lt;em&gt;once&lt;/em&gt; and save every consuming app build time. This isn’t the end of the world, but anything we can do to keep build times lower is a real win for developer productivity.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Accordingly the plan is to automatically add a build step which runs the TypeScript compiler on your addon and generates plain-old-JavaScript and the corresponding type definition files (&lt;code&gt;.d.ts&lt;/code&gt;) prior to publishing to npm. That way, TypeScript can remain a dev dependency (rather than a full dependency) of each addon, and not be installed alongside the addon for consumers. Just-JavaScript consumers can just consume the normal JavaScript generated by the build. TypeScript consumers will get the full benefits of the types via the generated typing files.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;should&lt;/em&gt; hopefully land by late August or early September. Fingers crossed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="community-driven-work-on-typings" class="level3"&gt;
&lt;h3&gt;Community-driven work on typings&lt;/h3&gt;
&lt;p&gt;The process of getting type definitions in place for &lt;em&gt;all&lt;/em&gt; of Ember.js and its ecosystem is way, &lt;em&gt;way&lt;/em&gt; too big for any one person or even a small handful of people to manage alone. This is something we’re going to take on as a community.&lt;/p&gt;
&lt;section id="new-typings-for-ember.js-itself" class="level4"&gt;
&lt;h4&gt;New typings for Ember.js itself&lt;/h4&gt;
&lt;p&gt;We’re actively working on type definitions for Ember which will give us actually-useful-and-correct type checking for Ember’s custom object model. Today, if you use &lt;code&gt;Ember.get&lt;/code&gt; or &lt;code&gt;Ember.set&lt;/code&gt;, you get &lt;em&gt;no&lt;/em&gt; help from the type system. When we finish, those will be type-checked by the compiler and will error if you try to assign the wrong values!&lt;/p&gt;
&lt;p&gt;Importantly, the typings we’re shipping will be backwards compatible with the existing Ember API, but will also include support for the &lt;a href="https://github.com/emberjs/rfcs/pull/176"&gt;RFC #176 JavaScript Modules API&lt;/a&gt;. TypeScript’s module definition system will let us support both in parallel, and we will. Backwards compatibility and &lt;em&gt;stability without stagnation&lt;/em&gt; are things we value for this addon just as much as the rest of the Ember.js ecosystem does.&lt;/p&gt;
&lt;p&gt;This effort, led by Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;), is ongoing in the &lt;a href="https://github.com/typed-ember/ember-typings"&gt;typed-ember/ember-typings&lt;/a&gt; repository. (If you’re wondering why we’re not just doing it in the DefinitelyTyped repository, see below.) We probably won’t be able to get to 100% of everything the Ember Object model does—Ember’s custom object model is &lt;em&gt;incredibly&lt;/em&gt; sophisticated, and TypeScript actually &lt;a href="https://github.com/Microsoft/TypeScript/issues/16699"&gt;still can’t&lt;/a&gt; &lt;em&gt;totally&lt;/em&gt; express it—but Derek already has most of it working. This will be a &lt;em&gt;huge&lt;/em&gt; step forward.&lt;/p&gt;
&lt;p&gt;To be clear, we’re not forking the way you get types. We’ll upstream all of this work to DefinitelyTyped as soon as we have them working, but the DefinitelyTyped repo is &lt;em&gt;huge&lt;/em&gt; and very busy; it’s not a great place to do this kind of substantial rework of existing types. And we really don’t need to have all the &lt;em&gt;other&lt;/em&gt; type definitions DefinitelyTyped supplies in our way as we’re working, either. Having a separate repo gives us a place we can work on types, try them out as a community, etc. before creating PRs on DefinitelyTyped and publishing them officially.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="addon-typings" class="level4"&gt;
&lt;h4&gt;Addon typings&lt;/h4&gt;
&lt;p&gt;We need to get type definitions in place for the addons in the ecosystem! That way when you’re using, say, &lt;a href="https://github.com/simplabs/ember-test-selectors"&gt;ember-test-selectors&lt;/a&gt;, you’ll get an error if you try to use the functions it provides incorrectly. Right now, every addon out there is missing types entirely, so everything gets treated as taking the useless &lt;code&gt;any&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;In a week or so, I’ll have a blog post with a fleshed-out &lt;a href="https://github.com/typed-ember/ember-cli-typescript/issues/48"&gt;quest issue&lt;/a&gt; for tackling it in detail, but here’s the short version: we’re going to try to get type definitions for all the top addons in the ecosystem so that it’s &lt;em&gt;easy&lt;/em&gt; to use TypeScript in your Ember.js app. That blog post and quest issue will explain how to write good typings, and also how to contribute them to a project which may or may not be interested in using TypeScript itself.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 08 Aug 2017 09:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-08-08:/2017/announcing-ember-cli-typescript-100.html</guid><category>typing-your-ember</category><category>typescript</category><category>emberjs</category></item><item><title>Typing Your Ember, Part 4</title><link>http://www.chriskrycho.com/2017/typing-your-ember-part-4.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-3"&gt;previous post&lt;/a&gt; in this series, I noted that one of the most effective current strategies for using TypeScript effectively in an Ember app is to push as much of your logic possible &lt;em&gt;out&lt;/em&gt; of the Ember layer and into plain-old-TypeScript. Unsurprisingly, people had some questions about how to do this, so here’s a brief example.&lt;/p&gt;
&lt;p&gt;As I suggested in that post, we now have a &lt;code&gt;lib&lt;/code&gt; directory in our app, and all new business logic for the app lives there instead of directly on e.g. an &lt;code&gt;Ember.Service&lt;/code&gt; instance. Our current directory structure looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app/
  adapters/
  components/
  config/
  controllers/
  helpers/
  initializers/
  instance-initializers
  lib/    &amp;lt;-- this is the one we care about
    billing/
    utilities/
      numeric.ts
  routes/
  serializers/
  services/
  templates/
  transforms
  app.ts
  router.ts
tests/
package.json
bower.json
// etc.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main thing to notice here is that &lt;code&gt;lib&lt;/code&gt; is just a directory in the app like any other, and its child directories likewise. This means that Ember &lt;abbr title="command line interface"&gt;CLI&lt;/abbr&gt; will resolve it just like normal, too—there’s no need to mess with the resolver or anything.&lt;/p&gt;
&lt;p&gt;Say we had a set of numeric utilities in that &lt;code&gt;numeric.ts&lt;/code&gt; file like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Make text out of numbers, like &amp;quot;1st&amp;quot;, &amp;quot;2nd&amp;quot;, &amp;quot;3rd&amp;quot;, etc.
export const withEnding = (val: number): string =&amp;gt; {
  // boring implementation details elided
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then using it in an Ember component might look like this (where &lt;code&gt;currentNumber&lt;/code&gt; is passed into the component):&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { get, set } from &amp;#39;@ember/object&amp;#39;;
import * as Num from &amp;#39;../lib/utilities/numeric&amp;#39;;

export default Component.extend({
  init() {
    const currentNumber = get(this, &amp;#39;currentNumber&amp;#39;);
    const displayNumber = Num.withEnding(currentNumber);
    set(this, &amp;#39;displayNumber&amp;#39;, displayNumber);
  },
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might wonder why we’d do this instead of using an &lt;code&gt;Ember.Service&lt;/code&gt;. In the above example, I could of course make &lt;code&gt;Num&lt;/code&gt; a service and inject it…&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { getProperties, set } from &amp;#39;@ember/object&amp;#39;;
import { inject } from &amp;#39;@ember/service&amp;#39;;

export default Component.extend({
  num: inject(),

  init() {
    const { currentNumber, num } =
      getProperties(this, &amp;#39;currentNumber&amp;#39;, &amp;#39;num&amp;#39;);

    const displayNumber = num.withEnding(currentNumber);
    set(this, &amp;#39;displayNumber&amp;#39;, displayNumber);
  },
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…but that doesn’t actually &lt;em&gt;gain&lt;/em&gt; me anything—the service here is just a way of exposing a function, after all—and it actually makes everything a bit more verbose. It also decreases the overall analyzability of this for things like tree-shaking: that module dependency is now something that Ember itself has to manage, instead of being statically analyzable at build time. Taking this approach also diminishes the reusability of any numeric helpers I put in there. If we couple them to an &lt;code&gt;Ember.Service&lt;/code&gt;, instead of using an ES6 module, they would stop being things we can easily reuse in non-Ember projects. Instead, by using modules, we leave ourselves the ability to easily extract those numeric helpers, and publish them for either internal or external consumption.&lt;/p&gt;
&lt;p&gt;Along those lines, we actually have a module to support &lt;abbr title="Block-Element-Modifier"&gt;&lt;a href="https://en.bem.info/methodology/quick-start/"&gt;BEM&lt;/a&gt;&lt;/abbr&gt; with Ember Components—and we plan to extract both the basic TypeScript library as well as a &lt;code&gt;BemComponent&lt;/code&gt; Ember-specific wrapper as open-source libraries in the near future. Besides the Ember addon, &lt;em&gt;anyone&lt;/em&gt; will be able to consume and use the underlying TypeScript library, whatever their framework or library of choice. Importantly, that includes us in our other codebases, which include lots of old jQuery and some new React, and might include some Glimmer.js in the future. Any or all of our utilities for these kinds of things become reusable if they’re just TypeScript.&lt;/p&gt;
&lt;p&gt;Pragmatically, it’s also just easier to do and get good help from TypeScript by going this way. It also means that unit-testing requires &lt;em&gt;no&lt;/em&gt; context from Ember whatsoever, which keeps those tests lighter and faster. Even though Ember’s unit tests are already super quick, when you have hundreds or thousands of unit tests, every little bit matters. It also, and probably even more importantly, means there are fewer places where you could mess things up when configuring tests—not that I have any experience messing up test configurations in Ember!&lt;/p&gt;
&lt;p&gt;One important thing to note is that this all works best with Ember—by far—when your &lt;code&gt;lib&lt;/code&gt; modules aren’t managing stateful objects, but rather defining data structures and functions which just transform those structures in some way. This approach is a great fit for us, because we’re increasingly writing a lot of our business and even &lt;abbr title="user interface"&gt;UI&lt;/abbr&gt; logic in terms of &lt;a href="http://www.chriskrycho.com/2016/what-is-functional-programming.html#pure-functions"&gt;pure functions&lt;/a&gt; which transform simple “record” types. That keeps each controller, route, component, or service doing relatively little work: they are responsible for getting and passing around data in the application, and for triggering actions—but they’re not responsible for &lt;em&gt;understanding&lt;/em&gt; or &lt;em&gt;manipulating&lt;/em&gt; that data. Meanwhile the module code doesn’t do &lt;em&gt;any&lt;/em&gt; stateful work; there’s no mutation—just boring, input-to-output functions.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; By contrast, if you’re dealing with stateful objects, you’re apt to end up running into places where you have lifecycle concerns, and that’s where Ember excels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In summary:&lt;/strong&gt; in this model, Ember handles all the lifecycle and view management, and is responsible for sending data in and out of the application. Plain old modules handle defining what the core internal data types are, and for manipulating, transforming, and creating data.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re wondering: we’re not using anything like Redux or Immutable.js yet, but both &lt;a href="https://github.com/ember-redux/ember-redux"&gt;ember-redux&lt;/a&gt; and &lt;a href="https://github.com/rtfeldman/seamless-immutable"&gt;seamless-immutable&lt;/a&gt; would be great fits for the way we’re building the app at this point, and it’s likely at least &lt;a href="https://github.com/ember-redux/ember-redux"&gt;ember-redux&lt;/a&gt; will become part of our stack in the relatively near future.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 31 Jul 2017 19:30:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-07-31:/2017/typing-your-ember-part-4.html</guid><category>emberjs</category><category>typescript</category><category>typing-your-ember</category></item><item><title>Typing Your Ember, Part 3</title><link>http://www.chriskrycho.com/2017/typing-your-ember-part-3.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-1"&gt;first&lt;/a&gt; of this series, I described how to set up a brand new Ember.js app to use TypeScript. In the &lt;a href="/2017/typing-your-ember-part-2"&gt;second&lt;/a&gt; part, walked through adding TypeScript to an existing Ember.js app. In this part, I’m going to talk about using TypeScript effectively in a modern Ember.js app.&lt;/p&gt;
&lt;section id="heavy-lifting-so-so-results" class="level2"&gt;
&lt;h2&gt;Heavy lifting, so-so results&lt;/h2&gt;
&lt;p&gt;Let’s get this out of the way up front: right now, using types in anything which extends &lt;code&gt;Ember.Object&lt;/code&gt; is going to be a lot of work for a relatively low reward. &lt;code&gt;Ember.Object&lt;/code&gt; laid the foundation for the modern JavaScript class system (and thus the TypeScript class system), but it has a huge downside: it’s string keys and referennces all the way down. This kind of thing is just normal Ember code—and note all the string keys:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default Component.extend({
  someProperty: &amp;#39;with a string value&amp;#39;,
  someOther: computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty = get(this, &amp;#39;someProperty&amp;#39;);
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }),
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this comes out to—even with a lot of the very helpful changes made to TypeScript itself in the 2.x series to help support object models like this one—is a lot of work adding types inline, and having to be really, really careful that your types are &lt;em&gt;correct&lt;/em&gt;. If that property you’re &lt;code&gt;Ember.get&lt;/code&gt;-ing can ever be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, you’d better write the type as &lt;code&gt;string | void&lt;/code&gt; instead of just &lt;code&gt;string&lt;/code&gt;. For example: this code is written with the correct types:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default Component.extend({
  someProperty: &amp;#39;with a string value&amp;#39;,  // no type annotation
  someOther: computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty: string = get(this, &amp;#39;property&amp;#39;);
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }),
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note two important things about it, however:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;TypeScript does not (and, with the &lt;em&gt;current&lt;/em&gt; typings for Ember, cannot) figure out the type of &lt;code&gt;someProperty&lt;/code&gt; from this definition; &lt;code&gt;get&lt;/code&gt; currently just hands back &lt;code&gt;any&lt;/code&gt; as the type of these kinds of things. That type annotation is necessary for you to get any mileage out of TypeScript &lt;em&gt;at all&lt;/em&gt; in a computed property like this.&lt;/li&gt;
&lt;li&gt;If, anywhere in your code, you &lt;em&gt;set&lt;/em&gt; the value of &lt;code&gt;someProperty&lt;/code&gt;—including to &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, or to &lt;code&gt;{ some: 'object' }&lt;/code&gt;—this could fail.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, this second point means that TypeScript actually &lt;em&gt;can’t&lt;/em&gt; guarantee this the way we’d like. There’s hope coming for this in the future in several ways—more on that in a moment—but for now, I’ll summarize this by saying TypeScript is really helpful &lt;em&gt;within&lt;/em&gt; a function, once you’ve correctly defined the types you’re using. That means that you have to continue to be &lt;em&gt;very&lt;/em&gt; careful in what you’re doing in the context of any &lt;code&gt;Ember.Object&lt;/code&gt; instance, including all the Ember types which descend from &lt;code&gt;Object&lt;/code&gt;, and therefore also any types &lt;em&gt;you&lt;/em&gt; define which extend those in turn.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="future-niceties" class="level2"&gt;
&lt;h2&gt;Future niceties&lt;/h2&gt;
&lt;p&gt;In the future, we’ll be able to get away from a lot of these difficulties by way of two changes coming down the line: Ember embracing ES6 classes to replace its current custom object system, and embracing decorators as a way of replacing the current approach to computed properties. Let’s take those in turn.&lt;/p&gt;
&lt;section id="class-syntax" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;class&lt;/code&gt; syntax&lt;/h3&gt;
&lt;p&gt;When Ember was birthed in the early 2010s (first as “SproutCore 2” and then “Amber.js” and finally “Ember.js”), the JavaScript world was a &lt;em&gt;remarkably&lt;/em&gt; different place. The current pace of change year to year is nothing short of astounding for any language, but doubly so for one that sat languishing for so long. When Ember came around, something like today’s &lt;code&gt;class&lt;/code&gt; syntax was unimaginable, and so essentially every framework had its own class system of some sort. Over the past few years, with the proposal and standardization of the &lt;code&gt;class&lt;/code&gt; syntax as nice sugar for JavaScript’s prototypal inheritance, the need for a custom object and inheritance model has essentially gone away entirely. However, Ember doesn’t do breaking changes to its API just because; we as a community and the core team in particular have chosen to place a high priority on backwards compatibility. So any adoption of ES6 classes had to work in such a way that we got it &lt;em&gt;without&lt;/em&gt; making everyone rewrite their code from scratch.&lt;/p&gt;
&lt;p&gt;All of this impacts our story with TypeScript because, well, TypeScript for a long time couldn’t even begin to handle this kind of complexity (it’s a lot for a static type system to be able to express, given how &lt;em&gt;very&lt;/em&gt; dynamic the types here can be). As of TS 2.3, it can express &lt;em&gt;most&lt;/em&gt; of this object model, which is great… but it’s forever out of step with the rest of the JS/TS ecosystem, which is not so great. ES6 classes are first-class items in TypeScript and the support for getting types right within them is much, &lt;em&gt;much&lt;/em&gt; stronger than the support for the mixin/extension style object model Ember currently uses. So moving over to ES6 classes will make it much easier for TS to do the work of telling you &lt;em&gt;you’re doing it wrong with that class&lt;/em&gt;—and most importantly, it’ll be able to do that automatically, without needing the incredibly hairy type definition files that we’re still trying to write to get Ember’s current model represented. It Will Just Work. That means less maintenance work and fewer places for bugs to creep in.&lt;/p&gt;
&lt;p&gt;Gladly, we’re getting there! Already today, in the most recent versions of Ember, you can write this, and it will work:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;

export default class MyComponent extends Component {
  theAnswer = 42;
  andTheQuestionIs =
    &amp;quot;What is the meaning of life, the universe, and everything?&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I say “it will work,” I mean you can then turn around and write this in your &lt;code&gt;my-component.hbs&lt;/code&gt; and it’ll be exactly what you would expect from the old &lt;code&gt;Ember.Component.extend()&lt;/code&gt; approach:&lt;/p&gt;
&lt;pre class="hbs"&gt;&lt;code&gt;{{andTheQuestionIs}} {{the Answer}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is one serious limitation of that today: you can’t do that with a class you need to extend &lt;em&gt;further&lt;/em&gt;. So if, for example, you do like we do and customize the application route rinstance and then reuse that in a couple places, you’ll still have to use the old syntax:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Route from &amp;#39;@ember/route&amp;#39;;

export default Route.extend({
  // your customizations...
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But everywhere you consume that, you can use the new declaration:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import ApplicationRoute from &amp;#39;my-app/routes/application&amp;#39;;

export default class JustSomeRoute extends ApplicationRoute {
  model() {
    // etc.
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s more work afoot here, too, to make it so that these restrictions can go away entirely… but those changes will undoubtedly be covered in considerable detail on &lt;a href="http://www.emberjs.com/blog/"&gt;the official Ember blog&lt;/a&gt; when they roll out.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="decorators" class="level3"&gt;
&lt;h3&gt;Decorators&lt;/h3&gt;
&lt;p&gt;Now, that’s all well and good, but it doesn’t necessarily help with this scenario:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;is just a string&amp;#39;;

  someOtherProperty = computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty = get(this, &amp;#39;someProperty&amp;#39;);
    return someProperty + &amp;#39; and now I have appended to it&amp;#39;;
  });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re back in the same spot of having unreliable types there. And again: some really careful work writing type definitions to make sure that &lt;code&gt;computed&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; both play nicely together with the class definition would help somewhat, but… well, it’d be nice if the types could just be determined automatically by TypeScript. (Also, there’s an &lt;a href="https://github.com/Microsoft/TypeScript/issues/16699"&gt;open bug&lt;/a&gt; on the TypeScript repository for trying to deal with &lt;code&gt;computed&lt;/code&gt;; suffice it to say that computed as it currently stands is a sufficiently complicated thing that even with all the incredible type machinery TS 2.1, 2.2, and 2.3 have brought to bear on exactly these kinds of problems… it still can’t actually model &lt;code&gt;computed&lt;/code&gt; correctly.)&lt;/p&gt;
&lt;p&gt;For several years now, Rob Jackson has maintained [a small library] that let you write computed properties with decorators. Up till recently, those were incompatible with TypeScript, because they used to work in the context of object literals rather than classes—and TypeScript never supported that. However, as of about a month ago as I’m writing this, they’ve been updated and they &lt;em&gt;do&lt;/em&gt; work with ES6 classes. So, given the class syntax discussed above, you can now &lt;code&gt;ember install ember-decorators&lt;/code&gt; and then do this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed } from &amp;#39;ember-decorators/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;with a string value&amp;#39;;

  @computed(&amp;#39;someProperty&amp;#39;)
  someOther(someProperty: string) {
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we can provide a type on the parameter to &lt;code&gt;someOther&lt;/code&gt;, which at a minimum makes this enormously cleaner and less repetitive syntactically. More interestingly, however, we &lt;em&gt;should&lt;/em&gt; (though no one has done it just yet, to my knowledge) be able to write a type definition for &lt;code&gt;@computed&lt;/code&gt; such that TypeScript will already know that &lt;code&gt;someProperty&lt;/code&gt; here &lt;em&gt;is&lt;/em&gt; a string, because it’ll have the context of the class in which it’s operating. So that example will be even simpler:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed } from &amp;#39;ember-decorators/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;with a string value&amp;#39;;

  @computed(&amp;#39;someProperty&amp;#39;)
  someOther(someProperty) {
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in that imagined, wonderful future world, if we tried to do something that isn’t a valid string operation—say, we tried &lt;code&gt;someProperty / 3&lt;/code&gt;—TypeScript would complain to us, loudly.&lt;/p&gt;
&lt;p&gt;Although this is still a future plan, rather than a present reality, it’s not &lt;em&gt;that&lt;/em&gt; far off. We just need someone to write that type definition for the decorators, and we’ll be off to the races wherever we’re using the new ES6 class approach instead of the existing &lt;code&gt;Ember.Object&lt;/code&gt; approach. So: &lt;em&gt;soon&lt;/em&gt;. I don’t know how soon, but soon.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="current-ameliorations" class="level2"&gt;
&lt;h2&gt;Current ameliorations&lt;/h2&gt;
&lt;p&gt;In the meantime, of course, many of us are maintaining large codebases. I just checked, and our app (between the app itself and the tests) has around 850 files and 34,000 lines of code. Even as those new abilities land, we’re not going to be converting all of them all at once. And we want to get some real mileage out of TypeScript in the meantime. One of the best ways I’ve found to do this is to take a step back and think about the pieces of the puzzle which Ember is solving for you, and which it &lt;em&gt;isn’t&lt;/em&gt;. That is, Ember is really concerned with managing application state and lifecycle, and with rendering the UI. And it’s &lt;em&gt;fabulous&lt;/em&gt; about those things. What it’s not particularly concerned with (and what it shouldn’t be) is the particulars of how your business logic is implemented. And there’s no particular reason, &lt;em&gt;especially&lt;/em&gt; if most of that business logic is implemented in terms of a bunch of pure, straightforward, input-to-output functions that operate on well-defined data types, for all of your business logic to live in &lt;code&gt;Ember.Object&lt;/code&gt;-descended classes.&lt;/p&gt;
&lt;p&gt;Instead, we have increasingly chosen to write our business logic in bog-standard TypeScript files. These days, our app has a &lt;code&gt;lib&lt;/code&gt; directory in it, with packages like &lt;code&gt;utilities&lt;/code&gt; for commonly used tools… but also like &lt;code&gt;billing&lt;/code&gt;, where we implement &lt;em&gt;all&lt;/em&gt; of our client-side billing business logic. The display logic goes in the &lt;code&gt;Ember.Controller&lt;/code&gt; and &lt;code&gt;Ember.Component&lt;/code&gt; classes, and the routing and state management goes in the &lt;code&gt;Ember.Route&lt;/code&gt; and &lt;code&gt;Ember.Data&lt;/code&gt; pieces as you’d expect. But none of the business logic lives there. That means that we’re entirely free of the aforementioned constraints for the majority of the time dealing with that data. If we do a good job making sure the data is good at the boundaries—route loads, for example, and when we send it back to the server—then we can effectively treat everything else as just boring old (new?) TypeScript.&lt;/p&gt;
&lt;p&gt;So far we’ve only taken that approach with about a quarter of our app, but it’s all the latest pieces of our app, and it has been incredibly effective. Even once we’re able to take advantage of all those shiny new features, we’re going to keep leaning heavily on this approach, because it lets Ember do what Ember is best at, and keeps us from coupling our business logic to the application state management or view rendering details.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that’s the state of things in Ember with TypeScript today. Your best bet for getting real mileage out of TypeScript today is to use the new class syntax support and decorators wherever you can within Ember-specific code, and then to write as much of your business logic outside the Ember system as possible. Gladly, all of that points you right at the future (in the case of syntax) and just good practice (in the case of separating out your business logic). So: not too shabby overall. It’s working well for us, and I hope it does for you as well!&lt;/p&gt;
&lt;p&gt;Next time: how we got here with the &lt;code&gt;ember-cli-typescript&lt;/code&gt; compiler, and where we hope to go from here!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note that here and throughout, I’m using the &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md#addendum-1---table-of-module-names-and-exports-by-global"&gt;RFC #176 Module API&lt;/a&gt;, which you can use today via &lt;a href="https://github.com/ember-cli/babel-plugin-ember-modules-api-polyfill"&gt;this polyfill&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 28 Jul 2017 12:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-07-28:/2017/typing-your-ember-part-3.html</guid><category>emberjs</category><category>typescript</category><category>typing-your-ember</category></item><item><title>Typing Your Ember, Part 2</title><link>http://www.chriskrycho.com/2017/typing-your-ember-part-2.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-1"&gt;first part&lt;/a&gt; of this series, I described how to set up a brand new Ember.js app to use TypeScript. In this part, I’m going to talk about starting to use TypeScript in the context of an existing Ember.js app.&lt;/p&gt;
&lt;p&gt;This is, in many ways, even simpler than setting up an app for the first time, because you already have almost everything you need. The steps here are exactly what you’re used to if you’re used to using the Ember CLI ecosystem:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;code&gt;ember-cli-typescript&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start using TypeScript wherever you want in your app.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It really is that simple, for the most part. There are a couple qualifications, and a couple tips, though.&lt;/p&gt;
&lt;p&gt;Let’s start with &lt;strong&gt;qualifications&lt;/strong&gt;. There are open, unresolved &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/"&gt;issues&lt;/a&gt; about using &lt;code&gt;ember-cli-typescript&lt;/code&gt; in your app in certain contexts. For example: &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/8"&gt;using it with &lt;code&gt;ember-browserify&lt;/code&gt;&lt;/a&gt;. While everything will &lt;em&gt;build&lt;/em&gt; correctly in that case (even if the TypeScript compiler complains about being unable to resolve some things, the Ember CLI build pipeline will still work as expected), your editor integration won’t. There are a bunch of corners like this we’re still hammering out; those are the main things we need to get resolved before we can call this a “1.0.” We have the &lt;em&gt;main&lt;/em&gt; stuff working, but, well… there’s more to do.&lt;/p&gt;
&lt;p&gt;Along those same lines, you should take a close look at the &lt;a href="https://github.com/emberwatch/ember-cli-typescript#not-yet-supported"&gt;&lt;strong&gt;Not yet supported&lt;/strong&gt;&lt;/a&gt; section of the README. There are parts of Ember’s programming model which TypeScript certainly &lt;em&gt;can&lt;/em&gt; support, but which we haven’t done the lifting to get the type declaration file to help with yet. (Looking for a place to pitch in and already comfortable doing some heavy lifting with some of TypeScript’s &lt;a href="http://www.typescriptlang.org/docs/handbook/mixins.html"&gt;most advanced type features&lt;/a&gt;? We could use the help.)&lt;/p&gt;
&lt;p&gt;One other thing to be aware of is that your &lt;code&gt;tsconfig.json&lt;/code&gt; settings will affect what kind of resolution your editor gives you. If you have &lt;code&gt;allowJs&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;, your editors will resolve JS modules. Otherwise, they’ll &lt;em&gt;only&lt;/em&gt; resolve TS modules. This can be incredibly annoying at times. However, this isn’t something we’ve nailed down in terms of what the default should be yet. (You can &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/"&gt;come tell us&lt;/a&gt; on GitHub if you have thoughts or insights there!) And the fact that Microsoft has left this configurable is suggestive: different projects may have different preferences here.&lt;/p&gt;
&lt;p&gt;Now, for the &lt;strong&gt;tips&lt;/strong&gt;. Note that these are just a couple quick pointers; I’ll come back and talk about structuring your project and more sophisticated uses of TypeScript in the future.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don’t turn on &lt;code&gt;--strict&lt;/code&gt; or the corresponding individual flags on day 1. Unless you have an extremely unusual and disciplined Ember.js codebase, you’ll have an incredible set of errors to deal with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t set the the &lt;code&gt;noEmitOnError&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;, for much the same reason. Since the state of type declaration files for Ember is best described as &lt;em&gt;nascent&lt;/em&gt; at present, many of your files will have errors in them just from failed imports!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t try to convert everything at once. Just pick the next feature or bug you’re working on, and start with the files you’re touching for that bug. Rename it to &lt;code&gt;.ts&lt;/code&gt;, fix any major issues it flags up that you can—but stick as locally as possible. You’re apt to find a &lt;em&gt;lot&lt;/em&gt; of small bugs as you start migrating, and some of them are things which are apt to affect your whole system because they touch central data types. It’s okay. You can come back to those later. For today, you can just be explicit about the weirdnesses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As part of that: get comfortable—really, really comfortable—with &lt;a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types"&gt;union types&lt;/a&gt;. They’ll make it much easier to express the kind of code you’ve &lt;em&gt;actually&lt;/em&gt; written.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t worry about adding explicit types to &lt;em&gt;everything.&lt;/em&gt; In fact, depending on how comfortable you are already with typed languages, you should probably take a pretty different tack with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you’re just stepping into the world of typed programming languages, you might start adding types where they’re the &lt;em&gt;lowest risk&lt;/em&gt;: some place like your automated tests. That’ll help you start to see how to take advantage of them, while not impacting the way you write your app code until you have a better idea how best to employ the types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re already really comfortable with typed programming languages, you might employ types where they’re &lt;em&gt;most helpful:&lt;/em&gt; start with some types in the hairiest or trickiest spots of your app.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is plenty more I could say, but I think that’s a good start for now. I’ll have lots more to add in later posts about the details of how specifically to get the most mileage out of types within an Ember.js app today.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/2017/typing-your-ember-part-1"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Part 1 – Set your Ember.js project up to use TypeScript.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Also, I &lt;em&gt;strongly&lt;/em&gt; encourage you to write types in terms of unions of types rather than in terms of &lt;a href="http://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties"&gt;optional properties on types&lt;/a&gt;. That might be surprising; I’ll explain it in more detail in a future post.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 07 May 2017 22:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-05-07:/2017/typing-your-ember-part-2.html</guid><category>typescript</category><category>emberjs</category><category>typing-your-ember</category></item><item><title>Typing Your Ember, Part 1</title><link>http://www.chriskrycho.com/2017/typing-your-ember-part-1.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In this first post in the series, we’re going to keep things simple and easy: we’re going to get an Ember.js app configured to use TypeScript. Later posts will cover some of the other details.&lt;/p&gt;
&lt;p&gt;Because of the lovely &lt;a href="https://ember-cli.com"&gt;Ember CLI&lt;/a&gt; ecosystem, this is a pretty straightforward process. I’m going to start from &lt;em&gt;zero&lt;/em&gt; so that even if you’ve never written an Ember app before, you can get this up and running by following these instructions. These instructions have also been tested and confirmed to work across platforms—you can do this equally on Windows, macOS, or Linux.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Make sure you have Ember’s prerequisites installed. Get &lt;a href="https://nodejs.org/en/"&gt;Node&lt;/a&gt; for your platform. Optionally (but highly recommended) install &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt; to manage your Node packages.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the Ember command lines tools globally:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;yarn global add ember-cli&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;npm install --global ember-cli&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an Ember app.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember new my-ts-app --yarn&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Using the &lt;code&gt;--yarn&lt;/code&gt; flag will make it so your app uses &lt;a href="https://yarnpkg.com"&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt; and creates a &lt;code&gt;yarn.lock&lt;/code&gt; file instead of using &lt;code&gt;npm&lt;/code&gt; when it installs its dependencies.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now move to the root of the newly created app: this is where we’ll do everything else in the post.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;cd my-ts-app&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the &lt;a href="https://emberobserver.com/addons/ember-cli-typescript"&gt;&lt;em&gt;ember-cli-typescript&lt;/em&gt; add-on&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate your first UI component.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember generate component some-input&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Rename the files it generated from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.ts&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app/components/some-input.js&lt;/code&gt; → &lt;code&gt;app/components/some-input.ts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests/integration/components/some-input-test.js&lt;/code&gt; → &lt;code&gt;tests/integration/components/some-input-test.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Eventually, we’ll make it so that you get TypeScript for all newly generated components when using &lt;em&gt;ember-cli-typescript&lt;/em&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add some content to the files:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;{{!-- some-input.hbs --}}
{{input value=theValue change=(mut theValue)}}
{{theValue}}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// some-input.ts
import Ember from &amp;#39;ember&amp;#39;;

export default Ember.Component.extend({
  theValue: &amp;#39;&amp;#39;,
});&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your &lt;code&gt;application.hbs&lt;/code&gt; file to remove the default &lt;code&gt;{{welcome}}&lt;/code&gt; template and replace it with &lt;code&gt;{{some-input}}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spin up the Ember application with Ember CLI’s development server:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember serve&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll likely note some warnings: the TypeScript compiler won’t be able to find some of the modules imported in your files. I’ll have more to say about this in a future post. For now, suffice it to say: don’t worry, Ember CLI is still resolving and compiling your modules just fine.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Load the application by going to &lt;code&gt;localhost:4200&lt;/code&gt; in your browser. You should see a blank white screen with an input in it. Type in it, and see the input rendered to the page. Simple enough, but it’s using a TypeScript file compiled along the way!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s it: we’re done setting up an Ember.js app to use TypeScript! In the next post, I’ll talk a bit about strategies for migrating an existing app to TypeScript—not just the mechanics of it, but also where and how to start actually integrating types into your code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/2017/typing-your-ember-part-2"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Part 2 – Adding TypeScript to an existing Ember.js project.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I strongly prefer to use &lt;code&gt;yarn&lt;/code&gt; over &lt;code&gt;npm&lt;/code&gt; because &lt;code&gt;yarn&lt;/code&gt; installs are predictable and repeatable, and if there’s one thing I don’t need to spend time on when developing our Ember.js app at Olo, it’s chasing problems with transitive dependencies that are different in the build server than in my local development environment. Yarn’s lockfiles mean what ends up built on the server is &lt;em&gt;exactly&lt;/em&gt; what ended up built on my machine.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;But if you’re curious, here’s a preview: we really need more &lt;a href="http://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"&gt;type definitions&lt;/a&gt; for the Ember ecosystem. I’ll be covering &lt;em&gt;how&lt;/em&gt; we build those in much more detail in a future installment.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 05 May 2017 00:10:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-05-05:/2017/typing-your-ember-part-1.html</guid><category>typescript</category><category>emberjs</category><category>typing-your-ember</category></item><item><title>Testing Ember.js Mixins (and Helpers) With a Container</title><link>http://www.chriskrycho.com/2016/testing-emberjs-mixins-with-a-container.html</link><description>&lt;p&gt;&lt;i&gt;Updated to note that the same concerns apply to helpers. You can always see the full revision history of this item &lt;a href="https://github.com/chriskrycho/chriskrycho.com/commits/master/content/tech/ember-js-mixins-container.md"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Today I was working on an Ember.js &lt;a href="http://emberjs.com/api/classes/Ember.Mixin.html#content"&gt;mixin&lt;/a&gt; for the new mobile web application we’re shipping at Olo, and I ran into an interesting problem when trying to test it.&lt;/p&gt;
&lt;p&gt;When you’re testing mixins (or helpers), you’re generally not working with the normal Ember container.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In fact, the default test setup for mixins doesn’t have &lt;em&gt;any&lt;/em&gt; container in play. It just looks like this (assuming you ran &lt;code&gt;ember generate mixin bar&lt;/code&gt; in an app named &lt;code&gt;foo&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import BarMixin from &amp;#39;foo/mixins/bar&amp;#39;;
import { module, test } from &amp;#39;qunit&amp;#39;;

module(&amp;#39;Unit | Mixin | bar&amp;#39;);

// Replace this with your real tests.
test(&amp;#39;it works&amp;#39;, function(assert) {
  let BarObject = Ember.Object.extend(BarMixin);
  let subject = BarObject.create();
  assert.ok(subject);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It uses the basic Qunit &lt;code&gt;module&lt;/code&gt; setup, not the ember-qunit &lt;code&gt;moduleFor&lt;/code&gt; setup.&lt;/li&gt;
&lt;li&gt;It assumes you’re generating a new object instance for every single test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of those assumptions are fine, &lt;em&gt;if you don’t need to interact with the container&lt;/em&gt;. In many cases, that’s perfectly reasonable—I’d go so far as to say that most mixins and helpers probably &lt;em&gt;shouldn’t&lt;/em&gt; have any dependency on the container.&lt;/p&gt;
&lt;p&gt;In the specific case I was working on, however, the point of the mixin was to abstract some common behavior which included all the interactions with a &lt;a href="https://guides.emberjs.com/v2.6.0/applications/services/"&gt;service&lt;/a&gt;. This meant making sure the dependency injection worked in the unit test. This in turn meant dealing with the container. So let’s see what was involved in that. (You can generalize this approach to any place in the Ember ecosystem where you need to test something which doesn’t normally have the container set up.)&lt;/p&gt;
&lt;p&gt;We start by switching from the basic &lt;code&gt;qunit&lt;/code&gt; helpers to using the &lt;code&gt;ember-qunit&lt;/code&gt; helpers.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// Replace this...
import { module, test } from &amp;#39;qunit&amp;#39;;
module(&amp;#39;Unit | Mixin | bar&amp;#39;);

// with this:
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;
moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | Bar&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;moduleFor()&lt;/code&gt; helper has two things going for it—one of which we &lt;em&gt;need&lt;/em&gt;, and one of which isn’t strictly &lt;em&gt;necessary&lt;/em&gt;, but has some nice functionality. In any case, this will help when registering a container. Those two features:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It does support the use of the container. In fact, it’s declaring how this mixin relates to the container in the first argument to the helper function: &lt;code&gt;'mixin:foo'&lt;/code&gt; is the definition of the mixin for injection into the container.&lt;/li&gt;
&lt;li&gt;Any functions we define on the options argument we can pass to the &lt;code&gt;moduleFor()&lt;/code&gt; helper are available on the &lt;code&gt;this&lt;/code&gt; of the test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, in the first version of this, I had set up a common &lt;code&gt;Ember.Object&lt;/code&gt; which had mixed in the &lt;code&gt;BarMixin&lt;/code&gt;, so:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const BarObject = Ember.Object.extend(BarMixin);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, in each test, I created instances of this to use:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;test(&amp;#39;test some feature or another&amp;#39;, function(assert) {
  const subject = BarObject.create();
  // ...do stuff and test it with `assert.ok()`, etc.
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem was that any of those tests which required a container injection always failed. Assume we have a service named &lt;code&gt;quux&lt;/code&gt;, and that it’s injected into the mixin like this in &lt;code&gt;foo/app/mixins/bar.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;

export default Ember.Mixin.create({
  quux: Ember.inject.service()
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any test which actually tried to &lt;em&gt;use&lt;/em&gt; &lt;code&gt;quux&lt;/code&gt; would simply fail because of the missing container (even if you specified in the test setup that you needed the service):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test(&amp;#39;it uses quux somehow&amp;#39;, function(assert) {
  const subject = BarObject.create();
  const quux = subject.get(&amp;#39;quux&amp;#39;);  // throws Error
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifically, you will see &lt;code&gt;Attempting to lookup an injected property on an object without a container&lt;/code&gt; if you look in your console.&lt;/p&gt;
&lt;p&gt;Taking advantage of the two &lt;code&gt;ember-qunit&lt;/code&gt; features, though, we can handle all of this.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;

const { getOwner } = Ember;

moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | bar&amp;#39;, {
  // The `needs` property in the options argument tells the test
  // framework that it needs to go find and instantiate the `quux`
  // service. (Note that if `quux` depends on other injected
  // services, you have to specify that here as well.)
  needs: [&amp;#39;service:quux&amp;#39;],

  // Again: any object we create in this options object will be
  // available on the `this` of every `test` function below. Here,
  // we want to get a &amp;quot;test subject&amp;quot; which is attached to the
  // Ember container, so that the container is available to the
  // test subject itself for retrieving the dependencies injected
  // into it (and defined above in `needs`).
  subject() {
    BarObject = Ember.Object.extend(BarMixin);

    // This whole thing works because, since we&amp;#39;re in a
    // `moduleFor()`, `this` has the relevant method we need to
    // attach items to the container: `register()`.
    this.register(&amp;#39;test-container:bar-object&amp;#39;, BarObject);

    // `Ember.getOwner` is the public API for getting the
    // container to do this kind of lookup. You can use it in lots
    // of places, including but not limited to tests. Note that
    // that because of how the dependency injection works, what we
    // get back from the lookup is not `BarObject`, but an
    // instance of `BarObject`. That means that we don&amp;#39;t need to
    // do `BarObject.create()` when we use this below; Ember
    // already did that for us.
    return getOwner(this).lookup(&amp;#39;test-container:bar-object&amp;#39;);
  }
});

test(&amp;#39;the mixin+service does what it should&amp;#39;, function(assert) {
  // We start by running the subject function defined above. We
  // now have an instance of an `Ember.Object` which has
  // `BarMixin` applied.
  const subject = this.subject();

  // Now, because we used a test helper that made the container
  // available, declared the dependencies of the mixin in `needs`,
  // and registered the object we&amp;#39;re dealing with here, we don&amp;#39;t
  // get an error anymore.
  const quux = subject.get(&amp;#39;quux&amp;#39;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in summary:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Use the &lt;code&gt;ember-qunit&lt;/code&gt; helpers if you need the container.&lt;/li&gt;
&lt;li&gt;Define whatever dependencies you have in &lt;code&gt;needs&lt;/code&gt;, just as you would in any other test.&lt;/li&gt;
&lt;li&gt;Register the mixin-derived object (whether &lt;code&gt;Ember.Object&lt;/code&gt;, &lt;code&gt;Ember.Route&lt;/code&gt;, &lt;code&gt;Ember.Component&lt;/code&gt;, or whatever else) in a method on the options argument for &lt;code&gt;moduleFor()&lt;/code&gt;. Use that to get an instance of the object and you’re off to the races!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One final consideration: while in this case it made good sense to use this approach and make the service injection available for the test, there’s a reason that the tests generated by Ember CLI don’t use &lt;code&gt;moduleFor()&lt;/code&gt; by default. It’s a quiet but clear signal that you should reevaluate whether this &lt;em&gt;is&lt;/em&gt; in fact the correct approach.&lt;/p&gt;
&lt;p&gt;In general, mixins are best used for self-contained units of functionality. If you &lt;em&gt;need&lt;/em&gt; dependency injection for them, it may mean that you should think about structuring things in a different way. Can all the functionality live on the service itself? Can all of it live in the mixin instead of requiring a service? Can the service calls be delegated to whatever type is using the mixin?&lt;/p&gt;
&lt;p&gt;But if not, and you &lt;em&gt;do&lt;/em&gt; need a mixin which injects a service, now you know how to do it!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; The documentation around testing mixins is relatively weak, and in general the testing docs are the weak bits in the Ember guides right now.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; After a conversation with &lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt; on the &lt;a href="https://ember-community-slackin.herokuapp.com"&gt;Ember Community Slack&lt;/a&gt;, though, I was able to get a handle on the issue, and here we are. Since it stumped me, I’m guessing I’m not the only one.&lt;/p&gt;
&lt;p&gt;When this happens, &lt;em&gt;write it up&lt;/em&gt;. I’ve been guilty of this too often in the past few months: learning something new that I couldn’t find anywhere online, and then leaving it stored in my own head. It doesn’t take a particularly long time to write a blog post like this, and if you’re stuck, chances are &lt;em&gt;very&lt;/em&gt; good someone else is too.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re not familiar with the “container”, this is where all the various dependencies are registered, and where Ember looks them up to inject them when you use methods like &lt;code&gt;Ember.inject.service()&lt;/code&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Something I intend to help address in the next week or two via a pull request, so if you’re my Ember.js documentation team friend and you’re reading this… it’s coming. 😉&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 09 Jun 2016 20:35:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-09:/2016/testing-emberjs-mixins-with-a-container.html</guid><category>emberjs</category><category>javascript</category><category>software development</category></item><item><title>Ember.js: "Introducing Subteams"</title><link>http://www.chriskrycho.com/2016/emberjs-introducing-subteams.html</link><description>&lt;p&gt;In which one tech I really like (&lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt;) steals a great idea from another tech I really like (&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 24 May 2016 19:10:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-24:/2016/emberjs-introducing-subteams.html</guid><category>links</category><category>programming languages</category><category>emberjs</category><category>rust</category></item><item><title>Unsurprisingly, In Flux</title><link>http://www.chriskrycho.com/2015/unsurprisingly-in-flux.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;This started as a &lt;a href="https://alpha.app.net/chriskrycho/post/57102562"&gt;series of posts&lt;/a&gt; on App.net. I &lt;a href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html"&gt;resolved&lt;/a&gt; a while ago that if I was tempted to do that, I should just write a blog post instead. I failed at that resolution, but at a friend’s &lt;a href="https://alpha.app.net/jws/post/57108281"&gt;suggestion&lt;/a&gt;, am adapting it into a blog post anyway. You can see the posts that prompted it &lt;a href="https://alpha.app.net/keita/post/57096585"&gt;here&lt;/a&gt; and &lt;a href="https://alpha.app.net/jws/post/57096838"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone – React &amp;amp; Angular – Ember – Meteor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backbone and related library Underscore are really collections of common JS tools and patterns you can use to write apps, but they’re not &lt;em&gt;frameworks&lt;/em&gt;, per se. You’ll write all your own boilerplate there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React and Angular supply much &lt;em&gt;more&lt;/em&gt; of the functionality, but Angular is a “meta-framework” that aims to do &lt;em&gt;some&lt;/em&gt; boilerplate but let you construct your own custom app framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is very powerful, but it’s kind of like Git: wires are exposed; you have to understand a &lt;em&gt;lot&lt;/em&gt; about the internals to get it to do what you want. Its routing functionality is pretty limited out of the box, too—so much so that there’s a near-standard third-party router.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React, as I understand it, supplies a paradigm and associated tools oriented primarily at view state management, though with capabilities via extensions for routing, etc. These tools are &lt;em&gt;extremely&lt;/em&gt; powerful for performance in particular. It’s not a full framework, and the docs expressly note that you can &lt;em&gt;just&lt;/em&gt; use React for the view layer with other tools if you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, Angular and React do &lt;em&gt;different&lt;/em&gt; things from each other, but both do substantially more than Backbone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember is a full framework, strongly emphasizing shared conventions (with a lot of common developers from Rails). It’s perhaps less adaptable than React or Angular, but is much more full-featured; you have very little boilerplate to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meteor is like Ember, but does server-side Node as well as client-side stuff, with the goal being to minimize code duplication, sharing assets as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of all of those, Ember has easily (easily!) the best-explained roadmap, most articulate leadership, and best development path. They are also aggressively adopting the best features of other frameworks wherever it makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is currently in flux, as Google has announced Angular 2.0 will be basically a completely different framework; there will be &lt;em&gt;no&lt;/em&gt; direct migration path for Angular 1.x apps to Angular 2.0+. Total rewrite required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember uses a steady 6-week release schedule with very careful regression testing and semantic versioning, with clear deprecation notices and upgrade paths, and is therefore both rapidly iterating &lt;em&gt;and&lt;/em&gt; relatively stable for use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you just need a set of tools for enhance functionality on otherwise relatively static pages, Backbone+Underscore is a great combo. If you already have a bunch of things in place but want a dedicated view layer, React is good.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re writing a new, full-on web &lt;em&gt;application&lt;/em&gt; (SPA, or organized in whatever other way), I think Ember is the very clear winner at this point. I have good confidence in their leadership and they’re firing on all cylinders.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Angular, &lt;a href="https://alpha.app.net/mikehoss"&gt;@mikehoss&lt;/a&gt; &lt;a href="https://alpha.app.net/mikehoss/post/57105656"&gt;posted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record they are doing that to make it more mobile-friendly. The Ang1 has abysmal performance on mobile. Besides a time machine, this maybe the best option. And Miško is a bit of a jerk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can’t speak to his comment about Miško (Miško Hevery, one of the leads on AngularJS), but I agree about Angular itself: the rewrite needs to happen. Angular 1.x is a mess—as are its docs. It’s just not a good time to be using 1.x for any new projects.&lt;/p&gt;
&lt;p&gt;I’ll add to these points that I’ve used Angular for the last 9 months on HolyBible.com development. As I noted: the documentation is pretty rough, and in a lot of cases you really do have to understand what the framework is doing and how before you can get it to do the things you want. This is, in one sense, exactly the &lt;em&gt;opposite&lt;/em&gt; of what I’m looking for in a framework—but it makes sense given Angular’s goal of being a meta-framework.&lt;/p&gt;
&lt;p&gt;Rather like Git, though, which was originally going to be infrastructure for version control systems which would have their own interface, but eventually just had a “good enough” interface that we’re all now stuck with, Angular is being used &lt;em&gt;as&lt;/em&gt; a framework, not just as a &lt;em&gt;meta-framework&lt;/em&gt;, and it’s unsurprisingly not great for that.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Take this for what it’s worth: not the final word (by a long stretch) on JavaScript frameworks, but rather the perspective of one guy who notably &lt;em&gt;hasn’t used all of the frameworks&lt;/em&gt;, but has spent some time looking at them. Moreover, I haven’t particularly edited this; it’s more a summary in the kind of short-form posts that I originally created than a detailed analysis. The only things I’ve done are expand some of the notes on Angular and React, and add the footnote on React.&lt;/i&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; don’t know a ton about React, but I do think a lot of what I do know about it is cool from a programming perspective. From a designer perspective, however, it’s a bit of a pain: React’s “JSX” domain-specific language is &lt;em&gt;much&lt;/em&gt; less friendly to developers than standard HTML, and therefore than either Ember or Angular, both of which implement their templating via HTML templating languages. There’s a substantil tradeoff there: React’s model is interesting not only academically but in practice because of the performance results it produces. It’s worth note, though, that others have recognized this and are adopting it to varying degrees; notably, Ember is incorporating the idea of minimizing changes to the DOM by keeping track of state and updating only differences, rather than refreshing the whole tree, in the new rendering engine (HTMLBars) they’re rolling out over the past several and future several releases.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 08 Apr 2015 16:05:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-04-08:/2015/unsurprisingly-in-flux.html</guid><category>software development</category><category>javascript</category><category>angularjs</category><category>emberjs</category><category>react</category></item></channel></rss>