<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - emberjs</title><link>http://www.chriskrycho.com/</link><description></description><lastBuildDate>Fri, 12 Jan 2018 08:00:00 -0500</lastBuildDate><item><title>Using Ember.js in your Apps Today, Redux</title><link>http://www.chriskrycho.com/2018/typing-your-ember-using-today-redux.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Back in July 2017, I wrote &lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-3.html"&gt;a post&lt;/a&gt; on how to using TypeScript in your Ember.js apps. At the time, we were still busy working on getting the typings more solid for Ember itself, and &lt;code&gt;class&lt;/code&gt; syntax for Ember was a long way away.&lt;/p&gt;
&lt;p&gt;Things have gotten quite a bit better since then, so I thought I’d update that post with recommendations for using TypeScript in an app &lt;em&gt;now&lt;/em&gt; with the updated typings, as well as with another six months of experience using TypeScript in our app at Olo (~20k lines of code in the app and another ~15k in tests).&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;section id="normal-ember-objects" class="level2"&gt;
&lt;h2&gt;Normal Ember objects&lt;/h2&gt;
&lt;p&gt;For normal Ember objects, things now &lt;em&gt;mostly&lt;/em&gt; just work if you’re using class-based syntax, with a single (though very important) qualification I’ll get to in a minute. And you can use the class-based syntax &lt;em&gt;today&lt;/em&gt; in Ember.js—all the way back to 1.13, as it turns out. If you want to learn more, you can read &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0240-es-classes.md"&gt;this RFC&lt;/a&gt; or &lt;a href="https://medium.com/build-addepar/es-classes-in-ember-js-63e948e9d78e"&gt;this blog post&lt;/a&gt;, both by &lt;a href="https://github.com/pzuraq"&gt;@pzuraq (Chris Garrett)&lt;/a&gt;, who did most of the legwork to research this and flesh out the constraints, and who has also been doing a lot of work on &lt;a href="https://ember-decorators.github.io/ember-decorators/docs/index.html"&gt;Ember Decorators&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few quick notes before I dig into some specific examples&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;!-- `class` vs. using variables and "Cannot use 'new' with an expression whose type lacks a call or construct signature." --&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="a-detailed-example" class="level3"&gt;
&lt;h3&gt;A detailed example&lt;/h3&gt;
&lt;p&gt;That means that every new bit of code I write today in our app looks roughly like this, with only the obvious modifications for services, routes, and controllers—I picked components because they’re far and away the most common things in our applications.&lt;/p&gt;
&lt;p&gt;In order to explain all this clearly, I’m going to first show the whole component, then zoom in on and explain specific parts of it.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed } from &amp;#39;@ember/object&amp;#39;;
import Computed from &amp;#39;@ember/object/computed&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class MyComponent extends Component {
  // Component arguments
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`
  
  // Injections
  session: Computed&amp;lt;Session&amp;gt; = service();

  // class properties
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];
  
  // TypeScript correctly infers that this has the type Computed&amp;lt;number&amp;gt;
  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: MyComponent): number {
    return this.get(&amp;#39;lookAString&amp;#39;).length;
  });
  
  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);

  // But some things, TypeScript does not and cannot validate -- a number
  // of the computed property macros are in this bucket, because they assume
  // 
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);
  
  actions = {
    addToCollection(this: MyComponent, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };
  
  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));
    
    this.includeAhoy();
  }
  
  includeAhoy(this: MyComponent) {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;section id="component-arguments" class="level4"&gt;
&lt;h4&gt;Component arguments&lt;/h4&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component {
  // Component arguments
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I always put these first so that the “interface” of the object is clear and obvious. You can do the same thing on a controller instance; in that case you would export a &lt;code&gt;Model&lt;/code&gt; from the corresponding &lt;code&gt;Route&lt;/code&gt; class and import it into the &lt;code&gt;Controller&lt;/code&gt;. It’s a bit of boilerplate, to be sure, but it lets you communicate your interface clearly to consumers of the &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="injections" class="level4"&gt;
&lt;h4&gt;Injections&lt;/h4&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // Injections
  session: Computed&amp;lt;Session&amp;gt; = service();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the most important thing to note is the type annotation. In principle, we could work around this by requiring you to explicitly name the service and using a “type registry” – more on that below in my discussion of using Ember Data – but I’m not yet persuaded that’s better than just writing the appropriate type annotation. Notice that because TypeScript is a &lt;em&gt;structural&lt;/em&gt; type system, it doesn’t matter if what is passed in is the actual &lt;code&gt;Session&lt;/code&gt; service; it just needs to be something that &lt;em&gt;matches the shape&lt;/em&gt; of the service – so your normal behavior around dependency injection, etc. is all still as expected.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="class-properties" class="level4"&gt;
&lt;h4&gt;Class properties&lt;/h4&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // class properties
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];&lt;/code&gt;&lt;/pre&gt;
&lt;!-- TODO: note what they're compiled to --&gt;
&lt;!-- TODO: explain consequence of that for the `[]` type --&gt;
&lt;/section&gt;
&lt;section id="computed-properties" class="level4"&gt;
&lt;h4&gt;Computed properties&lt;/h4&gt;
&lt;!-- TODO --&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="variants" class="level3"&gt;
&lt;h3&gt;Variants&lt;/h3&gt;
&lt;p&gt;There are two times when things will look different.&lt;/p&gt;
&lt;p&gt;The first is when you’re using properties that need to be merged with properties in the prototype chain, e.g. &lt;code&gt;attributeBindings&lt;/code&gt; or &lt;code&gt;classNameBindings&lt;/code&gt;, or which (because of details of how components are constructed) have to be set on the prototype rather than as instance properties, e.g. &lt;code&gt;tagClass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For those, we can just leverage &lt;code&gt;.extend&lt;/code&gt; in conjunction with classes:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;

export default class MyListItem extends Component.extend({
  tagName: &amp;#39;li&amp;#39;,
  classNameBindings: [&amp;#39;itemClass&amp;#39;],
}) {
  itemClass = &amp;#39;this-be-a-list&amp;#39;;
  
  // etc.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is also how you’ll &lt;em&gt;use&lt;/em&gt; mixins (on defining them, see below):&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import MyMixin from &amp;#39;my-app/mixins/my-mixin&amp;#39;;

export default class MyComponent extends Component.extend(MyMixin) {
  // the rest of the definition.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, however—and this is very important—that you cannot &lt;code&gt;.extend&lt;/code&gt; an existing &lt;code&gt;class&lt;/code&gt; implementation. As a result, deep inheritance hierarchies &lt;em&gt;may&lt;/em&gt; make transitioning to classes in Ember painful. (This isn’t a TypeScript limitation; it’s a limitation of classes in Ember today.)&lt;/p&gt;
&lt;p&gt;In the future, we’ll (hopefully and presumably) have an escape hatch for those merged or prototypally-set properties via decorators. That’ll look something like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { className, tagName } from &amp;#39;ember-decorators/component&amp;#39;;

@tagName(&amp;#39;li&amp;#39;)
export default class MyListItem extends Component {
  @className itemClass = &amp;#39;this-be-a-list&amp;#39;;
  
  // etc.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other time you’ll have to take a different tack is with types which don’t yet work properly with classes. The most common of these are &lt;code&gt;Mixin&lt;/code&gt;s and Ember Data objects. For &lt;code&gt;Mixin&lt;/code&gt;s, sadly, it’s difficult (if not impossible) to get rigorous type-checking in their definitions. However, you can add appropriate type definitions to them and those will be picked up in &lt;code&gt;class&lt;/code&gt;es which consume them.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;Note that if you’re writing &lt;em&gt;new&lt;/em&gt; code in Ember.js—using TypeScript or not—I strongly encourage you to simply avoid using mixins at all. Instead, use services. This will require you to change how you write some of your code, but in my experience it also makes for a much more maintainable and easier-to-understand (and therefore easier-to-maintain) codebase.&lt;/p&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="ember-data" class="level2"&gt;
&lt;h2&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;There are two challenges to using Ember Data effectively with TypeScript today.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Ember Data, for reasons I haven’t yet dug into myself, does not play nicely with ES6 classes. However, we &lt;em&gt;want&lt;/em&gt; named class exports for the sake of being able to use them&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;++TODO++&lt;/p&gt;
&lt;p&gt;We also have some ideas and prototypes for how to make the experience of both of these much, &lt;em&gt;much&lt;/em&gt; better. Sometime soon-ish—hopefully before EmberConf, where I’d really like to &lt;em&gt;not&lt;/em&gt; have to mess with teaching the complicated ways above to make things work!—we should land a solution that means you can drop the type coercions and just do a lookup like you would normally, and it will Just Work™️.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note for Ember CLI Mirage users: most of what I’ve said here is equally applicable and nearly identical for Mirage. I’m currently working on solid typings for Mirage that get us everything we need that way.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re curious about the mechanics, we’re basically setting up a “type registry” which maps the string keys to the correct model, so that the type of e.g. &lt;code&gt;store.createRecord('some-model', { ... })&lt;/code&gt; will do a lookup in an interface which defines a mapping from model name, i.e. &lt;code&gt;some-model&lt;/code&gt; here, to the model type, e.g. &lt;code&gt;export default class SomeModel extends DS.Model.extend({ ... }) {}&lt;/code&gt;;&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 12 Jan 2018 08:00:00 -0500</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-01-12:/2018/typing-your-ember-using-today-redux.html</guid><category>TypeScript</category><category>emberjs</category><category>typing-your-ember</category></item><item><title>Announcing ember-cli-typescript 1.0.0</title><link>http://www.chriskrycho.com/2017/announcing-ember-cli-typescript-100.html</link><description>&lt;p&gt;I’m extremely pleased to announce the release of &lt;a href="https://github.com/typed-ember/ember-cli-typescript/releases/tag/v1.0.0"&gt;ember-cli-typescript 1.0.0&lt;/a&gt;! You can get it the same way you do &lt;em&gt;any&lt;/em&gt; Ember addon:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a detailed walkthrough of adding TypeScript to your projects, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-1.html"&gt;Typing Your Ember, Part 1: Set your Ember.js project up to use TypeScript.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-2.html"&gt;Typing Your Ember, Part 2: Adding TypeScript to an existing Ember.js project.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what are we shipping today, and what’s on the roadmap?&lt;/p&gt;
&lt;section id="whats-in-1.0" class="level2"&gt;
&lt;h2&gt;What’s In 1.0?&lt;/h2&gt;
&lt;p&gt;This release is intentionally relatively minimal: the goal here is provide stable foundation for building Ember.js applications with TypeScript in the toolchain. This means that in any app you can install the add-on and just start &lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-3.html"&gt;progressively converting your app over to TypeScript&lt;/a&gt;. However, we don’t expect to change the way you &lt;em&gt;use&lt;/em&gt; the addon at all in the foreseeable future.&lt;/p&gt;
&lt;p&gt;I’ll give you fair warning that there is one &lt;em&gt;major&lt;/em&gt; challenge you will find as you work with ember-cli-typescript today: the lack of type definitions for most projects, and the limits of the existing type definitions for Ember.js itself. That’s not as bad as it sounds, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;See the &lt;a href="#the-roadmap"&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt; below—we’re working on that, and you can help!&lt;/li&gt;
&lt;li&gt;I’ve been using TypeScript successfully in the app I work on at my day job for the last nine months or so. While the lack of (good or any) typings has had its frustrations, &lt;a href="https://www.dailydrip.com/blog/domain-driven-design-and-typed-functional-programming-in-typescript"&gt;TypeScript has already added a &lt;em&gt;lot&lt;/em&gt; of value for us&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="the-roadmap" class="level2"&gt;
&lt;h2&gt;The Roadmap&lt;/h2&gt;
&lt;p&gt;We have a bunch of things we’re actively working on and which you can expect to land in the next few weeks to months.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-1-a-prepublish-build-process-for-addons"&gt;1.1: A prepublish build process for addons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#community-driven-work-on-typings"&gt;Community-driven work on typings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="a-prepublish-build-process-for-addons" class="level3"&gt;
&lt;h3&gt;1.1: A prepublish build process for addons&lt;/h3&gt;
&lt;p&gt;The major priority for the 1.1 release is an npm prepublication step to generate JavaScript and typing files from add-ons which are using TypeScript. Currently, addons have to take TypeScript as a full dependency, not a dev dependency, because they currently just ship the &lt;code&gt;.ts&lt;/code&gt; files up to npm and they have to be compiled in your app at build time.&lt;/p&gt;
&lt;p&gt;We really don’t want to make any app developer who is using your addon download either the TypeScript files or &lt;em&gt;especially&lt;/em&gt; the TypeScript compiler if we can avoid it. There are three reasons for this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;The fact that an add-on is developed in TypeScript really shouldn’t affect app developers. If they’re writing a plain-old JavaScript app, the fact that your addon is originally written in TypeScript is irrelevant to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript is &lt;em&gt;large&lt;/em&gt;. The v2.4 installation I have in the app I’m working on right now weights 26MB. If I were using four add-ons which required TypeScript, my install cost could easily go up by a hundred megabytes. That’s not always a huge deal on a corporate network, but even where people &lt;em&gt;do&lt;/em&gt; have good download speeds, it’s a hit to developer time. Every time someone has to reinstall all the dependencies, those 26MB have to come down again. If TypeScript becomes common, you might suddenly find yourself with addons using 2.4, 2.5, 2.6, etc.; it’s not hard to see that ballooning up the size of your installation in a really non-trivial way: 26MB × &lt;em&gt;n&lt;/em&gt; versions of TypeScript = &lt;em&gt;do not want&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The TypeScript compilation step takes time. Addons can do this &lt;em&gt;once&lt;/em&gt; and save every consuming app build time. This isn’t the end of the world, but anything we can do to keep build times lower is a real win for developer productivity.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Accordingly the plan is to automatically add a build step which runs the TypeScript compiler on your addon and generates plain-old-JavaScript and the corresponding type definition files (&lt;code&gt;.d.ts&lt;/code&gt;) prior to publishing to npm. That way, TypeScript can remain a dev dependency (rather than a full dependency) of each addon, and not be installed alongside the addon for consumers. Just-JavaScript consumers can just consume the normal JavaScript generated by the build. TypeScript consumers will get the full benefits of the types via the generated typing files.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;should&lt;/em&gt; hopefully land by late August or early September. Fingers crossed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="community-driven-work-on-typings" class="level3"&gt;
&lt;h3&gt;Community-driven work on typings&lt;/h3&gt;
&lt;p&gt;The process of getting type definitions in place for &lt;em&gt;all&lt;/em&gt; of Ember.js and its ecosystem is way, &lt;em&gt;way&lt;/em&gt; too big for any one person or even a small handful of people to manage alone. This is something we’re going to take on as a community.&lt;/p&gt;
&lt;section id="new-typings-for-ember.js-itself" class="level4"&gt;
&lt;h4&gt;New typings for Ember.js itself&lt;/h4&gt;
&lt;p&gt;We’re actively working on type definitions for Ember which will give us actually-useful-and-correct type checking for Ember’s custom object model. Today, if you use &lt;code&gt;Ember.get&lt;/code&gt; or &lt;code&gt;Ember.set&lt;/code&gt;, you get &lt;em&gt;no&lt;/em&gt; help from the type system. When we finish, those will be type-checked by the compiler and will error if you try to assign the wrong values!&lt;/p&gt;
&lt;p&gt;Importantly, the typings we’re shipping will be backwards compatible with the existing Ember API, but will also include support for the &lt;a href="https://github.com/emberjs/rfcs/pull/176"&gt;RFC #176 JavaScript Modules API&lt;/a&gt;. TypeScript’s module definition system will let us support both in parallel, and we will. Backwards compatibility and &lt;em&gt;stability without stagnation&lt;/em&gt; are things we value for this addon just as much as the rest of the Ember.js ecosystem does.&lt;/p&gt;
&lt;p&gt;This effort, led by Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;), is ongoing in the &lt;a href="https://github.com/typed-ember/ember-typings"&gt;typed-ember/ember-typings&lt;/a&gt; repository. (If you’re wondering why we’re not just doing it in the DefinitelyTyped repository, see below.) We probably won’t be able to get to 100% of everything the Ember Object model does—Ember’s custom object model is &lt;em&gt;incredibly&lt;/em&gt; sophisticated, and TypeScript actually &lt;a href="https://github.com/Microsoft/TypeScript/issues/16699"&gt;still can’t&lt;/a&gt; &lt;em&gt;totally&lt;/em&gt; express it—but Derek already has most of it working. This will be a &lt;em&gt;huge&lt;/em&gt; step forward.&lt;/p&gt;
&lt;p&gt;To be clear, we’re not forking the way you get types. We’ll upstream all of this work to DefinitelyTyped as soon as we have them working, but the DefinitelyTyped repo is &lt;em&gt;huge&lt;/em&gt; and very busy; it’s not a great place to do this kind of substantial rework of existing types. And we really don’t need to have all the &lt;em&gt;other&lt;/em&gt; type definitions DefinitelyTyped supplies in our way as we’re working, either. Having a separate repo gives us a place we can work on types, try them out as a community, etc. before creating PRs on DefinitelyTyped and publishing them officially.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="addon-typings" class="level4"&gt;
&lt;h4&gt;Addon typings&lt;/h4&gt;
&lt;p&gt;We need to get type definitions in place for the addons in the ecosystem! That way when you’re using, say, &lt;a href="https://github.com/simplabs/ember-test-selectors"&gt;ember-test-selectors&lt;/a&gt;, you’ll get an error if you try to use the functions it provides incorrectly. Right now, every addon out there is missing types entirely, so everything gets treated as taking the useless &lt;code&gt;any&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;In a week or so, I’ll have a blog post with a fleshed-out &lt;a href="https://github.com/typed-ember/ember-cli-typescript/issues/48"&gt;quest issue&lt;/a&gt; for tackling it in detail, but here’s the short version: we’re going to try to get type definitions for all the top addons in the ecosystem so that it’s &lt;em&gt;easy&lt;/em&gt; to use TypeScript in your Ember.js app. That blog post and quest issue will explain how to write good typings, and also how to contribute them to a project which may or may not be interested in using TypeScript itself.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 08 Aug 2017 09:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-08-08:/2017/announcing-ember-cli-typescript-100.html</guid><category>typing-your-ember</category><category>typescript</category><category>emberjs</category></item><item><title>Typing Your Ember, Part 4</title><link>http://www.chriskrycho.com/2017/typing-your-ember-part-4.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-3"&gt;previous post&lt;/a&gt; in this series, I noted that one of the most effective current strategies for using TypeScript effectively in an Ember app is to push as much of your logic possible &lt;em&gt;out&lt;/em&gt; of the Ember layer and into plain-old-TypeScript. Unsurprisingly, people had some questions about how to do this, so here’s a brief example.&lt;/p&gt;
&lt;p&gt;As I suggested in that post, we now have a &lt;code&gt;lib&lt;/code&gt; directory in our app, and all new business logic for the app lives there instead of directly on e.g. an &lt;code&gt;Ember.Service&lt;/code&gt; instance. Our current directory structure looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app/
  adapters/
  components/
  config/
  controllers/
  helpers/
  initializers/
  instance-initializers
  lib/    &amp;lt;-- this is the one we care about
    billing/
    utilities/
      numeric.ts
  routes/
  serializers/
  services/
  templates/
  transforms
  app.ts
  router.ts
tests/
package.json
bower.json
// etc.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main thing to notice here is that &lt;code&gt;lib&lt;/code&gt; is just a directory in the app like any other, and its child directories likewise. This means that Ember &lt;abbr title="command line interface"&gt;CLI&lt;/abbr&gt; will resolve it just like normal, too—there’s no need to mess with the resolver or anything.&lt;/p&gt;
&lt;p&gt;Say we had a set of numeric utilities in that &lt;code&gt;numeric.ts&lt;/code&gt; file like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Make text out of numbers, like &amp;quot;1st&amp;quot;, &amp;quot;2nd&amp;quot;, &amp;quot;3rd&amp;quot;, etc.
export const withEnding = (val: number): string =&amp;gt; {
  // boring implementation details elided
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then using it in an Ember component might look like this (where &lt;code&gt;currentNumber&lt;/code&gt; is passed into the component):&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { get, set } from &amp;#39;@ember/object&amp;#39;;
import * as Num from &amp;#39;../lib/utilities/numeric&amp;#39;;

export default Component.extend({
  init() {
    const currentNumber = get(this, &amp;#39;currentNumber&amp;#39;);
    const displayNumber = Num.withEnding(currentNumber);
    set(this, &amp;#39;displayNumber&amp;#39;, displayNumber);
  },
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might wonder why we’d do this instead of using an &lt;code&gt;Ember.Service&lt;/code&gt;. In the above example, I could of course make &lt;code&gt;Num&lt;/code&gt; a service and inject it…&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { getProperties, set } from &amp;#39;@ember/object&amp;#39;;
import { inject } from &amp;#39;@ember/service&amp;#39;;

export default Component.extend({
  num: inject(),

  init() {
    const { currentNumber, num } =
      getProperties(this, &amp;#39;currentNumber&amp;#39;, &amp;#39;num&amp;#39;);

    const displayNumber = num.withEnding(currentNumber);
    set(this, &amp;#39;displayNumber&amp;#39;, displayNumber);
  },
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…but that doesn’t actually &lt;em&gt;gain&lt;/em&gt; me anything—the service here is just a way of exposing a function, after all—and it actually makes everything a bit more verbose. It also decreases the overall analyzability of this for things like tree-shaking: that module dependency is now something that Ember itself has to manage, instead of being statically analyzable at build time. Taking this approach also diminishes the reusability of any numeric helpers I put in there. If we couple them to an &lt;code&gt;Ember.Service&lt;/code&gt;, instead of using an ES6 module, they would stop being things we can easily reuse in non-Ember projects. Instead, by using modules, we leave ourselves the ability to easily extract those numeric helpers, and publish them for either internal or external consumption.&lt;/p&gt;
&lt;p&gt;Along those lines, we actually have a module to support &lt;abbr title="Block-Element-Modifier"&gt;&lt;a href="https://en.bem.info/methodology/quick-start/"&gt;BEM&lt;/a&gt;&lt;/abbr&gt; with Ember Components—and we plan to extract both the basic TypeScript library as well as a &lt;code&gt;BemComponent&lt;/code&gt; Ember-specific wrapper as open-source libraries in the near future. Besides the Ember addon, &lt;em&gt;anyone&lt;/em&gt; will be able to consume and use the underlying TypeScript library, whatever their framework or library of choice. Importantly, that includes us in our other codebases, which include lots of old jQuery and some new React, and might include some Glimmer.js in the future. Any or all of our utilities for these kinds of things become reusable if they’re just TypeScript.&lt;/p&gt;
&lt;p&gt;Pragmatically, it’s also just easier to do and get good help from TypeScript by going this way. It also means that unit-testing requires &lt;em&gt;no&lt;/em&gt; context from Ember whatsoever, which keeps those tests lighter and faster. Even though Ember’s unit tests are already super quick, when you have hundreds or thousands of unit tests, every little bit matters. It also, and probably even more importantly, means there are fewer places where you could mess things up when configuring tests—not that I have any experience messing up test configurations in Ember!&lt;/p&gt;
&lt;p&gt;One important thing to note is that this all works best with Ember—by far—when your &lt;code&gt;lib&lt;/code&gt; modules aren’t managing stateful objects, but rather defining data structures and functions which just transform those structures in some way. This approach is a great fit for us, because we’re increasingly writing a lot of our business and even &lt;abbr title="user interface"&gt;UI&lt;/abbr&gt; logic in terms of &lt;a href="http://www.chriskrycho.com/2016/what-is-functional-programming.html#pure-functions"&gt;pure functions&lt;/a&gt; which transform simple “record” types. That keeps each controller, route, component, or service doing relatively little work: they are responsible for getting and passing around data in the application, and for triggering actions—but they’re not responsible for &lt;em&gt;understanding&lt;/em&gt; or &lt;em&gt;manipulating&lt;/em&gt; that data. Meanwhile the module code doesn’t do &lt;em&gt;any&lt;/em&gt; stateful work; there’s no mutation—just boring, input-to-output functions.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; By contrast, if you’re dealing with stateful objects, you’re apt to end up running into places where you have lifecycle concerns, and that’s where Ember excels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In summary:&lt;/strong&gt; in this model, Ember handles all the lifecycle and view management, and is responsible for sending data in and out of the application. Plain old modules handle defining what the core internal data types are, and for manipulating, transforming, and creating data.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re wondering: we’re not using anything like Redux or Immutable.js yet, but both &lt;a href="https://github.com/ember-redux/ember-redux"&gt;ember-redux&lt;/a&gt; and &lt;a href="https://github.com/rtfeldman/seamless-immutable"&gt;seamless-immutable&lt;/a&gt; would be great fits for the way we’re building the app at this point, and it’s likely at least &lt;a href="https://github.com/ember-redux/ember-redux"&gt;ember-redux&lt;/a&gt; will become part of our stack in the relatively near future.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 31 Jul 2017 19:30:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-07-31:/2017/typing-your-ember-part-4.html</guid><category>emberjs</category><category>typescript</category><category>typing-your-ember</category></item><item><title>Typing Your Ember, Part 3</title><link>http://www.chriskrycho.com/2017/typing-your-ember-part-3.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-1"&gt;first&lt;/a&gt; of this series, I described how to set up a brand new Ember.js app to use TypeScript. In the &lt;a href="/2017/typing-your-ember-part-2"&gt;second&lt;/a&gt; part, walked through adding TypeScript to an existing Ember.js app. In this part, I’m going to talk about using TypeScript effectively in a modern Ember.js app.&lt;/p&gt;
&lt;section id="heavy-lifting-so-so-results" class="level2"&gt;
&lt;h2&gt;Heavy lifting, so-so results&lt;/h2&gt;
&lt;p&gt;Let’s get this out of the way up front: right now, using types in anything which extends &lt;code&gt;Ember.Object&lt;/code&gt; is going to be a lot of work for a relatively low reward. &lt;code&gt;Ember.Object&lt;/code&gt; laid the foundation for the modern JavaScript class system (and thus the TypeScript class system), but it has a huge downside: it’s string keys and referennces all the way down. This kind of thing is just normal Ember code—and note all the string keys:&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default Component.extend({
  someProperty: &amp;#39;with a string value&amp;#39;,
  someOther: computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty = get(this, &amp;#39;someProperty&amp;#39;);
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }),
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this comes out to—even with a lot of the very helpful changes made to TypeScript itself in the 2.x series to help support object models like this one—is a lot of work adding types inline, and having to be really, really careful that your types are &lt;em&gt;correct&lt;/em&gt;. If that property you’re &lt;code&gt;Ember.get&lt;/code&gt;-ing can ever be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, you’d better write the type as &lt;code&gt;string | void&lt;/code&gt; instead of just &lt;code&gt;string&lt;/code&gt;. For example: this code is written with the correct types:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default Component.extend({
  someProperty: &amp;#39;with a string value&amp;#39;,  // no type annotation
  someOther: computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty: string = get(this, &amp;#39;property&amp;#39;);
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }),
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note two important things about it, however:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;TypeScript does not (and, with the &lt;em&gt;current&lt;/em&gt; typings for Ember, cannot) figure out the type of &lt;code&gt;someProperty&lt;/code&gt; from this definition; &lt;code&gt;get&lt;/code&gt; currently just hands back &lt;code&gt;any&lt;/code&gt; as the type of these kinds of things. That type annotation is necessary for you to get any mileage out of TypeScript &lt;em&gt;at all&lt;/em&gt; in a computed property like this.&lt;/li&gt;
&lt;li&gt;If, anywhere in your code, you &lt;em&gt;set&lt;/em&gt; the value of &lt;code&gt;someProperty&lt;/code&gt;—including to &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, or to &lt;code&gt;{ some: 'object' }&lt;/code&gt;—this could fail.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, this second point means that TypeScript actually &lt;em&gt;can’t&lt;/em&gt; guarantee this the way we’d like. There’s hope coming for this in the future in several ways—more on that in a moment—but for now, I’ll summarize this by saying TypeScript is really helpful &lt;em&gt;within&lt;/em&gt; a function, once you’ve correctly defined the types you’re using. That means that you have to continue to be &lt;em&gt;very&lt;/em&gt; careful in what you’re doing in the context of any &lt;code&gt;Ember.Object&lt;/code&gt; instance, including all the Ember types which descend from &lt;code&gt;Object&lt;/code&gt;, and therefore also any types &lt;em&gt;you&lt;/em&gt; define which extend those in turn.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="future-niceties" class="level2"&gt;
&lt;h2&gt;Future niceties&lt;/h2&gt;
&lt;p&gt;In the future, we’ll be able to get away from a lot of these difficulties by way of two changes coming down the line: Ember embracing ES6 classes to replace its current custom object system, and embracing decorators as a way of replacing the current approach to computed properties. Let’s take those in turn.&lt;/p&gt;
&lt;section id="class-syntax" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;class&lt;/code&gt; syntax&lt;/h3&gt;
&lt;p&gt;When Ember was birthed in the early 2010s (first as “SproutCore 2” and then “Amber.js” and finally “Ember.js”), the JavaScript world was a &lt;em&gt;remarkably&lt;/em&gt; different place. The current pace of change year to year is nothing short of astounding for any language, but doubly so for one that sat languishing for so long. When Ember came around, something like today’s &lt;code&gt;class&lt;/code&gt; syntax was unimaginable, and so essentially every framework had its own class system of some sort. Over the past few years, with the proposal and standardization of the &lt;code&gt;class&lt;/code&gt; syntax as nice sugar for JavaScript’s prototypal inheritance, the need for a custom object and inheritance model has essentially gone away entirely. However, Ember doesn’t do breaking changes to its API just because; we as a community and the core team in particular have chosen to place a high priority on backwards compatibility. So any adoption of ES6 classes had to work in such a way that we got it &lt;em&gt;without&lt;/em&gt; making everyone rewrite their code from scratch.&lt;/p&gt;
&lt;p&gt;All of this impacts our story with TypeScript because, well, TypeScript for a long time couldn’t even begin to handle this kind of complexity (it’s a lot for a static type system to be able to express, given how &lt;em&gt;very&lt;/em&gt; dynamic the types here can be). As of TS 2.3, it can express &lt;em&gt;most&lt;/em&gt; of this object model, which is great… but it’s forever out of step with the rest of the JS/TS ecosystem, which is not so great. ES6 classes are first-class items in TypeScript and the support for getting types right within them is much, &lt;em&gt;much&lt;/em&gt; stronger than the support for the mixin/extension style object model Ember currently uses. So moving over to ES6 classes will make it much easier for TS to do the work of telling you &lt;em&gt;you’re doing it wrong with that class&lt;/em&gt;—and most importantly, it’ll be able to do that automatically, without needing the incredibly hairy type definition files that we’re still trying to write to get Ember’s current model represented. It Will Just Work. That means less maintenance work and fewer places for bugs to creep in.&lt;/p&gt;
&lt;p&gt;Gladly, we’re getting there! Already today, in the most recent versions of Ember, you can write this, and it will work:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;

export default class MyComponent extends Component {
  theAnswer = 42;
  andTheQuestionIs =
    &amp;quot;What is the meaning of life, the universe, and everything?&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I say “it will work,” I mean you can then turn around and write this in your &lt;code&gt;my-component.hbs&lt;/code&gt; and it’ll be exactly what you would expect from the old &lt;code&gt;Ember.Component.extend()&lt;/code&gt; approach:&lt;/p&gt;
&lt;pre class="hbs"&gt;&lt;code&gt;{{andTheQuestionIs}} {{the Answer}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is one serious limitation of that today: you can’t do that with a class you need to extend &lt;em&gt;further&lt;/em&gt;. So if, for example, you do like we do and customize the application route rinstance and then reuse that in a couple places, you’ll still have to use the old syntax:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Route from &amp;#39;@ember/route&amp;#39;;

export default Route.extend({
  // your customizations...
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But everywhere you consume that, you can use the new declaration:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import ApplicationRoute from &amp;#39;my-app/routes/application&amp;#39;;

export default class JustSomeRoute extends ApplicationRoute {
  model() {
    // etc.
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s more work afoot here, too, to make it so that these restrictions can go away entirely… but those changes will undoubtedly be covered in considerable detail on &lt;a href="http://www.emberjs.com/blog/"&gt;the official Ember blog&lt;/a&gt; when they roll out.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="decorators" class="level3"&gt;
&lt;h3&gt;Decorators&lt;/h3&gt;
&lt;p&gt;Now, that’s all well and good, but it doesn’t necessarily help with this scenario:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;is just a string&amp;#39;;

  someOtherProperty = computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty = get(this, &amp;#39;someProperty&amp;#39;);
    return someProperty + &amp;#39; and now I have appended to it&amp;#39;;
  });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re back in the same spot of having unreliable types there. And again: some really careful work writing type definitions to make sure that &lt;code&gt;computed&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; both play nicely together with the class definition would help somewhat, but… well, it’d be nice if the types could just be determined automatically by TypeScript. (Also, there’s an &lt;a href="https://github.com/Microsoft/TypeScript/issues/16699"&gt;open bug&lt;/a&gt; on the TypeScript repository for trying to deal with &lt;code&gt;computed&lt;/code&gt;; suffice it to say that computed as it currently stands is a sufficiently complicated thing that even with all the incredible type machinery TS 2.1, 2.2, and 2.3 have brought to bear on exactly these kinds of problems… it still can’t actually model &lt;code&gt;computed&lt;/code&gt; correctly.)&lt;/p&gt;
&lt;p&gt;For several years now, Rob Jackson has maintained [a small library] that let you write computed properties with decorators. Up till recently, those were incompatible with TypeScript, because they used to work in the context of object literals rather than classes—and TypeScript never supported that. However, as of about a month ago as I’m writing this, they’ve been updated and they &lt;em&gt;do&lt;/em&gt; work with ES6 classes. So, given the class syntax discussed above, you can now &lt;code&gt;ember install ember-decorators&lt;/code&gt; and then do this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed } from &amp;#39;ember-decorators/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;with a string value&amp;#39;;

  @computed(&amp;#39;someProperty&amp;#39;)
  someOther(someProperty: string) {
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we can provide a type on the parameter to &lt;code&gt;someOther&lt;/code&gt;, which at a minimum makes this enormously cleaner and less repetitive syntactically. More interestingly, however, we &lt;em&gt;should&lt;/em&gt; (though no one has done it just yet, to my knowledge) be able to write a type definition for &lt;code&gt;@computed&lt;/code&gt; such that TypeScript will already know that &lt;code&gt;someProperty&lt;/code&gt; here &lt;em&gt;is&lt;/em&gt; a string, because it’ll have the context of the class in which it’s operating. So that example will be even simpler:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed } from &amp;#39;ember-decorators/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;with a string value&amp;#39;;

  @computed(&amp;#39;someProperty&amp;#39;)
  someOther(someProperty) {
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in that imagined, wonderful future world, if we tried to do something that isn’t a valid string operation—say, we tried &lt;code&gt;someProperty / 3&lt;/code&gt;—TypeScript would complain to us, loudly.&lt;/p&gt;
&lt;p&gt;Although this is still a future plan, rather than a present reality, it’s not &lt;em&gt;that&lt;/em&gt; far off. We just need someone to write that type definition for the decorators, and we’ll be off to the races wherever we’re using the new ES6 class approach instead of the existing &lt;code&gt;Ember.Object&lt;/code&gt; approach. So: &lt;em&gt;soon&lt;/em&gt;. I don’t know how soon, but soon.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="current-ameliorations" class="level2"&gt;
&lt;h2&gt;Current ameliorations&lt;/h2&gt;
&lt;p&gt;In the meantime, of course, many of us are maintaining large codebases. I just checked, and our app (between the app itself and the tests) has around 850 files and 34,000 lines of code. Even as those new abilities land, we’re not going to be converting all of them all at once. And we want to get some real mileage out of TypeScript in the meantime. One of the best ways I’ve found to do this is to take a step back and think about the pieces of the puzzle which Ember is solving for you, and which it &lt;em&gt;isn’t&lt;/em&gt;. That is, Ember is really concerned with managing application state and lifecycle, and with rendering the UI. And it’s &lt;em&gt;fabulous&lt;/em&gt; about those things. What it’s not particularly concerned with (and what it shouldn’t be) is the particulars of how your business logic is implemented. And there’s no particular reason, &lt;em&gt;especially&lt;/em&gt; if most of that business logic is implemented in terms of a bunch of pure, straightforward, input-to-output functions that operate on well-defined data types, for all of your business logic to live in &lt;code&gt;Ember.Object&lt;/code&gt;-descended classes.&lt;/p&gt;
&lt;p&gt;Instead, we have increasingly chosen to write our business logic in bog-standard TypeScript files. These days, our app has a &lt;code&gt;lib&lt;/code&gt; directory in it, with packages like &lt;code&gt;utilities&lt;/code&gt; for commonly used tools… but also like &lt;code&gt;billing&lt;/code&gt;, where we implement &lt;em&gt;all&lt;/em&gt; of our client-side billing business logic. The display logic goes in the &lt;code&gt;Ember.Controller&lt;/code&gt; and &lt;code&gt;Ember.Component&lt;/code&gt; classes, and the routing and state management goes in the &lt;code&gt;Ember.Route&lt;/code&gt; and &lt;code&gt;Ember.Data&lt;/code&gt; pieces as you’d expect. But none of the business logic lives there. That means that we’re entirely free of the aforementioned constraints for the majority of the time dealing with that data. If we do a good job making sure the data is good at the boundaries—route loads, for example, and when we send it back to the server—then we can effectively treat everything else as just boring old (new?) TypeScript.&lt;/p&gt;
&lt;p&gt;So far we’ve only taken that approach with about a quarter of our app, but it’s all the latest pieces of our app, and it has been incredibly effective. Even once we’re able to take advantage of all those shiny new features, we’re going to keep leaning heavily on this approach, because it lets Ember do what Ember is best at, and keeps us from coupling our business logic to the application state management or view rendering details.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that’s the state of things in Ember with TypeScript today. Your best bet for getting real mileage out of TypeScript today is to use the new class syntax support and decorators wherever you can within Ember-specific code, and then to write as much of your business logic outside the Ember system as possible. Gladly, all of that points you right at the future (in the case of syntax) and just good practice (in the case of separating out your business logic). So: not too shabby overall. It’s working well for us, and I hope it does for you as well!&lt;/p&gt;
&lt;p&gt;Next time: how we got here with the &lt;code&gt;ember-cli-typescript&lt;/code&gt; compiler, and where we hope to go from here!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note that here and throughout, I’m using the &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md#addendum-1---table-of-module-names-and-exports-by-global"&gt;RFC #176 Module API&lt;/a&gt;, which you can use today via &lt;a href="https://github.com/ember-cli/babel-plugin-ember-modules-api-polyfill"&gt;this polyfill&lt;/a&gt;.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 28 Jul 2017 12:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-07-28:/2017/typing-your-ember-part-3.html</guid><category>emberjs</category><category>typescript</category><category>typing-your-ember</category></item><item><title>Typing Your Ember, Part 2</title><link>http://www.chriskrycho.com/2017/typing-your-ember-part-2.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-1"&gt;first part&lt;/a&gt; of this series, I described how to set up a brand new Ember.js app to use TypeScript. In this part, I’m going to talk about starting to use TypeScript in the context of an existing Ember.js app.&lt;/p&gt;
&lt;p&gt;This is, in many ways, even simpler than setting up an app for the first time, because you already have almost everything you need. The steps here are exactly what you’re used to if you’re used to using the Ember CLI ecosystem:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;code&gt;ember-cli-typescript&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start using TypeScript wherever you want in your app.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It really is that simple, for the most part. There are a couple qualifications, and a couple tips, though.&lt;/p&gt;
&lt;p&gt;Let’s start with &lt;strong&gt;qualifications&lt;/strong&gt;. There are open, unresolved &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/"&gt;issues&lt;/a&gt; about using &lt;code&gt;ember-cli-typescript&lt;/code&gt; in your app in certain contexts. For example: &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/8"&gt;using it with &lt;code&gt;ember-browserify&lt;/code&gt;&lt;/a&gt;. While everything will &lt;em&gt;build&lt;/em&gt; correctly in that case (even if the TypeScript compiler complains about being unable to resolve some things, the Ember CLI build pipeline will still work as expected), your editor integration won’t. There are a bunch of corners like this we’re still hammering out; those are the main things we need to get resolved before we can call this a “1.0.” We have the &lt;em&gt;main&lt;/em&gt; stuff working, but, well… there’s more to do.&lt;/p&gt;
&lt;p&gt;Along those same lines, you should take a close look at the &lt;a href="https://github.com/emberwatch/ember-cli-typescript#not-yet-supported"&gt;&lt;strong&gt;Not yet supported&lt;/strong&gt;&lt;/a&gt; section of the README. There are parts of Ember’s programming model which TypeScript certainly &lt;em&gt;can&lt;/em&gt; support, but which we haven’t done the lifting to get the type declaration file to help with yet. (Looking for a place to pitch in and already comfortable doing some heavy lifting with some of TypeScript’s &lt;a href="http://www.typescriptlang.org/docs/handbook/mixins.html"&gt;most advanced type features&lt;/a&gt;? We could use the help.)&lt;/p&gt;
&lt;p&gt;One other thing to be aware of is that your &lt;code&gt;tsconfig.json&lt;/code&gt; settings will affect what kind of resolution your editor gives you. If you have &lt;code&gt;allowJs&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;, your editors will resolve JS modules. Otherwise, they’ll &lt;em&gt;only&lt;/em&gt; resolve TS modules. This can be incredibly annoying at times. However, this isn’t something we’ve nailed down in terms of what the default should be yet. (You can &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/"&gt;come tell us&lt;/a&gt; on GitHub if you have thoughts or insights there!) And the fact that Microsoft has left this configurable is suggestive: different projects may have different preferences here.&lt;/p&gt;
&lt;p&gt;Now, for the &lt;strong&gt;tips&lt;/strong&gt;. Note that these are just a couple quick pointers; I’ll come back and talk about structuring your project and more sophisticated uses of TypeScript in the future.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don’t turn on &lt;code&gt;--strict&lt;/code&gt; or the corresponding individual flags on day 1. Unless you have an extremely unusual and disciplined Ember.js codebase, you’ll have an incredible set of errors to deal with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t set the the &lt;code&gt;noEmitOnError&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;, for much the same reason. Since the state of type declaration files for Ember is best described as &lt;em&gt;nascent&lt;/em&gt; at present, many of your files will have errors in them just from failed imports!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t try to convert everything at once. Just pick the next feature or bug you’re working on, and start with the files you’re touching for that bug. Rename it to &lt;code&gt;.ts&lt;/code&gt;, fix any major issues it flags up that you can—but stick as locally as possible. You’re apt to find a &lt;em&gt;lot&lt;/em&gt; of small bugs as you start migrating, and some of them are things which are apt to affect your whole system because they touch central data types. It’s okay. You can come back to those later. For today, you can just be explicit about the weirdnesses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As part of that: get comfortable—really, really comfortable—with &lt;a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types"&gt;union types&lt;/a&gt;. They’ll make it much easier to express the kind of code you’ve &lt;em&gt;actually&lt;/em&gt; written.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t worry about adding explicit types to &lt;em&gt;everything.&lt;/em&gt; In fact, depending on how comfortable you are already with typed languages, you should probably take a pretty different tack with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you’re just stepping into the world of typed programming languages, you might start adding types where they’re the &lt;em&gt;lowest risk&lt;/em&gt;: some place like your automated tests. That’ll help you start to see how to take advantage of them, while not impacting the way you write your app code until you have a better idea how best to employ the types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re already really comfortable with typed programming languages, you might employ types where they’re &lt;em&gt;most helpful:&lt;/em&gt; start with some types in the hairiest or trickiest spots of your app.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is plenty more I could say, but I think that’s a good start for now. I’ll have lots more to add in later posts about the details of how specifically to get the most mileage out of types within an Ember.js app today.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/2017/typing-your-ember-part-1"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Part 1 – Set your Ember.js project up to use TypeScript.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Also, I &lt;em&gt;strongly&lt;/em&gt; encourage you to write types in terms of unions of types rather than in terms of &lt;a href="http://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties"&gt;optional properties on types&lt;/a&gt;. That might be surprising; I’ll explain it in more detail in a future post.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 07 May 2017 22:00:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-05-07:/2017/typing-your-ember-part-2.html</guid><category>typescript</category><category>emberjs</category><category>typing-your-ember</category></item><item><title>Typing Your Ember, Part 1</title><link>http://www.chriskrycho.com/2017/typing-your-ember-part-1.html</link><description>&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In this first post in the series, we’re going to keep things simple and easy: we’re going to get an Ember.js app configured to use TypeScript. Later posts will cover some of the other details.&lt;/p&gt;
&lt;p&gt;Because of the lovely &lt;a href="https://ember-cli.com"&gt;Ember CLI&lt;/a&gt; ecosystem, this is a pretty straightforward process. I’m going to start from &lt;em&gt;zero&lt;/em&gt; so that even if you’ve never written an Ember app before, you can get this up and running by following these instructions. These instructions have also been tested and confirmed to work across platforms—you can do this equally on Windows, macOS, or Linux.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Make sure you have Ember’s prerequisites installed. Get &lt;a href="https://nodejs.org/en/"&gt;Node&lt;/a&gt; for your platform. Optionally (but highly recommended) install &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt; to manage your Node packages.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the Ember command lines tools globally:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;yarn global add ember-cli&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;npm install --global ember-cli&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an Ember app.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember new my-ts-app --yarn&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Using the &lt;code&gt;--yarn&lt;/code&gt; flag will make it so your app uses &lt;a href="https://yarnpkg.com"&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt; and creates a &lt;code&gt;yarn.lock&lt;/code&gt; file instead of using &lt;code&gt;npm&lt;/code&gt; when it installs its dependencies.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now move to the root of the newly created app: this is where we’ll do everything else in the post.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;cd my-ts-app&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the &lt;a href="https://emberobserver.com/addons/ember-cli-typescript"&gt;&lt;em&gt;ember-cli-typescript&lt;/em&gt; add-on&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate your first UI component.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember generate component some-input&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Rename the files it generated from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.ts&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app/components/some-input.js&lt;/code&gt; → &lt;code&gt;app/components/some-input.ts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests/integration/components/some-input-test.js&lt;/code&gt; → &lt;code&gt;tests/integration/components/some-input-test.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Eventually, we’ll make it so that you get TypeScript for all newly generated components when using &lt;em&gt;ember-cli-typescript&lt;/em&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add some content to the files:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;{{!-- some-input.hbs --}}
{{input value=theValue change=(mut theValue)}}
{{theValue}}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// some-input.ts
import Ember from &amp;#39;ember&amp;#39;;

export default Ember.Component.extend({
  theValue: &amp;#39;&amp;#39;,
});&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your &lt;code&gt;application.hbs&lt;/code&gt; file to remove the default &lt;code&gt;{{welcome}}&lt;/code&gt; template and replace it with &lt;code&gt;{{some-input}}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spin up the Ember application with Ember CLI’s development server:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember serve&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll likely note some warnings: the TypeScript compiler won’t be able to find some of the modules imported in your files. I’ll have more to say about this in a future post. For now, suffice it to say: don’t worry, Ember CLI is still resolving and compiling your modules just fine.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Load the application by going to &lt;code&gt;localhost:4200&lt;/code&gt; in your browser. You should see a blank white screen with an input in it. Type in it, and see the input rendered to the page. Simple enough, but it’s using a TypeScript file compiled along the way!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s it: we’re done setting up an Ember.js app to use TypeScript! In the next post, I’ll talk a bit about strategies for migrating an existing app to TypeScript—not just the mechanics of it, but also where and how to start actually integrating types into your code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/2017/typing-your-ember-part-2"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Part 2 – Adding TypeScript to an existing Ember.js project.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I strongly prefer to use &lt;code&gt;yarn&lt;/code&gt; over &lt;code&gt;npm&lt;/code&gt; because &lt;code&gt;yarn&lt;/code&gt; installs are predictable and repeatable, and if there’s one thing I don’t need to spend time on when developing our Ember.js app at Olo, it’s chasing problems with transitive dependencies that are different in the build server than in my local development environment. Yarn’s lockfiles mean what ends up built on the server is &lt;em&gt;exactly&lt;/em&gt; what ended up built on my machine.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;But if you’re curious, here’s a preview: we really need more &lt;a href="http://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"&gt;type definitions&lt;/a&gt; for the Ember ecosystem. I’ll be covering &lt;em&gt;how&lt;/em&gt; we build those in much more detail in a future installment.&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 05 May 2017 00:10:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2017-05-05:/2017/typing-your-ember-part-1.html</guid><category>typescript</category><category>emberjs</category><category>typing-your-ember</category></item><item><title>Testing Ember.js Mixins (and Helpers) With a Container</title><link>http://www.chriskrycho.com/2016/testing-emberjs-mixins-with-a-container.html</link><description>&lt;p&gt;&lt;i&gt;Updated to note that the same concerns apply to helpers. You can always see the full revision history of this item &lt;a href="https://github.com/chriskrycho/chriskrycho.com/commits/master/content/tech/ember-js-mixins-container.md"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Today I was working on an Ember.js &lt;a href="http://emberjs.com/api/classes/Ember.Mixin.html#content"&gt;mixin&lt;/a&gt; for the new mobile web application we’re shipping at Olo, and I ran into an interesting problem when trying to test it.&lt;/p&gt;
&lt;p&gt;When you’re testing mixins (or helpers), you’re generally not working with the normal Ember container.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In fact, the default test setup for mixins doesn’t have &lt;em&gt;any&lt;/em&gt; container in play. It just looks like this (assuming you ran &lt;code&gt;ember generate mixin bar&lt;/code&gt; in an app named &lt;code&gt;foo&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import BarMixin from &amp;#39;foo/mixins/bar&amp;#39;;
import { module, test } from &amp;#39;qunit&amp;#39;;

module(&amp;#39;Unit | Mixin | bar&amp;#39;);

// Replace this with your real tests.
test(&amp;#39;it works&amp;#39;, function(assert) {
  let BarObject = Ember.Object.extend(BarMixin);
  let subject = BarObject.create();
  assert.ok(subject);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It uses the basic Qunit &lt;code&gt;module&lt;/code&gt; setup, not the ember-qunit &lt;code&gt;moduleFor&lt;/code&gt; setup.&lt;/li&gt;
&lt;li&gt;It assumes you’re generating a new object instance for every single test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of those assumptions are fine, &lt;em&gt;if you don’t need to interact with the container&lt;/em&gt;. In many cases, that’s perfectly reasonable—I’d go so far as to say that most mixins and helpers probably &lt;em&gt;shouldn’t&lt;/em&gt; have any dependency on the container.&lt;/p&gt;
&lt;p&gt;In the specific case I was working on, however, the point of the mixin was to abstract some common behavior which included all the interactions with a &lt;a href="https://guides.emberjs.com/v2.6.0/applications/services/"&gt;service&lt;/a&gt;. This meant making sure the dependency injection worked in the unit test. This in turn meant dealing with the container. So let’s see what was involved in that. (You can generalize this approach to any place in the Ember ecosystem where you need to test something which doesn’t normally have the container set up.)&lt;/p&gt;
&lt;p&gt;We start by switching from the basic &lt;code&gt;qunit&lt;/code&gt; helpers to using the &lt;code&gt;ember-qunit&lt;/code&gt; helpers.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// Replace this...
import { module, test } from &amp;#39;qunit&amp;#39;;
module(&amp;#39;Unit | Mixin | bar&amp;#39;);

// with this:
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;
moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | Bar&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;moduleFor()&lt;/code&gt; helper has two things going for it—one of which we &lt;em&gt;need&lt;/em&gt;, and one of which isn’t strictly &lt;em&gt;necessary&lt;/em&gt;, but has some nice functionality. In any case, this will help when registering a container. Those two features:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It does support the use of the container. In fact, it’s declaring how this mixin relates to the container in the first argument to the helper function: &lt;code&gt;'mixin:foo'&lt;/code&gt; is the definition of the mixin for injection into the container.&lt;/li&gt;
&lt;li&gt;Any functions we define on the options argument we can pass to the &lt;code&gt;moduleFor()&lt;/code&gt; helper are available on the &lt;code&gt;this&lt;/code&gt; of the test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, in the first version of this, I had set up a common &lt;code&gt;Ember.Object&lt;/code&gt; which had mixed in the &lt;code&gt;BarMixin&lt;/code&gt;, so:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const BarObject = Ember.Object.extend(BarMixin);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, in each test, I created instances of this to use:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;test(&amp;#39;test some feature or another&amp;#39;, function(assert) {
  const subject = BarObject.create();
  // ...do stuff and test it with `assert.ok()`, etc.
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem was that any of those tests which required a container injection always failed. Assume we have a service named &lt;code&gt;quux&lt;/code&gt;, and that it’s injected into the mixin like this in &lt;code&gt;foo/app/mixins/bar.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;

export default Ember.Mixin.create({
  quux: Ember.inject.service()
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any test which actually tried to &lt;em&gt;use&lt;/em&gt; &lt;code&gt;quux&lt;/code&gt; would simply fail because of the missing container (even if you specified in the test setup that you needed the service):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test(&amp;#39;it uses quux somehow&amp;#39;, function(assert) {
  const subject = BarObject.create();
  const quux = subject.get(&amp;#39;quux&amp;#39;);  // throws Error
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifically, you will see &lt;code&gt;Attempting to lookup an injected property on an object without a container&lt;/code&gt; if you look in your console.&lt;/p&gt;
&lt;p&gt;Taking advantage of the two &lt;code&gt;ember-qunit&lt;/code&gt; features, though, we can handle all of this.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;

const { getOwner } = Ember;

moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | bar&amp;#39;, {
  // The `needs` property in the options argument tells the test
  // framework that it needs to go find and instantiate the `quux`
  // service. (Note that if `quux` depends on other injected
  // services, you have to specify that here as well.)
  needs: [&amp;#39;service:quux&amp;#39;],

  // Again: any object we create in this options object will be
  // available on the `this` of every `test` function below. Here,
  // we want to get a &amp;quot;test subject&amp;quot; which is attached to the
  // Ember container, so that the container is available to the
  // test subject itself for retrieving the dependencies injected
  // into it (and defined above in `needs`).
  subject() {
    BarObject = Ember.Object.extend(BarMixin);

    // This whole thing works because, since we&amp;#39;re in a
    // `moduleFor()`, `this` has the relevant method we need to
    // attach items to the container: `register()`.
    this.register(&amp;#39;test-container:bar-object&amp;#39;, BarObject);

    // `Ember.getOwner` is the public API for getting the
    // container to do this kind of lookup. You can use it in lots
    // of places, including but not limited to tests. Note that
    // that because of how the dependency injection works, what we
    // get back from the lookup is not `BarObject`, but an
    // instance of `BarObject`. That means that we don&amp;#39;t need to
    // do `BarObject.create()` when we use this below; Ember
    // already did that for us.
    return getOwner(this).lookup(&amp;#39;test-container:bar-object&amp;#39;);
  }
});

test(&amp;#39;the mixin+service does what it should&amp;#39;, function(assert) {
  // We start by running the subject function defined above. We
  // now have an instance of an `Ember.Object` which has
  // `BarMixin` applied.
  const subject = this.subject();

  // Now, because we used a test helper that made the container
  // available, declared the dependencies of the mixin in `needs`,
  // and registered the object we&amp;#39;re dealing with here, we don&amp;#39;t
  // get an error anymore.
  const quux = subject.get(&amp;#39;quux&amp;#39;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in summary:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Use the &lt;code&gt;ember-qunit&lt;/code&gt; helpers if you need the container.&lt;/li&gt;
&lt;li&gt;Define whatever dependencies you have in &lt;code&gt;needs&lt;/code&gt;, just as you would in any other test.&lt;/li&gt;
&lt;li&gt;Register the mixin-derived object (whether &lt;code&gt;Ember.Object&lt;/code&gt;, &lt;code&gt;Ember.Route&lt;/code&gt;, &lt;code&gt;Ember.Component&lt;/code&gt;, or whatever else) in a method on the options argument for &lt;code&gt;moduleFor()&lt;/code&gt;. Use that to get an instance of the object and you’re off to the races!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One final consideration: while in this case it made good sense to use this approach and make the service injection available for the test, there’s a reason that the tests generated by Ember CLI don’t use &lt;code&gt;moduleFor()&lt;/code&gt; by default. It’s a quiet but clear signal that you should reevaluate whether this &lt;em&gt;is&lt;/em&gt; in fact the correct approach.&lt;/p&gt;
&lt;p&gt;In general, mixins are best used for self-contained units of functionality. If you &lt;em&gt;need&lt;/em&gt; dependency injection for them, it may mean that you should think about structuring things in a different way. Can all the functionality live on the service itself? Can all of it live in the mixin instead of requiring a service? Can the service calls be delegated to whatever type is using the mixin?&lt;/p&gt;
&lt;p&gt;But if not, and you &lt;em&gt;do&lt;/em&gt; need a mixin which injects a service, now you know how to do it!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; The documentation around testing mixins is relatively weak, and in general the testing docs are the weak bits in the Ember guides right now.&lt;a href="#fn2" class="footnoteRef" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; After a conversation with &lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt; on the &lt;a href="https://ember-community-slackin.herokuapp.com"&gt;Ember Community Slack&lt;/a&gt;, though, I was able to get a handle on the issue, and here we are. Since it stumped me, I’m guessing I’m not the only one.&lt;/p&gt;
&lt;p&gt;When this happens, &lt;em&gt;write it up&lt;/em&gt;. I’ve been guilty of this too often in the past few months: learning something new that I couldn’t find anywhere online, and then leaving it stored in my own head. It doesn’t take a particularly long time to write a blog post like this, and if you’re stuck, chances are &lt;em&gt;very&lt;/em&gt; good someone else is too.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re not familiar with the “container”, this is where all the various dependencies are registered, and where Ember looks them up to inject them when you use methods like &lt;code&gt;Ember.inject.service()&lt;/code&gt;.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Something I intend to help address in the next week or two via a pull request, so if you’re my Ember.js documentation team friend and you’re reading this… it’s coming. 😉&lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Thu, 09 Jun 2016 20:35:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-06-09:/2016/testing-emberjs-mixins-with-a-container.html</guid><category>emberjs</category><category>javascript</category><category>software development</category></item><item><title>Ember.js: "Introducing Subteams"</title><link>http://www.chriskrycho.com/2016/emberjs-introducing-subteams.html</link><description>&lt;p&gt;In which one tech I really like (&lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt;) steals a great idea from another tech I really like (&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;).&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Tue, 24 May 2016 19:10:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2016-05-24:/2016/emberjs-introducing-subteams.html</guid><category>links</category><category>programming languages</category><category>emberjs</category><category>rust</category></item><item><title>Unsurprisingly, In Flux</title><link>http://www.chriskrycho.com/2015/unsurprisingly-in-flux.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;This started as a &lt;a href="https://alpha.app.net/chriskrycho/post/57102562"&gt;series of posts&lt;/a&gt; on App.net. I &lt;a href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html"&gt;resolved&lt;/a&gt; a while ago that if I was tempted to do that, I should just write a blog post instead. I failed at that resolution, but at a friend’s &lt;a href="https://alpha.app.net/jws/post/57108281"&gt;suggestion&lt;/a&gt;, am adapting it into a blog post anyway. You can see the posts that prompted it &lt;a href="https://alpha.app.net/keita/post/57096585"&gt;here&lt;/a&gt; and &lt;a href="https://alpha.app.net/jws/post/57096838"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone – React &amp;amp; Angular – Ember – Meteor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backbone and related library Underscore are really collections of common JS tools and patterns you can use to write apps, but they’re not &lt;em&gt;frameworks&lt;/em&gt;, per se. You’ll write all your own boilerplate there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React and Angular supply much &lt;em&gt;more&lt;/em&gt; of the functionality, but Angular is a “meta-framework” that aims to do &lt;em&gt;some&lt;/em&gt; boilerplate but let you construct your own custom app framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is very powerful, but it’s kind of like Git: wires are exposed; you have to understand a &lt;em&gt;lot&lt;/em&gt; about the internals to get it to do what you want. Its routing functionality is pretty limited out of the box, too—so much so that there’s a near-standard third-party router.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React, as I understand it, supplies a paradigm and associated tools oriented primarily at view state management, though with capabilities via extensions for routing, etc. These tools are &lt;em&gt;extremely&lt;/em&gt; powerful for performance in particular. It’s not a full framework, and the docs expressly note that you can &lt;em&gt;just&lt;/em&gt; use React for the view layer with other tools if you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, Angular and React do &lt;em&gt;different&lt;/em&gt; things from each other, but both do substantially more than Backbone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember is a full framework, strongly emphasizing shared conventions (with a lot of common developers from Rails). It’s perhaps less adaptable than React or Angular, but is much more full-featured; you have very little boilerplate to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meteor is like Ember, but does server-side Node as well as client-side stuff, with the goal being to minimize code duplication, sharing assets as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of all of those, Ember has easily (easily!) the best-explained roadmap, most articulate leadership, and best development path. They are also aggressively adopting the best features of other frameworks wherever it makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is currently in flux, as Google has announced Angular 2.0 will be basically a completely different framework; there will be &lt;em&gt;no&lt;/em&gt; direct migration path for Angular 1.x apps to Angular 2.0+. Total rewrite required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember uses a steady 6-week release schedule with very careful regression testing and semantic versioning, with clear deprecation notices and upgrade paths, and is therefore both rapidly iterating &lt;em&gt;and&lt;/em&gt; relatively stable for use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you just need a set of tools for enhance functionality on otherwise relatively static pages, Backbone+Underscore is a great combo. If you already have a bunch of things in place but want a dedicated view layer, React is good.&lt;a href="#fn1" class="footnoteRef" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re writing a new, full-on web &lt;em&gt;application&lt;/em&gt; (SPA, or organized in whatever other way), I think Ember is the very clear winner at this point. I have good confidence in their leadership and they’re firing on all cylinders.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Angular, &lt;a href="https://alpha.app.net/mikehoss"&gt;@mikehoss&lt;/a&gt; &lt;a href="https://alpha.app.net/mikehoss/post/57105656"&gt;posted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record they are doing that to make it more mobile-friendly. The Ang1 has abysmal performance on mobile. Besides a time machine, this maybe the best option. And Miško is a bit of a jerk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can’t speak to his comment about Miško (Miško Hevery, one of the leads on AngularJS), but I agree about Angular itself: the rewrite needs to happen. Angular 1.x is a mess—as are its docs. It’s just not a good time to be using 1.x for any new projects.&lt;/p&gt;
&lt;p&gt;I’ll add to these points that I’ve used Angular for the last 9 months on HolyBible.com development. As I noted: the documentation is pretty rough, and in a lot of cases you really do have to understand what the framework is doing and how before you can get it to do the things you want. This is, in one sense, exactly the &lt;em&gt;opposite&lt;/em&gt; of what I’m looking for in a framework—but it makes sense given Angular’s goal of being a meta-framework.&lt;/p&gt;
&lt;p&gt;Rather like Git, though, which was originally going to be infrastructure for version control systems which would have their own interface, but eventually just had a “good enough” interface that we’re all now stuck with, Angular is being used &lt;em&gt;as&lt;/em&gt; a framework, not just as a &lt;em&gt;meta-framework&lt;/em&gt;, and it’s unsurprisingly not great for that.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Take this for what it’s worth: not the final word (by a long stretch) on JavaScript frameworks, but rather the perspective of one guy who notably &lt;em&gt;hasn’t used all of the frameworks&lt;/em&gt;, but has spent some time looking at them. Moreover, I haven’t particularly edited this; it’s more a summary in the kind of short-form posts that I originally created than a detailed analysis. The only things I’ve done are expand some of the notes on Angular and React, and add the footnote on React.&lt;/i&gt;&lt;/p&gt;
&lt;div id="refs" class="references"&gt;

&lt;/div&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; don’t know a ton about React, but I do think a lot of what I do know about it is cool from a programming perspective. From a designer perspective, however, it’s a bit of a pain: React’s “JSX” domain-specific language is &lt;em&gt;much&lt;/em&gt; less friendly to developers than standard HTML, and therefore than either Ember or Angular, both of which implement their templating via HTML templating languages. There’s a substantil tradeoff there: React’s model is interesting not only academically but in practice because of the performance results it produces. It’s worth note, though, that others have recognized this and are adopting it to varying degrees; notably, Ember is incorporating the idea of minimizing changes to the DOM by keeping track of state and updating only differences, rather than refreshing the whole tree, in the new rendering engine (HTMLBars) they’re rolling out over the past several and future several releases.&lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 08 Apr 2015 16:05:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2015-04-08:/2015/unsurprisingly-in-flux.html</guid><category>software development</category><category>javascript</category><category>angularjs</category><category>emberjs</category><category>react</category></item></channel></rss>