<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - design</title><link>http://v4.chriskrycho.com/</link><description></description><lastBuildDate>Sun, 25 Aug 2019 12:10:00 -0400</lastBuildDate><item><title>Cronos</title><link>http://v4.chriskrycho.com/2019/cronos.html</link><description>&lt;p&gt;I’m not sure when I first stumbled on &lt;a href="https://www.myfonts.com/fonts/adobe/cronos/"&gt;Cronos&lt;/a&gt;, but it was a &lt;em&gt;long&lt;/em&gt; time ago at this point. I launched a version of this website using Cronos for titles back in 2012. I’ve experimented with a number of typefaces for the body text since then—including &lt;a href="https://www.myfonts.com/fonts/adobe/minion/"&gt;Minion&lt;/a&gt;, &lt;a href="https://software.sil.org/gentium/"&gt;Gentium&lt;/a&gt;, and finally &lt;a href="https://www.myfonts.com/fonts/linotype/sabon/"&gt;Sabon&lt;/a&gt;— but Cronos has never changed. Every time I’ve thought about moving away from it, I’ve been dissatisfied with everything else I’ve looked at using in its place. It makes for a &lt;em&gt;solid&lt;/em&gt; choice for body text, but is a &lt;em&gt;remarkable&lt;/em&gt; titling face.&lt;/p&gt;
&lt;p&gt;And yet no one seems to know about it. I have never seen it on another website, or in print. (The three body typefaces I’ve used I have seen &lt;em&gt;plenty&lt;/em&gt; of other places—online, in apps, and in print.) On the one hand, that’s kind of delightful: it gives my site a fairly distinctive identity. On the other hand, it’s a shame, because it’s such a lovely sans! It deserves a wider audience! I’ll gladly give up some of my site’s uniqueness to see this beautiful thing get more use.&lt;/p&gt;
&lt;p&gt;It has &lt;em&gt;just&lt;/em&gt; enough character to stand out from the wash of geometric and humanist sans that are in vogue these days, but it doesn’t call attention to itself or cross over into being &lt;em&gt;weird&lt;/em&gt;. (“Weird” isn’t bad, to be clear: it’s often very good! But Cronos isn’t weird.) It’s interesting, but only if you stop to look at it closely. It almost wants to be a serif: there are little curls and hooks—as on the &lt;em&gt;r&lt;/em&gt; or &lt;em&gt;m&lt;/em&gt; or &lt;em&gt;n&lt;/em&gt; ascenders, or at the caps of the &lt;em&gt;A&lt;/em&gt; and &lt;em&gt;N&lt;/em&gt; and &lt;em&gt;M&lt;/em&gt;. The &lt;em&gt;t&lt;/em&gt; has a little jag between its ascender and its crossbar. The descender of the &lt;em&gt;y&lt;/em&gt; is curved, just a little. End caps all swoop away, refusing to be totally straight. And yet when you take it all in on the page, none of those details are so bold that they actively draw your eye. They make it interesting, but never distract. It’s quirky and balanced and pairs perfectly with just about any serif you can throw at it (and many a sans, too). Go wild and pair with a monospace if you want! It somehow just &lt;em&gt;works&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.myfonts.com/fonts/adobe/cronos/"&gt;Go use it&lt;/a&gt;, people!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 25 Aug 2019 12:10:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2019-08-25:/2019/cronos.html</guid><category>typography</category><category>design</category></item><item><title>The Apple Magic Keyboard</title><link>http://v4.chriskrycho.com/2018/the-apple-magic-keyboard.html</link><description>&lt;p&gt;&lt;i&gt;Assumed audience: nerds who care about keyboards, most of whom will probably think I’m crazy for my views in this post.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I was sitting at my kitchen counter this evening, doing a mishmash of things—from writing a little Rust, to sending some text messages to my family, to leaving a note on a programming forum. The whole time, I’ve just had this quiet sense of deep pleasure about the typing. I was slightly confused about why I was enjoying the feel of the &lt;em&gt;typing&lt;/em&gt; specifically… until I realized what exactly I was typing on.&lt;/p&gt;
&lt;p&gt;I’m sitting in front of a 2015 MacBook Pro… but I’m not typing on that keyboard. I’m typing on the &lt;a href="https://www.apple.com/shop/product/MLA22LL/A/magic-keyboard-us-english"&gt;Apple Magic Keyboard&lt;/a&gt; instead, which I brought upstairs from its normal perch on my desk and started using &lt;em&gt;everywhere&lt;/em&gt;.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This keyboard is &lt;em&gt;perfect&lt;/em&gt; for me. It’s not what other people love, I know—people who prefer “mechanical keyboards” find it far too shallow. But there is something about the feeling of typing on this particular keyboard that I simply love. For me, it’s a perfect bit of industrial design, because it simultaneously &lt;i&gt;looks good&lt;/i&gt; and &lt;i&gt;works exactly the way I want it to&lt;/i&gt;, right down to the feeling of every keystroke.&lt;/p&gt;
&lt;p&gt;Mechanical keyboard lovers: you can keep your Cherry Blues. I’ll just stockpile Apple Magic Keyboards and be happy.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;P.S. Apple should totally just figure out how to put &lt;em&gt;exactly&lt;/em&gt; this keyboard in their next-generation MacBook Pros. They won’t. But they should.&lt;/p&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;What prompted it? I ordered a stand for it for all the times I’m not at my desk with its 5k monitor. And then just decided it was worth doing this way &lt;em&gt;all&lt;/em&gt; the time.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 11 Nov 2018 21:20:00 -0500</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2018-11-11:/2018/the-apple-magic-keyboard.html</guid><category>design</category><category>hardware</category></item><item><title>Is Agile the Enemy of Good Design?</title><link>http://v4.chriskrycho.com/2018/is-agile-the-enemy-of-good-design.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;In line with my recently stated &lt;a href="https://v4.chriskrycho.com/2018/continuing-to-reflect-on-my-internet-presence.html" title="Continuing to Reflect on My Internet Presence"&gt;desire&lt;/a&gt; to share out things I’m reading:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I just ran into a really excellent piece by John Cutler (who is also new to me), &lt;a href="https://hackernoon.com/is-agile-the-enemy-of-good-design-14a35806cde7"&gt;Is Agile the Enemy (of Good Design)?&lt;/a&gt;. The whole thing is worth your time, but a couple bits in particular stood out to me in light of some ongoing conversations &lt;a href="https://mobile.twitter.com/bmakuh"&gt;Ben Makuh&lt;/a&gt; about wisdom and folly in startup culture.&lt;/p&gt;
&lt;p&gt;In particular, these two bits from other designers Cutler cites sum up a &lt;em&gt;huge&lt;/em&gt; amount of what’s wrong with a lot of what passes for “Agile” and indeed for “startup culture”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The stuff you’re talking about rarely happens. It is all about “ship, ship, ship”. We don’t pivot. We don’t refine. The product owner just wants to mark it done in Jira. The MVPs are an excuse to get crappy stuff out the door. I guarantee that if I am methodical with my prototype testing, I can come up with something better because I will expose it to users. Not AS great as doing it the perfect Agile way, but better than nothing. I mean I struggle even to do usability testing. So you know…yes in theory all that is good, but it doesn’t happen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The enemy of both actual agilistas and the UX/design community in 2018 is, as John points out, short-term, output-centric thinking driven by a focus on short-term financial results, and all the cultural ramifications of this mindset.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;These things are &lt;em&gt;antithetical&lt;/em&gt; to the original ideas of the &lt;a href="http://agilemanifesto.org"&gt;Manifesto for Agile Software Development&lt;/a&gt;. But they’re also, well… pretty common. As Cutler puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…Agile — like many other things in cut-throat business — is often no match for the universal threats of output fetishism, success theater, and cutting corners. Trust me… these predated Agile.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this is some hot fire here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So where does this leave us? Designers have a right to be concerned. At least with waterfall no one prematurely yells “ship it” in the middle of the project. Designers have time to work instead of trying to jump on and off the sprint conveyor belt. And because the “thing” is built in a big batch, they have time to tackle the design problem holistically right from the beginning. “Good” waterfall beats abused Agile any day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He’s not wrong. &lt;a href="https://hackernoon.com/is-agile-the-enemy-of-good-design-14a35806cde7"&gt;You should read the whole thing.&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 29 Jul 2018 16:15:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2018-07-29:/2018/is-agile-the-enemy-of-good-design.html</guid><category>design</category><category>agile</category><category>software development</category><category>business</category></item><item><title>Write! app review</title><link>http://v4.chriskrycho.com/2017/write-app-review.html</link><description>&lt;p&gt;As I’ve noted in the past, I’m always &lt;a href="http://v4.chriskrycho.com/2016/ulysses-byword-and-just-right.html"&gt;on the lookout&lt;/a&gt; for top-notch writing environments. I was recently contacted by the team behind &lt;a href="https://writeapp.co"&gt;Write!&lt;/a&gt; and asked if I would take a look at and review their app, and I was happy to obliged. I tested the app out fairly thoroughly by doing what I normally do with my writing apps: putting together a blog post or the like. I’ve written this review from start to finish in it, across my two Mac machines. I promised the authors an unbiased review, so here we go!&lt;/p&gt;
&lt;section id="overview" class="level2"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Write!&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; describes itself as a distraction-free text editor. It enters the market in an interesting way: the Mac offerings here are numerous, varied, and excellent. Offerings on Windows are fewer and further between, and in my experience of much lower quality. Distraction-free text editors outside the world of &lt;em&gt;programming&lt;/em&gt; text editors barely exist at all on Linux, as far as I can tell.&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Write! is cross-platform, targeting all three of these. And that, as we’ll see, &lt;em&gt;is&lt;/em&gt; the story of this particular app—for good and for ill.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-good" class="level2"&gt;
&lt;h2&gt;The Good&lt;/h2&gt;
&lt;p&gt;First, the good: the app seems to perform relatively well. Text entry, even on a fairly large document, is smooth and quick. (I imported the text of &lt;a href="http://v4.chriskrycho.com/2016/realism-and-antirealism.html"&gt;this ~7200-word paper&lt;/a&gt; to test it and it didn’t stutter a bit.) Especially given the time I’m going to spend on the not-so-good below, I want to take a moment to applaud the developers for getting that right. It’s one of the most important aspects of an app like this, and any number of apps I’ve used just fall down on large documents. Everything I’ve seen here makes it seem like Write! would handle much larger documents even than that paper with aplomb.&lt;/p&gt;
&lt;p&gt;The app’s main writing area looks fairly nice, and the distraction-free/full-screen mode gets out of the way readily enough. The cloud sync that comes with the app is quick and seems reliable. I’ve worked on this document across the two Macs I use, with no sync issues whatsoever. The writing area also has a (toggleable) overview of the document on the right, &lt;em&gt;a la&lt;/em&gt; Sublime Text. To the left is a toggleable outline view, which lets you drill down into the structure of your document if you have multiple heading levels. And within the writing area itself, you can expand and collapse sections demarcated by headings.&lt;/p&gt;
&lt;p&gt;In general, the experience of writing in the app is &lt;em&gt;nice&lt;/em&gt;. Not &lt;em&gt;amazing&lt;/em&gt;, but genuinely nice.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-just-okay" class="level2"&gt;
&lt;h2&gt;The Just Okay&lt;/h2&gt;
&lt;p&gt;There’s a bit of a delay before any open tabs are hidden in that fullscreen mode, but it’s otherwise fairly typical of most “distraction-free” writing environments in that regard. The colors chosen for the light and dark writing themes are fine, but not great. Much the same is true of the typography: it’s relatively pleasant, if bland. There are a number of built-in themes, but no apparent way to customize them to be more to your liking.&lt;/p&gt;
&lt;p&gt;The app also features built-in autocomplete—but I’m not really sure who the target audience is for auto-complete in this kind of environment. It’s not &lt;em&gt;bad&lt;/em&gt;, per se, to have it, but it doesn’t add a lot of value for &lt;em&gt;writing&lt;/em&gt; (as opposed to, say, programming), and I turned it off fairly quickly in the process of writing this review.&lt;/p&gt;
&lt;section id="publishing" class="level3"&gt;
&lt;h3&gt;Publishing&lt;/h3&gt;
&lt;p&gt;The app includes some “publishing” tools. Currently it supports writing to either Write’s own site, or to Medium. Medium publishing is nice—it’s certainly the hip tool &lt;em&gt;du jour&lt;/em&gt;—but you’re out of luck if you use WordPress, much less something like Ghost.&lt;a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Publishing to Write! itself seems to be mostly a way of letting people see in-progress drafts. The links aren’t particularly friendly, and while they’d be easy enough to share to Facebook or Twitter or the like, they have serious downsides over any of the free blogging options out there for anything other than getting some early feedback—there’s no organizational or navigational structure available, and for that matter nothing that even ties it to your name! At a minimum, Write! should clarify what this is for.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="business-model" class="level3"&gt;
&lt;h3&gt;Business model&lt;/h3&gt;
&lt;p&gt;The business model here is a curious mix: they’re selling the app at $19.95 (USD), with a year included of their custom sync solution. That sync solution is one of the things they advertise most heavily, and while I can attest that it works well, adding another, bespoke sync solution to my life is &lt;em&gt;not&lt;/em&gt; on my list of things I’d like to do. It’s particularly an issue from where I stand because it doesn’t actually get me any benefits over a syncing solution using Dropbox or iCloud, both of which I’ve used extensively with other writing apps in the last few years, with no issues.&lt;/p&gt;
&lt;p&gt;Add onto that the fact that the sync and future updates become an annual purchase—&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting one year after purchase, Cloud access and maintenance updates are $4.95/yr.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;—and any of the myriad other editors look much better: they all just use a sync engine I &lt;em&gt;already&lt;/em&gt; use and like, and they &lt;em&gt;don’t&lt;/em&gt; have annual fees for a service I don’t care about.&lt;/p&gt;
&lt;p&gt;That goes double when you consider that I’ll often do different phases of drafting a given post in different editors, depending on the kind of content and what I’m doing with it. For example, I often use &lt;a href="https://caret.io"&gt;Caret&lt;/a&gt; for drafting technical blog posts, but at times I’ll switch over to using &lt;a href="https://www.sublimetext.com"&gt;Sublime Text&lt;/a&gt;, &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt;, or &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt; for working on the details of a given code snippet. If I’m using Write’s custom sync solution, my documents don’t exist in a normal folder on my machine, so they aren’t available for that kind of easy switching and editing. Double that &lt;em&gt;again&lt;/em&gt; because it also means I don’t have access to the content on my iPad—where I often use &lt;a href="https://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt;, &lt;a href="http://omz-software.com/editorial/"&gt;Editorial&lt;/a&gt;, &lt;a href="http://1writerapp.com"&gt;1Writer&lt;/a&gt;, or &lt;a href="https://bywordapp.com"&gt;Byword&lt;/a&gt; to work on posts when I’m away from my Mac. There are no upsides for &lt;em&gt;me&lt;/em&gt;, as far as I can tell, to using their sync system.&lt;/p&gt;
&lt;p&gt;I put this in the “just okay” section, however, because I can imagine that it &lt;em&gt;might&lt;/em&gt; be nice for someone who’s not already invested in an existing sync solution. Whether or not there are enough of those people out there to support the business model—I suspect not—is a separate question to whether it’s good or bad for users in a direct sense. Again: the custom sync system works well; I just don’t know whether it’s necessary (or worth the development time that had to be spent on it).&lt;/p&gt;
&lt;p&gt;As for the business model on the whole: I’m not at all opposed to paying for good apps on an ongoing basis. To the contrary, I actually &lt;em&gt;embrace&lt;/em&gt; it: as a software developer myself, I recognize that there are few (if any) other sustainable business models. However, the application needs to be pretty amazing to get me to buy it in the first place, still less to justify a recurring purchase.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-bad" class="level2"&gt;
&lt;h2&gt;The Bad&lt;/h2&gt;
&lt;p&gt;Sad to say, from my perspective—to be clear, as a long-time Mac user with &lt;a href="http://v4.chriskrycho.com/2016/ulysses-byword-and-just-right.html"&gt;very high standards for my writing tools&lt;/a&gt;—this isn’t an amazing app. In fact, &lt;em&gt;on macOS&lt;/em&gt;, it’s actually a bad app in many ways.&lt;/p&gt;
&lt;section id="non-native-ui" class="level3"&gt;
&lt;h3&gt;Non-native UI&lt;/h3&gt;
&lt;p&gt;First, Write’s UI looks and behaves like a Windows app. It’s built on &lt;a href="https://www.qt.io"&gt;Qt&lt;/a&gt;, which does support native(-looking) widgets, but the developers chose not to use them – I assume in the interest of speed of development. If you’re on Windows, that’s fine. But this app will never look remotely native on macOS,&lt;a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; and given the plethora of other really high quality writing apps on macOS—some of them with their own publication options!—there’s just no reason why you would pick this over one of those at that most basic level.&lt;/p&gt;
&lt;p&gt;Two examples should illustrate how painfully non-native this app is visually. First, note the window action buttons in the upper right:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/write-app-review/draft.png" alt="not native windows" /&gt;&lt;figcaption&gt;not native windows&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These are Windows window action buttons; the normal Mac action buttons simply don’t exist! Similarly, there’s a slide-out menu that appears when you tap the hamburger in the top left:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/write-app-review/slide-out-menu.png" alt="slide out menu" /&gt;&lt;figcaption&gt;slide out menu&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is a reasonably nice, though not totally native-feeling, way of tackling the menu problem… on Windows. On Mac, it’s just duplicating the functionality of the normal menubar. And when I say duplicating, I mean it exactly: those menus are the same as the ones the app puts in the real menubar; there’s no reason for them to appear within the body of the app, other than that the app isn’t designed to work without them.&lt;/p&gt;
&lt;p&gt;Right-click behavior is strange: instead of the normal Mac (or even Windows!) menu, they’ve supplied their own, and it’s actually its own little modal window, not a menu at all:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/write-app-review/right-click-modal.png" title="right click modal" alt="right-click modal window" /&gt;&lt;figcaption&gt;right-click modal window&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I definitely see the utility of the little modal, but most other apps I’ve seen with similar approaches do it on highlighting some text. That way they can leave the normal right-click menu in place, which helps keep the user comfortable in their normal workflows. That’s going to be particularly annoying if you happen to make heavy use of macOS’s services menu—I don’t use it often, but when I want it, I &lt;em&gt;want&lt;/em&gt; it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="keyboard-shortcuts" class="level3"&gt;
&lt;h3&gt;Keyboard shortcuts&lt;/h3&gt;
&lt;p&gt;Similarly, a number of standard keyboard shortcuts don’t work the same way, or don’t work at all, in Write! as they do in native Mac apps. Navigation controls aren’t quite right: &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;→&lt;/kbd&gt; jumps to the start of the next word instead of the end of the current word; &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;←&lt;/kbd&gt; doesn’t skip over punctuation; both stop on e.g. apostrophes in Write! (they skip over them natively). Other common shortcuts are bound to the wrong things: &lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;-&lt;/kbd&gt;, for example, increases heading size instead of inserting an em dash. &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;Delete&lt;/kbd&gt; doesn’t do anything; neither do &lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;Space&lt;/kbd&gt;, (normally used for bringing up the special-character selector) or my beloved &lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt; (“kill to end of line”) or &lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;T&lt;/kbd&gt; ("transpose characters around cursor) combos.&lt;a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; I imagine the list is longer; that’s just what I noticed in the course of writing this review!&lt;/p&gt;
&lt;p&gt;Most egregiously, Write! steals the keyboard shortcut &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;`&lt;/kbd&gt;, normally used to switch between windows on macOS, to focus itself. Failing to implement and indeed overriding text input commands is one (very bad) thing; this is another kind of failure entirely. Apps should &lt;em&gt;never&lt;/em&gt; override core system behavior with their shortcuts! The fact that you can customize them doesn’t make this better; and the one time I &lt;em&gt;tried&lt;/em&gt; to customize it (to turn off stealing the switch-window shortcut) it ended up overriding the &lt;kbd&gt;A&lt;/kbd&gt; key’s behavior to create new documents instead of to, well, enter the letter “a”.&lt;/p&gt;
&lt;p&gt;A lot of apps get some of those more obscure ones wrong, sadly, but proper use of &lt;a href="https://developer.apple.com/documentation/coretext"&gt;Core Text&lt;/a&gt; is a &lt;em&gt;must&lt;/em&gt; for a native app in my book—and missing those super common ones is a big no-no. I simply won’t use an app long term that doesn’t do that, because I find the mismatch between the rest of the OS (and my muscle memory!) and what the apps do too frustrating.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="markdown-support" class="level3"&gt;
&lt;h3&gt;Markdown support&lt;/h3&gt;
&lt;p&gt;The app claims Markdown support, and it &lt;em&gt;sort of&lt;/em&gt; has it. But the goal is clearly to have a rich-text editing experience which can translate Markdown into whatever the underlying format is on the fly, and then export it back out when desired—&lt;em&gt;not&lt;/em&gt; to be a Markdown writing application. You can see direct evidence that this is their approach by writing in Markdown and e.g. creating italics with * characters. When you view the exported Markdown, it’ll be using _ characters instead. Other little things flag it up equally: Markdown items don’t get converted to their rich text implementations unless you add a space or some punctuation after typing them; if you go back and wrap words in link syntax, for example, or try to make it bold with a pair of *s, it won’t be converted at all. The export still works fine in that case,&lt;a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; but it certainly doesn’t come off well for the writing experience in the app, inconsistent as it is.&lt;/p&gt;
&lt;p&gt;It also doesn’t support Markdown itself fully or properly. Inline backtick characters (`) don’t generate inline code snippets. Instead, they generate standalone code blocks, as if using the usual four-space-indent or triple-backtick markers for code blocks in the actual Markdown spec and as supported in other apps. Nor can I find a way to insert hrules/divisions with triple-stars or triple-dashes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-nits" class="level3"&gt;
&lt;h3&gt;Other nits&lt;/h3&gt;
&lt;p&gt;There are a few other small but significant problems as well. One is related to the business model: you actually have to sign in to start using the app. Granted all my positive comments about subscriptions above, it’s still the case that needing to sign in to a &lt;em&gt;writing&lt;/em&gt; app (especially just to use the app for local documents!) is a non-starter for me. As with so many of the other negatives I noted, this is a compromise that I don’t need to make, because the other alternatives don’t force it on me.&lt;/p&gt;
&lt;p&gt;There are also a bunch of basically rough edges. Pasting with &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;V&lt;/kbd&gt; does indeed paste the text… and scrolls you to the top of the current document every time. A number of times, the selection of a given option failed: it simply wouldn’t stick. Other times, especially when selecting the default text theme, cursor selection seemed broken. I’m not sure whether those are problems with the Qt engine, the implementation, or some of both, but again: not a good look, especially in a crowded market. Right-clicking, beyond the problems mentioned above, also just wouldn’t work consistently. Sometimes I would right-click and the menu would close immediately so you couldn’t take any actions in it at all—probably a result of using a modal instead of a normal menu there. Regardless of the reason, it was frustrating.&lt;/p&gt;
&lt;p&gt;Last but not least, the app is unsigned, which means that it literally won’t open by default on macOS as of a few versions back. Users can certainly get around that, but they shouldn’t &lt;em&gt;have&lt;/em&gt; to: there’s no excuse for not signing a paid app for macOS (or Windows! But I’m not sure what its status is there) in 2017.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is an interesting approach for an editor. Trying to build a truly cross-platform app, and especially one that isn’t using web technologies like &lt;a href="https://electron.atom.io"&gt;Electron&lt;/a&gt;, is an admirable goal—in fact, it’s one that I may dare to tackle myself at some point. Cross-platform UI is also a very hard problem, and unfortunately this app makes clear just how difficult it is by falling down so often on really important details. In reality, the only way to do it well is to write all your core business logic in a way you can share and then supply actually-native user interfaces. Anything else will inevitably feel out of place at best.&lt;/p&gt;
&lt;p&gt;As a result, Write! is deeply compromised as a Mac app, to the extent that I simply cannot recommend it for Mac users. If you’re on a Mac, you should look instead at &lt;a href="https://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt;, &lt;a href="https://bywordapp.com"&gt;Byword&lt;/a&gt;, and &lt;a href="https://caret.io"&gt;Caret&lt;/a&gt;. All of them feel much more native, and though they have different strengths and weaknesses, they’re all native (or mostly-very-effectively native-acting, in Caret’s case) apps. That doesn’t mean Write! is &lt;em&gt;bad&lt;/em&gt;; it just means it’s not worth your time (a) if you’re on a Mac or (b) if you really care about standard Markdown behaviors.&lt;/p&gt;
&lt;p&gt;As noted, though, the developers got some important parts of this &lt;em&gt;very&lt;/em&gt; right: the app performs well, it looks decent on Windows, and their sync engine seems incredibly solid. Accordingly, if you’re on Windows, and don’t already have a particular commitment to Markdown proper, I might even cautiously recommend it—as a replacement for something like the old &lt;a href="https://www.microsoft.com/en-us/download/details.aspx?id=8621"&gt;LiveWriter&lt;/a&gt; app, for example. The biggest hesitation I’d have there is the business model—and, as noted above, I’m not opposed in principle to subscription models for good apps; but I’m not really sure what the value proposition here is.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;Yes, the app is named “Write!” – not “Write”. It’s not my favorite, not least because it means you have to type an exclamation point every time you write (!) it.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;There are many reasons for that, including things to do with many Linux users’ antipathy toward paid or non-open software, which makes it very difficult for not only developers but especially &lt;em&gt;designers&lt;/em&gt; to make a living. Never mind the incredibly small size of the audience by comparison.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3" role="doc-endnote"&gt;&lt;p&gt;And who knows if Medium will still be around in five years? But that’s for another post another time.&lt;a href="#fnref3" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4" role="doc-endnote"&gt;&lt;p&gt;Or Linux, but then what exactly &lt;em&gt;is&lt;/em&gt; native on Linux anyway? 😏 More seriously, this will look out of place on &lt;em&gt;any&lt;/em&gt; Linux desktop environment.&lt;a href="#fnref4" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5" role="doc-endnote"&gt;&lt;p&gt;These latter ones are sadly too often the case for cross-platform tech; I’ve filed issues on &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt; and &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt; in the past that way.&lt;a href="#fnref5" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6" role="doc-endnote"&gt;&lt;p&gt;I’ll actually give Write! one point over Ulysses here: Ulysses does some similar conversions under the hood to make the writing experience seem snazzier, and things which don’t get turned into their custom “text objects” can end up exported &lt;em&gt;very&lt;/em&gt; strangely.&lt;a href="#fnref6" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 26 Jun 2017 21:15:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2017-06-26:/2017/write-app-review.html</guid><category>app reviews</category><category>writing</category><category>design</category><category>macOS</category><category>Windows</category></item><item><title>Run With Me!</title><link>http://v4.chriskrycho.com/2016/run-with-me.html</link><description>&lt;p&gt;I may have gone mad with power or something, but I launched another podcast today! Crazy, I know.&lt;/p&gt;
&lt;p&gt;It’s both more and less crazy than it might sound, though. More, because of what the podcast is, and less, because of what the podcast is. So what is it?&lt;/p&gt;
&lt;p&gt;&lt;a href="//runwith.chriskrycho.com"&gt;&lt;em&gt;Run With Me&lt;/em&gt;&lt;/a&gt; is a microcast, with 3–5-minute long episodes &lt;em&gt;about&lt;/em&gt; running, recorded &lt;em&gt;while&lt;/em&gt; running.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/runwith/cover-web.jpg" title="_Run With Me_ cover art" alt="Run With Me" /&gt;&lt;figcaption&gt;&lt;em&gt;Run With Me&lt;/em&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I allow myself an absolute maximum of ten minutes to edit and publish the episodes. (So far, I’ve never needed more than about &lt;em&gt;three&lt;/em&gt; minutes.) So, for anyone worried that I’m unnecessarily or unwisely adding something more to my already-full plate: don’t be. Apart from spending some of my relaxation time this weekend building the site, the only time I’ll spend on this will be time I would already be spending running or cooling down after a run.&lt;/p&gt;
&lt;p&gt;So far (two episodes in!) it’s a ton of fun. I’ve enjoyed the process of recording it, and it’s nice to be able to talk about running confident that whoever listens is actually interested. (As I explain further on the show, that interest in not boring my audience is part of why I’m doing this, rather than just talking to people I know.)&lt;/p&gt;
&lt;p&gt;If you have any interest in running, and especially if you like listening to podcasts while you run, I think you’ll enjoy this. I’d love it if you subscribed!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://itunes.apple.com/us/podcast/run-with-me/id1102273878?mt=2"&gt;&lt;i class="fa fa-fw fa-music"&gt;&lt;/i&gt; iTunes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://overcast.fm/p418939-N58r18"&gt;&lt;i class="fa fa-fw fa-play-circle"&gt;&lt;/i&gt; Overcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pca.st/5toh"&gt;&lt;i class="fa fa-fw fa-play-circle-o"&gt;&lt;/i&gt; PocketCasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://runwith.chriskrycho.com/feed.xml"&gt;&lt;i class="fa fa-fw fa-rss"&gt;&lt;/i&gt; Old-fashioned RSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;A few comments on the podcast from a form/genre angle, and a few from a technical angel:&lt;/p&gt;
&lt;p&gt;You can think of &lt;a href="//www.manton.org/2016/01/new-podcast-timetable.html"&gt;“microcasts”&lt;/a&gt; as being not terribly dissimilar from a &lt;a href="//v4.chriskrycho.com/micro/"&gt;microblog post&lt;/a&gt; in its own way. I’m happily stealing the idea of a microcast from &lt;a href="//www.manton.org"&gt;Manton Reece&lt;/a&gt;, whose &lt;a href="//timetable.manton.org"&gt;Timetable&lt;/a&gt; show is a delightful little thing. (It’s not original to him; a quick [Google search] will turn up instances of the term dating back several years at least, but he’s where I got the idea, and I think he’s certainly one of the first to be popularizing the form.)&lt;/p&gt;
&lt;p&gt;I find podcasting as a medium extremely interesting in general (I’m &lt;a href="//www.winningslowly.org"&gt;sure&lt;/a&gt; you would &lt;a href="//www.newrustacean.com"&gt;never&lt;/a&gt; have &lt;a href="//www.sap-py.com"&gt;guessed&lt;/a&gt; that), and I think microcasts will proliferate rapidly. As my friend &lt;a href="http://oluseyi.info"&gt;Oluseyi Sonaiya&lt;/a&gt; and I have often discussed, brevity is a real virtue in podcasting, and one too-little appreciated by many amateur producers in the space. &lt;a href="http://independentclauses.com"&gt;Stephen&lt;/a&gt; and I aim for that balance with &lt;a href="//www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;, and it’s always been a part of my consideration with &lt;a href="//www.newrustacean.com"&gt;New Rustacean&lt;/a&gt; as well. People’s time is valuable. Saying something and then &lt;em&gt;being done&lt;/em&gt; is a kindness to your audience.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And then, practically speaking, there’s the simple reality that it’s just &lt;em&gt;harder&lt;/em&gt; to record a long-form podcast while running. Especially a good one.&lt;/p&gt;
&lt;p&gt;At a tech level, producing the podcast is incredibly simple: I use the built-in microphone in the headphones that come with an iPhone to record, and do the recording and (extremely minimal) audio production in &lt;a href="https://geo.itunes.apple.com/us/app/ferrite-recording-studio/id1018780185?mt=8&amp;amp;at=1001l4KM"&gt;Ferrite&lt;/a&gt;. When I say minimal, I mean really minimal: I chop off the bits before I start talking, and the bits after I start talking, and I do all of that on my iPhone. Then I export to Dropbox, and from there to my CDN. That’s it.&lt;/p&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;No comments about the length of my blog posts, please.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 11 Apr 2016 21:35:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2016-04-11:/2016/run-with-me.html</guid><category>fitness</category><category>podcasting</category><category>design</category></item><item><title>Ulysses, Byword, and “Just Right”</title><link>http://v4.chriskrycho.com/2016/ulysses-byword-and-just-right.html</link><description>&lt;p&gt;I’m trying out Ulysses again, as it’s been updated substantially since I last used it. I think the main thing to say about it is that it’s gorgeous and a really great editor, and that there is nonetheless something about it which makes it feel not quite as &lt;em&gt;fluid&lt;/em&gt; as Byword always has.&lt;/p&gt;
&lt;p&gt;Neither of them quite &lt;em&gt;nails&lt;/em&gt; it for my purposes, though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neither is quite there for text that includes a lot of code samples. (Basically: neither supports the GitHub variations on Markdown, which are incredibly important for &lt;a href="http://v4.chriskrycho.com/rust-and-swift.html"&gt;a lot of my writing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Neither has the ability to do things like autocompletion of citations from something like BibLatex. (No standalone app does, to my knowledge.)&lt;/li&gt;
&lt;li&gt;Ulysses’ most powerful features only work in its iCloud bucket. And they’re not standard: rather than embracing &lt;a href="http://criticmarkup.com"&gt;CriticMarkup&lt;/a&gt; for comments, they have their own. The same is true of e.g. their code blocks.&lt;/li&gt;
&lt;li&gt;Ulysses &lt;em&gt;converts&lt;/em&gt; any other Markdown documents to its own custom variant when you open them. Had those documents formatted a way you liked (e.g. with specific kinds of link or footnote formatting)? Don’t expect them to still be that way.&lt;/li&gt;
&lt;li&gt;Byword really does one thing well: opening and writing single documents. It does this extremely well, but it also has none of the library management that is useful for larger projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these apps are really wonderful in many ways, and I think it’s fair to say that they’re &lt;em&gt;perfect&lt;/em&gt; for many writers. &lt;a href="http://jaimiekrycho.com/"&gt;My wife&lt;/a&gt;, for example, does nearly all her fiction writing in Ulysses; it works wonderfully for her. But for the kinds of writing I do—usually technical in one way or another—it is limited in its utility. That’s not really a critique of the apps. It’s more the recognition that I have some pretty unusual requirements of my writing apps.&lt;/p&gt;
&lt;p&gt;That said, I don’t think I’m the only person out there who has these particular needs. I am, for example, hardly the only person working with citations and academic text, or writing Markup with lots of code samples in it. And as much as you can bend general-purpose text editors like &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt; to your will,&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; it’s not the same as a dedicated writing app that focuses—in the ways that Ulysses and Byword both do—on just being a great tool for &lt;em&gt;writing&lt;/em&gt;. Writing and writing &lt;em&gt;code&lt;/em&gt; are not the same, after all. A tool that’s really well-optimized for the latter isn’t necessarily well-optimized for the former.&lt;/p&gt;
&lt;p&gt;Keep your ears open. You might just be hearing more about this in the future.&lt;/p&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;Trust me, I have: I have Zen mode installed, a custom Byword-like theme I use when I just want to write, and even a citation autocompletion package integrated with it. It’s not bad. But I still don’t love it as a first-choice &lt;em&gt;writing&lt;/em&gt; tool.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sat, 26 Mar 2016 08:00:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2016-03-26:/2016/ulysses-byword-and-just-right.html</guid><category>design</category><category>software development</category><category>writing</category></item><item><title>CSS Fallback for OpenType Small Caps</title><link>http://v4.chriskrycho.com/2015/css-fallback-for-opentype-small-caps.html</link><description>&lt;p&gt;&lt;i class=editorial&gt;I wrote this up as &lt;a href="http://stackoverflow.com/questions/24846264/css-fallback-for-opentype-small-caps/25172932#25172932"&gt;a question on Stack Overflow&lt;/a&gt; a bit over a year ago. It has continued to get a fair bit of traffic, so I’ve republished it here and cleaned it up a bit.&lt;/i&gt;&lt;/p&gt;
&lt;section id="the-problem" class="level2"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over the last year, I’ve worked on &lt;a href="//holybible.com"&gt;a site&lt;/a&gt; where small caps are important: setting the text of the Bible. In the Old Testament the name of God is transliterated as &lt;code&gt;Lord&lt;/code&gt; but in small caps—not “LORD” but &lt;span class="divine-name"&gt;Lord&lt;/span&gt; (RSS readers will want to click through and see this on my site). However, the state of OpenType small caps support at the moment is… less than optimal. Safari (even up through Safari 9 on El Capitan, from which I am typing this) still doesn’t support the &lt;code&gt;-webkit-font-feature-settings: 'smcp'&lt;/code&gt; option, and a lot of the hits for this website will be coming from mobile.&lt;/p&gt;
&lt;p&gt;Unfortunately, “graceful degradation” is problematic here: if you specify both &lt;code&gt;font-variant: small-caps&lt;/code&gt; and &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; in a browser that supports the latter (e.g. Chrome), the &lt;code&gt;font-variant&lt;/code&gt; declaration overrides it, so the horribly ugly old-style version still comes into play. (Note: this is as it should be per the &lt;a href="http://www.w3.org/TR/css-fonts-3/#feature-precedence"&gt;spec&lt;/a&gt;: the &lt;code&gt;font-variant&lt;/code&gt; declaration has a higher priority than the &lt;code&gt;font-feature-settings&lt;/code&gt; declaration). Given the current implementations of &lt;code&gt;font-variant: small-caps&lt;/code&gt;, though—shrunken capitals rather than actual small capitals—the result is that using &lt;code&gt;font-variant: small-caps&lt;/code&gt; realists in not-so-gracefully degrading &lt;em&gt;everyone’s&lt;/em&gt; reading experience.&lt;/p&gt;
&lt;p&gt;In the past, I have exported the small caps as a distinct webfont and specified them directly; see &lt;a href="http://v4.chriskrycho.com/2014/learning-qml-part-1.html"&gt;this post&lt;/a&gt; for a simple example: the first line of each paragraph is specified that way.&lt;/p&gt;
&lt;p&gt;While I &lt;em&gt;can&lt;/em&gt; do the same thing here (and at least in theory could deliver a pretty small typeface, since I really only need three characters: &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt;), I’d prefer simply to enable sane fallbacks. As noted above, however, that’s not possible. I am &lt;em&gt;open to&lt;/em&gt; but would very much prefer to avoid server-side solutions (browser detection, etc.) as a point of complexity that is better to minimize, especially given how rapidly browsers change. How else might one solve this problem, and especially are there existing solutions for it?&lt;/p&gt;
&lt;p&gt;In the future, &lt;code&gt;font-variant: small-caps&lt;/code&gt; will handle this nicely, as per &lt;a href="http://www.w3.org/TR/css3-fonts/#small-caps"&gt;the spec&lt;/a&gt; it should display a small-capitals-variant of the typeface if the typeface supplies it. However, at present, &lt;em&gt;no browser supports this&lt;/em&gt; (at least, none that I can find!). This means that instead, they all render fake small capitals simply by scaling down actual capitals. The result is typographically unpleasant, and unacceptable on this project.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solutions" class="level2"&gt;
&lt;h2&gt;The Solution(s)&lt;/h2&gt;
&lt;p&gt;I spent a considerable amount of time researching this and wrestling with it. After digging around as best I could, the top solutions for now are:&lt;/p&gt;
&lt;section id="supports" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Take advantage of the &lt;code&gt;@supports&lt;/code&gt; rule in browsers. This is what I initially opted to do on this project.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; You use the rule this way:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.some-class {
    font-variant: small-caps;
}

@supports(font-feature-settings: &amp;#39;smcp&amp;#39;) {
    .some-class {
        font-variant: normal;
        font-feature-settings: &amp;#39;smcp&amp;#39;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I’ve simplified by leaving out the prefixed versions; you’ll need to add the &lt;code&gt;-webkit-&lt;/code&gt; and &lt;code&gt;-moz-&lt;/code&gt; prefixes to get this actually working.) This has the advantage that support for real small caps and support for the &lt;code&gt;@supports&lt;/code&gt; rule are very similar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@supports&lt;/code&gt;: &lt;a href="http://caniuse.com/#feat=css-featurequeries"&gt;Can I Use Feature Queries?&lt;/a&gt;: Chrome 31+, Firefox 29+, Opera 23+, Android 4.4+, Safari 9+, Edge 12+, Chrome for Android&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-feature-settings&lt;/code&gt;: &lt;a href="http://usabilitypost.com/2014/05/10/using-small-caps-and-text-figures-on-the-web/"&gt;Using Small Caps &amp;amp; Text Figures on the Web&lt;/a&gt;: Chrome, Firefox, IE10+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This isn’t perfect: since IE10/11 don’t implement &lt;code&gt;@supports&lt;/code&gt;, you miss one browser—sort of. At this point, IE is a legacy browser, and Edge has had &lt;code&gt;@supports&lt;/code&gt; available from the start. Thus, this gets you most of the way there, and it should be future-facing: this should progressively enhance the site nicely. The normal (bad, but functional) small caps are displayed in the meantime, and when browsers eventually get around to using OpenType small caps by default for &lt;code&gt;font-variant: small-caps&lt;/code&gt;, this will continue to work just fine. It’s “progressive enhancement” and it’ll work nicely for most purposes.&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="typeface-subsetting" class="level3"&gt;
&lt;h3&gt;Typeface subsetting&lt;/h3&gt;
&lt;p&gt;As mentioned above, one can create a subset of the typeface that includes only small capitals. This is what I have done for the small caps on this site; see the example in the first paragraph.&lt;/p&gt;
&lt;p&gt;To pull this off, you’ll need to start by subsetting the typeface. You can do this manually with a font tool, or (the simpler way) you can use FontSquirrel’s custom subsetting tool in their &lt;a href="http://www.fontsquirrel.com/tools/webfont-generator"&gt;webfont generator&lt;/a&gt;. (&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; You &lt;em&gt;must&lt;/em&gt; check the license and confirm that the typeface in question allows this kind of modification. See below.) In the web font generator, first upload the file you wish to modify. Then choose the &lt;strong&gt;Expert&lt;/strong&gt; radio button. Most of the settings you can leave as they are; they’re good sane defaults. Midway down the page you’ll see &lt;strong&gt;OpenType Flattening&lt;/strong&gt; options. Here, select only “Small Caps”. Run the generator. The result will be a complete replacement of the normal lowercase letters with the small caps set.&lt;a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In that case, you can simply apply a style to the elements you want to have small capitals, e.g.:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.divine-name {
    font-family: &amp;#39;my_typeface_smcp&amp;#39;, &amp;#39;my_typeface&amp;#39;, serif;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The major advantage to this approach is consistency: that typeface is going to display on every browser out there, back to IE5.5, as long as you deliver it correctly using the various hooks required by &lt;code&gt;@font-face&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a few disadvantages to this approach, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It means delivering another font file. In my case, this would be an acceeptably low size (since I actually only need four characters), but it’s still something to consider in general. It is in any case another HTTP request, which is going to further slow the page load time or at least give you some flash of unstyled text when it reloads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It may violate the licenses of the typefaces in question. For at least one of the fonts I used on this project, it &lt;em&gt;does&lt;/em&gt;: the license explicitly forbids rebuilding the font using tools like FontSquirrel. (FontSquirrel was the tool I used for this approach before, and it works quite well.) This is a make-or-break issue for using a subset of a typeface to accomplish the goal. That being said, if you have a good reason to do it, you may be able to get support from the vendor (especially if they’re a small shop). For the project that prompted this question, I was able to do just that with a nice email—the designer is a great guy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The other major reason not to do it this way is that it has a significantly higher maintenance cost. If at any point you need to change or update the typeface, you have to go through the subsetting process all over again. By contrast, the first option will simply &lt;em&gt;work&lt;/em&gt;, though admittedly not as pleasantly as one might hope, and will not only continue to work but will actually improve over time as browsers increase their implementation of the CSS3 standard.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I opted for the second solution on HolyBible.com—typography was one of the driving differentiators for the site, so I prioritized it and did the necessary legwork for it. In general, though, the first option should work well for most sites. In any case, both ways work, though the first one is a &lt;em&gt;better&lt;/em&gt; example of progressive enhancement. And we can all look forward to the day when true small-caps support is available on every browser, right?&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;For various reasons (especially see note 2 below), I actually opted for the second approach outlined here, which is the same approach I was trying to avoid. Alas.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;Issues remain: even in the latest Chrome (46 as of the time of this post), using the &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; approach has some issues. For example, if you turn on &lt;code&gt;letter-spacing&lt;/code&gt; (a fairly common &lt;a href="http://practicaltypography.com/letterspacing.html"&gt;recommendation&lt;/a&gt; for small caps), the small caps will revert to normal lowercase letters.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3" role="doc-endnote"&gt;&lt;p&gt;From the FontSquirrel blog post that introduced the feature:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have a font with OpenType features, you can now flatten some of them into your webfont. For instance, some fonts have small caps built in, but they are completely inaccessible in a web browser. By selecting the “Small Cap” option, the Generator will replace all the lowercase glyphs with the small cap variants, giving you a small cap font. Please note that not all OpenType features are supported and if the font lacks OpenType features, using these options won’t create them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a href="#fnref3" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 19 Oct 2015 20:00:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2015-10-19:/2015/css-fallback-for-opentype-small-caps.html</guid><category>design</category><category>software development</category><category>typography</category></item><item><title>Open Source is Neat</title><link>http://v4.chriskrycho.com/2015/open-source-is-neat.html</link><description>&lt;p&gt;I confess: my &lt;em&gt;first&lt;/em&gt; response to seeing &lt;a href="//andrewcamenga.com/"&gt;this page&lt;/a&gt; was a flash of anger: &lt;em&gt;Hey, he didn’t just learn from my site configuration, he actually stole my site &lt;/em&gt;&lt;strong&gt;design&lt;/strong&gt;_!_ And then I remembered: I open-sourced the design precisely so people could do that. This was just the first time I’ve ever actually had someone reuse something I did and shared like this. It was a strange (but ultimately wonderful) feeling. I hope to have it again many more times.&lt;/p&gt;
&lt;p&gt;In any case, I rather like the tweaks Andrew Comenga made to my design to make it his own; &lt;a href="//andrewcamenga.com/"&gt;go take a look&lt;/a&gt;!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Sun, 17 May 2015 22:52:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2015-05-17:/2015/open-source-is-neat.html</guid><category>links</category><category>software development</category><category>design</category></item><item><title>Tolle Lege!</title><link>http://v4.chriskrycho.com/2015/tolle-lege.html</link><description>&lt;p&gt;I was delighted to be able to give a talk at &lt;a href="http://bibletechconference.com/"&gt;BibleTech&lt;/a&gt; this year. I spoke for almost exactly 40 minutes on the subject of digital typography, with a focus on some of the nitty-gritty details that make texts readable… or not. Here is the screen capture and audio from the talk!&lt;/p&gt;
&lt;div class="iframe-wrapper four-to-three"&gt;
&lt;iframe src="https://player.vimeo.com/video/126655499" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;You can also access the &lt;a href="/talks/bibletech2015/"&gt;slides&lt;/a&gt; whenever you like (though note that they were designed to be complements to the talk, &lt;em&gt;not&lt;/em&gt; the content of the talk, and as such they elide a great deal of the content).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 01 May 2015 10:30:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2015-05-01:/2015/tolle-lege.html</guid><category>design</category><category>typography</category><category>talks</category></item><item><title>The Joy of Good Tools</title><link>http://v4.chriskrycho.com/2015/joy-good-tools.html</link><description>&lt;p&gt;&lt;i class="editorial"&gt;Note: This started out as a &lt;a href="https://alpha.app.net/chriskrycho/post/47820144"&gt;series of posts on App.net&lt;/a&gt;, but as I realized that it was growing a bit, I decided to &lt;a href="/2014/a-few-theses-on-blogging.html"&gt;take my own advice&lt;/a&gt; and turn it into a short blog post. (The first four paragraphs of this post are the same as the posts that spawned it.) And then, as so often happens with my writing, it rather took on a life of its own. So much for short.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;After wrestling with Bitbucket issues again all day, I think I’ve finally hit the breaking point. Time to go ahead and drop the money on GitHub and migrate my private repos there. (Yes, GitLab is neat, but tool integrations matter, too.)&lt;/p&gt;
&lt;p&gt;I think I’m also probably going to spring for a small subscription to Pivotal Tracker. It’s cheaper to do GitHub+PivotalTracker at my scale than to host GitLab and run YouTrack on a VPS. And that’s &lt;em&gt;not&lt;/em&gt; counting my time.&lt;/p&gt;
&lt;p&gt;The big thing with Pivotal is that I &lt;em&gt;need&lt;/em&gt; the ability to estimate more effectively even than something like Trello affords (and I don’t want to spend time wrangling with Chrome plugins), and it gives me that. Totally worth the cost in saved pain.&lt;/p&gt;
&lt;p&gt;And as for GitHub as compared to the free GitLab… well, honestly, the F/OSS-copycat model bothers me on a lot of levels. The fact that their strategy is “copy GitHub as closely as possible, and charge for it” is not my idea of “winning slowly”.&lt;/p&gt;
&lt;p&gt;(“Winning slowly” is more than just the name of my &lt;a href="//www.winningslowly.org"&gt;podcast&lt;/a&gt;. In fact, it’s the opposite: we named the podcast that because it’s one of the core commitments in our lives.)&lt;/p&gt;
&lt;p&gt;So I’m going to pay for Pivotal and GitHub. My time is worth something, and the quality of the tools I use matters, too. Ongoing irritation and frustration adds up over time. Good tools can make us happier. Bad tools can make work more frustrating than it needs to be. Given just how frustrating work can be anyway, the last thing in the world I want to do is unnecessarily spend my time being even more frustrated by my tools. And you know what? $7/month for each of those tools is absolutely worth more than the frustration of wrestling with tools that do the job less well.&lt;/p&gt;
&lt;p&gt;I’m actually really excited by this. Pivotal Tracker will help me avoid making the painful mistake of underestimation in the future, by helping me see how long things actually take and giving me a way to plan out major projects with that data immediately available. GitHub will be simultaenously more functional and much lovelier than Bitbucket—no strategy tax holding it back!—and will be much nicer to use.&lt;/p&gt;
&lt;p&gt;At the end of the day, it comes down to this: I’m happy to pay for good tools that make my work more enjoyable.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;To my surprise and amusement, this leads me to a closely related point I had been writing up in a separate blog post: the value of tools that &lt;em&gt;delight&lt;/em&gt;. It is not merely that bad tools make work unpleasant. Good tools can make work a &lt;em&gt;joy&lt;/em&gt;. Indeed, because my vocations is such a significant part of my life, few things bring me as much simple pleasure as a tool that does its job well, is pleasant to use, and is beautiful, all at once.&lt;/p&gt;
&lt;p&gt;The latest example of this for me is &lt;a href="//www.neat.io/bee/index.html"&gt;Bee&lt;/a&gt;, a tool designed to make working with issue trackers like JIRA, GitHub Issues, and FogBugz easier and more pleasant. I use JIRA for one of my long-term contracts—I actually set it up for the company—and I have a love-hate relationship with it. JIRA’s power is great, but the web interface is slow and cluttered.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have used other desktop tools with JIRA before, and they were even worse than the web interface. I stumbled across Bee the other day (I cannot even remember how!), decided to try it out, and fell in love. It is simple, fast, and &lt;em&gt;elegant&lt;/em&gt;. That is a killer combination. I have been using it daily for over a week, and strange though it might be to say of a desktop client for issue trackers, I get genuine pleasure out of using it. (Yes, I know: that is a bit strange.)&lt;/p&gt;
&lt;p&gt;I have the same experience with a number of other tools I use—&lt;a href="//www.git-tower.com"&gt;Tower&lt;/a&gt;, &lt;a href="//bywordapp.com"&gt;Byword&lt;/a&gt;, and &lt;a href="//www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; to name just a few. This very post is written in Byword, and I’m &lt;em&gt;happy&lt;/em&gt; about it. I wish I felt that way about every tool I use.&lt;/p&gt;
&lt;p&gt;And this goes beyond software. I have had the same experience driving a car. The Mazda3 I drove in and after college was a delight. The MUV&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; we drive right now is sufficient. The Chevy Malibu we rented for driving to and from Texas in December was &lt;em&gt;irritating&lt;/em&gt;, with an inordinate number of small failures to consider how the thing would actually be used. I would buy another Mazda3 in a heartbeat; I would contentedly take another Lexus RX300-alike; I would avoid a Chevy Malibu like the plague.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Every&lt;/em&gt; category of tool is like this.&lt;/p&gt;
&lt;p&gt;The difference between a poor or mediocre tool and a good tool can make the difference between frustration and satisfaction. The difference between a good tool and a &lt;em&gt;great&lt;/em&gt; tool can make the difference between satisfaction and delight. That inspires me: it makes me want to make things so that they do more than &lt;em&gt;suffice&lt;/em&gt;—so that they &lt;em&gt;excel&lt;/em&gt;, so that they delight and energize their audience. Whether that is someone using a web application I write or someone listening to a piece of music I composed, I want them to experience more than good-enough. I want them to feel joy.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is something profound here, I think, something that goes even deeper than just the experience of being happy enough with a good tool to pay money to use it. I think human beings are meant for that profound joy—meant for it in every breath. That these kinds of delights are rare, and so often marred even at their best by little failures, is a mark of the imperfection—and, in human terms at least, the &lt;em&gt;imperfectibility&lt;/em&gt;—of the world in which we live. But the fact that such moments will be rare until the eschaton neither undoes nor diminishes the imperative to strive after them—especially for those of us who, as Christians, affirm the goodness and the &lt;em&gt;telos&lt;/em&gt; of the created world. Quite the contrary. We have a responsibility and a charge as subcreators always to be able to say of the work we have done, “It is good.”&lt;/p&gt;
&lt;p&gt;I am not there yet. I hope very much, though, that the work I do this year will be—for at least one person—a little sip from that deep well of delight. Whether I succeed or no, at least the bar is set where it ought to be.&lt;/p&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;Atlassian’s designers seem to be shooting for the kind of “flat” minimalism that is in right now… and missing the mark entirely. &lt;em&gt;All&lt;/em&gt; of their tools are a cluttered mess in the UI/X department.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;A “Mom Utility Vehicle”, my wry term for “SUV”-type vehicles sitting on standard car chasses.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 09 Jan 2015 18:00:00 -0500</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2015-01-09:/2015/joy-good-tools.html</guid><category>software development</category><category>design</category><category>joy</category></item><item><title>Feels Right</title><link>http://v4.chriskrycho.com/2014/feels-right.html</link><description>&lt;p&gt;I had spent most of the last week and a half working on getting &lt;a href="http://www.firebirdsql.org"&gt;FirebirdSQL&lt;/a&gt; configured and ready to use for a project I’m working on with &lt;a href="http://www.questconsult.com"&gt;Quest Consultants&lt;/a&gt;. It was slow going. The tool is decent, but the documentation is spotty and it felt like everything was just a bit of a slog—to get it working correctly, to get it playing nicely with other pieces of the development puzzle, to get it working across platforms.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Then, because I had done something a &lt;em&gt;little&lt;/em&gt; bit silly in my eagerness to get up and going last week and written code without a testable configuration, I hit a wall today. The queries weren’t working. I had made a &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception"&gt;bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I spent a substantial part of the day chasing down that bug, and then a conversation with user &lt;em&gt;agronholm&lt;/em&gt; on the &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/"&gt;SQLAlchemy&lt;/a&gt; IRC channel (&lt;a href="irc://irc.freenode.net/sqlalchemy"&gt;freenode/#sqlalchemy&lt;/a&gt;) got me thinking. The Firebird team describes one of their options as an “embedded” server, but &lt;em&gt;agronholm&lt;/em&gt; pointed out that what they really mean is &lt;em&gt;portable&lt;/em&gt;. It’s running a standalone server and client, but it’s not part of the same thread/process (like SQLite is). Then &lt;em&gt;agronholm&lt;/em&gt; very helpfully asked—my having mentioned my preference for &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; earlier—“Does Postgres not have a portable version?” Two minutes later, we had both found &lt;a href="http://sourceforge.net/projects/postgresqlportable/"&gt;PostgreSQL Portable&lt;/a&gt;, and I rejoiced.&lt;/p&gt;
&lt;p&gt;It took me less than half an hour to get it downloaded and set up and to confirm that it would work the way we need for this particular piece of software. (Firebird had taken me a good three hours, what with digging through badly organized and not terribly clear documentation.) It took me less than half an hour more to get PostgreSQL to the same point that I’d finally gotten Firebird to after multiple hours working with it. And I was so &lt;em&gt;very&lt;/em&gt; happy. What had been an especially frustrating work day now had me quietly smiling to myself constantly for the last two and a half hours as I &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception/22872598#22872598"&gt;finished&lt;/a&gt; tracking down the bug that had set me on this path in the first place.&lt;/p&gt;
&lt;p&gt;Several years ago, when I first started doing web development, I got my feet wet in database work with MySQL—probably the single most common starting point for anyone going that route, courtesy of the ubiquity of the standard Linux-Apache- MySQL-PHP stack.&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; A year after that, I picked up some work that was already using PostgreSQL and fell in love almost immediately.&lt;a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Something just felt &lt;em&gt;better&lt;/em&gt; about running &lt;code&gt;psql&lt;/code&gt; than running &lt;code&gt;mysql&lt;/code&gt; on the command line. Postgres’ implementation of the SQL standard felt more natural. Even the tiniest little details like the way tables display when you query them in &lt;code&gt;psql&lt;/code&gt; was nicer. In less than a week, I was sold and haven’t looked back. While I’ve used MySQL out of convenience on shared hosting from time to time, PostgreSQL is unquestionably my preferred database target.&lt;/p&gt;
&lt;p&gt;Today’s experience brought that all home again. That grin on my face all afternoon felt a bit silly, but it highlights the difference that really good software design makes. I am not just talking about how it looks here—though, to be sure, PostgreSQL is prettier than FirebirdSQL—but how it works. PostgreSQL feels responsive, its command set makes a lot of sense and is easy to use, and it is &lt;em&gt;extremely&lt;/em&gt; well documented. In fact, I would go so far as to say that it is the best documented open source software I have ever used, as well as among the very most robust. (The only other open source software I find to be as incredibly rock-solid and reliable as PostgreSQL is the Linux kernel. I am by no means an expert on either, or on open source software in general, but the Linux kernel is an unarguably amazing piece of work. So is PostgreSQL.) All those tiny little details add up.&lt;/p&gt;
&lt;p&gt;It’s a good reminder for me as I write software that yes, the things I care about—the small matters that would be so easy to overlook when customers express no interest in them—really do matter. People may not know that things like typography make a difference in their experience, but those subtle, often imperceptible things matter. They may not consciously notice the differences in your interface design (even a command line interface), but it will change their experience of the software. Do it poorly, or even in a just-good-enough-to-get- by fashion, and you’ll annoy or simply bore them. Do it well, and you might just delight them—even if they can’t tell you why.&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="examples" class="level2"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;To make my point a little more visible, I thought it might be useful to post samples of SQL to accomplish the same task in the two different database dialects.&lt;/p&gt;
&lt;section id="firebirdsql4" class="level3"&gt;
&lt;h3&gt;FirebirdSQL:&lt;a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id INT NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
CREATE SEQUENCE project_id_sequence;
SET TERM + ;
CREATE TRIGGER project_id_sequence_update
  ACTIVE BEFORE INSERT OR UPDATE POSITION 0
  ON projects
AS
BEGIN
  IF ((new.id IS NULL) OR (new.id = 0))
    THEN new.id = NEXT VALUE FOR project_id_sequence;
END+
SET TERM ; +&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="postgresql" class="level3"&gt;
&lt;h3&gt;PostgreSQL&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id SERIAL NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not just that the PostgreSQL example is shorter and clearer—it is that it is shorter and clearer because its designers and developers have taken the time to make sure that the shorter, cleaner way works well, and have documented it so you can know how to use that shorter cleaner way without too much difficulty.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;I do most of my development on a Mac, but do all the testing on the target platform (Windows) in a VM.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;At this point, I would only use one of those by default if I were building a web app: Linux. I’d use &lt;a href="http://wiki.nginx.org/Main"&gt;nginx&lt;/a&gt; instead of Apache, &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; instead of MySQL, and &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; (though &lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, Javascript via &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/vstudio/hh341490"&gt;C# and the .NET stack&lt;/a&gt;, or just about anything &lt;em&gt;but&lt;/em&gt; PHP would do fine).&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3" role="doc-endnote"&gt;&lt;p&gt;&lt;em&gt;Almost&lt;/em&gt; immediately because at that point configuration on OS X was a bit of a pain. That is &lt;a href="http://postgresapp.com" title="Postgres.app"&gt;no longer the case&lt;/a&gt;.&lt;a href="#fnref3" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4" role="doc-endnote"&gt;&lt;p&gt;To be perfectly fair to Firebird, it is improving. The upcoming 3.0 series release will make these two a lot more similar than they are at present, and clean up a number of other issues. What it won’t do is get the &lt;em&gt;feel&lt;/em&gt; of using Firebird more like that of using Postgres, or make the installation procedure smoother or easier, or make the documentation more complete.&lt;a href="#fnref4" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 04 Apr 2014 21:30:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2014-04-04:/2014/feels-right.html</guid><category>software development</category><category>design</category></item><item><title>The End of Surfing</title><link>http://v4.chriskrycho.com/2014/the-end-of-surfing.html</link><description>&lt;p&gt;Sometime in the last few months it occurred to me that I no longer “surf” the internet. I read, to be sure, and every once in a long while I even go on a spree where I follow links from one site to another (or just in a long trail on Wikipedia). In general, however, I no longer surf. I suspect I am not alone in this: if we took a straw poll I would venture that most of my friends offline and acquaintances online alike spend rather less time in “browsing” mode than they do reading Facebook or Twitter or Instagram. Motion from link to link has been replaced by individual hops out onto Buzzfeed or a viral cat picture website.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The obvious explanation for all of this is already there in what I’ve written: Facebook and Twitter and all the rest of the social media web. To be sure, the advent of social media and the increasing degree to which social media have captured user attention on the web are a significant factor in the end of the old surfing/browsing behavior. This is a dream come true for those social media giants which have found ways to deliver ads to their many millions of users and thereby turn enormous profits.&lt;/p&gt;
&lt;p&gt;At the same time, I think there is an oft-overlooked factor in the shifting nature of the web over the last decade: the browser. In fact, if there is any single cause behind the death of old-fashioned surfing, I would point to Firefox 1.0: the browser which popularized tabbed browsing to increasingly large sections of the internet-using public.&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The open-source browser steadily ate away at Internet Explorer’s then absurd levels of dominance, until Internet Explorer 8 included of tabs itself. By the time that Chrome came on the scene, tabbed browsing had long since become a given.&lt;/p&gt;
&lt;p&gt;So why do I think that &lt;em&gt;tabbed browsing&lt;/em&gt; of all things contributed to the end of “browsing” and “surfing” as our dominant mode of reading the internet? Simply put: it broke linearity. Previously,&lt;a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; one’s experience of the web was single- stranded, leaping from one point to another in a line that however contorted was always connected by the forward and backward buttons on the browser. The moment tabbed browsing came on the scene, that line was broken. Following a link might mean it opened in a new tab instead of moving the whole view forward to it.&lt;/p&gt;
&lt;p&gt;Surfing as I remember it in the late ’90s and early ’00s was inherently the experience of getting lost along that timeline, finding myself dozens of links along the chain and wondering how I had ended up there, and then being able to trace my way back. With tabs, that traceability was gone. With it went the inherent tension that we faced with every link: to follow, or not? To get sucked down into &lt;em&gt;this&lt;/em&gt; vortex or &lt;em&gt;that&lt;/em&gt;? Because in all likelihood, we knew, we were not going to be coming back to this page. With tabs, though, I could open both of those pages without ever leaving this one. I could start new journeys without ending the old. But there was a hidden cost: that newly opened tab had no history. It was a clean slate; before that newly opened link there was only a blank page. If I closed the original from which I had opened it, there was no going back.&lt;a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; If I closed this new tabs, there was no going forward to them. The line was broken.&lt;/p&gt;
&lt;p&gt;From there it was only a short step to the idea of a single site being the center from which one ventured out to other points on the web before returning: the Facebooks and Twitters of the world. In some sense, Facebook’s entire model is predicated on the idea that it is natural to open a new tab with that juicy Buzzfeed content while keeping Facebook itself open in a background tab. Would it work in that old linear model? Sort of. Would it feel natural? Never.&lt;/p&gt;
&lt;p&gt;All of this because of tabs. Invention’s most significant results are rarely those the minds behind it expect. When we are designing things—whether a piece of furniture or a piece of the web—we have to remember that design decisions all have repercussions that we may not see. Technology is never neutral. Particular innovations may or may not be &lt;em&gt;morally&lt;/em&gt; significant, but they always produce changes in people’s behavior. Design has consequences.&lt;/p&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;For the record, lots of that hopping from link to link was on Buzzfeed- like and viral-cat-picture-like sites, too. I am not concerned with the &lt;em&gt;kind&lt;/em&gt; of content being read here, so much as the way it is being read.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;Note that I am not crediting Firefox 1.0 with &lt;em&gt;creating&lt;/em&gt; the tabbed browser—only with popularizing it. That distinction matters.&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3" role="doc-endnote"&gt;&lt;p&gt;Excepting having multiple browser windows open, which I am sure people did—but to a much lesser extent.&lt;a href="#fnref3" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4" role="doc-endnote"&gt;&lt;p&gt;Yes, yes, browser history and re-open closed tab commands. But the &lt;em&gt;experience&lt;/em&gt; of those is different, and that’s what we’re talking about here.&lt;a href="#fnref4" class="footnote-back" role="doc-backlink"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 26 Mar 2014 20:00:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2014-03-26:/2014/the-end-of-surfing.html</guid><category>design</category><category>software development</category></item></channel></rss>