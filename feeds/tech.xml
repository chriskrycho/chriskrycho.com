<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Chris Krycho - tech</title><link href="http://www.chriskrycho.com/" rel="alternate"></link><link href="http://www.chriskrycho.com/feeds/tech.xml" rel="self"></link><id>http://www.chriskrycho.com/</id><updated>2018-08-18T10:00:00-04:00</updated><entry><title>Level up your `.filter` game</title><link href="http://www.chriskrycho.com/2018/level-up-your-filter-game.html" rel="alternate"></link><published>2018-08-18T10:00:00-04:00</published><updated>2018-08-18T10:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-18:/2018/level-up-your-filter-game.html</id><summary type="html">&lt;p&gt;Adam Giese’s &lt;a href="https://css-tricks.com/level-up-your-filter-game/"&gt;“Level up your &lt;code&gt;.filter&lt;/code&gt; game”&lt;/a&gt; does something really interesting and helpful: it introduces a bunch of fairly sophisticated functional programming concepts without ever mentioning functional programming and without ever using any of the jargon associated with those terms.&lt;/p&gt;
&lt;p&gt;“Level up your &lt;code&gt;.filter&lt;/code&gt; game” gives you a reason …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Adam Giese’s &lt;a href="https://css-tricks.com/level-up-your-filter-game/"&gt;“Level up your &lt;code&gt;.filter&lt;/code&gt; game”&lt;/a&gt; does something really interesting and helpful: it introduces a bunch of fairly sophisticated functional programming concepts without ever mentioning functional programming and without ever using any of the jargon associated with those terms.&lt;/p&gt;
&lt;p&gt;“Level up your &lt;code&gt;.filter&lt;/code&gt; game” gives you a reason to use some standard FP tools—currying, higher-order functions, composition—in your ordinary work. It’s pitched at working JS developers. It gives a real-world example of wanting to filter search results based on user input. It shows the utility of defining a bunch of small functions which can fit together like LEGO.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Filters are an essential part of JavaScript development. Whether you’re sorting out bad data from an API response or responding to user interactions, there are countless times when you would want a subset of an array’s values. I hope this overview helped with ways that you can manipulate predicates to write more readable and maintainable code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I commend the piece to you not so much for the explanation of how to use JavaScript’s &lt;code&gt;Array.prototype.filter&lt;/code&gt; effectively (though it has some good suggestions that way!) but &lt;em&gt;primarily&lt;/em&gt; as a great example of the kind of pedagogy we need a lot more of to demonstrate the value of functional programming in ordinary, day-to-day development work.&lt;/p&gt;
</content><category term="pedagogy"></category><category term="javascript"></category><category term="functional programming"></category></entry><entry><title>Stable Libraries</title><link href="http://www.chriskrycho.com/2018/stable-libraries.html" rel="alternate"></link><published>2018-08-14T19:45:00-04:00</published><updated>2018-08-14T19:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-14:/2018/stable-libraries.html</id><summary type="html">True Myth has changed very little since I first released it, and I do not expect it to change much in the future: because it is basically done. I wish more libraries took this approach; churn is not a virtue.
</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt; has changed very little since I first released it, and although I have a few ideas for small additions I might make, I don’t really expect it to change much in the future. &lt;em&gt;That’s okay.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There’s a strange idea in some parts of the software development ecosystem—a way of think I also find myself falling into from time—which takes a lack of changes to a library as a sign that the library is &lt;em&gt;dead&lt;/em&gt; and shouldn’t be used. I call this idea “strange” because if you take a step back, it’s actually not necessarily very healthy for certain kinds of libraries to be changing all the time.&lt;/p&gt;
&lt;p&gt;But if you’re in an ecosystem where rapid change in libraries is normal, you end up assuming that something which &lt;em&gt;isn’t changing&lt;/em&gt; is &lt;em&gt;unmaintained&lt;/em&gt; or &lt;em&gt;not usable&lt;/em&gt; when in fact the opposite may be true. If someone opens a pull request or an issue for True Myth, I generally get to it in under a day, often under an hour if it’s in my normal working time. (That’s easy enough for me to do because it’s a small, simple library; I don’t have the scale problems that larger projects do.) The project isn’t &lt;em&gt;dead&lt;/em&gt;. It’s just mostly &lt;em&gt;done&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One of the things I’d like to see in the front-end/JavaScript community in particular is a growing embrace of the idea that some libraries can genuinely be finished. They might need a tweak here or there to work with a new packaging solution, or to fix some corner case bug that has been found. But the “churn” we all feel to varying degrees would be much diminished if maintainers didn’t feel a constant push to be changing for the sake of, well… change. The burden on maintainers would be lower, too. Maybe we’d all get to spend less time on small changes that just keep us “up to date” and more on solving bigger problems.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: sometimes changing perspective warrants a rewrite. But in libraries as in apps, just as often you’ll end up with a bad case of &lt;a href="https://en.m.wikipedia.org/wiki/Second-system_effect"&gt;second system syndrome&lt;/a&gt;; and rewrites are &lt;em&gt;rarely&lt;/em&gt;—not never, but rarely—clean wins.&lt;/p&gt;
</content><category term="software development"></category><category term="open source software"></category><category term="libraries"></category><category term="true myth"></category><category term="javascript"></category></entry><entry><title>“Free Speech”</title><link href="http://www.chriskrycho.com/2018/free-speech.html" rel="alternate"></link><published>2018-08-11T10:35:00-04:00</published><updated>2018-08-11T10:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-11:/2018/free-speech.html</id><summary type="html">Arguments about free speech on these private platforms are exercises in missing the point. The bigger problem is that we have abandoned our public discourse (and nearly everything else) to these companies.
</summary><content type="html">&lt;p&gt;Every time there is a major controversy about large platforms blocking or delisting some controversial figure, something like the following exchange follows:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Person 1:&lt;/strong&gt; But what about free speech? You’re censoring this party!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Person 2:&lt;/strong&gt; [Twitter/Facebook/Youtube/etc.] is a private platform! Free speech guarantees the right not to be jailed for what you say, &lt;em&gt;not&lt;/em&gt; the right to have it on every platform you want.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So far as it goes, this is true. XKCD’s explanation is completely right on the legal merits:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/1357/"&gt;&lt;img src="http://www.explainxkcd.com/wiki/images/a/ae/free_speech.png" title="XKCD 1357: Free Speech" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But while this is all true in some sense, it also seems to me to be missing the larger and &lt;em&gt;much&lt;/em&gt; more important point. Namely: the whole reason we have these arguments—and the reason people tend to think as they do about the “free speech” question in these situations, legally nonsensical or not—is that we have outsourced the vast majority of our public discourse to these private platforms.&lt;/p&gt;
&lt;p&gt;Twitter and Facebook have become the &lt;em&gt;de facto&lt;/em&gt; public fora of the 2010s, with Google’s search results and Wikipedia’s summaries taking similarly authoritative roles on what &lt;em&gt;exists&lt;/em&gt; and what &lt;em&gt;is true&lt;/em&gt;. Not that most people would put it that way, but it remains true: if something isn’t in Google search, it might as well not exist on the internet, and therefore for many people &lt;em&gt;at all&lt;/em&gt;. Likewise with Wikipedia’s summaries: the admonitions of every college professor in the world notwithstanding, what Wikipedia says has an undeniable authority. And when someone is blacklisted from Twitter or Facebook, their ability to be heard at all by internet users as a block is &lt;em&gt;dramatically&lt;/em&gt; curtailed.&lt;/p&gt;
&lt;p&gt;This centralization of discussion and information into a few private platforms has a great many downsides. But perhaps chief among them is that we have ceded major aspects of our public and civic life to private platforms, and their interests are not the interests of the public good. They are driven almost entirely by the profit motive, or (possibly even worse at times) by nebulous and chimeric ideologies that treat “connecting people [digitally]” or “organizing the world’s information” as inherent and superlative goods. So when someone has their page removed from Facebook, or their website blacklisted from Google, there is a real sense in which they &lt;em&gt;have&lt;/em&gt; been removed from public discourse and their speech “silenced”—even if not in an illegal sense.&lt;/p&gt;
&lt;p&gt;For the purposes of this post, though, I could not care less what the major internet companies do or don’t show on their platforms. Instead, I worry about our practice both as individuals and also as communities-of-practice—churches, associations, and so on—of abdicating our responsibility to maintain real public and civic lives in our local places in favor of letting these corporate giants do the work for us. I worry about the costs of letting Google and Facebook replace genuine public fora in our lives. I worry about the long-term effect of letting supranational megacorporations driven by that toxic combination of profit motive and nonsensical ideologies set the terms of our lives. I worry about the whole set of underlying structural and systematic moves that have made delisting on one of those platforms seem like a violation of the ideal of free speech.&lt;/p&gt;
&lt;p&gt;As I’ve said for many years in this space: we should work hard at reclaiming our lives from the tangle of the corporations. We should limit the way we both use and think about these platforms. We should read books, old and new, rather than simply rely on the Google results and Wikipedia summaries. We should have painful, awkward conversations and indeed arguments with neighbors and colleagues and family members rather than merely all-caps shouting at each other on Facebook or Twitter. We should carve out our own spaces on the internet, &lt;a href="http://tumblr.austinkleon.com/post/37863874092"&gt;owning our own turf&lt;/a&gt;; but more than that we should remember that even that is no substitute for the thicker (and yes, more painful, frustrating, and awkward!) communities and interactions of a church or a neighborhood or a town hall meeting.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Given the context in which I’m writing this, it’s probably helpful to say that I think InfoWars is a font of demonic lies. I’m a Christian; I mean that literally.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="ethics"></category><category term="politics"></category><category term="social media"></category><category term="Twitter"></category><category term="indie web"></category></entry><entry><title>Building Things</title><link href="http://www.chriskrycho.com/2018/building-things.html" rel="alternate"></link><published>2018-08-06T21:15:00-04:00</published><updated>2018-08-06T21:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-06:/2018/building-things.html</id><summary type="html">On “force multipliers” and being an individual contributor at heart—even if one who is good at teaching and who enjoys leading.
</summary><content type="html">&lt;section id="i." class="level2"&gt;
&lt;h2&gt;I.&lt;/h2&gt;
&lt;p&gt;For almost three years, now, I have been more or less steadily—sometimes more, sometimes less!—putting out episodes of New Rustacean. It’s fairly popular. I’ve had really smart people tell me how helpful it was in getting them up to speed with the language. I have had the surprising and slightly weird (if also somewhat gratifying) experience of walking into a room and seeing people respond in recognition of my voice.&lt;/p&gt;
&lt;p&gt;I’m grateful for the impact the podcast has had, and as I tell people often: this is far and away the most significant thing I could have done in the Rust ecosystem in the last three years. There are a lot of people better-equipped than I to write top-notch libraries and applications in the ecosystem. People well-equipped for podcasting by dint of already being active in the space, and well-equipped for teaching specifically by dint of background and training? There are a lot fewer of those. I don’t think there is anywhere at all I could have made a bigger dent in the same time for Rust.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;If I went and applied for a job today, where actual Rust &lt;em&gt;experience&lt;/em&gt; was desired, the vast majority of my show’s listeners would have substantially more to show than me. A command line tool here, a little experiment there. My &lt;a href="https://github.com/chriskrycho/lightning-rs" title="lightning (lx)"&gt;one real project&lt;/a&gt; has been on hold almost since I started it. Another project, my original inspiration for learning Rust at all, I’ve never even started. My actual lines of Rust code written in the last three years top out somewhere under 3,000. It’s a pittance. As well as I know the language’s &lt;em&gt;ideas&lt;/em&gt;, and indeed as well as I can explain them… I actually haven’t gotten to &lt;em&gt;build&lt;/em&gt; much of anything with it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ii." class="level2"&gt;
&lt;h2&gt;II.&lt;/h2&gt;
&lt;p&gt;The last few months at work, I’ve spent a lot of my time—and an increasingly large proportion of it—on mentoring, code reviews, and leading the team and effort I’m on. This is genuinely wonderful in a lot of ways. I &lt;em&gt;love&lt;/em&gt; teaching, and it’s a pleasure to help shape the overall direction of a project and a codebase.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In many ways, I’m right in line with the goals I set explicitly with my manager at the beginning of the year.&lt;/p&gt;
&lt;p&gt;That’s really good, and really important. I recently saw someone tweet the pithy remark that the &lt;em&gt;definition&lt;/em&gt; of a senior engineer is that they are mentoring a more junior engineer. I don’t think that’s quite right—there is a lot of room for really outstanding technical contributors who don’t have the gift of teaching, but whose technical chops mean they genuinely &lt;em&gt;are&lt;/em&gt; senior people on the team.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But the reasonable insight under the hyperbole is that enabling others can often be far more effective than merely doing work yourself.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;Over the last several months, the amount of code I have written myself has dropped substantially. Not to nothing, of course; I’m still doing the actual work of designing and implementing pieces of the application I work on a majority of the time. But I’m not sure how much more than 50% of my time it is on any given week at this point. As much as I’ve enjoyed helping drive this particular project forward,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; I haven’t actually gotten to &lt;em&gt;build&lt;/em&gt; as much during this phase of it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="iii." class="level2"&gt;
&lt;h2&gt;III.&lt;/h2&gt;
&lt;p&gt;These two things have a great deal in common, for all their superficial differences. Both are places where my most valuable contributions are not what I can build myself, but what I can enable &lt;em&gt;others&lt;/em&gt; to build.&lt;/p&gt;
&lt;p&gt;Thousands and thousands of people have listened to New Rustacean. For some non-trivial number of them, the podcast was an important part of their wrapping their heads around the language. I know this because they tell me, in emails and conversations and tweets that are genuinely my favorite parts of doing the show! I have done far, far more with the podcast than I possibly could have by building another library in Rust.&lt;/p&gt;
&lt;p&gt;Similarly, albeit on a much smaller scale, my role in my team at Olo matters. I’ve been able to help set the overall technical direction of a number of our front-end initiatives at the company in important ways. I’ve been able to help more junior developers ramp up their skills. I have done far more in this kind of role than I could possibly have done by just quietly shipping features.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;Being a “force multiplier” (what a terrible phrase!) isn’t always what it’s cracked up to be. It can be both &lt;em&gt;worth it&lt;/em&gt; and also &lt;em&gt;profoundly frustrating and boring&lt;/em&gt; at times. I was drawn to software in no small part because of the joy of being able to make things—to start with nothing but an idea or a sketch and a few hours later have something people can interact with, that solves a problem for them. I still love that side of it, and it’s clear to me if nothing else that (for the foreseeable future, anyway) I have no desire whatsoever to go into management roles, “force multiplier” or not.&lt;/p&gt;
&lt;p&gt;There’s a real trick here, because it’s not that I’m &lt;em&gt;not&lt;/em&gt; building things in these roles. It’s just that building a team or a community is not quite the same thing—it does not scratch the same itch—as building a really elegant user interface component with an elegant and communicative animation. They’re both good; and they’re very, very different from each other.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I separate those on purpose: a project and a codebase are &lt;em&gt;related&lt;/em&gt;, but they’re far from identical. A project can succeed—at least in the short term—with a terrible codebase; an excellent codebase is no guarantee of project success. Getting them aligned is rare, difficult, and rewarding.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;This seems like a typical overcorrection: against the idea that teaching is &lt;em&gt;unimportant&lt;/em&gt;, it now comes into vogue to say that teaching is the &lt;em&gt;most&lt;/em&gt; important. Imagine if we simply noted that teaching is some people’s gift and vocation, and not others; and that we can complement one another’s strengths by sharing our own—that it is not a zero-sum game but one in which &lt;a href="https://www.esv.org/1+Corinthians+12+12/" title="1 Corinthians 12:12 and following"&gt;we are like hands and feet and elbows and ears, each one needing the other, none able to do without the others&lt;/a&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;much of the time anyway; the &lt;a href="https://www.chriskrycho.com/2018/some-mild-burnout.html" title="Some Mild Burnout"&gt;burnout&lt;/a&gt; I’m experiencing is related to some of the dynamics of this particular project&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="leadership"></category><category term="podcasting"></category><category term="New Rustacean"></category></entry><entry><title>Is Agile the Enemy of Good Design?</title><link href="http://www.chriskrycho.com/2018/is-agile-the-enemy-of-good-design.html" rel="alternate"></link><published>2018-07-29T16:15:00-04:00</published><updated>2018-07-29T16:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-07-29:/2018/is-agile-the-enemy-of-good-design.html</id><summary type="html">This is painfully accurate: “It is all about “ship, ship, ship”. We don’t pivot. We don’t refine. The product owner just wants to mark it done in Jira. The MVPs are an excuse to get crappy stuff out the door.”
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;In line with my recently stated &lt;a href="https://www.chriskrycho.com/2018/continuing-to-reflect-on-my-internet-presence.html" title="Continuing to Reflect on My Internet Presence"&gt;desire&lt;/a&gt; to share out things I’m reading:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I just ran into a really excellent piece by John Cutler (who is also new to me), &lt;a href="https://hackernoon.com/is-agile-the-enemy-of-good-design-14a35806cde7"&gt;Is Agile the Enemy (of Good Design)?&lt;/a&gt;. The whole thing is worth your time, but a couple bits in particular stood out to me in light of some ongoing conversations &lt;a href="https://mobile.twitter.com/bmakuh"&gt;Ben Makuh&lt;/a&gt; about wisdom and folly in startup culture.&lt;/p&gt;
&lt;p&gt;In particular, these two bits from other designers Cutler cites sum up a &lt;em&gt;huge&lt;/em&gt; amount of what’s wrong with a lot of what passes for “Agile” and indeed for “startup culture”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The stuff you’re talking about rarely happens. It is all about “ship, ship, ship”. We don’t pivot. We don’t refine. The product owner just wants to mark it done in Jira. The MVPs are an excuse to get crappy stuff out the door. I guarantee that if I am methodical with my prototype testing, I can come up with something better because I will expose it to users. Not AS great as doing it the perfect Agile way, but better than nothing. I mean I struggle even to do usability testing. So you know…yes in theory all that is good, but it doesn’t happen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The enemy of both actual agilistas and the UX/design community in 2018 is, as John points out, short-term, output-centric thinking driven by a focus on short-term financial results, and all the cultural ramifications of this mindset.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;These things are &lt;em&gt;antithetical&lt;/em&gt; to the original ideas of the &lt;a href="http://agilemanifesto.org"&gt;Manifesto for Agile Software Development&lt;/a&gt;. But they’re also, well… pretty common. As Cutler puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…Agile — like many other things in cut-throat business — is often no match for the universal threats of output fetishism, success theater, and cutting corners. Trust me… these predated Agile.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this is some hot fire here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So where does this leave us? Designers have a right to be concerned. At least with waterfall no one prematurely yells “ship it” in the middle of the project. Designers have time to work instead of trying to jump on and off the sprint conveyor belt. And because the “thing” is built in a big batch, they have time to tackle the design problem holistically right from the beginning. “Good” waterfall beats abused Agile any day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He’s not wrong. &lt;a href="https://hackernoon.com/is-agile-the-enemy-of-good-design-14a35806cde7"&gt;You should read the whole thing.&lt;/a&gt;&lt;/p&gt;
</content><category term="design"></category><category term="agile"></category><category term="software development"></category><category term="business"></category></entry><entry><title>Ember.js, TypeScript, and Class Properties</title><link href="http://www.chriskrycho.com/2018/ember-ts-class-properties.html" rel="alternate"></link><published>2018-07-10T20:00:00-04:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-07-10:/2018/ember-ts-class-properties.html</id><summary type="html">I made an important mistake in my discussion of JavaScript and TypeScript class properties in relation to computed properties and injections in Ember earlier this year. Here's the fix you need.</summary><content type="html">&lt;p&gt;A few months ago, I wrote a mostly-complete series describing the state of using &lt;a href="https://typescriptlang.org"&gt;TypeScript&lt;/a&gt; with &lt;a href="https://emberjs.com"&gt;Ember&lt;/a&gt; in 2018. I got one &lt;em&gt;very&lt;/em&gt; important thing wrong in that series, and I’m back with the correction!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In that series, I showed an example of a component definition; it looked like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import Computed from &amp;#39;@ember/object/computed&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem here is all the computed property assignments and the actions hash assignments. The fact that this sample code ever worked at all was… an accident. It wasn’t &lt;em&gt;supposed&lt;/em&gt; to work. I &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html#computed-properties"&gt;noted at the time&lt;/a&gt; that this way of doing things had a performance tradeoff because computed properties ended up installed on every &lt;em&gt;instance&lt;/em&gt; rather than on the &lt;em&gt;prototype&lt;/em&gt;… and as it turns out, that was never intended to work. Only the prototype installation was supposed to work. And as it turns out, the &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0281-es5-getters.md" title="RFC #0281"&gt;&lt;abbr&gt;ES5&lt;/abbr&gt; getters implementation of computed properties&lt;/a&gt; which landed in Ember 3.1 broke every computed property set up this way.&lt;/p&gt;
&lt;p&gt;So if you can’t use class properties for this… how &lt;em&gt;do&lt;/em&gt; you do it? There are two ways: the &lt;code&gt;.extend()&lt;/code&gt; hack I mentioned &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html#computed-properties-1"&gt;previously&lt;/a&gt;, and &lt;a href="http://ember-decorators.github.io/ember-decorators/latest/"&gt;decorators&lt;/a&gt;. (The Ember Decorators docs include a discussion of this topic as well—see &lt;a href="http://ember-decorators.github.io/ember-decorators/latest/docs/class-fields"&gt;their discussion of class fields&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Note that throughout I’m assuming Ember 3.1+ and therefore &lt;abbr&gt;ES5&lt;/abbr&gt; getter syntax (&lt;code&gt;this.property&lt;/code&gt; instead of &lt;code&gt;this.get('property')&lt;/code&gt;).&lt;/p&gt;
&lt;section id="extend" class="level2"&gt;
&lt;h2&gt;&lt;code&gt;.extend()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The first workaround uses &lt;code&gt;.extend()&lt;/code&gt; in conjunction with a class definition. I originally wrote about this approach:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you need the absolute best performance, you can continue to install them on the prototype by doing this instead…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As it turns out, it’s more like “If you want your app to work at all…”&lt;/p&gt;
&lt;p&gt;Here’s how that would look with our full example from above. Note that there are three things which &lt;em&gt;must&lt;/em&gt; go in the &lt;code&gt;.extend()&lt;/code&gt; block with this approach: injections, computed properties, and the &lt;code&gt;actions&lt;/code&gt; hash.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component.extend({
  // -- Injections -- //
  session: service(&amp;#39;session&amp;#39;),

    // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel: computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${this.model.firstName};`;
    }
  ),

  aComputed: computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  }),

  isLoggedIn: bool(&amp;#39;session.user&amp;#39;),
  savedUser: alias(&amp;#39;session.user&amp;#39;) as Person,

  actions: {
    addToCollection(this: AnExample, value: string) {
      this.set(&amp;#39;aCollection&amp;#39;, this.aCollection.concat(value));
    }
  },
}) {
  // -- Component arguments -- //
  model!: Person;     // required
  modifier?: string;  // optional, thus the `?`

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.aCollection.includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, this.aCollection.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are three main things to note here.&lt;/p&gt;
&lt;p&gt;First, check out the &lt;code&gt;session('service')&lt;/code&gt; injection. We need the name of the service being injected for TypeScript to be able to resolve the type correctly (which it does by using “type registries,” as discussed briefly &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html#fn1"&gt;in this footnote&lt;/a&gt; in my series earlier this year). The alternative is writing &lt;code&gt;session: service() as Session&lt;/code&gt;—a type cast—which is &lt;em&gt;fine&lt;/em&gt; but isn’t particularly idiomatic TypeScript.&lt;/p&gt;
&lt;p&gt;Second, notice that we do have to use a type cast, &lt;code&gt;as Person&lt;/code&gt;, for the &lt;code&gt;savedUser&lt;/code&gt; definition. While many computed property macros and the &lt;code&gt;computed&lt;/code&gt; helper itself can properly infer the type of the resulting computed property, macros which accept nested keys do not and cannot. Thus, &lt;code&gt;bool&lt;/code&gt; can resolve its type to a &lt;code&gt;boolean&lt;/code&gt;, but &lt;code&gt;readOnly&lt;/code&gt; or &lt;code&gt;alias&lt;/code&gt; have to resolve their type as &lt;code&gt;any&lt;/code&gt;. The value passed to them could be a strangely shaped string key on the local object (&lt;code&gt;['like.a.path']: true&lt;/code&gt;) or an actual path through multiple objects. (This is the same limitation that means we cannot do nested &lt;code&gt;get&lt;/code&gt; lookups.)&lt;/p&gt;
&lt;p&gt;Third, as I noted even when we were doing this the &lt;em&gt;wrong&lt;/em&gt; way, with class field assignment, we need to explicitly specify the type of &lt;code&gt;this&lt;/code&gt; for callback passed in to define the computed properties. In the context of a &lt;code&gt;.extend()&lt;/code&gt; invocation, though, this sometimes falls down. You’ll see an error like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‘AnExample’ is referenced directly or indirectly in its own base expression.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This doesn’t happen for &lt;em&gt;all&lt;/em&gt; computed properties, but it happens often enough to be very annoying—and it &lt;em&gt;always&lt;/em&gt; happens with Ember Concurrency tasks. (More on this &lt;a href="#ember-concurrency"&gt;below&lt;/a&gt;.) This problem was actually the original motivation for my experimentation with assigning computed properties to class fields.&lt;/p&gt;
&lt;p&gt;This set of problems with defining computed properties and injections in an &lt;code&gt;.extend()&lt;/code&gt; invocation is a major motivator for my team in eagerly adopting decorators.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="decorators" class="level2"&gt;
&lt;h2&gt;Decorators&lt;/h2&gt;
&lt;p&gt;The cleaner, but currently still experimental, way to do this is to use Ember Decorators.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; To use these, you should run &lt;code&gt;ember install ember-decorators&lt;/code&gt; and then set the &lt;code&gt;experimentalDecorators&lt;/code&gt; compiler option to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you’ve installed the decorators package, you can update your component. In general, the imports match exactly to the Ember module imports, just with &lt;code&gt;@ember-decorators&lt;/code&gt; as the top-level package rather than &lt;code&gt;@ember&lt;/code&gt;. Here’s how our component looks using decorators:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import { action, computed } from &amp;#39;@ember-decorators/object&amp;#39;;
import { alias, bool } from &amp;#39;@ember-decorators/object/computed&amp;#39;;
import { service } from &amp;#39;@ember-decorators/service&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model!: Person;     // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  @service session: Session;

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  @computed(&amp;#39;model.firstName&amp;#39;)
  get fromModel(): string {
    return `My name is ${this.model.firstName}`;
  }

  @computed(&amp;#39;aString&amp;#39;)
  get aComputed(): number {
    return this.aString.length;
  }

  @bool(&amp;#39;session.user&amp;#39;) isLoggedIn: boolean;
  @alias(&amp;#39;session.user&amp;#39;) savedUser: Person;

  @action
  addToCollection(this: AnExample, value: string) {
    this.set(&amp;#39;aCollection&amp;#39;, this.aCollection.concat(value));
  }

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.aCollection.includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, this.aCollection.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, notice that using decorators switches us to using actual &lt;abbr&gt;ES5&lt;/abbr&gt; getters. This is &lt;em&gt;exactly&lt;/em&gt; the same thing that &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0281-es5-getters.md" title="RFC #0281"&gt;&lt;abbr&gt;RFC&lt;/abbr&gt; #0281&lt;/a&gt; specified, and which was implemented for Ember’s traditional computed property and injection functions in Ember 3.1 to unlock . What’s extra nice, though, is that decorators are backwards compatible &lt;a href="http://ember-decorators.github.io/ember-decorators/latest/docs/stability-and-support#ember-support"&gt;all the way to Ember 1.11&lt;/a&gt;. (You won’t get the &lt;abbr&gt;ES5&lt;/abbr&gt; getters on versions prior to to Ember 3.1—there the decorators &lt;em&gt;just&lt;/em&gt; install things on the prototype—but you will at least get the correct behavior.)&lt;/p&gt;
&lt;p&gt;Second, note that we don’t get type inference for the computed property macros like &lt;code&gt;@bool&lt;/code&gt; here. That’s because decorators are not currently allowed to modify the &lt;em&gt;type&lt;/em&gt; of the thing they’re decorating from TypeScript’s perspective. Now, decorators can—and &lt;em&gt;do&lt;/em&gt;!—modify the type of the thing they decorate at runtime; it’s just that &lt;abbr&gt;TS&lt;/abbr&gt; doesn’t yet capture that. This means that &lt;em&gt;all&lt;/em&gt; decorated fields will still require type annotations, not just a subset as in the &lt;code&gt;.extend()&lt;/code&gt; world. It’s annoying—especially in the case of things like &lt;code&gt;@bool&lt;/code&gt;, where it &lt;em&gt;really&lt;/em&gt; seems like we ought to be able to just tell TypeScript that this means the thing is a boolean rather than writing &lt;code&gt;@bool('dependentKey') someProp: boolean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This leads us to our final point to notice: we also need the type annotations for service (or controller) injections—but we do &lt;em&gt;not&lt;/em&gt; need the string keys for them service injections.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; The net of this is that the injections themselves roughly equally ergonomic.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;// the old way
session: service(&amp;#39;session&amp;#39;),
// the new way
@service session: Session;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ember-concurrency" class="level2"&gt;
&lt;h2&gt;Ember Concurrency&lt;/h2&gt;
&lt;p&gt;One other thing I need to draw your attention to here: I and a few others have taken a stab at writing type definitions for &lt;a href="http://ember-concurrency.com/docs/introduction/"&gt;Ember Concurrency&lt;/a&gt;. Unfortunately, typings that &lt;em&gt;type-check&lt;/em&gt; run smack dab into the fact that as of 3.1 that style doesn’t &lt;em&gt;work&lt;/em&gt;; and typings that &lt;em&gt;work&lt;/em&gt; cannot be type-checked at present. You can’t even use decorators to push your way to a solution. Nor is there a lot of hope on the horizon for this reality to change.&lt;/p&gt;
&lt;p&gt;You can see some of the discussion as to &lt;em&gt;why&lt;/em&gt; &lt;a href="https://github.com/machty/ember-concurrency/pull/209#issuecomment-403246551"&gt;starting here&lt;/a&gt; in one pull request for them; it all gets back to the limitation I mentioned above: TypeScript doesn’t let you change the types of things with decorators. Unfortunately, there’s no reason to believe that will change anytime soon. This is a &lt;em&gt;fundamental&lt;/em&gt; conflict between the Ember Object model and modern JavaScript—and specifically TypeScript’s understanding of it.&lt;/p&gt;
&lt;p&gt;I am still mulling over solutions to that problem (as are others), and we’ll be continuing to work on this idea in &lt;a href="https://embercommunity.slack.com/messages/C2F8Q3SK1"&gt;#-topic-typescript&lt;/a&gt; in the Ember Community Slack (and publicizing any good ideas we come up with there in a searchable location, of course). For today, the best thing you can do is explicitly set the &lt;code&gt;this&lt;/code&gt; type to &lt;code&gt;any&lt;/code&gt; for the task property generator function callback, and use type casts internally if you look up services or other properties from the containing object.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary-mea-culpa" class="level2"&gt;
&lt;h2&gt;Summary: &lt;em&gt;mea culpa&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Sorry again to everyone I misled along the way with my earlier, very wrong advice! Hopefully this helps clear up the state of things and will help you keep from falling into this tar pit going forward!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I don’t feel too bad about having gotten in wrong: no one who read the posts noticed the problem at the time, and it was subtle and easy to miss… because, at the time, everything actually &lt;em&gt;worked&lt;/em&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It’s experimental because decorators are still only at Stage 2 in the &lt;abbr&gt;TC39&lt;/abbr&gt; process. They &lt;em&gt;may&lt;/em&gt; advance at this month’s meeting.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;If you’re using a non-default name, like &lt;code&gt;specialSession&lt;/code&gt;, for the name of the property, the usual rules apply for injections. In that case, you’d write the injection like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { service } from &amp;#39;@ember-decorators/service&amp;#39;;
import Session from &amp;#39;my-app/services/session&amp;#39;;

export default class AnExample extends Component {
  @service(&amp;#39;session&amp;#39;) specialSession: Session;
}&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Files do get an extra import in the decorator version… but as it happens, I’m more than okay with that; I’d actually &lt;em&gt;prefer&lt;/em&gt; explicit imports of dependencies personally.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>Client-Side Ideas for Server-Side Apps</title><link href="http://www.chriskrycho.com/2018/client-side-ideas-for-server-side-apps.html" rel="alternate"></link><published>2018-06-07T16:00:00-04:00</published><updated>2018-06-07T16:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-06-07:/2018/client-side-ideas-for-server-side-apps.html</id><summary type="html">It turns out that a bunch of the tools we've built for front-end web development are really, really nice ways to build UI. Who could have guessed, from all the kvetching you hear about them?
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;A quick note: I drafted this back in June, but forgot to actually publish it!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I’ve been working on the design of a particular website I maintain (not this one; keep your eyes open), and besides the fact that I have learned a &lt;em&gt;lot&lt;/em&gt; about web design in general in the years since I originally built that site, I discovered that I desperately want to use a component-drive model for developing sites on the client.&lt;/p&gt;
&lt;p&gt;In my day job, I’m used to breaking down my application into discrete components with their own responsibilities. I’ve gotten spoiled by the component-driven model that dominates the front-end web development world now. (My tool of choice is usually Ember, but you’d get the same with React or Vue or whatever else.) And on the server development side, I’m desperately missing those.&lt;/p&gt;
&lt;p&gt;I’m using &lt;a href="https://getpelican.com"&gt;Pelican&lt;/a&gt; for this particular site because that’s what it’s been built on for the past few years and I have no desire to change it at the moment. And that means using &lt;a href="http://jinja.pocoo.org"&gt;Jinja2&lt;/a&gt; for templating. And Jinja2 has no notion of &lt;em&gt;components&lt;/em&gt;. Partials, yes—with all the implicit context you have to carry around in your head. It has a few different ways you can sort of hack your way to something sort of vaguely component-like using some of its &lt;a href="http://jinja.pocoo.org/docs/2.10/templates/#block-assignments"&gt;fancy features&lt;/a&gt;. But without any kind of “argument” or “return value”/yielding (&lt;em&gt;a la&lt;/em&gt; the ideas I discussed in &lt;a href="https://www.chriskrycho.com/2018/higher-order-components-in-emberjs.html" title="Higher-Order Components in Ember.js"&gt;this post&lt;/a&gt;). All of the solutions available in &lt;em&gt;any&lt;/em&gt; of these server-side frameworks for breaking up pages are &lt;em&gt;partial&lt;/em&gt;-style: which means they’re basically just dumb string includes!&lt;/p&gt;
&lt;p&gt;There’s nothing like the way I solve this problem in an Ember app every single day: &lt;em&gt;components&lt;/em&gt;. There’s no particular reason that the same component-based approach that has flourished on the client &lt;em&gt;can’t&lt;/em&gt; be done on the client side. It just… hasn’t, mostly. Which is kind of weird.&lt;/p&gt;
&lt;p&gt;Until this week, projects like &lt;a href="https://github.com/gatsbyjs/gatsby"&gt;Gatsby&lt;/a&gt; in the React world made no sense to me at all. It seemed like using a sledgehammer to kill a spider. But after this week, I’m suddenly &lt;em&gt;very&lt;/em&gt; interested in it—and I might in fact experiment with some server-side component-driven approaches to this at some point in the future—because a couple of days mucking with Jinja2 has me desperately wishing for a good old Ember or React component.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As an aside: people talk about client-side development being overly complicated. I know some of what they mean, but the truth is that my experience hacking on this over the last week has actually served to remind me of just how &lt;em&gt;great&lt;/em&gt; the tooling is in this world.&lt;/p&gt;
&lt;p&gt;It’s true that there’s more complexity in many ways to building things with Ember or React or whatever other &lt;abbr&gt;JS&lt;/abbr&gt;-powered client-side framework than with plain-old &lt;abbr&gt;HTML&lt;/abbr&gt;. It’s more complex even than with something like Jinja2 or Liquid or whatever other server-side templating language you use. There’s good reason for that complexity, though: it comes with &lt;em&gt;more power&lt;/em&gt; and &lt;em&gt;more expressiveness&lt;/em&gt;. And the thing many critiquing the front-end seem to miss is that once you are used to having that power and expressiveness, it’s &lt;em&gt;really&lt;/em&gt; painful to go back to not having it.&lt;/p&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="web design"></category></entry><entry><title>Sum Type Constructors in TypeScript</title><link href="http://www.chriskrycho.com/2018/sum-type-constructors-in-typescript.html" rel="alternate"></link><published>2018-05-31T07:00:00-04:00</published><updated>2018-05-31T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-31:/2018/sum-type-constructors-in-typescript.html</id><summary type="html">You can build the same kind of sophisticated discriminated union types in TypeScript as you'd get in Elm or F♯. Kind of. With a lot of work. (Here’s how.)</summary><content type="html">&lt;p&gt;A pretty common pattern I’ve seen is to have three basic states for some kind of &lt;abbr&gt;HTTP&lt;/abbr&gt; request: &lt;em&gt;loading&lt;/em&gt;, &lt;em&gt;failure&lt;/em&gt;, and &lt;em&gt;success&lt;/em&gt;. Since each of these has its own associated date, it’s a really good fit for a discriminated union or sum type. In a language like Elm (or F&lt;sup&gt;♯&lt;/sup&gt; or Haskell or PureScript or…) you’d write that basically like this:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;module Fetch exposing (State)

type alias HTTPStatusCode = Int
type alias ErrorData = { code: HTTPStatusCode, reason: String }

type State a
    = Loading
    | Failure ErrorData
    | Success a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because I find that pattern extremely helpful, I’ve at times gone out of my way to replicate it in TypeScript. And what you get is… verbose. It’s a necessary evil, given what TypeScript is doing (layering on top of JavaScript), and so much so that I wouldn’t actually recommend this unless you’re already doing this kind of programming a lot and find it pretty natural. If you are, though, here’s how you get the equivalent of those four lines of Elm in TypeScript:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type HttpStatusCode = number;

export enum Type { Loading, Failure, Success }

export class Loading {
  readonly type: Type.Loading = Type.Loading;

  static new() {
    return new Loading();
  }
}

type ErrorData = { code: HttpStatusCode, reason: string };

export class Failure {
  readonly type: Type.Failure = Type.Failure;
  constructor(readonly value: ErrorData) {}

  static new(value: ErrorData) {
    return new Failure(value);
  }
}

export class Success&amp;lt;T&amp;gt; {
  readonly type: Type.Success = Type.Success;
  constructor(readonly value: T) {}

  static new&amp;lt;A&amp;gt;(value: A) {
    return new Success(value);
  }
}

export type FetchState&amp;lt;T&amp;gt; = Loading | Failure | Success&amp;lt;T&amp;gt;;
export const FetchState = {
  Type,
  Loading,
  Failure,
  Success,
};

export default FetchState;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s a &lt;em&gt;lot&lt;/em&gt; more code to do the same thing. Even if you dropped the static constructors—which you really don’t want to do, because then you can’t use them in a functional style but &lt;em&gt;have&lt;/em&gt; to use &lt;code&gt;new Loading()&lt;/code&gt; or whatever to construct them.&lt;/p&gt;
&lt;p&gt;You can make this work. And I do. And honestly, it’s amazing that TypeScript can do this at all—a real testament to the sophistication of the TypeScript type system and the ingenuity that has gone into it.&lt;/p&gt;
&lt;p&gt;But have I mentioned recently that I’d &lt;em&gt;really&lt;/em&gt; prefer to be writing something like F&lt;sup&gt;♯&lt;/sup&gt; or Elm than TypeScript?&lt;/p&gt;
</content><category term="elm"></category><category term="typescript"></category><category term="programming languages"></category></entry><entry><title>#EmberJS2018, Part 4</title><link href="http://www.chriskrycho.com/2018/emberjs2018-part-4.html" rel="alternate"></link><published>2018-05-29T07:45:00-04:00</published><updated>2018-05-29T07:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-29:/2018/emberjs2018-part-4.html</id><summary type="html">We need to shift from a posture of defensiveness about Ember.js to one of embracing the ecosystem, and embracing our role in the ecosystem.</summary><content type="html">&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-3.html"&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Over the last few weeks, I’ve talked about a few big ideas that I think the Ember.js community should go after in 2018 which will help the framework excel over the next few years. This last one (like Part 3 before it) is more a &lt;em&gt;culture shift&lt;/em&gt; than a matter of &lt;em&gt;things to build&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We need to shift from a posture of defensiveness about Ember.js to one of embracing the ecosystem, and embracing our role in the ecosystem.&lt;/p&gt;
&lt;p&gt;It’s easy to end up in an us-vs.-them mentality when looking at different libraries and frameworks. It’s doubly easy to go there when you often hear “Isn’t Ember dead?” or variations on that theme. We should avoid that way of thinking anyway. And there are three big pieces to this: &lt;em&gt;contributing outwards&lt;/em&gt;, &lt;em&gt;smoothing the paths into Ember&lt;/em&gt; from other ecosystems, and &lt;em&gt;embracing the rest of the ecosystem&lt;/em&gt;.&lt;/p&gt;
&lt;section id="contributing-outwards" class="level3"&gt;
&lt;h3&gt;Contributing outwards&lt;/h3&gt;
&lt;p&gt;There is genuinely great stuff happening all over the place in the front-end, and many of the things we love about working with Ember today have come directly out of e.g. React—hello, “data-down-actions-up”! The same is true in reverse: Ember has contributed many important ideas to the broader front-end ecosystem, from its early emphasis on rigorously linking URLs and application state to helping pioneer and popularize the use of good command line tooling, to more recent emphasis on &lt;em&gt;compilation&lt;/em&gt; as a way of solving certain classes of problems.&lt;/p&gt;
&lt;p&gt;So as we build all of these things, one of the best things to do—and, I believe, one of the ways we help Ember grow!—is think about how our work can benefit the larger ecosystem. When you build a library, you should consider whether there are parts of it that &lt;em&gt;don’t&lt;/em&gt; have to be Ember specific. For example, a colleague and I recently built out the foundation of a solution for well-rationalized form-handling.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; We build it in two pieces, though: a core library in TypeScript that will work as well in Vue or React as in Ember, and an Ember component library that consumes that core functionality.&lt;/p&gt;
&lt;p&gt;The more we can take that tack in &lt;em&gt;general&lt;/em&gt;, the better. It’s the first piece of making the gap between people’s experience in other parts of the front-end ecosystem and the Ember part smaller. Ember will seem much more interesting if people find themselves &lt;em&gt;often&lt;/em&gt; getting value out of things we’ve built.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="smoothing-the-paths-in" class="level3"&gt;
&lt;h3&gt;Smoothing the paths in&lt;/h3&gt;
&lt;p&gt;The flip side of this is figuring out ways to make it easier for people coming &lt;em&gt;into&lt;/em&gt; Ember.js to map patterns from their existing experience onto the framework’s tools and patterns. The simple reality is that there are far, far more developers familiar with React, Angular, and Vue than with modern Ember.js. Ember genuinely has a lot to offer there, but we need to make it easier for people to see that value and to recognize how it’s a lot like the good parts of what they already know!&lt;/p&gt;
&lt;p&gt;This is primarily a communications effort; it means changes to the docs and to the homepage, but also to what we do in blog posts and tutorials and talks as a community!&lt;/p&gt;
&lt;p&gt;At the highest level, I cannot recommend strongly enough the model suggested by Chris Garrett in &lt;a href="https://medium.com/@pzuraq/emberjs-2018-ember-as-a-component-service-framework-2e49492734f1"&gt;his #EmberJS2018 post&lt;/a&gt;: treat Ember.js (both in the docs and also in our presentations and communications about it) as a &lt;em&gt;component-service&lt;/em&gt; framework. This not only maps more easily to patterns people know from other communities, it has the really important effect of demystifying a lot of the “magic” that seems perplexing in the framework, especially around Ember Data—which is, after all, just a service you can inject!&lt;/p&gt;
&lt;p&gt;When we write blog posts, we can accomplish a lot of this simply by being aware of the rest of the ecosystem and making analogies there. You can see an example of how I’ve started trying to do this in my recent blog post on &lt;a href="http://www.chriskrycho.com/2018/higher-order-components-in-emberjs.html"&gt;higher-order components in Ember.js&lt;/a&gt;. It was just one little line:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In React, the [higher-order components] pattern as a whole is often known as the &lt;code&gt;renderProps&lt;/code&gt; pattern, for the way you most often accomplish it. It’s all the same idea, though!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s not a lot of extra work, but it means that if someone searches for “renderProps Ember.js” there now exists a blog post which will help someone map there existing knowledge over! I wasn’t writing a “how to do React renderProps in Ember” post—but I still smoothed the path in just a little bit. We should be doing that everywhere we can. It’s usually not a lot of effort to make those kinds of moves in talks or blog posts, but the yield is high: Ember stops being some super weird foreign entity and starts looking like a variation on a theme.&lt;/p&gt;
&lt;p&gt;There is also a much larger effort we &lt;em&gt;do&lt;/em&gt; need to undertake to make that story clearer on the home page and in the documentation—an effort that I know is already very much in consideration from chatting with the really amazing crew in &lt;code&gt;#-team-learning&lt;/code&gt; on Slack. In the &lt;strong&gt;how you can help&lt;/strong&gt; bucket: seriously please go into that channel and start chipping away at small tasks! There’s (&lt;a href="https://m.youtube.com/watch?v=Abu2BNixXak" title="“Becoming a Contributor”, my Rust Belt Rust 2017 talk"&gt;always!&lt;/a&gt;) way more work to be done than hands to do it.&lt;/p&gt;
&lt;p&gt;I think this also means prioritizing technical work that eases this. The sooner we can land the Glimmer component model, the better. The sooner we can hash out a more cogent story on routes and controllers and components, the better. The sooner we can make “npm-install-your-way-to-Ember” an actually viable strategy, the better. Because each of those things makes Ember dramatically more accessible to people working in other ecosystems today; each lowers the barrier to entry in some substantial way; and the combination of them all makes it far more viable for someone to &lt;em&gt;try&lt;/em&gt; Ember in an existing application.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="embracing-the-rest-of-the-ecosystem" class="level3"&gt;
&lt;h3&gt;Embracing the rest of the ecosystem&lt;/h3&gt;
&lt;p&gt;The final piece of this is actively embracing the best parts of the rest of the ecosystem.&lt;/p&gt;
&lt;p&gt;We as a community need to avoid defensiveness and recognize that there’s a &lt;em&gt;lot&lt;/em&gt; of good in the rest of the front-end space. I understand how it can be easy to feel defensive. Being dismissed, having people be surprised that the project even still exists, etc. gets really old after a while. But however reasonable that defensiveness is, it’s ultimately counterproductive. It makes us hold onto things we don’t need to hold onto, and it makes us ignore things that might benefit us, and as a result it can make us &lt;em&gt;needlessly weird&lt;/em&gt; technically.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Needless weirdness&lt;/em&gt; is an important idea I’d love for us to keep in mind. Any time you’re willing to move more slowly, to let the “new shiny” bake for a while to see whether it’s genuinely worth investing in, you’re going to seem weird. Likewise when you strongly embrace stability, in a broader ecosystem which hasn’t. Likewise when you value convention over configuration, in a broader ecosystem which hasn’t. But it’s important to be able to distinguish between &lt;em&gt;needful&lt;/em&gt; and &lt;em&gt;needless&lt;/em&gt; weirdness.&lt;/p&gt;
&lt;p&gt;We should have regular conversations as a community—through &lt;abbr title="request for comments"&gt;RFC&lt;/abbr&gt;s, through forum threads, through blog post arguments, etc.—about what’s &lt;em&gt;needful&lt;/em&gt; weirdness, and what has become &lt;em&gt;needless&lt;/em&gt; weirdness. (Because which weird things are needful change over time!) We should gleefully embrace the needful weirdness. But we should equally gleefully drop the needless weirdness.&lt;/p&gt;
&lt;p&gt;What makes Ember special is, by and large, &lt;em&gt;not&lt;/em&gt; the specific technical implementations we’ve landed on.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; What makes Ember valuable is having a coherent top-to-bottom story and a rich community with a commitment to aggressively seeking out shared solutions, and an even deeper commitment to providing good migration paths forward when we change things.&lt;/p&gt;
&lt;p&gt;But here’s the thing: those values are increasingly (if slowly) being embraced &lt;em&gt;outside&lt;/em&gt; the Ember ecosystem as well. Ember can contribute and even lead in many ways here—but only if we start actively embracing the good of other parts of the front-end ecosystem.&lt;/p&gt;
&lt;p&gt;For example: I’ve heard more times than I can count over the last few years that our use of Broccoli.js is really important for Ember, and the reality is… that isn’t true. We could have built on top of just about &lt;em&gt;any&lt;/em&gt; solution, and it would have been &lt;em&gt;fine&lt;/em&gt;. Broccoli &lt;em&gt;does&lt;/em&gt; have some advantages; it also has some real disadvantages (one of which is that we’re the only ones using it!), and we should forthrightly acknowledge those. By the same token, if Webpack is working well for many people, let’s neither trash it in discussion nor ignore it in implementation. Instead, let’s make it easy for people to integrate Webpack into the Ember world.&lt;/p&gt;
&lt;p&gt;That doesn’t oblige us to chuck out our existing build tooling! It just means making our own build pipelines robust enough to interoperate well with other packaging systems. And that’s precisely what the Ember &lt;abbr&gt;CLI&lt;/abbr&gt; team has been doing! This needs to be our pattern across the board going forward.&lt;/p&gt;
&lt;p&gt;It’s truly well and good to have made a call a few years ago, and to be going out of our way to mitigate the costs of churn. At the same time, we need to communicate—to a degree that probably feels like &lt;em&gt;over&lt;/em&gt;communicating to the people who already understand all these decisions!—so that both the original rationales and the current status are accessible to all the people who &lt;em&gt;weren’t&lt;/em&gt; there when the decisions were made.&lt;/p&gt;
&lt;p&gt;Insofar as it’s true that Broccoli and Webpack solve different problems, &lt;em&gt;explaining&lt;/em&gt; how Broccoli and Webpack actually solve meaningfully different problems —or at least, &lt;em&gt;excel&lt;/em&gt; at solving different problems—is one of the most important things we can do as well. Props to Chris Thoburn (&lt;a href="https://twitter.com/runspired"&gt;@runspired&lt;/a&gt;) for doing this in a few different contexts recently, but we need a lot more of it—because it’s one example I think most people both inside and outside the Ember community have just kind of scratched their heads at for a long time (me included).&lt;/p&gt;
&lt;p&gt;Again: I take the Broccoli/Webpack example simply because it’s an obvious one. The broader point is that we need to find ways to embrace the shared solutions which emerge not only in the Ember community but in the front-end ecosystem as a whole, even as we also do the hard work to make our own shared solutions useful to the rest of the front-end ecosystem. That two-way exchange will benefit us, and smooth the paths in for newcomers, and benefit the rest of the ecosystem, too—and that’s a huge win. Because in a very real sense, we front-end developers are all in this together.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Keep your eyes open; you’ll see a blog post announcing that along with a full set of documentation for it sometime in the next month or so!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;To be clear: many, though certainly not all, of those specific implementations I like, but that’s beside the point.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="typescript"></category><category term="emberjs2018"></category></entry><entry><title>Higher-Order Components in Ember.js</title><link href="http://www.chriskrycho.com/2018/higher-order-components-in-emberjs.html" rel="alternate"></link><published>2018-05-26T14:00:00-04:00</published><updated>2018-05-28T06:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-26:/2018/higher-order-components-in-emberjs.html</id><summary type="html">Components as arguments! Components getting yielded! Components everywhere! A powerful way to make your Ember.js components more flexible and composeable.
</summary><content type="html">&lt;p&gt;One of the most powerful patterns in programming is the idea of &lt;em&gt;higher-order functions&lt;/em&gt;: functions which can take other functions as arguments or return them as their return values. If you’ve spent much time at all working in JavaScript, you’ve certainly encountered these—whether you’re using &lt;code&gt;Array.map&lt;/code&gt; to transform the values in an array, or passing a function as an argument to an event handler.&lt;/p&gt;
&lt;p&gt;The same pattern is incredibly useful in building components, and most modern front-end frameworks support it—including Ember.js! (In React, the pattern as a whole is often known as the &lt;code&gt;renderProps&lt;/code&gt; pattern, for the way you most often accomplish it. It’s all the same idea, though!)&lt;/p&gt;
&lt;p&gt;In this little post, I’ll show you how to build a small “higher-order component” in Ember.js, hopefully demystifying that term a little bit a long the way. (If you just want to see how the pieces fit together, you can see the finished app &lt;a href="https://github.com/chriskrycho/ember-hoc-example"&gt;in this repo&lt;/a&gt;.)&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;I’m going to be using classes and decorators throughout. Both are very much ready-to-go in Ember, and I commend them to you! I’m also going to be using some of the new &lt;a href="https://emberjs.com/blog/2018/04/13/ember-3-1-released.html#toc_introducing-optional-features-3-of-4"&gt;optional features&lt;/a&gt; available in Ember 3.1+ to use template-only components!&lt;/p&gt;
&lt;p&gt;Note that one of the most important consequences of this is that arguments have to be referenced as &lt;code&gt;@theArgumentName&lt;/code&gt; rather than just &lt;code&gt;theArgumentName&lt;/code&gt; in templates. The reason is precisely that there is no backing JavaScript component. In old-school Ember.js components, &lt;code&gt;{{theArgumentName}}&lt;/code&gt; is implicitly turned into &lt;code&gt;{{this.argumentName}}&lt;/code&gt;, which does a lookup on the backing component. In Glimmer-style components—of which these are the first part—arguments live on a designated &lt;code&gt;args&lt;/code&gt; property and are accessible in templates via &lt;code&gt;@theArgumentName&lt;/code&gt; instead.&lt;/p&gt;
&lt;/aside&gt;
&lt;section id="higher-order-components-what-are-they" class="level2"&gt;
&lt;h2&gt;Higher-Order Components, What Are They&lt;/h2&gt;
&lt;p&gt;Just like with a “higher-order function,” all we mean when we talk about a “higher-order component” is a component which takes other components as arguments, returns other components itself (in Ember’s case via &lt;code&gt;yield&lt;/code&gt; in a template), or both.&lt;/p&gt;
&lt;p&gt;The thing we’re actually going to build here is a “modal” which accepts an optional button as an arguments, and which yields out a component for dividing the modal into sections visually so you can pass your own content in and have it look just right. This is closely based on a component my colleagues and I at Olo built recently, just with some of our specific details stripped away to get at the actually important bits. Here’s what it looks like in practice:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/hoc-rendered.png" alt="a modal with sectioned text and a close button" /&gt;&lt;figcaption&gt;a modal with sectioned text and a close button&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The goal for the button arguments is to let the modal be able to render the button the caller passes in, while not being concerned with the &lt;em&gt;functionality&lt;/em&gt; of the button. Otherwise, we’d have to tie the “API” of the modal to the details of button behavior, bind more actions into it, etc.&lt;/p&gt;
&lt;p&gt;The goal for the yielded sectioning component is for whatever is rendering the modal itself to be able to pass content in and get it chunked up however the modal decides is appropriate—the modal can display its own styles, etc.—without having to worry about the details of applying classes or sectioning up the content itself.&lt;/p&gt;
&lt;p&gt;In short, we want to &lt;em&gt;separate our concerns&lt;/em&gt;: the modal knows how to lay out its contents and where to put buttons, but it doesn’t want to have to know &lt;em&gt;anything&lt;/em&gt; about what the buttons do. The most complicated interaction in the world could be going on, and the modal won’t have to care. Likewise, things &lt;em&gt;using&lt;/em&gt; the modal can pass content and buttons into it, and let the modal manage its own layout and so on without having to be concerned with the details of that. So what does that look like in practice?&lt;/p&gt;
&lt;p&gt;The approach I use here builds on the “contextual components” pattern in Ember.js. The main new idea is that the &lt;em&gt;context&lt;/em&gt; includes components!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="implementing-it" class="level2"&gt;
&lt;h2&gt;Implementing It&lt;/h2&gt;
&lt;p&gt;We have three components here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a button&lt;/li&gt;
&lt;li&gt;a modal&lt;/li&gt;
&lt;li&gt;a modal section&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since Ember.js still (for now!) requires component names to be at least two words separated by a dash, we’ll just call these &lt;code&gt;x-button&lt;/code&gt;, &lt;code&gt;x-modal&lt;/code&gt;, and &lt;code&gt;x-modal-section&lt;/code&gt;.&lt;/p&gt;
&lt;section id="x-button" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;x-button&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The button component, we’ll keep pretty simple: it’s just a button element with a given label and an action bound to it:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;&amp;lt;button class={{@buttonClass}} type=&amp;#39;button&amp;#39; {{action @onClick}}&amp;gt;
  {{@label}}
&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="x-modal" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;x-modal&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;x-modal&lt;/code&gt; has the meat of the implementation.&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;&amp;lt;div class=&amp;#39;modal-backdrop&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;#39;modal&amp;#39;&amp;gt;
  &amp;lt;div class=&amp;#39;modal-content&amp;#39;&amp;gt;
    {{yield (hash section=(component &amp;#39;x-modal-section&amp;#39;))}}
  &amp;lt;/div&amp;gt;

  {{#if @button}}
    {{component @button buttonClass=&amp;#39;modal-button&amp;#39;}}
  {{/if}}
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two things two notice here are the &lt;code&gt;yield&lt;/code&gt; and the &lt;code&gt;component&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;yield&lt;/code&gt; statement yields a &lt;a href="https://www.emberjs.com/api/ember/3.1/classes/Ember.Templates.helpers"&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/a&gt; with one property: &lt;code&gt;section&lt;/code&gt;. Yielding a hash is a convenient pattern in general. Here, we’re doing it to make the &lt;abbr&gt;API&lt;/abbr&gt; nicer for users of this component. It means that if we name the yielded value &lt;code&gt;|modal|&lt;/code&gt; when we invoke this, we’ll be able to write &lt;code&gt;modal.section&lt;/code&gt; to name this particular yielded item. (You’ll see exactly this below.)&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;component&lt;/code&gt; helper twice: once as the value of the &lt;code&gt;section&lt;/code&gt; key in the yielded hash, and once for the &lt;code&gt;button&lt;/code&gt; below. In both cases, the helper does the same thing: invokes a component! While the most common way to render a component is with its name, inline—like &lt;code&gt;{{x-modal}}&lt;/code&gt;—you can always render it with the &lt;code&gt;component&lt;/code&gt; helper and the name as a string: &lt;code&gt;{{component 'x-modal'}}&lt;/code&gt;. This lets you render different components dynamically!&lt;/p&gt;
&lt;p&gt;Let’s remember our initial analogy: the same way you can pass different functions to a higher-order function like &lt;code&gt;Array.prototype.map&lt;/code&gt;, you can pass different components to a higher-order component like our &lt;code&gt;x-modal&lt;/code&gt; here. And just like you can &lt;em&gt;return&lt;/em&gt; a function from a higher-order function, we can &lt;em&gt;yield&lt;/em&gt; a component from a higher-order component. Just like higher-order functions, the function passed in or returned just has to have the right shape.&lt;/p&gt;
&lt;p&gt;For example, the argument to &lt;code&gt;Array.prototype.map&lt;/code&gt; needs to be a function which performs an operation on a single item in the array (and maybe also the index) and hands back the result of that operation. Similarly, the &lt;code&gt;button&lt;/code&gt; argument to our &lt;code&gt;x-modal&lt;/code&gt; needs to accept a &lt;code&gt;buttonClass&lt;/code&gt; component so that the modal can apply some styling to it. The same thing holds for the component being yielded back out: it has an &lt;abbr&gt;API&lt;/abbr&gt; you should use to invoke it, just like any other.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of this gets at something really important: you can think of components as just being &lt;em&gt;pure functions&lt;/em&gt;: they take some input in the form of arguments, and give you the output of what they &lt;em&gt;render&lt;/em&gt; and what they &lt;em&gt;yield&lt;/em&gt;—and they always give you the same rendered &lt;abbr&gt;HTML&lt;/abbr&gt; and the same yielded values for the same inputs. They’re just functions!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="x-modal-section" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;x-modal-section&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;x-modal-section&lt;/code&gt; component is the simplest of all of these: it has no behavior, just some styling to actually chunk up the content:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;&amp;lt;div class=&amp;#39;modal-section&amp;#39;&amp;gt;
  {{yield}}
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="application-controller-and-template" class="level3"&gt;
&lt;h3&gt;Application controller and template&lt;/h3&gt;
&lt;p&gt;Now, let’s use in the context of the application template, where we can see how the pieces all fit together. First, let’s see the application controller backing it—nothing unusual here, just a simple toggle to show or hide the modal.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Controller from &amp;quot;@ember/controller&amp;quot;;
import { action } from &amp;quot;@ember-decorators/object&amp;quot;;

export default class Application extends Controller {
  constructor() {
    super(...arguments);
    this.showModal = false;
  }

  @action
  showIt() {
    this.set(&amp;quot;showModal&amp;quot;, true);
  }

  @action
  hideIt() {
    this.set(&amp;quot;showModal&amp;quot;, false);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now for the interesting bit—the template where we invoke &lt;code&gt;x-modal&lt;/code&gt; and use its higher-order-component functionality:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;{{#if showModal}}
  {{#x-modal
      button=(component &amp;#39;x-button&amp;#39;
        label=&amp;#39;Close modal!&amp;#39;
        onClick=(action &amp;#39;hideIt&amp;#39;)
      )
      as |modal|
  }}
    {{#modal.section}}
      Here is some content!
    {{/modal.section}}

    {{#modal.section}}
      Here is some other content.
    {{/modal.section}}

    {{#modal.section}}
      &amp;lt;p&amp;gt;The content can have its own sections, as you&amp;#39;d expect!&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Nothing crazy going on here. Just a normal template!&amp;lt;/p&amp;gt;
    {{/modal.section}}
  {{/x-modal}}
{{/if}}

&amp;lt;button class=&amp;#39;button&amp;#39; {{action &amp;#39;showIt&amp;#39;}}&amp;gt;Show modal&amp;lt;/button&amp;gt;

&amp;lt;!-- some other content on the page --&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We invoke the block form of &lt;code&gt;x-modal&lt;/code&gt; just like we would any block component, and we get back the thing it yields with &lt;code&gt;as |modal|&lt;/code&gt;. However, one of the arguments we pass to it is a component. But &lt;code&gt;modal&lt;/code&gt; is a &lt;code&gt;hash&lt;/code&gt; (an object!) with a property named &lt;code&gt;section&lt;/code&gt;, which is the &lt;code&gt;x-modal-section&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;Again, you can think of this like calling a function with one function as an argument and getting another function back as its return value—that returned function being something we could call over and over again once we had it.&lt;/p&gt;
&lt;p&gt;Here, we “call the function”—invoke the &lt;code&gt;x-modal&lt;/code&gt; component—with &lt;code&gt;component 'x-button'&lt;/code&gt; as its argument, and the returned &lt;code&gt;modal.section&lt;/code&gt; is a component we can invoke like a normal component.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; We could even pass it into some &lt;em&gt;other&lt;/em&gt; component itself if we so desired.&lt;/p&gt;
&lt;p&gt;And that’s really all there is to it!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;“Higher-order components” aren’t necessarily something you need all the time, but they’re really convenient and very powerful when you &lt;em&gt;do&lt;/em&gt; need them. They’re also a lot less complicated than the name might seem! Components are just things you can pass around in the context of a component template—they’re the &lt;em&gt;functions&lt;/em&gt; of Handlebars.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Splitting things into components like this does increase complexity, and in particular it can increase the mental overhead of keeping track of how the pieces fit together. However, they also let us cleanly separate different pieces of functionality from each other. Doing it this way means that our modal can be concerned about &lt;em&gt;positioning&lt;/em&gt; a button without needing to expose an &lt;abbr&gt;API&lt;/abbr&gt; for all of the button’s own mechanics for handling clicks and performing whatever actions necessary. That makes our modal &lt;em&gt;and&lt;/em&gt; our button way more reusable across our application. The button can be used &lt;em&gt;wherever&lt;/em&gt; a button is useful, and the modal doesn’t need to know or care anything about it. Likewise, the button has no need to know anything about the context where it’s being used; from the button component’s perspective, it just gets wired up to some actions as usual. The same thing goes for the modal sections: they let us abstract over how the DOM is laid out, what classes are applied to it, and so on—they chunk up the modal, but the modal itself maintains responsibility for how that chunking up happens. And the caller doesn’t even &lt;em&gt;have&lt;/em&gt; to use that; it’s just a tool that’s available for that purpose.&lt;/p&gt;
&lt;p&gt;To sum it all up, I’ll just reiterate my earlier description: components are just like pure functions: the same inputs give you the same outputs—and, just like functions, those inputs and outputs can be other functions, that is, other components.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you want a good way to document the things a component &lt;code&gt;yield&lt;/code&gt;s, check out &lt;a href="https://ember-learn.github.io/ember-cli-addon-docs/latest/docs/api/components/docs-demo"&gt;ember-cli-addon-docs&lt;/a&gt;, which can read an &lt;code&gt;@yield&lt;/code&gt; JSDoc annotation.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;And it could just as well be a component; the top-level controller template is just where we put our main app functionality.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;We could also simplify this since we’re only returning one component, and if we had the full Glimmer component story, this could look &lt;em&gt;very&lt;/em&gt; nice:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;&amp;lt;Modal @button={{component &amp;#39;Button&amp;#39;}} as |Section|&amp;gt;
  &amp;lt;Section&amp;gt;
    Some content!
  &amp;lt;/Section&amp;gt;
  &amp;lt;Section&amp;gt;
    Some more content!
  &amp;lt;/Section&amp;gt;

  &amp;lt;Section&amp;gt;
    &amp;lt;p&amp;gt;The content can have its own sections, as you&amp;#39;d expect!&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;Nothing crazy going on here. Just a normal template!&amp;lt;/p&amp;gt;
  &amp;lt;/Section&amp;gt;
&amp;lt;/Modal&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;If you’re inclined to “well actually” me about &lt;em&gt;helpers&lt;/em&gt; being the real functions of Handlebars templates: in the Glimmer &lt;abbr&gt;VM&lt;/abbr&gt; world, helpers are just a kind of component.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="typescript"></category></entry><entry><title>#EmberJS2018, Part 3</title><link href="http://www.chriskrycho.com/2018/emberjs2018-part-3.html" rel="alternate"></link><published>2018-05-23T07:30:00-04:00</published><updated>2018-05-23T07:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-23:/2018/emberjs2018-part-3.html</id><summary type="html">There are often good reasons to have private discussions in any kind of core team—but they should not be the default. The default should be public.</summary><content type="html">&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;One of the small changes I think would substantially improve the Ember.js ecosystem is: &lt;strong&gt;defaulting to public for discussions&lt;/strong&gt; among the core team. Indeed: for any open-source project with community involvement like Ember.js has, that should be the default. Not the &lt;em&gt;only&lt;/em&gt; option, just the default option.&lt;/p&gt;
&lt;p&gt;There is plenty of value in having private channels for discussion in contexts like this. Sometimes you have to deal with something awkward or socially difficult. Sometimes you have already taken the community’s input and just have to come to a decision about what to do on something. Private channels are useful.&lt;/p&gt;
&lt;p&gt;But: they shouldn’t be the default. They should be what you turn to when you’re in one of those particular kinds of situations which require it. The default should be public discussion and interaction.&lt;/p&gt;
&lt;p&gt;Over the last year, the maintainer-ship (and therefore decision-making) of ember-cli-typescript and the surrounding TypeScript ecosystem has grown from being pretty much just me to being a small group of four of us: Derek Wickern, Dan Freeman, James Davis, and me. We have the “final say,” so to speak, on the things we’re doing with the addon and the typings and so on. (What that actually means in practice is mostly just we all try to shoulder the burden of staying on top of pull requests.) And we have a private channel for discussions as a “core team” for projects in the &lt;a href="https://github.com/typed-ember"&gt;typed-ember&lt;/a&gt; organization.&lt;/p&gt;
&lt;p&gt;But: it’s not the default. It’s what we turn to when we’re in one of those particular kinds of situations which require it. The default is public discussion and interaction.&lt;/p&gt;
&lt;p&gt;And this isn’t just an unspoken norm or something. As a team, we all explicitly agreed that we default to public. Pretty much the only times we chat in our private channel is if we’re figuring out how to diffuse an awkward situation kindly, or if we’re adding someone else to the team. Otherwise, we try to have all our discussions in the GitHub issues for the projects or the &lt;code&gt;#topic-typescript&lt;/code&gt; room in the Ember Community Slack.&lt;/p&gt;
&lt;p&gt;This has a few major effects, as I see it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No one should feel left out or in the dark about what we’re up to. Even if we’re hashing out crazy-seeming ideas for how to move stuff forward, it’s all there for everyone to see. This includes neat things like Dan Freeman’s proof-of-concept on &lt;a href="https://twitter.com/__dfreeman/status/994410180661170177"&gt;type-checked templates&lt;/a&gt;, or our mad sprint (as a team!) to get some core improvements landed before I gave a workshop at EmberConf, or anything else we’re going after.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’re obviously available for input on things as people have questions, because we’re interacting with &lt;em&gt;each other&lt;/em&gt; in those public forums. And if we’d like to start moving some of the oft-repeated questions over to the &lt;a href="https://discuss.emberjs.com"&gt;Ember Discourse&lt;/a&gt; or to &lt;a href="https://stackoverflow.com/questions/tagged/ember.js"&gt;Stack Overflow&lt;/a&gt;, it’s still really helpful for people who &lt;em&gt;are&lt;/em&gt; on the Slack to see that we’re there and available for help.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We get to see the regular pain points others run into. That often turns into issues, priorities, etc. for us as a group. The slowly growing issue &lt;a href="https://github.com/typed-ember/ember-cli-typescript/issues/170"&gt;tracking things we need to document&lt;/a&gt; is essentially a direct product of that constant cycle of interaction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We get the benefit of input from others! If we’ve missed something, or simply failed to think of something, others in the community often haven’t. One prime example of this: the “registry” strategy we use for making things like Ember Data store, adapter, etc. lookups work came out of conversations with a community member (&lt;a href="https://github.com/maerten"&gt;Maarten Veenstra&lt;/a&gt;) which happened many months before we were in a spot where we could land that kind of thing—and initially I was pretty skeptical of it, but they were totally right, and it’s now core to how Ember’s typings work!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recommend—very strongly—that the Ember.js core team adopt the same strategy. Teams &lt;em&gt;do&lt;/em&gt; need private channels sometimes. But they shouldn’t be the default. They should be for those particular circumstances which &lt;em&gt;require&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;The biggest things I think could come out of this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A greater confidence from within the Ember.js community about what the core team is up to and where we’re going. Technical leadership seems to me to be about 10% technical brilliance and 90% clear communication. We have loads of technical brilliance; we need more communication!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More confidence in the trajectory of Ember.js from &lt;em&gt;outside&lt;/em&gt; its existing community. Seeing that there is active leadership is essential for people to have confidence that choosing Ember.js is a good choice both today and for the medium-to-long-term.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we need both of those—a lot—for Ember.js to continue to grow and thrive in the years ahead!&lt;/p&gt;
</content><category term="emberjs"></category><category term="emberjs2018"></category><category term="javascript"></category><category term="leadership"></category></entry><entry><title>How To Bundle TypeScript Type Definitions</title><link href="http://www.chriskrycho.com/2018/how-to-bundle-typescript-type-definitions.html" rel="alternate"></link><published>2018-05-21T07:00:00-04:00</published><updated>2018-05-21T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-21:/2018/how-to-bundle-typescript-type-definitions.html</id><summary type="html">Create a custom build that puts the type definitions in the root of your package, instead of putting them alongside the compiled JavaScript files. Because if your consumers have to use compiler options, they will be very sad.
</summary><content type="html">&lt;p&gt;One of the lessons that led to the True Myth 2.0.0 release was the difficulty of consuming the library under its original packaging strategy. There are a few things that are &lt;em&gt;not&lt;/em&gt; obvious about how TypeScript type definitions get consumed when you’re first starting out, and a few things that seem like they should work &lt;em&gt;don’t&lt;/em&gt;. This is my attempt to help &lt;em&gt;you&lt;/em&gt; (and the people consuming your TypeScript libraries!) avoid the same pain I (and the people consuming mine) have felt.&lt;/p&gt;
&lt;section id="the-problem" class="level2"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The problem is the result of the ways TypeScript resolves type definitions, and the kinds of type definition files it can (and cannot) generate for you.&lt;/p&gt;
&lt;p&gt;TypeScript only properly resolves two kinds of type definition distributions automatically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A single-file type definition, located anywhere in the package as long as &lt;code&gt;package.json&lt;/code&gt; has a &lt;code&gt;types&lt;/code&gt; key pointing to it.&lt;/li&gt;
&lt;li&gt;Type definition module files in the &lt;em&gt;root&lt;/em&gt; of the distributed package, mapping to the distributed modules of the package (wherever they live).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TypeScript will only generate a single-file type definition for the &lt;abbr&gt;AMD&lt;/abbr&gt; and SystemJS standards—which &lt;em&gt;cannot&lt;/em&gt; be imported with ES6 module imports. If you want to use an output mode which generates a JS file per originating TS file—Node, ES6, etc.—you will get individual TS module file type definitions as well. It is not that the type definition files themselves can’t be written to support Node or ES6-style module layouts in a single-file definition. To the contrary: hand-written definitions for libraries &lt;em&gt;often&lt;/em&gt; do just that. It is just a matter of what the compiler supports generating.&lt;/p&gt;
&lt;p&gt;The net of this is: if you want module type definitions to go with ES6 modules to import, they &lt;em&gt;must&lt;/em&gt; live in the root of your distributed bundle.&lt;/p&gt;
&lt;p&gt;However, most libraries I’m familiar with—because I work in the &lt;em&gt;browser&lt;/em&gt; ecosystem, not the &lt;em&gt;Node&lt;/em&gt; ecosystem—do not work with the root of their repository as the place where their source lives, or for the place where the output of their build process lives. It’s far more common to have a &lt;code&gt;src&lt;/code&gt; directory and &lt;code&gt;dist&lt;/code&gt; or &lt;code&gt;build&lt;/code&gt; directory, the latter of which is where the build artifacts go.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solution" class="level2"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;The solution—which we shipped for ember-cli-typescript some time ago, and which I switched to this past week for True Myth—is to have separate build artifacts for the type definitions and the JavaScript output. Put the JavaScript output in the &lt;code&gt;dist&lt;/code&gt; or &lt;code&gt;build&lt;/code&gt; directory as usual, without type declarations. Then, put the type definitions in the root of the repository.&lt;/p&gt;
&lt;p&gt;In the case of both ember-cli-typescript and True Myth, we’re doing the type generation step in the &lt;code&gt;prepublishOnly&lt;/code&gt; hook and cleaning it up in the &lt;code&gt;postpublish&lt;/code&gt; hook. Your &lt;code&gt;package.json&lt;/code&gt; might look like something like this, assuming your &lt;code&gt;tsconfig.json&lt;/code&gt; is set to generate JavaScript artifacts in &lt;code&gt;dist&lt;/code&gt; as your build directory.&lt;/p&gt;
&lt;pre class="json"&gt;&lt;code&gt;{
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;ts:js&amp;quot;: &amp;quot;tsc&amp;quot;,
    &amp;quot;ts:defs&amp;quot;: &amp;quot;tsc --declaration --outDir . --emitDeclarationOnly&amp;quot;,
    &amp;quot;prepublishOnly&amp;quot;: &amp;quot;yarn ts:js &amp;amp;&amp;amp; yarn ts:defs&amp;quot;,
    &amp;quot;postpublish&amp;quot;: &amp;quot;rm -r *.d.ts dist&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(If you have nested modules, your &lt;code&gt;postpublish&lt;/code&gt; hook there should clean up the generated folders as well as the generated files.)&lt;/p&gt;
&lt;p&gt;You can see the full setup I built for True Myth—which generates type defs along these lines, as well as both CommonJS and ES6 modules—in the repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/package.json"&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;—note especially the &lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/package.json#L32:L42"&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;&lt;/code&gt;&lt;/a&gt; configuration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/tsconfig.json"&gt;root &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt;, with derived&lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/ts/cjs.tsconfig.json"&gt;CommonJS &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/ts/es.tsconfig.json"&gt;ES6 &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt; files.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;This isn’t an especially complicated thing, but the scenario leading to the need for this is common enough, and the dance frustrating enough and easy enough to get wrong, that I really wish the TypeScript team would make it possible to generate single-file type definitions for &lt;em&gt;all&lt;/em&gt; kinds of JavaScript module systems.&lt;/p&gt;
&lt;/section&gt;
</content><category term="typescript"></category><category term="programming languages"></category><category term="true myth"></category></entry><entry><title>Rust is Incredibly Productive for CLIs</title><link href="http://www.chriskrycho.com/2018/rust-is-incredibly-productive-for-clis.html" rel="alternate"></link><published>2018-05-20T08:35:00-04:00</published><updated>2018-05-20T08:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-20:/2018/rust-is-incredibly-productive-for-clis.html</id><summary type="html">I built a little tool in Rust to convert an Evernote export file to Markdown. It was impressively easy.
</summary><content type="html">&lt;p&gt;There are &lt;em&gt;reasons&lt;/em&gt; I’m a Rust fanboy. One of them is the kind of thing I proved out to myself today—again, because I’ve had this experience before, albeit not with anything quite this “complicated.”&lt;/p&gt;
&lt;p&gt;I built &lt;a href="https://github.com/chriskrycho/evernote2md"&gt;a little tool&lt;/a&gt; in Rust to convert Evernote exports (in their custom &lt;code&gt;.enex&lt;/code&gt; &lt;abbr&gt;XML&lt;/abbr&gt; format) to Markdown files with &lt;abbr&gt;YAML&lt;/abbr&gt; metadata headers—mostly just to see how quickly and effectively I could do it, because I’ve never actually had an excuse to use &lt;a href="https://serde.rs"&gt;Serde&lt;/a&gt; and I thought this might be a nice spot to try it.&lt;/p&gt;
&lt;p&gt;There’s a lot this little library &lt;em&gt;doesn’t&lt;/em&gt; do. (Like include the creation and modification timestamps in the header, for example.) But all of those things would be &lt;em&gt;very&lt;/em&gt; straightforward to do. I built this functioning little “script” in about two hours. For context: I’ve taken multiple passes at this in Python—which in the way people normally think about these things should be way &lt;em&gt;easier&lt;/em&gt;—and I’ve failed both times.&lt;/p&gt;
&lt;p&gt;Rust’s compiler just helps you out &lt;em&gt;so much&lt;/em&gt; along the way, not only with the type-checking but with the really amazing metaprogramming capabilities you get with it. Being able to slap &lt;code&gt;#[derive(Deserialize)]&lt;/code&gt; on a struct and a couple attributes on struct fields and having it Just Work™ to deserialize XML into local types is mind-blowing. (The only thing I know of that’s playing the same game is F&lt;sup&gt;♯&lt;/sup&gt; type-providers. I’d love to hear about similar capabilities in other languages!)&lt;/p&gt;
&lt;p&gt;I’m basically at the point where if I need a small command-line tool, I write it in Rust, &lt;em&gt;not&lt;/em&gt; in a conventional scripting language like Python, because the benefits I get more than outweigh whatever small extra amount of mental overhead there is. And there’s not much of that mental overhead anyway for this kind of thing! As you can see &lt;a href="https://github.com/chriskrycho/evernote2md/blob/master/src/main.rs#L71"&gt;in the actual code&lt;/a&gt;, I make free and liberal use of &lt;a href="https://doc.rust-lang.org/1.26.0/std/option/enum.Option.html"&gt;&lt;code&gt;expect&lt;/code&gt;&lt;/a&gt; for this kind of tool.&lt;/p&gt;
&lt;p&gt;It’s also hard to oversell the ecosystem—even as relatively nascent as it is compared to some much older languages, the tools which exist are just really good. This project uses &lt;a href="https://serde.rs"&gt;Serde&lt;/a&gt; for deserializing from &lt;abbr&gt;XML&lt;/abbr&gt; and serializing to &lt;abbr&gt;YAML&lt;/abbr&gt;; &lt;a href="https://github.com/rust-lang/regex"&gt;Regex&lt;/a&gt;; &lt;a href="https://clap.rs"&gt;Clap&lt;/a&gt; for command line parsing; a nice little wrapper around &lt;a href="https://pandoc.org"&gt;pandoc&lt;/a&gt;; and, superpower even among superpowers, &lt;a href="https://docs.rs/rayon/1.0.1/rayon/"&gt;Rayon&lt;/a&gt;: free parallelization.&lt;/p&gt;
&lt;p&gt;Rust is, in short, &lt;em&gt;very productive&lt;/em&gt; for things in this space. Far more than you might expect from the billing. Yes, it’s a “systems programming language” and you can write operating systems with it. But it’s also just a really great tool for &lt;em&gt;all sorts&lt;/em&gt; of domains, including little &lt;abbr&gt;CLI&lt;/abbr&gt; tools like this one.&lt;/p&gt;
</content><category term="Rust"></category><category term="programming languages"></category></entry><entry><title>Destructuring with True Myth 1.3+</title><link href="http://www.chriskrycho.com/2018/destructuring-with-true-myth-13.html" rel="alternate"></link><published>2018-05-19T12:20:00-04:00</published><updated>2018-05-19T12:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-19:/2018/destructuring-with-true-myth-13.html</id><summary type="html">Making the value and error properties available means you can now use destructuring.
</summary><content type="html">&lt;p&gt;I just realized a neat capability that &lt;a href="#"&gt;True Myth 1.3+&lt;/a&gt; unlocks: you can now use destructuring of the &lt;code&gt;value&lt;/code&gt; property on &lt;code&gt;Just&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; and the &lt;code&gt;error&lt;/code&gt; property on &lt;code&gt;Error&lt;/code&gt; instances.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;Maybe&lt;/code&gt; instances:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { just, nothing, isJust } from &amp;#39;true-myth/maybe&amp;#39;;

const maybeStrings: Maybe&amp;lt;string&amp;gt;[] =
  [just(&amp;#39;hello&amp;#39;), nothing(), just(&amp;#39;bye&amp;#39;), nothing()];

const lengths = maybeStrings
  .filter(Maybe.isJust)
  .map(({ value }) =&amp;gt; value.length);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;Result&lt;/code&gt; instances:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Result, { ok, err } from &amp;#39;true-myth/result&amp;#39;;

const results: Result&amp;lt;number, string&amp;gt;[] =
  [ok(12), err(&amp;#39;wat&amp;#39;), err(&amp;#39;oh teh noes&amp;#39;), ok(42)];

const okDoubles = results
  .filter(Result.isOk)
  .map(({ value }) =&amp;gt; value * 2);

const errLengths = results
  .filter(Result.isErr)
  .map(({ error }) =&amp;gt; error.length);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;None of this is especially novel or anything. It was just a neat thing to realize after the fact, because it wasn’t something I had in mind when I was making these changes!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This was a very strange experience. There’s nothing quite like learning something about a library &lt;em&gt;you wrote&lt;/em&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="typescript"></category><category term="open source software"></category><category term="libraries"></category><category term="true myth"></category></entry><entry><title>The Chinese Room Argument</title><link href="http://www.chriskrycho.com/2018/the-chinese-room-argument.html" rel="alternate"></link><published>2018-05-19T11:20:00-04:00</published><updated>2018-05-19T11:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-19:/2018/the-chinese-room-argument.html</id><summary type="html">If “formal operations on symbols cannot produce thought,” what (if anything) does that say about today’s “strong AI” projects and the Turing test itself?
</summary><content type="html">&lt;p&gt;I took a bunch of half days last week, because &lt;em&gt;goodness&lt;/em&gt; but I was tired. Too long running at full-throttle, and &lt;a href="http://www.chriskrycho.com/2018/on-steam-specifically-running-out-of-it.html" title="On Steam (Specifically, Running Out Of It)"&gt;I’d been running out of steam&lt;/a&gt; as a result. And what did I do instead, that ended up being so effective in &lt;a href="https://www.chriskrycho.com/2018/vacation-as-recharging.html" title="Vacation as Recharging"&gt;recharging&lt;/a&gt;? Well, mostly… read literature reviews on interesting topics in philosophy, at least for the first few days. Dear reader, I am a nerd. But I thought I’d share a few of the thoughts I jotted down in my notebook from that reading.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="the-chinese-room-argument" class="level2"&gt;
&lt;h2&gt;“The Chinese Room Argument”&lt;/h2&gt;
&lt;p&gt;This was an argument whose &lt;em&gt;influence&lt;/em&gt; I’ve certainly encountered, but the actual content of which I was totally unfamiliar with.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The argument, in &lt;em&gt;exceedingly&lt;/em&gt; brief summary, is that “formal operations on symbols cannot produce thought”—that syntax is insufficient for conveying semantics. Searle made the argument by way of a thought experiment; a reference in a review on “Thought Experiments” I may post about later is how I found my way to the discussion. That thought experiment supposes a man being handed symbols (under a door, perhaps) which are questions in Chinese, who has a set of rules for constructing correct answers to those questions, also in Chinese—but the man himself, however much he gives every &lt;em&gt;appearance&lt;/em&gt; of knowing Chinese to the person passing in questions by way of the answers he gives, does not in fact know Chinese. He simply has a set of rules that allow him to give the appearance of knowledge. The Chinese Room argument, in other words, is a(n attempted) refutation of the &lt;a href="https://en.m.wikipedia.org/wiki/Turing_test"&gt;Turing Test&lt;/a&gt; as a metric for evaluating intelligence.&lt;/p&gt;
&lt;p&gt;The rejoinders to this are varied, of course, and I encourage you simply to follow the link above and read the summary—it’s good.&lt;/p&gt;
&lt;p&gt;There were two particularly interesting points to me in reading this summary: the Churchland response, and the Other Minds response. To these I’ll add a quick note of my own.&lt;/p&gt;
&lt;section id="the-churchland-response" class="level3"&gt;
&lt;h3&gt;1: The Churchland response&lt;/h3&gt;
&lt;p&gt;Searle’s argument specifically addressed an approach to &lt;abbr title="artificial intelligence"&gt;AI&lt;/abbr&gt; (and especially so-called “strong &lt;abbr title="artificial intelligence"&gt;AI&lt;/abbr&gt;,” i.e. &lt;abbr title="artificial intelligence"&gt;AI&lt;/abbr&gt; that is genuinely intelligent) that was very much in vogue when he wrote the article in the 1980s, but which is very much &lt;em&gt;out&lt;/em&gt; of vogue now: rule-driven computation. One of the responses, which looks rather prescient in retrospect, was the Churchland reply that the brain is not a symbolic computation machine (i.e. a computer as we tend to think of it) but “a vector transformer”… which is a precise description of the “neural network”-based &lt;abbr title="artificial intelligence"&gt;AI&lt;/abbr&gt; that is now dominating research into e.g. self-driving cars and so on.&lt;/p&gt;
&lt;p&gt;The main point of interest here is not so much whether the Churchlands were correct in their description of the brain’s behavior, but in their point that any hypothesis about neural networks is &lt;em&gt;not&lt;/em&gt; defeated by Searle’s thought experiment. Why not? Because neural networks are not performing symbolic computation.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-other-minds-response" class="level3"&gt;
&lt;h3&gt;2: The Other Minds response&lt;/h3&gt;
&lt;p&gt;The other, and perhaps the most challenging response for Searle’s argument, is the “other minds” argument. Whether in other humans, or in intelligent aliens should we encounter them, or—and this is the key—in a genuinely intelligent machine, we attribute the existence other minds &lt;em&gt;intuitively&lt;/em&gt;. Nor do we (in general) doubt our initial conclusion that another mind exists merely because we come to have a greater understanding of the underlying neuro-mechanics. We understand far more about human brains and their relationship to the human mind than we did a hundred years ago; we do not therefore doubt the reality of a human mind. (Most of us, anyway! There are not many hard determinists of the sort who think consciousness is merely an illusion; and there are not many solipsists who think only their own minds exist.)&lt;/p&gt;
&lt;p&gt;But the “other minds” objection runs into other intuitive problems all its own: supposing that we learned an apparently-conscious thing we interacted with were but a cleverly-arranged set of waterworks, we would certainly revise our opinion. Which intuition is to be trusted? Either, neither, or in some strange way both?&lt;/p&gt;
&lt;p&gt;And this gets again at the difficulty of using thought experiments to reason to truth. What a thought experiment can genuinely be said to show is complicated at best. Yet their utility—at least in raising problems, but also in making genuine advances in understanding the world—seems clear.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lowered-standards" class="level3"&gt;
&lt;h3&gt;Lowered standards&lt;/h3&gt;
&lt;p&gt;The other thing I think is worth noting in all these discussions is a point I first saw Alan Jacobs raise a few years ago, but which was only &lt;em&gt;alluded&lt;/em&gt; to in this literature review. Jacobs &lt;a href="http://text-patterns.thenewatlantis.com/2010/08/advice-from-jaron-lanier.html"&gt;cites&lt;/a&gt; Jaron Lanier’s &lt;cite&gt;You Are Not A Gadget&lt;/cite&gt;. (I don’t have a copy of the book, so I’ll reproduce Jacobs’ quotation here.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But the Turing test cuts both ways. You can’t tell if a machine has gotten smarter or if you’ve just lowered your own standards of intelligence to such a degree that the machine seems smart. If you can have a conversation with a simulated person presented by an AI program, can you tell how far you’ve let your sense of personhood degrade in order to make the illusion work for you?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is one of the essential points often left aside. Is the test itself useful? Is “ability to fool a human into think you’re human” &lt;em&gt;actually&lt;/em&gt; pointing at what it means to be intelligent? This is sort of the unspoken aspect of the “other minds” question. But it’s one we &lt;em&gt;ought&lt;/em&gt; to speak when we’re talking about intelligence!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For those of you following along at home: I wrote all but the last 100 or so words of this a week ago and just hadn’t gotten around to publishing it. It’s not the even more absurd contradiction to yesterday’s post on writing plans than it seems. Really. I promise.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It’s occasionally frustrating to find that there is &lt;em&gt;so&lt;/em&gt; much I’m unfamiliar with despite attempting to read broadly and, as best I can, deeply on subjects relevant to the things I’m talking about on Winning Slowly, in programming, etc. One of the great humility-drivers of the last few years is finding that, my best efforts to self-educate notwithstanding, I know &lt;em&gt;very little&lt;/em&gt; even in the fields I care most about.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="AI"></category><category term="ethics"></category><category term="philosophy"></category></entry><entry><title>#EmberJS2018, Part 2</title><link href="http://www.chriskrycho.com/2018/emberjs2018-part-2.html" rel="alternate"></link><published>2018-05-18T22:00:00-04:00</published><updated>2018-05-18T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-18:/2018/emberjs2018-part-2.html</id><summary type="html">A project is only as good as its documentation. Ember’s documentation has come a long way… but it still has a long way to go, and it's essential for helping Ember thrive.
</summary><content type="html">&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-3.html"&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;section id="part-2-double-down-on-docs" class="level2"&gt;
&lt;h2&gt;Part 2: Double down on docs&lt;/h2&gt;
&lt;p&gt;The best project in the world is useless without documentation. As such, my &lt;em&gt;second&lt;/em&gt; major goal for Ember.js this year is to see our documentation story improve dramatically across a number of fronts. This is not just the kind of thing that’s important in principle or because we care about doing the right thing, though those alone &lt;em&gt;are&lt;/em&gt; sufficient motivation. It’s &lt;em&gt;also&lt;/em&gt; absolutely necessary for Ember to grow and thrive in the ways it deserves to in the years ahead.&lt;/p&gt;
&lt;p&gt;To be clear: Ember’s story around documentation is &lt;em&gt;pretty good&lt;/em&gt; and it continues to improve all the time. A few years ago, the base documentation was a mess and even figuring out where to start was hard. Today, Ember.js itself has great guides along with versioned-and-searchable &lt;abbr title="application programming interface"&gt;API&lt;/abbr&gt; documentation. The gaps now are in the &lt;em&gt;surrounding ecosystem&lt;/em&gt; and in the &lt;em&gt;framework internals&lt;/em&gt;. That’s huge progress! But if we want Ember to excel, we need to go after both of these with gusto.&lt;/p&gt;
&lt;section id="the-surrounding-ecosystem" class="level3"&gt;
&lt;h3&gt;The surrounding ecosystem&lt;/h3&gt;
&lt;p&gt;Ember Data, Ember Engines, and perhaps most important Ember &lt;abbr title="command line interface"&gt;CLI&lt;/abbr&gt; and its core dependency Broccoli all &lt;em&gt;desperately&lt;/em&gt; need documentation work just at the “how do you even use these things level.”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Broccoli.js&lt;/strong&gt; in particular is core to pretty much everything in Ember’s ecosystem, and its docs today are in roughly the state Webpack’s were back in its sad 1.0 days. We should take a page out of our own history (and Webpack’s for that matter!) and make it easy for people to use Broccoli in whatever ways their apps need, and that mostly means documenting it!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Oli Griffith’s recent &lt;a href="http://www.oligriffiths.com/broccolijs/"&gt;blog post series&lt;/a&gt; is an incredibly valuable first step in that direction. But we need really solid documentation for &lt;a href="http://broccolijs.com"&gt;Broccoli itself&lt;/a&gt;, and also for the equally important &lt;a href="https://www.npmjs.com/search?q=keywords:broccoli-plugin"&gt;plugin ecosystem&lt;/a&gt; which is the primary way people interact with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The docs for &lt;strong&gt;Ember &lt;abbr&gt;CLI&lt;/abbr&gt;&lt;/strong&gt; itself are &lt;em&gt;decent&lt;/em&gt;, but they’re quite out of date and are about to be a lot more so because of the previously-mentioned packager bits. We need accurate and up-to-date guides and &lt;abbr&gt;API&lt;/abbr&gt; docs for the &lt;abbr&gt;CLI&lt;/abbr&gt;, and we also need clarity about the seams between Ember &lt;abbr&gt;CLI&lt;/abbr&gt; and Broccoli—something I’ve only begun to become clear on after a year of hacking on &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt;! This includes a number of kinds of documentation:
&lt;ul&gt;
&lt;li&gt;up-to-date guides&lt;/li&gt;
&lt;li&gt;complete &lt;abbr&gt;API&lt;/abbr&gt; documentation&lt;/li&gt;
&lt;li&gt;a “cookbook” of common patterns to use&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;Ember Data&lt;/strong&gt; docs need to be split into two parts: one for &lt;em&gt;users&lt;/em&gt; of Ember Data, and one for people building Ember Data integrations and addons. Right now, all the docs are targeted squarely at implementors of Ember Data addons. This means that one of the pieces of the Ember ecosystem that’s in widest use (and is &lt;em&gt;most&lt;/em&gt; distinct from the rest of the JS ecosystem!) is really, really hard to learn. This is the part of the framework I still struggle the most with, despite having worked full time on an Ember app for over two years now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ember Engines&lt;/strong&gt; are really need for manually breaking up your app into discrete sections which can be worked on independently and even loaded dynamically as you need them, and they provide a different level of abstraction than route-splitting and other similar approaches. (Not necessarily better or worse, but different.) Unfortunately, most of the documentation hasn’t been touched in over a year. That means if you &lt;em&gt;want&lt;/em&gt; to use Ember Engines, almost all of the information is in an example here and a Slack conversation there. We need to turn that sort of “tribal knowledge” into actual docs!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be clear, the Ember docs team is doing great work and is already going after a lot of these areas; but there’s an enormous amount of ground to cover. They could use your help! Because if Ember is going to flourish in the year(s) ahead, we need good docs. And users are the people best-placed in all the world to help write docs.&lt;/p&gt;
&lt;p&gt;So &lt;strong&gt;how you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open issues about things you don’t understand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you see an error in the documentation, open a pull request to fix it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Volunteer to proofread or edit as new materials are produced. Yes, seriously: proofreading is &lt;em&gt;incredibly&lt;/em&gt; valuable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Volunteer to write documentation of things you &lt;em&gt;do&lt;/em&gt; understand where you see gaps.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="framework-internals" class="level3"&gt;
&lt;h3&gt;Framework internals&lt;/h3&gt;
&lt;p&gt;Every time I have started poking into Ember’s own codebase—to ship a fix for some small bug, or simply to understand the behavior of my own application—I have found myself stymied by a really serious issue. &lt;em&gt;Almost nothing is documented.&lt;/em&gt; This is true of Ember proper, of Ember Data, of Ember &lt;abbr&gt;CLI&lt;/abbr&gt;, of Broccoli’s internals… Everything I named above as being in need of &lt;em&gt;user&lt;/em&gt;-facing documentation also desperately needs &lt;em&gt;developer&lt;/em&gt;-facing documentation.&lt;/p&gt;
&lt;p&gt;A lot of this happens naturally in projects developed organically by small teams. I’ve seen it in my own current job: the &lt;em&gt;vast&lt;/em&gt; majority of our codebase is without any formal documentation, because it didn’t &lt;em&gt;require&lt;/em&gt; it when we were a much smaller organization working on a much smaller codebase. But no project—whether private or open-source—can grow or thrive unless it becomes possible for new contributors to come in, understand the system as it exists, and start making changes effectively. “Tribal knowledge” is &lt;em&gt;not&lt;/em&gt; a bad thing in some contexts, but it does not scale.&lt;/p&gt;
&lt;p&gt;The Ember.js ecosystem needs developer documentation of several sorts, then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Architecture documents:&lt;/strong&gt; what are the pieces of the framework or library in question, and how do they fit together? This is often the hardest piece to maintain, simply because it changes organically over time, and unlike the next couple examples it doesn’t have an inherent attachment to the code. However, it’s also the piece that’s absolutely the most important, because it’s what gives anyone trying to dive in and contribute the orientation they need to be effective.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“Why” comments:&lt;/strong&gt; The internals of the core libraries very often have good reasons for doing things even in apparently odd ways. However, the reasons for those are &lt;em&gt;very&lt;/em&gt; rarely written down anywhere. This is &lt;em&gt;precisely&lt;/em&gt; what comments are for! If some implementation actually &lt;em&gt;can’t&lt;/em&gt; be simplified in the way it looks like it can, write it down right there in a comment! This will save both you and other developers lots of wasted time with false starts and useless pull requests and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Documentation of private &lt;abbr&gt;API&lt;/abbr&gt;:&lt;/strong&gt; Much of the public-facing &lt;abbr&gt;API&lt;/abbr&gt; for Ember is fairly clear (modulo caveats around completeness and accuracy). However, most internal &lt;abbr&gt;API&lt;/abbr&gt; is essentially entirely undocumented. This makes it &lt;em&gt;extremely&lt;/em&gt; difficult for someone to know how to use the internal &lt;abbr&gt;API&lt;/abbr&gt;s when working on internal code!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these things came home to me pretty sharply as I started poking at the Glimmer VM project to see where and how I can pull together my knowledge of both TypeScript and Rust to drive some of those efforts forward. The core team folks I’ve interacted with have all been &lt;em&gt;extremely&lt;/em&gt; helpful—and that’s always been true all along the way!—but they’re also busy, and taking the time to write down something &lt;em&gt;once&lt;/em&gt; ends up being a major “force multiplier”. You can explain the same thing to multiple different people via multiple different conversations, or you can write it down &lt;em&gt;once&lt;/em&gt; and make it a resource that anyone can use to start working effectively in the system!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you’re a current Ember developer in any part of the ecosystem: &lt;em&gt;start writing down what you know.&lt;/em&gt; If a question comes up more than once, put it in a document somewhere. If nothing else, then you can link to it instead of typing it up one more time in Slack!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re just getting started on developing core Ember functionality: &lt;em&gt;write down what you learn.&lt;/em&gt; If you’re working through some section of the codebase, don’t understand it, and then come to understand it by way of asking questions, add documentation for that! You’ll help the next person coming along behind you!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;In short: please write more things down! We need user-facing and developer-facing documentation; they need to be different and distinct from each other; and we need the whole range in both. That’s an &lt;em&gt;enormous&lt;/em&gt; amount of work, and it’s very different from programming (and therefore harder for many of us).&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But it’s also work that will pay equally enormous dividends in enabling the Ember community to grow in both the &lt;em&gt;number&lt;/em&gt; and the &lt;em&gt;effectiveness&lt;/em&gt; of its contributors—and that’s something we very much need!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Most of Webpack’s bad reputation is long-since undeserved: it &lt;em&gt;was&lt;/em&gt; poorly documented… a few years ago. So was Ember!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’ll let you draw your own conclusions about my own relationship to writing given the absurd number of words I put out on this site.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="typescript"></category><category term="emberjs2018"></category></entry><entry><title>True Myth 1.3.0 and 2.0.0</title><link href="http://www.chriskrycho.com/2018/true-myth-130-and-200.html" rel="alternate"></link><published>2018-05-18T19:15:00-04:00</published><updated>2018-05-18T19:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-18:/2018/true-myth-130-and-200.html</id><summary type="html">Get `value` and `error` directly after type narrowing, make type definitions Just Work™, drop Flow types, and simplify the contents of the distributed build.
</summary><content type="html">&lt;p&gt;Today I released two versions of &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt;: &lt;a href="https://github.com/chriskrycho/true-myth/releases/tag/v1.3.0"&gt;1.3.0&lt;/a&gt; and &lt;a href="https://github.com/chriskrycho/true-myth/releases/tag/v2.0.0"&gt;2.0.0&lt;/a&gt;. You can read the &lt;a href="https://www.chriskrycho.com/2017/announcing-true-myth-10.html"&gt;1.0 announcement&lt;/a&gt; from last November for an overview of the library and a discussion of why you might want to use the library in the first place!&lt;/p&gt;
&lt;p&gt;Since its initial release last November, True Myth has gone through a number of small &lt;a href="https://github.com/chriskrycho/true-myth/releases" title="True Myth releases on GitHub"&gt;feature and bug fix releases&lt;/a&gt;, each of which is more interesting in its own right than 2.0 is—because there are almost no new “features” here, and the changes to the &lt;em&gt;functionality&lt;/em&gt; which are in 2.0 are purely additive and could readily have gone in 1.3 instead.&lt;/p&gt;
&lt;p&gt;In fact, the act of writing that sentence made me realize that there really &lt;em&gt;should&lt;/em&gt; be a 1.3 which people can trivially upgrade to and then take on the changes in 2.0 later.&lt;/p&gt;
&lt;section id="section" class="level2"&gt;
&lt;h2&gt;– 1.3.0 –&lt;/h2&gt;
&lt;p&gt;There are a few very small changes in 1.3 that are just nice ergonomic wins. (You may also be interested in looking back at the &lt;a href="https://github.com/chriskrycho/true-myth/releases"&gt;list of other releases&lt;/a&gt; to see what else has landed since 1.0.)&lt;/p&gt;
&lt;section id="expose-value-and-error" class="level3"&gt;
&lt;h3&gt;Expose &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; property in &lt;code&gt;Maybe.Just&lt;/code&gt; and &lt;code&gt;Result.Ok&lt;/code&gt; instances, and the &lt;code&gt;error&lt;/code&gt; property in &lt;code&gt;Result.Err&lt;/code&gt; instances, are now &lt;em&gt;public, readonly properties&lt;/em&gt; instead of &lt;em&gt;private properties&lt;/em&gt;. I made those private in the initial implementation because I thought it made more sense to expose them via methods, but experience showed that this is a relatively common pattern in practice:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;function dealsWithAMaybe(couldBeAString: Maybe&amp;lt;string&amp;gt;) {
  if (couldBeAString.isJust()) {
    console.log(`It was! ${couldBeAString.unsafelyUnwrap()}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a contrived example of course, but I and my colleagues found in practice that this is a scenario that comes up relatively often, &lt;em&gt;especially&lt;/em&gt; when integrating with existing code rather than writing new code – control flow patterns there tend to assume early-return-on-&lt;code&gt;null&lt;/code&gt; or similar instead.&lt;/p&gt;
&lt;p&gt;So I made a change (leaning on TypeScript’s notion of &lt;a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards" title="“User-Defined Type Guards” in the TypeScript handbook"&gt;“type narrowing”&lt;/a&gt;) so that you don’t have to use &lt;code&gt;unsafelyUnwrap&lt;/code&gt; in this scenario anymore! You can use the method types, the standalone functions, or direct matching against the variants on the property&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

function dealsWithAMaybe(maybe: Maybe&amp;lt;string&amp;gt;) {
  if (maybe.isJust()) {
    console.log(`It was! ${maybe.value}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;code&gt;Result&lt;/code&gt; case this is even nicer (notice that I’m using the variant, rather than a function, to discriminate between the two and narrow the types here):&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Result, { Variant } from &amp;#39;true-myth/result&amp;#39;;

function dealsWithAResult(result: Result&amp;lt;string, Error&amp;gt;) {
  if (result.variant === Variant.Ok) {
    console.log(`Huzzah: ${result.value}`);
  } else {
    console.log(`Alas: ${result.error.message}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically: you now have more options for handling these scenarios, a nicer &lt;abbr title="application programming interface"&gt;API&lt;/abbr&gt;, and—not that it should &lt;em&gt;usually&lt;/em&gt; matter that much, but for whatever it’s worth—better performance by way of doing things with property lookups instead of function invocations in quite a few places.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="static-helper-methods" class="level3"&gt;
&lt;h3&gt;Static helper methods&lt;/h3&gt;
&lt;p&gt;At my friend and collaborator &lt;a href="https://mobile.twitter.com/bmakuh"&gt;Ben Makuh&lt;/a&gt;’s suggestion, I built a couple static helper methods to go with those. These helpers just give you nice abstractions to drop into functional pipelines. For example, you can lean on the type-narrowing capabilities described above while working through a &lt;em&gt;list&lt;/em&gt; of &lt;code&gt;Maybe&lt;/code&gt;s to &lt;em&gt;know&lt;/em&gt; that an item is a &lt;code&gt;Just&lt;/code&gt; and use the new &lt;code&gt;Just.unwrap&lt;/code&gt; static method in the pipeline:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { Just } from &amp;#39;true-myth/maybe&amp;#39;;

function justLengths(maybeStrings: Array&amp;lt;Maybe&amp;lt;string&amp;gt;&amp;gt;) {
  return maybeStrings
    .filter(Maybe.isJust)
.map(Just.unwrap)
    .map(s =&amp;gt; s.length);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Analogous helpers exist for &lt;code&gt;Result&lt;/code&gt; in the form of the &lt;code&gt;Ok.unwrap&lt;/code&gt; and &lt;code&gt;Err.unwrapErr&lt;/code&gt; methods. (&lt;code&gt;Nothing&lt;/code&gt; has no analog for what I hope are obvious reasons!)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tweaks-to-the-variant-properties" class="level3"&gt;
&lt;h3&gt;Tweaks to the &lt;code&gt;variant&lt;/code&gt; properties&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;variant&lt;/code&gt; property on both &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; has changed in two ways:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It is now &lt;code&gt;readonly&lt;/code&gt;. This was an implicit invariant previously—you would break &lt;em&gt;everything&lt;/em&gt; in the library if you changed the &lt;code&gt;variant&lt;/code&gt; value—and I’ve just made it explicit in the type system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is now properly constrained with a &lt;em&gt;literal type&lt;/em&gt; on the concrete instances. That is, the type of &lt;code&gt;Just.variant&lt;/code&gt; is no longer &lt;code&gt;Variant&lt;/code&gt; but specifically &lt;code&gt;Variant.Just&lt;/code&gt;. (This is what enables you to use the variant for narrowing as demonstrated above. I should have done this in 1.0, and just forgot to!)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s it for 1.3.0!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="section-1" class="level2"&gt;
&lt;h2&gt;– 2.0.0 –&lt;/h2&gt;
&lt;p&gt;The 2.0 release is identical in &lt;em&gt;features&lt;/em&gt; with the 1.3 release. However, it makes a breaking change to how consumers interact with the application, requiring updates to your &lt;code&gt;tsconfig.json&lt;/code&gt; file and your bundler configuration, and removing support for Flow types.&lt;/p&gt;
&lt;section id="configuration-file-updates" class="level3"&gt;
&lt;h3&gt;Configuration file updates&lt;/h3&gt;
&lt;p&gt;Getting True Myth working nicely with consuming TypeScript packages has been a source of frustration for me &lt;em&gt;and&lt;/em&gt; others. In short, requiring you to use the &lt;code&gt;&amp;quot;paths&amp;quot;&lt;/code&gt; key in the &lt;code&gt;&amp;quot;compilerOptions&amp;quot;&lt;/code&gt; section of the &lt;code&gt;tsconfig.json&lt;/code&gt; made for an annoying amount of setup work, &lt;em&gt;and&lt;/em&gt; it meant that using True Myth in a library &lt;em&gt;required&lt;/em&gt; you to set it up in any consuming app. No good.&lt;/p&gt;
&lt;p&gt;For type resolution to Just Work™, the types &lt;em&gt;must&lt;/em&gt; be at the root of the distributed package.&lt;/p&gt;
&lt;p&gt;As a result, I’ve stopped using &lt;a href="https://github.com/tildeio/libkit"&gt;libkit&lt;/a&gt;, which put the generated types in a reasonable-seeming but (in my experience) painful-to-use place, and have simplified the build layout substantially.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The types themselves are generated only when publishing an update to npm. They go in the root at that point, and they get cleaned up after publishing. (This is pretty much identical to the solution we came up in &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;The other build files no longer get dropped in a nested &lt;code&gt;src&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Since I was already at it, I renamed the two build directories from &lt;code&gt;commonjs&lt;/code&gt; to &lt;code&gt;cjs&lt;/code&gt; and from &lt;code&gt;modules&lt;/code&gt; to &lt;code&gt;es&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the distributed build now looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/ 
  index.d.ts
  maybe.d.ts
  result.d.ts
  unit.d.ts
  utils.d.ts
  dist/
    cjs/
      index.js
      maybe.js
      result.js
      unit.js
      utils.js
    es/
      index.js
      maybe.js
      result.js
      unit.js
      utils.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll just need to completely remove the &lt;code&gt;&amp;quot;paths&amp;quot;&lt;/code&gt; mapping for True Myth from your &lt;code&gt;tsconfig.json&lt;/code&gt; and, if you’ve done anything unusual with it, update your bundler configuration to point to the new build location, i.e. &lt;code&gt;dist/commonjs/src&lt;/code&gt; should now just be &lt;code&gt;dist/cjs&lt;/code&gt;. Bundlers which respect the &lt;code&gt;modules&lt;/code&gt; key in &lt;code&gt;package.json&lt;/code&gt; will pick it up automatically, as will Ember &lt;abbr&gt;CLI&lt;/abbr&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="removing-flow-types" class="level3"&gt;
&lt;h3&gt;Removing Flow types&lt;/h3&gt;
&lt;p&gt;To my knowledge, no one is actually using the Flow types for the library. When I first started on it, my collaborator &lt;a href="https://github.com/bmakuh"&gt;Ben Makuh&lt;/a&gt; &lt;em&gt;was&lt;/em&gt; using Flow, but he ended up migrating to TypeScript in the intervening time, and there are no consumers I know of. I was always relatively unsure of their correctness, &lt;em&gt;and&lt;/em&gt; I don’t have a good way to validate their correctness, &lt;em&gt;and&lt;/em&gt; maintaining them involved doing manual work on every release to update the types by hand.&lt;/p&gt;
&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; use True Myth with Flow, and you’re missing the types, please let me know. I just can’t maintain them myself at this point!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And that’s it! We’ve been using True Myth in production at Olo for quite some time, and it’s proved to be a really valuable tool. Give it a spin and let me know how these latest versions work for you!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’ve made some changes under the hood to take advantage of this as well, so the library should be faster. Probably &lt;em&gt;trivially&lt;/em&gt; faster, but my philosophy around library code is very much &lt;em&gt;be as fast as you can&lt;/em&gt;; it’s a way of considering the people using your code—not just the developers, but the end users.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="functional programming"></category><category term="libraries"></category><category term="software development"></category><category term="open source software"></category><category term="versioning"></category></entry><entry><title>Aesthetics and Programming Languages</title><link href="http://www.chriskrycho.com/2018/aesthetics-and-programming-languages.html" rel="alternate"></link><published>2018-05-13T11:00:00-04:00</published><updated>2018-05-13T11:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-13:/2018/aesthetics-and-programming-languages.html</id><summary type="html">Rust isn’t exactly prettier than C♯, but its aesthetics don’t drive me up the wall the same way. Why not?
</summary><content type="html">&lt;p&gt;My distaste for the aesthetics of C&lt;sup&gt;♯&lt;/sup&gt; are fairly well known to people I talk to about programming languages—perhaps equally as well known as my love of Rust. So much so that both are running jokes among some of my colleagues and friends. My hypersensitivity to aesthetics both in general and also specifically in programming languages and work environment is &lt;em&gt;also&lt;/em&gt; so well-known as to be a gag.&lt;/p&gt;
&lt;p&gt;But I was writing a bunch of Rust this weekend, and looking at it and thinking about it and wondering why it is that C&lt;sup&gt;♯&lt;/sup&gt; drives me so up the wall aesthetically and experientially, while Rust doesn’t. On the surface, they don’t actually look all that different.&lt;/p&gt;
&lt;p&gt;Here’s &lt;em&gt;roughly&lt;/em&gt; equivalent code in each:&lt;/p&gt;
&lt;pre class="cs"&gt;&lt;code&gt;public class Person {
    public string Name { get; set; } = &amp;quot;Chris&amp;quot;;

    public void greet() {
        Console.WriteLine($&amp;quot;Hello, {Name}&amp;quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Person {
    name: String,
}

impl Person {
    pub fn new() -&amp;gt; Person {
        Person { name: String::from(&amp;quot;Chris&amp;quot;) }
    }

    pub fn greet(&amp;amp;self) {
        println!(&amp;quot;Hello, {}&amp;quot;, self.name);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you start tossing in generics and lifetimes, Rust can actually end up looking a &lt;em&gt;lot&lt;/em&gt; messier than C&lt;sup&gt;♯&lt;/sup&gt;.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;impl&amp;lt;&amp;#39;a, &amp;#39;b, T, U&amp;gt; SomeTrait&amp;lt;&amp;#39;a, U&amp;gt; for SomeType&amp;lt;&amp;#39;b, U&amp;gt;
where
    T: SomeOtherTrait + YetAnotherTrait,
    U: OhWowSoManyTraits
{
    fn some_trait_method(&amp;amp;self) {
        // ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing about that is what I would call aesthetically beautiful in a general sense! There’s a &lt;em&gt;lot&lt;/em&gt; of syntax.&lt;/p&gt;
&lt;p&gt;What I’ve concluded so far, though, is that my difference in feelings comes down to the way that syntax maps back to the underlying semantics, and my feelings about those underlying semantics. The basic language design approach C&lt;sup&gt;♯&lt;/sup&gt; takes—i.e. everything is a class; mutation is both encouraged and implicit; don’t bother with value types—drives me batty. I don’t love the syntax, not least because it ends up being &lt;em&gt;so&lt;/em&gt; verbose and noisy (you can express the same things in F&lt;sup&gt;♯&lt;/sup&gt; much more briefly)—but also because I actively dislike the programming models it encourages (I don’t like the C&lt;sup&gt;♯&lt;/sup&gt; programming model when I see in in F&lt;sup&gt;♯&lt;/sup&gt; either!).&lt;/p&gt;
&lt;p&gt;Rust, by contrast, matches the way I &lt;em&gt;do&lt;/em&gt; and &lt;em&gt;want to&lt;/em&gt; think about the world. Mutability is allowed but neither actively encouraged nor actively discouraged; more to the point it’s &lt;em&gt;explicit&lt;/em&gt;. Insofar as “shared mutable state is the root of all evil,” Rust has two legs up on C&lt;sup&gt;♯&lt;/sup&gt;: it (a) doesn’t &lt;em&gt;allow&lt;/em&gt; shared mutable state and (b) makes explicit where mutation &lt;em&gt;is&lt;/em&gt; happening. It also separates data from behavior. It also has real value types. It also has sum types and pattern matching. In both cases, a lot of the syntactical noise is inessential, a holdover from the legacy of C; but in Rust’s case the way it maps onto a &lt;em&gt;programming model&lt;/em&gt; that is more like OCaml than like C decreases the pain I feel from that noise.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;could&lt;/em&gt; be taken to validate the idea that syntax doesn’t matter, that the underlying semantics are everything, but that’s not the case. It’s not that I &lt;em&gt;love&lt;/em&gt; Rust’s syntax. It’s that, although I dislike it at times, it doesn’t rise to the level of frustration I feel in C&lt;sup&gt;♯&lt;/sup&gt; because it’s not coupled to a programming model that I loathe. The syntax matters; it’s just not the &lt;em&gt;only&lt;/em&gt; thing that matters.&lt;/p&gt;
&lt;p&gt;An interesting thing to consider: what Rust would look like in a world where it embraced its OCaml roots. (I don’t think Rust should have done this; spending its complexity budget on ideas instead of syntax was the right choice. But it’s still interesting.) The simplest level of translation might look something (very) roughly like this:&lt;/p&gt;
&lt;pre class="haskell"&gt;&lt;code&gt;impl &amp;#39;a &amp;#39;b T U SomeTrait &amp;#39;a T for SomeType &amp;#39;b U
  where T : SomeOtherTrait + YetAnotherTrait

  some_trait_method :: &amp;amp;self -&amp;gt; void
  some_trait_method self =
    -- ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is obviously still a lot of syntax, but it’s all basically necessary given the things Rust is trying to express with lifetimes, ownership, etc.—and I did this off the top of my head with literally &lt;em&gt;no&lt;/em&gt; consideration other than “what’s the most direct translation into roughly Haskell-ish syntax I can write?” It makes me genuinely curious where a language that aimed for Rust’s same kinds of guarantees but actively embracing the ML/Haskell family’s syntax might end up. I have a guess that I’d like it even better than I do Rust.&lt;/p&gt;
</content><category term="csharp"></category><category term="rust"></category><category term="programming languages"></category></entry><entry><title>#EmberJS2018, Part 1</title><link href="http://www.chriskrycho.com/2018/emberjs2018-part-1.html" rel="alternate"></link><published>2018-05-11T09:30:00-04:00</published><updated>2018-05-11T20:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-11:/2018/emberjs2018-part-1.html</id><summary type="html">We don’t need more new features this year. We need to ship the things we already have in progress.</summary><content type="html">&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Docs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-3.html"&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;section id="finishing-what-weve-started" class="level2"&gt;
&lt;h2&gt;Finishing What We’ve Started&lt;/h2&gt;
&lt;p&gt;What I want, more than any new feature anyone could come up with, is for this to be the year Ember.js commits to &lt;em&gt;finishing what we have started&lt;/em&gt;. The last few years have seen the Ember team do a lot of really important exploratory work, including projects like &lt;a href="https://glimmerjs.com"&gt;Glimmer.js&lt;/a&gt;; and we have landed some of the initiatives we have started. But I think it’s fair to say that focus has not been our strong suit. It’s time for a year of &lt;em&gt;shipping&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We need to land all the things we have in flight, and as much as possible avoid the temptation (much though I feel it myself!) to go haring off after interesting new ideas. As such, literally everything I list below is an effort &lt;em&gt;already in progress&lt;/em&gt;. It’s just a matter of making concerted efforts as a community to land them.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that way of putting it is important: we have to make concerted efforts &lt;em&gt;as a community&lt;/em&gt; to land these things. Very, very few people are paid to work on Ember.js full time—far too few to accomplish all of this! If these things matter to you and your company, find a way to carve out time for it. Even if it’s just a few hours a week, even if it’s “just” (and there’s no “just” about these!) helping out with triage of open issues or answering questions in Slack or Discourse or Stack Overflow, even if it doesn’t &lt;em&gt;feel&lt;/em&gt; like a lot… it adds up.&lt;/p&gt;
&lt;p&gt;To be very clear, before I go any further: none of this is a knock on everything that the Ember core team and community have done in the last couple years. A lot of things that have landed along the way—dropping in the Glimmer rendering engine midway through the 2.x series, landing ES5 getters just weeks ago in Ember 3.1, and so on—are genuinely great! &lt;em&gt;All&lt;/em&gt; that I mean is, a year where we land and polish everything would make everything that much more awesome (and make Ember that much more competitive a choice in the client-side framework world).&lt;/p&gt;
&lt;p&gt;So: what do we need to ship this year?&lt;/p&gt;
&lt;section id="land-glimmer-components-in-ember.js-proper" class="level3"&gt;
&lt;h3&gt;Land Glimmer &lt;code&gt;&amp;lt;Component&amp;gt;&lt;/code&gt;s in Ember.js proper&lt;/h3&gt;
&lt;p&gt;We’ve taken the first steps toward this already via a number of &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;s that were written late last year and merged since. We need to finish the implementation for these. That means getting the &lt;a href="https://github.com/emberjs/ember.js/issues/16301"&gt;Glimmer Components in Ember&lt;/a&gt; quest across the finish line.&lt;/p&gt;
&lt;p&gt;The whole story here will make Ember &lt;em&gt;feel&lt;/em&gt; much more modern in a variety of ways, as well as enabling some great performance and programming model wins: Immutable component arguments! Auto-tracked class properties! &lt;code&gt;&amp;lt;AngleBracketComponent&amp;gt;&lt;/code&gt; invocation! Clear semantic distinctions between arguments and local context! So many good things. We just need to land it! &lt;a href="https://github.com/emberjs/ember.js/issues/16301"&gt;The quest&lt;/a&gt; needs to be moving forward, not stagnant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Show up and volunteer to go after pieces of the quest. There are people willing to mentor you through the work that needs to be done!&lt;/li&gt;
&lt;li&gt;Test it as it lands! You don’t have to commit to &lt;em&gt;shipping&lt;/em&gt; things in your app to &lt;em&gt;test&lt;/em&gt; them in your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="land-a-lot-of-ember-cli-efforts" class="level3"&gt;
&lt;h3&gt;Land a &lt;em&gt;lot&lt;/em&gt; of Ember CLI efforts&lt;/h3&gt;
&lt;p&gt;There are a great many Ember CLI efforts in flight. Every last one of them should be on stable and in use before the end of the year.&lt;/p&gt;
&lt;section id="module-unification" class="level4"&gt;
&lt;h4&gt;Module Unification&lt;/h4&gt;
&lt;p&gt;The &lt;a href="https://github.com/dgeb/rfcs/blob/module-unification/text/0000-module-unification.md"&gt;Module Unification &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;&lt;/a&gt; was opened in May 2016 and merged October 2016. There has been a lot of progress made, but we need to &lt;em&gt;ship it&lt;/em&gt;—from where I stand, it’d be nice if it landed less than 2 years after we approved it! And we’re &lt;a href="https://github.com/emberjs/ember.js/issues/16373"&gt;getting pretty close&lt;/a&gt;; you can actually use the Module Unification blueprint in an Ember application today. Some stuff doesn’t work &lt;em&gt;quite&lt;/em&gt; right yet, but it’s getting close.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; try it out! Spin up new apps with the module unification blueprint flag, and try running the migrator codemod, and report back on what breaks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="broccoli-1.0" class="level4"&gt;
&lt;h4&gt;Broccoli 1.0&lt;/h4&gt;
&lt;p&gt;We’re &lt;em&gt;super&lt;/em&gt; close on this one—Oli Griffiths has done some heroic work on this since EmberConf—but we need to finish it. Ember CLI, for historical reasons, has been using a fork of Broccoli.js for quite some time. This divergence has caused all manner of trouble, including compatibility issues between Broccoli plugins and an inability to take advantage of the best things that have landed in Broccoli since the fork happened.&lt;/p&gt;
&lt;p&gt;Perhaps the single most important example of that is that Broccoli 1.0 supports the use of the system &lt;code&gt;tmp&lt;/code&gt; directory. That single change will improve the performance of Ember CLI &lt;em&gt;dramatically&lt;/em&gt;, especially on Windows. It will also flat-out eliminate a number of bugs and odd behaviors that appear when trying to integrate Ember CLI with other file watching tools (e.g. TypeScript’s &lt;code&gt;--watch&lt;/code&gt; invocation).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; once the Ember CLI team says it’s ready for testing, test your app and addons with it! Make sure that everything works as it should—specifically, that you’re not making any assumptions that depend on either the forked &lt;abbr&gt;API&lt;/abbr&gt; or the location of the &lt;code&gt;tmp&lt;/code&gt; directory used for intermediate build steps.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-new-packager-setup-with-tree-shaking-and-app-splitting" class="level4"&gt;
&lt;h4&gt;The new &lt;code&gt;Packager&lt;/code&gt; setup, with tree-shaking and app-splitting&lt;/h4&gt;
&lt;p&gt;One of the current major pain points with Ember’s build pipeline is that it’s hard to extend, and not really documented at all. (I’ll have a &lt;em&gt;lot&lt;/em&gt; more to say on the question of documentation in the next post!) However, work is in progress to change that, too!&lt;/p&gt;
&lt;p&gt;The accepted-and-actively-being-worked-on &lt;a href="https://github.com/ember-cli/rfcs/blob/master/active/0051-packaging.md"&gt;Packaging Ember CLI &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;&lt;/a&gt; aims to fix both of these. Quoting from it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The current application build process merges and concatenates input broccoli trees. This behaviour is not well documented and is a tribal knowledge. While the simplicity of this approach is nice, it doesn’t allow for extension. We can refactor our build process and provide more flexibility when desired.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few of the things we can expect to be possible once that effort lands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tree-shaking – we can lean on Rollup.js to get &lt;em&gt;only&lt;/em&gt; the code we actually need, cutting shipped file size dramatically&lt;/li&gt;
&lt;li&gt;app-splitting – lots of different strategies to explore, including route-based or “section”-based, etc.&lt;/li&gt;
&lt;li&gt;static-build-asset-splitting – no reason to cache-bust your &lt;em&gt;dependencies&lt;/em&gt; every time the app releases!&lt;/li&gt;
&lt;li&gt;distinct app builds – you could ship one build of your app for browsers which support ES Modules and one for browsers which don’t (heeeeey, IE11) – letting you minimize the payload size for the ones that do&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you know Ember CLI internals: pop into #-dev-ember-cli and ask how you can help land the features&lt;/li&gt;
&lt;li&gt;If you don’t know Ember CLI internals: also pop into #-dev-ember-cli, but ask instead how you can &lt;em&gt;test&lt;/em&gt; the changes&lt;/li&gt;
&lt;li&gt;Help document those internals (see the next post in this series)&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="install-your-way-to-ember" class="level3"&gt;
&lt;h3&gt;Install-your-way-to-Ember&lt;/h3&gt;
&lt;p&gt;We need to finish splitting apart the Ember source from its current state of still being fairly monolith and get it turned into a true set of packages. The new Modules API which landed last year was a huge step toward this and made the experience on the developer side &lt;em&gt;look&lt;/em&gt; like this should be possible—but that’s still a shim around the actual non-modularized Ember core code. The process of splitting it apart &lt;em&gt;is happening&lt;/em&gt;, but we need to finish it.&lt;/p&gt;
&lt;p&gt;The promise here is huge: Ember will be able to be the kind of thing you can progressively add to your existing applications and slowly convert them, rather than something that comes along all as a large bundle. It’s technically possible to do this today, but you cannot drop in &lt;em&gt;just the view layer&lt;/em&gt;, for example, and that’s a huge value for people who want to try out the programming model or add it for just one feature in an existing application.&lt;/p&gt;
&lt;p&gt;Making it possible for people to install Glimmer components, then the service layer, then the router, and so on as they need it will make adoption easier for people who are curious about the framework. But it will also be a huge boon to those of us already using Ember and wanting to migrate existing applications (often a tangled mix of server-side rendering and massive jQuery spaghetti files!) to Ember progressively. I’ve had multiple scenarios come up at my own job in just the last month where this would have been hugely useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; make it known that you’re willing to help work on breaking apart Ember into its constituent pieces, and as that effort lands (hopefully over the rest of this year!) test it in your own apps and addons, and find the pain points in the install-your-way-to-the-framework process.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="make-typescript-great-everywhere" class="level3"&gt;
&lt;h3&gt;Make TypeScript &lt;em&gt;great&lt;/em&gt; everywhere&lt;/h3&gt;
&lt;p&gt;This one is near and dear to my heart… and it also really falls in no small part to me and the rest of the group working on ember-cli-typescript and type definitions for the Ember ecosystem!&lt;/p&gt;
&lt;p&gt;There are two big wins we can land this year:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Built-in support in Ember.js itself.&lt;/li&gt;
&lt;li&gt;Solid type definitions for the rest of the Ember.js ecosystem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you don’t like TypeScript, don’t panic! The upshot here will actually be a better experience for &lt;em&gt;all&lt;/em&gt; users of Ember.js.&lt;/p&gt;
&lt;section id="built-in-support-in-ember.js-itself" class="level4"&gt;
&lt;h4&gt;1. Built-in support in Ember.js itself&lt;/h4&gt;
&lt;p&gt;One of my goals for this summer&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; is to finish an &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; making TypeScript a first-class citizen of the Ember.js ecosystem. To clarify what this will and won’t entail (assuming it’s accepted, assuming I ever manage to finish writing it!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ember will &lt;em&gt;always&lt;/em&gt; be JS-first, and it will &lt;em&gt;never&lt;/em&gt; require type metadata reflected to runtime, unlike e.g. Angular. No one will ever have a &lt;em&gt;worse&lt;/em&gt; experience because they prefer JS to TS. The idea will be to make TypeScript an &lt;em&gt;equally&lt;/em&gt; good experience, and to include it for consideration when thinking about design choices for new features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember users, both JS and TS, will get the &lt;em&gt;benefits&lt;/em&gt; of having good types available right out of the box: many editors and IDEs can use TypeScript type definitions to enable better docs, autocompletion, etc.—and we may even be able to leverage it for &lt;a href="https://twitter.com/__dfreeman/status/994410180661170177"&gt;better validation of Handlebars templates&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll have (because we’ll have to have!) a story on what we support in terms of backwards compatibility and SemVer for TypeScript and Ember and the type definitions. Necessarily, it has been the Wild West for the first year of concentrated effort here, trying to get our type definitions from “barely exist and not useful” to “full coverage and 99% right.” But as TypeScript becomes more widely used, we have to have a stability story, and we very soon will.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s also ongoing work to convert Ember’s own internals to TypeScript, and landing that will help guarantee that the type definitions for Ember are actually &lt;em&gt;correct&lt;/em&gt;, which in turn will make the experience for everyone better. (Bad type definitions are worse than &lt;em&gt;no&lt;/em&gt; type definitions!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; engage in the &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process once we get it started, and if you are up for it show up to help convert the Ember internals to TypeScript as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solid-type-definitions-for-the-rest-of-the-ember.js-ecosystem" class="level4"&gt;
&lt;h4&gt;2. Solid type definitions for the rest of the Ember.js ecosystem&lt;/h4&gt;
&lt;p&gt;Closely related to making TypeScript a first-class citizen for Ember.js itself is getting the pieces in place for the rest of the ecosystem as well. That means we need type definitions for addons—a &lt;em&gt;lot&lt;/em&gt; of them! The ember-cli-typescript team will (hopefully late this month or in early June) be launching a quest issue to get type definitions for the whole Ember ecosystem in place—by helping convert addons to TS if their authors desire it, or by adding type definitions to the addons if they’re up for it, or by getting them up on DefinitelyTyped if they’re totally disinterested. (And, as I’ll note again in that quest issue, it’s totally fine for people &lt;em&gt;not&lt;/em&gt; to be interested: there &lt;em&gt;is&lt;/em&gt; a maintenance burden there!) The goal, again, is that when you’re using &lt;em&gt;any&lt;/em&gt; part of the Ember ecosystem it’ll be easy to get all the benefits of TypeScript—and indeed that in many cases you’ll get a fair number of those benefits as a JS user.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; participate in the quest issue once it’s live! We’ll help mentor you through the process of converting addons to TypeScript, writing type definitions and getting them well-validated, and so on!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That’s a lot to do. More than enough all by itself, and a lot of moving parts. As such, I’ll reiterate what I said at the start: we don’t need new features this year. &lt;strong&gt;It’s time for a year of &lt;em&gt;shipping&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;To put it in the terms the Rust community used for their similar push at the end of 2017, and which we have often used to describe the ongoing efforts in Rust to land the “Rust 2018 edition”: this is an “impl period”—a play on the Rust &lt;code&gt;impl&lt;/code&gt; keyword, used to describe the &lt;em&gt;implementation&lt;/em&gt; of the behavior associated with a given data type. You can think of this as the same: it’s the implementation of the good ideas we have.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Confession: it was a goal for the spring but I found myself utterly exhausted after EmberConf… and had a full month with &lt;em&gt;another&lt;/em&gt; major talk given for internal purposes afterwards. I’m worn out.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="typescript"></category><category term="emberjs2018"></category></entry><entry><title>A Humanist Frame</title><link href="http://www.chriskrycho.com/2018/a-humanist-frame.html" rel="alternate"></link><published>2018-05-01T07:00:00-04:00</published><updated>2018-05-01T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-01:/2018/a-humanist-frame.html</id><summary type="html">A few thoughts this morning on technologies, community, and the need for a positive (as well as a negative) vision of technology, cities, and indeed liberty—taking the latest issue of Michael Sacasas' newsletter The Convivial Society as a jumping off point.
</summary><content type="html">&lt;p&gt;A few thoughts this morning on technologies, community, and the need for a positive (as well as a negative) vision of technology, cities, and indeed liberty—taking &lt;a href="https://tinyletter.com/lmsacasas/letters/the-convivial-society-no-4-community" title="No. 4: Community"&gt;the latest issue&lt;/a&gt; of Michael Sacasas’ newsletter &lt;a href="https://tinyletter.com/lmsacasas/archive"&gt;The Convivial Society&lt;/a&gt; as a jumping off point.&lt;/p&gt;
&lt;aside&gt;
I don’t expect to link quite so often to the same writer, so don’t worry: this isn’t about to become a secondary feed for Sacasas’ writing. I do commend the newsletter, and especially this issue of it, to you. This essay, which I quote in brief, does something I hope to be able to do in a piece of writing someday: it &lt;em&gt;hangs together&lt;/em&gt; marvelously. There are standout paragraphs, but each one connects to those before and after it, and the essay is—in the best way—not excerpt-able. You should read the whole thing. If you have to choose, read that instead of this (seriously).
&lt;/aside&gt;
&lt;p&gt;Early in the newsletter, Sacasas offers this note on technological visionaries stretching back to the telegraph (at least):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It seems that none of these visionaries ever took into consideration the possibility that the moral frailties of human nature would only be amplified by their new technologies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He shortly thereafter suggests why that vision proved so alluring—the too-readily amplified frailties of human nature notwithstanding:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The rise of communication technologies from the mid-19th century through today has roughly coincided with the dissolution and degradation of the traditional communities, broken and often cruel though they may have been, that provided individuals with a relatively integrated experience of place and self. In 1953, the sociologist Robert Nisbett could write of the “quest for community” as the “dominant social tendency of the twentieth century.” Framing a new technology as a source of community, in other words, trades on an unfulfilled desire for community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What strikes me as most interesting here is that Sacasas notes, even if only as an aside, one of the most important things that most critics of our current techno/cultural milieu seem entirely content to skip over: that the traditional communities &lt;em&gt;were&lt;/em&gt; “broken and often cruel.” One of the reasons that the social revolutions of the last 150 years have had such force is precisely this: that the traditional communities so casually valorized today (though not by Sacasas himself) may have helped people have “an integrated experience of place and self”—but that experience was, often as not, one of &lt;em&gt;abuse&lt;/em&gt;: of ethnic minorities, of women, of anyone outside the gentry…&lt;/p&gt;
&lt;p&gt;Sacasas’ description—“broken and often cruel”—is more right than is usually granted in these discussions. If we want to escape the shackles of atomistic individualism, we had best be thinking of something other than the glorious past, because the past was not glorious.&lt;/p&gt;
&lt;p&gt;Third, and closely related to the above considerations: Sacasas closes the newsletter with a quote from Willa Cather’s &lt;em&gt;O Pioneers!&lt;/em&gt;, adding his own emphasis. I’ll reproduce the quotation in full here as he gave it (so: emphasis his) and then comment below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“You see,” he went on calmly, “measured by your standards here, I’m a failure. I couldn’t buy even one of your cornfields. I’ve enjoyed a great many things, but I’ve got nothing to show for it all.”&lt;/p&gt;
&lt;p&gt;“But you show for it yourself, Carl. I’d rather have had your freedom than my land.”&lt;/p&gt;
&lt;p&gt;Carl shook his head mournfully. “&lt;strong&gt;Freedom so often means that one isn’t needed anywhere.&lt;/strong&gt; Here you are an individual, you have a background of your own, you would be missed. But off there in the cities there are thousands of rolling stones like me. We are all alike; we have no ties, we know nobody, we own nothing. When one of us dies, they scarcely know where to bury him. Our landlady and the delicatessen man are our mourners, and we leave nothing behind us but a frock-coat and a fiddle, or an easel, or a typewriter, or whatever tool we got our living by. All we have ever managed to do is to pay our rent, the exorbitant rent that one has to pay for a few square feet of space near the heart of things. We have no house, no place, no people of our own. We live in the streets, in the parks, in the theaters. We sit in restaurants and concert halls and look about at the hundreds of our own kind and shudder.”&lt;/p&gt;
&lt;p&gt;Alexandra was silent. She sat looking at the silver spot the moon made on the surface of the pond down in the pasture. He knew that she understood what he meant. At last she said slowly, “And yet I would rather have Emil grow up like that than like his two brothers. We pay a high rent, too, though we pay differently. We grow hard and heavy here. We don’t move lightly and easily as you do, and our minds get stiff. If the world were no wider than my cornfields, if there were not something beside this, I wouldn’t feel that it was much worth while to work. No, I would rather have Emil like you than like them. I felt that as soon as you came.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sacasas—with many others who are rightly critical of the social situation we have made for ourselves here in late modernity, including many of my friends over at &lt;a href="https://mereorthodoxy.com/book-review-liberalism-failed-patrick-deneen/" title="Example: Jake Meador&amp;#39;s sympathetic review of Deneen&amp;#39;s Why Liberalism Failed"&gt;Mere Orthodoxy&lt;/a&gt;—calls out the ways that our unrestrained freedom has come at a great cost to us. These critics are right to do so. But the bit that caught my attention as &lt;em&gt;equally&lt;/em&gt; worthy of notice in the section from Cather is Alexandra’s response (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We pay a high rent, too, though we pay differently. We grow hard and heavy here. We don’t move lightly and easily as you do, and our minds get stiff. If the world were no wider than my cornfields, if there were not something beside this, I wouldn’t feel that it was much worth while to work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is something in this exchange of the tension between agrarianism and urbanism that seems to come up every time Wendell Berry is mentioned. It is true that cities (and late modernity!) often offer a kind of freedom that itself is slavery. But it is also true that the slavery of freedom is not the only kind of slavery.&lt;/p&gt;
&lt;p&gt;It remains one of my chief concerns that few who &lt;em&gt;are&lt;/em&gt; taking seriously the problems we have made for ourselves in modernity seem interested in finding solutions that work &lt;em&gt;in cities&lt;/em&gt;. It is one thing to have a healthy suspicion of the kind of city-centrism and techno-centrism and indeed techno-fundamentalism that is largely the order of the day. It is something else entirely, however, to fail to imagine either city or technological milieu as &lt;em&gt;possibly good&lt;/em&gt;. (To be clear, this does not seem to be the tack that Sacasas is taking; and it is not so much that someone like my friend Jake Meador is &lt;em&gt;hostile&lt;/em&gt; to cities as that his own sympathies run more to rural life.) This is, I think, part of what &lt;a href="http://stephencarradini.com"&gt;Stephen Carradini&lt;/a&gt; has been getting at in his own more optimistic view in especially our &lt;a href="https://winningslowly.org/6.04/" title="6.04: Move Slowly and Fix Things"&gt;most recent Winning Slowly episode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We must reject techno-utopianism; we must repent of our worship of technique. But we &lt;em&gt;must not&lt;/em&gt; make the usual conservative mistake and stop with the mere rejection of something bad. &lt;a href="http://bib.ly/luke11.24-26" title="Luke 11:24–26"&gt;That tends not to go so well.&lt;/a&gt; Instead, we need to consciously develop a frame that situates technology as properly subordinate to the humane, and which sets cities and farms and small towns and moon colonies not in opposition to each other but as complements.&lt;/p&gt;
</content><category term="ethics"></category><category term="community"></category></entry><entry><title>Exploring 4 Languages: Integrity and Consistency</title><link href="http://www.chriskrycho.com/2018/exploring-4-languages-integrity-and-consistency.html" rel="alternate"></link><published>2018-03-24T22:00:00-04:00</published><updated>2018-03-24T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-03-24:/2018/exploring-4-languages-integrity-and-consistency.html</id><summary type="html">Using the type systems of Rust, Elm, F♯, and ReasonML to not only model a domain but to make sure we keep our promises.
</summary><content type="html">&lt;p&gt;In chapter 6, Wlaschin turns to one of the most important aspects of “domain modeling”: keeping it consistent. It’s all well and good to set up a domain model, but if you don’t have a way to make sure that model is reliable everywhere you use it, well… you’ve done a lot of extra work and you’re not going to see a lot of results for all that effort! But as Wlaschin points out, we can actually use the type systems, and the types we wrote up in the previous chapter, to help us enforce the business &lt;em&gt;rules&lt;/em&gt; for our domain (as well as the business &lt;em&gt;shapes&lt;/em&gt; in the domain).&lt;/p&gt;
&lt;p&gt;An important note: you can see the latest version of this code (along with history indicating some of my travails in getting there!) in &lt;a href="https://github.com/chriskrycho/dmmf"&gt;this public repository on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;section id="a-simple-example-widgetcode" class="level2"&gt;
&lt;h2&gt;A simple example: &lt;code&gt;WidgetCode&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We’ll start with one of the simpler examples: validating that a &lt;code&gt;WidgetCode&lt;/code&gt; is legitimate. A &lt;code&gt;WidgetCode&lt;/code&gt;, in this domain, is valid if, and &lt;em&gt;only&lt;/em&gt; if, it has a &lt;code&gt;W&lt;/code&gt; followed by four digits.&lt;/p&gt;
&lt;p&gt;The basic tack we’ll take, in all four languages, is to leverage the way the types work to make it so we have to use a function to create a valid instance of a &lt;code&gt;WidgetCode&lt;/code&gt;. That’s a bit of extra work (though especially in the functional-first languages, it ends up not being a &lt;em&gt;lot&lt;/em&gt; of extra work) but it lets us use &lt;code&gt;Result&lt;/code&gt; types to handle invalid data up front.&lt;/p&gt;
&lt;p&gt;The downside is that we can’t just get directly at the value inside our wrapper types using basic pattern matching. Instead, we need to be provide a function for “unwrapping” it. Tradeoffs!&lt;/p&gt;
&lt;p&gt;We’ll go at this using the most appropriate tool from each language, but in every case we’ll end up with a &lt;code&gt;create&lt;/code&gt; function that takes a string and returns a &lt;code&gt;Result&lt;/code&gt; with the successful option being a &lt;code&gt;WidgetCode&lt;/code&gt; and the error option being a string describing the error; and a &lt;code&gt;value&lt;/code&gt; function to unwrap a valid code. Throughout, I also assume an essentially-identical implementation of a related &lt;code&gt;GizmoCode&lt;/code&gt; type; I pull both in to show how they end up being used side by side.&lt;/p&gt;
&lt;section id="rust" class="level3"&gt;
&lt;h3&gt;Rust&lt;/h3&gt;
&lt;p&gt;We are using a tuple struct to wrap the string value here. Since there is no &lt;code&gt;pub&lt;/code&gt; modifier in the wrapped &lt;code&gt;String&lt;/code&gt;, it’s opaque from the perspective of the caller—and this is exactly what we want. We’ll pull in &lt;a href="https://docs.rs/regex/0.2.10/regex/"&gt;the &lt;code&gt;Regex&lt;/code&gt; crate&lt;/a&gt; and validate the code passed to us on creation.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use regex::Regex;

pub struct WidgetCode(String);

impl WidgetCode {
    pub fn create(code: &amp;amp;str) -&amp;gt; Result&amp;lt;WidgetCode, String&amp;gt; {
        let re = Regex::new(r&amp;quot;W\d{4}&amp;quot;).expect(r&amp;quot;W\d{4} is a valid regex&amp;quot;);
        if re.is_match(code) {
            Ok(WidgetCode(String::from(code)))
        } else {
            Err(String::from(
                &amp;quot;`WidgetCode` must begin with a &amp;#39;W&amp;#39; and be followed by 4 digits&amp;quot;,
            ))
        }
    }

    pub fn value(&amp;amp;self) -&amp;gt; &amp;amp;str {
        &amp;amp;self.0
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is fairly idiomatic Rust: we’re &lt;em&gt;borrowing&lt;/em&gt; a &lt;em&gt;reference&lt;/em&gt; to the code as a “string slice”, and creating a new, wrapped &lt;code&gt;String&lt;/code&gt; instance to wrap up the code &lt;em&gt;or&lt;/em&gt; return a new &lt;code&gt;String&lt;/code&gt; as an error. When we get the value out, we return a reference to the string,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; with &lt;code&gt;&amp;amp;self.0&lt;/code&gt;: &lt;code&gt;&amp;amp;&lt;/code&gt; to indicate a reference, &lt;code&gt;.0&lt;/code&gt; to indicate the first item of a tuple. Note as well that the final &lt;code&gt;if&lt;/code&gt; block here is an expression. There’s no semicolon terminating it, and this whole &lt;code&gt;if&lt;/code&gt; block ends up being the resulting value of the function.&lt;/p&gt;
&lt;p&gt;One other point of interest here is that the creation of the regex &lt;em&gt;itself&lt;/em&gt; is checked by the compiler for us! If we pass an invalid regular expression, this simply won’t compile.&lt;/p&gt;
&lt;p&gt;This could also live in its own module, &lt;code&gt;ordering/widget_code.rs&lt;/code&gt;, and in fact that’s how I would normally do this (and have in the repository where I’m working): every one of these small types would get its own module file within the containing &lt;code&gt;Ordering&lt;/code&gt; module. It’s not &lt;em&gt;necessary&lt;/em&gt;, but as the domain model grows, it becomes increasingly &lt;em&gt;convenient&lt;/em&gt; in that you always know where to find things.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then we can import it and use it like this in &lt;code&gt;ordering/mod.rs&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;mod widget_code;
mod gizmo_code;

use widget_code::WidgetCode;
use gizmo_code::GizmoCode;

pub enum ProductCode {
    Widget(WidgetCode),
    Gizmo(GizmoCode),
}

fn demo_it() {
    let valid = WidgetCode::create(&amp;quot;W1234&amp;quot;);
    let invalid = WidgetCode::create(&amp;quot;wat&amp;quot;);

    let unwrapped = match valid {
        Ok(ref code) =&amp;gt; code.value(),
        Err(_) =&amp;gt; &amp;quot;&amp;quot;,
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that in Rust, the &lt;code&gt;mod.rs&lt;/code&gt; file declares all child modules. If you had a &lt;code&gt;widget_code.rs&lt;/code&gt; on the file system but no &lt;code&gt;mod widget_code;&lt;/code&gt;, Rust would just ignore the declaration entirely. Then Rust also requires us to &lt;code&gt;use widget_code;&lt;/code&gt; to access its contents. The distinction between declaring and using a given module makes some sense: by the time all is said and done with this exercise, we won’t be doing much of anything in this &lt;code&gt;Ordering&lt;/code&gt; module; it’ll exist primarily as a grouping construct for all the &lt;em&gt;other&lt;/em&gt; modules.&lt;/p&gt;
&lt;p&gt;In this case, we go ahead and import the &lt;code&gt;WidgetCode&lt;/code&gt; type from the module. We only have the one type there, with no standalone functions: everything is attached to the type via the &lt;code&gt;impl&lt;/code&gt; block; so we can just call everything directly off of the type. This ends up feeling &lt;em&gt;kind of&lt;/em&gt; like the way we’d do things in a traditional OOP language, but also &lt;em&gt;really not&lt;/em&gt;, because we still have a separation between the data type and the implementation of functionality attached to it. It’s not obvious &lt;em&gt;here&lt;/em&gt;, but we could write &lt;code&gt;impl WidgetCode&lt;/code&gt; in some &lt;em&gt;other&lt;/em&gt; module in the crate, and as long as there’s no conflict between the implementations, it’s fine! And then we could call whatever function we defined in &lt;em&gt;that&lt;/em&gt; block “on” &lt;code&gt;WidgetCode&lt;/code&gt;. This is on the one hand &lt;em&gt;totally&lt;/em&gt; unlike what we’ll see in the other languages, and on the other hand &lt;em&gt;weirdly analogous&lt;/em&gt; to them.&lt;/p&gt;
&lt;p&gt;I’m going to pass over why we need &lt;code&gt;ref code&lt;/code&gt; here, as it gets into details of Rust’s model of ownership and reference borrowing &lt;em&gt;and&lt;/em&gt; it’s going to be unneeded because of improvements to Rust’s compiler fairly soon. The one thing to note here is that we get nice memory/allocation behavior, i.e. we’re not doing a bunch of separate heap string allocations here. This is one of the big upsides to Rust in general! It’s not quite as pretty as what we’ll see below, but the performance wins are awesome.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="elm" class="level3"&gt;
&lt;h3&gt;Elm&lt;/h3&gt;
&lt;p&gt;Elm introduces us to a pattern we’ll see in each of the more traditional “functional” languages: the use of &lt;em&gt;modules&lt;/em&gt; for this kind of structure. First the code, then some comments on it:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- src/ordering/WidgetCode.elm
module Ordering.WidgetCode exposing (WidgetCode, create, value)

import Regex exposing (contains, regex)


type WidgetCode
    = WidgetCode String


create : String -&amp;gt; Result String WidgetCode
create code =
    if contains (regex &amp;quot;W\\d{4}&amp;quot;) code then
        Ok (WidgetCode code)
    else
        Err &amp;quot;`WidgetCode` must begin with a &amp;#39;W&amp;#39; and be followed by 4 digits&amp;quot;


value : WidgetCode -&amp;gt; String
value (WidgetCode code) =
    code&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm’s module system lets you choose exactly what to expose. In this case, we’re only exporting the type itself along the &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; functions—but, importantly, &lt;em&gt;not&lt;/em&gt; the normal type constructors for the type.&lt;/p&gt;
&lt;p&gt;You can import the things exposed both as a module and as individual items. Assume we implemented &lt;code&gt;GizmoCode&lt;/code&gt; the same way. We’d import and use them in &lt;code&gt;Ordering.elm&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- Ordering.elm
import Ordering.WidgetCode as WidgetCode exposing (WidgetCode)
import Ordering.GizmoCode as GizmoCode exposing (GizmoCode)

type ProductCode
    = Widget WidgetCode
    | Gizmo GizmoCode
    
valid =
    WidgetCode.create &amp;quot;W1234&amp;quot;


invalid =
    WidgetCode.create &amp;quot;wat&amp;quot;


unwrapped =
    case valid of
        Result.Ok code -&amp;gt;
            WidgetCode.value (code)

        Result.Err _ -&amp;gt;
            &amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with Rust, we can’t construct the type without using the provided function. As I’ve written the imports, you’d create a &lt;code&gt;WidgetCode&lt;/code&gt; by writing &lt;code&gt;WidgetCode.create &amp;quot;W1234&amp;quot;&lt;/code&gt;. You could also import it directly, but that would have its own problems once you had the &lt;code&gt;create&lt;/code&gt; function imported for &lt;code&gt;GizmoCode&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;Finally, notice the way we aliased the module name here with &lt;code&gt;as&lt;/code&gt; on the import: we don’t have to write out the fully qualified path this way. And there’s no conflict between the aliased module name and the type name – they live in their own namespaces (as it should be!). Importing the type name distinctly is handy because it means we don’t have to write the body of the union type out as &lt;code&gt;Widget WidgetCode.WidgetCode&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="f" class="level3"&gt;
&lt;h3&gt;F&lt;sup&gt;♯&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;The F&lt;sup&gt;♯&lt;/sup&gt; code looks a &lt;em&gt;lot&lt;/em&gt; like the Elm code. The main differences here have to do with their module systems.&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;namespace Ordering

type WidgetCode = private WidgetCode of string
module WidgetCode =
    let create code =
        if Regex.IsMatch(code, @&amp;quot;W\d{4}&amp;quot;) then
            Ok (WidgetCode code)
        else
            Error &amp;quot;`WidgetCode` must begin with a &amp;#39;W&amp;#39; and be followed by 4 digits&amp;quot;

    let value (WidgetCode code) = code&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we declare that we’re in the &lt;code&gt;namespace Ordering&lt;/code&gt;. Everything here will be publicly visible to everything &lt;em&gt;else&lt;/em&gt; in the &lt;code&gt;namespace Ordering&lt;/code&gt;. We could also make this a &lt;code&gt;module&lt;/code&gt;, and in that case we’d need to explicitly open it in other modules. Because it’s part of the base namespace we’re using for &lt;code&gt;Ordering&lt;/code&gt;, though, we get it for “free”. There’s a downside to this, though. More on that below.&lt;/p&gt;
&lt;p&gt;Also notice that this means that we have yet one more “namespace” for names to live in: &lt;code&gt;namespace&lt;/code&gt; names are different from &lt;code&gt;module&lt;/code&gt; are different from type names! So here we declare a top-level &lt;code&gt;module Ordering&lt;/code&gt; here so that we can actually write code that &lt;em&gt;does something&lt;/em&gt; in the file – &lt;code&gt;namespace&lt;/code&gt;s can only contain type definitions (including &lt;code&gt;module&lt;/code&gt; definitions).&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;namespace Ordering

type ProductCode =
    | Widget of WidgetCode
    | Gizmo of GizmoCode

module DemoIt =
    let valid = WidgetCode.create &amp;quot;W1234&amp;quot;
    let invalid = WidgetCode.create &amp;quot;wat&amp;quot;
    
    let unwrapped =
        match valid with
        | Ok(code) -&amp;gt; WidgetCode.value code
        | Error(_) -&amp;gt; &amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The things to notice here as particularly different from the others:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;We don’t have to explicitly import the module names, because we used the same namespace (&lt;code&gt;Ordering&lt;/code&gt;) to group them. We could also have done &lt;code&gt;namespace Ordering.WidgetCode&lt;/code&gt; and &lt;code&gt;open Ordering.WidgetCode&lt;/code&gt;; that might actually make more or less sense in the context. I &lt;em&gt;think&lt;/em&gt; this is probably more idiomatic, however, which is why I picked it.&lt;/li&gt;
&lt;li&gt;Since we’re keeping the rest of the containing module in the same namespace, we &lt;em&gt;do&lt;/em&gt; have to declare &lt;code&gt;module DemoIt&lt;/code&gt; for functionality – not just types – to live in. This is true for both &lt;code&gt;Ordering.fs&lt;/code&gt; and &lt;code&gt;WidgetCode.fs&lt;/code&gt; and so on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This way of structuring things works really well, but it has one major downside compared to Elm and Rust: where any given name comes from is &lt;em&gt;not&lt;/em&gt; obvious from any given text file. Using modules instead of namespaces and using more fully qualified names &lt;em&gt;could&lt;/em&gt; help here, but the reality is simply that F&lt;sup&gt;♯&lt;/sup&gt; (like C&lt;sup&gt;♯&lt;/sup&gt;) basically leaves you out to dry here. My take is that this is basically what happens when you design a language &lt;em&gt;assuming&lt;/em&gt; IDE-like tooling. But especially when looking at e.g. GitHub diff views, or just browsing source code in general, I strongly prefer the way Elm and Rust generally lead you to do explicit imports or fully qualified paths. (Both have an escape hatch: Rust’s &lt;code&gt;use path::to::module::*;&lt;/code&gt; and Elm’s &lt;code&gt;import Path.To.Module exposing (..)&lt;/code&gt;, but both are actively discouraged as bad practice in &lt;em&gt;most&lt;/em&gt; situations.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="reason" class="level3"&gt;
&lt;h3&gt;Reason&lt;/h3&gt;
&lt;p&gt;Interestingly, Reason &lt;em&gt;looks&lt;/em&gt; most like Rust but &lt;em&gt;behaves&lt;/em&gt; most like F&lt;sup&gt;♯&lt;/sup&gt;. The biggest difference is that I need a separate &lt;em&gt;interface file&lt;/em&gt; for Reason to get the privacy benefits that I’m getting in all the other languages.&lt;/p&gt;
&lt;p&gt;We put the definition file at &lt;code&gt;ordering/Ordering_WidgetCode.rei&lt;/code&gt;. (I’ll comment on the long name in a moment.)&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;type gizmoCode = pri | GizmoCode(string);

let create: string =&amp;gt; Js.Result.t(widgetCode, string);

let value: widgetCode =&amp;gt; string;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that module definition in place, we can separately supply the implementation, in &lt;code&gt;ordering/Ordering_WidgetCode.re&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;type widgetCode =
  | WidgetCode(string);

let create = code =&amp;gt; {
  let isMatch =
    Js.Re.fromString(&amp;quot;W\\d{4}&amp;quot;) |&amp;gt; Js.Re.exec(code) |&amp;gt; Js.Option.isSome;
  if (isMatch) {
    Js.Result.Ok(WidgetCode(code));
  } else {
    Js.Result.Error(
      &amp;quot;`WidgetCode` must begin with a &amp;#39;W&amp;#39; and be followed by 4 digits&amp;quot;
    );
  };
};

let value = (WidgetCode(code)) =&amp;gt; code;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you could do the same thing with an interface file for F&lt;sup&gt;♯&lt;/sup&gt;. We’re also doing something that’s similar in principle to the use of private types in in F&lt;sup&gt;♯&lt;/sup&gt;, but unlike in F&lt;sup&gt;♯&lt;/sup&gt; we &lt;em&gt;have&lt;/em&gt; to use the module interface to make it work as far as I can tell. The &lt;em&gt;interface&lt;/em&gt; can declare the type private, but in the actual implementation, the type has to be non-private to be constructable. (If I’m wrong, please send me a note to let me know! But that’s what I gathered from reading OCaml docs, as well as from command line error messages as I played around.) Also, the fact that Reason has landed on the keyword &lt;code&gt;pri&lt;/code&gt; instead of OCaml and F&lt;sup&gt;♯&lt;/sup&gt;’s much saner &lt;code&gt;private&lt;/code&gt; is super weird.&lt;/p&gt;
&lt;p&gt;The interface file just defines the types, and has the &lt;code&gt;.rei&lt;/code&gt; extension. &lt;code&gt;type widgetCode&lt;/code&gt; here is an &lt;em&gt;abstract&lt;/em&gt; type, which provides no information about what it contains. Note the function types are provided as well. Here I’m using specifically the &lt;code&gt;Js.Result&lt;/code&gt; type; there is also a &lt;code&gt;Result&lt;/code&gt; type in at least one of the OCaml standard libraries. This is one of the more complicated things about Reason compared to the others: there are… &lt;em&gt;several&lt;/em&gt; standard libraries to choose from, which will or won’t work differently depending on what compile target you’re picking.&lt;/p&gt;
&lt;p&gt;In any case, once we have both the module and the implementation defined, we can use it like this in &lt;code&gt;ordering.re&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;module WidgetCode = Ordering_WidgetCode;

module GizmoCode = Ordering_GizmoCode;

open WidgetCode;

open GizmoCode;

type productCode =
  | Widget(widgetCode)
  | Gizmo(gizmoCode);

let valid = WidgetCode.create(&amp;quot;W1234&amp;quot;);

let invalid = WidgetCode.create(&amp;quot;wat&amp;quot;);

let unwrapped =
  switch valid {
  | Js.Result.Ok(code) =&amp;gt; WidgetCode.value(code)
  | Js.Result.Error(_) =&amp;gt; &amp;quot;&amp;quot;
  };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We do this mapping from &lt;code&gt;Ordering_WidgetCode&lt;/code&gt; to &lt;code&gt;WidgetCode&lt;/code&gt; here because OCaml and therefore Reason has only a single global namespace for its module names as defined by the file system. You can nest modules, but only &lt;em&gt;within&lt;/em&gt; files. The workaround is, well… &lt;code&gt;Ordering_&lt;/code&gt; and remapping the name as we have here. This lets you access the nested modules as &lt;code&gt;Ordering.WidgetCode&lt;/code&gt; and so on elsewhere.&lt;/p&gt;
&lt;p&gt;Then we &lt;code&gt;open WidgetCode&lt;/code&gt; etc. so that we can write &lt;code&gt;widgetCode&lt;/code&gt; instead of &lt;code&gt;WidgetCode.widgetCode&lt;/code&gt; in the &lt;code&gt;productCode&lt;/code&gt; definition. This is basically the same effect we get from just being in the same &lt;code&gt;namespace&lt;/code&gt; in F&lt;sup&gt;♯&lt;/sup&gt; (which, again, we could rewrite exactly this way), or from the kinds of imports we discussed above for Rust and Elm.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="numeric-validation-unitquantity" class="level2"&gt;
&lt;h2&gt;Numeric validation: &lt;code&gt;UnitQuantity&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;So far, the showing tilts &lt;em&gt;heavily&lt;/em&gt; in F&lt;sup&gt;♯&lt;/sup&gt;’s and Elm’s favor in terms of expressiveness and elegance. However, there’s a lot of variation depending on exactly what you’re doing. If, for example, you want to validate a &lt;em&gt;range&lt;/em&gt;, well… then Rust actually has a pretty good approach! Once again, you’ll note that these all have a lot in common; the difference mostly comes down to the degree of syntactical noise required to express the same basic thing.&lt;/p&gt;
&lt;p&gt;In this section, I’m not really going to spend a lot of time discussing the details and differences; I’m just leaving it here to show an interesting example where the languages’ design decisions end up have slightly different ergonomic tradeoffs.&lt;/p&gt;
&lt;section id="rust-1" class="level3"&gt;
&lt;h3&gt;Rust&lt;/h3&gt;
&lt;pre class="rust"&gt;&lt;code&gt;// ordering/unit_quantity.rs
pub struct UnitQuantity(u32);

impl UnitQuantity {
    pub fn create(qty: u32) -&amp;gt; Result&amp;lt;UnitQuantity, String&amp;gt; {
        match qty {
            0 =&amp;gt; Err(String::from(&amp;quot;`UnitQuantity` cannot be less than 1&amp;quot;)),
            1...1000 =&amp;gt; Ok(UnitQuantity(qty)),
            _ =&amp;gt; Err(String::from(&amp;quot;`UnitQuantity` cannot be greater than 1000&amp;quot;)),
        }
    }

    pub fn value(&amp;amp;self) -&amp;gt; u32 {
        self.0
    }

    pub fn minimum() -&amp;gt; UnitQuantity {
        UnitQuantity(1)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="elm-1" class="level3"&gt;
&lt;h3&gt;Elm&lt;/h3&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- ordering/UnitQuantity.elm
module Ordering.UnitQuantity exposing (UnitQuantity, create, value)


type UnitQuantity
    = UnitQuantity Int


create : Int -&amp;gt; Result String UnitQuantity
create qty =
    if qty &amp;lt; 1 then
        Err &amp;quot;`UnitQuantity` cannot be less than 1&amp;quot;
    else if qty &amp;gt; 1000 then
        Err &amp;quot;`UnitQuantity` cannot be greater than 1000&amp;quot;
    else
        Ok (UnitQuantity qty)


value : UnitQuantity -&amp;gt; Int
value (UnitQuantity qty) =
    qty

    
minimum : UnitQuantity
minimum = UnitQuantity 1&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="f-1" class="level3"&gt;
&lt;h3&gt;F&lt;sup&gt;♯&lt;/sup&gt;&lt;/h3&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;// ordering/UnitQuantity.fs
namespace Ordering

type UnitQuantity = private UnitQuantity of uint32
module UnitQuantity =
    let create qty =
        if qty &amp;lt; 1u then
            Error &amp;quot;`UnitQuantity` cannot be less than 1&amp;quot;
        else if qty &amp;gt; 1000u then
            Error &amp;quot;`UnitQuantity` cannot be greater than 1000&amp;quot;
        else
            Ok (UnitQuantity qty)

    let value (UnitQuantity qty) = qty
    
    let minimum = UnitQuantity 1&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="reason-1" class="level3"&gt;
&lt;h3&gt;Reason&lt;/h3&gt;
&lt;pre class="reason"&gt;&lt;code&gt;/* ordering/Ordering_UnitQuantity.rei */
type unitQuantity = pri | UnitQuantity(int);

let create: int =&amp;gt; Js.Result.t(unitQuantity, string);

let value: unitQuantity =&amp;gt; int;

let minimum: unitQuantity;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="reason"&gt;&lt;code&gt;/* ordering/Ordering_UnitQuantity.re */

type unitQuantity =
  | UnitQuantity(int);

let create = qty =&amp;gt;
  if (qty &amp;lt; 1) {
    Js.Result.Error(&amp;quot;`UnitQuantity` cannot be less than 1&amp;quot;);
  } else if (qty &amp;gt; 1000) {
    Js.Result.Error(&amp;quot;`UnitQuantity` cannot be greater than 1000&amp;quot;);
  } else {
    Js.Result.Ok(UnitQuantity(qty));
  };

let value = (UnitQuantity(qty)) =&amp;gt; qty;

let minimum = UnitQuantity(1);&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="aside-on-documentation" class="level2"&gt;
&lt;h2&gt;Aside: On Documentation&lt;/h2&gt;
&lt;p&gt;One thing that became &lt;em&gt;extremely&lt;/em&gt; clear in the course of working all of this out is that the documentation stories for these languages are in vastly, &lt;em&gt;vastly&lt;/em&gt; different places.&lt;/p&gt;
&lt;p&gt;Figuring out how to write this private &lt;code&gt;create&lt;/code&gt;/&lt;code&gt;value&lt;/code&gt; approach was &lt;em&gt;very&lt;/em&gt; straightforward in Rust, because it’s literally just right there in how &lt;code&gt;impl&lt;/code&gt; blocks and the &lt;code&gt;pub&lt;/code&gt; keyword work: things default to private, including the contents of a struct, and you &lt;em&gt;always&lt;/em&gt; define the related functionality with &lt;code&gt;pub fn&lt;/code&gt; declarations in the related &lt;code&gt;impl&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;Elm and F&lt;sup&gt;♯&lt;/sup&gt; were both slightly harder, in that I had to poke around a bit to figure out the right way to do it. But not &lt;em&gt;that&lt;/em&gt; much harder. Both use module-level isolation to accomplish this; the main difference there was that F&lt;sup&gt;♯&lt;/sup&gt; just lets you do it inline and Elm explicitly ties modules to files.&lt;/p&gt;
&lt;p&gt;Reason… was very, &lt;em&gt;very&lt;/em&gt; difficult to get sorted out. This is just a function of the state of the ecosystem. Reason is &lt;em&gt;distinct syntax&lt;/em&gt; for OCaml, but it also leans on BuckleScript. That means that if you want to figure out how to do anything, you probably need to search in the docs for all of those, and if your answer turns out to come from OCaml then you have to figure out how to translate it back into Reason and BuckleScript! Ultimately, I was able to figure it out and get the project layout to how you see it in the repository, but… it took a lot more digging than with any of the other projects!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;As with our &lt;a href="http://www.chriskrycho.com/2018/exploring-4-languages-starting-to-model-the-domain.html"&gt;previous foray&lt;/a&gt;, we can see a ton of similarities across these languages. All lean heavily on pattern-matching for dealing with different scenarios; all let us make use of a &lt;code&gt;Result&lt;/code&gt; type for handling success or failure; all make heavy use of expression-bodied-ness; and all supply &lt;em&gt;some&lt;/em&gt; way to make types constructable only in safe/controlled ways.&lt;/p&gt;
&lt;p&gt;For Rust, that’s a matter of leaving the internals of a &lt;code&gt;struct&lt;/code&gt; private and making &lt;code&gt;pub fn&lt;/code&gt; helpers to do the construction and value retrieval. For Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason, that’s a matter of having the normal type &lt;em&gt;constructors&lt;/em&gt; be private while exposing the types themselves normally. They do that in different ways (F&lt;sup&gt;♯&lt;/sup&gt;’s &lt;code&gt;private type&lt;/code&gt;, Elm’s &lt;code&gt;exposing&lt;/code&gt;, and Reason’s &lt;code&gt;pri&lt;/code&gt; annotation on the type variant in a module interface file), but the effect is essentially identical, and functionally equivalent to what we see in Rust.&lt;/p&gt;
&lt;p&gt;The main differences we see across Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason have to do with the nature of the various module systems. In a lot of ways, Reason’s is the least capable &lt;em&gt;for this specific purpose&lt;/em&gt;, because it’s directly tied to OCaml’s module system, which substantially predates any of the others. (I say “in a lot of ways” because OCaml’s modules are surprisingly capable; they end up being their own kind of types and you can do some crazy things with them, all of which I’d like to actually come to understand… eventually.) Rust’s module system, meanwhile, has a lot of similarities to Elm’s in particular, but because we actually carry functions along with the types they &lt;code&gt;impl&lt;/code&gt; (though they get defined separately, with all the power that entails), we have a bit less boilerplate we need to write just to get at the specific functions in play.&lt;/p&gt;
&lt;p&gt;Next time (probably only a couple of weeks away because we’re working through the book at work in a book club!), I’ll be looking at Chapter 7: Modeling Workflows as Pipelines. I suspect this will be a place where the true functional orientation of Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason will much more sharply differentiate them from the sometimes-functionalish-but-not-actually-functional way we write things in Rust.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This reference will live and be valid as long as the underlying &lt;code&gt;WidgetCode&lt;/code&gt; is. We could also return a &lt;code&gt;String&lt;/code&gt; if we wanted that value to live independently of the &lt;code&gt;WidgetCode&lt;/code&gt; instance backing it.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Putting it in its own module, whether in a separate &lt;em&gt;does&lt;/em&gt; have implications for privacy, though we don’t much care about them in this case. Rust lets us set the privacy on &lt;a href="https://doc.rust-lang.org/1.24.1/reference/visibility-and-privacy.html"&gt;a whole spectrum&lt;/a&gt;, from “visible everywhere” to “only visible in this specific module.”&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="rust"></category><category term="elm"></category><category term="fsharp"></category><category term="reasonml"></category><category term="domain-driven design"></category><category term="four-languages"></category></entry><entry><title>Announcing ember-cli-typescript 1.1.0</title><link href="http://www.chriskrycho.com/2018/announcing-ember-cli-typescript-110.html" rel="alternate"></link><published>2018-02-12T07:00:00-05:00</published><updated>2018-02-12T07:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-12:/2018/announcing-ember-cli-typescript-110.html</id><summary type="html">Now with generators, support for addons, and incremental compilation! A lot has changed in the last six months, and we’re ready to kick the ecosystem into high gear!</summary><content type="html">&lt;p&gt;I’m delighted to announce the release of &lt;a href="https://github.com/typed-ember/ember-cli-typescript/releases/tag/v1.1.0"&gt;ember-cli-typescript 1.1.0&lt;/a&gt;. This first minor release since 1.0 includes the following shiny and awesome new features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#generators"&gt;Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#developing-addons"&gt;Support for developing addons in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#incremental-compilation"&gt;Incremental compilation (a.k.a. fast rebuilds in &lt;code&gt;ember serve&lt;/code&gt; mode)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="generators" class="level2"&gt;
&lt;h2&gt;Generators&lt;/h2&gt;
&lt;p&gt;We’ve now added support for generating &lt;em&gt;all&lt;/em&gt; standard Ember items as TypeScript files instead of JavaScript files. So now when you run &lt;code&gt;ember generate component user-profile&lt;/code&gt; for example, you’ll get &lt;code&gt;user-profile.ts&lt;/code&gt;, &lt;code&gt;user-profile-test.ts&lt;/code&gt;, and &lt;code&gt;user-profile.hbs&lt;/code&gt;. For most files, this is just a nicety—just two files you don’t have to rename!—but in the case of services, controllers, and Ember Data models, adapters, and serializers it will actually make a really big difference in your experience of using TypeScript in your app or addon.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those generators are &lt;em&gt;mostly&lt;/em&gt; identical with ones in Ember and Ember Data, just with &lt;code&gt;.ts&lt;/code&gt; instead of &lt;code&gt;.js&lt;/code&gt; for the extension. The only changes we have made are: (a) we’ve tweaked them to use classes where possible, and (b) we have customized the controller, service, and Ember Data model, adapter, and serializer generators so you get the most mileage out of TypeScript for the least effort we can manage today. So when you do &lt;code&gt;ember generate service session&lt;/code&gt;, this is what you’ll see:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;

export default class Session extends Service.extend({
  // anything which *must* be merged on the prototype
}) {
  // normal class definition
}

// DO NOT DELETE: this is how TypeScript knows how to look up your services.
declare module &amp;quot;ember&amp;quot; {
  interface ServiceRegistry {
    session: Session;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Courtesy of these generators, you can now write &lt;em&gt;almost&lt;/em&gt; exactly what you’d write in vanilla Ember and get full support for autocompletion of properties and methods on the &lt;code&gt;Session&lt;/code&gt; service, as well as type-checking for how you use those. Service and controller injections just require you to explicitly name the service or controller being injected:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { inject as service } from &amp;quot;@ember/service&amp;quot;;

export default class UserProfile extends Component {
  session = service(&amp;quot;session&amp;quot;);
  // note the string ^ naming the service explicitly
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, for example, if your &lt;code&gt;session&lt;/code&gt; service had a &lt;code&gt;login&lt;/code&gt; method on it:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;
import RSVP from &amp;quot;rsvp&amp;quot;;

export default class Session extends Service {
  login(email: string, password: string): RSVP.Promise&amp;lt;string&amp;gt; {
    // some API call to log in
  }
}

// DO NOT DELETE: this is how TypeScript knows how to look up your services.
declare module &amp;quot;ember&amp;quot; {
  interface ServiceRegistry {
    session: Session;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then anywhere you injected and used it, you’ll get auto-complete suggestions and type checking:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/ts-autocomplete.png" alt="autocompletion" /&gt;&lt;figcaption&gt;autocompletion&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/ts-type-checking.png" alt="type-checking" /&gt;&lt;figcaption&gt;type-checking&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(You’ll see the same kinds of things in other editors, from Vim to IntelliJ IDEA. Visual Studio Code is just my current editor of choice.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="addon-development" class="level2"&gt;
&lt;h2&gt;Addon development&lt;/h2&gt;
&lt;p&gt;As &lt;a href="http://www.chriskrycho.com/2017/announcing-ember-cli-typescript-100.html#the-roadmap"&gt;promised with the 1.0 release&lt;/a&gt;, 1.1 (though arriving much later than I hoped it would) includes support for developing addons with TypeScript.&lt;/p&gt;
&lt;p&gt;Strictly speaking, of course, you could &lt;em&gt;always&lt;/em&gt; develop addons using TypeScript, but there were two problems with it: (1) dependency management and (2) manual work required to deal with the dependency management problems.&lt;/p&gt;
&lt;section id="dependency-management" class="level3"&gt;
&lt;h3&gt;1. Dependency management&lt;/h3&gt;
&lt;p&gt;In the normal Ember CLI workflow, TypeScript had to be a &lt;code&gt;dependency&lt;/code&gt;—not a &lt;code&gt;devDependency&lt;/code&gt;—of the addon, because the normal pattern with Ember CLI is to ship the uncompiled files and have the consumer compile them all together at build time.&lt;/p&gt;
&lt;p&gt;This makes a certain amount of sense for Babel given the Ember community’s shared reliance on Babel: it’s just assumed to be part of every app build. In that case, it gives consumers control over their compilation target. If an app only needs to target evergreen browsers, it can do that and ship a smaller payload, because an addon won’t have pre-compiled in things like generator support, etc.&lt;/p&gt;
&lt;p&gt;In the case of TypeScript, however, this makes a lot less sense: many (probably &lt;em&gt;most&lt;/em&gt;) consumers of addons written in TypeScript will still be normal JavaScript consumers. We did not want to burden normal consumers with a TypeScript compile step. We &lt;em&gt;also&lt;/em&gt; didn’t want to burden any consumers with the reality that TypeScript is a &lt;em&gt;large&lt;/em&gt; install. TypeScript 2.6.2 is 32MB on disk for me. Even with some degree of deduplication by npm or yarn, if addons used a variety of versions of TypeScript for development—as they surely would!—the install cost for consumers would quickly spiral into a nasty spot. And again: that’s bad enough for someone who &lt;em&gt;wants&lt;/em&gt; to use TypeScript in their app; it’s far worse for someone who just wants to consume the compiled JavaScript.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="manual-workarounds" class="level3"&gt;
&lt;h3&gt;2. Manual workarounds&lt;/h3&gt;
&lt;p&gt;You could work around all of that by building the JavaScript (and TypeScript definitions) yourself. But as part of that, you had to do all the work of making sure both the JavaScript files and the type definitions you generated ended up in the right place for distribution and consumption. That was always possible, but it was also always going to be a lot of work. In practice, as far as I know, &lt;em&gt;no one has done this&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution" class="level3"&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;We now support TypeScript as a &lt;code&gt;devDependency&lt;/code&gt; and also manage the work of generating JavaScript and type definitions for you. All you have to do is install ember-cli-typescript into an addon, and then when you do your build step, we’ll automatically do the work (on prepublish) of generating TypeScript &lt;code&gt;.d.ts&lt;/code&gt; files and JavaScript source for you.&lt;/p&gt;
&lt;p&gt;Consumers of your addon, therefore, will (a) not know or care that the addon is written in TypeScript if they just want to consume it as normal JavaScript&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; or (b) will get the benefits of your having written the library in TypeScript without paying the penalty of having to have multiple versions of the TypeScript compiler downloaded to their own app.&lt;/p&gt;
&lt;p&gt;One important caveat: we do &lt;em&gt;not&lt;/em&gt; support TypeScript in an addon’s &lt;code&gt;app&lt;/code&gt; directory. However, for most addons, we don’t think this should be a problem. It’s rare for addons to put actual implementation in the &lt;code&gt;app&lt;/code&gt; directory; instead it has simply become conventional for the &lt;code&gt;app&lt;/code&gt; directory simply to have re-exports for convenient access to the functionality supplied by the addon.&lt;/p&gt;
&lt;p&gt;Also note that you can supply type definitions for your addon &lt;em&gt;without&lt;/em&gt; developing the addon itself in TypeScript.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; You do &lt;em&gt;not&lt;/em&gt; need ember-cli-typescript installed for that. You only need the addon if you actually want to take advantage of the opportunities TypeScript affords for developing your own addon.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="incremental-compilation" class="level2"&gt;
&lt;h2&gt;Incremental compilation&lt;/h2&gt;
&lt;p&gt;Last but not least, we’ve managed—mostly through the hard work of both Dan Freeman (&lt;a href="https://github.com/dfreeman"&gt;@dfreeman&lt;/a&gt;) and Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;—to get support for TypeScript’s &lt;code&gt;--watch&lt;/code&gt; mode integrated.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; What this means in practice is: &lt;em&gt;way&lt;/em&gt; faster iteration as you work.&lt;/p&gt;
&lt;p&gt;Previously, every time you triggered &lt;em&gt;any&lt;/em&gt; change in your app (even if it didn’t involve any TypeScript files at all), the TypeScript compiler would recompile &lt;em&gt;all&lt;/em&gt; the TypeScript files in your application. We didn’t initially have a good way to make TypeScript and Broccoli (and therefore Ember CLI) communicate clearly about what had changed. Now, courtesy of Dan and Derek’s hard work (and my cheerleading, testing, and fixing a few corner pieces along the way), we do! So when you change a &lt;code&gt;.hbs&lt;/code&gt; file or a &lt;code&gt;.js&lt;/code&gt; file… the TypeScript compiler won’t do anything. And when you change a TypeScript file, the TypeScript compiler will &lt;em&gt;only&lt;/em&gt; recompile that file.&lt;/p&gt;
&lt;p&gt;On my own app (~35,000 lines of TypeScript across ~700 files), that’s the difference between rebuilds involving TypeScript taking 15–20 seconds and their taking 1–2 seconds. Literally an order of magnitude faster! Over the course of a day of development, that saves a &lt;em&gt;huge&lt;/em&gt; amount of time.&lt;/p&gt;
&lt;p&gt;The way we did it also solved an incredibly annoying problem we had in the previous pass: &lt;em&gt;any&lt;/em&gt; change to your app was triggering &lt;code&gt;tsc&lt;/code&gt; to rebuild the entire TypeScript tree of your app, even if you didn’t so much as look at &lt;code&gt;.ts&lt;/code&gt; file. This was particularly annoying when combined with the long rebuild times: change a CSS file and wait for your TypeScript files to rebuild? Ugh. But not anymore!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="credit-and-thanks" class="level2"&gt;
&lt;h2&gt;Credit and Thanks&lt;/h2&gt;
&lt;p&gt;Massive credit goes to Dan Freeman (&lt;a href="https://github.com/dfreeman"&gt;@dfreeman&lt;/a&gt;) and Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;), who did most of the heavy lifting on the internals for this release, and together unlocked both incremental compilation and addon support. Derek also did the lion’s share of the work on writing the types for Ember and Ember Data.&lt;/p&gt;
&lt;p&gt;Thanks to Maarten Veenstra (&lt;a href="https://github.com/maerten"&gt;@maerten&lt;/a&gt;) for the original inspiration (and a spike last summer) for using a type registry, and to Mike North (&lt;a href="https://github.com/maerten"&gt;@mike-north&lt;/a&gt;) for some discussion and planning around the idea late in 2017. I may have implemented them, but the ideas came from the community!&lt;/p&gt;
&lt;p&gt;Thanks to Frank Tan (&lt;a href="https://github.com/tansongyang"&gt;@tansongyang&lt;/a&gt;) for doing a lot of the work on porting the generators from the Ember and Ember Data repositories to ember-cli-typescript, as well as converting them to TypeScript and to use the new formats. He also contributed the type definitions for the new (&lt;a href="https://github.com/emberjs/rfcs/pull/232/"&gt;RFC #232&lt;/a&gt;) QUnit testing API.&lt;/p&gt;
&lt;p&gt;Thanks to everyone who contributed to ember-cli-typescript or the Ember typings in any way since we released 1.0.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ember-cli-typescript contributors (note that I intentionally include here everyone who opened issues on the repository: that is &lt;em&gt;not&lt;/em&gt; a small thing and has helped us immensely):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bryan Crotaz (&lt;a href="https://github.com/BryanCrotaz"&gt;@BryanCrotaz&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Daniel Gratzl (&lt;a href="https://github.com/danielgratzl"&gt;@danielgratzl&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guangda Zhang (&lt;a href="https://github.com/inkless"&gt;@inkless&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/guangda-prosperworks"&gt;@guangda-prosperworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Krati Ahuja (&lt;a href="https://github.com/kratiahuja"&gt;@kratiahuja&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Martin Feckie (&lt;a href="https://github.com/mfeckie"&gt;@mfeckie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Nikos Katsikanis (&lt;a href="https://github.com/QuantumInformation"&gt;@QuantumInformation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Per Lundberg (&lt;a href="https://github.com/perlun"&gt;@perlun&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Prabhakar Poudel (&lt;a href="https://github.com/prabhakar-poudel"&gt;@Prabhakar-Poudel&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ryan LaBouve (&lt;a href="https://github.com/ryanlabouve"&gt;@ryanlabouve&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Simon Ihmig (&lt;a href="https://github.com/simonihmig"&gt;@simonihmig&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Theron Cross (&lt;a href="https://github.com/theroncross"&gt;@theroncross&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Thomas Gossman (&lt;a href="https://github.com/gossi"&gt;@gossi&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Vince Cipriani (&lt;a href="https://github.com/vcipriani"&gt;@vcipriani&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember typings contributors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adnan Chowdhury (&lt;a href="https://github.com/bttf"&gt;@bttf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Frank Tan (&lt;a href="https://github.com/tansongyang"&gt;@tansongyang&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guangda Zhang (&lt;a href="https://github.com/inkless"&gt;@inkless&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ignacio Bona Piedrabuena (&lt;a href="https://github.com/igbopie"&gt;@igbopie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Leonard Thieu &lt;a href="https://github.com/leonard-thieu"&gt;@leonard-thieu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logan Tegman &lt;a href="https://github.com/ltegman"&gt;@ltegman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Martin Feckie (&lt;a href="https://github.com/mfeckie"&gt;@mfeckie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mike North (&lt;a href="https://github.com/maerten"&gt;@mike-north&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Nathan Jacobson (&lt;a href="https://github.com/natecj"&gt;@natecj&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Per Lundberg (&lt;a href="https://github.com/perlun"&gt;@perlun&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Robin Ward (&lt;a href="https://github.com/eviltrout"&gt;@eviltrout&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to Rob Jackson (&lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt;) and Tobias Bieniek (&lt;a href="https://github.com/Turbo87"&gt;@Turbo87&lt;/a&gt; on GitHub, @tbieniek in the Ember Slack) for answering tons of questions and putting up with regular pestering about Ember CLI.&lt;/p&gt;
&lt;p&gt;And last but not least, thanks to everyone who’s popped into #topic-typescript on the Ember Community Slack with questions, comments, problem reports, and the occasional word of encouragement. It really does help.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For details on how this all works, see &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;TypeScript and Ember.js Update: Part 4&lt;/a&gt;, where I discuss these changes in detail.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;although they may actually get some benefits in a number of modern editors, since e.g. VS Code and the JetBrains IDEs will leverage types if they exist!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;More on that in a post to be released in the next couple weeks—one I promised &lt;em&gt;long&lt;/em&gt; ago, but which we’re now in a place to actually do: a plan and a roadmap for typing the whole Ember ecosystem!&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;And of course, right as we finally landed our support for it, by hacking around the &lt;code&gt;--watch&lt;/code&gt; invocation in a lot of really weird ways, Microsoft shipped API-level support for it. We hope to switch to using that under the hood, but that shouldn’t make any difference at all to you as a consumer of the addon, except that if/when we land it at some point, you’ll just have a nicer experience.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="typescript"></category><category term="javascript"></category><category term="typing-your-ember"></category></entry><entry><title>TypeScript and Ember.js Update, Part 4</title><link href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html" rel="alternate"></link><published>2018-02-08T07:30:00-05:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-08:/2018/typing-your-ember-update-part-4.html</id><summary type="html">Using Ember Data effectively, and migrating to new (better, easier!) approaches for service and controller lookup while we’re at it.</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the previous posts in this series, I introduced the big picture of how the story around TypeScript and Ember.js has improved over the last several months, walked through some important background on class properties, and dug deep on computed properties, actions, and mixins.&lt;/p&gt;
&lt;p&gt;In today’s post, we’ll look at how to write Ember Data models so they work correctly throughout your codebase, and see some improvements to how we can do &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; injections even from a few weeks ago.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s the outline of this update sequence:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Overview, normal Ember objects, component arguments, and injections.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Computed properties, actions, mixins, and class methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;&lt;strong&gt;Using Ember Data, and service and controller injections improvements.&lt;/strong&gt; (this post)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="ember-data" class="level2"&gt;
&lt;h2&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;There remains one significant challenges to using Ember Data effectively with TypeScript today: Ember Data, for reasons I haven’t yet dug into myself, does not play nicely with ES6 classes. However, we &lt;em&gt;need&lt;/em&gt; named class exports for the sake of being able to use them as types elsewhere in our programs. The hack to work around this is much the same as anywhere else we need named exports but have to get things back into the prototype:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can still define other items of the class normally, but attributes have to be prototypally bound or &lt;em&gt;you will have problems&lt;/em&gt;. Note that this only applies (as far as I can tell) to Ember Data &lt;code&gt;Model&lt;/code&gt;s specifically—&lt;code&gt;Adapter&lt;/code&gt; and &lt;code&gt;Serializer&lt;/code&gt; classes work just fine.&lt;/p&gt;
&lt;p&gt;The other problem we’ve historically had was dealing with lookups—the situation was similar to that I described in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Part 3&lt;/a&gt; for service injection. However, as of &lt;em&gt;this week&lt;/em&gt;, we’re landing a solution that means you can drop the type coercions and just do a lookup like you would normally, and it will Just Work™️.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Keep your eyes open for the ember-cli-typescript 1.1 release in the next couple days!&lt;/p&gt;
&lt;p&gt;Once this release of both ember-cli-typescript and the updated typings land, when you generate an Ember Data model by doing &lt;code&gt;ember generate model person firstName:string lastName:string&lt;/code&gt;, it will look like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {
  // normal class body definition here
}

// DO NOT DELETE: this is how TypeScript knows how to look up your models.
declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That module and interface declaration at the bottom &lt;em&gt;merges&lt;/em&gt; the declaration for this model with the declarations for all the other models. You’ll see the same basic pattern for &lt;code&gt;DS.Adapter&lt;/code&gt; and &lt;code&gt;DS.Serializer&lt;/code&gt; instances. The result is that &lt;em&gt;using&lt;/em&gt; a model will now look like this. In addition to the &lt;code&gt;Person&lt;/code&gt; model definition just above, our adapter might be like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Adapter {
  update(changes: { firstName?: string; lastName?: string }) {
    fetch(&amp;quot;the-url-to-change-it&amp;quot;, {
      method: &amp;quot;POST&amp;quot;,
      body: JSON.stringify(changes)
    });
  }
}

declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then putting the pieces together, our component definition will just look like this:&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;*&lt;strong&gt;Note:&lt;/strong&gt; please see the &lt;a href="https://www.chriskrycho.com/2018/ember-ts-class-properties.html"&gt;update about class properties published mid-2018&lt;/a&gt;. The examples below are incorrect in several important ways.&lt;/p&gt;
&lt;/aside&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { inject as service } from &amp;quot;@ember/service&amp;quot;;

export default class PersonCard extends Component {
  id: string | number;

  store = service(&amp;quot;store&amp;quot;);
  model = this.store.findRecord(&amp;quot;person&amp;quot;, this.id);

  actions = {
    savePerson(changes: { firstName?: string; lastName?: string }) {
      this.store.adapterFor(&amp;quot;person&amp;quot;).update(changes);
    }
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The type of &lt;code&gt;model&lt;/code&gt; here is now &lt;code&gt;Person &amp;amp; DS.PromiseObject&amp;lt;Person&amp;gt;&lt;/code&gt; (which is actually what Ember Data returns for these kinds of things!), and the &lt;code&gt;this.store.adapterFor&lt;/code&gt; actually correctly returns the &lt;code&gt;Person&lt;/code&gt; adapter as well, so the call to its &lt;code&gt;update&lt;/code&gt; method type-checks as well (including guaranteeing that the arguments to it are correct). That also means you’ll get autocompletion for those, including for their types, if you’re using an editor configured for it. And, happily for everyone, if you mistype a string (&lt;code&gt;preson&lt;/code&gt; instead of &lt;code&gt;person&lt;/code&gt;, for example), you’ll get a compile-time error!&lt;/p&gt;
&lt;p&gt;Notice as well that the service injection is much cleaner than it was in earlier examples in the series. That’s because we made the same “registry”-type changes—as I suggested we might back in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Part 1&lt;/a&gt;!—for controller and service injections. Before, for this kind of thing:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;export default class PersonCard extends Component {
  store: Computed&amp;lt;DS.Store&amp;gt; = service();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;export default class PersonCard extends Component {
  store = service(&amp;quot;store&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s not &lt;em&gt;quite&lt;/em&gt; as minimalist as what you get in vanilla Ember (where the name of the property is used to do the lookup at runtime), but it’s pretty close, and a huge improvement! Not least since it’s &lt;em&gt;exactly&lt;/em&gt; as type-checked, and therefore as friendly to autocomplete/IntelliSense/etc. as it was before.&lt;/p&gt;
&lt;section id="migrating-existing-items" class="level3"&gt;
&lt;h3&gt;Migrating existing items&lt;/h3&gt;
&lt;p&gt;Your path forward for using the new approach is straightforward and fairly mechanical:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Add the module-and-interface declaration for each Ember Data &lt;code&gt;Model&lt;/code&gt;, &lt;code&gt;Adapter&lt;/code&gt;, and &lt;code&gt;Serializer&lt;/code&gt;; and also each Ember &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; you have defined.&lt;/li&gt;
&lt;li&gt;Remove any type coercions you’ve written out already for these.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="add-declaration" class="level4"&gt;
&lt;h4&gt;1. Add declaration&lt;/h4&gt;
&lt;section id="ds.model" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;DS.Model&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {}

declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ds.adapter" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;DS.Adapter&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Adapter {
  // customization
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Adapter {
  // customization
}

declare module &amp;quot;ember-data&amp;quot; {
  interface AdapterRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ds.serializer" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;DS.Serializer&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Serializer {
  // customization
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Serializer {
  // customization
}

declare module &amp;quot;ember-data&amp;quot; {
  interface SerializerRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="service" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;Service&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;

export default class ExternalLogging extends Service {
  // implementation
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;

export default class ExternalLogging extends Service {
  // implementation
}

declare module &amp;quot;ember&amp;quot; {
  interface ServiceRegistry {
    &amp;quot;external-logging&amp;quot;: ExternalLogging;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="controller" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;Controller&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Controller from &amp;quot;@ember/controller&amp;quot;;

export default class Profile extends Controller {
  // implementation
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Controller from &amp;quot;@ember/controller&amp;quot;;

export default class Profile extends Controller {
  // implementation
}

declare module &amp;quot;@ember/controller&amp;quot; {
  interface ControllerRegistry {
    profile: Profile;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you &lt;em&gt;don’t&lt;/em&gt; do add the type registry declarations, you’ll just get back:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;compiler errors&lt;/em&gt; for any use of a string key in your service and controller lookups&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; (the top-level classes we inherit from) instead of the specific class you created if you use the no-argument version of the &lt;code&gt;inject&lt;/code&gt; helpers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;compiler errors&lt;/em&gt; for &lt;code&gt;DS.Model&lt;/code&gt;, &lt;code&gt;DS.Adapter&lt;/code&gt;, and &lt;code&gt;DS.Serializer&lt;/code&gt; lookups (since they always have a string key)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re looking to allow your existing code to all just continue working while you &lt;em&gt;slowly&lt;/em&gt; migrate to TypeScript, you can add this as a fallback somewhere in your own project (adapted to whichever of the registries you need):&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    [key: string]: DS.Model;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will lose you the type-checking if you type a key that doesn’t exist, but it means that models you haven’t yet added the type definition for won’t throw compile errors. (We’ve made this opt-in because otherwise you’d never be able to get that type-checking for using an invalid key.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="remove-any-existing-coercions" class="level4"&gt;
&lt;h4&gt;2. Remove any existing coercions&lt;/h4&gt;
&lt;p&gt;Now that we have the necessary updates to be able to do these lookups automatically in the compiler, we need to remove any existing type coercions.&lt;/p&gt;
&lt;section id="service-and-controller" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This change is really straightforward (and actually just simplifies things a lot!) for &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; injections.&lt;/p&gt;
&lt;pre class="diff"&gt;&lt;code&gt;  import Component from &amp;#39;@ember/component&amp;#39;;
  import { inject as service } from &amp;#39;@ember/service&amp;#39;;
- import Computed from &amp;#39;@ember/object/computed&amp;#39;;
-
- import ExternalLogging from &amp;#39;my-app/services/external-logging&amp;#39;;

  export default class UserProfile extends Component {
-   externalLogging: Computed&amp;lt;ExternalLogging&amp;gt; = service();
+   externalLogging = service(&amp;#39;external-logging&amp;#39;);
    // other implementation
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ember-data-1" class="level5"&gt;
&lt;h5&gt;Ember Data&lt;/h5&gt;
&lt;p&gt;This looks &lt;em&gt;slightly&lt;/em&gt; different for the Ember Data side.&lt;/p&gt;
&lt;p&gt;If you’ve been using the type coercion forms we shipped as a stopgap, like this—&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;const person = this.store.findRecord&amp;lt;Person&amp;gt;(&amp;quot;person&amp;quot;, 123);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;—you’ll need to drop the type coercion on &lt;code&gt;findRecord&amp;lt;Person&amp;gt;&lt;/code&gt;, which will give you a type error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[ts] Type ‘Person’ does not satisfy the constraint ‘string’.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is because, behind the scenes, &lt;code&gt;findRecord&lt;/code&gt; still takes a type parameter, but it’s now a string—the name of the model you’re looking up—&lt;em&gt;not&lt;/em&gt; the model itself. As such, you should &lt;em&gt;never&lt;/em&gt; supply that type parameter yourself; it’s taken care of automatically. As a result, your invocation should just be:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;const person = this.store.findRecord(&amp;quot;person&amp;quot;, 123);&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-full-type-of-lookups" class="level3"&gt;
&lt;h3&gt;The full type of lookups&lt;/h3&gt;
&lt;p&gt;One last note on Ember Data: calls like &lt;code&gt;findRecord('person', 123)&lt;/code&gt; actually return the type &lt;code&gt;Person &amp;amp; DS.PromiseObject&amp;lt;Person&amp;gt;&lt;/code&gt; – i.e., a type that acts like both the model and a promise wrapping the model. This is, to be sure, &lt;em&gt;weird&lt;/em&gt;, but it’s the reality, so that’s what our types give you.&lt;/p&gt;
&lt;p&gt;If you find yourself needing to write out that type locally for some reason—e.g. because part of your app deals explicitly with the result of a lookup—you may find it convenient to define a global type alias like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;type Loaded&amp;lt;T&amp;gt; = T &amp;amp; DS.PromiseObject&amp;lt;T&amp;gt;;
const person: Loaded&amp;lt;Person&amp;gt; = this.store.findRecord(&amp;quot;person&amp;quot;, 123);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the new support for getting that type automatically, you shouldn’t &lt;em&gt;normally&lt;/em&gt; need that, but it’s convenient if or when you &lt;em&gt;do&lt;/em&gt; need it. For example, if a component is passed the result of a &lt;code&gt;Person&lt;/code&gt; lookup and needs to be able to treat it as a promise &lt;em&gt;or&lt;/em&gt; the model, you could write it like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;

export default class PersonDisplay extends Component {
  model: Loaded&amp;lt;Person&amp;gt;; // instead of just `model: Person`
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="preview-mirage" class="level3"&gt;
&lt;h3&gt;Preview: Mirage&lt;/h3&gt;
&lt;p&gt;As it turns out, Ember CLI Mirage’s approach is a lot like Ember Data’s (although it’s actually a lot more dynamic!), so I have a very similar approach working in our codebase for doing lookups with Mirage’s database. Sometime in February or March, we hope to get that completed and upstreamed into Mirage itself, so that you can get these exact same benefits when using Mirage to write your tests.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that’s pretty much a wrap on Ember Data! The &lt;em&gt;next&lt;/em&gt; post you can expect in this series will be a break from nitty-gritty “how to use TS in Ember” posts for a very exciting, closely related announcement—probably tomorrow or Monday! The post after that will be a deep dive into (mostly the limitations of!) writing types for mixins and proxies.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re curious about the mechanics, we’re basically setting up a “type registry” which maps the string keys to the correct model, so that the type of e.g. &lt;code&gt;store.createRecord('some-model', { ... })&lt;/code&gt; will do a lookup in an interface which defines a mapping from model name, i.e. &lt;code&gt;some-model&lt;/code&gt; here, to the model type, e.g. &lt;code&gt;export default class SomeModel extends DS.Model.extend({ ... }) {}&lt;/code&gt;. I’ll write up a full blog post on the mechanics of that sometime soon.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>TypeScript and Ember.js Update, Part 3</title><link href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html" rel="alternate"></link><published>2018-01-25T07:00:00-05:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-25:/2018/typing-your-ember-update-part-3.html</id><summary type="html">Now that we know a bit more about how computed properties work, we’ll talk about computed properties, actions, and mixins on the Ember.js side, along with the normal class methods.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you’re following along with this &lt;em&gt;as I publish it&lt;/em&gt; in late January 2018, please go back and read the end of &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Part 2&lt;/a&gt;, which I updated substantially yesterday evening to include more material I missed in the first version of that post, but which belonged there and not here.&lt;/p&gt;
&lt;p&gt;In the previous posts in this series, I introduced the big picture of how the story around TypeScript and Ember.js has improved over the last several months and walked through some important background on class properties. In this post, I’ll build on that foundation to look closely at computed properties, actions, and mixins.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s the outline of this update sequence:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Overview, normal Ember objects, component arguments, and injections.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;&lt;strong&gt;Computed properties, actions, mixins, and class methods (this post).&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Using Ember Data, and service and controller injections improvements.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="a-detailed-example-contd.-computed-properties-mixins-actions-and-class-methods" class="level2"&gt;
&lt;h2&gt;A detailed example (cont’d.) – computed properties, mixins, actions, and class methods&lt;/h2&gt;
&lt;aside&gt;
&lt;p&gt;*&lt;strong&gt;Note:&lt;/strong&gt; please see the &lt;a href="https://www.chriskrycho.com/2018/ember-ts-class-properties.html"&gt;update about class properties published mid-2018&lt;/a&gt;. The example below and in the following posts is incorrect in several important ways.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Let’s start by recalling the example Component we’re working through:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import Computed from &amp;#39;@ember/object/computed&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;section id="computed-properties" class="level3"&gt;
&lt;h3&gt;Computed properties&lt;/h3&gt;
&lt;p&gt;We already covered component arguments and injections as well as basic class properties and the exceptions to normal class-property ways of doing things, in Parts &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;1&lt;/a&gt; and &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;2&lt;/a&gt;. With that background out of the way, we can now turn to computed properties. I’m including the component arguments in this code sample because they’re referenced in the computed property. Assume &lt;code&gt;Person&lt;/code&gt; is a pretty “person” representation, with a &lt;code&gt;firstName&lt;/code&gt; and a &lt;code&gt;lastName&lt;/code&gt;and maybe a few other properties.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;section id="computed-properties-1" class="level4"&gt;
&lt;h4&gt;&lt;code&gt;computed&lt;/code&gt; properties&lt;/h4&gt;
&lt;p&gt;When using a computed property in the brave new world of ES6 classes, we normally just assign them as instance properties. As mentioned in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;the previous post&lt;/a&gt;, and in line with my comments above, this has some important tradeoffs around performance. If you need the absolute &lt;em&gt;best&lt;/em&gt; performance, you can continue to install them on the prototype by doing this instead:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component.extend({
  fromModel: computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  ),
}) {
  // other properties
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whichever way you do it, TypeScript will correctly infer the type of the computed property in question (here &lt;code&gt;fromModel&lt;/code&gt;) as long as you explicitly annotate the return type of the callback passed to &lt;code&gt;computed&lt;/code&gt;. Accordingly, in this case, the type of &lt;code&gt;fromModel&lt;/code&gt; is &lt;code&gt;ComputedProperty&amp;lt;string&amp;gt;&lt;/code&gt;. The fact that it’s a &lt;code&gt;ComputedProperty&lt;/code&gt; means if you try to treat it as a plain string, without using &lt;code&gt;Ember.get&lt;/code&gt; to unwrap it, TypeScript will complain at you.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// type checking error:
this.fromModel.length;

// type checking valid:
this.get(&amp;#39;fromModel&amp;#39;).length;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other really important thing to note here is the use of &lt;code&gt;this: MyComputed&lt;/code&gt;. By doing this, we’re telling TypeScript explicitly that the type of &lt;code&gt;this&lt;/code&gt; in this particular function is the class context. We have to do this here, because we don’t have any way to tell the &lt;code&gt;computed&lt;/code&gt; helper itself that the function inside it will be bound to the &lt;code&gt;this&lt;/code&gt; context of the containing class. Put another way: we don’t have any &lt;em&gt;other&lt;/em&gt; way to tell TypeScript that one of the things &lt;code&gt;computed&lt;/code&gt; does is bind &lt;code&gt;this&lt;/code&gt; appropriately to the function passed into it; but gladly we do have &lt;em&gt;this&lt;/em&gt; way—otherwise we’d be out of luck entirely! (You’ll see the same thing below when we look at actions). The boilerplate is a bit annoying, admittedly—but it at least makes it type-check.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="computed-property-macros" class="level4"&gt;
&lt;h4&gt;Computed property macros&lt;/h4&gt;
&lt;p&gt;Beyond &lt;code&gt;computed&lt;/code&gt;, there are a lot of other computed property tools we use all the time. Some of them can (and therefore &lt;em&gt;do&lt;/em&gt;) infer the type of the resulting computed property correctly. But there are a bunch of idiomatic things that TypeScript does not and cannot validate – a number of the computed property macros are in this bucket, because they tend to be used for nested keys, and as noted above, TypeScript does not and &lt;em&gt;cannot&lt;/em&gt; validate nested keys like that.&lt;/p&gt;
&lt;p&gt;We have a representative of each of these scenarios:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the case of &lt;code&gt;isLoggedIn&lt;/code&gt;, the &lt;code&gt;bool&lt;/code&gt; helper only ever returns a boolean, so the type of &lt;code&gt;isLoggedIn&lt;/code&gt; is &lt;code&gt;ComputedProperty&amp;lt;boolean&amp;gt;&lt;/code&gt;. In the case of &lt;code&gt;savedUser&lt;/code&gt;, since TypeScript can’t figure out what the nested key means, we have to specify it explicitly, using &lt;code&gt;Computed&amp;lt;Person&amp;gt;&lt;/code&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; In these cases, you have to do the work yourself to check that the type you specify is the &lt;em&gt;correct&lt;/em&gt; type. If you write down the wrong type here, TypeScript will believe you (it doesn’t have any other good option!) and you’ll be back to things blowing up unexpectedly at runtime.&lt;/p&gt;
&lt;p&gt;The typings supply the concrete (non-&lt;code&gt;any&lt;/code&gt;) return type for: &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;gte&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;lte&lt;/code&gt;, &lt;code&gt;match&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;notEmpty&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="on-nested-keys" class="level4"&gt;
&lt;h4&gt;On nested keys&lt;/h4&gt;
&lt;p&gt;As noted above, TypeScript cannot do a lookup for any place using nested keys—which means that &lt;code&gt;this.get('some.nested.key')&lt;/code&gt; won’t type-check, sadly. This is an inherent limitation of the type system as it stands today, and for any future I can foresee. The problem is this: what exactly &lt;em&gt;is&lt;/em&gt; &lt;code&gt;'some.nested.key'&lt;/code&gt;? It &lt;em&gt;could&lt;/em&gt; be what we use it for in the usual scenario in Ember, of course: a string representing a lookup on a property of a property of a property of whatever &lt;code&gt;this&lt;/code&gt; is. But it could equally well be a key named &lt;code&gt;'some.nested.key'&lt;/code&gt;. This is perfectly valid JavaScript, after all:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;const foo = {
  [&amp;#39;some.nested.key&amp;#39;]: &amp;#39;Well, this is weird, but it works&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TypeScript does not today and presumably &lt;em&gt;never will&lt;/em&gt; be able to do that lookup. The workaround is to do one of two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;If you &lt;em&gt;know&lt;/em&gt; you have a valid parent, you can do the (catastrophically ugly, but functional) nested &lt;code&gt;Ember.get&lt;/code&gt; that now litters our codebase:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import { get } from &amp;#39;@ember/object&amp;#39;;
const value = get(get(get(anObject, &amp;#39;some&amp;#39;), &amp;#39;nested&amp;#39;), &amp;#39;key&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, it’s a nightmare. But… it type-checks, and it works well &lt;em&gt;enough&lt;/em&gt; in the interim until we get a decorators-based solution that lets us leverage &lt;a href="https://github.com/emberjs/rfcs/pull/281"&gt;RFC #281&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;// @ts-ignore&lt;/code&gt; to simply ignore the type-unsafety of the lookup. This approach is preferable when you don’t know if any of the keys might be missing. If, for example, either &lt;code&gt;some&lt;/code&gt; or &lt;code&gt;nested&lt;/code&gt; were &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, the lookup example above in (1) would fail.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import { get } from &amp;#39;@ember/object&amp;#39;;
// @ts-ignore -- deep lookup with possibly missing parents
const value = get(anObject, &amp;#39;some.nested.key&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="actions" class="level3"&gt;
&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;What about actions? As usual, these just become class instance properties in the current scheme.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with computed properties, we need the &lt;code&gt;this&lt;/code&gt; type declaration to tell TypeScript that this method is going to be automatically bound to the class instance. Otherwise, TypeScript thinks the &lt;code&gt;this&lt;/code&gt; here is the &lt;code&gt;actions&lt;/code&gt; hash, rather than the &lt;code&gt;MyComponent&lt;/code&gt; class.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happily, that’s really all there is to it for actions: they’re quite straightforward other than needing the &lt;code&gt;this&lt;/code&gt; type specification.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="types-in-.extend...-blocks" class="level3"&gt;
&lt;h3&gt;Types in &lt;code&gt;.extend({...})&lt;/code&gt; blocks&lt;/h3&gt;
&lt;p&gt;By and large, you can get away with using the same &lt;code&gt;this: MyComponent&lt;/code&gt; trick when hacking around prototypal extension problems, or performance problems, by putting computed properties in a &lt;code&gt;.extend({...}&lt;/code&gt; block. However, you &lt;em&gt;will&lt;/em&gt; sometimes see a type error indicating that the class is referenced in its own definition expression. In that case, you may need to judiciously apply &lt;code&gt;any&lt;/code&gt;, if you can’t make it work by using normal class properties.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="constructor-and-class-methods" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;constructor&lt;/code&gt; and class methods&lt;/h3&gt;
&lt;p&gt;ES6 class constructors and class methods both work as you’d expect, though as we’ll see you’ll need an extra bit of boilerplate for methods, at least for now.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample): void {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the most part, you can just switch to using normal ES6 class constructors instead of the Ember &lt;code&gt;init&lt;/code&gt; method. You can, if you so desire, also move existing &lt;code&gt;init&lt;/code&gt; functions passed to a &lt;code&gt;.extends({ ...})&lt;/code&gt; hash to class methods, and they’ll work once you change &lt;code&gt;this._super(...arguments)&lt;/code&gt; to &lt;code&gt;super.init(...arguments)&lt;/code&gt;. It’s worth pausing to understand the relationship between &lt;code&gt;init&lt;/code&gt; and prototypal &lt;code&gt;init&lt;/code&gt; and the &lt;code&gt;constructor&lt;/code&gt;. An &lt;code&gt;init&lt;/code&gt; in the &lt;code&gt;.extends()&lt;/code&gt; hash runs first, then an &lt;code&gt;init&lt;/code&gt; method on the class, then the normal &lt;code&gt;constructor&lt;/code&gt;.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that you do not need to (and cannot) annotate the &lt;code&gt;constructor&lt;/code&gt; with &lt;code&gt;this: MyComponent&lt;/code&gt;. Depending on the class you’re building, you may &lt;em&gt;occasionally&lt;/em&gt; have type-checking problems that come up as a result of this. I’ve only ever seen that happen when using computed properties while defining a proxy,&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; but it does come up. In that case, you can fall back to using &lt;code&gt;init&lt;/code&gt; as a method, and set &lt;code&gt;this: MyComponent&lt;/code&gt; on &lt;em&gt;it&lt;/em&gt;, and things will generally fall out as working correctly at that point. When it comes up, this seems to be just a limitation of what &lt;code&gt;this&lt;/code&gt; is understood to be in a &lt;code&gt;constructor&lt;/code&gt; given Ember’s rather more-complex-than-normal-classes view of what a given item being constructed is.&lt;/p&gt;
&lt;p&gt;Other class methods do also need the &lt;code&gt;this&lt;/code&gt; type specified if they touch computed properties. (Normal property access is fine without it.) That’s because the lookups for &lt;code&gt;ComputedProperty&lt;/code&gt; instances (using &lt;code&gt;Ember.get&lt;/code&gt; or &lt;code&gt;Ember.set&lt;/code&gt;) need to know what &lt;code&gt;this&lt;/code&gt; is where they should do the lookup, and the full &lt;code&gt;this&lt;/code&gt; context isn’t inferred correctly at present. You can either write that on every invocation of &lt;code&gt;get&lt;/code&gt;and &lt;code&gt;set&lt;/code&gt;, like &lt;code&gt;(this as MyComponent).get(...)&lt;/code&gt;, or you can do it once at the start of the method. Again, a bit boiler-platey, but it gets the job done and once you’re used to it it’s minimal hassle.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One last note, which I didn’t include in the example: if you have a function (usually an action) passed into the component, you can define it most simply by just using &lt;code&gt;onSomeAction: Function;&lt;/code&gt; in the class definition, right with other class arguments. However, it’s usually most helpful to define what the type should actually &lt;em&gt;be&lt;/em&gt;, for your own sanity check if nothing else. As with e.g. &lt;code&gt;model&lt;/code&gt; in this example, we don’t actually have a good way to type-check that what is passed is correct. We can, however, at least verify in the constructor that the caller passed in a function using &lt;a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Fdebug/methods/assert?anchor=assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;, just as with other arguments.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So that’s a wrap on components (and controllers, which behave much the same way).&lt;/p&gt;
&lt;p&gt;In the next post, I’ll look at the elephant in the room: Ember Data (and closely related concern Ember CLI Mirage). While you &lt;em&gt;can&lt;/em&gt; make Ember Data stuff largely work today, it’s still a ways from &lt;em&gt;Just Works™️&lt;/em&gt;, sadly, but we’ll cover how to work around the missing pieces—we’ve gotten there in our own codebase, so you can, too!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;As mentioned in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Part 2&lt;/a&gt;, this problem doesn’t go away until we get decorators, unless you’re putting them on the prototype via &lt;code&gt;.extends()&lt;/code&gt;—but see below for the problems with &lt;em&gt;that&lt;/em&gt;. The short version is, we need decorators for this to actually be &lt;em&gt;nice&lt;/em&gt;. Once we get decorators, we will be able to combine them with the work done for &lt;a href="https://github.com/emberjs/rfcs/pull/281"&gt;RFC #281&lt;/a&gt; and normal lookup will just work:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;@computed(&amp;#39;model.firstName&amp;#39;)
get fromModel() {
  return `My name is ${this.model.firstName};`;
}&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’ve used &lt;code&gt;Computed&amp;lt;Person&amp;gt;&lt;/code&gt; and similar throughout here because it’s the most clear while still being reasonably concise. The actual type name in Ember’s own code is &lt;code&gt;ComputedProperty&lt;/code&gt;, but &lt;code&gt;ComputedProperty&amp;lt;Person&amp;gt;&lt;/code&gt; is &lt;em&gt;long&lt;/em&gt;, and it wouldn’t have added any real clarity here. In my own codebase, we use &lt;code&gt;CP&lt;/code&gt; (for “&lt;strong&gt;C&lt;/strong&gt;omputed &lt;strong&gt;P&lt;/strong&gt;roperty”) for the sake of brevity—so here that would just be &lt;code&gt;CP&amp;lt;Person&amp;gt;&lt;/code&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;In the future, this problem will hopefully be solved neatly by decorators:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  @action
  addToCollection(value: string) {
    const current = this.get(&amp;#39;aCollection&amp;#39;);
    this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For today, however, specifying a &lt;code&gt;this&lt;/code&gt; type is where it’s at.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;You can see this for yourself in &lt;a href="https://ember-twiddle.com/36844717dcc50d734139368edf2e87da"&gt;this Ember Twiddle&lt;/a&gt;—just open your developer tools and note the sequence.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Proxies, along with details of mixins, are a subject I’m leaving aside for Part 5, otherwise known as the “wow, this stuff is really weird to type” entry in the series.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Not &lt;em&gt;no&lt;/em&gt; hassle, though, and I look forward to a future where we can drop it, as Ember moves more and more toward modern JavaScript ways of solving these same problems!&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>TypeScript and Ember.js Update, Part 2</title><link href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html" rel="alternate"></link><published>2018-01-24T07:00:00-05:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-24:/2018/typing-your-ember-update-part-2.html</id><summary type="html">For years, you've been using Ember Object and .extend()—but the rules are different with classes.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the previous post in this series, I introduced the big picture of how the story around TypeScript and Ember.js has improved over the last several months. In this post, I’ll be pausing from TypeScript-specific to take a look at how things work with &lt;em&gt;class properties&lt;/em&gt;, since they have some big implications for how we work, which then have ripple effects on computed properties, actions, etc.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s the outline of this update sequence:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Overview, normal Ember objects, component arguments, and injections.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;&lt;strong&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world (this post).&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Computed properties, actions, mixins, and class methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Using Ember Data, and service and controller injections improvements.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="a-detailed-example-contd.-class-properties" class="level2"&gt;
&lt;h2&gt;A detailed example (cont’d.) – class properties&lt;/h2&gt;
&lt;aside&gt;
&lt;p&gt;*&lt;strong&gt;Note:&lt;/strong&gt; please see the &lt;a href="https://www.chriskrycho.com/2018/ember-ts-class-properties.html"&gt;update about class properties published mid-2018&lt;/a&gt;. The example below and in the following posts is incorrect in several important ways.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Let’s start by recalling the example Component we’re working through:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import Computed from &amp;#39;@ember/object/computed&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Throughout, you’ll note that we’re using &lt;em&gt;assignment&lt;/em&gt; to create these class properties—a big change from the key/value setup in the old &lt;code&gt;.extends({ ... })&lt;/code&gt; model:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Class properties like this are &lt;em&gt;instance properties&lt;/em&gt;. These are compiled to, because they are &lt;em&gt;equivalent to&lt;/em&gt;, assigning a property in the constructor. That is, these two ways of writing class property initialization are equivalent—&lt;/p&gt;
&lt;p&gt;At the property definition site:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // snip...

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // snip..

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  // snip...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the constructor:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // snip...

  // -- Class properties -- //
  aString: string;
  aCollection: string[];

  constructor() {
    super();

    this.aString = &amp;#39;this is fine&amp;#39;;
    this.aCollection = [];

    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  // snip...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see why the first one is preferable: if you don’t need any input to the component to set the value, you can simply set the definition inline where the property is declared.&lt;/p&gt;
&lt;p&gt;However, this is &lt;em&gt;quite&lt;/em&gt; unlike using &lt;code&gt;.extend&lt;/code&gt;, which installs the property on the prototype. Three very important differences from what you’re used to fall out of this, and &lt;em&gt;none of them are specific to TypeScript.&lt;/em&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section id="default-values" class="level3"&gt;
&lt;h3&gt;1. Default values&lt;/h3&gt;
&lt;p&gt;Since class property setup runs during the constructor, if you want the caller to be able to override it, you &lt;em&gt;must&lt;/em&gt; give it an explicit fallback that references what’s passed into the function. Something like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;class AnyClass {
  aDefaultProp = this.aDefaultProp || 0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, translated back into the constructor form:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;class AnyClass {
  constructor() {
    this.aDefaultProp = this.aDefaultProp || 0;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, you can see that if something has &lt;em&gt;already set&lt;/em&gt; the &lt;code&gt;aDefaultProp&lt;/code&gt; value (before the class constructor is called), we’ll use that value; otherwise, we’ll use the default. You can think of this as being something like default arguments to a function. In our codebase, we have started using &lt;a href="https://lodash.com/docs/4.17.4#defaultTo"&gt;&lt;code&gt;_.defaultTo&lt;/code&gt;&lt;/a&gt;, which works quite nicely. In the old world of declaring props with their values in the &lt;code&gt;.extends({ ... })&lt;/code&gt; hash, we got this behavior “for free”—but without a lot of other benefits of classes, so not &lt;em&gt;actually&lt;/em&gt; for free.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="no-more-shared-state" class="level3"&gt;
&lt;h3&gt;2. No more shared state&lt;/h3&gt;
&lt;p&gt;Because these are instance properties, &lt;em&gt;not&lt;/em&gt; assigned on the prototype, you do not have to worry about the problem—&lt;a href="https://dockyard.com/blog/2014/04/17/ember-object-self-troll"&gt;well-known among experienced Ember.js developers, but prone to bite people new to the framework&lt;/a&gt;—where you assign an array or object in the &lt;code&gt;.extend()&lt;/code&gt; method and then find that it’s shared between instances.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default Component.extend({
  anArray: [],  // &amp;lt;- this *will* be shared between instances
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ve long had to handle this by setting up those properties in our &lt;code&gt;init()&lt;/code&gt; method instead, so that they are created during object instantiation, rather than on the prototype. This problem goes away entirely with classes, including in TypeScript.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component {
  anArray = [];  // &amp;lt;- this will *not* be shared between instances
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note that here, we don’t have a type for the array, so it’s of type &lt;code&gt;any[]&lt;/code&gt;; we &lt;em&gt;always&lt;/em&gt; need type annotations for empty arrays if we want them to be a “narrower,” or more specific, type than that.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="performance-changes" class="level3"&gt;
&lt;h3&gt;3. Performance changes&lt;/h3&gt;
&lt;p&gt;The flip-side of this is that the only way we currently have to create computed property instances (until decorators stabilize) is &lt;em&gt;also&lt;/em&gt; as instance, not prototype, properties. I’ll look at computed properties (and their types) in more detail in the next post, so here mostly just note how the computed is set up on the class: by assignment, &lt;em&gt;not&lt;/em&gt; as a prototypal property.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component {
  aString = &amp;#39;Hello, there!&amp;#39;;

  itsLength = computed(&amp;#39;aString&amp;#39;, function(this: MyComponent): number {
    return this.aString.length;
  });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;does&lt;/em&gt; have a performance cost, which will be negligible in the ordinary case but pretty nasty if you’re rendering hundreds to thousands of these items onto the page. You can use this workaround for these as well as for any other properties which need to be prototypal (more on &lt;em&gt;that&lt;/em&gt; in the next post as well):&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component.extend({
  itsLength: computed(&amp;#39;aString&amp;#39;, function(this: MyComponent): number {
      return this.aString.length;
    }
  );
}) {
  aString = &amp;#39;Hello, there!&amp;#39;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;looks&lt;/em&gt; really weird, but it works exactly as you’d expect.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="class-property-variants" class="level2"&gt;
&lt;h2&gt;Class property variants&lt;/h2&gt;
&lt;p&gt;There are two times when things will look different from basic class properties. Both have to do with setting up the prototype to work the way other parts of the Ember object ecosystem expect.&lt;/p&gt;
&lt;section id="variant-1-prototypalmerged-properties" class="level3"&gt;
&lt;h3&gt;Variant 1: Prototypal/merged properties&lt;/h3&gt;
&lt;p&gt;The first is when you’re using properties that need to be merged with properties in the prototype chain, e.g. &lt;code&gt;attributeBindings&lt;/code&gt; or &lt;code&gt;classNameBindings&lt;/code&gt;, or which (because of details of how components are constructed) have to be set on the prototype rather than as instance properties, e.g. &lt;code&gt;tagClass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For those, we can just leverage &lt;code&gt;.extend&lt;/code&gt; in conjunction with classes:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;

export default class MyListItem extends Component.extend({
  tagName: &amp;#39;li&amp;#39;,
  classNameBindings: [&amp;#39;itemClass&amp;#39;]
}) {
  itemClass = &amp;#39;this-be-a-list&amp;#39;;

  // etc.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is also how you’ll &lt;em&gt;use&lt;/em&gt; mixins (on defining them, see below):&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import MyMixin from &amp;#39;my-app/mixins/my-mixin&amp;#39;;

export default class AnExample extends Component.extend(MyMixin) {
  // the rest of the definition.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, however—and this is very important—that you cannot &lt;code&gt;.extend&lt;/code&gt; an existing &lt;code&gt;class&lt;/code&gt; implementation. As a result, deep inheritance hierarchies &lt;em&gt;may&lt;/em&gt; make transitioning to classes in Ember painful. Most importantly: they may work &lt;em&gt;some&lt;/em&gt; of the time in &lt;em&gt;some&lt;/em&gt; ways, but will break when you least expect. So don’t do that! (This isn’t a TypeScript limitation; it’s a limitation of classes in Ember today.)&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="variant-2-mixins" class="level3"&gt;
&lt;h3&gt;Variant 2: Mixins&lt;/h3&gt;
&lt;p&gt;The other time you’ll have to take a different tack—and this falls directly out of the need for prototypal merging—is with &lt;code&gt;Mixin&lt;/code&gt;s, which don’t yet work properly with classes. Worse, it’s difficult (if not impossible) to get rigorous type-checking internally in &lt;code&gt;Mixin&lt;/code&gt; definitions, because you cannot define them as classes: you &lt;em&gt;have&lt;/em&gt; to use the old style throughout, because mixins are created with &lt;code&gt;.create()&lt;/code&gt;, not &lt;code&gt;.extend()&lt;/code&gt;.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;Note that if you’re writing &lt;em&gt;new&lt;/em&gt; code in Ember.js—using TypeScript or not—I strongly encourage you to simply avoid using mixins at all. Instead, use services (or, occasionally, inheritance). This will require you to change how you write some of your code, but in my experience that change will make your codebase much easier to understand, and therefore much easier to maintain.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I’ll have a lot more to say about these in part 5 of this series, including a detailed example of how to carefully type-annotate one and use it in another class. For now, suffice it to say that you’ll still need to incorporate &lt;code&gt;Mixin&lt;/code&gt;s via &lt;code&gt;.extend()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import MyMixin from &amp;#39;my-app/mixins/my-mixin&amp;#39;;

export default class SomeNewComponent extends Component.extend(MyMixin) {
  // normal class properties
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Those are the &lt;em&gt;biggest&lt;/em&gt; differences from &lt;code&gt;Ember.Object&lt;/code&gt; that you need to be aware of when working with class properties in Ember.js today, at least in my experience working with them day to day. These are not the only differences with &lt;em&gt;classes&lt;/em&gt;, though, especially when dealing with TypeScript, so in my next entry we’ll take a look at how classes work (and work well!) with most things in Ember.js and TypeScript together.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;You can use this same feature on classes using Babel, with the &lt;a href="https://babeljs.io/docs/plugins/transform-class-properties/"&gt;class properties transform&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Even when &lt;a href="https://github.com/emberjs/rfcs/pull/281"&gt;Ember.js RFC #281&lt;/a&gt; lands, this problem will not go away, at least under the current implementation, since &lt;a href="https://github.com/emberjs/rfcs/pull/281#issuecomment-360023258"&gt;&lt;em&gt;these&lt;/em&gt; will &lt;em&gt;not&lt;/em&gt; be transformed into getters on the prototype&lt;/a&gt;. We are waiting for decorators to solve this problem completely.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;In the future, we’ll (hopefully and presumably 🤞🏼) have an escape hatch for those merged or prototypally-set properties via decorators. That’ll look something like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { className, tagName } from &amp;#39;ember-decorators/component&amp;#39;;

@tagName(&amp;quot;li&amp;quot;)
export default class MyListItem extends Component {
  @className itemClass = &amp;#39;this-be-a-list&amp;#39;;

  @action
  sendAMessage(contents: string): void {

  }
  // etc.
}&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>TypeScript and Ember.js Update, Part 1</title><link href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html" rel="alternate"></link><published>2018-01-22T07:10:00-05:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-22:/2018/typing-your-ember-update-part-1.html</id><summary type="html">A bunch has changed for the better in the TypeScript/Ember.js story over the last six months. Here’s an overview of the changes and a look at normal Ember objects, "arguments" to components (and controllers), and service (or controller) injections.</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Back in July 2017, I wrote &lt;a href="https://www.chriskrycho.com/2017/typing-your-ember-part-3.html"&gt;a post&lt;/a&gt; on how to using TypeScript in your Ember.js apps. At the time, we were still busy working on getting the typings more solid for Ember itself, and &lt;code&gt;class&lt;/code&gt; syntax for Ember was apparently a long way away.&lt;/p&gt;
&lt;p&gt;Things have gotten quite a bit better since then, so I thought I’d update that post with recommendations for using TypeScript in an app &lt;em&gt;now&lt;/em&gt; with the updated typings, as well as with another six months of experience using TypeScript in our app at Olo (~20k lines of code in the app and another ~15k in tests).&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s how I expect this update series to go:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;&lt;strong&gt;Overview, normal Ember objects, component arguments, and injections (this post).&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Computed properties, actions, mixins, and class methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Using Ember Data, and service and controller injections improvements.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="normal-ember-objects" class="level2"&gt;
&lt;h2&gt;Normal Ember objects&lt;/h2&gt;
&lt;p&gt;For normal Ember objects, things now &lt;em&gt;mostly&lt;/em&gt; just work if you’re using class-based syntax, with a single (though very important) qualification I’ll get to in a minute. And you can use the class-based syntax &lt;em&gt;today&lt;/em&gt; in Ember.js—all the way back to 1.13, as it turns out. If you want to learn more, you can read &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0240-es-classes.md"&gt;this RFC&lt;/a&gt; or &lt;a href="https://medium.com/build-addepar/es-classes-in-ember-js-63e948e9d78e"&gt;this blog post&lt;/a&gt;, both by &lt;a href="https://github.com/pzuraq"&gt;@pzuraq (Chris Garrett)&lt;/a&gt;, who did most of the legwork to research this and flesh out the constraints, and who has also been doing a lot of work on &lt;a href="https://ember-decorators.github.io/ember-decorators/docs/index.html"&gt;Ember Decorators&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Accordingly, I’m assuming the use of ES6 &lt;code&gt;class&lt;/code&gt; syntax throughout. The big reason for this is that things mostly just &lt;em&gt;don’t work&lt;/em&gt; without it. And we’ll see (in a later post) some hacks to deal with places where parts of Ember’s ecosystem don’t yet support classes properly. In general, however, if you see an error like &lt;code&gt;&amp;quot;Cannot use 'new' with an expression whose type lacks a call or construct signature.&amp;quot;&lt;/code&gt;, the reason is almost certainly that you’ve done &lt;code&gt;export default Component.extend({...})&lt;/code&gt; rather than creating a class.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-detailed-example" class="level2"&gt;
&lt;h2&gt;A detailed example&lt;/h2&gt;
&lt;p&gt;That means that every new bit of code I write today in our app looks roughly like this, with only the obvious modifications for services, routes, and controllers—I picked components because they’re far and away the most common things in our applications.&lt;/p&gt;
&lt;p&gt;In order to explain all this clearly, I’m going to start by showing a whole component written in the new style. Then, over the rest of this post and the next post, I’ll zoom in on and explain specific parts of it.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;*&lt;strong&gt;Note:&lt;/strong&gt; please see the &lt;a href="https://www.chriskrycho.com/2018/ember-ts-class-properties.html"&gt;update about class properties published mid-2018&lt;/a&gt;. The example below and in the following posts is incorrect in several important ways.&lt;/p&gt;
&lt;/aside&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { computed, get } from &amp;quot;@ember/object&amp;quot;;
import Computed from &amp;quot;@ember/object/computed&amp;quot;;
import { inject as service } from &amp;quot;@ember/service&amp;quot;;
import { assert } from &amp;quot;@ember/debug&amp;quot;;
import { isNone } from &amp;quot;@ember/utils&amp;quot;;

import Session from &amp;quot;my-app/services/session&amp;quot;;
import Person from &amp;quot;my-app/models/person&amp;quot;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person; // required
  modifier?: string; // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;quot;this is fine&amp;quot;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(&amp;quot;model.firstName&amp;quot;, function(this: AnExample): string {
    return `My name is ${get(this.model, &amp;quot;firstName&amp;quot;)};`;
  });

  aComputed = computed(&amp;quot;aString&amp;quot;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;quot;session.user&amp;quot;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;quot;session.user&amp;quot;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;quot;aCollection&amp;quot;);
      this.set(&amp;quot;aCollection&amp;quot;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;quot;`model` is required&amp;quot;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;quot;aCollection&amp;quot;).includes(&amp;quot;ahoy&amp;quot;)) {
      this.set(&amp;quot;aCollection&amp;quot;, current.concat(&amp;quot;ahoy&amp;quot;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;section id="component-arguments" class="level3"&gt;
&lt;h3&gt;Component arguments&lt;/h3&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // Component arguments
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I always put these first so that the “interface” of the object is clear and obvious. You can do the same thing on a controller instance; in that case you would export a &lt;code&gt;Model&lt;/code&gt; from the corresponding &lt;code&gt;Route&lt;/code&gt; class and import it into the &lt;code&gt;Controller&lt;/code&gt;. It’s a bit of boilerplate, to be sure, but it lets you communicate your interface clearly to consumers of the &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An important note about these kind of arguments: you do &lt;em&gt;not&lt;/em&gt; have to do &lt;code&gt;this.get(...)&lt;/code&gt; (or, if you prefer, &lt;code&gt;get(this, ...)&lt;/code&gt;) to access the properties themselves: they’re class instance properties. You can simply access them as normal properties: &lt;code&gt;this.model&lt;/code&gt;, &lt;code&gt;this.modifier&lt;/code&gt;, etc. That even goes for referencing them as computed properties, as we’ll see below.&lt;/p&gt;
&lt;p&gt;For optional arguments, you use the &lt;code&gt;?&lt;/code&gt; operator to indicate they may be &lt;code&gt;undefined&lt;/code&gt;. To get the &lt;em&gt;most&lt;/em&gt; mileage out of this, you’ll want to enable &lt;code&gt;strictNullChecks&lt;/code&gt; in the compiler options.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; However, note that we don’t currently have any way to validate component argument invocation.[^ts-templates] The way I’ve been doing this is using Ember’s debug &lt;a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Fdebug/methods/assert?anchor=assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; in the constructor:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;assert(&amp;quot;`model` is required&amp;quot;, !isNone(this.model));&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { Maybe } from &amp;quot;true-myth&amp;quot;;

export default class MyComponent extends Component {
  optionalArg?: string;
  optionalProperty = Maybe.of(this.optionalArg);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then if you invoke the property without the argument, it’ll construct a &lt;code&gt;Nothing&lt;/code&gt;; if you invoke it with the argument, it’ll be &lt;code&gt;Just&lt;/code&gt; with the value. [^ts-templates]: A few of us have batted around some ideas for how to solve that particular problem, but &lt;em&gt;if&lt;/em&gt; we manage those, it’ll probably be way, way later in 2018.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit, January 24, 2018:&lt;/strong&gt; Starting in TypeScript 2.7, you can enable a flag, &lt;code&gt;--strictPropertyInitialization&lt;/code&gt;, which requires that all declared, non-optional properties on a class be initialized in the constructor or with a class property assignment. (There’s more on class property assignment in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;part 2&lt;/a&gt; of this series.) If you do that, all &lt;em&gt;arguments&lt;/em&gt; to a component should be defined with the &lt;em&gt;definite assignment assertion modifier&lt;/em&gt;, a &lt;code&gt;!&lt;/code&gt; after the name of the property, as on &lt;code&gt;model&lt;/code&gt; here:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // Component arguments
  model!: Person;     // required
  modifier?: string;  // optional, thus the `?`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should still combine that with use of &lt;a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Fdebug/methods/assert?anchor=assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; so that any misses in template invocation will get caught in your tests.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="injections" class="level3"&gt;
&lt;h3&gt;Injections&lt;/h3&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the most important thing to note is the required type annotation. In principle, we could work around this by requiring you to explicitly name the service and using a “type registry” to look up what the service type is – more on that below in my discussion of using Ember Data – but I’m not yet persuaded that’s better than just writing the appropriate type annotation. Either way, there’s some duplication. 🤔 We (everyone working in the &lt;a href="https://github.com/typed-ember"&gt;typed-ember&lt;/a&gt; project) would welcome feedback here, because the one thing we &lt;em&gt;can’t&lt;/em&gt; do is get the proper type &lt;em&gt;without&lt;/em&gt; one or the other of these.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit, February 5, 2018:&lt;/strong&gt; see &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Part 4&lt;/a&gt; for some updates to this—I actually went ahead and built and implemented that approach, and everything is much nicer now.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // the current approach -- requires importing `Session` so you can define it
  // on the property here
  session: Computed&amp;lt;Session&amp;gt; = service();

  // the alternative approach I&amp;#39;ve considered -- requires writing boilerplate
  // elsewhere, similar to what you&amp;#39;ll see below in the Ember Data section
  session = service(&amp;#39;session&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One other thing to notice here is that because TypeScript is a &lt;em&gt;structural&lt;/em&gt; type system, it doesn’t matter if what is injected is the actual &lt;code&gt;Session&lt;/code&gt; service; it just needs to be something that &lt;em&gt;matches the shape&lt;/em&gt; of the service – so your normal behavior around dependency injection, etc. is all still as expected.&lt;/p&gt;
&lt;p&gt;That’s enough for one post, I think. In the next entry, we’ll pick up with how you handle class properties, including computed properties, and then talk about mixins as well. In the post after that, we’ll look at Ember Data and some related concerns.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This isn’t my preferred way of handling optional types; &lt;a href="https://true-myth.js.org"&gt;a &lt;code&gt;Maybe&lt;/code&gt; type&lt;/a&gt; is. And you can, if you like, use &lt;code&gt;Maybe&lt;/code&gt; here:&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>Exploring 4 Languages: Starting to Model the Domain</title><link href="http://www.chriskrycho.com/2018/exploring-4-languages-starting-to-model-the-domain.html" rel="alternate"></link><published>2018-01-14T09:00:00-05:00</published><updated>2018-01-14T09:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-14:/2018/exploring-4-languages-starting-to-model-the-domain.html</id><summary type="html">Using the type systems of Rust, Elm, F♯, and ReasonML to encode the elements of a domain model—and starting to get some idea how the languages are like and unlike each other.</summary><content type="html">&lt;p&gt;In the first three chapters of &lt;em&gt;Domain Modeling Made Functional&lt;/em&gt;, Wlaschin walks through the creation of a “domain model” for an order-taking system. (It’s well worth reading the book just for a bunch of the lessons in that section—I found them quite helpful!) Then, after spending a chapter introducing F&lt;sup&gt;♯&lt;/sup&gt;’s type system, he introduces the ways you can &lt;em&gt;use&lt;/em&gt; those type mechanics to express the domain. In today’s post, I’ll show the idiomatic implementations of these types in each of Rust, Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and ReasonML.&lt;/p&gt;
&lt;section id="simple-values" class="level2"&gt;
&lt;h2&gt;Simple values&lt;/h2&gt;
&lt;p&gt;Simple wrapper types let you take simple types like strings, numbers, etc. and use types to represent part of the business domain you’re dealing with—the basic idea being that a Customer ID may be a number, but it’s not interchangeable with &lt;em&gt;other&lt;/em&gt; numbers such as Order IDs.&lt;/p&gt;
&lt;p&gt;Here’s the most ergonomic and effective (and automatically-formatted in line with the language standards, where applicable!) way to do that in each of the languages:&lt;/p&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct CustomerId(i32);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;type CustomerId
    = CustomerId Int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt;:&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;type CustomerId = CustomerId of int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ReasonML:&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;type customerId =
  | CustomerId(int);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how similar these all are! The Rust implementation is the &lt;em&gt;most&lt;/em&gt; distinctive, though you can do it with the same kind of union type as the others. Here’s how that would look:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;enum CustomerId {
  CustomerId(i32),
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For performance reasons, you might also choose to implement the F&lt;sup&gt;♯&lt;/sup&gt; type as a struct:&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;&amp;lt;Struct&amp;gt;
type CustomerId = CustomerId of int&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="complex-data" class="level2"&gt;
&lt;h2&gt;Complex data&lt;/h2&gt;
&lt;p&gt;Wlaschin then moves on to showing how to model more complex data structures: types that “and” or “or” together other data. We “and” data together using record or struct types, and “or” data together using “union” or “enum” types. (Assume we’ve defined &lt;code&gt;CustomerInfo&lt;/code&gt;, &lt;code&gt;ShippingAddress&lt;/code&gt;, etc. types for all of these.)&lt;/p&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;// &amp;quot;and&amp;quot;
struct Order {
    customer_info: CustomerInfo,
    shipping_address: ShippingAddress,
    billing_address: BillingAddress,
    order_lines: Vec&amp;lt;OrderLine&amp;gt;,
    billing_amount: BillingAmount,
}

// &amp;quot;or&amp;quot;
enum ProductCode {
    Widget(WidgetCode),
    Gizmo(GizmoCode),
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- &amp;quot;and&amp;quot;
type alias Order =
    { customerInfo : CustomerInfo
    , shippingAddress : ShippingAddress
    , billingAddress : BillingAddress
    , orderLines : List OrderLine
    , billingAmount : BillingAmount
    }

-- &amp;quot;or&amp;quot;
type ProductCode
    = Widget WidgetCode
    | Gizmo GizmoCode&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt;:&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;// &amp;quot;and&amp;quot;
type Order = {
    CustomerInfo : CustomerInfo
    ShippingAddress : ShippingAddress
    BillingAddress : BillingAddress
    OrderLines : OrderLine list
    AmountToBill: BillingAmount
}

// &amp;quot;or&amp;quot;
type ProductCode =
    | Widget of WidgetCode
    | Gizmo of GizmoCode&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ReasonML—note that since we’re assuming we’ve already defined the other types here, you can write this without duplicating the name and type declaration, just like you can with JavaScript object properties.&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;/* &amp;quot;and&amp;quot; */
type order = {
  customerInfo,
  shippingAddress,
  billingAddress,
  orderLine,
  billingAmount
};

/* &amp;quot;or&amp;quot; */
type productCode =
  | Widget(widgetCode)
  | Gizmo(gizmoCode);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An interesting aside: unless you planned to reuse these types, you wouldn’t usually write these as standalone types with this many wrapper types in it in Rust in particular (even if the compiler would often recognize that it could squash them down for you).&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Instead, you’d normally write &lt;em&gt;only&lt;/em&gt; the base enum type to start, and refactor out the &lt;code&gt;struct&lt;/code&gt; wrapper later only if you found you needed it elsewhere:&lt;/p&gt;
&lt;pre class="diff"&gt;&lt;code&gt;enum ProductCode {
-    Widget(WidgetCode),
+    Widget(String),
-    Gizmo(GizmoCode),
+    Gizmo(String),
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That said: given how the book is tackling things, and the fact that you might want to &lt;em&gt;validate&lt;/em&gt; these types… having them as these low-cost wrappers is probably worth it. (In fact, having read a bit further than I’ve managed to write out yet, I can guarantee it.)&lt;/p&gt;
&lt;p&gt;We work through the rest of the basic types this way. But what about the types where we don’t yet have a good idea how we want to handle them?&lt;/p&gt;
&lt;p&gt;Each of these languages gives us an out (or more than one) for how to say “I don’t know what to put here yet.”&lt;/p&gt;
&lt;p&gt;Rust (which does not have a built-in &lt;code&gt;Never&lt;/code&gt; type… yet; see below):&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;// Make an empty enum (which you by definition cannot construct)
enum Never {}

// Use it throughout where we don&amp;#39;t know the type yet. It will fail to compile
// anywhere we try to *use* this, because you can&amp;#39;t construct it.
type OrderId = Never;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm (which has a built-in &lt;code&gt;Never&lt;/code&gt; type):&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- It will fail to compile anywhere we try to *use* this, because you cannot
-- construct `Never`.
type alias OrderId =
    Never&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt; (which &lt;em&gt;sort&lt;/em&gt; of does):&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;// Make a convenience type for the `exn`/`System.Exception` type
type Undefined = exn

type OrderId = Undefined&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reason (which also &lt;em&gt;sort&lt;/em&gt; of does—identically with F&lt;sup&gt;♯&lt;/sup&gt;):&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;/* Make a convenience type for the `exn`/`System.Exception` type */
type undefined = exn;

/*
  Use it throughout where we don&amp;#39;t know the type yet. It will compile, but fail
  to run anywhere we try to *use* this.
 */
type orderId = undefined;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For both F&lt;sup&gt;♯&lt;/sup&gt; and Reason, that’s following Wlaschin’s example. The main reason to do that is to make explicit that we’re not actually wanting an &lt;em&gt;exception&lt;/em&gt; type in our domain model, but just something we haven’t &lt;em&gt;yet&lt;/em&gt; defined. Anywhere we attempted to use it, we’d have to handle it like, well… an exception, instead of an actual type.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;type OrderId = !;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="workflows-and-functions" class="level2"&gt;
&lt;h2&gt;Workflows and functions&lt;/h2&gt;
&lt;p&gt;Once we have the basic types themselves in place, we need to write down the ways we transform between them. In a functional style, we’re not going to implement instance methods—though as we’ll see in the next post, what we do in Rust will have &lt;em&gt;some&lt;/em&gt; similarities to class methods—we’re going to implement standalone functions which take types and return other types.&lt;/p&gt;
&lt;p&gt;Again, you’ll note that despite the common lineage, there is a fair amount of variation here. (Note that we’d also have defined the &lt;code&gt;UnvalidatedOrder&lt;/code&gt;, &lt;code&gt;ValidationError&lt;/code&gt;, and &lt;code&gt;ValidatedOrder&lt;/code&gt; types for all of this; I’m mostly interested in showing &lt;em&gt;new&lt;/em&gt; differences here.)&lt;/p&gt;
&lt;p&gt;Rust (using the &lt;a href="https://github.com/alexcrichton/futures-rs"&gt;Futures&lt;/a&gt; library to represent eventual computation):&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;type ValidationResponse&amp;lt;T&amp;gt; = Future&amp;lt;Item = T, Error = ValidationError&amp;gt;;

fn validate_order(unvalidated: UnvalidatedOrder) -&amp;gt; Box&amp;lt;ValidationResponse&amp;lt;ValidatedOrder&amp;gt;&amp;gt; {
    unimplemented!()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm (using the built-in &lt;code&gt;Task&lt;/code&gt; type for eventual computation; &lt;code&gt;Task&lt;/code&gt;s encapsulate both eventuality and the possibility of failure):&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;type ValidationResponse a
    = Task (List ValidationError) a

type alias ValidateOrder =
    UnvalidatedOrder -&amp;gt; ValidationResponse ValidatedOrder&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt; (using the built-in &lt;code&gt;Async&lt;/code&gt; type for eventual computation):&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;type ValidationResponse&amp;lt;&amp;#39;a&amp;gt; = Async&amp;lt;Result&amp;lt;&amp;#39;a,ValidationError list&amp;gt;&amp;gt;

type ValidateOrder =
    UnvalidatedOrder -&amp;gt; ValidationResponse&amp;lt;ValidatedOrder&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reason (using the built-in JavaScript-specific &lt;code&gt;Js.Promise&lt;/code&gt; type—which is exactly what it sounds like—for eventual computation):&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;type validationResponse(&amp;#39;a) = Js.Promise.t(Js.Result.t(&amp;#39;a, list(validationError)));

type validateOrder = unvalidatedOrder =&amp;gt; validationResponse(validatedOrder);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again Rust is much &lt;em&gt;more&lt;/em&gt; different here from the others than they are from each other. The biggest difference between Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason is how they handle generics and type parameters.&lt;/p&gt;
&lt;p&gt;You’ll note that in Elm, they just follow the name of the wrapping type. This is a kind of syntactic symmetry: the way you &lt;em&gt;name&lt;/em&gt; a generic type like this is the same basic way you &lt;em&gt;construct&lt;/em&gt; it. It’s quite elegant. And as it turns out, the same is true of Reason; it’s just that its authors have chosen to follow OCaml and use parentheses for them instead of following Haskell with spaces—a reasonable choice, given Reason is surface syntax for OCaml and not Haskell.&lt;/p&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt; uses angle brackets, I strongly suspect, because that’s what C&lt;sup&gt;#&lt;/sup&gt; uses for generics, and keeping them syntactically aligned in things like this is very helpful. Rust similarly uses angle brackets for similarity with other languages which have similar surface syntax—especially C++ (with its templates).&lt;/p&gt;
&lt;p&gt;The way you &lt;em&gt;name&lt;/em&gt; generic parameters differs between the languages as well. Elm, following Haskell, uses lowercase letters to name its generics (usually called &lt;em&gt;type parameters&lt;/em&gt; in Elm). F&lt;sup&gt;#&lt;/sup&gt; and Reason both (unsurprisingly) follow OCaml in using lowercase letters preceded by an apostrophe to name generics—in F&lt;sup&gt;#&lt;/sup&gt;, &lt;code&gt;TypeGenericOver&amp;lt;'a&amp;gt;&lt;/code&gt;; in Reason, &lt;code&gt;typeGenericOver('a)&lt;/code&gt;. Rust follows the convention from languages like C++, Java, and C&lt;sup&gt;#&lt;/sup&gt; and uses capital letters, &lt;code&gt;TypeGenericOver&amp;lt;T&amp;gt;&lt;/code&gt;. The use of specific letters is conventional, not mandated by the language (unlike the casing). The ML family usually starts with &lt;code&gt;a&lt;/code&gt; and moves through the alphabet; Rust and the languages it follows usually start with &lt;code&gt;T&lt;/code&gt; (for &lt;em&gt;type&lt;/em&gt;) and moves forward through the alphabet. (Sometimes you’ll also see different letters where it’s obviously a better fit for what’s contained.)&lt;/p&gt;
&lt;p&gt;These languages also vary in the syntax for constructing a &lt;em&gt;list&lt;/em&gt; of things. In F&lt;sup&gt;#&lt;/sup&gt; has convenience syntax for a few built-ins (the most common being the &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt; types), allowing you to write them &lt;em&gt;either&lt;/em&gt; as e.g. &lt;code&gt;List&amp;lt;ConcreteType&amp;gt;&lt;/code&gt; or &lt;code&gt;ConcreteType list&lt;/code&gt; (as here in the example). Elm, Reason, and Rust all just use the standard syntax for generic types—&lt;code&gt;List a&lt;/code&gt;, &lt;code&gt;list('a)&lt;/code&gt;, and &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;Finally, you’ll also note that we haven’t written out a &lt;em&gt;type&lt;/em&gt; declaration here for Rust; we’ve actually written out a stub of a function, with the &lt;a href="https://doc.rust-lang.org/std/macro.unimplemented.html"&gt;&lt;code&gt;unimplemented!()&lt;/code&gt;&lt;/a&gt; &lt;a href="https://doc.rust-lang.org/1.17.0/reference/macros-by-example.html"&gt;macro&lt;/a&gt;. If you invoke this function, you’ll get a clear crash with an explanation of which function isn’t implemented.&lt;/p&gt;
&lt;p&gt;Now, Rust also &lt;em&gt;does&lt;/em&gt; let us write out the type of these functions as type aliases if we want:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;type ValidateOrder =
    Fn(UnvalidatedOrder) -&amp;gt; Box&amp;lt;ValidationResponse&amp;lt;ValidatedOrder&amp;gt;&amp;gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You just don’t use these very often in idiomatic Rust; it’s much more conventional to simply write out what I did above. However, the one time you &lt;em&gt;might&lt;/em&gt; use a type alias like this is when you’re defining the type of a closure and you don’t want to write it inline. This is a pretty sharp difference between Rust and the other languages on display here, and it goes to the difference in their approaches.&lt;/p&gt;
&lt;p&gt;Rust is &lt;em&gt;not&lt;/em&gt; a functional-first language in the way that each of the others are, though it certainly draws heavily on ideas from functional programming throughout and makes quite a few affordances for a functional style. Instead, it’s a programming language first and foremost interested in combining the most screaming performance possible with true safety, and leaning on ideas from the ML family (among others!) as part of achieving that.&lt;/p&gt;
&lt;p&gt;Among other things, this is why you don’t have currying or partial application in Rust: those essentially &lt;em&gt;require&lt;/em&gt; you to have invisible heap-allocation to be ergonomic. We &lt;em&gt;don’t&lt;/em&gt; have that in Rust, as we do in Elm, Reason, and F&lt;sup&gt;♯&lt;/sup&gt;. If we want to pass around a function, we have to explicitly wrap it in a pointer to hand it around if we construct it in another function. (I won’t go into more of the details of this here; I’ve covered it some &lt;a href="http://www.newrustacean.com/show_notes/e004/index.html"&gt;on New Rustacean&lt;/a&gt; and some &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;in my Rust and Swift comparison&lt;/a&gt; a couple years ago.)&lt;/p&gt;
&lt;p&gt;That same underlying focus on performance and explicitness is the reason we have &lt;code&gt;Box&amp;lt;ValidationResponse&amp;lt;ValidatedOrder&amp;gt;&amp;gt;&lt;/code&gt; in the Rust case: we’re explicitly returning a &lt;em&gt;pointer&lt;/em&gt; to the type here. In Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason, that’s &lt;em&gt;always&lt;/em&gt; the case. But in Rust, you can and often do return stack-allocated data and rely on “move” semantics to copy or alias it properly under the hood.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So: lots of similarities here at first blush. The biggest differences that show up at this point are purely syntactical, other than some mildly sharper differences with Rust because of its focus on performance. The fact that these languages share a common lineage means it’s not hard to read any of them if you’re familiar with the others, and it’s actually quite easy to switch between them at the levels of both syntax and semantics.&lt;/p&gt;
&lt;p&gt;As usual, when dealing with languages in a relatively similar family, it’s &lt;em&gt;most&lt;/em&gt; difficult to learn the &lt;em&gt;library&lt;/em&gt; differences. The most obvious example of that here is Reason’s &lt;code&gt;Js.Promise&lt;/code&gt;, Elm’s &lt;code&gt;Task&lt;/code&gt;, F&lt;sup&gt;♯&lt;/sup&gt;’s &lt;code&gt;Async&lt;/code&gt;, and Rust’s &lt;code&gt;Future&lt;/code&gt; types: each of those has their own quirks, their own associated helper functions or methods, and their own ways of handling the same basic patterns.&lt;/p&gt;
&lt;p&gt;Still, if you have played with any one of these, you could pretty easily pick up one of the others. It’s sort of like switching between Python and Ruby: there are some real differences there, but the similarities are greater than the differences. Indeed, if anything, these languages are &lt;em&gt;more&lt;/em&gt; similar than those.&lt;/p&gt;
&lt;p&gt;Next time I’ll dig into Wlaschin’s chapter on &lt;em&gt;validating&lt;/em&gt; the domain model, and here some of the not-just-syntax-level differences in the languages will start to become more apparent.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I can’t speak to what’s idiomatic this way in any of the non-Rust languages, because I just haven’t used them enough yet.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="rust"></category><category term="elm"></category><category term="fsharp"></category><category term="reasonml"></category><category term="domain-driven design"></category><category term="four-languages"></category></entry><entry><title>Exploring 4 Languages: Project Setup</title><link href="http://www.chriskrycho.com/2018/exploring-4-languages-project-setup.html" rel="alternate"></link><published>2018-01-01T13:00:00-05:00</published><updated>2018-01-01T13:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-01:/2018/exploring-4-languages-project-setup.html</id><summary type="html">Getting Rust, Elm, F♯, and ReasonML installed; their editor plugins configured; and the project ready for implementing the exercises in Scott Wlaschin’s Domain Modeling Made Functional.</summary><content type="html">&lt;p&gt;In this post, I’m just going to briefly talk through the steps I needed to do to set up each of the languages and my editor setup for them. Gladly, it was pretty simple. At the end, I’ll offer a note on my thoughts on the setup processes. (Note that this isn’t “How to do this for anyone ever”—it’s “how I did it, with some notes where it might be relevant to you.”)&lt;/p&gt;
&lt;p&gt;For context, I’m running macOS and using &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt; as my editor. Whenever I say “Install the VS Code extension,” you can do it either by opening the extension side panel and searching for &lt;code&gt;&amp;lt;Extension Name&amp;gt;&lt;/code&gt;, or by typing &lt;code&gt;ext install &amp;lt;extension label&amp;gt;&lt;/code&gt;—I’ll write it like &lt;code&gt;&amp;lt;Extension Name&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;extension label&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The source code as of what I’m describing in this post is &lt;a href="https://github.com/chriskrycho/dmmf/tree/project-setup"&gt;at the &lt;code&gt;project-setup&lt;/code&gt; tag&lt;/a&gt; in &lt;a href="https://github.com/chriskrycho/dmmf/"&gt;the repo&lt;/a&gt;.&lt;/p&gt;
&lt;section id="rust" class="level2"&gt;
&lt;h2&gt;Rust&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language installation:&lt;/strong&gt; Install &lt;a href="https://rustup.rs"&gt;&lt;em&gt;rustup&lt;/em&gt;&lt;/a&gt;: &lt;code&gt;curl https://sh.rustup.rs -sSf | sh&lt;/code&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editor setup:&lt;/strong&gt; Installed the VS Code extension: &lt;code&gt;Rust (rls)&lt;/code&gt;/&lt;code&gt;rust&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project setup:&lt;/strong&gt; In the root of &lt;a href="https://github.com/chriskrycho/dmmf"&gt;my repo&lt;/a&gt;, I ran &lt;code&gt;cargo new rust&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="elm" class="level2"&gt;
&lt;h2&gt;Elm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language installation&lt;/strong&gt;: There are installers, but I just did &lt;code&gt;npm i -g elm&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editor setup:&lt;/strong&gt; Installed the VS Code Elm extension: &lt;code&gt;Elm&lt;/code&gt;/&lt;code&gt;elm&lt;/code&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project setup:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Install the &lt;code&gt;create-elm-app&lt;/code&gt; tool: &lt;code&gt;npm i -g create-elm-app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the root of the project, I ran &lt;code&gt;create-elm-app elm&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="f" class="level2"&gt;
&lt;h2&gt;F&lt;sup&gt;♯&lt;/sup&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language installation&lt;/strong&gt;: Install &lt;a href="http://www.mono-project.com"&gt;mono&lt;/a&gt;: &lt;code&gt;brew install mono&lt;/code&gt; (note installation instructions &lt;a href="option-5-install-f-with-mono-via-homebrew-64-bit"&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editor setup:&lt;/strong&gt; Install the VS Code Ionide extension: &lt;code&gt;Ionide-fsharp&lt;/code&gt;/&lt;code&gt;ionide-fsharp&lt;/code&gt;. It’ll automatically install the associated Paket and FAKE extensions from the Ionide project as well, and those will install Paket and FAKE during installation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project setup:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In the root of the repo, I created the &lt;code&gt;fsharp&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Then I opened a VS Code instance to to that directory, opened the command palette, and ran &lt;code&gt;F#: New Project&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;I chose &lt;code&gt;console&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I left the directory blank&lt;/li&gt;
&lt;li&gt;I named the project &lt;code&gt;dmmf&lt;/code&gt; (for &lt;em&gt;D&lt;/em&gt;omain &lt;em&gt;M&lt;/em&gt;odeling &lt;em&gt;M&lt;/em&gt;ade &lt;em&gt;F&lt;/em&gt;unctional).&lt;/li&gt;
&lt;li&gt;Since F&lt;sup&gt;♯&lt;/sup&gt; (like C&lt;sup&gt;♯&lt;/sup&gt;) prefers PascalCase names, I renamed the generated module &lt;code&gt;DMMF&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="reasonml" class="level2"&gt;
&lt;h2&gt;ReasonML&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language installation&lt;/strong&gt;: Following the setup instructions &lt;a href="https://reasonml.github.io/guide/javascript/quickstart"&gt;here&lt;/a&gt;, I ran &lt;code&gt;npm install -g bs-platform&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editor setup:&lt;/strong&gt; following &lt;a href="https://reasonml.github.io/guide/editor-tools/global-installation"&gt;the official instructions&lt;/a&gt;—
&lt;ul&gt;
&lt;li&gt;I ran &lt;code&gt;npm install -g https://github.com/reasonml/reason-cli/archive/3.0.4-bin-darwin.tar.gz&lt;/code&gt; to install the dependencies for the editor configuration.&lt;/li&gt;
&lt;li&gt;I installed the VS Code extension: &lt;code&gt;Reason&lt;/code&gt;/&lt;code&gt;reasonml&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project setup:&lt;/strong&gt; In the root of the repo, I ran &lt;code&gt;bsb -init reason -theme basic-reason&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="comments-on-the-setup-processes" class="level2"&gt;
&lt;h2&gt;Comments on the setup processes&lt;/h2&gt;
&lt;p&gt;Most of the languages have &lt;em&gt;fairly&lt;/em&gt; straightforward processes to get up and running with a good-to-excellent tooling experience.&lt;/p&gt;
&lt;p&gt;The best of them is Rust, which is &lt;em&gt;extremely&lt;/em&gt; easy to get up and running with.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Elm is roughly in the middle—it’s less straightforward than Rust in that &lt;code&gt;create-elm-app&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; an officially supported approach, unlike &lt;code&gt;rustup&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt;, so you’re going to have a much less awesome experience if you don’t know about it.&lt;/p&gt;
&lt;p&gt;Reason and F&lt;sup&gt;♯&lt;/sup&gt; both have slightly larger negatives.&lt;/p&gt;
&lt;p&gt;Reason requires you to &lt;code&gt;npm install&lt;/code&gt; a large, gzipped file with multiple dependencies all bundled, instead of having a dedicated installer &lt;em&gt;a la&lt;/em&gt; &lt;code&gt;rustup&lt;/code&gt;. It also has the possibility for a not-so-great first-run experience in the editor, which &lt;a href="https://github.com/facebook/reason/issues/1729"&gt;I discovered&lt;/a&gt; all too quickly.&lt;/p&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt; essentially requires you to use an editor extension to get the language setup with &lt;a href="https://fsprojects.github.io/Paket/"&gt;Paket&lt;/a&gt;, which is a &lt;em&gt;much&lt;/em&gt; better choice of package manager than the default .NET package manager NuGet. Command line tools exist and are improving rapidly, and you &lt;em&gt;can&lt;/em&gt; &lt;a href="https://fsprojects.github.io/Paket/paket-and-dotnet-cli.html"&gt;get them working&lt;/a&gt;… but it’s harder than it needs to be. And that project setup wizard is &lt;em&gt;fine&lt;/em&gt;, but it’s a lot noisier than just doing &lt;code&gt;create-elm-app&lt;/code&gt; or especially &lt;code&gt;cargo new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In any case, though, I have them all up and running now! More soon!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re uncomfortable with running that script, there are &lt;a href="https://www.rust-lang.org/en-US/other-installers.html"&gt;other options&lt;/a&gt; as well.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Note that the VS Code extension is &lt;em&gt;not&lt;/em&gt; the best experience out there for Elm: the Atom extensions (&lt;a href="https://atom.io/packages/language-elm"&gt;language-elm&lt;/a&gt; and &lt;a href="https://atom.io/packages/elmjutsu"&gt;elmjutsu&lt;/a&gt;) are. I stuck with VS Code because it’s &lt;em&gt;good enough&lt;/em&gt; and, more importantly, the Code extensions are arguably best in class for the &lt;em&gt;other&lt;/em&gt; languages… and it’s what I use every day.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I’m not just saying that because I’m a Rust fanboy, either! If Rust were hard to use, I’d be complaining &lt;em&gt;louder&lt;/em&gt; because of my enthusiasm for the language.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="rust"></category><category term="elm"></category><category term="fsharp"></category><category term="reasonml"></category><category term="domain-driven design"></category><category term="four-languages"></category></entry><entry><title>Exploring 4 Languages</title><link href="http://www.chriskrycho.com/2017/exploring-4-languages.html" rel="alternate"></link><published>2017-12-31T20:20:00-05:00</published><updated>2017-12-31T20:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-31:/2017/exploring-4-languages.html</id><summary type="html">I’m going to implement the exercises from Domain Modeling Made Functional in Rust, Elm, ReasonML, and F♯… because I think it'll be an interesting learning experience and a lot of fun!</summary><content type="html">&lt;p&gt;Today, as I hit the first of the implementation chapters in &lt;a href="https://pragprog.com/book/swdddf/domain-modeling-made-functional"&gt;&lt;em&gt;Domain Modeling Made Functional&lt;/em&gt;&lt;/a&gt;, I started thinking about how I wanted to implement it. As I’ve noted &lt;a href="https://twitter.com/chriskrycho/status/934170826718429184"&gt;elsewhere&lt;/a&gt; in the past, very little of the book is &lt;em&gt;truly&lt;/em&gt; specific to F&lt;sup&gt;♯&lt;/sup&gt;, though that’s the language Wlaschin uses in the book—and Wlaschin himself &lt;a href="https://twitter.com/ScottWlaschin/status/934177554331848705"&gt;agrees&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks! Yes, it’s true that you could easily use #ElmLang, #RustLang, #Scala, or especially #OCaml to work through the book. I use hardly any F# specific features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So… I decided to try something a little bit bonkers. I’m going to implement these exercises in &lt;em&gt;four different languages&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fsharp.org"&gt;F&lt;sup&gt;♯&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reasonml.github.io"&gt;ReasonML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These languages are all related: they’re descended from &lt;a href="http://smlnj.org/sml.html"&gt;Standard ML&lt;/a&gt;. ReasonML and F&lt;sup&gt;♯&lt;/sup&gt; are like siblings: Reason is merely a custom syntax for OCaml; F&lt;sup&gt;♯&lt;/sup&gt; is (originally) an implementation of OCaml on .NET (though the two languages have diverged since F&lt;sup&gt;♯&lt;/sup&gt; came into existence). Elm and Rust are cousins of each other and of Reason and F&lt;sup&gt;♯&lt;/sup&gt;, though they’re both drawing on other languages besides OCaml as well. I also have some familiarity with Rust, Elm, and F&lt;sup&gt;♯&lt;/sup&gt; already, and have read the docs for Reason a couple times. So this is a &lt;em&gt;bit&lt;/em&gt; less crazy than it might otherwise be.&lt;/p&gt;
&lt;p&gt;Why, though? Mostly because I think it’ll be interesting to compare the implementations of the domain model from the book side by side. It’ll look just a bit different in each language, and I expect to learn a bit more of the &lt;em&gt;feel&lt;/em&gt; of each language by doing this. (That side by side comparison is something I’ve &lt;a href="http://www.chriskrycho.com/rust-and-swift.html" title="Series: Rust and Swift"&gt;done before&lt;/a&gt; and &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-v.html" title="Part V: The value (and challenge) of learning languages in parallel."&gt;found very profitable&lt;/a&gt;.) I’ll also turn it into blog posts, which hopefully will be interesting to others!&lt;/p&gt;
&lt;p&gt;More to come, and soon.&lt;/p&gt;
</content><category term="functional programming"></category><category term="rust"></category><category term="elm"></category><category term="fsharp"></category><category term="reasonml"></category><category term="domain-driven design"></category><category term="four-languages"></category></entry><entry><title>Types are Small</title><link href="http://www.chriskrycho.com/2017/types-are-small.html" rel="alternate"></link><published>2017-12-29T14:00:00-05:00</published><updated>2017-12-29T14:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-29:/2017/types-are-small.html</id><summary type="html">A really fabulous quote from Scott Wlaschin's book Domain Modeling Made Functional crystallized an important point for me: types (in typed functional programming) are small.
</summary><content type="html">&lt;p&gt;I’ve been reading through &lt;a href="https://fsharpforfunandprofit.com" title="F♯ for Fun and Profit"&gt;Scott Wlaschin&lt;/a&gt;’s really excellent book &lt;a href="https://pragprog.com/book/swdddf/domain-modeling-made-functional"&gt;&lt;em&gt;Domain Modeling Made Functional&lt;/em&gt;&lt;/a&gt; and this quote (from his chapter introducing the idea of &lt;em&gt;types&lt;/em&gt; in &lt;em&gt;typed functional programming&lt;/em&gt;) crystallized something for me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A type in functional programming is not the same as a class in object-oriented programming. It is much simpler. In fact, a type is just the name given to the set of possible values that can be used as inputs or outputs of a function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A lot of times when I’m trying to explain how I use types in a typed functional programming style, this is a serious point of confusion—both for the Java or C♯ OOP programmer and for the programmers coming from dynamic languages. When people think of “types” they tend to think of &lt;em&gt;classes and interfaces and methods, oh my!&lt;/em&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One is the big heavy class. The other is a nice little LEGO block. The difference is &lt;em&gt;huge&lt;/em&gt; in my day to day experience, but I’ve never been able to express it so clearly as Wlaschin’s quote.&lt;/p&gt;
&lt;p&gt;I suspect that when I’m talking to most people coming from dynamically typed languages &lt;em&gt;or&lt;/em&gt; from the standard OOP languages, they hear “Write three interfaces and six classes” when I say “using types to help me with my program.” But what I mean is “Write three tiny little shapes, and then one more that shows how they snap together in a slightly bigger one.” Types aren’t big heavy things. They’re just the shapes I want to flow through my program, written down like documentation for later… that gets checked for me to make sure it stays up to date, and lets me know if I missed something in my description of the shape of the data, or tried to do something I didn’t mean to before.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; write a language like F♯ or TypeScript or Elm like you would C♯, but it’s generally not going to be an especially &lt;em&gt;happy&lt;/em&gt; experience (and it’ll be less happy the more “purely functional,” &lt;em&gt;a la&lt;/em&gt; Elm, you go). But you don’t have to! Types are just tiny little descriptions of the shapes you plan to deal with in a particular spot—more concise and more dependable than writing a JSDoc or something like that.&lt;/p&gt;
&lt;p&gt;Types are small. You can build big things with them, but &lt;em&gt;types are small&lt;/em&gt;.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;In fact, nearly every “I’m just not into types” or even “I think types are worse for most things” talks I’ve seen—including &lt;a href="https://www.youtube.com/watch?v=2V1FtfBDsLU"&gt;this recent and popular one by Rich Hickey&lt;/a&gt;—tend to conflate &lt;em&gt;all&lt;/em&gt; type systems together. But the experience of writing TypeScript is &lt;em&gt;very&lt;/em&gt; different from the experience of writing C♯. (You’ll note that in that talk, for example, Hickey freely jumps back and forth between Java-style types and Haskell-style types when it suits his purposes, and he entirely skips past the structural type systems currently having something of a heyday.) In many cases, I &lt;em&gt;suspect&lt;/em&gt; this is simply a lack of deep experience with the whole variety of type systems out there (though I’d not attribute that to any specific individual).&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="software development"></category></entry><entry><title>I Want JSON Decoders</title><link href="http://www.chriskrycho.com/2017/i-want-json-decoders.html" rel="alternate"></link><published>2017-12-25T19:20:00-05:00</published><updated>2017-12-25T19:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-25:/2017/i-want-json-decoders.html</id><summary type="html">Parsing JavaScript well is a solved problem in lots of contexts. But it's time for JavaScript to take a page from Elm.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;This post was originally published at &lt;a href="https://www.dailydrip.com/blog/i-want-json-decoders.html"&gt;DailyDrip.com&lt;/a&gt;. They’re doing really great work over there, so I encourage you to check out their content and consider subscribing!&lt;/i&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;The other day, I got a report about the Ember.js app I’m working on: when a customer applied a coupon in the basket, they’d see an indication that the coupon was applied, but the basket total would still display as if it hadn’t been updated. Orders were &lt;em&gt;placed&lt;/em&gt; correctly, but they wouldn’t render right. I dug around for a bit, and then discovered that it was one of the (many) places where &lt;code&gt;undefined&lt;/code&gt; was biting us.&lt;/p&gt;
&lt;p&gt;How did this happen? It turned out it was a perfect storm: a confusingly-designed &lt;abbr&gt;API&lt;/abbr&gt; combined with a reasonable (but in this case, very unhelpful) assumption in our data layer. When the total on a given basket dropped to zero, our &lt;abbr&gt;API&lt;/abbr&gt; simply didn’t send back a value on the payload at all. Instead of &lt;code&gt;{ total: 0, ... }&lt;/code&gt;, there was just, well, &lt;code&gt;{ ... }&lt;/code&gt; – no &lt;code&gt;total&lt;/code&gt; field at all. Meanwhile, our data layer was designed to let a server send back only the fields which &lt;em&gt;required&lt;/em&gt; updating. That way, you can send back partial records to indicate only what has changed, instead of having to send back the whole of what might be a very large record, or a very large collection of records.&lt;/p&gt;
&lt;p&gt;The combination was terrible, though: because the server didn’t send back the &lt;code&gt;total&lt;/code&gt; field at all when it dropped to &lt;code&gt;0&lt;/code&gt;, the client never updated the total it displayed to the user: as far as it was concerned, the server was saying “no change here!”&lt;/p&gt;
&lt;p&gt;The first and most obvious solution here, of course, is the one we implemented: we had the &lt;abbr&gt;API&lt;/abbr&gt; always send back a value, even if that value was &lt;code&gt;0&lt;/code&gt;. But it seems like there should be a better way.&lt;/p&gt;
&lt;p&gt;Lots of languages have fairly nice facilities for parsing JavaScript. Several languages even have tools for automatically constructing local, strongly-typed data structures from the structure of a &lt;abbr&gt;JSON&lt;/abbr&gt; response on an &lt;abbr&gt;API&lt;/abbr&gt;. F♯’s &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/"&gt;type providers&lt;/a&gt; are like this and &lt;em&gt;really fancy&lt;/em&gt; in the way they’ll automatically derive the type for you so you don’t even have to write it out as you would in everything from Haskell to C#. But for the most part in JavaScript, you have at most a way to map data to a local record in your data store – certainly none of those type safe guarantees. In TypeScript, you can write the types you receive out carefully – though, as I discovered in this case, probably not carefully &lt;em&gt;enough&lt;/em&gt; unless you model &lt;em&gt;everything&lt;/em&gt; as an optional field, and then you’re back to checking for &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; everywhere, and &lt;em&gt;why isn’t this already a solved problem?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And it turns out, it &lt;em&gt;is&lt;/em&gt; a solved problem – or at least, it is in Elm, &lt;a href="https://guide.elm-lang.org/interop/json.html"&gt;via&lt;/a&gt; those &lt;a href="https://guide.elm-lang.org/interop/json.html"&gt;&lt;abbr&gt;JSON&lt;/abbr&gt; Decoders&lt;/a&gt;. I don’t get to write Elm at work right now (or any time in the foreseeable future) – but if I can’t write Elm, I can at least try to steal a bunch of its great ideas and push them back into my TypeScript.&lt;/p&gt;
&lt;p&gt;So… what exactly are &lt;abbr&gt;JSON&lt;/abbr&gt; Decoders and how would they have solved this problem? (And why, if you’re already familiar a little with Elm and possibly feeling frustrated with decoding, are they actually worth it?)&lt;/p&gt;
&lt;p&gt;A &lt;abbr&gt;JSON&lt;/abbr&gt; Decoder is just a way of guaranteeing that once you’re inside the boundary of your program, you &lt;em&gt;always&lt;/em&gt; have a valid instance of the data type you’ve decoded it into, &lt;em&gt;or&lt;/em&gt; an error which tells you why you &lt;em&gt;don’t&lt;/em&gt; have a valid instance of the data. They’re composable, so you can stack them together and take smaller decoders to build bigger ones, so if you have a complex &lt;abbr&gt;JSON&lt;/abbr&gt; structure, you can define repeated substructures in it, or decoders for dissimilar sibling items in it, and use them to put together a grand decoder for your whole final structure. The decoders use the &lt;a href="http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Result"&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; type, and they hand back either &lt;code&gt;Ok&lt;/code&gt; with the decoded value or &lt;code&gt;Err&lt;/code&gt; with the reason for the failure – and if &lt;em&gt;any&lt;/em&gt; piece of a decoded type doesn’t match with what you’ve specified, you’ll end up with an &lt;code&gt;Err&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, initially that might sound like a recipe for disaster – &lt;abbr&gt;JSON&lt;/abbr&gt; payloads can be formed in weird ways all the time! – but in fact it encourages you to think through the various ways your payloads can be formed and to account for them. &lt;em&gt;Sometimes&lt;/em&gt;, if the payload doesn’t have what you expect, that really does mean something is wrong either in your request or in the server-side implementation. In that case, getting an &lt;code&gt;Err&lt;/code&gt; is &lt;em&gt;exactly&lt;/em&gt; what you want. Other times, the server might be perfectly legitimate in sending back a variety of shapes in its response, and your responsibility is to decide how to decode it to make sense in your app. Remember, the problem I had was that I received a payload which didn’t have the data. With Elm’s decoders, I would have had three choices:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I could have treated this as an error, and passed that along to be dealt with in some way.&lt;/li&gt;
&lt;li&gt;I could have normalized it as a 0-value payload.&lt;/li&gt;
&lt;li&gt;I could have treated it &lt;em&gt;explicitly&lt;/em&gt; as a no-op, maintaining whatever previous state I had in the data store, i.e. the implicit behavior of my actual data store.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What I &lt;em&gt;couldn’t&lt;/em&gt; do, though, is do any one of those &lt;em&gt;accidentally&lt;/em&gt;. I could still support incomplete payloads (via option 3), but I’d be explicitly opting into that, and there would be an obvious place where that was the case. This would be particularly helpful in a scenario where I wasn’t also in charge of the &lt;abbr&gt;API&lt;/abbr&gt;: if I couldn’t just go change it so the &lt;abbr&gt;API&lt;/abbr&gt; itself had a more sensible behavior, I could enforce whichever desired behavior on my own end. More than that, with something modeled on the Elm &lt;abbr&gt;JSON&lt;/abbr&gt; Decoders, I would &lt;em&gt;have&lt;/em&gt; to: there would be no implicit consumption of raw &lt;abbr&gt;JSON&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;The first time I played with the Elm &lt;abbr&gt;JSON&lt;/abbr&gt; Decoder approach, I thought it was a lot of work. I was used to just doing &lt;code&gt;JSON.parse()&lt;/code&gt; in JS or &lt;code&gt;json.loads()&lt;/code&gt; in Python. Now I needed to define a whole series of decode steps explicitly for every field in a response? Good grief! But it grew on me. More than that, I now actively miss it in my apps; I’d have been really happy not to have to spend a morning hunting down this particular bug.&lt;/p&gt;
&lt;p&gt;Sometimes that explicitness can seem like quite a lot of boilerplate, and indeed it is: there’s a reason the Elm &lt;a href="https://github.com/NoRedInk/elm-decode-pipeline"&gt;elm-decode-pipeline&lt;/a&gt; project exists. But even given the &lt;em&gt;initial&lt;/em&gt; nicety of something like F♯ type providers, I think the Elm approach has a slight edge in the long-term for &lt;em&gt;maintainability&lt;/em&gt; specifically. It’s one thing to be able to just get to work right away and have a type definition you know to conform to a given &lt;abbr&gt;API&lt;/abbr&gt; response. It’s something else entirely to be able to &lt;em&gt;know&lt;/em&gt; that you’ve accounted for all the varieties of responses you might get (and without throwing an exception for failed &lt;abbr&gt;JSON&lt;/abbr&gt; decoding at that!).&lt;/p&gt;
&lt;p&gt;Given all of this, I’ve started mentally teasing out what such a &lt;abbr&gt;JSON&lt;/abbr&gt; decoding library for Ember.js might look like in TypeScript. It’s a long way off, but it’s the kind of thing that I &lt;em&gt;really&lt;/em&gt; want to experiment with, and that I think would make for a big win for the maintainability of our apps. Keep your eyes peeled, because I suspect this is another thing JS will steal from Elm, and that’s &lt;em&gt;great&lt;/em&gt; in my book.&lt;/p&gt;
</content><category term="JavaScript"></category><category term="Elm"></category><category term="TypeScript"></category><category term="web development"></category><category term="software development"></category></entry><entry><title>Chrome is Not the Standard</title><link href="http://www.chriskrycho.com/2017/chrome-is-not-the-standard.html" rel="alternate"></link><published>2017-12-21T07:10:00-05:00</published><updated>2017-12-21T07:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-21:/2017/chrome-is-not-the-standard.html</id><summary type="html">No single browser vendor represents ”the future of the web.” Each ships in line with its own business priorities. And that's a good thing.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;This got an enormous amount of play around the web, and as a result people have ended up translating it to other languages. If you have a translation, I’ll be happy to link it here!&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://softdroid.net/chrome-ne-yavlyaetsya-standartom"&gt;Russian&lt;/a&gt;, translated by Vlad Brown (&lt;a href="http://softdroid.net" class="uri"&gt;http://softdroid.net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://getdrawings.com/uz-chrome-standart-emas"&gt;Uzbek&lt;/a&gt;, translated by Alisher&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;section id="the-post" class="level2"&gt;
&lt;h2&gt;The post&lt;/h2&gt;
&lt;p&gt;Over the past few years, I’ve increasingly seen articles with headlines that run something like, “New Feature Coming To the Web”—followed by content which described how Chrome had implemented an experimental new feature. “You’ll be able to use this soon!” has been the promise.&lt;/p&gt;
&lt;p&gt;The reality is a bit more complicated. Sometimes, ideas the Chrome team pioneers make their way out to the rest of the browsers and become tools we can all use. Sometimes… they get shelved because none of the other browsers decide to implement them.&lt;/p&gt;
&lt;p&gt;Many times, when this latter tack happens, developers grouse about the other browser makers who are “holding the web back.” But there is a fundamental problem in this way of looking at things: &lt;em&gt;Chrome isn’t the standard.&lt;/em&gt; The fact that Chrome proposes something, and even the fact that a bunch of developers like it, does not a standard make. Nor does it impose an obligation to other browsers to prioritize it, or even to ship it.&lt;/p&gt;
&lt;p&gt;As web developers, it can be easy to become focused on interesting new features for the platform we work on. That’s no different than the excitement Android and iOS developers have when Google and Apple release new SDKs for developing on their platforms. It’s healthy to be excited about possible new features, things that might make our jobs easier or enable us to do things we couldn’t do before.&lt;/p&gt;
&lt;p&gt;But there &lt;em&gt;is&lt;/em&gt; an important difference between those platforms and the web. Those platforms are the domain of a single vendor. The web is a shared platform. This is its unique benefit, and its unique cost. It uniquely allows us to write software that can actually run, and run reasonably well, &lt;em&gt;everywhere&lt;/em&gt;. But it also means that a minimum of four companies—the major browser vendors—get a say in whether a feature is a &lt;em&gt;feature&lt;/em&gt; or whether it’s just an interesting idea one of the teams had.&lt;/p&gt;
&lt;p&gt;Let’s get concrete about an example that’s been extremely high-profile for the last couple years—and, to be clear, one I think is a &lt;em&gt;good&lt;/em&gt; idea from Google: &lt;a href="https://developers.google.com/web/progressive-web-apps/" title="Google’s PWA page"&gt;progressive web apps&lt;/a&gt; (hereafter &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;). They have been pitched by Google and other supporters as an unambiguous win for the user experience of complex web applications. And, as a web developer myself, I’m actually inclined to agree with that assessment! However, I have fairly regularly seen people getting angry at especially Apple for not prioritizing support for &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;s in (especially iOS) Safari—Apple is, in this view, “holding back the future of the web.”&lt;/p&gt;
&lt;p&gt;Well… no. For any given idea Google pitches, Apple may or may not be sold on Google’s vision of the web, or they may even think it’s a good idea but not &lt;em&gt;more&lt;/em&gt; important than other things they’re working on.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And this is what it &lt;em&gt;means&lt;/em&gt; to be part of the web platform. No single company gets to dominate the others in terms of setting the agenda for the web. Not Firefox, with its development and advocacy of &lt;a href="http://webassembly.org/"&gt;WebAssembly&lt;/a&gt;, dear to my heart though that is. Not Microsoft and the IE/Edge team, with its proposal of the CSS grid spec in &lt;em&gt;2011&lt;/em&gt;, sad though I am that it languished for as long as it did. Not Apple, with its pitch for &lt;a href="https://webkit.org/blog/7846/concurrent-javascript-it-can-work/" title="“Concurrent JavaScript: it can work!”"&gt;concurrent JavaScript&lt;/a&gt;. And not—however good its developer relations team is—Chrome, with any of the many ideas it’s constantly trying out, including &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;s.&lt;/p&gt;
&lt;p&gt;It’s also worth recognizing how these decisions aren’t, in almost any case, unalloyed pushes for “the future of the web.” They reflect &lt;em&gt;business&lt;/em&gt; priorities, just like any other technical prioritization. Google cares about &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;s because Google makes its money from the web and wants people to spend more of their time on the web. Apple cares about things like the battery life implications and the sheer speed of its iOS JavaScript engine because it makes money from hardware and it wants people to be happy with their iPhones and iPads.&lt;/p&gt;
&lt;p&gt;Does any one of those browser’s commitments map cleanly to &lt;em&gt;all&lt;/em&gt; users’ (or even all &lt;em&gt;developers’&lt;/em&gt;) priorities? Of course not! This is and always has been the beauty of a competitive browser landscape. I’m a web developer who wants &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt; support everywhere—so I want Apple supporting it. But I’m also a smartphone user who wants those applications to &lt;em&gt;scream&lt;/em&gt; on my device—not to crawl, like they do on Chrome on Android, which is still years behind iOS in performance. As an end user, not just a developer, it matters to me that running Safari on my laptop instead of Chrome can dramatically increase my battery life.&lt;/p&gt;
&lt;p&gt;These are tradeoffs, plain and simple. Chrome ships new features fast, but they’re not always stable and they often have performance costs. Safari ships new features on a much slower cadence, but they’re usually solid and always perform incredibly well. These are both engineering and business tradeoffs, and the companies behind the browsers are making because of their own business and engineering priorities. Don’t valorize any of the browser vendors, and don’t act as if &lt;em&gt;any&lt;/em&gt; of them is the standard, or a reliable predictor of the future. Instead, value what each brings to the table, but also value the interplay &lt;em&gt;at&lt;/em&gt; the table, and the ways each of these vendors pushes the others and challenges the others’ assumptions of what is most important. That’s what makes the web so great, even when it makes things move more slowly. Sometimes—often, even!—moving more slowly not in the &lt;em&gt;experimental&lt;/em&gt; phase but in the &lt;em&gt;finalizing&lt;/em&gt; phase makes for a much better outcome overall.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;In this case, it seems to have been the latter, since yesterday’s release of Safari Tech Preview enabled Service Workers, one of the major pieces of the &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt; push.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="web development"></category></entry><entry><title>Vexing Ironies</title><link href="http://www.chriskrycho.com/2017/vexing-ironies.html" rel="alternate"></link><published>2017-12-17T20:50:00-05:00</published><updated>2017-12-17T20:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-17:/2017/vexing-ironies.html</id><summary type="html">One of the most vexing problems in thinking and responding well to problems of ethics in information technology specifically is the way that so much of thinking and responding about information technology takes place within the context of, well, information technology. Two examples of that challenge caught my attention this evening, ironies I noticed in reading the very same article.
</summary><content type="html">&lt;p&gt;One of the most vexing problems in thinking and responding well to problems of ethics in &lt;em&gt;information technology&lt;/em&gt; specifically is the way that so much of thinking and responding about information technology takes place within the context of, well, information technology. Two examples of that challenge caught my attention this evening, ironies I noticed in reading the very same article.&lt;/p&gt;
&lt;p&gt;In &lt;a href="http://www.roughtype.com/?p=8248"&gt;“How smartphones hijack our minds”&lt;/a&gt;, Nick Carr explores much of the evidence for ways that use of smartphones can have seriously negative effects on our thinking in ways that are both pernicious (because we usually do not notice them consciously) and pervasive (in that they happen simply by dint of the &lt;em&gt;presence&lt;/em&gt; of the devices). It’s a good article, and I commend it you as a helpful summary of a lot of the most current research on attention, smartphones, and the like; you should read it and think about how you use your phone.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But the first irony was that I read that article… on my smartphone. As indeed I read &lt;em&gt;many&lt;/em&gt; of Nick Carr’s articles. There’s something more than a little odd about considering the use of a smartphone by way of reading an article on a smartphone. But in a very real sense, there’s almost no way I &lt;em&gt;could&lt;/em&gt; have read Carr’s article otherwise.&lt;/p&gt;
&lt;p&gt;And accordingly, the second irony is that, although Carr, who has staked out a position as a popular-level writer tackling issues of how modern information technology affects us, &lt;a href="https://t.alibris.com/The-Shallows-What-the-Internet-Is-Doing-to-Our-Brains-Nicholas-Carr/book/11882057" title="The Shallows"&gt;certainly &lt;em&gt;is&lt;/em&gt; published in hard copy&lt;/a&gt;, everything of his I’ve ever read has been in digital form. Indeed, although his books are important in their own ways, I think it’s fair to say that &lt;em&gt;most&lt;/em&gt; people’s interaction with his ideas, including his critiques of the ways we use and indeed rely on the internet, have all happened via and only because of the internet.&lt;/p&gt;
&lt;p&gt;I’m not entirely sure what to make of these observations. I don’t fault Carr for publishing a blog, exactly; and though I am increasingly chastened about my own at-times-unwise use of a smartphone, I don’t fault myself for having an RSS reader there. (Better than that a Twitter app, to be sure!) But there is something at a minimum &lt;em&gt;odd&lt;/em&gt; and perhaps even something &lt;em&gt;off&lt;/em&gt; about the ways that we tend to use the very tools we are critiquing as the medium for advancing our critiques. We implicate ourselves.&lt;/p&gt;
&lt;p&gt;But what is the alternative? On the one hand Carr’s message—which is important!—has likely been heard and even internalized by a far broader audience because he has transmitted it digitally than it would have been had he conscientiously limited it to books (and perhaps print media articles). The efficacy of the medium for distribution is the internet’s greatest strength. Likewise, I would never have run into Carr’s writing in the first place apart from articles in my RSS feed which linked it; and I do a great deal of my RSS feed reading on my iPhone and iPad, both of which are much better &lt;em&gt;reading&lt;/em&gt; environments than a laptop or a desktop computer. Indeed, much of what I find most helpful in my reading on technology and ethics I find my way to via articles in my RSS feed, and I often items for reading later by simply tapping a an interesting-looking link in an article I’m reading in that RSS feed.&lt;/p&gt;
&lt;p&gt;What do we make of this tension, these ironies? Especially when our concerns begin to rise to the level not merely of prudential judgments (though that level alone is perhaps sufficient reason to do more than we let ourselves) but deep ethical worries—do we abandon the smartphone altogether, cease blogging for fear of how it only contributes to the Google-ified and Facebook-ified age we live in?&lt;/p&gt;
&lt;p&gt;I don’t know.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;One of my concerns in my &lt;a href="http://www.chriskrycho.com/2017/why-do-i-need-a-research-tool.html"&gt;ongoing project&lt;/a&gt; is to prompt people around me—friends and family, but perhaps also blog readers!—to consider how our use of technology &lt;em&gt;forms&lt;/em&gt; us. More on that in a future post.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="ethics"></category></entry><entry><title>Becoming a Contributor</title><link href="http://www.chriskrycho.com/2017/becoming-a-contributor.html" rel="alternate"></link><published>2017-11-02T07:00:00-04:00</published><updated>2017-11-02T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-11-02:/2017/becoming-a-contributor.html</id><summary type="html">The prepared script for my talk at Rust Belt Rust 2017, given October 27, 2017 in Columbus, Ohio.</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;Here is the full text of the talk I gave at Rust Belt Rust, as it was prepared; headings correspond to individual slides. You can see the slides as they were presented &lt;a href="/talks/rust-belt-rust/"&gt;here&lt;/a&gt;. Note that I extemporize fairly freely when actually giving a talk, so this is &lt;em&gt;not&lt;/em&gt; a word-for-word equivalent of the talk as delivered, but the gist is the same!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;I’ll update this post with the video once it’s available!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/family.jpg" alt="family" /&gt;&lt;figcaption&gt;family&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Hello, everyone! It’s good to see all of you. We only have half an hour, and even if that’s ten to fifteen minutes longer than a normal New Rustacean episode, that’s still not much time, so let’s jump right in! Our theme is “Becoming a Contributor.” There are two prongs to this talk, two big ideas I hope you all walk away with.&lt;/p&gt;
&lt;section id="introduction-the-big-ideas" class="level3"&gt;
&lt;h3&gt;Introduction: The Big Ideas&lt;/h3&gt;
&lt;p&gt;The first thing I hope all of you take away is that &lt;strong&gt;there is no reason &lt;em&gt;you&lt;/em&gt; cannot contribute meaningfully&lt;/strong&gt; to the success of Rust – or indeed any open-source project you care about. Anyone can be a contributor. And not “even you” but perhaps “&lt;em&gt;especially&lt;/em&gt; you”. The fact that you’re an outsider, or new to programming, or new to systems programming: sometimes that makes you a &lt;em&gt;better&lt;/em&gt; contributor. Because you don’t necessarily share the biases of – you’re not wearing the same blinders that – someone who’s been writing systems-level code for 20 years have. So the first idea: &lt;strong&gt;you can contribute&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The second idea I hope you take away is &lt;strong&gt;just &lt;em&gt;how many&lt;/em&gt; ways there are to contribute meaningfully&lt;/strong&gt;. It has almost become a cliche in the Rust community to say “code isn’t the only thing that matters,” but I want to show you today just how true that is. And I want to make that point again more forcefully, because for all that we often say that, the idea that &lt;em&gt;shipping code&lt;/em&gt; is what really matters is the kind of pernicious lie that can come back and bite any of us. It certainly gets to me at times! But it’s a lie, and we’re going to see that in detail. That’s the second big idea: &lt;strong&gt;there are an &lt;em&gt;astounding&lt;/em&gt; number of ways you can contribute&lt;/strong&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction-why" class="level3"&gt;
&lt;h3&gt;Introduction: Why?&lt;/h3&gt;
&lt;p&gt;There are a lot of things to be passionate about in the world of software development. But at the end of the day, I care about software because I care about &lt;em&gt;people&lt;/em&gt;. To borrow a label from Scott Wlaschin – a developer I admire enormously, mostly working over in the F# community – I am a &lt;em&gt;humanist&lt;/em&gt;, not a &lt;em&gt;technologist&lt;/em&gt;. The technologies are interesting in themselves to a degree; but I mostly care about the ways that technologies can help us serve people more effectively. As software developers, that takes a lot of shapes. But today I want to zoom in on just these two ideas about open-source software:&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction-the-big-ideas-1" class="level3"&gt;
&lt;h3&gt;Introduction: The Big Ideas&lt;/h3&gt;
&lt;p&gt;So: why these two ideas? For one thing, because I think they are among the most applicable to everyone here. We have an enormous open-source focus. But for another, because they can also serve as windows into the ways we can – and should – think about software more generally. So: let’s talk about how you become a &lt;em&gt;contributor&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction-outline" class="level3"&gt;
&lt;h3&gt;Introduction: Outline&lt;/h3&gt;
&lt;p&gt;We’re going to take this on in the good old grammar-school fashion: &lt;em&gt;who&lt;/em&gt;, &lt;em&gt;what&lt;/em&gt;, &lt;em&gt;when&lt;/em&gt;, &lt;em&gt;where&lt;/em&gt;, &lt;em&gt;why&lt;/em&gt;, and &lt;em&gt;how&lt;/em&gt;. We’re not going to take them in that order though, and we might smash a few of them together.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Why bother contributing? &lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;Who is a contributor? &lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;What is a contribution? How can you contribute? &lt;!-- .element: class="fragment" data-fragment-index="3" --&gt;
&lt;ul&gt;
&lt;li&gt;…so many things they won’t fit on this slide. &lt;!-- .element: class="fragment" data-fragment-index="4" --&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When and where to contribute? &lt;!-- .element: class="fragment" data-fragment-index="5" --&gt;&lt;/li&gt;
&lt;li&gt;Conclusion &lt;!-- .element: class="fragment" data-fragment-index="6" --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="why-bother-contributing" class="level2"&gt;
&lt;h2&gt;Why bother contributing?&lt;/h2&gt;
&lt;p&gt;The first question we might be asking is: &lt;em&gt;why contribute at all&lt;/em&gt;? Why should you be interested in becoming a contributor? And the best answer I can offer is: because there is more work than hands to do it. Always. Every open-source maintainer can tell you the truth of this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor" class="level2"&gt;
&lt;h2&gt;Who is a contributor?&lt;/h2&gt;
&lt;p&gt;People define this differently, but I have a very simple definition: &lt;strong&gt;A contributor is &lt;em&gt;anyone&lt;/em&gt; who improves a project.&lt;/strong&gt;&lt;/p&gt;
&lt;section id="who-is-a-contributor-examples" class="level3"&gt;
&lt;h3&gt;Who is a contributor? Examples&lt;/h3&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;submit a patch to fix a typo &lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;add a small correction for a code sample in a project &lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;file an issue instead of just suffering through a problem in silence &lt;!-- .element: class="fragment" data-fragment-index="3" --&gt;&lt;/li&gt;
&lt;li&gt;everything else we’re going to talk about today &lt;!-- .element: class="fragment" data-fragment-index="4" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor-me" class="level3"&gt;
&lt;h3&gt;Who is a contributor? Me!&lt;/h3&gt;
&lt;p&gt;That might sound overblown, but it’s really not. I am literally standing on this stage in front of you today because I submitted some small typo and code sample improvements to “Rust by Example” a few years ago, and realized: I can make a difference in this community. And that gave me the motivation I needed to &lt;em&gt;keep&lt;/em&gt; contributing.&lt;/p&gt;
&lt;p&gt;&lt;img src="/talks/rust-belt-rust/img/first-commit.png" alt="my first Rust commit" /&gt;&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor-1" class="level3"&gt;
&lt;h3&gt;Who is a contributor?&lt;/h3&gt;
&lt;p&gt;I don’t imagine the story is all that different for &lt;em&gt;most&lt;/em&gt; people who are open-source contributors in this room. Something got them over the hump, and it was probably something small, insignificant-seeming at the time. They might be particularly skilled in this thing or that thing, but in fact a lot of them are in those roles just because they saw a need and stepped up to fill it. And then kept at it for a long time. But it made them a contributor. And that feeling – of helping build something bigger than you can build on your own – is a good one. I’d go so far as to say it’s part of what humans are &lt;em&gt;meant&lt;/em&gt; for. It’s part of us in a deep, deep way.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor-2" class="level2"&gt;
&lt;h2&gt;Who is a contributor?&lt;/h2&gt;
&lt;p&gt;If you’re inclined to quibble with that definition, I challenge you to ask &lt;em&gt;why?&lt;/em&gt; I think, most often, it’s because we feel defensive about wanting to project our own particular kinds of contribution as the most important, or the most valuable. But I’m more of the mindset that, as I read recently, “anyone who would be first… must be last of all, and servant of all.” We should stop worrying about our own prestige and turf-marking, and start rejoicing in the many different ways people are able to make our projects better.&lt;/p&gt;
&lt;p&gt;There’s no magic that makes you qualified to be a contributor. There’s just a willingness to serve where you see a need.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-how-can-you-contribute" class="level2"&gt;
&lt;h2&gt;What &amp;amp; how can you contribute?&lt;/h2&gt;
&lt;p&gt;And that takes us into the “what” of all of this, the &lt;em&gt;how&lt;/em&gt;. (Yes, I’m combining those two). &lt;strong&gt;&lt;em&gt;What&lt;/em&gt; is a contribution? &lt;em&gt;How&lt;/em&gt; can you contribute?&lt;/strong&gt; Turns out, this is a &lt;em&gt;long&lt;/em&gt; list.&lt;/p&gt;
&lt;section id="what-how-code" class="level3"&gt;
&lt;h3&gt;What &amp;amp; how: code&lt;/h3&gt;
&lt;p&gt;Let’s get this right out of the way up front, because it’s the most obvious: you can write code. You can fix bugs or help implement new features. You can do that even if you’re not an expert – especially in the Rust community. Many Rust projects have gone out of their way to mark issues as good-first-issues, or easy-to-tackle, or mentorship-available. Maybe it’s your first contribution to an open-source project: that’s okay. You can take a stab at it, and the fact that it might not be good &lt;em&gt;is okay&lt;/em&gt;. The whole point of these kinds of issues is that they give you a place where you can jump in safely.&lt;/p&gt;
&lt;p&gt;&lt;img src="/talks/rust-belt-rust/img/good-first-issue.png" alt="good first issue" /&gt; &lt;img src="/talks/rust-belt-rust/img/mentored.png" alt="mentored" /&gt; &lt;img src="/talks/rust-belt-rust/img/easy.png" alt="easy" /&gt;&lt;/p&gt;
&lt;p&gt;That goes equally for everything from the Rust compiler itself to many of the other projects in the ecosystem. Look at the repository, for example! And it’s not just this project. &lt;em&gt;Lots&lt;/em&gt; of projects in the Rust ecosystem are like this.&lt;/p&gt;
&lt;section id="what-how-code-were-kind-here" class="level4"&gt;
&lt;h4&gt;What &amp;amp; how: code – we’re kind here&lt;/h4&gt;
&lt;p&gt;And no one is going to swear at you or insult for making a mistake here. Not even if you’re working on something important, and not even if you’ve been doing it for a while. That is not. how. we. roll. here. &lt;em&gt;Everyone&lt;/em&gt; makes mistakes!&lt;/p&gt;
&lt;p&gt;Instead, we &lt;em&gt;want&lt;/em&gt; people to show up, knowing nothing: we’re happy to help. Remember: we want people to contribute! So: try opening a PR and let people help you learn how to do it well! In fact, if you haven’t ever opened a PR on a Rust project, find one that looks interesting to you and has an issue tagged that way, and submit a PR before the weekend is out! You can do it!&lt;/p&gt;
&lt;p&gt;&lt;img src="/talks/rust-belt-rust/img/good-first-issue.png" alt="good first issue" /&gt; &lt;img src="/talks/rust-belt-rust/img/mentored.png" alt="mentored" /&gt; &lt;img src="/talks/rust-belt-rust/img/easy.png" alt="easy" /&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-how-code-a-caveat" class="level4"&gt;
&lt;h4&gt;What &amp;amp; how: code – a caveat&lt;/h4&gt;
&lt;p&gt;But code is not the only thing that makes you a contributor. I put it up front because I think it’s worth doing – but I also wanted to get it out of the way. In every software community, it’s easy to &lt;em&gt;over&lt;/em&gt;-value the code. That might sound crazy, given that it’s open-source &lt;em&gt;software&lt;/em&gt;, but the reality is that no one fails to value the code. We &lt;em&gt;do&lt;/em&gt; often fail to value all the other things that make an open-source software project actually useful. It’s certainly true that there’s no project without the code. But it’s also the case that there’s no &lt;em&gt;useful&lt;/em&gt; software without a lot of other things besides the code, and we often undervalue those.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="filing-bugs" class="level3"&gt;
&lt;h3&gt;Filing bugs&lt;/h3&gt;
&lt;p&gt;So let’s take one step away from code, and talk about what is probably the single &lt;em&gt;easiest&lt;/em&gt; way anyone can contribute. &lt;em&gt;File issues.&lt;/em&gt; If you’re using a binary and it doesn’t work, open a ticket. If you’re integrating a library and it seems like the API doesn’t do what it should, or if it seems like it’s missing some functionality… well, you can suffer in silence, or you can open a bug ticket! Many times, the author of the software &lt;em&gt;doesn’t know there’s a problem&lt;/em&gt;. The only way they can fix it is if they know about it!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/new-issue.png" alt="filing bugs" /&gt;&lt;figcaption&gt;filing bugs&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="docs" class="level3"&gt;
&lt;h3&gt;Docs&lt;/h3&gt;
&lt;p&gt;Perhaps the thing most of you will be most persuaded of the utility of is &lt;em&gt;documentation&lt;/em&gt;. All of us have faced the difficulty of trying to figure out how to integrate some poorly-documented (or undocumented!) library into our own codebase. That experience, in word, &lt;em&gt;sucks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So working on documentation is one of the highest-value areas you can contribute to any project. It’s also really hard, in a bunch of ways – harder, in some ways, than writing the code is!&lt;/p&gt;
&lt;section id="docs-who" class="level4"&gt;
&lt;h4&gt;Docs: who?&lt;/h4&gt;
&lt;p&gt;One kind of documentation is &lt;strong&gt;explanation of how things work under the hood&lt;/strong&gt;. The implementer is the most qualified there! That doesn’t mean they don’t still need help even with that, though! Some people are incredible implementors and terrible explainers; you can often do a great service by serving as an “interpreter” for them – taking their explanations and making the literary tweaks and cleanups and polish that they need.&lt;/p&gt;
&lt;p&gt;Another kind of documentation, though, developers and maintainers are often really poorly equipped to write, and that’s &lt;strong&gt;introductory documentation&lt;/strong&gt;. This is the problem of expertise: when you know exactly how something is &lt;em&gt;meant&lt;/em&gt; to work, and especially when you’re the one who implemented it, there are things that seem obvious to you which simply aren’t obvious to someone approaching it for the first time. And as hard as you try, you &lt;em&gt;can’t&lt;/em&gt; escape that entirely. You can imagine what it might be like not to know something, but there’s no substitute for actually not knowing something.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="docs-how" class="level4"&gt;
&lt;h4&gt;Docs – how?&lt;/h4&gt;
&lt;p&gt;What that means is that one of the most valuable things you can do as you learn a new library is &lt;em&gt;write down the things you don’t understand from the docs as you go&lt;/em&gt;. And when you figure them out, &lt;em&gt;write that down, too&lt;/em&gt;. If nothing else, writing up that experience – filing it as an issue on the bug tracker, or otherwise getting it in the hands of the maintainers – can help them make important changes to things like the order various concepts are introduced, or adding little notes to help people feel comfortable with not knowing something until it &lt;em&gt;can&lt;/em&gt; be introduced later, and other things like that. It can help them recognize and fill in gaps in their docs – things they simply assumed but which they didn’t realize they were assuming – and fill those in. At the most extreme, you might even help them realize that some parts of the docs need full rewrites… and the work you’ve done in writing things down might just be the foundation or the actual content of those new docs.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Write down the things you don’t understand from the docs as you go.&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;When you figure them out, write that down, too.&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;Then: file an issue or write a PR to improve it!&lt;!-- .element: class="fragment" data-fragment-index="3" --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="docs-varieties" class="level4"&gt;
&lt;h4&gt;Docs: varieties&lt;/h4&gt;
&lt;p&gt;So what kinds of things would we call &lt;em&gt;documentation&lt;/em&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API documentation&lt;!-- .element class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;READMEs&lt;!-- .element class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;Tutorials&lt;!-- .element class="fragment" data-fragment-index="3" --&gt;&lt;/li&gt;
&lt;li&gt;Books&lt;!-- .element class="fragment" data-fragment-index="4" --&gt;&lt;/li&gt;
&lt;li&gt;The Rust Reference&lt;!-- .element class="fragment" data-fragment-index="5" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, books are a &lt;em&gt;huge&lt;/em&gt; undertaking, but they can genuinely serve as documentation. Especially for large projects. In fact, several of the most important pieces of “documentation” the Rust project itself has are books: “The Rust Programming Language”, “Rust by Example”, and “The Rustonomicon”. But there are also important but totally unofficial books like Daniel Keep’s “A Practical Intro to Macros in Rust 1.0” and “The Little Book of Rust Macros”, or Jorge Aparicio’s book on microcontrollers with Rust.&lt;/p&gt;
&lt;p&gt;The Rust Reference: This is a special category, and one that’s especially important to me. The Rust Reference is supposed to be an exhaustive guide to the language, and the value of that being complete and accurate is hard to overstate. It’s also wildly out of date today. I wrote an RFC last year that said, basically, “We need to actually document everything! That includes updating the Reference!” The trick is: it’s a huge undertaking, and while I and a few others made a good start on it earlier this year, that effort got bogged down by life, and it needs to be resuscitated. And it’s not just Rust which could use investment in that area. Other languages and frameworks have the same issue. It’s &lt;em&gt;really&lt;/em&gt; important that there be an answer other than “dive into the source and try to figure out what its intent is” – the more central the component is in the ecosystem, the more important that is.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="docs-translation" class="level4"&gt;
&lt;h4&gt;Docs: Translation&lt;/h4&gt;
&lt;p&gt;Another huge place you can contribute to documentation is &lt;em&gt;translation&lt;/em&gt;. For good or ill, English has become the sort of &lt;em&gt;primary&lt;/em&gt; language of programming, but that doesn’t mean we should treat it as the &lt;em&gt;only&lt;/em&gt; language, or as &lt;em&gt;more important&lt;/em&gt; than other languages. Translating documentation is amazing and very needed work, and it’s work that not everyone is really capable of! I’m fluent in English and… ancient Hebrew and ancient Greek. For some reason, there’s not much demand for technical writing in Greek from the era when Plato was alive. So I’m not much use at translation.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/translation.png" alt="translation" /&gt;&lt;figcaption&gt;translation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;But many of you out there &lt;em&gt;are&lt;/em&gt; multilingual, and could take docs written in English and convert them for, say, Czech-speaking developers. Perhaps just as importantly, you can go the &lt;em&gt;other&lt;/em&gt; direction, and help non-English-speaking maintainers reach a broader audience. Take an amazing project which only has documentation in Amharic (because its developers don’t feel comfortable enough in English to translate it themselves) and translate it to English: &lt;em&gt;use&lt;/em&gt; the fact that English &lt;em&gt;is&lt;/em&gt; the common language to increase the reach of non-Western developers!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="visual-design" class="level3"&gt;
&lt;h3&gt;Visual Design&lt;/h3&gt;
&lt;p&gt;One of the areas where you could move the ball down the field fastest in the Rust community is with &lt;strong&gt;&lt;em&gt;visual&lt;/em&gt; design&lt;/strong&gt;. (To be clear, the &lt;em&gt;language&lt;/em&gt; design is great!) But our websites could sometimes use some work.&lt;/p&gt;
&lt;section id="visual-design-its-not-just-us" class="level4"&gt;
&lt;h4&gt;Visual design: it’s not just us&lt;/h4&gt;
&lt;p&gt;Systems programming language types have historically &lt;em&gt;not&lt;/em&gt; spent a lot of time on the &lt;em&gt;presentation&lt;/em&gt; of their tools. In part this is just a matter of what these kinds of languages have been oriented towards: if you spend all day hacking on kernel code, you’re &lt;em&gt;likelier&lt;/em&gt; to be a person for whom user interface and visual design is less interesting than, say, optimizing memory performance or minimizing the number of cache misses a given approach has. But presentation &lt;em&gt;does&lt;/em&gt; matter, and it matters especially as we want to enable more and more people to be able to write this kind of code.&lt;/p&gt;
&lt;p&gt;Speaking frankly, though I’ve spent a large chunk of my career to date writing systems-level languages, I’ve found the way a lot of these tools are presented to be a huge turn-off, and at times a barrier even to getting them working for me locally. Perhaps the most egregious example of that was some of the “documentation” – I’m not sure I should even call it that! – for Fortran, when I was first getting started programming back in college. The presentation of the material was essentially hacker-ish in a &lt;em&gt;bad&lt;/em&gt; way: no CSS, no attention to organization of the material, no structure to help you find your way through it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="visual-design-how" class="level4"&gt;
&lt;h4&gt;Visual design: how&lt;/h4&gt;
&lt;p&gt;If you’re an expert or just a talented amateur, please pitch in&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/p&gt;
&lt;p&gt;You can help here even if you’re not especially comfortable with visual design or even if you’re outright bad at it if you’re willing to spend just a little time on it! For example, you can simply help a team adopt something like Bootstrap. Yes, it’ll look like many other open-source projects out there. But it won’t be horribly, catastrophically ugly and unreadable! Or you can do use one of these simple starter kits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://usewing.ml"&gt;Wing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://purecss.io"&gt;Pure.css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://getskeleton.coma"&gt;Skeleton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So don’t think that just because you aren’t a design expert means you can’t help here.&lt;/p&gt;
&lt;p&gt;Just as important as the &lt;em&gt;visual&lt;/em&gt; design is thinking about and actively designing the &lt;strong&gt;information hierarchy&lt;/strong&gt; of your content. What leads to what? Which pieces go together, and which pieces can be broken up into their own pages or sections within pages? Think about the content like an &lt;em&gt;outline&lt;/em&gt;. Many sites don’t have any such structure to them; they’re kind of haphazardly cobbled together. If you can help the maintainers with the &lt;em&gt;structure&lt;/em&gt; and &lt;em&gt;organization&lt;/em&gt; of their content, that can make an enormous differences as well.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="blogging" class="level3"&gt;
&lt;h3&gt;Blogging&lt;/h3&gt;
&lt;p&gt;One of the other big ways you can help a project may not even end up in the repository at all. You can &lt;em&gt;blog&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I know blogging can seem intimidating, for many of the same reasons that writing documentation can. Technical writing is hard, and it’s a completely different skill from programming. But it doesn’t have to be amazing; it just has to get the information out there – and you’ll get better as you practice.&lt;/p&gt;
&lt;section id="blogging-easy-mode" class="level4"&gt;
&lt;h4&gt;Blogging: “Easy Mode”&lt;/h4&gt;
&lt;p&gt;You can start on “easy mode”, too. I mentioned this earlier when talking about documentation, but “just write down what you’re learning” is an incredibly effective technique for generating content. If you look at a lot of the technical blogging I’ve done over the years, it has been nothing more complicated than “here is what I just learned.” And if you want a &lt;em&gt;superb&lt;/em&gt; example of this which is &lt;em&gt;very&lt;/em&gt; different from mine, take a look at the work that Julia Evans does on her blog! She regularly writes down, in an inimitable way, highly technical ideas she’s just learning. If you want someone to make arcane Linux command line tools seem amazing and approachable, her blog is your ticket.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just write down what you’re learning.&lt;br/&gt; —Me, just now&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="blogging-good-examples" class="level4"&gt;
&lt;h4&gt;Blogging: good examples&lt;/h4&gt;
&lt;p&gt;But even beyond “what I just learned,” blogging is a superb way for teaching in general. Over the course of this year, for example, Vaidehi Joshi has been writing what is essentially a friendly introduction to computer science on her blog on Medium. This is a totally different style of &lt;em&gt;content&lt;/em&gt; (as well as of presentation!) from the kind of “what I just learned” content that Julia Evans writes,but it’s also really effective, because she takes her knowledge and translates it into something others can pick up. That’s obviously more work than just writing down things you just learned, but it can also pay really high dividends as others are able to substantially deepen their knowledge.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="blogging-all-the-options" class="level4"&gt;
&lt;h4&gt;Blogging: all the options!&lt;/h4&gt;
&lt;p&gt;In blogging, as in documentation, there is a whole spectrum of basic teaching content you can contribute! And communities need the whole spectrum for simple introductions to extremely thorough, advanced tutorials.&lt;/p&gt;
&lt;p&gt;But blog posts can also be much more versatile than traditional documentation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;They can be one-offs, or series.&lt;/strong&gt; You can give a topic as much depth, or as little depth, as you &lt;em&gt;care about&lt;/em&gt; or &lt;em&gt;think it deserves&lt;/em&gt;. I wrote an 18-part series comparing Rust and Swift, and it could have been 30 parts if I hadn’t eventually gotten derailed. That’s not &lt;em&gt;documentation&lt;/em&gt;, but there’s a lot people can learn from those kinds of things.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can introduce a technology, or dig deep into how to use it, or how it’s built.&lt;/strong&gt; You’re not limited to just one particular tack when blogging. Is your interest in the specific implementation details of some corner of the compiler? Write about that! Is your interest in how a given Rust library solves a specific kind of problem you’ve run into with another library, or with a similar library in another language? Write about that! You get the idea.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can critique or highlight problems with specific pieces of the ecosystem!&lt;/strong&gt; A careful, well-articulated, critical blog post can do wonders for showing the problems with a given approach and can even sometimes help suggest the right solutions to those problems. I’ve repeatedly watched, for example, as people have blogged about their struggles getting their heads around the Tokio tooling; the result has been a &lt;em&gt;lot&lt;/em&gt; of work by the Tokio team to respond to those problems. The more thoughtful and careful you are in that kind of criticism, the better! Good criticism is &lt;em&gt;incredibly&lt;/em&gt; valuable. Because we all have blind spots, and someone else’s perspective can help jar us out of those.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can show how to &lt;em&gt;integrate&lt;/em&gt; different parts of the ecosystem.&lt;/strong&gt; For example, as part of the “Increasing Rust’s Reach” initiative, Ryan Blecher recently wrote up a detailed walk-through on how to use the Diesel ORM and the Rocket web framework together to build a small blogging engine. That’s &lt;em&gt;huge&lt;/em&gt;! It makes it that much easier for someone who’s just starting out with Rust, coming in from something like Python or Ruby, to dive in and get that intensely rewarding feeling of &lt;em&gt;having built something&lt;/em&gt; in a relatively small amount of time. That’s also helpful because (almost) no one is building something with &lt;em&gt;just&lt;/em&gt; Diesel, or just &lt;em&gt;any&lt;/em&gt; crate. A huge part of what every software developer does is about fitting together other pieces of software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can invite feedback on your own projects.&lt;/strong&gt; Talk about what you’re doing, what your stumbling blocks are, what you don’t understand. People will often show up and help you with comments and clarifications!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that’s just scratching the surface. Blogs are incredibly versatile, and you should lean on that.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="audio-and-video" class="level3"&gt;
&lt;h3&gt;Audio and Video&lt;/h3&gt;
&lt;p&gt;Not just words! Noises and pictures, too!&lt;/p&gt;
&lt;section id="audio-podcasts" class="level4"&gt;
&lt;h4&gt;Audio: podcasts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Not everyone learns the same way.&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;Lots of people have commutes.&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="audio-but-there-are-already-podcasts" class="level4"&gt;
&lt;h4&gt;Audio: but there are already podcasts&lt;/h4&gt;
&lt;p&gt;Everything I’ve talked about so far has been in written form. But audio and video media can also be really helpful. Not everyone learns best by reading. And not everyone has tons of time to sit down and read a book every day. One of the reasons I started the New Rustacean podcast is that it gives people a way to get up to speed on the language while on a daily commute. But there’s still a &lt;em&gt;huge&lt;/em&gt; need for more audio and video content in this space!&lt;/p&gt;
&lt;p&gt;One podcast is not enough!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/newrustacean.png" alt="New Rustacean" /&gt;&lt;figcaption&gt;New Rustacean&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Two&lt;/em&gt; podcasts is not enough!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/rfe.png" alt="Request for Explanation" /&gt;&lt;figcaption&gt;Request for Explanation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Seriously, not even &lt;em&gt;three&lt;/em&gt; podcasts is enough!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/rusty-spike.png" alt="Rusty Spike" /&gt;&lt;figcaption&gt;Rusty Spike&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So I’m laying down another challenge: there’s plenty of room for more, and more kinds, of audio content in this ecosystem.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="video" class="level4"&gt;
&lt;h4&gt;Video&lt;/h4&gt;
&lt;p&gt;Again: people have different learning styles!&lt;/p&gt;
&lt;p&gt;There’s also a huge opening for people to produce good video content. I’ve heard often from people that things like RailsCasts were essential in helping them learn the Ruby on Rails ecosystem. We &lt;em&gt;need&lt;/em&gt; video tutorials which might look kind of like that, or like the kinds of things I’m doing on the podcast. If you have any skill that way, and any interest in teaching, you should make Rust videos – there aren’t many out there.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="video-what" class="level4"&gt;
&lt;h4&gt;Video: what&lt;/h4&gt;
&lt;p&gt;There are lots of options here—not just live streaming!&lt;/p&gt;
&lt;p&gt;Another, totally different tack you can take with video is &lt;em&gt;live-streaming&lt;/em&gt;. Sean Griffin has done this at times, and I’ve actually done it just once, and it’s a ton of fun – and it can be incredibly illuminating for other people to see how you work and how you solve problems. You can also do like I did and live-pair on something. It’s a pain to set up, but it’s also a lot of fun.&lt;/p&gt;
&lt;p&gt;And no doubt there are more ideas you have—please just go do them!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="talk-to-people" class="level3"&gt;
&lt;h3&gt;Talk to people&lt;/h3&gt;
&lt;p&gt;Just talking with people matters. And there are lots of places to do it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IRC/Gitter/Slack/Discourse&lt;/li&gt;
&lt;li&gt;Meetups&lt;/li&gt;
&lt;li&gt;Conferences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also host or help with a local meet-up! For a lot of people, one of the major challenges of learning &lt;em&gt;any&lt;/em&gt; new piece of technology is that – even with IRC and Gitter and Slack and so on – you can feel isolated and alone. And people can help you solve problems in person, and make you feel supported in person, in ways that even a great community can’t really manage online. So &lt;em&gt;go&lt;/em&gt; to meet-ups, at a minimum. And help the organizers. And if there isn’t a meet-up in your community… you can start one! The #rust-community team has a ton of resources.&lt;/p&gt;
&lt;p&gt;Physicality matters. Presence matters. (We know this! We’re at a conference!)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="being-inviting" class="level3"&gt;
&lt;h3&gt;Being inviting&lt;/h3&gt;
&lt;p&gt;Last but not least in this list of &lt;em&gt;how&lt;/em&gt; to be a contributor, I want to take a minute and talk about “being a contributor” to those of you who’ve been contributors for a long time. Some of you have been shipping open-source software for years – some of you even for decades. Much of what I’ve said so far is old hat for you. Maybe not the design bits quite so much! But you’ve been doing this for a long time, and you’re not trying to get over the hump of making your first contribution. You have other things to contribute here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The most important thing you can do is practice &lt;strong&gt;welcome people.&lt;/strong&gt; The Rust community does this well, in general, but it’s something we need to keep in front of us as a goal as the community grows. It’s easy to get frustrated with newcomers as your project grows, demands on your time increase, and your work as a maintainer seems less like fun and more like a second job. But continuing to actively welcome newcomers in is &lt;em&gt;incredibly&lt;/em&gt; powerful. You can make it possible for people to go from zero to really making a difference. And remember: so once were you. None of us started out as magical wizards of Rust and open-source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second big thing you can do is &lt;strong&gt;mentoring.&lt;/strong&gt; As I mentioned, I’m now the maintainer of one of the core pieces necessary to make Ember.js and TypeScript play nicely together. But while I’ve done &lt;em&gt;some&lt;/em&gt; writing-of-code with that, a much larger part of my current and future work there is about helping other people learn TypeScript well enough to start using it in their apps and add-ons. But the flip-side of that is: even a fair bit of the code I &lt;em&gt;have&lt;/em&gt; written, I was able to write because someone more comfortable with some of the infrastructure mentored &lt;em&gt;me&lt;/em&gt; through its quirks and oddities.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="when-where-to-contribute" class="level2"&gt;
&lt;h2&gt;When &amp;amp; where to contribute&lt;/h2&gt;
&lt;p&gt;The last thing I want to touch on is &lt;em&gt;when and where&lt;/em&gt; to contribute. There are two things I’d suggest you should consider here:&lt;/p&gt;
&lt;section id="when-where-you" class="level3"&gt;
&lt;h3&gt;When &amp;amp; where: you&lt;/h3&gt;
&lt;p&gt;Where are &lt;em&gt;you&lt;/em&gt; in the process of becoming comfortable with contributing?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just getting started?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;Already comfortable?&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’ve never done any open-source work at all before, that’s different than if you’ve gotten pretty comfortable with it in a different ecosystem and are just figuring out where to make yourself useful in &lt;em&gt;this&lt;/em&gt; ecosystem.&lt;/p&gt;
&lt;section id="when-where-if-youre-just-getting-started" class="level4"&gt;
&lt;h4&gt;When &amp;amp; where: if you’re just getting started&lt;/h4&gt;
&lt;p&gt;If you’re just getting started, I’d pick a big project with lots of those “Help Wanted” and “Mentoring” and “Easy” tags on issues, and let the size of the project help you out. Those are projects that are &lt;em&gt;used to&lt;/em&gt; helping people make their first contributions. Crazy as it seems, something like Servo can actually be an &lt;em&gt;easier&lt;/em&gt; place to start out that a much smaller project. Sure, the technical lift is higher, but there are also a lot more people actively invested in your success there.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Look for these!&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/p&gt;
&lt;p class="fragment" data-fragment-index="1"&gt;
&lt;img src="/talks/rust-belt-rust/img/help-wanted.png" alt="help wanted" /&gt; &lt;img src="/talks/rust-belt-rust/img/easy.png" alt="help wanted" /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pick big projects!&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="when-where-if-youre-experienced" class="level4"&gt;
&lt;h4&gt;When &amp;amp; where: if you’re experienced&lt;/h4&gt;
&lt;p&gt;On the other hand, if you’re already comfortable contributing and have some idea what you’re best at, you might look around and find smaller projects with fewer contributors which look interesting and &lt;em&gt;could use the help&lt;/em&gt;. Because again, there’s always more work to do than hands to do it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="when-where-project-lifecycles" class="level4"&gt;
&lt;h4&gt;When &amp;amp; where: project lifecycles&lt;/h4&gt;
&lt;p&gt;The second consideration dovetails nicely with that: &lt;strong&gt;where is a given project at in its life-cycle?&lt;/strong&gt; As enthusiastic as you might be about some project, if it’s a small project and it’s already in a “basically done” state, well… that’s probably a lot less useful a place to invest your time &lt;em&gt;if&lt;/em&gt; you’re focusing on code. On the other hand, it’s often the case that projects are “done” in terms of code, but desperately need help with documentation, their web site, etc. Big projects, or projects just starting out, are often better places to dig in if you’re really looking to flex your coding muscles (but both of them &lt;em&gt;also&lt;/em&gt; usually have huge needs in terms of all those non-code avenues we talked about).&lt;/p&gt;
&lt;p&gt;Where is a given project at in its life-cycle?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;small project, basically done?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;need docs?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;big project, a billion needs?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Think about those, and then see if you can pick a project that’s a good fit for your current skillset and comfort level and jump in!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that’s a good place to wrap things up! I hope you’re feeling like &lt;em&gt;you can do this&lt;/em&gt;. Because you can. Open-source a project of your own and see where it goes. Write a blog post. Add some docs. Open a PR. Record a podcast. Make some videos. Start a meet up. Become a contributor! And remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anyone can contribute meaningfully.&lt;/li&gt;
&lt;li&gt;People can contribute in a stunning variety of ways.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="more-info" class="level2"&gt;
&lt;h2&gt;More info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rust-lang.org/en-US/contribute.html" class="uri"&gt;https://www.rust-lang.org/en-US/contribute.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2017/09/18-impl-future-for-rust.html" class="uri"&gt;https://blog.rust-lang.org/2017/09/18-impl-future-for-rust.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/" class="uri"&gt;https://internals.rust-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#rust&lt;/code&gt;, &lt;code&gt;#rust-community&lt;/code&gt;, &lt;code&gt;#rust-internals&lt;/code&gt;, etc. on irc.mozilla.org&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
</content><category term="talks"></category><category term="software development"></category><category term="rust"></category><category term="open source software"></category></entry><entry><title>Announcing True Myth 1.0</title><link href="http://www.chriskrycho.com/2017/announcing-true-myth-10.html" rel="alternate"></link><published>2017-11-01T08:40:00-04:00</published><updated>2017-11-01T08:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-11-01:/2017/announcing-true-myth-10.html</id><summary type="html">&lt;p&gt;I’m pleased to announce the release of &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth 1.0&lt;/a&gt;! True Myth is a library I’ve been working on over the last month or so, for saner programming in JavaScript, with first-class support for TypeScript (and Flow).&lt;/p&gt;
&lt;p&gt;True Myth provides standard, type-safe wrappers and helper functions to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m pleased to announce the release of &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth 1.0&lt;/a&gt;! True Myth is a library I’ve been working on over the last month or so, for saner programming in JavaScript, with first-class support for TypeScript (and Flow).&lt;/p&gt;
&lt;p&gt;True Myth provides standard, type-safe wrappers and helper functions to help you with two &lt;em&gt;extremely&lt;/em&gt; common cases in programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not having a value—which it solves with a &lt;code&gt;Maybe&lt;/code&gt; type and associated helper functions and methods&lt;/li&gt;
&lt;li&gt;having a &lt;em&gt;result&lt;/em&gt; where you need to deal with either success or failure—which it solves with a &lt;code&gt;Result&lt;/code&gt; type and associated helper functions and methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could implement all of these yourself – it’s not hard! – but it’s much easier to just have one extremely well-tested library you can use everywhere to solve this problem once and for all.&lt;/p&gt;
&lt;p&gt;Even better to get one of these with no runtime overhead for using it other than the very small cost of some little container objects—which we get by leaning hard on the type systems in TypeScript or Flow!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; If you’re familiar with &lt;a href="http://folktale.origamitower.com"&gt;Folktale&lt;/a&gt; or &lt;a href="https://sanctuary.js.org"&gt;Sanctuary&lt;/a&gt;, this has a lot in common with them—its main differences are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;True Myth has a much smaller API surface than they do&lt;/li&gt;
&lt;li&gt;True Myth aims to be much more approachable for people who aren’t already super familiar with functional programming concepts and jargon&lt;/li&gt;
&lt;li&gt;True Myth does &lt;em&gt;no&lt;/em&gt; runtime checking of your types, whereas both those libraries do by default—it relies on TypeScript or Flow instead&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I really like both of those libraries, though, so you might check them out as well!&lt;/p&gt;
&lt;section id="maybe" class="level2"&gt;
&lt;h2&gt;&lt;code&gt;Maybe&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you don’t have a value. In JavaScript land, we usually represent that with either &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, and then trying to program defensively in the places we &lt;em&gt;think&lt;/em&gt; we might get &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; as arguments to our functions. For example, imagine an endpoint which returns a JSON payload shaped like this:&lt;/p&gt;
&lt;pre class="json"&gt;&lt;code&gt;{
  &amp;quot;hopefullyAString&amp;quot;: &amp;quot;Hello!&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But sometimes it might come over like this:&lt;/p&gt;
&lt;pre class="json"&gt;&lt;code&gt;{
  &amp;quot;hopefullyAString&amp;quot;: null
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or even like this:&lt;/p&gt;
&lt;pre class="json"&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assume we were doing something simple, like logging the length of whatever string was there or logging a default value if it was absent. In normal JavaScript we’d write something like this:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;function logThatValue(thePayload) {
  const length = !!thePayload.hopefullyAString
    ? thePayload.hopefullyAString.length
    : 0;
  
  console.log(length);
}

fetch(someUrl)
  .then(response =&amp;gt; response.json())
  .then(logThatValue);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This isn’t a big deal right here… but—and this &lt;em&gt;is&lt;/em&gt; a big deal—we have to remember to do this &lt;em&gt;everywhere&lt;/em&gt; we interact with this payload. &lt;code&gt;hopefullyAString&lt;/code&gt; can &lt;em&gt;always&lt;/em&gt; be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; everywhere we interact with it, anywhere in our program. 😬&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Maybe&lt;/code&gt; is our escape hatch. If, instead of just naively interacting with the payload, we do a &lt;em&gt;very small&lt;/em&gt; amount of work up front to normalize the data and use a &lt;code&gt;Maybe&lt;/code&gt; instead of passing around &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; values, we can operate safely on the data throughout our application. If we have something, we get an instance called &lt;code&gt;Just&lt;/code&gt;—as in, “What’s in this field? Just a string” or “Just the string ‘hello’”. If there’s nothing there, we have an instance called &lt;code&gt;Nothing&lt;/code&gt;. &lt;code&gt;Just&lt;/code&gt; is a wrapper type that holds the actual value in it. &lt;code&gt;Nothing&lt;/code&gt; is a wrapper type which has no value in it. But both of them are concrete types and you’ll never get an &lt;code&gt;undefined is not an object&lt;/code&gt; error when trying to use them!&lt;/p&gt;
&lt;p&gt;Both of them have all the same methods available on them, and the same static functions to work on them. And, importantly, you can do a bunch of neat things with a &lt;code&gt;Maybe&lt;/code&gt; instance without checking whether it’s a &lt;code&gt;Nothing&lt;/code&gt; or a &lt;code&gt;Just&lt;/code&gt;. For example, if you want to double a number if it’s present and do nothing if it isn’t, you can use the &lt;code&gt;Maybe.map&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;
const hereIsANumber = Maybe.just(12);          // Just(12)
const noNumberHere = Maybe.nothing&amp;lt;number&amp;gt;();  // Nothing

const double = (n: number) =&amp;gt; n * 2;
hereIsANumber.map(double);  // Just(24)
noNumberHere.map(double);   // Nothing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are &lt;a href="https://true-myth.js.org/modules/_maybe_.html"&gt;a &lt;em&gt;lot&lt;/em&gt;&lt;/a&gt; of those helper functions and methods! Just about any way you would need to interact with a &lt;code&gt;Maybe&lt;/code&gt; is there.&lt;/p&gt;
&lt;p&gt;So now that we have a little idea what &lt;code&gt;Maybe&lt;/code&gt; is for and how to use it, here’s that same example, but rewritten to normalize the payload using a &lt;code&gt;Maybe&lt;/code&gt; instance. We’re using TypeScript, so we will get a compiler error if we don’t handle any of these cases right—or if we try to use the value at &lt;code&gt;hopefullyAString&lt;/code&gt; directly after we’ve normalized it!&lt;/p&gt;
&lt;p&gt;(Note that &lt;code&gt;Maybe.of&lt;/code&gt; will construct either a &lt;code&gt;Maybe.Just&lt;/code&gt; if the string is present, or &lt;code&gt;Maybe.Nothing&lt;/code&gt; if the value supplied to it is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.)&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

type Payload = { hopefullyAString?: string };
type NormalizedPayload = { hopefullyAString: Maybe&amp;lt;string&amp;gt; };

function normalize(payload: Payload): NormalizedPayload {
  return {
    hopefullyAString: Maybe.of(payload.hopefullyAString)
  };
}

function logThatValue(payload: NormalizedPayload) {
  const length = payload.hopefullyAString.mapOr(0, s =&amp;gt; s.length);
  console.log(length);
}

fetch(someUrl)
  .then(response =&amp;gt; response.json())
  .then(normalize)
  .then(logThatValue);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you might be thinking, &lt;em&gt;Sure, but we could get the same effect by just supplying a default value when we deserialize the data.&lt;/em&gt; That’s true, you could! Here, for example, you could just normalize it to an empty string. And of course, if just supplying a default value at the API boundary is the right move, you can still do that. &lt;code&gt;Maybe&lt;/code&gt; is another tool in your toolbox, not something you’re &lt;em&gt;obligated&lt;/em&gt; to use everywhere you can.&lt;/p&gt;
&lt;p&gt;However, sometimes there isn’t a single correct default value to use at the API boundary. You might need to handle that missing data in a variety of ways throughout your application. For example, what if you need to treat “no value” distinctly from “there’s a value present, and it’s an empty string”? &lt;em&gt;That’s&lt;/em&gt; where &lt;code&gt;Maybe&lt;/code&gt; comes in handy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="result" class="level2"&gt;
&lt;h2&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Another common scenario we find ourselves in is dealing with operations which might fail. There are a couple patterns we often use to deal with this: &lt;em&gt;callbacks&lt;/em&gt; and &lt;em&gt;exceptions&lt;/em&gt;. There are major problems with both, especially around reusability and composability.&lt;/p&gt;
&lt;p&gt;The callback pattern (as in e.g. Node) encourages a style where literally every function starts with the exact same code:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;function getMeAValue(err, data) {
  if (err) {
    return handleErr(err);
  }
  
  // do whatever the *actual* point of the function is
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two major problems with this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It’s incredibly repetitive – the very opposite of “Don’t Repeat Yourself”. We wouldn’t do this with &lt;em&gt;anything&lt;/em&gt; else in our codebase!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It puts the error-handling right up front and &lt;em&gt;not in a good way.&lt;/em&gt; While we want to have a failure case in mind when designing the behavior of our functions, it’s not usually the &lt;em&gt;point&lt;/em&gt; of most functions – things like &lt;code&gt;handleErr&lt;/code&gt; in the above example being the exception and not the rule. The actual meat of the function is always after the error handling.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But if we’re not using some similar kind of callback pattern, we usually resort to exceptions. But exceptions are unpredictable: you can’t know whether a given function invocation is going to throw an exception until runtime as someone calling the function. No big deal if it’s a small application and one person wrote all the code, but with even a few thousand lines of code or two developers, it’s very easy to miss that. And then this happens:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// in one part of the codebase
function getMeAValue(url) {
  if (isMalformed(url)) {
    throw new Error(`The url `${url}` is malformed!`);
  }
  
  // do something else to load data from the URL
  return data;
}

function render(toRender) {
  // if toRender can&amp;#39;t generate valid HTML, throw Error(&amp;quot;invalid HTML&amp;quot;);
  // if it can, theRenderedHTML;
}

function setDom(html) {
  /* magic to render into DOM */
}

// somewhere else in the codebase -- throws an exception
const badUrl = &amp;#39;http:/www.google.com&amp;#39;;  // missing a slash
const response = getMeAValue(badUrl);  // throws here

// we never get here, but it could throw too
const htmlForPage = render(value);

// so we definitely can&amp;#39;t get here safely
setDom(htmlForPage);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice: there’s no way for the caller to know that the function will throw. Perhaps you’re very disciplined and write good docstrings for every function – &lt;em&gt;and&lt;/em&gt; moreover, perhaps everyone’s editor shows it to them &lt;em&gt;and&lt;/em&gt; they pay attention to that briefly-available popover. More likely, though, this exception throws at runtime and probably as a result of user-entered data – and then you’re chasing down the problem through error logs.&lt;/p&gt;
&lt;p&gt;More, if you &lt;em&gt;do&lt;/em&gt; want to account for the reality that any function anywhere in JavaScript might actually throw, you’re going to write something like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;try {
  const badUrl = &amp;#39;http:/www.google.com&amp;#39;;  // missing a slash
  const response = getMeAValue(badUrl);  // throws here
  
  // we never get here, but it could throw too
  const htmlForPage = render(value);
  
  // so we definitely can&amp;#39;t get here safely
  setDom(htmlForPage);
} catch (e) {
  handleErr(e);  // ends up here
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is like the Node example &lt;em&gt;but even worse&lt;/em&gt; for repetition!&lt;/p&gt;
&lt;p&gt;And TypeScript and Flow can’t help you here! They don’t have type signatures to say “This throws an exception!” (TypeScript’s &lt;code&gt;never&lt;/code&gt; might come to mind, but it might mean lots of things, not just exception-throwing.)&lt;/p&gt;
&lt;p&gt;Instead, we can use a &lt;code&gt;Result&lt;/code&gt; to get us a container type, much like &lt;code&gt;Maybe&lt;/code&gt;, to let us deal with this scenario. A &lt;code&gt;Result&lt;/code&gt; is either an &lt;code&gt;Ok&lt;/code&gt; wrapping around a value (like &lt;code&gt;Just&lt;/code&gt; does) or an &lt;code&gt;Err&lt;/code&gt; wrapping around some type defining what went wrong (&lt;em&gt;not&lt;/em&gt; like &lt;code&gt;Nothing&lt;/code&gt;, which has no contents). Both of them have the same sets of methods on them, and the same static functions which can operate on them.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Result from &amp;#39;true-myth/result&amp;#39;;

type Payload = {/* details of the payload...*/}

function getMeAValue(url: string): Result&amp;lt;Payload, string&amp;gt; {
  if (isMalformed(url)) {
    return Result.err(`The url &amp;#39;${url}&amp;#39; is malformed`);
  }
  
  // do something else to load data from the url
  return Result.ok(data);
}

function render(toRender: string): Result&amp;lt;HTMLElement, string&amp;gt; {
  // if toRender can&amp;#39;t generate valid HTML, return Err(&amp;quot;invalid HTML&amp;quot;);
  // if it can, return Ok(theRenderedHTML);
}

function setDom(html: HTMLElement) {
  
}

// somewhere else in the codebase -- no exception this time!
const badUrl = &amp;#39;http:/www.google.com&amp;#39;;  // missing a slash

// value = Err(The url &amp;#39;${http:/www.google.com}&amp;#39; is malformed)
const value = getMeAValue(badUrl);

// htmlForPage = the same error! or, if it was Ok, could be a different
// `Err` (because of how `andThen` works).
const htmlForPage = value.andThen(render);

// we can&amp;#39;t just invoke `setDom` because it doesn&amp;#39;t take a `Result`.
value.match({
  Ok: html =&amp;gt; setDom(html);
  Err: reason =&amp;gt; alert(`Something went seriously wrong here! ${reason}`);
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we have a &lt;code&gt;Result&lt;/code&gt; instance, we can perform tons of operations on whether it’s &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;, just as we could with &lt;code&gt;Maybe.Just&lt;/code&gt; and &lt;code&gt;Maybe.Nothing&lt;/code&gt;, until we &lt;em&gt;need&lt;/em&gt; the value. Maybe that’s right away. Maybe we don’t need it until somewhere else deep in our application! Either way, we can deal with it easily enough, and have type safety throughout!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Give it a spin!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yarn add true-myth&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install true-myth&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can even just &lt;code&gt;ember install true-myth&lt;/code&gt; and use it if you’re using Ember (in which case I encourage you to also use &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know what you think – if there’s stuff missing, &lt;a href="https://github.com/chriskrycho/true-myth"&gt;open issues&lt;/a&gt;! And if it’s just not to your taste, again, I encourage you to take a look at &lt;a href="http://folktale.origamitower.com"&gt;Folktale&lt;/a&gt; and &lt;a href="https://sanctuary.js.org"&gt;Sanctuary&lt;/a&gt;, which are both excellent and land in very different design spaces in many ways.&lt;/p&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="libraries"></category><category term="programming languages"></category><category term="typescript"></category><category term="functional programming"></category><category term="true myth"></category></entry><entry><title>Announcing ember-cli-typescript 1.0.0</title><link href="http://www.chriskrycho.com/2017/announcing-ember-cli-typescript-100.html" rel="alternate"></link><published>2017-08-08T09:00:00-04:00</published><updated>2017-08-08T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-08-08:/2017/announcing-ember-cli-typescript-100.html</id><summary type="html">A stable foundation for building Ember.js apps with TypeScript, and a roadmap toward a flourishing, TypeScript-friendly ecosystem in the future!
</summary><content type="html">&lt;p&gt;I’m extremely pleased to announce the release of &lt;a href="https://github.com/typed-ember/ember-cli-typescript/releases/tag/v1.0.0"&gt;ember-cli-typescript 1.0.0&lt;/a&gt;! You can get it the same way you do &lt;em&gt;any&lt;/em&gt; Ember addon:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a detailed walkthrough of adding TypeScript to your projects, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-1.html"&gt;Typing Your Ember, Part 1: Set your Ember.js project up to use TypeScript.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-2.html"&gt;Typing Your Ember, Part 2: Adding TypeScript to an existing Ember.js project.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what are we shipping today, and what’s on the roadmap?&lt;/p&gt;
&lt;section id="whats-in-1.0" class="level2"&gt;
&lt;h2&gt;What’s In 1.0?&lt;/h2&gt;
&lt;p&gt;This release is intentionally relatively minimal: the goal here is provide stable foundation for building Ember.js applications with TypeScript in the toolchain. This means that in any app you can install the add-on and just start &lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-3.html"&gt;progressively converting your app over to TypeScript&lt;/a&gt;. However, we don’t expect to change the way you &lt;em&gt;use&lt;/em&gt; the addon at all in the foreseeable future.&lt;/p&gt;
&lt;p&gt;I’ll give you fair warning that there is one &lt;em&gt;major&lt;/em&gt; challenge you will find as you work with ember-cli-typescript today: the lack of type definitions for most projects, and the limits of the existing type definitions for Ember.js itself. That’s not as bad as it sounds, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;See the &lt;a href="#the-roadmap"&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt; below—we’re working on that, and you can help!&lt;/li&gt;
&lt;li&gt;I’ve been using TypeScript successfully in the app I work on at my day job for the last nine months or so. While the lack of (good or any) typings has had its frustrations, &lt;a href="https://www.dailydrip.com/blog/domain-driven-design-and-typed-functional-programming-in-typescript"&gt;TypeScript has already added a &lt;em&gt;lot&lt;/em&gt; of value for us&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="the-roadmap" class="level2"&gt;
&lt;h2&gt;The Roadmap&lt;/h2&gt;
&lt;p&gt;We have a bunch of things we’re actively working on and which you can expect to land in the next few weeks to months.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-1-a-prepublish-build-process-for-addons"&gt;1.1: A prepublish build process for addons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#community-driven-work-on-typings"&gt;Community-driven work on typings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="a-prepublish-build-process-for-addons" class="level3"&gt;
&lt;h3&gt;1.1: A prepublish build process for addons&lt;/h3&gt;
&lt;p&gt;The major priority for the 1.1 release is an npm prepublication step to generate JavaScript and typing files from add-ons which are using TypeScript. Currently, addons have to take TypeScript as a full dependency, not a dev dependency, because they currently just ship the &lt;code&gt;.ts&lt;/code&gt; files up to npm and they have to be compiled in your app at build time.&lt;/p&gt;
&lt;p&gt;We really don’t want to make any app developer who is using your addon download either the TypeScript files or &lt;em&gt;especially&lt;/em&gt; the TypeScript compiler if we can avoid it. There are three reasons for this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;The fact that an add-on is developed in TypeScript really shouldn’t affect app developers. If they’re writing a plain-old JavaScript app, the fact that your addon is originally written in TypeScript is irrelevant to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript is &lt;em&gt;large&lt;/em&gt;. The v2.4 installation I have in the app I’m working on right now weights 26MB. If I were using four add-ons which required TypeScript, my install cost could easily go up by a hundred megabytes. That’s not always a huge deal on a corporate network, but even where people &lt;em&gt;do&lt;/em&gt; have good download speeds, it’s a hit to developer time. Every time someone has to reinstall all the dependencies, those 26MB have to come down again. If TypeScript becomes common, you might suddenly find yourself with addons using 2.4, 2.5, 2.6, etc.; it’s not hard to see that ballooning up the size of your installation in a really non-trivial way: 26MB × &lt;em&gt;n&lt;/em&gt; versions of TypeScript = &lt;em&gt;do not want&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The TypeScript compilation step takes time. Addons can do this &lt;em&gt;once&lt;/em&gt; and save every consuming app build time. This isn’t the end of the world, but anything we can do to keep build times lower is a real win for developer productivity.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Accordingly the plan is to automatically add a build step which runs the TypeScript compiler on your addon and generates plain-old-JavaScript and the corresponding type definition files (&lt;code&gt;.d.ts&lt;/code&gt;) prior to publishing to npm. That way, TypeScript can remain a dev dependency (rather than a full dependency) of each addon, and not be installed alongside the addon for consumers. Just-JavaScript consumers can just consume the normal JavaScript generated by the build. TypeScript consumers will get the full benefits of the types via the generated typing files.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;should&lt;/em&gt; hopefully land by late August or early September. Fingers crossed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="community-driven-work-on-typings" class="level3"&gt;
&lt;h3&gt;Community-driven work on typings&lt;/h3&gt;
&lt;p&gt;The process of getting type definitions in place for &lt;em&gt;all&lt;/em&gt; of Ember.js and its ecosystem is way, &lt;em&gt;way&lt;/em&gt; too big for any one person or even a small handful of people to manage alone. This is something we’re going to take on as a community.&lt;/p&gt;
&lt;section id="new-typings-for-ember.js-itself" class="level4"&gt;
&lt;h4&gt;New typings for Ember.js itself&lt;/h4&gt;
&lt;p&gt;We’re actively working on type definitions for Ember which will give us actually-useful-and-correct type checking for Ember’s custom object model. Today, if you use &lt;code&gt;Ember.get&lt;/code&gt; or &lt;code&gt;Ember.set&lt;/code&gt;, you get &lt;em&gt;no&lt;/em&gt; help from the type system. When we finish, those will be type-checked by the compiler and will error if you try to assign the wrong values!&lt;/p&gt;
&lt;p&gt;Importantly, the typings we’re shipping will be backwards compatible with the existing Ember API, but will also include support for the &lt;a href="https://github.com/emberjs/rfcs/pull/176"&gt;RFC #176 JavaScript Modules API&lt;/a&gt;. TypeScript’s module definition system will let us support both in parallel, and we will. Backwards compatibility and &lt;em&gt;stability without stagnation&lt;/em&gt; are things we value for this addon just as much as the rest of the Ember.js ecosystem does.&lt;/p&gt;
&lt;p&gt;This effort, led by Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;), is ongoing in the &lt;a href="https://github.com/typed-ember/ember-typings"&gt;typed-ember/ember-typings&lt;/a&gt; repository. (If you’re wondering why we’re not just doing it in the DefinitelyTyped repository, see below.) We probably won’t be able to get to 100% of everything the Ember Object model does—Ember’s custom object model is &lt;em&gt;incredibly&lt;/em&gt; sophisticated, and TypeScript actually &lt;a href="https://github.com/Microsoft/TypeScript/issues/16699"&gt;still can’t&lt;/a&gt; &lt;em&gt;totally&lt;/em&gt; express it—but Derek already has most of it working. This will be a &lt;em&gt;huge&lt;/em&gt; step forward.&lt;/p&gt;
&lt;p&gt;To be clear, we’re not forking the way you get types. We’ll upstream all of this work to DefinitelyTyped as soon as we have them working, but the DefinitelyTyped repo is &lt;em&gt;huge&lt;/em&gt; and very busy; it’s not a great place to do this kind of substantial rework of existing types. And we really don’t need to have all the &lt;em&gt;other&lt;/em&gt; type definitions DefinitelyTyped supplies in our way as we’re working, either. Having a separate repo gives us a place we can work on types, try them out as a community, etc. before creating PRs on DefinitelyTyped and publishing them officially.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="addon-typings" class="level4"&gt;
&lt;h4&gt;Addon typings&lt;/h4&gt;
&lt;p&gt;We need to get type definitions in place for the addons in the ecosystem! That way when you’re using, say, &lt;a href="https://github.com/simplabs/ember-test-selectors"&gt;ember-test-selectors&lt;/a&gt;, you’ll get an error if you try to use the functions it provides incorrectly. Right now, every addon out there is missing types entirely, so everything gets treated as taking the useless &lt;code&gt;any&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;In a week or so, I’ll have a blog post with a fleshed-out &lt;a href="https://github.com/typed-ember/ember-cli-typescript/issues/48"&gt;quest issue&lt;/a&gt; for tackling it in detail, but here’s the short version: we’re going to try to get type definitions for all the top addons in the ecosystem so that it’s &lt;em&gt;easy&lt;/em&gt; to use TypeScript in your Ember.js app. That blog post and quest issue will explain how to write good typings, and also how to contribute them to a project which may or may not be interested in using TypeScript itself.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="typing-your-ember"></category><category term="typescript"></category><category term="emberjs"></category></entry><entry><title>Typing Your Ember, Part 4</title><link href="http://www.chriskrycho.com/2017/typing-your-ember-part-4.html" rel="alternate"></link><published>2017-07-31T19:30:00-04:00</published><updated>2017-07-31T19:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-31:/2017/typing-your-ember-part-4.html</id><summary type="html">In the last post, I mentioned putting your business logic outside Ember's tools and treating it as plain-old TypeScript. Here's what that might look like.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-3"&gt;previous post&lt;/a&gt; in this series, I noted that one of the most effective current strategies for using TypeScript effectively in an Ember app is to push as much of your logic possible &lt;em&gt;out&lt;/em&gt; of the Ember layer and into plain-old-TypeScript. Unsurprisingly, people had some questions about how to do this, so here’s a brief example.&lt;/p&gt;
&lt;p&gt;As I suggested in that post, we now have a &lt;code&gt;lib&lt;/code&gt; directory in our app, and all new business logic for the app lives there instead of directly on e.g. an &lt;code&gt;Ember.Service&lt;/code&gt; instance. Our current directory structure looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app/
  adapters/
  components/
  config/
  controllers/
  helpers/
  initializers/
  instance-initializers
  lib/    &amp;lt;-- this is the one we care about
    billing/
    utilities/
      numeric.ts
  routes/
  serializers/
  services/
  templates/
  transforms
  app.ts
  router.ts
tests/
package.json
bower.json
// etc.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main thing to notice here is that &lt;code&gt;lib&lt;/code&gt; is just a directory in the app like any other, and its child directories likewise. This means that Ember &lt;abbr title="command line interface"&gt;CLI&lt;/abbr&gt; will resolve it just like normal, too—there’s no need to mess with the resolver or anything.&lt;/p&gt;
&lt;p&gt;Say we had a set of numeric utilities in that &lt;code&gt;numeric.ts&lt;/code&gt; file like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Make text out of numbers, like &amp;quot;1st&amp;quot;, &amp;quot;2nd&amp;quot;, &amp;quot;3rd&amp;quot;, etc.
export const withEnding = (val: number): string =&amp;gt; {
  // boring implementation details elided
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then using it in an Ember component might look like this (where &lt;code&gt;currentNumber&lt;/code&gt; is passed into the component):&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { get, set } from &amp;#39;@ember/object&amp;#39;;
import * as Num from &amp;#39;../lib/utilities/numeric&amp;#39;;

export default Component.extend({
  init() {
    const currentNumber = get(this, &amp;#39;currentNumber&amp;#39;);
    const displayNumber = Num.withEnding(currentNumber);
    set(this, &amp;#39;displayNumber&amp;#39;, displayNumber);
  },
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might wonder why we’d do this instead of using an &lt;code&gt;Ember.Service&lt;/code&gt;. In the above example, I could of course make &lt;code&gt;Num&lt;/code&gt; a service and inject it…&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { getProperties, set } from &amp;#39;@ember/object&amp;#39;;
import { inject } from &amp;#39;@ember/service&amp;#39;;

export default Component.extend({
  num: inject(),

  init() {
    const { currentNumber, num } =
      getProperties(this, &amp;#39;currentNumber&amp;#39;, &amp;#39;num&amp;#39;);

    const displayNumber = num.withEnding(currentNumber);
    set(this, &amp;#39;displayNumber&amp;#39;, displayNumber);
  },
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…but that doesn’t actually &lt;em&gt;gain&lt;/em&gt; me anything—the service here is just a way of exposing a function, after all—and it actually makes everything a bit more verbose. It also decreases the overall analyzability of this for things like tree-shaking: that module dependency is now something that Ember itself has to manage, instead of being statically analyzable at build time. Taking this approach also diminishes the reusability of any numeric helpers I put in there. If we couple them to an &lt;code&gt;Ember.Service&lt;/code&gt;, instead of using an ES6 module, they would stop being things we can easily reuse in non-Ember projects. Instead, by using modules, we leave ourselves the ability to easily extract those numeric helpers, and publish them for either internal or external consumption.&lt;/p&gt;
&lt;p&gt;Along those lines, we actually have a module to support &lt;abbr title="Block-Element-Modifier"&gt;&lt;a href="https://en.bem.info/methodology/quick-start/"&gt;BEM&lt;/a&gt;&lt;/abbr&gt; with Ember Components—and we plan to extract both the basic TypeScript library as well as a &lt;code&gt;BemComponent&lt;/code&gt; Ember-specific wrapper as open-source libraries in the near future. Besides the Ember addon, &lt;em&gt;anyone&lt;/em&gt; will be able to consume and use the underlying TypeScript library, whatever their framework or library of choice. Importantly, that includes us in our other codebases, which include lots of old jQuery and some new React, and might include some Glimmer.js in the future. Any or all of our utilities for these kinds of things become reusable if they’re just TypeScript.&lt;/p&gt;
&lt;p&gt;Pragmatically, it’s also just easier to do and get good help from TypeScript by going this way. It also means that unit-testing requires &lt;em&gt;no&lt;/em&gt; context from Ember whatsoever, which keeps those tests lighter and faster. Even though Ember’s unit tests are already super quick, when you have hundreds or thousands of unit tests, every little bit matters. It also, and probably even more importantly, means there are fewer places where you could mess things up when configuring tests—not that I have any experience messing up test configurations in Ember!&lt;/p&gt;
&lt;p&gt;One important thing to note is that this all works best with Ember—by far—when your &lt;code&gt;lib&lt;/code&gt; modules aren’t managing stateful objects, but rather defining data structures and functions which just transform those structures in some way. This approach is a great fit for us, because we’re increasingly writing a lot of our business and even &lt;abbr title="user interface"&gt;UI&lt;/abbr&gt; logic in terms of &lt;a href="http://www.chriskrycho.com/2016/what-is-functional-programming.html#pure-functions"&gt;pure functions&lt;/a&gt; which transform simple “record” types. That keeps each controller, route, component, or service doing relatively little work: they are responsible for getting and passing around data in the application, and for triggering actions—but they’re not responsible for &lt;em&gt;understanding&lt;/em&gt; or &lt;em&gt;manipulating&lt;/em&gt; that data. Meanwhile the module code doesn’t do &lt;em&gt;any&lt;/em&gt; stateful work; there’s no mutation—just boring, input-to-output functions.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; By contrast, if you’re dealing with stateful objects, you’re apt to end up running into places where you have lifecycle concerns, and that’s where Ember excels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In summary:&lt;/strong&gt; in this model, Ember handles all the lifecycle and view management, and is responsible for sending data in and out of the application. Plain old modules handle defining what the core internal data types are, and for manipulating, transforming, and creating data.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re wondering: we’re not using anything like Redux or Immutable.js yet, but both &lt;a href="https://github.com/ember-redux/ember-redux"&gt;ember-redux&lt;/a&gt; and &lt;a href="https://github.com/rtfeldman/seamless-immutable"&gt;seamless-immutable&lt;/a&gt; would be great fits for the way we’re building the app at this point, and it’s likely at least &lt;a href="https://github.com/ember-redux/ember-redux"&gt;ember-redux&lt;/a&gt; will become part of our stack in the relatively near future.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="typescript"></category><category term="typing-your-ember"></category></entry><entry><title>Typing Your Ember, Part 3</title><link href="http://www.chriskrycho.com/2017/typing-your-ember-part-3.html" rel="alternate"></link><published>2017-07-28T12:00:00-04:00</published><updated>2017-07-28T12:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-28:/2017/typing-your-ember-part-3.html</id><summary type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-1"&gt;first&lt;/a&gt; of this series, I described how to set up a brand new Ember.js app to use TypeScript. In the &lt;a href="/2017/typing-your-ember-part-2"&gt;second&lt;/a&gt; part, walked through adding TypeScript to an existing Ember.js app. In this part, I’m going to talk about using TypeScript effectively in a modern Ember.js app.&lt;/p&gt;
&lt;section id="heavy-lifting-so-so-results" class="level2"&gt;
&lt;h2&gt;Heavy lifting, so-so results&lt;/h2&gt;
&lt;p&gt;Let’s get this out of the way up front: right now, using types in anything which extends &lt;code&gt;Ember.Object&lt;/code&gt; is going to be a lot of work for a relatively low reward. &lt;code&gt;Ember.Object&lt;/code&gt; laid the foundation for the modern JavaScript class system (and thus the TypeScript class system), but it has a huge downside: it’s string keys and referennces all the way down. This kind of thing is just normal Ember code—and note all the string keys:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default Component.extend({
  someProperty: &amp;#39;with a string value&amp;#39;,
  someOther: computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty = get(this, &amp;#39;someProperty&amp;#39;);
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }),
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this comes out to—even with a lot of the very helpful changes made to TypeScript itself in the 2.x series to help support object models like this one—is a lot of work adding types inline, and having to be really, really careful that your types are &lt;em&gt;correct&lt;/em&gt;. If that property you’re &lt;code&gt;Ember.get&lt;/code&gt;-ing can ever be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, you’d better write the type as &lt;code&gt;string | void&lt;/code&gt; instead of just &lt;code&gt;string&lt;/code&gt;. For example: this code is written with the correct types:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default Component.extend({
  someProperty: &amp;#39;with a string value&amp;#39;,  // no type annotation
  someOther: computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty: string = get(this, &amp;#39;property&amp;#39;);
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }),
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note two important things about it, however:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;TypeScript does not (and, with the &lt;em&gt;current&lt;/em&gt; typings for Ember, cannot) figure out the type of &lt;code&gt;someProperty&lt;/code&gt; from this definition; &lt;code&gt;get&lt;/code&gt; currently just hands back &lt;code&gt;any&lt;/code&gt; as the type of these kinds of things. That type annotation is necessary for you to get any mileage out of TypeScript &lt;em&gt;at all&lt;/em&gt; in a computed property like this.&lt;/li&gt;
&lt;li&gt;If, anywhere in your code, you &lt;em&gt;set&lt;/em&gt; the value of &lt;code&gt;someProperty&lt;/code&gt;—including to &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, or to &lt;code&gt;{ some: 'object' }&lt;/code&gt;—this could fail.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, this second point means that TypeScript actually &lt;em&gt;can’t&lt;/em&gt; guarantee this the way we’d like. There’s hope coming for this in the future in several ways—more on that in a moment—but for now, I’ll summarize this by saying TypeScript is really helpful &lt;em&gt;within&lt;/em&gt; a function, once you’ve correctly defined the types you’re using. That means that you have to continue to be &lt;em&gt;very&lt;/em&gt; careful in what you’re doing in the context of any &lt;code&gt;Ember.Object&lt;/code&gt; instance, including all the Ember types which descend from &lt;code&gt;Object&lt;/code&gt;, and therefore also any types &lt;em&gt;you&lt;/em&gt; define which extend those in turn.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="future-niceties" class="level2"&gt;
&lt;h2&gt;Future niceties&lt;/h2&gt;
&lt;p&gt;In the future, we’ll be able to get away from a lot of these difficulties by way of two changes coming down the line: Ember embracing ES6 classes to replace its current custom object system, and embracing decorators as a way of replacing the current approach to computed properties. Let’s take those in turn.&lt;/p&gt;
&lt;section id="class-syntax" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;class&lt;/code&gt; syntax&lt;/h3&gt;
&lt;p&gt;When Ember was birthed in the early 2010s (first as “SproutCore 2” and then “Amber.js” and finally “Ember.js”), the JavaScript world was a &lt;em&gt;remarkably&lt;/em&gt; different place. The current pace of change year to year is nothing short of astounding for any language, but doubly so for one that sat languishing for so long. When Ember came around, something like today’s &lt;code&gt;class&lt;/code&gt; syntax was unimaginable, and so essentially every framework had its own class system of some sort. Over the past few years, with the proposal and standardization of the &lt;code&gt;class&lt;/code&gt; syntax as nice sugar for JavaScript’s prototypal inheritance, the need for a custom object and inheritance model has essentially gone away entirely. However, Ember doesn’t do breaking changes to its API just because; we as a community and the core team in particular have chosen to place a high priority on backwards compatibility. So any adoption of ES6 classes had to work in such a way that we got it &lt;em&gt;without&lt;/em&gt; making everyone rewrite their code from scratch.&lt;/p&gt;
&lt;p&gt;All of this impacts our story with TypeScript because, well, TypeScript for a long time couldn’t even begin to handle this kind of complexity (it’s a lot for a static type system to be able to express, given how &lt;em&gt;very&lt;/em&gt; dynamic the types here can be). As of TS 2.3, it can express &lt;em&gt;most&lt;/em&gt; of this object model, which is great… but it’s forever out of step with the rest of the JS/TS ecosystem, which is not so great. ES6 classes are first-class items in TypeScript and the support for getting types right within them is much, &lt;em&gt;much&lt;/em&gt; stronger than the support for the mixin/extension style object model Ember currently uses. So moving over to ES6 classes will make it much easier for TS to do the work of telling you &lt;em&gt;you’re doing it wrong with that class&lt;/em&gt;—and most importantly, it’ll be able to do that automatically, without needing the incredibly hairy type definition files that we’re still trying to write to get Ember’s current model represented. It Will Just Work. That means less maintenance work and fewer places for bugs to creep in.&lt;/p&gt;
&lt;p&gt;Gladly, we’re getting there! Already today, in the most recent versions of Ember, you can write this, and it will work:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;

export default class MyComponent extends Component {
  theAnswer = 42;
  andTheQuestionIs =
    &amp;quot;What is the meaning of life, the universe, and everything?&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I say “it will work,” I mean you can then turn around and write this in your &lt;code&gt;my-component.hbs&lt;/code&gt; and it’ll be exactly what you would expect from the old &lt;code&gt;Ember.Component.extend()&lt;/code&gt; approach:&lt;/p&gt;
&lt;pre class="hbs"&gt;&lt;code&gt;{{andTheQuestionIs}} {{the Answer}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is one serious limitation of that today: you can’t do that with a class you need to extend &lt;em&gt;further&lt;/em&gt;. So if, for example, you do like we do and customize the application route rinstance and then reuse that in a couple places, you’ll still have to use the old syntax:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Route from &amp;#39;@ember/route&amp;#39;;

export default Route.extend({
  // your customizations...
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But everywhere you consume that, you can use the new declaration:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import ApplicationRoute from &amp;#39;my-app/routes/application&amp;#39;;

export default class JustSomeRoute extends ApplicationRoute {
  model() {
    // etc.
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s more work afoot here, too, to make it so that these restrictions can go away entirely… but those changes will undoubtedly be covered in considerable detail on &lt;a href="http://www.emberjs.com/blog/"&gt;the official Ember blog&lt;/a&gt; when they roll out.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="decorators" class="level3"&gt;
&lt;h3&gt;Decorators&lt;/h3&gt;
&lt;p&gt;Now, that’s all well and good, but it doesn’t necessarily help with this scenario:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;is just a string&amp;#39;;

  someOtherProperty = computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty = get(this, &amp;#39;someProperty&amp;#39;);
    return someProperty + &amp;#39; and now I have appended to it&amp;#39;;
  });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re back in the same spot of having unreliable types there. And again: some really careful work writing type definitions to make sure that &lt;code&gt;computed&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; both play nicely together with the class definition would help somewhat, but… well, it’d be nice if the types could just be determined automatically by TypeScript. (Also, there’s an &lt;a href="https://github.com/Microsoft/TypeScript/issues/16699"&gt;open bug&lt;/a&gt; on the TypeScript repository for trying to deal with &lt;code&gt;computed&lt;/code&gt;; suffice it to say that computed as it currently stands is a sufficiently complicated thing that even with all the incredible type machinery TS 2.1, 2.2, and 2.3 have brought to bear on exactly these kinds of problems… it still can’t actually model &lt;code&gt;computed&lt;/code&gt; correctly.)&lt;/p&gt;
&lt;p&gt;For several years now, Rob Jackson has maintained [a small library] that let you write computed properties with decorators. Up till recently, those were incompatible with TypeScript, because they used to work in the context of object literals rather than classes—and TypeScript never supported that. However, as of about a month ago as I’m writing this, they’ve been updated and they &lt;em&gt;do&lt;/em&gt; work with ES6 classes. So, given the class syntax discussed above, you can now &lt;code&gt;ember install ember-decorators&lt;/code&gt; and then do this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed } from &amp;#39;ember-decorators/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;with a string value&amp;#39;;

  @computed(&amp;#39;someProperty&amp;#39;)
  someOther(someProperty: string) {
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we can provide a type on the parameter to &lt;code&gt;someOther&lt;/code&gt;, which at a minimum makes this enormously cleaner and less repetitive syntactically. More interestingly, however, we &lt;em&gt;should&lt;/em&gt; (though no one has done it just yet, to my knowledge) be able to write a type definition for &lt;code&gt;@computed&lt;/code&gt; such that TypeScript will already know that &lt;code&gt;someProperty&lt;/code&gt; here &lt;em&gt;is&lt;/em&gt; a string, because it’ll have the context of the class in which it’s operating. So that example will be even simpler:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed } from &amp;#39;ember-decorators/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;with a string value&amp;#39;;

  @computed(&amp;#39;someProperty&amp;#39;)
  someOther(someProperty) {
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in that imagined, wonderful future world, if we tried to do something that isn’t a valid string operation—say, we tried &lt;code&gt;someProperty / 3&lt;/code&gt;—TypeScript would complain to us, loudly.&lt;/p&gt;
&lt;p&gt;Although this is still a future plan, rather than a present reality, it’s not &lt;em&gt;that&lt;/em&gt; far off. We just need someone to write that type definition for the decorators, and we’ll be off to the races wherever we’re using the new ES6 class approach instead of the existing &lt;code&gt;Ember.Object&lt;/code&gt; approach. So: &lt;em&gt;soon&lt;/em&gt;. I don’t know how soon, but soon.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="current-ameliorations" class="level2"&gt;
&lt;h2&gt;Current ameliorations&lt;/h2&gt;
&lt;p&gt;In the meantime, of course, many of us are maintaining large codebases. I just checked, and our app (between the app itself and the tests) has around 850 files and 34,000 lines of code. Even as those new abilities land, we’re not going to be converting all of them all at once. And we want to get some real mileage out of TypeScript in the meantime. One of the best ways I’ve found to do this is to take a step back and think about the pieces of the puzzle which Ember is solving for you, and which it &lt;em&gt;isn’t&lt;/em&gt;. That is, Ember is really concerned with managing application state and lifecycle, and with rendering the UI. And it’s &lt;em&gt;fabulous&lt;/em&gt; about those things. What it’s not particularly concerned with (and what it shouldn’t be) is the particulars of how your business logic is implemented. And there’s no particular reason, &lt;em&gt;especially&lt;/em&gt; if most of that business logic is implemented in terms of a bunch of pure, straightforward, input-to-output functions that operate on well-defined data types, for all of your business logic to live in &lt;code&gt;Ember.Object&lt;/code&gt;-descended classes.&lt;/p&gt;
&lt;p&gt;Instead, we have increasingly chosen to write our business logic in bog-standard TypeScript files. These days, our app has a &lt;code&gt;lib&lt;/code&gt; directory in it, with packages like &lt;code&gt;utilities&lt;/code&gt; for commonly used tools… but also like &lt;code&gt;billing&lt;/code&gt;, where we implement &lt;em&gt;all&lt;/em&gt; of our client-side billing business logic. The display logic goes in the &lt;code&gt;Ember.Controller&lt;/code&gt; and &lt;code&gt;Ember.Component&lt;/code&gt; classes, and the routing and state management goes in the &lt;code&gt;Ember.Route&lt;/code&gt; and &lt;code&gt;Ember.Data&lt;/code&gt; pieces as you’d expect. But none of the business logic lives there. That means that we’re entirely free of the aforementioned constraints for the majority of the time dealing with that data. If we do a good job making sure the data is good at the boundaries—route loads, for example, and when we send it back to the server—then we can effectively treat everything else as just boring old (new?) TypeScript.&lt;/p&gt;
&lt;p&gt;So far we’ve only taken that approach with about a quarter of our app, but it’s all the latest pieces of our app, and it has been incredibly effective. Even once we’re able to take advantage of all those shiny new features, we’re going to keep leaning heavily on this approach, because it lets Ember do what Ember is best at, and keeps us from coupling our business logic to the application state management or view rendering details.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that’s the state of things in Ember with TypeScript today. Your best bet for getting real mileage out of TypeScript today is to use the new class syntax support and decorators wherever you can within Ember-specific code, and then to write as much of your business logic outside the Ember system as possible. Gladly, all of that points you right at the future (in the case of syntax) and just good practice (in the case of separating out your business logic). So: not too shabby overall. It’s working well for us, and I hope it does for you as well!&lt;/p&gt;
&lt;p&gt;Next time: how we got here with the &lt;code&gt;ember-cli-typescript&lt;/code&gt; compiler, and where we hope to go from here!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note that here and throughout, I’m using the &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md#addendum-1---table-of-module-names-and-exports-by-global"&gt;RFC #176 Module API&lt;/a&gt;, which you can use today via &lt;a href="https://github.com/ember-cli/babel-plugin-ember-modules-api-polyfill"&gt;this polyfill&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="typescript"></category><category term="typing-your-ember"></category></entry><entry><title>The Book of F♯</title><link href="http://www.chriskrycho.com/2017/the-book-of-f.html" rel="alternate"></link><published>2017-07-21T19:30:00-04:00</published><updated>2017-07-21T19:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-21:/2017/the-book-of-f.html</id><summary type="html">Recommended With Qualifications: This book is just okay, and at this point it’s a bit outdated—but if you're in its fairly narrow target audience, it’s a decent way to get up to speed on F♯.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I keep my book review ratings simple—they’re either &lt;em&gt;required&lt;/em&gt;, &lt;em&gt;recommended&lt;/em&gt;, &lt;em&gt;recommended with qualifications&lt;/em&gt;, or &lt;em&gt;not recommended&lt;/em&gt;. If you want the TL;DR, this is it:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended With Qualifications:&lt;/strong&gt; This book is just okay, and at this point it’s a bit outdated—but if you’re in its fairly narrow target audience, it’s a decent way to get up to speed on F#.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;The Book of F♯: Breaking Free With Managed Functional Programming&lt;/em&gt; is a No Starch Press publication by Dave Fancher, published in 2014. I read it over the course of the last four or so months, just plugging away in my spare cycles. A couple qualifications on the short list of observations that follow:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;I don’t have any experience whatsoever writing production F♯ (though I have &lt;em&gt;read&lt;/em&gt; a fair bit of it). I am interested because it’s a functional programming language on the .NET stack—which isn’t my own personal favorite stack, but &lt;em&gt;is&lt;/em&gt; the stack at Olo. If we’re going to ship functional code on the server, it’ll be in F♯.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I am also not a C♯ developer. As such, I’m &lt;em&gt;explicitly&lt;/em&gt; not the audience of this book. As Fancher put it in the intro:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wrote this book for people like me: experienced .NET developers looking to break into functional programming while retaining the safety net of the tools and libraries they’re already using.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The net of that is that a lot of what frustrated me about the book is just a result of my not being the target audience.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Those qualifications aside, some assorted thoughts on the book:&lt;/p&gt;
&lt;p&gt;First, as the intro and my above qualification suggest: this is &lt;em&gt;really&lt;/em&gt; not interesting or useful as a general introduction to F♯. Throughout, it assumes a very high baseline of C♯ knowledge. In fact, the majority of the discussion of F♯, even in the section of the book which turns away from object oriented programming toward functional programming, focuses on comparing F♯ to C♯. This makes sense for the target audience, but this is &lt;em&gt;not&lt;/em&gt; the book for you if you’re not a C♯ developer.&lt;/p&gt;
&lt;p&gt;That said, if you &lt;em&gt;are&lt;/em&gt; a C♯ developer, this could be a useful resource as you’re spinning up. It also might be a useful book to work through with a group of C♯ developers who want to learn F♯. The comparisons &lt;em&gt;do&lt;/em&gt; generally work in F♯’s favor, even when doing exactly what you would be doing in the C♯, which makes it an easier “sell” in that regard.&lt;/p&gt;
&lt;p&gt;Along the same lines, the book is structured as a &lt;em&gt;very gradual&lt;/em&gt; introduction to functional programming ideas. Roughly the first half of the book emphasizes F♯’s object-oriented programming abilities, and only in the second half does Fancher turn to a functional style. Again, this is probably the right move given the audience, but it means the book spends a &lt;em&gt;lot&lt;/em&gt; of time on kinds of F♯ you won’t actually be writing very often once you’re going. Idiomatic F♯ isn’t object-oriented. But as a way of helping someone make the transition, it’s not a bad plan: object-oriented F♯ is briefer and nicer in many ways than the exact same code in C♯. It meant that the first half of the book was completely uninteresting to &lt;em&gt;me&lt;/em&gt;, though: I don’t want to write a line of object-oriented F♯.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of this had a pretty serious downside even for existing C♯ developers, though: the book often ends up seeming like it’s sort of apologizing for or defending F♯ against an expected audience of people asking “What’s wrong with C♯?” And even though there’s a real sense in which that’s true—that &lt;em&gt;is&lt;/em&gt; what a lot of the audience is asking, no doubt—it became quite annoying rhetorically.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; It’s also unnecessary: if someone is picking up a book on F♯, you can assume that they’re alredy at least a little interested in the language and what it might offer! Along those lines, I much prefer the tack taken in what I’ve seen of Scott Wlaschin’s upcoming &lt;em&gt;Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F♯&lt;/em&gt; (The Pragmatic Bookshelf, expected in fall 2017)—which shows not how to do the same things as in C♯, just more briefly; but how to solve the same problems much more effectively.&lt;/p&gt;
&lt;p&gt;Those problems aside, the book was… &lt;em&gt;fine&lt;/em&gt;. I wouldn’t call it scintillating reading, but this kind of technical writing, especially at this length, is really hard work. Credit to Fancher for managing an introduction to an entire programming language in a relatively approachable way, and credit to him and his editors for making sure it remains lucid throughout. Still: I’d love to see the bar for programming books be higher. We need more books which are genuinely engaging in the world of programming language texts. These things are &lt;em&gt;interesting&lt;/em&gt;; we don’t have to make them dry and dull! (And if you want a pretty good example of that: everything I’ve read of Edwin Brady’s &lt;em&gt;Type-Driven Development with Idris&lt;/em&gt; hits the mark.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A few other observations about the language itself from reading the book.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; reading this highlighted a lot of strange things about F♯, all of which ultimately come down to the ways F♯’s development has been driven by concerns for interoperability with C♯. Worse, there are a lot of places where the influence of C♯ casts this shadow &lt;em&gt;entirely unnecessarily&lt;/em&gt;. One particular expression of this which drove me crazy: F♯ far too often uses exceptions instead of &lt;code&gt;Option&lt;/code&gt;s. It’s &lt;a href="http://www.chriskrycho.com/2017/better-off-using-exceptions.html"&gt;one thing&lt;/a&gt; to make sure the language gracefully handle exceptions: you &lt;em&gt;will&lt;/em&gt; have them coming from outside contexts. It is another entirely to design core parts of the language to throw exceptions where it doesn’t have to.&lt;/p&gt;
&lt;p&gt;Perhaps the most prominent example is the &lt;code&gt;List.head&lt;/code&gt; function. Its type signature is &lt;code&gt;'T list -&amp;gt; 'T&lt;/code&gt;, where I would expect it to be &lt;code&gt;'T list -&amp;gt; 'T option&lt;/code&gt;. If you call &lt;code&gt;List.head&lt;/code&gt; on an empty list, you get an exception. It would make far more sense for it to return an &lt;code&gt;Option&lt;/code&gt; and just give you &lt;code&gt;None&lt;/code&gt; if there’s no item. Then you’re not worried about &lt;code&gt;try&lt;/code&gt; expressions and the type system will actually help you! This is one of the most valuable parts of having a type system like F♯’s! I really don’t understand a lot of these decisions, not least since this isn’t for interop with C♯ collections—these are for native F♯ collections.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second,&lt;/strong&gt; the use of things like computation expressions instead of type machinery has an interesting effect: it makes it simpler to read when you first encounter it, but harder to compose, build, etc.—and it’s more syntax to remember. Computation expressions just end up being a way to do “monadic” transformations, from what I can tell. But as I noted often in my discussion of &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;Rust and Swift&lt;/a&gt;, I profoundly prefer approaches that build on the same existing machinery—even in the surface syntax of the language—rather than constantly building new machinery. It makes it easier to deeply internalize new concepts and to &lt;em&gt;understand&lt;/em&gt; the language (rather than just being able to &lt;em&gt;use&lt;/em&gt;) the language. It also seems (from my admittedly limited vantage point) that computation expressions are as a result much less &lt;em&gt;composable&lt;/em&gt; than actual type machinery of the sort available in other languages (Haskell, Idris, etc.).&lt;/p&gt;
&lt;p&gt;Now, the tradeoff there is that adding those adds a lot of complexity both to the compiler and to the libraries people are apt to write; there’s a reason Elm has totally eschewed that kind of type machinery to date. But Elm has also refused to just add syntax around ideas like this the way F♯ has here, and it makes for a much cleaner and frankly &lt;em&gt;nicer&lt;/em&gt; language.&lt;/p&gt;
&lt;p&gt;And that brings me to my &lt;strong&gt;third and final&lt;/strong&gt; point: I’m really glad F♯ exists, and that it’s providing a pretty good experience of functional programming on the &lt;abbr title='Common Language Runtime'&gt;CLR&lt;/abbr&gt;. But—and I fully grant that a fair bit of this kind of thing is almost entirely subjective—it doesn’t &lt;em&gt;feel&lt;/em&gt; good in the same way that Elm or Rust do. There is something very difficult to nail down here, but I get a vsiceral experience of joy when writing some languages and not others. Again: that will vary person to person, but I think there are things that make it more or less likely. Things that make it more likely, at least for me, include everything from self-consistency and predictability at the semantic level to the way the code lays out and flows at the visual/syntactical level.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Sadly, F♯ just doesn’t hit the right notes&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; for me. I’ll be much, much happier to write it than C♯ at work… but I really just want Elm and Rust and Idris to come save the day.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I am of course writing a &lt;em&gt;lot&lt;/em&gt; of functional code in our JavaScript; JavaScript is a surprisingly good language for it.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It’s not that OOP is &lt;em&gt;bad&lt;/em&gt;, exactly; it’s just that what passes for OOP in languages like C♯, Java, and yes, F♯, is relatively low utility to me—and I think OOP ideas are much more interesting and useful when applied at a systems level, e.g. in an Actor system, than at the level of individual “actors” within the system. Compare Erlang/Elixir: functional components, organized in what is arguably an &lt;em&gt;incredibly&lt;/em&gt; object-oriented way.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;The temptation extends beyond this book; O’Reilly’s &lt;em&gt;Programming Rust&lt;/em&gt; (Jim Blandy and Jason Orendorff) reads as the same kind of defensive introduction to Rust for C++ developers.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;And yes, nerds, syntax &lt;em&gt;does&lt;/em&gt; matter. Try reading this sentence, nicely punctuated, and with spaces and capitalization. Now: tryreadingthissentencewithoutpunctuationorspacesorcapitalization. There may be a point after which it becomes less important, and a range of things which are equally good in an absolute sense, but it matters.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Pun not intended, but inevitable given the language names here.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="book-reviews"></category><category term="programming languages"></category><category term="fsharp"></category><category term="writing"></category><category term="pedagogy"></category></entry><entry><title>Farewell, Dropbox</title><link href="http://www.chriskrycho.com/2017/farewell-dropbox.html" rel="alternate"></link><published>2017-07-06T21:00:00-04:00</published><updated>2017-07-06T21:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-06:/2017/farewell-dropbox.html</id><summary type="html">&lt;p&gt;Over the last few years, I’ve grown increasingly annoyed with Dropbox. There have been a number of fairly high-profile misbehaviors on their part—most notably, &lt;a href="http://applehelpwriter.com/2016/07/28/revealing-dropboxs-dirty-little-security-hack/"&gt;this one&lt;/a&gt;—and then this past week, they started sending me notifications advertising Dropbox for Business.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/bad-dropbox.png" alt="Notification ads are the worst." /&gt;&lt;figcaption&gt;Notification ads are the worst.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, as I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the last few years, I’ve grown increasingly annoyed with Dropbox. There have been a number of fairly high-profile misbehaviors on their part—most notably, &lt;a href="http://applehelpwriter.com/2016/07/28/revealing-dropboxs-dirty-little-security-hack/"&gt;this one&lt;/a&gt;—and then this past week, they started sending me notifications advertising Dropbox for Business.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/bad-dropbox.png" alt="Notification ads are the worst." /&gt;&lt;figcaption&gt;Notification ads are the worst.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, as I was with Google a few years ago &lt;a href="http://www.chriskrycho.com/2014/goodbye-chrome.html" title="Goodbye, Chrome: You&amp;#39;re just too creepy now."&gt;when they pushed me over the edge&lt;/a&gt;—&lt;em&gt;also&lt;/em&gt; with notifications!—I’m out.&lt;/p&gt;
&lt;p&gt;I don’t mind Dropbox’s wanting to have a sustainable business. To the contrary: as I often note, I’m quite willing to pay for software I use, and I currently use a number of paid services where free alternatives exist because I’d rather do that than pay for ads.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I &lt;em&gt;do&lt;/em&gt; mind when a company—&lt;em&gt;any&lt;/em&gt; company—decides that building their business means mistreating their users and customers. And harassing me with notifications about a variant of their product I don’t care about certainly crosses that line. Combine that with the misbehavior &lt;em&gt;and&lt;/em&gt; the fact that Dropbox has a tendency to hammer my system for no apparent reason, and, well, I’m out.&lt;/p&gt;
&lt;section id="transition-plans" class="level2"&gt;
&lt;h2&gt;Transition Plans&lt;/h2&gt;
&lt;section id="file-syncing" class="level3"&gt;
&lt;h3&gt;File syncing&lt;/h3&gt;
&lt;p&gt;For basic storage and access to files across my devices, the shift will be pretty easy: I already have paid iCloud storage for backing up Photos (it’s far easier and comparably priced to all the other options, so that’s what we use). So everything I’ve &lt;em&gt;been&lt;/em&gt; doing with Dropbox I’ll be doing with iCloud Drive instead. And I have &lt;em&gt;way&lt;/em&gt; more overhead there with a 250GB plan that I do in my current 9GB of Dropbox storage.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="file-sharing" class="level3"&gt;
&lt;h3&gt;File sharing&lt;/h3&gt;
&lt;p&gt;For things where I need to share files with other people, I’ll be using &lt;a href="https://droplr.com"&gt;Droplr&lt;/a&gt;. If or when I find a need to share something for a longer period of time, more often, or with more people, I’ll think about the Pro plan, but for right now the free plan will &lt;em&gt;more&lt;/em&gt; than suffice for, say, sending an audio file to &lt;a href="http://independentclauses.com"&gt;Stephen&lt;/a&gt; for editing &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt; episodes. (Also, iOS 11’s Files app &lt;a href="https://www.imore.com/files-app" title="iOS 11&amp;#39;s Files app FAQ"&gt;will support&lt;/a&gt; this sharing workflow natively.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-writing-setup" class="level3"&gt;
&lt;h3&gt;My writing setup&lt;/h3&gt;
&lt;p&gt;Probably the &lt;em&gt;most&lt;/em&gt; vexing (or at least: vexing-seeming) change here will be to my writing workflow. For a long time, I’ve made an alias pointing from a folder in Dropbox on my main machine into the clone of the &lt;a href="https://github.com/chriskrycho/chriskrycho.com"&gt;Git repository&lt;/a&gt; on that machine where I manage my website.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; That has meant that I can edit the source version of a given post anywhere at any time, with any editor that has Dropbox integration. That was a winning combo for a long time, and it’s one thing I actually &lt;em&gt;can’t&lt;/em&gt; do with iCloud Drive. (I tried, and it sort of works, for a little while; but iCloud Drive doesn’t seem to expect this scenario. In its defense, it’s a weird setup.) I realized in thinking it through this evening, though: it doesn’t actually matter to me with the ways my workflow has shifted—and, perhaps just as importantly, with the way that the iOS ecosystem has shifted.&lt;/p&gt;
&lt;p&gt;For one thing, there are a &lt;em&gt;lot&lt;/em&gt; of options for directly editing files from Git repositories on iOS now. I don’t need to have it in Dropbox to be able to open it in any one of several &lt;em&gt;great&lt;/em&gt; iOS writing environments, whether to make a quick edit or to create a post from scratch. Both &lt;a href="https://workingcopyapp.com/"&gt;Working Copy&lt;/a&gt; and &lt;a href="https://git2go.com"&gt;Git2Go&lt;/a&gt; work &lt;em&gt;very&lt;/em&gt; well. But for another thing, I currently can’t &lt;em&gt;generate&lt;/em&gt; the site without logging into my home machine anyway.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; So if I need to make a tweak, well… &lt;a href="http://www.blink.sh"&gt;Blink.sh&lt;/a&gt; or &lt;a href="https://www.panic.com/prompt/"&gt;Prompt&lt;/a&gt; will let me log in remotely and do what I need to. And a little bit of Vim or Emacs will let me make any quick edits that way if I really feel I must.&lt;/p&gt;
&lt;p&gt;And one side effect of realizing &lt;em&gt;that&lt;/em&gt; is that I can easily enough just copy a file from iCloud storage to my site’s working directory after writing it in a writing folder in iCloud if I so desire. Sure, that’s a &lt;em&gt;little&lt;/em&gt; finicky, but for the most part I won’t really need to mess with it: I can just &lt;code&gt;git push&lt;/code&gt; from my iPad, &lt;code&gt;git pull&lt;/code&gt; on my iMac and be ready to do whatever I need.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-apps" class="level3"&gt;
&lt;h3&gt;Other apps&lt;/h3&gt;
&lt;p&gt;The last piece of the puzzle is the other “apps” that have made a home in my Dropbox. The reality, though, is that almost none of those actually matter to me. I don’t even look at the majority of that data, and other pieces of it —backups of GPS and heart-rate data from workouts, or copies of all my tweets from when I wanted to maintain a microblog on this site, for example—are really just needless at this point, as I have all of that data stored in &lt;em&gt;several&lt;/em&gt; cloud platforms (in the case of workout data) and/or don’t care about being able to retrieve it (in the case of tweets). I can happily just shut those things down and call it a day.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="in-conclusion" class="level2"&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;So that’s it: goodbye Dropbox; hello other tools. (This post written from an iPad, and stored in iCloud Drive before publishing.) It’s been a long, and mostly just-fine ride, but I’m getting off here.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Full disclosure here: I am &lt;em&gt;not&lt;/em&gt; a Dropbox paying customer—though that is the fault of their perhaps overly aggressive early customer acquisition strategy. I have never &lt;em&gt;needed&lt;/em&gt; to pay for Dropbox, even though I have many gigabytes stored in it, because I earned so much free storage for inviting other users early on.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/19305033/why-is-putting-git-repositories-inside-of-a-dropbox-folder-not-recommended"&gt;You don’t want a Git repo sitting inside your Dropbox folder&lt;/a&gt;, but a symlink like this works just fine: you don’t end up with the conflicts that can happen with a full repo in Dropbox.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I’m hoping to change that a bit in two ways in the future, by having the generator live on a not-my-home-machine server and by making Lighting much easier to just drop in and use than my finicky Pelican setup currently is. But that depends on actually making Lightning, you know, &lt;em&gt;work&lt;/em&gt;.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="workflow"></category></entry><entry><title>Set Up Mosh on macOS</title><link href="http://www.chriskrycho.com/2017/set-up-mosh-on-macos.html" rel="alternate"></link><published>2017-06-29T08:10:00-04:00</published><updated>2017-06-29T08:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-06-29:/2017/set-up-mosh-on-macos.html</id><summary type="html">&lt;p&gt;Last night I bumped back into &lt;a href="https://mosh.org"&gt;Mosh&lt;/a&gt; (by way of &lt;a href="https://medium.com/@searls/giving-the-ipad-a-full-time-job-3ae2440e1810"&gt;this post&lt;/a&gt;), and decided to give it a whirl – I had seen it before, and in fact had even installed it, but had never gotten around to giving it a try.&lt;/p&gt;
&lt;p&gt;If you’re not familiar with Mosh, it’s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last night I bumped back into &lt;a href="https://mosh.org"&gt;Mosh&lt;/a&gt; (by way of &lt;a href="https://medium.com/@searls/giving-the-ipad-a-full-time-job-3ae2440e1810"&gt;this post&lt;/a&gt;), and decided to give it a whirl – I had seen it before, and in fact had even installed it, but had never gotten around to giving it a try.&lt;/p&gt;
&lt;p&gt;If you’re not familiar with Mosh, it’s like SSH: a remote (terminal) connection to another machine. Unlike SSH, though, a single session can survive disconnects: it sets up a small server on the host machine and will reestablish the connection if it drops. It also responds immediately when you’re typing, even if there’s serious lag to the other server – it just gives you a nice visual signal (underlining) to let you know the other side hasn’t received what you’ve typed. This seems pretty nice, so I thought I’d set it up on my iMac so I could hit it from my iPad.&lt;/p&gt;
&lt;p&gt;This isn’t complicated, but it also isn’t well-documented after the first step!&lt;/p&gt;
&lt;section id="steps" class="level2"&gt;
&lt;h2&gt;Steps&lt;/h2&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Install mosh.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;via the &lt;a href="https://mosh.org/#getting"&gt;binary&lt;/a&gt; on their site&lt;/li&gt;
&lt;li&gt;by running &lt;code&gt;brew install mosh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the install location for the server from your Terminal:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ which mosh-server&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure the firewall to allow the mosh server to install connections.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Open the &lt;strong&gt;Security and Privacy&lt;/strong&gt; pane of the &lt;strong&gt;System Preferences&lt;/strong&gt; app.&lt;/li&gt;
&lt;li&gt;Choose the &lt;strong&gt;Firewall&lt;/strong&gt; tab. Unlock it to make changes.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Firewall Options&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;On the pane that opens, click the &lt;strong&gt;+&lt;/strong&gt; button to add a new rule.&lt;/li&gt;
&lt;li&gt;Navigate to the location you got in step 2 above. (One easy way to do this: hit &lt;kbd&gt;⌘ Cmd&lt;/kbd&gt;&lt;kbd&gt;⇧ Shift&lt;/kbd&gt;&lt;kbd&gt;G&lt;/kbd&gt;, and paste in the output from the &lt;code&gt;which&lt;/code&gt; command.) Click &lt;strong&gt;Add&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Find “mosh-server” in the list, and set it to &lt;strong&gt;Allow incoming connections&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Hit &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Persuade macOS to reload its firewall rules. (This &lt;em&gt;may&lt;/em&gt; not be necessary, but it was for me.) You can do one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;restart your machine&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reload the normal rules manually:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ sudo pfctl -f /etc/pf.conf&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You may also need to open these ports on your router firewall. You should consider carefully whether you want a bunch of open ports sitting there or whether you want to just use a specific port and then always target that specific port by running mosh with the &lt;code&gt;-p&lt;/code&gt; option:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ mosh -p 60000 some-user@some-host.example.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you can connect locally but not remotely, this is probably what you need!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should be all you need!&lt;/p&gt;
&lt;/section&gt;
</content><category term="macos"></category><category term="sysadmin"></category></entry><entry><title>Write! app review</title><link href="http://www.chriskrycho.com/2017/write-app-review.html" rel="alternate"></link><published>2017-06-26T21:15:00-04:00</published><updated>2017-06-26T21:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-06-26:/2017/write-app-review.html</id><summary type="html">Write! app is a distraction-free text editor—solid enough, but entering a very crowded field, at least on macOS.</summary><content type="html">&lt;p&gt;As I’ve noted in the past, I’m always &lt;a href="http://www.chriskrycho.com/2016/ulysses-byword-and-just-right.html"&gt;on the lookout&lt;/a&gt; for top-notch writing environments. I was recently contacted by the team behind &lt;a href="https://writeapp.co"&gt;Write!&lt;/a&gt; and asked if I would take a look at and review their app, and I was happy to obliged. I tested the app out fairly thoroughly by doing what I normally do with my writing apps: putting together a blog post or the like. I’ve written this review from start to finish in it, across my two Mac machines. I promised the authors an unbiased review, so here we go!&lt;/p&gt;
&lt;section id="overview" class="level2"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Write!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; describes itself as a distraction-free text editor. It enters the market in an interesting way: the Mac offerings here are numerous, varied, and excellent. Offerings on Windows are fewer and further between, and in my experience of much lower quality. Distraction-free text editors outside the world of &lt;em&gt;programming&lt;/em&gt; text editors barely exist at all on Linux, as far as I can tell.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Write! is cross-platform, targeting all three of these. And that, as we’ll see, &lt;em&gt;is&lt;/em&gt; the story of this particular app—for good and for ill.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-good" class="level2"&gt;
&lt;h2&gt;The Good&lt;/h2&gt;
&lt;p&gt;First, the good: the app seems to perform relatively well. Text entry, even on a fairly large document, is smooth and quick. (I imported the text of &lt;a href="http://www.chriskrycho.com/2016/realism-and-antirealism.html"&gt;this ~7200-word paper&lt;/a&gt; to test it and it didn’t stutter a bit.) Especially given the time I’m going to spend on the not-so-good below, I want to take a moment to applaud the developers for getting that right. It’s one of the most important aspects of an app like this, and any number of apps I’ve used just fall down on large documents. Everything I’ve seen here makes it seem like Write! would handle much larger documents even than that paper with aplomb.&lt;/p&gt;
&lt;p&gt;The app’s main writing area looks fairly nice, and the distraction-free/full-screen mode gets out of the way readily enough. The cloud sync that comes with the app is quick and seems reliable. I’ve worked on this document across the two Macs I use, with no sync issues whatsoever. The writing area also has a (toggleable) overview of the document on the right, &lt;em&gt;a la&lt;/em&gt; Sublime Text. To the left is a toggleable outline view, which lets you drill down into the structure of your document if you have multiple heading levels. And within the writing area itself, you can expand and collapse sections demarcated by headings.&lt;/p&gt;
&lt;p&gt;In general, the experience of writing in the app is &lt;em&gt;nice&lt;/em&gt;. Not &lt;em&gt;amazing&lt;/em&gt;, but genuinely nice.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-just-okay" class="level2"&gt;
&lt;h2&gt;The Just Okay&lt;/h2&gt;
&lt;p&gt;There’s a bit of a delay before any open tabs are hidden in that fullscreen mode, but it’s otherwise fairly typical of most “distraction-free” writing environments in that regard. The colors chosen for the light and dark writing themes are fine, but not great. Much the same is true of the typography: it’s relatively pleasant, if bland. There are a number of built-in themes, but no apparent way to customize them to be more to your liking.&lt;/p&gt;
&lt;p&gt;The app also features built-in autocomplete—but I’m not really sure who the target audience is for auto-complete in this kind of environment. It’s not &lt;em&gt;bad&lt;/em&gt;, per se, to have it, but it doesn’t add a lot of value for &lt;em&gt;writing&lt;/em&gt; (as opposed to, say, programming), and I turned it off fairly quickly in the process of writing this review.&lt;/p&gt;
&lt;section id="publishing" class="level3"&gt;
&lt;h3&gt;Publishing&lt;/h3&gt;
&lt;p&gt;The app includes some “publishing” tools. Currently it supports writing to either Write’s own site, or to Medium. Medium publishing is nice—it’s certainly the hip tool &lt;em&gt;du jour&lt;/em&gt;—but you’re out of luck if you use WordPress, much less something like Ghost.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Publishing to Write! itself seems to be mostly a way of letting people see in-progress drafts. The links aren’t particularly friendly, and while they’d be easy enough to share to Facebook or Twitter or the like, they have serious downsides over any of the free blogging options out there for anything other than getting some early feedback—there’s no organizational or navigational structure available, and for that matter nothing that even ties it to your name! At a minimum, Write! should clarify what this is for.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="business-model" class="level3"&gt;
&lt;h3&gt;Business model&lt;/h3&gt;
&lt;p&gt;The business model here is a curious mix: they’re selling the app at $19.95 (USD), with a year included of their custom sync solution. That sync solution is one of the things they advertise most heavily, and while I can attest that it works well, adding another, bespoke sync solution to my life is &lt;em&gt;not&lt;/em&gt; on my list of things I’d like to do. It’s particularly an issue from where I stand because it doesn’t actually get me any benefits over a syncing solution using Dropbox or iCloud, both of which I’ve used extensively with other writing apps in the last few years, with no issues.&lt;/p&gt;
&lt;p&gt;Add onto that the fact that the sync and future updates become an annual purchase—&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting one year after purchase, Cloud access and maintenance updates are $4.95/yr.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;—and any of the myriad other editors look much better: they all just use a sync engine I &lt;em&gt;already&lt;/em&gt; use and like, and they &lt;em&gt;don’t&lt;/em&gt; have annual fees for a service I don’t care about.&lt;/p&gt;
&lt;p&gt;That goes double when you consider that I’ll often do different phases of drafting a given post in different editors, depending on the kind of content and what I’m doing with it. For example, I often use &lt;a href="https://caret.io"&gt;Caret&lt;/a&gt; for drafting technical blog posts, but at times I’ll switch over to using &lt;a href="https://www.sublimetext.com"&gt;Sublime Text&lt;/a&gt;, &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt;, or &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt; for working on the details of a given code snippet. If I’m using Write’s custom sync solution, my documents don’t exist in a normal folder on my machine, so they aren’t available for that kind of easy switching and editing. Double that &lt;em&gt;again&lt;/em&gt; because it also means I don’t have access to the content on my iPad—where I often use &lt;a href="https://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt;, &lt;a href="http://omz-software.com/editorial/"&gt;Editorial&lt;/a&gt;, &lt;a href="http://1writerapp.com"&gt;1Writer&lt;/a&gt;, or &lt;a href="https://bywordapp.com"&gt;Byword&lt;/a&gt; to work on posts when I’m away from my Mac. There are no upsides for &lt;em&gt;me&lt;/em&gt;, as far as I can tell, to using their sync system.&lt;/p&gt;
&lt;p&gt;I put this in the “just okay” section, however, because I can imagine that it &lt;em&gt;might&lt;/em&gt; be nice for someone who’s not already invested in an existing sync solution. Whether or not there are enough of those people out there to support the business model—I suspect not—is a separate question to whether it’s good or bad for users in a direct sense. Again: the custom sync system works well; I just don’t know whether it’s necessary (or worth the development time that had to be spent on it).&lt;/p&gt;
&lt;p&gt;As for the business model on the whole: I’m not at all opposed to paying for good apps on an ongoing basis. To the contrary, I actually &lt;em&gt;embrace&lt;/em&gt; it: as a software developer myself, I recognize that there are few (if any) other sustainable business models. However, the application needs to be pretty amazing to get me to buy it in the first place, still less to justify a recurring purchase.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-bad" class="level2"&gt;
&lt;h2&gt;The Bad&lt;/h2&gt;
&lt;p&gt;Sad to say, from my perspective—to be clear, as a long-time Mac user with &lt;a href="http://www.chriskrycho.com/2016/ulysses-byword-and-just-right.html"&gt;very high standards for my writing tools&lt;/a&gt;—this isn’t an amazing app. In fact, &lt;em&gt;on macOS&lt;/em&gt;, it’s actually a bad app in many ways.&lt;/p&gt;
&lt;section id="non-native-ui" class="level3"&gt;
&lt;h3&gt;Non-native UI&lt;/h3&gt;
&lt;p&gt;First, Write’s UI looks and behaves like a Windows app. It’s built on &lt;a href="https://www.qt.io"&gt;Qt&lt;/a&gt;, which does support native(-looking) widgets, but the developers chose not to use them – I assume in the interest of speed of development. If you’re on Windows, that’s fine. But this app will never look remotely native on macOS,&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; and given the plethora of other really high quality writing apps on macOS—some of them with their own publication options!—there’s just no reason why you would pick this over one of those at that most basic level.&lt;/p&gt;
&lt;p&gt;Two examples should illustrate how painfully non-native this app is visually. First, note the window action buttons in the upper right:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/write-app-review/draft.png" alt="not native windows" /&gt;&lt;figcaption&gt;not native windows&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These are Windows window action buttons; the normal Mac action buttons simply don’t exist! Similarly, there’s a slide-out menu that appears when you tap the hamburger in the top left:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/write-app-review/slide-out-menu.png" alt="slide out menu" /&gt;&lt;figcaption&gt;slide out menu&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is a reasonably nice, though not totally native-feeling, way of tackling the menu problem… on Windows. On Mac, it’s just duplicating the functionality of the normal menubar. And when I say duplicating, I mean it exactly: those menus are the same as the ones the app puts in the real menubar; there’s no reason for them to appear within the body of the app, other than that the app isn’t designed to work without them.&lt;/p&gt;
&lt;p&gt;Right-click behavior is strange: instead of the normal Mac (or even Windows!) menu, they’ve supplied their own, and it’s actually its own little modal window, not a menu at all:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/write-app-review/right-click-modal.png" title="right click modal" alt="right-click modal window" /&gt;&lt;figcaption&gt;right-click modal window&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I definitely see the utility of the little modal, but most other apps I’ve seen with similar approaches do it on highlighting some text. That way they can leave the normal right-click menu in place, which helps keep the user comfortable in their normal workflows. That’s going to be particularly annoying if you happen to make heavy use of macOS’s services menu—I don’t use it often, but when I want it, I &lt;em&gt;want&lt;/em&gt; it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="keyboard-shortcuts" class="level3"&gt;
&lt;h3&gt;Keyboard shortcuts&lt;/h3&gt;
&lt;p&gt;Similarly, a number of standard keyboard shortcuts don’t work the same way, or don’t work at all, in Write! as they do in native Mac apps. Navigation controls aren’t quite right: &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;→&lt;/kbd&gt; jumps to the start of the next word instead of the end of the current word; &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;←&lt;/kbd&gt; doesn’t skip over punctuation; both stop on e.g. apostrophes in Write! (they skip over them natively). Other common shortcuts are bound to the wrong things: &lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;-&lt;/kbd&gt;, for example, increases heading size instead of inserting an em dash. &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;Delete&lt;/kbd&gt; doesn’t do anything; neither do &lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;Space&lt;/kbd&gt;, (normally used for bringing up the special-character selector) or my beloved &lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt; (“kill to end of line”) or &lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;T&lt;/kbd&gt; (&amp;quot;transpose characters around cursor) combos.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; I imagine the list is longer; that’s just what I noticed in the course of writing this review!&lt;/p&gt;
&lt;p&gt;Most egregiously, Write! steals the keyboard shortcut &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;`&lt;/kbd&gt;, normally used to switch between windows on macOS, to focus itself. Failing to implement and indeed overriding text input commands is one (very bad) thing; this is another kind of failure entirely. Apps should &lt;em&gt;never&lt;/em&gt; override core system behavior with their shortcuts! The fact that you can customize them doesn’t make this better; and the one time I &lt;em&gt;tried&lt;/em&gt; to customize it (to turn off stealing the switch-window shortcut) it ended up overriding the &lt;kbd&gt;A&lt;/kbd&gt; key’s behavior to create new documents instead of to, well, enter the letter “a”.&lt;/p&gt;
&lt;p&gt;A lot of apps get some of those more obscure ones wrong, sadly, but proper use of &lt;a href="https://developer.apple.com/documentation/coretext"&gt;Core Text&lt;/a&gt; is a &lt;em&gt;must&lt;/em&gt; for a native app in my book—and missing those super common ones is a big no-no. I simply won’t use an app long term that doesn’t do that, because I find the mismatch between the rest of the OS (and my muscle memory!) and what the apps do too frustrating.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="markdown-support" class="level3"&gt;
&lt;h3&gt;Markdown support&lt;/h3&gt;
&lt;p&gt;The app claims Markdown support, and it &lt;em&gt;sort of&lt;/em&gt; has it. But the goal is clearly to have a rich-text editing experience which can translate Markdown into whatever the underlying format is on the fly, and then export it back out when desired—&lt;em&gt;not&lt;/em&gt; to be a Markdown writing application. You can see direct evidence that this is their approach by writing in Markdown and e.g. creating italics with * characters. When you view the exported Markdown, it’ll be using _ characters instead. Other little things flag it up equally: Markdown items don’t get converted to their rich text implementations unless you add a space or some punctuation after typing them; if you go back and wrap words in link syntax, for example, or try to make it bold with a pair of *s, it won’t be converted at all. The export still works fine in that case,&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; but it certainly doesn’t come off well for the writing experience in the app, inconsistent as it is.&lt;/p&gt;
&lt;p&gt;It also doesn’t support Markdown itself fully or properly. Inline backtick characters (`) don’t generate inline code snippets. Instead, they generate standalone code blocks, as if using the usual four-space-indent or triple-backtick markers for code blocks in the actual Markdown spec and as supported in other apps. Nor can I find a way to insert hrules/divisions with triple-stars or triple-dashes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-nits" class="level3"&gt;
&lt;h3&gt;Other nits&lt;/h3&gt;
&lt;p&gt;There are a few other small but significant problems as well. One is related to the business model: you actually have to sign in to start using the app. Granted all my positive comments about subscriptions above, it’s still the case that needing to sign in to a &lt;em&gt;writing&lt;/em&gt; app (especially just to use the app for local documents!) is a non-starter for me. As with so many of the other negatives I noted, this is a compromise that I don’t need to make, because the other alternatives don’t force it on me.&lt;/p&gt;
&lt;p&gt;There are also a bunch of basically rough edges. Pasting with &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;V&lt;/kbd&gt; does indeed paste the text… and scrolls you to the top of the current document every time. A number of times, the selection of a given option failed: it simply wouldn’t stick. Other times, especially when selecting the default text theme, cursor selection seemed broken. I’m not sure whether those are problems with the Qt engine, the implementation, or some of both, but again: not a good look, especially in a crowded market. Right-clicking, beyond the problems mentioned above, also just wouldn’t work consistently. Sometimes I would right-click and the menu would close immediately so you couldn’t take any actions in it at all—probably a result of using a modal instead of a normal menu there. Regardless of the reason, it was frustrating.&lt;/p&gt;
&lt;p&gt;Last but not least, the app is unsigned, which means that it literally won’t open by default on macOS as of a few versions back. Users can certainly get around that, but they shouldn’t &lt;em&gt;have&lt;/em&gt; to: there’s no excuse for not signing a paid app for macOS (or Windows! But I’m not sure what its status is there) in 2017.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is an interesting approach for an editor. Trying to build a truly cross-platform app, and especially one that isn’t using web technologies like &lt;a href="https://electron.atom.io"&gt;Electron&lt;/a&gt;, is an admirable goal—in fact, it’s one that I may dare to tackle myself at some point. Cross-platform UI is also a very hard problem, and unfortunately this app makes clear just how difficult it is by falling down so often on really important details. In reality, the only way to do it well is to write all your core business logic in a way you can share and then supply actually-native user interfaces. Anything else will inevitably feel out of place at best.&lt;/p&gt;
&lt;p&gt;As a result, Write! is deeply compromised as a Mac app, to the extent that I simply cannot recommend it for Mac users. If you’re on a Mac, you should look instead at &lt;a href="https://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt;, &lt;a href="https://bywordapp.com"&gt;Byword&lt;/a&gt;, and &lt;a href="https://caret.io"&gt;Caret&lt;/a&gt;. All of them feel much more native, and though they have different strengths and weaknesses, they’re all native (or mostly-very-effectively native-acting, in Caret’s case) apps. That doesn’t mean Write! is &lt;em&gt;bad&lt;/em&gt;; it just means it’s not worth your time (a) if you’re on a Mac or (b) if you really care about standard Markdown behaviors.&lt;/p&gt;
&lt;p&gt;As noted, though, the developers got some important parts of this &lt;em&gt;very&lt;/em&gt; right: the app performs well, it looks decent on Windows, and their sync engine seems incredibly solid. Accordingly, if you’re on Windows, and don’t already have a particular commitment to Markdown proper, I might even cautiously recommend it—as a replacement for something like the old &lt;a href="https://www.microsoft.com/en-us/download/details.aspx?id=8621"&gt;LiveWriter&lt;/a&gt; app, for example. The biggest hesitation I’d have there is the business model—and, as noted above, I’m not opposed in principle to subscription models for good apps; but I’m not really sure what the value proposition here is.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, the app is named “Write!” – not “Write”. It’s not my favorite, not least because it means you have to type an exclamation point every time you write (!) it.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;There are many reasons for that, including things to do with many Linux users’ antipathy toward paid or non-open software, which makes it very difficult for not only developers but especially &lt;em&gt;designers&lt;/em&gt; to make a living. Never mind the incredibly small size of the audience by comparison.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;And who knows if Medium will still be around in five years? But that’s for another post another time.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Or Linux, but then what exactly &lt;em&gt;is&lt;/em&gt; native on Linux anyway? 😏 More seriously, this will look out of place on &lt;em&gt;any&lt;/em&gt; Linux desktop environment.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;These latter ones are sadly too often the case for cross-platform tech; I’ve filed issues on &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt; and &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt; in the past that way.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;I’ll actually give Write! one point over Ulysses here: Ulysses does some similar conversions under the hood to make the writing experience seem snazzier, and things which don’t get turned into their custom “text objects” can end up exported &lt;em&gt;very&lt;/em&gt; strangely.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="app reviews"></category><category term="writing"></category><category term="design"></category><category term="macOS"></category><category term="Windows"></category></entry><entry><title>“Collection-Last Auto-Curried Functions”</title><link href="http://www.chriskrycho.com/2017/collection-last-auto-curried-functions.html" rel="alternate"></link><published>2017-06-24T17:35:00-04:00</published><updated>2017-06-24T17:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-06-24:/2017/collection-last-auto-curried-functions.html</id><summary type="html">&lt;p&gt;I’ve been using &lt;a href="https://lodash.com"&gt;lodash&lt;/a&gt; for a while at work, and I love having it in our toolbox. But, as I increasingly embrace &lt;em&gt;composition of smaller functions&lt;/em&gt; as a helpful approach to building up the final version of an overall transformation of some piece of data, I’ve increasingly wanted …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve been using &lt;a href="https://lodash.com"&gt;lodash&lt;/a&gt; for a while at work, and I love having it in our toolbox. But, as I increasingly embrace &lt;em&gt;composition of smaller functions&lt;/em&gt; as a helpful approach to building up the final version of an overall transformation of some piece of data, I’ve increasingly wanted to be using &lt;a href="https://github.com/lodash/lodash/wiki/FP-Guide"&gt;lodash-fp&lt;/a&gt; instead—those “auto-curried… data-last methods” are &lt;em&gt;nice&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I could belabor the difference with words, but a code sample will do better. Here’s how I would write the same basic transformation in both Lodash and lodash-fp.&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;// Lodash
const breakfasts = [&amp;#39;pancakes&amp;#39;, &amp;#39;waffles&amp;#39;, &amp;#39;french toast&amp;#39;]

const uniqueLetters = _.flow([
  bs =&amp;gt; _.map(bs, words),
  _.flatten,
  bs =&amp;gt; _.map(bs, b =&amp;gt; split(b, &amp;#39;&amp;#39;)),
  _.flatten,
  _.uniq,
  ls =&amp;gt; _.sortBy(ls, id),
])

console.log(uniqueLetters(breakfasts))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That gets the job done, but wouldn’t it be nice if we didn’t have to have all those anonymous functions (lambdas) throughout?&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;// lodash-fp
const uniqueLettersFp = _.flow([
  _.map(words),
  _.flatten,
  _.map(split(&amp;#39;&amp;#39;)),
  _.flatten,
  _.uniq,
  _.sortBy(id),
])

const breakfasts = [&amp;#39;pancakes&amp;#39;, &amp;#39;waffles&amp;#39;, &amp;#39;french toast&amp;#39;]

console.log(uniqueLettersFp(breakfasts))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suddenly the intent is much clearer with the noise introduced by the lambdas gone. You get this because the lodash-fp functions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;auto-curried:&lt;/strong&gt; that is, even though &lt;code&gt;_.split&lt;/code&gt; takes the splitter and then a string, you can just write &lt;code&gt;_.split('')&lt;/code&gt; and get back a function which takes a string as an argument.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data-last:&lt;/strong&gt; because &lt;code&gt;_.split&lt;/code&gt; takes the string to split &lt;em&gt;last&lt;/em&gt;, it can be passed into an auto-curried function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need &lt;em&gt;both&lt;/em&gt; to get that nice clean call to &lt;code&gt;_.flow&lt;/code&gt;. But once you have both, it’s really, really hard ever to go back, because it’s so much nicer for building pipelines of functions.&lt;/p&gt;
&lt;p&gt;…I need to see if I can help &lt;a href="https://github.com/mike-north/ember-lodash/issues/21"&gt;do the work&lt;/a&gt; to make lodash-fp available in Ember.js.&lt;/p&gt;
</content><category term="javascript"></category><category term="functional programming"></category></entry><entry><title>Typing Your Ember, Part 2</title><link href="http://www.chriskrycho.com/2017/typing-your-ember-part-2.html" rel="alternate"></link><published>2017-05-07T22:00:00-04:00</published><updated>2017-05-07T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-05-07:/2017/typing-your-ember-part-2.html</id><summary type="html">Adding TypeScript to your existing Ember.js app is easy!—here's how to do it, some of the current "gotchas," and a few tips to make the on-ramp a bit easier.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-1"&gt;first part&lt;/a&gt; of this series, I described how to set up a brand new Ember.js app to use TypeScript. In this part, I’m going to talk about starting to use TypeScript in the context of an existing Ember.js app.&lt;/p&gt;
&lt;p&gt;This is, in many ways, even simpler than setting up an app for the first time, because you already have almost everything you need. The steps here are exactly what you’re used to if you’re used to using the Ember CLI ecosystem:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;code&gt;ember-cli-typescript&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start using TypeScript wherever you want in your app.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It really is that simple, for the most part. There are a couple qualifications, and a couple tips, though.&lt;/p&gt;
&lt;p&gt;Let’s start with &lt;strong&gt;qualifications&lt;/strong&gt;. There are open, unresolved &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/"&gt;issues&lt;/a&gt; about using &lt;code&gt;ember-cli-typescript&lt;/code&gt; in your app in certain contexts. For example: &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/8"&gt;using it with &lt;code&gt;ember-browserify&lt;/code&gt;&lt;/a&gt;. While everything will &lt;em&gt;build&lt;/em&gt; correctly in that case (even if the TypeScript compiler complains about being unable to resolve some things, the Ember CLI build pipeline will still work as expected), your editor integration won’t. There are a bunch of corners like this we’re still hammering out; those are the main things we need to get resolved before we can call this a “1.0.” We have the &lt;em&gt;main&lt;/em&gt; stuff working, but, well… there’s more to do.&lt;/p&gt;
&lt;p&gt;Along those same lines, you should take a close look at the &lt;a href="https://github.com/emberwatch/ember-cli-typescript#not-yet-supported"&gt;&lt;strong&gt;Not yet supported&lt;/strong&gt;&lt;/a&gt; section of the README. There are parts of Ember’s programming model which TypeScript certainly &lt;em&gt;can&lt;/em&gt; support, but which we haven’t done the lifting to get the type declaration file to help with yet. (Looking for a place to pitch in and already comfortable doing some heavy lifting with some of TypeScript’s &lt;a href="http://www.typescriptlang.org/docs/handbook/mixins.html"&gt;most advanced type features&lt;/a&gt;? We could use the help.)&lt;/p&gt;
&lt;p&gt;One other thing to be aware of is that your &lt;code&gt;tsconfig.json&lt;/code&gt; settings will affect what kind of resolution your editor gives you. If you have &lt;code&gt;allowJs&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;, your editors will resolve JS modules. Otherwise, they’ll &lt;em&gt;only&lt;/em&gt; resolve TS modules. This can be incredibly annoying at times. However, this isn’t something we’ve nailed down in terms of what the default should be yet. (You can &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/"&gt;come tell us&lt;/a&gt; on GitHub if you have thoughts or insights there!) And the fact that Microsoft has left this configurable is suggestive: different projects may have different preferences here.&lt;/p&gt;
&lt;p&gt;Now, for the &lt;strong&gt;tips&lt;/strong&gt;. Note that these are just a couple quick pointers; I’ll come back and talk about structuring your project and more sophisticated uses of TypeScript in the future.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don’t turn on &lt;code&gt;--strict&lt;/code&gt; or the corresponding individual flags on day 1. Unless you have an extremely unusual and disciplined Ember.js codebase, you’ll have an incredible set of errors to deal with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t set the &lt;code&gt;noEmitOnError&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;, for much the same reason. Since the state of type declaration files for Ember is best described as &lt;em&gt;nascent&lt;/em&gt; at present, many of your files will have errors in them just from failed imports!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t try to convert everything at once. Just pick the next feature or bug you’re working on, and start with the files you’re touching for that bug. Rename it to &lt;code&gt;.ts&lt;/code&gt;, fix any major issues it flags up that you can—but stick as locally as possible. You’re apt to find a &lt;em&gt;lot&lt;/em&gt; of small bugs as you start migrating, and some of them are things which are apt to affect your whole system because they touch central data types. It’s okay. You can come back to those later. For today, you can just be explicit about the weirdnesses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As part of that: get comfortable—really, really comfortable—with &lt;a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types"&gt;union types&lt;/a&gt;. They’ll make it much easier to express the kind of code you’ve &lt;em&gt;actually&lt;/em&gt; written.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t worry about adding explicit types to &lt;em&gt;everything.&lt;/em&gt; In fact, depending on how comfortable you are already with typed languages, you should probably take a pretty different tack with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you’re just stepping into the world of typed programming languages, you might start adding types where they’re the &lt;em&gt;lowest risk&lt;/em&gt;: some place like your automated tests. That’ll help you start to see how to take advantage of them, while not impacting the way you write your app code until you have a better idea how best to employ the types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re already really comfortable with typed programming languages, you might employ types where they’re &lt;em&gt;most helpful:&lt;/em&gt; start with some types in the hairiest or trickiest spots of your app.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is plenty more I could say, but I think that’s a good start for now. I’ll have lots more to add in later posts about the details of how specifically to get the most mileage out of types within an Ember.js app today.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/2017/typing-your-ember-part-1"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Part 1 – Set your Ember.js project up to use TypeScript.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Also, I &lt;em&gt;strongly&lt;/em&gt; encourage you to write types in terms of unions of types rather than in terms of &lt;a href="http://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties"&gt;optional properties on types&lt;/a&gt;. That might be surprising; I’ll explain it in more detail in a future post.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="typescript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>Typing Your Ember, Part 1</title><link href="http://www.chriskrycho.com/2017/typing-your-ember-part-1.html" rel="alternate"></link><published>2017-05-05T00:10:00-04:00</published><updated>2017-05-05T00:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-05-05:/2017/typing-your-ember-part-1.html</id><summary type="html">In this first post in the series, we're going to keep things simple and easy: we're going to get an Ember.js app configured to use TypeScript. Later posts will cover some of the other details.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In this first post in the series, we’re going to keep things simple and easy: we’re going to get an Ember.js app configured to use TypeScript. Later posts will cover some of the other details.&lt;/p&gt;
&lt;p&gt;Because of the lovely &lt;a href="https://ember-cli.com"&gt;Ember CLI&lt;/a&gt; ecosystem, this is a pretty straightforward process. I’m going to start from &lt;em&gt;zero&lt;/em&gt; so that even if you’ve never written an Ember app before, you can get this up and running by following these instructions. These instructions have also been tested and confirmed to work across platforms—you can do this equally on Windows, macOS, or Linux.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Make sure you have Ember’s prerequisites installed. Get &lt;a href="https://nodejs.org/en/"&gt;Node&lt;/a&gt; for your platform. Optionally (but highly recommended) install &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt; to manage your Node packages.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the Ember command lines tools globally:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;yarn global add ember-cli&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;npm install --global ember-cli&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an Ember app.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember new my-ts-app --yarn&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Using the &lt;code&gt;--yarn&lt;/code&gt; flag will make it so your app uses &lt;a href="https://yarnpkg.com"&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt; and creates a &lt;code&gt;yarn.lock&lt;/code&gt; file instead of using &lt;code&gt;npm&lt;/code&gt; when it installs its dependencies.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now move to the root of the newly created app: this is where we’ll do everything else in the post.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;cd my-ts-app&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the &lt;a href="https://emberobserver.com/addons/ember-cli-typescript"&gt;&lt;em&gt;ember-cli-typescript&lt;/em&gt; add-on&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate your first UI component.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember generate component some-input&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Rename the files it generated from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.ts&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app/components/some-input.js&lt;/code&gt; → &lt;code&gt;app/components/some-input.ts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests/integration/components/some-input-test.js&lt;/code&gt; → &lt;code&gt;tests/integration/components/some-input-test.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Eventually, we’ll make it so that you get TypeScript for all newly generated components when using &lt;em&gt;ember-cli-typescript&lt;/em&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add some content to the files:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;{{!-- some-input.hbs --}}
{{input value=theValue change=(mut theValue)}}
{{theValue}}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// some-input.ts
import Ember from &amp;#39;ember&amp;#39;;

export default Ember.Component.extend({
  theValue: &amp;#39;&amp;#39;,
});&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your &lt;code&gt;application.hbs&lt;/code&gt; file to remove the default &lt;code&gt;{{welcome}}&lt;/code&gt; template and replace it with &lt;code&gt;{{some-input}}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spin up the Ember application with Ember CLI’s development server:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember serve&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll likely note some warnings: the TypeScript compiler won’t be able to find some of the modules imported in your files. I’ll have more to say about this in a future post. For now, suffice it to say: don’t worry, Ember CLI is still resolving and compiling your modules just fine.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Load the application by going to &lt;code&gt;localhost:4200&lt;/code&gt; in your browser. You should see a blank white screen with an input in it. Type in it, and see the input rendered to the page. Simple enough, but it’s using a TypeScript file compiled along the way!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s it: we’re done setting up an Ember.js app to use TypeScript! In the next post, I’ll talk a bit about strategies for migrating an existing app to TypeScript—not just the mechanics of it, but also where and how to start actually integrating types into your code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/2017/typing-your-ember-part-2"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Part 2 – Adding TypeScript to an existing Ember.js project.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I strongly prefer to use &lt;code&gt;yarn&lt;/code&gt; over &lt;code&gt;npm&lt;/code&gt; because &lt;code&gt;yarn&lt;/code&gt; installs are predictable and repeatable, and if there’s one thing I don’t need to spend time on when developing our Ember.js app at Olo, it’s chasing problems with transitive dependencies that are different in the build server than in my local development environment. Yarn’s lockfiles mean what ends up built on the server is &lt;em&gt;exactly&lt;/em&gt; what ended up built on my machine.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;But if you’re curious, here’s a preview: we really need more &lt;a href="http://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"&gt;type definitions&lt;/a&gt; for the Ember ecosystem. I’ll be covering &lt;em&gt;how&lt;/em&gt; we build those in much more detail in a future installment.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="typescript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>Why Elm Instead of TypeScript?</title><link href="http://www.chriskrycho.com/2017/why-elm-instead-of-typescript.html" rel="alternate"></link><published>2017-04-23T17:20:00-04:00</published><updated>2017-04-23T17:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-04-23:/2017/why-elm-instead-of-typescript.html</id><summary type="html">&lt;p&gt;A few weeks ago, an acquaintance asked in a Slack channel we’re both in:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I ask a noob type Elm / JS question?&lt;/p&gt;
&lt;p&gt;Why Elm instead of Typescript? The dev stack and functional programming?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I responded as follows, with only light tweaks to clarify a couple things (and I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few weeks ago, an acquaintance asked in a Slack channel we’re both in:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I ask a noob type Elm / JS question?&lt;/p&gt;
&lt;p&gt;Why Elm instead of Typescript? The dev stack and functional programming?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I responded as follows, with only light tweaks to clarify a couple things (and I’ll be reusing some of this material as the basis of an internal tech talk I’m giving on the same subject at Olo in a few weeks):&lt;/p&gt;
&lt;p&gt;A couple things Elm gives you:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It’s not tied to JS directly, which means it’s free to just do what is the best fit for the language rather than needing to be able to express all the quirks and oddities of JS. That’s the single biggest thing I find all the time with TS (which I use every day and do quite like): as good as it is, and as both powerful and expressive as its type system is, at the end of the day it’s… still a superset of JavaScript, and that can mean some really nice things, but it also means a lot of &lt;em&gt;weird&lt;/em&gt; things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm’s type system is &lt;em&gt;sound&lt;/em&gt;; TypeScript’s is not. At a practical level, that means that if an Elm program type-checks (and thus compiles), you can be &lt;em&gt;sure&lt;/em&gt; – not mostly sure, 100% sure – that it is free of things like &lt;code&gt;undefined is not a function&lt;/code&gt;. TypeScript does not (and by design cannot) give you that guarantee. And when I say “by design,” I mean that its designers believed from the outset that soundness was in tension with developer productivity, so they intentionally left a number of “soundness holes” in the type system—there’s still a lot of opportunity for &lt;code&gt;undefined is not a function&lt;/code&gt;, sad to say. You can make it &lt;em&gt;less&lt;/em&gt; than in JS… but not none. (That’s even still true in the TypeScript 2.x series, though the various soundness flags they added in 2.0 and the &lt;code&gt;--strict&lt;/code&gt; option &lt;a href="https://blogs.msdn.microsoft.com/typescript/2017/04/10/announcing-typescript-2-3-rc/"&gt;coming in 2.3&lt;/a&gt; do get you closer.) In Elm, you can make it truly &lt;em&gt;none&lt;/em&gt;. It’s just a sort of known fact at this point that Elm codebases tend to &lt;em&gt;have zero runtime errors&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm’s language design is a huge win.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Elm is a &lt;em&gt;pure functional language&lt;/em&gt;. Because non-pure things are offloaded to the Elm runtime, every single function &lt;em&gt;you&lt;/em&gt; write is pure. Same input means the same output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm supports first-class currying and partial application. This makes it much, much easier to do the kind of functional-building-block approach that is natural in FP and which is &lt;em&gt;attractive&lt;/em&gt; in (but a lot more work in) JS or TS. Example code to show what I mean—&lt;/p&gt;
&lt;p&gt;Javascript:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const add = (a, b) =&amp;gt; a + b;
const add2 = (c) =&amp;gt; add(2, c);
const five = add2(3);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;add a b = a + b
add2 = add 2
five = add2 3&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The combination of the above means that you can refactor and &lt;em&gt;always be sure you get everything&lt;/em&gt;, which is truly magical. And the compiler errors are the best in the world (and that’s no exaggeration).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The way I’d summarize it is to say that Elm makes it easy to do the right thing and hard or impossible to do the wrong thing. TypeScript makes it possible to do the right thing, and gives you a couple switches you can flip to make it harder to do the wrong things, but will ultimately let you do anything.&lt;/p&gt;
</content><category term="Elm"></category><category term="JavaScript"></category><category term="TypeScript"></category><category term="programming languages"></category><category term="functional programming"></category></entry><entry><title>Functions, Objects, and Destructuring in JavaScript</title><link href="http://www.chriskrycho.com/2017/functions-objects-and-destructuring-in-javascript.html" rel="alternate"></link><published>2017-03-27T18:00:00-04:00</published><updated>2017-03-27T18:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-03-27:/2017/functions-objects-and-destructuring-in-javascript.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;A colleague just getting his feet wet with JavaScript, and coming from a background with much more C# than JavaScript, sent me a question on Slack the other day, and I realized the answer I’d written up was more generally helpful, so here you go!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I’m including the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;A colleague just getting his feet wet with JavaScript, and coming from a background with much more C# than JavaScript, sent me a question on Slack the other day, and I realized the answer I’d written up was more generally helpful, so here you go!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I’m including the context of original question because I want to call out something really important: there are no dumb questions. When you’re just coming up to speed on &lt;em&gt;any&lt;/em&gt; technology, stuff is going to be confusing. That goes double when making the jump as far as between something like C# and something like modern JS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey this may be a really dumb question&lt;/p&gt;
&lt;p&gt;but I’m a JavaScript n00b, and I have no idea what’s going on here&lt;/p&gt;
&lt;p&gt;I’m not used to this syntax&lt;/p&gt;
&lt;p&gt;I have this program:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;function ab() {
   function fa() { console.log(&amp;quot;A&amp;quot;); };
   function fb() { console.log(&amp;quot;B&amp;quot;); };
   return {fa, fb};
};

let {fa, fb} = ab();

fa();
fb();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and it outputs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A
B&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(as expected)&lt;/p&gt;
&lt;p&gt;What I don’t understand is the syntax for the &lt;code&gt;let&lt;/code&gt; part (or maybe even the return from &lt;code&gt;ab()&lt;/code&gt;)&lt;/p&gt;
&lt;ol type="A"&gt;
&lt;li&gt;&lt;p&gt;What is &lt;code&gt;ab()&lt;/code&gt; actually returning? An object with 2 function pointers?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What can’t I do a &lt;code&gt;let {a, b} = ab()&lt;/code&gt; and then call &lt;code&gt;a()&lt;/code&gt; and &lt;code&gt;b()&lt;/code&gt;? I get syntax errors that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; aren’t defined&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;edit to show code that doesn’t work (definition of ab() remains the same):&lt;/em&gt;&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let {a, b} = ab();

a(); // will throw an error here
b();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don’t understand why the names for &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt; have to be the same across all scopes/closures (? am I using those terms correctly? JavaScript is an odd dance partner at times)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;First, your (A) is &lt;em&gt;basically&lt;/em&gt; correct, but the phrase “function pointers” is one you should banish from your mind entirely in this context. In JavaScript, functions are just items like any other. From the language’s perspective, there’s no difference between these things other than what you can do with them:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let foo = &amp;quot;a string&amp;quot;;
function quux(blah) { console.log(&amp;quot;blah is &amp;quot; + blah); }
let bar = quux;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; are just variables. (&lt;code&gt;quux&lt;/code&gt; is a variable, too, but it behaves a little differently; I’ll cover that in a minute.) They have different types, and therefore different things you can do on them. &lt;code&gt;foo&lt;/code&gt; has the &lt;code&gt;length&lt;/code&gt; property and a bunch of string-specific methods attached. &lt;code&gt;bar&lt;/code&gt; is callable. But both of them are just &lt;em&gt;things&lt;/em&gt; in the same way, and at the same level in the program.&lt;/p&gt;
&lt;p&gt;So in your original &lt;code&gt;function ab() { ... }&lt;/code&gt;, what you’re doing is declaring two functions, &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;, and returning them attached to an object.&lt;/p&gt;
&lt;p&gt;For various reasons which aren’t especially interesting, functions can have &lt;em&gt;names&lt;/em&gt;…&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;function fa() { ... }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and can be &lt;em&gt;assigned to other variables&lt;/em&gt;…&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let trulyISayToYou = function waffles() { console.log(&amp;quot;are so tasty&amp;quot;); };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and in fact you can define the functions &lt;em&gt;themselves&lt;/em&gt; anonymously, that is, without any name attached to the function declaration itself: combine those:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let lookMa = function() { console.log(&amp;quot;no function name!&amp;quot;); };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing &lt;code&gt;function ab() { ... }&lt;/code&gt; simultaneously &lt;em&gt;declares&lt;/em&gt; the function and &lt;em&gt;hoists&lt;/em&gt; it, that is, it makes it available in that entire scope, regardless of where it is defined. So you can do this, even though it’s kind of insane most of the time and you shouldn’t:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;quux();
function quux() { console.log(&amp;#39;SRSLY?&amp;#39;); }&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;Now, about returning &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt; from the function.&lt;/p&gt;
&lt;p&gt;First, note that you normally define objects in a long form, like so:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someObject = {
  a: true,
  b: &amp;#39;some string&amp;#39;
};

console.log(someObject.a);  // prints true
console.log(someObject.b);  // prints &amp;quot;some string&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, very, &lt;em&gt;very&lt;/em&gt; often, you find yourself doing something like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// do some work to define what `a` and `b` should be, then...
let someObject = {
  a: a,
  b: b
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this is such a common pattern, the 2015 version of JS introduced a “shorthand,” which lets you just write that last assignment like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someObject = {
  a,
  b
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course, for convenience we often write that on one line:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someObject = { a, b };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can combine that with the fact that you declared two items (functions, but again: that &lt;em&gt;really&lt;/em&gt; doesn’t matter, they could be anything) with the names &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;, and what you’re doing is returning an object containing those two items in it: &lt;code&gt;return {fa, fb}&lt;/code&gt; is equivalent to this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let theFunctions = {
  fa: fa,
  fb: fb, 
};
return theFunctions;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;What about the &lt;code&gt;let&lt;/code&gt; assignment?&lt;/p&gt;
&lt;p&gt;JS has three kinds of name bindings: &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt;. &lt;code&gt;var&lt;/code&gt; bindings act like &lt;code&gt;function&lt;/code&gt;: the names you use get “hoisted”. So:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;console.log(neverDefined);  // throws an error
console.log(definedLater);  // prints undefined
var definedLater = &amp;quot;what&amp;quot;;
console.log(definedLater);  // prints &amp;quot;what&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; behave much more like you’d expect: they’re only valid &lt;em&gt;after&lt;/em&gt; they’re defined, and they’re scoped to the blocks they appear in. (&lt;code&gt;var&lt;/code&gt; will escape things like &lt;code&gt;if&lt;/code&gt; blocks, too. It’s crazy-pants.) The difference between &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; is that they create &lt;em&gt;mutable&lt;/em&gt; or &lt;em&gt;immutable&lt;/em&gt; &lt;em&gt;bindings&lt;/em&gt; to a name.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;let a = true;&lt;/code&gt; is just creating a name, &lt;code&gt;a&lt;/code&gt;, and binding the value &lt;code&gt;true&lt;/code&gt; to it. Likewise, with &lt;code&gt;const b = false;&lt;/code&gt; it’s creating a name, &lt;code&gt;b&lt;/code&gt;, and binding the value &lt;code&gt;false&lt;/code&gt; to it. And those &lt;em&gt;won’t&lt;/em&gt; be hosted. Now, having done &lt;code&gt;let a = true;&lt;/code&gt; we could on the next line write &lt;code&gt;a = false;&lt;/code&gt; and that’s fine: &lt;code&gt;let&lt;/code&gt; bindings are mutable; they can change. We’ll get an error if we try to do &lt;code&gt;b = true;&lt;/code&gt; though, because &lt;code&gt;const&lt;/code&gt; bindings are &lt;em&gt;not&lt;/em&gt; mutable.&lt;/p&gt;
&lt;p&gt;One thing to beware of with that: things like objects and arrays, being reference types, are not themselves created as immutable when you use &lt;code&gt;const&lt;/code&gt;. Rather, the specific &lt;em&gt;instance&lt;/em&gt; is immutably bound to the name. So:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const foo = { a: true };
foo.b = &amp;#39;I can add properties!&amp;#39;;  // okay
delete foo.a;  // okay
foo = { c: &amp;quot;assign a new object&amp;quot; };  // will error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can change the internals of the item bound to the name, but not assign a new item to the name. For value types (numbers, booleans, etc.), that makes them behave like &lt;em&gt;constants&lt;/em&gt; in other languages. You have to use something like &lt;code&gt;Object.freeze&lt;/code&gt; to get actually constant object types.&lt;/p&gt;
&lt;p&gt;That was a long digression to explain what you’re seeing in a general sense with &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Finally, let’s come back around and talk about that assignment and why you need the names &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As noted, &lt;code&gt;ab()&lt;/code&gt; returns an object with two items attached, &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;. (And again: functions are &lt;em&gt;just&lt;/em&gt; items in JS.) So you could also write that like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let theFunctions = ab();  // theFunctions is now the object returned
theFunctions.fa();  // and it has the `fa` item on it
theFunctions.fb();  // and the `fb` item, too&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, if your original &lt;code&gt;ab()&lt;/code&gt; function had returned other properties, they’d be accessible there, too, in just the same way (though they wouldn’t be callable if they weren’t functions).&lt;/p&gt;
&lt;p&gt;Again, this is a super common pattern: you want to immediately do something with the values returned on an object by some function, and you don’t necessarily want to type out the name of the object every time. So ES2015 introduced &lt;em&gt;destructuring&lt;/em&gt; to help with this problem. I’ll do it without the function in the way to show how it works at the simplest level first.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someObject = {
  foo: &amp;#39;what is a foo anyway&amp;#39;,
  bar: &amp;#39;hey, a place to drink *or* a thing to hit people with&amp;#39;,
  quux: &amp;#39;is this like a duck&amp;#39;
};

console.log(someObject.foo);  // etc.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if we wanted to get at &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;quux&lt;/code&gt;, we could always do that with &lt;code&gt;someObject.quux&lt;/code&gt; and so on. But, especially if we have some large object floating around, we often just want a couple properties from it—say, in this case, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;quux&lt;/code&gt;. We could do that like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let foo = someObject.foo;
let quux = someObject.quux;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course those new names &lt;em&gt;don’t&lt;/em&gt; have to match:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let whatever = someObject.foo;
let weLike = someObject.quux;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, because wanting to snag just a couple items off of objects like this is so common, the shorthand is available. In the case of the shorthand for &lt;em&gt;destructuring&lt;/em&gt;, just like the case of the shorthand for object creation, the names have to match: otherwise, it wouldn’t know what to match them with.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let { foo, quux } = someObject;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, going back to your original example: &lt;code&gt;ab()&lt;/code&gt; returns an object which has the items &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt; on it. You’re using the destructuring assignment there to get just &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;. There’s no reason they &lt;em&gt;have&lt;/em&gt; to be those names in the outer scope, other than that you’re using the destructuring assignment. You could also do this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let theFunctions = ab();
let oneOfThem = theFunctions.fa;
let theOtherOne = theFunctions.fb;
oneOfThem();  // does what fa() does
theOtherOne();  // does what fb() does&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; that covers everything your questions brought up; but please feel free to ask more!&lt;/p&gt;
&lt;p&gt;The most important thing to take away is that even though yes, those are pointers to functions under the hood, in JS that’s &lt;em&gt;absolutely&lt;/em&gt; no different than the fact that there are pointers to objects and arrays under the hood. Functions are just more items you can do things with. You can put them on objects, you can return them directly, you can take them as arguments, etc.&lt;/p&gt;
&lt;p&gt;Hopefully that’s helpful!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Bonus content: in ES2015 and later, you can also define anonymous functions like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someFunction = (someArg) =&amp;gt; { console.log(someArg); };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has some interesting side effects about the value of &lt;code&gt;this&lt;/code&gt; in the body of the function you declare… but that’s for another time.&lt;/p&gt;
</content><category term="javascript"></category></entry><entry><title>Pick the Right Tool for the Job</title><link href="http://www.chriskrycho.com/2017/pick-the-right-tool-for-the-job.html" rel="alternate"></link><published>2017-03-17T22:00:00-04:00</published><updated>2017-03-17T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-03-17:/2017/pick-the-right-tool-for-the-job.html</id><summary type="html">&lt;p&gt;Over the past few years, I’ve been experimenting with publishing microblog posts here on my website as the “canonical” source for them, inspired by some of Manton Reece’s &lt;a href="http://www.manton.org/2014/09/owning-the-microblog.html"&gt;early experiments&lt;/a&gt; that way. I have also spent a considerable amount of time trying to come up with a good …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past few years, I’ve been experimenting with publishing microblog posts here on my website as the “canonical” source for them, inspired by some of Manton Reece’s &lt;a href="http://www.manton.org/2014/09/owning-the-microblog.html"&gt;early experiments&lt;/a&gt; that way. I have also spent a considerable amount of time trying to come up with a good way to share links, and have been rather stymied by the limitations of the static site generator I use (&lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;): it does not support customizing the link target of RSS items.&lt;/p&gt;
&lt;p&gt;Both of these desires, combined with the breadth of my interests, have been motivating factors in my desire to &lt;a href="http://www.chriskrycho.com/lightning-rs/"&gt;build my own CMS/site generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But as of today, I think I am setting aside those two needs, at least for the present (though the underlying information architecture needs for my site are not thereby particularly diminished, so Lightning will still aim for roughly the same goals when i get back to it).&lt;/p&gt;
&lt;p&gt;My reasoning here is two-fold.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;The simple reality is that the vast majority of my microblogging has zero historical value. It is ephemeral; archiving it is essentially a useless gesture, a “because I can” or perhaps “the internet should be permanent” act of defiance. But in truth, if every one of my tweets vanished… it would not matter one whit. I have been considering this for some time, but it came home to me tonight while considering my second point:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have been experimenting with &lt;a href="https://pinboard.in"&gt;Pinboard&lt;/a&gt; as a bookmark management service over the past few weeks, spurred on by yet once more needing to dig out if an email from three years ago a particular post. (You can see my public bookmarks &lt;a href="https://pinboard.in/u:chriskrycho"&gt;here&lt;/a&gt;. It’s a work in progress as far as organization goes.) One lovely Pinboard feature (and there are &lt;a href="http://text-patterns.thenewatlantis.com/2016/07/happy-birthday-pinboard.html"&gt;many others,&lt;/a&gt; including &lt;a href="https://blog.pinboard.in/2016/07/pinboard_turns_seven/"&gt;having a simple, profitable business model&lt;/a&gt;! Yes, that &lt;em&gt;is&lt;/em&gt; a feature as far as I am concerned) is the option of public RSS feeds for publicly-bookmarked items by author, by tag, etc. This is actually what led me to Pinboard in the first place (thanks, &lt;a href="http://text-patterns.thenewatlantis.com/2011/05/pinboard.html"&gt;ayjay&lt;/a&gt;). My Pinboard RSS feed is &lt;a href="http://feeds.pinboard.in/rss/u:chriskrycho/" class="uri"&gt;http://feeds.pinboard.in/rss/u:chriskrycho/&lt;/a&gt;, and if you want to follow along and see what I think is worth reading with occasional comments… that’s where it will be.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the course of writing this post, I also remembered that last night, App.net shut down. I downloaded my archive a few weeks ago… I think. Honestly, I don’t recall, and the truth is that I haven’t looked at old posts there in years, though I amassed some 15,000 in the years I was active there. ADN was beautiful and wonderful. But even the very good conversations I had there are &lt;em&gt;past&lt;/em&gt; in much the same way a conversation when physically present with each other would be. We do not suppose we need audio/video recordings of conversations just in case we might want to search them later. I understand why someone might want to &lt;a href="http://www.manton.org/2017/03/app-net-archive.html"&gt;archive all of ADN&lt;/a&gt;. But I don’t feel that desire myself anymore.&lt;/p&gt;
&lt;p&gt;Archival has value. But its value is not ultimate, and its value is not universal.&lt;/p&gt;
&lt;p&gt;The somewhat-ephemeral things I care about archiving are, I find, &lt;em&gt;links&lt;/em&gt;—not random thoughts or comments or even conversations, but articles and posts I want to be able to come back to later, or quickly find to share with someone.&lt;/p&gt;
&lt;p&gt;So no more microblog posts here. If you want them, you can follow me on Twitter. (If I hear from enough people who would prefer to keep getting them via RSS, I will think about setting up some sort of automated RSS mirror of my stream.) But for my own part, I am content to let the ephemeral be ephemeral. And that is easier to countenance now that microblogging isn’t also a poor-man’s bookmarking tool for me.&lt;/p&gt;
&lt;p&gt;This takes me around to the meta point I had in mind when I started the post: use tools for what they’re good at and don’t try to force them into roles they’re not well-suited for. Twitter is good for ephemera, bad for permanence, decent for finding content I wouldn’t encounter via RSS, horrible for conversation or substantive commentary. Pinboard is great for bookmarking things, for sharing links via RSS, and for seeing what bookmarks others are sharing; but it is not at all “social” in the modern sense, with no facilities for discussion or interaction other than reading others’ links and copying them to your own board. Twotter for ephemera and trivial conversations. Pinboard for links. Blog for longer content.&lt;/p&gt;
</content><category term="writing"></category></entry><entry><title>Differences of Opinion</title><link href="http://www.chriskrycho.com/2017/differences-of-opinion.html" rel="alternate"></link><published>2017-03-12T08:05:00-04:00</published><updated>2017-03-12T08:05:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-03-12:/2017/differences-of-opinion.html</id><summary type="html">&lt;p&gt;I could not possibly agree more with &lt;a href="http://www.pyret.org/pyret-code/"&gt;this view of teaching software/CS&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are focused on introductory programming education at a high-school and collegiate level — what is often called “CS 1” and “CS 2” (roughly, the first year of college). Pyret is being actively used in everything from high-schools …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I could not possibly agree more with &lt;a href="http://www.pyret.org/pyret-code/"&gt;this view of teaching software/CS&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are focused on introductory programming education at a high-school and collegiate level — what is often called “CS 1” and “CS 2” (roughly, the first year of college). Pyret is being actively used in everything from high-schools to upper-level collegiate courses, giving us a tight feedback loop.&lt;/p&gt;
&lt;p&gt;Of course, even in that setting there are differences of opinion about what needs to be taught. Some believe inheritance is so important it should be taught early in the first semester. We utterly reject this belief (as someone once wisely said, “object-oriented programming does not scale down”: what is the point of teaching classes and inheritance when students have not yet done anything interesting enough to encapsulate or inherit from?). Some have gone so far as to start teaching with Turing Machines. Unsurprisingly, we reject this view as well.&lt;/p&gt;
&lt;p&gt;What we do not take a dogmatic stance on is exactly how early state and types should be introduced. Pyret has the usual stateful operations. We discussed this at some length, but eventually decided an introduction to programming must teach state. Pyret also has optional annotations, so different instructors can, depending on their preference, introduce types at different times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’m &lt;em&gt;delighted&lt;/em&gt; to see work on languages like Dr. Racket and Pyret, and the more so because the teams behind both have been willing to set aside many of the dogmas of how CS has been taught and actually do &lt;em&gt;pedagogical research&lt;/em&gt;. Also: OOP is a useful tool, but I’m with them: treating inheritance as a first-semester concept is… nutty.&lt;/p&gt;
&lt;p&gt;The whole &lt;a href="http://www.pyret.org/pyret-code/"&gt;“Why Pyret?”&lt;/a&gt; page is worth reading if you have any interest in programming languages or teaching software development and computer science.&lt;/p&gt;
</content><category term="programming languages"></category><category term="software development"></category><category term="pedagogy"></category><category term="links"></category></entry><entry><title>Dear Tech CEOs: Yes, That Is Your Culture.</title><link href="http://www.chriskrycho.com/2017/dear-tech-ceos-yes-that-is-your-culture.html" rel="alternate"></link><published>2017-02-21T17:00:00-05:00</published><updated>2017-02-21T17:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-02-21:/2017/dear-tech-ceos-yes-that-is-your-culture.html</id><summary type="html">&lt;p&gt;It is common, when stories break about horrible company cultures in —as &lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber"&gt;one did this week about Uber&lt;/a&gt;, and as &lt;a href="https://www.nytimes.com/2015/08/16/technology/inside-amazon-wrestling-big-ideas-in-a-bruising-workplace.html?_r=1"&gt;one did last year about Amazon&lt;/a&gt;—for the &lt;abbr&gt;CEO&lt;/abbr&gt;s to say things like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What she describes is abhorrent and against everything Uber stands for and believes in. (Uber &lt;abbr&gt;CEO …&lt;/abbr&gt;&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;It is common, when stories break about horrible company cultures in —as &lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber"&gt;one did this week about Uber&lt;/a&gt;, and as &lt;a href="https://www.nytimes.com/2015/08/16/technology/inside-amazon-wrestling-big-ideas-in-a-bruising-workplace.html?_r=1"&gt;one did last year about Amazon&lt;/a&gt;—for the &lt;abbr&gt;CEO&lt;/abbr&gt;s to say things like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What she describes is abhorrent and against everything Uber stands for and believes in. (Uber &lt;abbr&gt;CEO&lt;/abbr&gt; Travis Kalanick’s statement quoted at &lt;a href="http://www.recode.net/2017/2/19/14665076/ubers-travis-kalanick-susan-fowler-sexual-harassment-investigation"&gt;Recode&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The article doesn’t describe the Amazon I know or the caring Amazonians I work with every day. (Amazon &lt;abbr&gt;CEO&lt;/abbr&gt; Jeff Bezos’ statement quoted at &lt;a href="http://www.geekwire.com/2015/full-memo-jeff-bezos-responds-to-cutting-nyt-expose-says-tolerance-for-lack-of-empathy-needs-to-be-zero/"&gt;Geekwire&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem with this is simple. You can say all day that these events don’t represent your culture. But they &lt;em&gt;do&lt;/em&gt;. And if you’re not aware of it, that means you have two problems: the culture problem, and the fact that you’re so out of touch with what your company is actually like that you don’t know it has that culture problem.&lt;/p&gt;
&lt;p&gt;And you have one other, even bigger problem. If that’s the culture of the company you’ve built, it’s &lt;em&gt;your fault&lt;/em&gt;. You can’t foist it off on your underlings: you hired them. You can’t foist it off on the bureaucracy: you built it. You can’t foist it off on wrong priorities: you set those priorities. It’s on you.&lt;/p&gt;
</content><category term="ethics"></category></entry><entry><title>Better Off Using Exceptions?</title><link href="http://www.chriskrycho.com/2017/better-off-using-exceptions.html" rel="alternate"></link><published>2017-02-20T12:00:00-05:00</published><updated>2017-02-20T12:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-02-20:/2017/better-off-using-exceptions.html</id><summary type="html">&lt;p&gt;I saw this post on error-handling in F&lt;sup&gt;♯&lt;/sup&gt;, &lt;a href="https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/" title="You’re better off using Exceptions"&gt;“You’re better off using Exceptions”&lt;/a&gt; making the rounds on Twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception handling is an error management paradigm that has often been met with criticism. Such criticisms typically revolve around scoping considerations, exceptions-as-control-flow abuse or even the assertion that exceptions are really …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I saw this post on error-handling in F&lt;sup&gt;♯&lt;/sup&gt;, &lt;a href="https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/" title="You’re better off using Exceptions"&gt;“You’re better off using Exceptions”&lt;/a&gt; making the rounds on Twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception handling is an error management paradigm that has often been met with criticism. Such criticisms typically revolve around scoping considerations, exceptions-as-control-flow abuse or even the assertion that exceptions are really just a type safe version of goto. To an extent, these seem like valid concerns but it is not within the scope of this article to address those per se.&lt;/p&gt;
&lt;p&gt;Such concerns resonate particularly well within FP communities, often taken to the extreme: we should reject exceptions Show more…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I get the argument, and in the specific context of F&lt;sup&gt;♯&lt;/sup&gt;—especially given how much C&lt;sup&gt;♯&lt;/sup&gt;-interoperating and therefore exception-throwing-code-interoperating there is there—it’s reasonable.&lt;/p&gt;
&lt;p&gt;But it still makes me sad. (To be clear: exceptions were and are a big win over what you get in languages like C. I’ll take them any day over &lt;code&gt;goto&lt;/code&gt; or &lt;code&gt;segfault&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;You need to embrace exceptions in F&lt;sup&gt;♯&lt;/sup&gt; &lt;em&gt;because F&lt;sup&gt;♯&lt;/sup&gt; has exceptions&lt;/em&gt; and because &lt;em&gt;many of its libraries rely on exceptions&lt;/em&gt;. But my experience with Rust and other non-exception-using languages is that you &lt;em&gt;don’t&lt;/em&gt; need exceptions in the general case.&lt;/p&gt;
&lt;p&gt;The questions are: whether your language has good support for things like flat-mapping, and whether you’re willing to commit to letting the compiler help you with these problems.&lt;/p&gt;
&lt;p&gt;To be sure: there’s more work involved up front to deal with that. But that’s a tradeoff I’m &lt;em&gt;always&lt;/em&gt; willing to make. I’d rather have the compiler tell me if I’m failing to account for something than learn because I saw a runtime error report come up in &lt;a href="https://raygun.com"&gt;Raygun&lt;/a&gt;, especially because that tends to mean an error that affects the user in some way.&lt;/p&gt;
&lt;p&gt;Rust’s model gives you something like exceptions for truly unrecoverable errors, “panics.” A panic gives you all the context you’d get from an exception (one of the virtues of exceptions highlighted in that post), but you can only “catch” it at thread boundaries, and it otherwise just kills the program. Because it’s catastrophic, you only use it where you don’t have any way to recover in your immediate context. But where you can recover in your immediate context… using something like a highly descriptive enum (just as suggested at the end of &lt;a href="https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/" title="You’re better off using Exceptions"&gt;that original post&lt;/a&gt;!) is a better option.&lt;/p&gt;
&lt;p&gt;It’s well-understood in my circles that you shouldn’t use exceptions for things you can recover from; you should use them for things you &lt;em&gt;can’t&lt;/em&gt; recover from. But in most languages which lean heavily on exceptions, you inevitably start using them for control flow. I say: if you can recover from an error… just recover from it! Account for recoverable errors as possible conditions in your program and carry on! If you can’t recover… don’t. Die and let some other part of your system kick things back off.&lt;/p&gt;
&lt;p&gt;In summary: yes, if you’re in F&lt;sup&gt;♯&lt;/sup&gt;, use exceptions. It &lt;em&gt;is&lt;/em&gt; the right thing to do in many cases (and you don’t have a choice in many others). But I’m hopeful for a future where we handle recoverable errors locally, and &lt;a href="http://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html"&gt;act like Erlang or Elixir otherwise&lt;/a&gt;.&lt;/p&gt;
</content><category term="fsharp"></category><category term="software development"></category><category term="rust"></category><category term="functional programming"></category></entry><entry><title>On Blogging</title><link href="http://www.chriskrycho.com/2017/on-blogging.html" rel="alternate"></link><published>2017-01-04T23:25:00-05:00</published><updated>2017-01-04T23:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-01-04:/2017/on-blogging.html</id><summary type="html">A few thoughts on Medium, micro.blog, and the open web.</summary><content type="html">&lt;p&gt;My wife is out of town and I had coffee at our church small group tonight, so I’m wide awake and up late, thinking about &lt;em&gt;blogging&lt;/em&gt;. It’s been on my mind a lot lately. (And what follows is, appropriately, as you will see, blogging in the old style—which is to say: a bit rambly. I apologize. It’s the coffee.)&lt;/p&gt;
&lt;p&gt;A friend at our small group meeting tonight mentioned his intent to start blogging this year. He had a lot of good reasons for jumping in, and I strongly encouraged it. Blogging is not for everyone—we’ll get to that—but blogging is &lt;em&gt;good&lt;/em&gt;. This newish thing, writing-on-the-web-in-a-log, has been a part of my life for over a decade now. I wrote my first post on Xanga in the fall of 2005, and I have not gone more than a matter of weeks between posts since. It is not hyperbole to say I cannot imagine &lt;em&gt;not&lt;/em&gt; blogging at this point. (The sheer number of words I &lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html" title="So. many. words. I had no idea how many words."&gt;published last year&lt;/a&gt; should serve to drive home that point: even in a year which was full to the brim, I somehow ended up publishing almost 70,000 words.)&lt;/p&gt;
&lt;p&gt;And yet, blogging is not at all like it was in when I started in 2005. Both for good and for ill. The mid-2000s were in many ways the height of blogs’ power and reach. Individual sites still hosted all their own content; blogging networks were nascent; and the ability of small content providers to outdo the old guard was beginning to be felt at all levels. Bloggers made a difference in the 2004 election not &lt;em&gt;so&lt;/em&gt; different than the way Twitter shaped all sorts of politics in 2016.&lt;/p&gt;
&lt;p&gt;Twitter. That brings us to one of the things that has changed. Microblogging is new. And social media more generally has changed a great deal. Facebook was still the fledgling upstart nipping at MySpace’s heels when I published that first post on Xanga. Today, Facebook dominates the web, and Twitter—not even a product at all in 2005—has taken enormous chunks of the time and attention of the would-be writerly class (journalists especially).&lt;/p&gt;
&lt;p&gt;I first took my own blogging &lt;em&gt;seriously&lt;/em&gt; on &lt;a href="http://blog.chriskrycho.com"&gt;the Blogger site&lt;/a&gt; which first ran in parallel with and then displaced that Xanga. And Blogger, too, evokes a different time: when individuals setting up blogs was trendy, and when the competition between WordPress and Blogger could be called a competition. (Much-neglected Blogger trucks on still, but WordPress powers perhaps a quarter of the sites on the web.)&lt;/p&gt;
&lt;p&gt;But for all that, some things haven’t changed. Business plans still matter—and Ev Williams, founder of Blogger, Twitter, and Medium, still hasn’t figured out something truly sustainable. Attention-driven advertising of the same sort that powered Blogger then and now, and which powers Twitter and Facebook equally, continues to be a race toward the bottom. Sustainable publishing on the web is a mirage for all but a few, because &lt;a href="https://stratechery.com/2014/publishers-smiling-curve/"&gt;content is plentiful and distinguishing features few&lt;/a&gt;. The &lt;a href="http://daringfireball.net"&gt;Daring Fireball&lt;/a&gt;s of the world are notable, these days, not least for how few of them there are.&lt;/p&gt;
&lt;p&gt;In some ways, there is something real to mourn in the passing of the web of those early days when I started blogging. People &lt;em&gt;did&lt;/em&gt; own their own content (at least, to a far greater degree than now). Blogs linked to each other, using &lt;a href="https://en.support.wordpress.com/comments/pingbacks/"&gt;ping-backs&lt;/a&gt; to let sites know when they’d been linked. Comment sections flourished.&lt;/p&gt;
&lt;p&gt;But that era also required a level of technical knowledge that was simply too high a bar for most people. To be sure, anyone could set up a blog with enough grit, and WordPress and Blogger lowered the bar. But subscribing to another blog meant wrangling RSS and learning the arcana of managing Google Reader (which soon swallowed all competitors before its own too-delayed demise). Twitter’s “follow” button seems a revelation by comparison; it is no wonder at all that first Tumblr and then Medium embraced the idea of blogs-as-social-media, “following” and all. Being able not only to respond, and only if the author so allowed, but also to &lt;em&gt;initiate&lt;/em&gt; with anyone else on the service… the first time you @-mentioned someone well-known in your circles, and they responded—that was (and is) a heady thing.&lt;/p&gt;
&lt;p&gt;Centralization is often a function of convenience. Facebook and Twitter make it simple for you to “connect with” or “follow” whomever you like. No digging for RSS feeds, wondering if they have a non-standard symbol for it or hoping desperately that it’s at the root of the site + &lt;code&gt;feed.xml&lt;/code&gt;, or (if you really know the secrets of the web) that they set it up as a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag with a &lt;code&gt;rel='alternate'&lt;/code&gt; tag so it could just be discovered automatically by a smart-enough feed reader…&lt;/p&gt;
&lt;p&gt;You see? If you aren’t technical yourself, your eyes just glazed over in that paragraph, and that’s the point. The technical details make sense if you understand them. But understanding them is hard; and more to the point, they don’t matter for what people actually want to accomplish.&lt;/p&gt;
&lt;p&gt;This is the fundamental mistake of Manton Reece’s new &lt;a href="http://micro.blog"&gt;micro.blog&lt;/a&gt; project (which I like in principle, and whose goals &lt;a href="http://www.chriskrycho.com/micro/"&gt;I clearly share&lt;/a&gt;). People as a whole don’t even know there might be a reason to prefer the open web, where everyone owned their own content and there was no central clearing-house of information. Facebook offers real value to people: it shows them things they’re interested, and keeps them coming back precisely by tailoring its algorithm to make sure they don’t see too many things they &lt;em&gt;don’t&lt;/em&gt; want to see. (The polarization that helps foster may be dreadful, but it’s &lt;a href="https://stratechery.com/2016/fake-news/"&gt;very good business&lt;/a&gt;.) The same goes for Twitter, regardless of the structure of its timeline: people self-select into their lists of whom to follow. Manton’s project is a good one in many ways—but the problem it solves is a &lt;a href="http://www.winningslowly.org/5.03/"&gt;Winning Slowly&lt;/a&gt; kind of problem, and one that takes a lot of selling when the problem Facebook solves is obvious: &lt;em&gt;I want a new story and a picture of my cousin’s kid and a funny cat video.&lt;/em&gt; Decentralizing, whatever its benefits (and again: note well my &lt;em&gt;bona fides&lt;/em&gt; &lt;a href="https://github.com/chriskrycho/chriskrycho.com"&gt;here&lt;/a&gt;), makes those basic tasks &lt;em&gt;harder&lt;/em&gt;. I’ve followed what is now the micro.blog project from a distance for years now—and I’ve always had this one, nagging but oh-so-important question. &lt;em&gt;How does this solve a &lt;strong&gt;user&lt;/strong&gt; problem?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The answer, if there is one, is a decades-long play. It’s a hedge against technological oligarchy. But how do you get people to care? What’s the pitch? The technical problems are easy compared to that—and the technical problems &lt;em&gt;are not easy&lt;/em&gt;; they remain almost untouched in the last decade, and micro.blog has no intent to address some of the core issues. Real-time interaction is what makes Twitter Twitter; ping-backs aren’t even close. And that’s just Twitter; Facebook outstrips it by far.&lt;/p&gt;
&lt;p&gt;And Medium? Medium doesn’t know what it wants to be when it grows up (and it never has; the same as Twitter). As a second pass at Blogger, it has better aesthetics and something like a mission. Ev &lt;a href="https://blog.medium.com/renewing-mediums-focus-98f374a960be"&gt;writes&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So, we are shifting our resources and attention to defining a new model for writers and creators to be rewarded, based on the value they’re creating for people. And toward building a transformational product for curious humans who want to get smarter about the world every day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s a lovely-sounding sentiment. It’s also—for today, at least—contentless business blather. “Building a transformational product for curious humans who want to get smarter about the world every day” sounds great, but it doesn’t mean anything. Medium is a beautiful product without a reason to exist. (How often do you see a founder basically admit: &lt;em&gt;We have no idea what we’re doing here&lt;/em&gt;? But that’s roughly what Ev did.) That doesn’t mean it shouldn’t exist. It just means no one has thought of a &lt;em&gt;good&lt;/em&gt; reason for it to just yet.&lt;/p&gt;
&lt;p&gt;Medium as a centralized, social medium for longer-form writing is better than nothing. I’ll take Medium + Facebook + Google over just Facebook + Google any day. But is there something lost when every blog post looks the same, and when everyone is locked into one more centralized platform? Yes. Just as there is something &lt;em&gt;gained&lt;/em&gt; by people having a place to look. The questions are: whether the costs are indeed higher than the benefits; and even if so whether people can be persuaded of those costs when they all take a decade to appear, and Medium is really pleasant to scroll through &lt;em&gt;right now&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;By whatever quirk of temperament, I’m old-school about blogs. I’d love for the open web to win out over all the centralizers. That’s not going to happen: &lt;em&gt;centralization provides too much value to users&lt;/em&gt;. But we can hope the open web will flourish alongside centralized sources. And, far more importantly, we can work to that end.&lt;/p&gt;
&lt;p&gt;We can show people why it matters, and teach them how to own for themselves even the things you publish on Facebook. We can make philosophies like &lt;abbr title="Publish (on your) Own Site, Syndicate Everywhere"&gt;&lt;a href="https://indieweb.org/POSSE"&gt;POSSE&lt;/a&gt;&lt;/abbr&gt; easier to implement (because right now it’s just plain &lt;em&gt;hard&lt;/em&gt;). We can let Twitter be secondary and our own blogs primary as a way of setting an example. We can do the hard technical work of figuring out something like real-time, decentralized, better-than-ping-back commenting-and-threading-and-responding for all sorts of content on the web.&lt;/p&gt;
&lt;p&gt;But even solving those technical problems will require us to recognize that the bigger and more important problems are &lt;em&gt;human&lt;/em&gt; problems. It’s going to require distinguishing, for example, between &lt;a href="https://medium.com/matter/the-web-we-have-to-save-2eb1fe15a426"&gt;the web we have to save&lt;/a&gt; and &lt;a href="http://www.chriskrycho.com/2016/12-31-0817.html"&gt;mere ephemera&lt;/a&gt;. If there are goods of how-blogging-was-in-2008 that are worth keeping, what if anything do they have to do with whether the content of nearly any Twitter account is “owned” by the user who generated them? Will the user care, two decades from now? (Or two days?)&lt;/p&gt;
&lt;p&gt;Put another way, we need to care about the open web not in some general or abstract sense, and certainly not just on its technical merits, but instead—and quite specifically—as one means of serving other people. If we cannot express it in those terms, we show that we do not understand the real problems at all. It wouldn’t be the first time a bunch of technically-oriented nerds missed the boat.&lt;/p&gt;
</content><category term="writing"></category><category term="open web"></category></entry><entry><title>TypeScript keyof Follow-Up</title><link href="http://www.chriskrycho.com/2017/typescript-keyof-follow-up.html" rel="alternate"></link><published>2017-01-03T20:35:00-05:00</published><updated>2017-01-08T17:47:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-01-03:/2017/typescript-keyof-follow-up.html</id><summary type="html">&lt;p&gt;I recently wrote up some neat things you can do with &lt;a href="http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html"&gt;&lt;code&gt;keyof&lt;/code&gt; and mapped types&lt;/a&gt; in TypeScript 2.1. In playing further with those bits, I ran into some interesting variations on the approach I outlined there, so here we are.&lt;/p&gt;
&lt;p&gt;In the previous post, I concluded with an example …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently wrote up some neat things you can do with &lt;a href="http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html"&gt;&lt;code&gt;keyof&lt;/code&gt; and mapped types&lt;/a&gt; in TypeScript 2.1. In playing further with those bits, I ran into some interesting variations on the approach I outlined there, so here we are.&lt;/p&gt;
&lt;p&gt;In the previous post, I concluded with an example that looked like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type UnionKeyToValue&amp;lt;U extends string&amp;gt; = {
  [K in U]: K
};

type State
  = &amp;#39;Pending&amp;#39;
  | &amp;#39;Started&amp;#39;
  | &amp;#39;Completed&amp;#39;;

// Use `State` as the type parameter to `UnionKeyToValue`.
const STATE: UnionKeyToValue&amp;lt;State&amp;gt; = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That &lt;code&gt;UnionKeyToValue&amp;lt;State&amp;gt;&lt;/code&gt; type constraint requires us to fill out the &lt;code&gt;STATE&lt;/code&gt; object as expected. The whole point of this exercise was to give us the benefit of code completion with that STATE type so we could use it and not be worried about the kinds of typos that too-often bite us with stringly-typed arguments in JavaScript.&lt;/p&gt;
&lt;p&gt;It turns out we don’t &lt;em&gt;need&lt;/em&gt; that to get completion, though. All editors which use the TypeScript language service will give us the same degree of completion if we start typing a string and then trigger completion:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://cdn.chriskrycho.com/images/more-ts.gif" title="screen capture of string completion in VS Code" alt="string completion with TypeScript 2.1" /&gt;&lt;figcaption&gt;string completion with TypeScript 2.1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Granted that you have to know this is a string (though the JetBrains &lt;abbr title="integrated development environment"&gt;IDE&lt;/abbr&gt;s will actually go a step further and suggest the right thing &lt;em&gt;without&lt;/em&gt; needing the string key). But that’s roughly equivalent to knowing you need to import the object literal constant to get the completion that way. Six one, half dozen the other, I think.&lt;/p&gt;
&lt;p&gt;This makes it something of a wash with the original approach, as long as you’re dealing in a pure-TypeScript environment. The big advantage that the original approach still has, of course, is that it also plays nicely with a mixed TypeScript and JavaScript environment. If you’re just progressively adding TypeScript to an existing JavaScript codebase, that’s possibly reason enough to stick with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: an additional reason to prefer my original solution:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;
&lt;p lang="en" dir="ltr"&gt;
&lt;a href="https://twitter.com/chriskrycho"&gt;@chriskrycho&lt;/a&gt; &lt;a href="https://twitter.com/typescriptlang"&gt;@typescriptlang&lt;/a&gt; I think a benefit of your previous solution is that you can rename keys and all their usages.
&lt;/p&gt;
— Timm (@timmpreetz) &lt;a href="https://twitter.com/timmpreetz/status/816672215924097024"&gt;January 4, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content><category term="programming languages"></category><category term="software development"></category><category term="typescript"></category><category term="javascript"></category></entry><entry><title>On ebooks (again)</title><link href="http://www.chriskrycho.com/2017/on-ebooks-again.html" rel="alternate"></link><published>2017-01-02T07:55:00-05:00</published><updated>2017-01-02T07:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-01-02:/2017/on-ebooks-again.html</id><summary type="html">&lt;p&gt;Yesterday, I &lt;a href="https://twitter.com/chriskrycho/status/815583525177004032"&gt;tweet-complained&lt;/a&gt; about Lifeway’s ebook policy; posted &lt;a href="http://www.chriskrycho.com/2017/01-01-1056.html"&gt;here&lt;/a&gt; on this site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record: &lt;a href="https://twitter.com/LifeWay"&gt;@LifeWay&lt;/a&gt; has the single most user-hostile ebook policy I’ve encountered anywhere. Shame on whoever made these decisions. &lt;a href="https://twitter.com/chriskrycho/status/815583525177004032"&gt;∞&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They &lt;a href="https://twitter.com/LifeWay/status/815665143388442624"&gt;invited feedback&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho"&gt;@chriskrycho&lt;/a&gt; We’re sorry you feel this way. Please DM us the specifics …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Yesterday, I &lt;a href="https://twitter.com/chriskrycho/status/815583525177004032"&gt;tweet-complained&lt;/a&gt; about Lifeway’s ebook policy; posted &lt;a href="http://www.chriskrycho.com/2017/01-01-1056.html"&gt;here&lt;/a&gt; on this site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record: &lt;a href="https://twitter.com/LifeWay"&gt;@LifeWay&lt;/a&gt; has the single most user-hostile ebook policy I’ve encountered anywhere. Shame on whoever made these decisions. &lt;a href="https://twitter.com/chriskrycho/status/815583525177004032"&gt;∞&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They &lt;a href="https://twitter.com/LifeWay/status/815665143388442624"&gt;invited feedback&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho"&gt;@chriskrycho&lt;/a&gt; We’re sorry you feel this way. Please DM us the specifics of your concern. We are always trying to improve. &lt;a href="https://twitter.com/LifeWay/status/815665143388442624"&gt;∞&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So they got it. But since the content of my response is not specific to Lifeway—I’ve seen the same kind of user/customer-hostile behavior in many places, albeit not to the same degree—I thought I’d repost it publicly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Per your request, sending some info about ebooks. To be clear, I know whoever runs the social media account is &lt;em&gt;far&lt;/em&gt; removed from this kind of decision, and I don’t hold anyone but the corporate decision-makers remotely responsible.&lt;/p&gt;
&lt;p&gt;The current status on ebooks purchased at LifeWay is that you can read them only in the dedicated LifeWay app or in a web view (the latter of which is, frankly, terrible—both as a consumer of many such apps and as a web software developer).&lt;/p&gt;
&lt;p&gt;Experientially, this makes for a massively more frustrating experience for the user. There is no reason why a customer should not be able to read the book on her Kindle, his Kobo, her Dell PC, his Mac, etc. except the idea that it will somehow “prevent piracy” to do so.&lt;/p&gt;
&lt;p&gt;Empirically, however, these kinds of moves &lt;em&gt;do not&lt;/em&gt; prevent piracy. Any and all DRM methods can and will be cracked (and indeed have been).&lt;/p&gt;
&lt;p&gt;The net result, then, is a massive inconvenience to customers, with no actual increase in sales for the distributor.&lt;/p&gt;
&lt;p&gt;For some corroborating evidence in this direction, please see &lt;a href="http://www.tor.com/2013/04/29/tor-books-uk-drm-free-one-year-later/"&gt;here&lt;/a&gt;. Note especially this comment (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Protecting our author’s intellectual copyright will always be of a key concern to us and we have very stringent anti-piracy controls in place. But DRM-protected titles are still subject to piracy, and we believe a great majority of readers are just as against piracy as publishers are, understanding that piracy impacts on an author’s ability to earn an income from their creative work. &lt;strong&gt;&lt;em&gt;As it is, we’ve seen no discernible increase in piracy on any of our titles, despite them being DRM-free for nearly a year.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please respect your customers. Let us put the ebooks in whatever reading app or device we choose.&lt;/p&gt;
&lt;p&gt;And please also understand that until you do so, I will go out my way to warn people off of buying &lt;em&gt;any&lt;/em&gt; ebook from Lifeway, because the current approach is so consumer-hostile.&lt;/p&gt;
&lt;p&gt;Again, I understand entirely that the folks running social media have nothing to do with these policies; I hope you’re able to pass it along to those who can and do. Have a great 2017!&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="from-my-outbox"></category></entry><entry><title>The Itch</title><link href="http://www.chriskrycho.com/2016/the-itch.html" rel="alternate"></link><published>2016-12-19T21:45:00-05:00</published><updated>2016-12-19T21:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-19:/2016/the-itch.html</id><summary type="html">Learning functional programming has been simultaneously wildly new and deeply familiar. It's the answer to questions I've been asking for most of a decade.
</summary><content type="html">&lt;p&gt;It took me until just a few weeks ago to put my finger on why typed functional programming, as a style and approach, has appealed to me so much as I started picking it up over the last year. For all its novelty, typed FP feels—over and over again—&lt;em&gt;familiar&lt;/em&gt;. Strange to say, but it’s true.&lt;/p&gt;
&lt;p&gt;This came home to me again when reading a &lt;a href="https://medium.com/@dtinth/what-is-a-functor-dcf510b098b6#.e887yz63p"&gt;short post on functors&lt;/a&gt;—i.e., &lt;em&gt;mappable&lt;/em&gt; types. I’ve written a lot of JavaScript in the last few years, and it has been a source of constant frustration to me that &lt;code&gt;Array&lt;/code&gt; implements the &lt;code&gt;map&lt;/code&gt; method, but &lt;code&gt;Object&lt;/code&gt; does not. Countless times, I have wanted to take an object shaped like &lt;code&gt;{ count: &amp;lt;number&amp;gt; }&lt;/code&gt; and transform that &lt;code&gt;count&lt;/code&gt;. I’m not alone in that. There’s a reason that libraries like &lt;a href="http://underscorejs.org"&gt;Underscore&lt;/a&gt;, &lt;a href="https://lodash.com"&gt;Lodash&lt;/a&gt;, and &lt;a href="http://ramdajs.com"&gt;Ramda&lt;/a&gt; all supply utilities to allow you to map over objects. There are also good reasons why it &lt;em&gt;isn’t&lt;/em&gt; implemented for on &lt;code&gt;Object.prototype&lt;/code&gt;: the reality is that coming up with a predictable &lt;em&gt;and&lt;/em&gt; useful API for &lt;em&gt;all&lt;/em&gt; &lt;code&gt;Object&lt;/code&gt; instances is difficult at best: Objects are used for everything from dictionaries to records and strange combinations of the two. But still: there’s something there.&lt;/p&gt;
&lt;p&gt;And reading this post on functors, it struck me what that “something” is: object types are, in principle, functors. Maybe it doesn’t make sense to have a single &lt;code&gt;map&lt;/code&gt; implementation for every &lt;code&gt;Object&lt;/code&gt; instance out there. But they’re perfectly mappable. I didn’t have a word for this before tonight, but now I do. Over and over again, this is my experience with functional programming.&lt;/p&gt;
&lt;p&gt;There’s this familiar feeling of frustration I’m slowly coming to recognize—a mental sensation which is a little like the intellectual equivalent of an itch in a spot you can’t quite reach. You’re reaching for an abstraction to express an idea, but you don’t even know that there &lt;em&gt;is&lt;/em&gt; an abstraction for it. You want to map over objects, and you don’t know why that seems so reasonable, but it does. And then someone explains functors to you. It scratches the itch.&lt;/p&gt;
&lt;p&gt;Another example. Since I started programming eight and a half years ago, I’ve worked seriously with Fortran, C, C++ PHP, Python, and JavaScript. In each of those languages (and especially in the C-descended languages), I have found myself reaching for enums or things like them as a way of trying to represent types and states in my system in a more comprehensive way. I figured out that you should &lt;a href="http://wiki.c2.com/?UseEnumsNotBooleans"&gt;use enums not booleans&lt;/a&gt; a long time before I found the advice on the internet. I was encoding error types as enum values instead of just using &lt;code&gt;int&lt;/code&gt;s almost as soon as I started, because it was obvious to me that &lt;code&gt;ErrorCode someFunction() { ... }&lt;/code&gt; was far more meaningful than &lt;code&gt;int someFunction() { ... }&lt;/code&gt; (even if the context of C meant that the latter often implied the former, and even if it was trivial to coerce one to the other).&lt;/p&gt;
&lt;p&gt;Then I read &lt;a href="https://gumroad.com/l/maybe-haskell/"&gt;&lt;em&gt;Maybe Haskell&lt;/em&gt;&lt;/a&gt;, a book I’ve mentioned often on this blog because it was so revelatory for me. This is what I had been reaching for all those years—and then some. Handing data around with the constraints? Yes, please! I had played with unions, enums, structs with enums inside them, anything to try to get some type-level clarity and guarantees about what my code was doing. Haskell showed me the way; and since then Rust and Elm and F# have reinforced it many times over. &lt;a href="https://guide.elm-lang.org/types/union_types.html"&gt;Tagged unions&lt;/a&gt; are a joy. They let me say what I mean—finally.&lt;/p&gt;
&lt;p&gt;I can still feel that itch. It’s shifted a little, but it’s still there: reaching for higher abstractions to let me tell the machine more clearly what I intend. Half a dozen times this year, I’ve realized: &lt;em&gt;Here&lt;/em&gt; is where dependent types would be useful. They’re far beyond me, but close enough now I can see. I’m sure a year from now, I’ll have find some tools to scratch &lt;em&gt;these&lt;/em&gt; itches, only to discover a few more.&lt;/p&gt;
</content><category term="software development"></category><category term="functional programming"></category><category term="Rust"></category><category term="JavaScript"></category></entry><entry><title>keyof and Mapped Types In TypeScript 2.1</title><link href="http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html" rel="alternate"></link><published>2016-12-17T23:25:00-05:00</published><updated>2016-12-18T09:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-17:/2016/keyof-and-mapped-types-in-typescript-21.html</id><summary type="html">&lt;p&gt;In the last few months, I’ve been playing with both &lt;a href="https://flowtype.org"&gt;Flow&lt;/a&gt; and &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; as tools for increasing the quality and reliability of the JavaScript I write at Olo. Both of these are syntax that sits on top of normal JavaScript to add type analysis—basically, a form of &lt;a href="https://en.wikipedia.org/wiki/Gradual_typing"&gt;gradual …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the last few months, I’ve been playing with both &lt;a href="https://flowtype.org"&gt;Flow&lt;/a&gt; and &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; as tools for increasing the quality and reliability of the JavaScript I write at Olo. Both of these are syntax that sits on top of normal JavaScript to add type analysis—basically, a form of &lt;a href="https://en.wikipedia.org/wiki/Gradual_typing"&gt;gradual typing&lt;/a&gt; for JS.&lt;/p&gt;
&lt;p&gt;Although TypeScript’s tooling has been better all along&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I initially preferred Flow’s type system quite a bit: it has historically been much more focused on &lt;a href="http://stackoverflow.com/questions/21437015/soundness-and-completeness-of-systems"&gt;soundness&lt;/a&gt;, especially around the &lt;em&gt;many&lt;/em&gt; problems caused by &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;, than TypeScript. And it had earlier support for &lt;a href="https://flowtype.org/docs/disjoint-unions.html"&gt;tagged unions&lt;/a&gt;, a tool I’ve come to find invaluable since picking them up from my time with Rust.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But the 2.0 and 2.1 releases of TypeScript have changed the game substantially, and it’s now a &lt;em&gt;very&lt;/em&gt; compelling language in its own right—not to mention a great tool for writing better JavaScript. So I thought I’d highlight how you can get a lot of the benefits you would get from the type systems of languages like Elm with some of those new TypeScript features: the &lt;em&gt;&lt;code&gt;keyof&lt;/code&gt; operator&lt;/em&gt; and &lt;em&gt;mapped types&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i&gt;Some readers may note that what I’m doing here is a &lt;em&gt;lot&lt;/em&gt; of wrangling to cajole TypeScript into giving me the kinds of things you get for free in an ML-descended language. Yep. The point is that you &lt;em&gt;can&lt;/em&gt; wrangle it into doing this.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="plain-old-javascript" class="level3"&gt;
&lt;h3&gt;Plain old JavaScript&lt;/h3&gt;
&lt;p&gt;Let’s say we want to write a little state machine in terms of a function to go from one state to the next, like this:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;function nextState(state) {
  switch(state) {
    case &amp;#39;Pending&amp;#39;: return &amp;#39;Started&amp;#39;;
    case &amp;#39;Started&amp;#39;: return &amp;#39;Completed&amp;#39;;
    case &amp;#39;Completed&amp;#39;: return &amp;#39;Completed&amp;#39;;
    default: throw new Error(`Bad state: ${state}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will work, and it’ll even throw an error if you hand it the wrong thing. But you’ll find out at runtime if you accidentally typed &lt;code&gt;nextState('Pednign')&lt;/code&gt; instead of &lt;code&gt;nextState('Pending')&lt;/code&gt;—something I’ve done more than once in the past. You’d have a similar problem if you’d accidentally written &lt;code&gt;case 'Strated'&lt;/code&gt; instead of &lt;code&gt;case 'Started'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are many contexts like this one in JavaScript—perhaps the most obvious being &lt;a href="http://redux.js.org/docs/basics/Actions.html"&gt;Redux actions&lt;/a&gt;, but I get a lot of mileage out of the pattern in Ember, as well. In these contexts, I find it’s convenient to define types that are kind of like pseudo-enums or pseudo-simple-unions, like so:&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;const STATE = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’ve defined an object this way, instead of using strings directly in functions that take it as an argument, like &lt;code&gt;nextState('Started')&lt;/code&gt;, you can use the object property: &lt;code&gt;nextState(STATE.Started)&lt;/code&gt;. You can rewrite the function body to use the object definition instead as well:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;function nextState(state) {
  switch(state) {
    case STATE.Pending: return STATE.Started;
    case STATE.Started: return STATE.Completed;
    case STATE.Completed: return STATE.Completed;
    default: throw new Error(`Bad state: ${state}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the object and its keys instead gets you something like a namespaced constant. As a result, you can get more help with things like code completion from your editor, along with warnings or errors from your linter if you make a typo. You’ll also get &lt;em&gt;slightly&lt;/em&gt; more meaningful error messages if you type the wrong thing. For example, if you type &lt;code&gt;STATE.Strated&lt;/code&gt; instead of &lt;code&gt;STATE.Started&lt;/code&gt;, any good editor will give you an error—especially if you’re using a linter. At Olo, we use &lt;a href="http://eslint.org"&gt;ESLint&lt;/a&gt;, and we have it &lt;a href="https://github.com/ember-cli/ember-cli-eslint/"&gt;set up&lt;/a&gt; so that this kind of typo/linter error fails our test suite (and we never merge changes that don’t pass our test suite!).&lt;/p&gt;
&lt;p&gt;This is about as good a setup as you can get in plain-old JavaScript. As long as you’re disciplined and always use the object, you get some real benefits from using this pattern. But you &lt;em&gt;always&lt;/em&gt; have to be disciplined. If someone who is unfamiliar with this pattern types &lt;code&gt;nextState('whifflebats')&lt;/code&gt; somewhere, well, we’re back to blowing up at runtime. Hopefully your test suite catches that.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="typescript-to-the-rescue" class="level3"&gt;
&lt;h3&gt;TypeScript to the rescue&lt;/h3&gt;
&lt;p&gt;TypeScript gives us the ability to &lt;em&gt;guarantee&lt;/em&gt; that the contract is met (that we’re not passing the wrong value in). As of the latest release, it also lets us guarantee the &lt;code&gt;STATES&lt;/code&gt; object to be set up the way we expect. And last but not least, we get some actual productivity boosts when writing the code, not just when debugging it.&lt;/p&gt;
&lt;p&gt;Let’s say we decided to constrain our &lt;code&gt;nextState&lt;/code&gt; function so that it had to both take and return some kind of &lt;code&gt;State&lt;/code&gt;, representing one of the states we defined above. We’ll leave a &lt;code&gt;TODO&lt;/code&gt; here indicating that we need to figure out how to write the type of &lt;code&gt;State&lt;/code&gt;, but the function definition would look like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// TODO: figure out how to define `State`
function nextState(state: State): State {
  // the same body...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TypeScript has had &lt;a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types"&gt;union types&lt;/a&gt; since the &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-4.html"&gt;1.4 release&lt;/a&gt; so they might seem like an obvious choice, and indeed we could write easily a type definition for the strings in &lt;code&gt;STATES&lt;/code&gt; as a union:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type State = &amp;#39;Pending&amp;#39; | &amp;#39;Started&amp;#39; | &amp;#39;Completed&amp;#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, you can’t write something like &lt;code&gt;State.Pending&lt;/code&gt; somewhere; you have to write the plain string &lt;code&gt;'Pending'&lt;/code&gt; instead. You still get some of the linting benefits you got with the approach outlined above via TypeScript’s actual type-checking, but you don’t get &lt;em&gt;any&lt;/em&gt; help with autocompletion. Can we get the benefits of both?&lt;/p&gt;
&lt;p&gt;Yes! (This would be a weird blog post if I just got this far and said, “Nope, sucks to be us; go use Elm instead.”)&lt;/p&gt;
&lt;p&gt;As of the 2.1 release, TypeScript lets you define types in terms of keys, so you can write a type like this:&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const STATE = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};

type StateFromKeys = keyof typeof STATE;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can use that type any place you need to constrain the type of a variable, or a return, or whatever:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const goodState: StateFromKeys = STATE.Pending;

// error: type &amp;#39;&amp;quot;Blah&amp;quot;&amp;#39; is not assignable to type &amp;#39;State&amp;#39;
const badState: StateFromKeys = &amp;#39;Blah&amp;#39;;

interface StateMachine {
  (state: StateFromKeys): StateFromKeys;
}

const nextState: StateMachine = (state) =&amp;gt; {
  // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The upside to this is that now you can guarantee that anywhere you’re supposed to be passing one of those strings, you &lt;em&gt;are&lt;/em&gt; passing one of those strings. If you pass in &lt;code&gt;'Compelte'&lt;/code&gt;, you’ll get an actual error—just like if we had used the union definition above. At a minimum, that will be helpful feedback in your editor. Maximally, depending on how you have your project configured, it may not even generate any JavaScript output.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; So that’s a significant step forward beyond what we had even with the best linting rules in pure JavaScript.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="going-in-circles" class="level3"&gt;
&lt;h3&gt;Going in circles&lt;/h3&gt;
&lt;p&gt;But wait, we can do more! TypeScript 2.1 &lt;em&gt;also&lt;/em&gt; came with a neat ability to define “mapped types,” which map one object type to another. They have a few &lt;a href="http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html#mapped-types"&gt;interesting examples&lt;/a&gt; which are worth reading. What’s interesting to us here is that you can write a type like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type StateAsMap = {
  [K in keyof typeof STATE]: K
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course, you can simplify that using the type we defined above, since &lt;code&gt;StateFromKeys&lt;/code&gt; was just &lt;code&gt;keyof typeof STATE&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type StateAsMap = {
  [K in StateFromKeys]: K
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ve now defined an object type whose &lt;em&gt;key&lt;/em&gt; has to be one of the items in the &lt;code&gt;State&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;Now, by itself, this isn’t all that useful. Above, we defined that as the keys on the &lt;code&gt;STATE&lt;/code&gt; object, but if we tried to use that in conjunction with this new type definition, we’d just end up with a recursive type definition: &lt;code&gt;StateFromKeys&lt;/code&gt; defined as the keys of &lt;code&gt;STATE&lt;/code&gt;, &lt;code&gt;StateAsMap&lt;/code&gt; defined in terms of the elements of &lt;code&gt;StateFromKeys&lt;/code&gt;, and then &lt;code&gt;STATE&lt;/code&gt; defined as a &lt;code&gt;StateAsMap&lt;/code&gt;…&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const STATE: StateAsMap = {
  Pending: &amp;#39;Pending&amp;#39;,
  Active: &amp;#39;Active&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
}

type StateFromKeys = keyof typeof STATE;

type StateAsMap = {
  [K in StateFromKeys]: K
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You end up with multiple compiler errors here, because of the circular references. This approach won’t work. If we take a step back, though, we can work through this (and actually end up someplace better).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="join-forces" class="level3"&gt;
&lt;h3&gt;Join forces!&lt;/h3&gt;
&lt;p&gt;First, let’s start by defining the mapping generically. After all, the idea here was to be able to use this concept all over the place—e.g. for &lt;em&gt;any&lt;/em&gt; Redux action, not just one specific one. We don’t need this particular &lt;code&gt;State&lt;/code&gt;; we just need a constrained set of strings (or numbers) to be used as the key of an object:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type MapKeyAsValue&amp;lt;Key extends string&amp;gt; = {
  [K in Key]: K
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In principle, if we didn’t have to worry about the circular references, we could use that to constrain our definition of the original &lt;code&gt;STATE&lt;/code&gt; itself:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const STATE: MapKeyAsValue&amp;lt;State&amp;gt; = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So how to get around the problem of circular type definitions? Well, it turns out that the &lt;code&gt;K&lt;/code&gt; values in these &lt;code&gt;StateObjectKeyToValue&lt;/code&gt; and &lt;code&gt;StateUnionKeyToValue&lt;/code&gt; types are equivalent:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// Approach 1, using an object
const STATE = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};

type StateFromKeys = keyof typeof STATE;
type StateObjectKeyToValue = {
  [K in StateFromKeys]: K  // &amp;lt;- K is just the keys!
};

// Approach 2, using unions
type StateUnion = &amp;#39;Pending&amp;#39; | &amp;#39;Started&amp;#39; | &amp;#39;Completed&amp;#39;;
type StateUnionKeyToValue = {
  [K in StateUnion]: K  // &amp;lt;- K is also just the keys!
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that, unlike the &lt;code&gt;StateObjectKeyToValue&lt;/code&gt; version, &lt;code&gt;StateUnionKeyToValue&lt;/code&gt; doesn’t make any reference to the &lt;code&gt;STATE&lt;/code&gt; object. So we can use &lt;code&gt;StateUnionKeyToValue&lt;/code&gt; to constrain &lt;code&gt;STATE&lt;/code&gt;, and then just use &lt;code&gt;StateUnion&lt;/code&gt; to constrain all the places we want to &lt;em&gt;use&lt;/em&gt; one of those states. Once we put it all together, that would look like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type StateUnion = &amp;#39;Pending&amp;#39; | &amp;#39;Started&amp;#39; | &amp;#39;Completed&amp;#39;;

type StateUnionKeyToValue = {
  [K in StateUnion]: K
};

const STATE: StateUnionKeyToValue = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By doing this, we get two benefits. First, &lt;code&gt;STATE&lt;/code&gt; now has to supply the key and value for &lt;em&gt;all&lt;/em&gt; the union’s variants. Second, we know that the key and value are the same, and that they map to the union’s variants. These two facts mean that we can be 100% sure that wherever we define something as requiring a &lt;code&gt;State&lt;/code&gt;, we can supply one of the items on &lt;code&gt;STATE&lt;/code&gt; and it will be guaranteed to be correct. If we change the &lt;code&gt;State&lt;/code&gt; union definition, everything else will need to be updated, too.&lt;/p&gt;
&lt;p&gt;Now we can make this generic, so it works for types besides just this one set of states—so that it’ll work for &lt;em&gt;any&lt;/em&gt; union type with string keys, in fact. (That string-key constraint is important because objects in TypeScript can currently only use strings or numbers as keys; whereas union types can be all sorts of things.) Apart from that constraint on the union, though, we can basically just substitute a generic type parameter &lt;code&gt;U&lt;/code&gt;, for “union,” where we had &lt;code&gt;StateUnion&lt;/code&gt; before.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type UnionKeyToValue&amp;lt;U extends string&amp;gt; = {
  [K in U]: K
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then any object we say conforms to this type will take a union as its type parameter, and every key on the object must have exactly the same value as the key name:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type State = &amp;#39;Pending&amp;#39; | &amp;#39;Started&amp;#39; | &amp;#39;Completed&amp;#39;;

// Use `State` as the type parameter to `UnionKeyToValue`.
const STATE: UnionKeyToValue&amp;lt;State&amp;gt; = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If any of those don’t have &lt;em&gt;exactly&lt;/em&gt; the same value as the key name, you’ll get an error. So, each of the following value assignments would fail to compile, albeit for different reasons (top to bottom: capitalization, misspelling, and missing a letter).&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const BAD_STATE: UnionKeyToValue&amp;lt;State&amp;gt; = {
  Pending: &amp;#39;pending&amp;#39;,  // look ma, no capitals
  Started: &amp;#39;Strated&amp;#39;,  // St-rated = whuh?
  Completed: &amp;#39;Complete&amp;#39;,  // so tense
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll see a compiler error that looks something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;[ts]&lt;br /&gt;
Type ‘{ Pending: “pending”; Started: “Strated”; Completed: “Complete” }’ is not assignable to type ‘UnionKeyToValue&lt;State&gt;’.&lt;br /&gt;
  Types of property ‘Pending’ are incompatible.&lt;br /&gt;
    Type ‘“pending”’ is not assignable to type ‘“Pending”’.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since the key and the name don’t match, the compiler tells us we didn’t keep the constraint we defined on what these types should look like. Similarly, if you forget an item from the union, you’ll get an error. If you add an item that isn’t in the original union, you’ll get an error. Among other things, this means that you can be confident that if you add a value to the union, the rest of your code won’t compile until you include cases for it. You get all the power and utility of using union types, &lt;em&gt;and&lt;/em&gt; you get the utility of being able to use the object as a namespace of sorts.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And the TypeScript language service—which you can use from a &lt;em&gt;lot&lt;/em&gt; of editors, including VS Code, Atom, Sublime Text, and the JetBrains IDEs—will actually give you the correct completion when you start definition a type. So imagine we were defining some other union type elsewhere in our program to handle events. Now we can use the same &lt;code&gt;UnionKeyToValue&lt;/code&gt; type to construct this type, with immediate, &lt;em&gt;correct&lt;/em&gt; feedback from the TypeScript language service:&lt;/p&gt;
&lt;figure&gt;
&lt;video autoplay=autoplay muted=muted playsinline=playsinline loop=loop&gt;
&lt;source type='video/mp4' src='http://cdn.chriskrycho.com/images/completion.mp4'&gt;
&lt;/video&gt;
&lt;figcaption&gt;
TypeScript live code completion of the mapped type
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;By inverting our original approach of using &lt;code&gt;keyof&lt;/code&gt; (itself powerful and worth using in quite a few circumstances) and instead using the new mapped types, we get a &lt;em&gt;ton&lt;/em&gt; of mileage in terms of productivity when using these types—errors prevented, and speed of writing the code in the first place increased as well.&lt;/p&gt;
&lt;p&gt;Yes, it’s a little verbose and it does require duplicating the strings whenever you define one of these types.&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; But, and this is what I find most important: there is only one &lt;em&gt;source&lt;/em&gt; for those string keys, the union type, and it is definitive. If you change that central union type, everything else that references it, including the namespace-like object, will fail to compile until you make the same change there.&lt;/p&gt;
&lt;figure&gt;
&lt;video autoplay=autoplay muted=muted playsinline=playsinline loop=loop&gt;
&lt;source type='video/mp4' src='http://cdn.chriskrycho.com/images/change-union.mp4'&gt;
&lt;/video&gt;
&lt;figcaption&gt;
Updating a union
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So it’s a lot more work than it would be in, say, Elm. But it’s also a lot more guarantees than I’d get in plain-old-JavaScript, or even TypeScript two months ago.&lt;/p&gt;
&lt;p&gt;I’ll call that a win.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;it’s no surprise that Microsoft’s developer tooling is stronger than Facebook’s&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;along with all the other ML-descended languages I’ve played with, including Haskell, F&lt;sup&gt;♯&lt;/sup&gt;, PureScript, and Elm.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Aside: to be extra safe and prevent any confusion or mucking around, you should probably call &lt;code&gt;Object.freeze()&lt;/code&gt; on the object literal, too:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;const STATE = Object.freeze({
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both convention and linters make it unlikely you’ll modify something like this directly—but impossible is better than unlikely.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Flow has supported this feature for some time; you can write &lt;code&gt;$Keys&amp;lt;typeof STATE&amp;gt;&lt;/code&gt;—but the feature is entirely undocumented.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Set your &lt;code&gt;&amp;quot;compilerOptions&amp;quot;&lt;/code&gt; key in your &lt;code&gt;tsconfig.json&lt;/code&gt; to include &lt;code&gt;&amp;quot;noEmitOnError&amp;quot;: true,&lt;/code&gt;.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;For namespacing in a more general sense, you should use… &lt;a href="http://www.typescriptlang.org/docs/handbook/namespaces.html"&gt;namespaces&lt;/a&gt;.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;It would be great if we could get these benefits without the duplication—maybe someday we’ll have better support in JS or TS natively.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="javascript"></category><category term="typescript"></category><category term="software development"></category><category term="programming languages"></category></entry><entry><title>Rust development using VS Code on OS X, debugging included</title><link href="http://www.chriskrycho.com/2016/rust-development-using-vs-code-on-os-x-debugging-included.html" rel="alternate"></link><published>2016-11-18T20:48:00-05:00</published><updated>2016-11-18T20:48:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-11-18:/2016/rust-development-using-vs-code-on-os-x-debugging-included.html</id><summary type="html">&lt;p&gt;&lt;a href="https://medium.com/@royalstream/rust-development-using-vs-code-on-os-x-debugging-included-bc10c9863777#.wgjbgie5a"&gt;Super handy guide for getting a debugging/IDE environment set up for Rust.&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://medium.com/@royalstream/rust-development-using-vs-code-on-os-x-debugging-included-bc10c9863777#.wgjbgie5a"&gt;Super handy guide for getting a debugging/IDE environment set up for Rust.&lt;/a&gt;&lt;/p&gt;
</content><category term="software development"></category><category term="rust"></category><category term="links"></category></entry><entry><title>Using Rust for ‘Scripting’</title><link href="http://www.chriskrycho.com/2016/using-rust-for-scripting.html" rel="alternate"></link><published>2016-11-14T22:00:00-05:00</published><updated>2016-11-15T09:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-11-14:/2016/using-rust-for-scripting.html</id><summary type="html">Why I might use Rust instead of Python, with walkthroughs for building a simple "script"-like program and a guide for cross-compiling Rust code to Windows from macOS.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;&lt;strong&gt;Edit&lt;/strong&gt;: fixed some typos, cleaned up implementation a bit based on feedback around the internet.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;A lightly edited version of this post was syndicated in &lt;a href="https://hackerbits.com/chris-krycho-using-rust-for-scripting/"&gt;Hacker Bits, Issue 13&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="i.-using-rust-instead-of-python" class="level2"&gt;
&lt;h2&gt;I. Using Rust Instead of Python&lt;/h2&gt;
&lt;p&gt;A friend asked me today about writing a little script to do a simple conversion of the names of some files in a nested set of directories. Everything with one file extension needed to get another file extension. After asking if it was the kind of thing where he had time to and/or wanted to learn how to do it himself (always important when someone has expressed that interest more generally), I said, “Why don’t I do this in Rust?”&lt;/p&gt;
&lt;p&gt;Now, given the description, you might think, &lt;i class=thought&gt;Wouldn’t it make more sense to do that in Python or Perl or even just a shell script?&lt;/i&gt; And the answer would be: it depends—on what the target operating system is, for example, and what the person’s current setup is. I knew, for example, that my friend is running Windows, which means he doesn’t have Python or Perl installed. I’m not a huge fan of either batch scripts or PowerShell (and I don’t know either of them all that well, either).&lt;/p&gt;
&lt;p&gt;I could have asked him to install Python. But, on reflection, I thought: &lt;i class=thought&gt;Why would I do that? I can write this in Rust.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Writing it in Rust means I can compile it and hand it to him, and he can run it. And that’s it. As wonderful as they are, the fact that languages like Python, Perl, Ruby, JavaScript, etc. require having the runtime bundled up with them makes just shipping a tool a lot harder—&lt;em&gt;especially&lt;/em&gt; on systems which aren’t a Unix derivative and don’t have them installed by default. (Yes, I know that &lt;em&gt;mostly&lt;/em&gt; means Windows, but it doesn’t &lt;em&gt;solely&lt;/em&gt; mean Windows. And, more importantly: the vast majority of the desktop-type computers in the world &lt;em&gt;still run Windows&lt;/em&gt;. So that’s a big reason all by itself.)&lt;/p&gt;
&lt;p&gt;So there’s the justification for shipping a compiled binary. Why Rust specifically? Well, because I’m a fanboy. (But I’m a fanboy because Rust often gives you roughly the feel of using a high-level language like Python, but lets you ship standalone binaries. The same is true of a variety of other languages, too, like Haskell; but Rust is the one I know and like right now.)&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;&lt;strong&gt;Edit the second:&lt;/strong&gt; this is getting a lot of views from Hacker News, and it’s worth note: I’m not actually advocating that everyone stop using shell scripts for this kind of thing. I’m simply noting that it’s &lt;em&gt;possible&lt;/em&gt; (and sometimes even &lt;em&gt;nice&lt;/em&gt;) to be able to do this kind of thing in Rust, cross-compile it, and just ship it. And hey, types are nice when you’re trying to do more sophisticated things than I’m doing here! Also, for those worried about running untrusted binaries: I handed my friend the code, and would happily teach him how to build it.&lt;/i&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ii.-building-a-simple-script" class="level2"&gt;
&lt;h2&gt;II. Building a Simple “Script”&lt;/h2&gt;
&lt;p&gt;Building a “script”-style tool in Rust is pretty easy, gladly. I’ll walk through exactly what I did to create this “script”-like tool for my friend. My goal here was to rename every file in a directory from &lt;code&gt;*.cha&lt;/code&gt; to &lt;code&gt;*.txt&lt;/code&gt;.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.rust-lang.org/en-US/downloads.html"&gt;Install Rust.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new binary:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;cargo new --bin rename-it&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the dependencies to the Cargo.toml file. I used the &lt;a href="https://doc.rust-lang.org/glob/glob/index.html"&gt;glob&lt;/a&gt; crate for finding all the &lt;code&gt;.cha&lt;/code&gt; files and the &lt;a href="https://clap.rs"&gt;clap&lt;/a&gt; crate for argument parsing.&lt;/p&gt;
&lt;pre class="toml"&gt;&lt;code&gt;[package]
name = &amp;quot;rename-it&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
authors = [&amp;quot;Chris Krycho &amp;lt;chris@chriskrycho.com&amp;gt;&amp;quot;]

[dependencies]
clap = &amp;quot;2.15.0&amp;quot;
glob = &amp;quot;0.2&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the actual implementation to the &lt;code&gt;main.rs&lt;/code&gt; file (iterating till you get it the way you want, of course).&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;extern crate clap;
extern crate glob;

use glob::glob;
use std::fs;

use clap::{Arg, App, AppSettings};


fn main() {
  let path_arg_name = &amp;quot;path&amp;quot;;
  let args = App::new(&amp;quot;cha-to-txt&amp;quot;)
    .about(&amp;quot;Rename .cha to .txt&amp;quot;)
    .setting(AppSettings::ArgRequiredElseHelp)
    .arg(Arg::with_name(path_arg_name)
      .help(&amp;quot;path to the top directory with .cha files&amp;quot;))
    .get_matches();

  let path = args.value_of(path_arg_name)
    .expect(&amp;quot;You didn&amp;#39;t supply a path&amp;quot;);
  let search = String::from(path) + &amp;quot;/**/*.cha&amp;quot;;
  let paths = glob(&amp;amp;search)
    .expect(&amp;quot;Could not find paths in glob&amp;quot;)
    .map(|p| p.expect(&amp;quot;Bad individual path in glob&amp;quot;));

  for path in paths {
    match fs::rename(&amp;amp;path, &amp;amp;path.with_extension(&amp;quot;txt&amp;quot;)) {
      Ok(_) =&amp;gt; (),
      Err(reason) =&amp;gt; panic!(&amp;quot;{}&amp;quot;, reason),
    };
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile it.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;cargo build --release&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the executable to hand to a friend.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my case, I actually added in the step of &lt;em&gt;recompiling&lt;/em&gt; it on Windows after doing all the development on macOS. This is one of the real pieces of magic with Rust: you can &lt;em&gt;easily&lt;/em&gt; write cross-platform code. The combination of Cargo and native-compiled-code makes it super easy to write this kind of thing—and, honestly, easier to do so in a cross-platform way than it would be with a traditional scripting language.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But what’s really delightful is that we can do better. I don’t even need to install Rust on Windows to compile a Rust binary for Windows.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="iii.-cross-compiling-to-windows-from-macos" class="level2"&gt;
&lt;h2&gt;III. Cross-Compiling to Windows from macOS&lt;/h2&gt;
&lt;p&gt;Once again, let’s do this step by step. Three notes: First, I got pretty much everything other than the first and last steps here from WindowsBunny on the &lt;a href="https://botbot.me/mozilla/rust/"&gt;#rust&lt;/a&gt; &lt;abbr&gt;IRC&lt;/abbr&gt; channel. (If you’ve never hopped into #rust, you should: it’s amazing.) Second, you’ll need a Windows installation to make this work, as you’ll need some libraries. (That’s a pain, but it’s a one-time pain.) Third, this is the setup for doing in on macOS Sierra; steps may look a little different on an earlier version of macOS or on Linux.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Install the Windows compilation target with &lt;code&gt;rustup&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;rustup target add x86_64-pc-windows-msvc&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the required linker (&lt;a href="http://lld.llvm.org"&gt;&lt;code&gt;lld&lt;/code&gt;&lt;/a&gt;) by way of installing the LLVM toolchain.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;brew install llvm&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a symlink somewhere on your &lt;code&gt;PATH&lt;/code&gt; to the newly installed linker, specifically with the name &lt;code&gt;link.exe&lt;/code&gt;. I have &lt;code&gt;~/bin&lt;/code&gt; on my &lt;code&gt;PATH&lt;/code&gt; for just this kind of thing, so I can do that like so:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ln -s /usr/local/opt/llvm/bin/lld-link ~/bin/link.exe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(We have to do this because the Rust compiler &lt;a href="https://github.com/rust-lang/rust/blob/master/src/librustc_trans/back/msvc/mod.rs#L300"&gt;specifically goes looking for &lt;code&gt;link.exe&lt;/code&gt; on non-Windows targets&lt;/a&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the target files for the Windows build to link against. Those are in these directories, where &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt; will be a number like &lt;code&gt;10586.0&lt;/code&gt; or similar (you should pick the highest one if there is more than one):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Program Files\Windows Kits\10\Lib\10.0.&amp;lt;something&amp;gt;\ucrt\x64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Program Files\Windows Kits\10\Lib\10.0.&amp;lt;something&amp;gt;\um\x64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\lib\amd64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that if you don’t already have &lt;abbr&gt;MSVC&lt;/abbr&gt; installed, you’ll need to install it. If you don’t have Visual Studio installed on a Windows machine &lt;em&gt;at all&lt;/em&gt;, you can do that by using the links &lt;a href="http://landinghub.visualstudio.com/visual-cpp-build-tools"&gt;here&lt;/a&gt;. Otherwise, on Windows, go to &lt;strong&gt;Add/Remove Programs&lt;/strong&gt; and opting to Modify the Visual Studio installation. There, you can choose to add the C++ tools to the installation.&lt;/p&gt;
&lt;p&gt;Note also that if you’re building for 32-bit Windows you’ll want to grab &lt;em&gt;those&lt;/em&gt; libraries instead of the 64-bit libraries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the &lt;code&gt;LIB&lt;/code&gt; environment variable to include those paths and build the program. Let’s say you put them in something like &lt;code&gt;/Users/chris/lib/windows&lt;/code&gt; (which is where I put mine). Your Cargo invocation will look like this:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;env LIB=&amp;quot;/Users/chris/lib/windows/ucrt/x64/;/Users/chris/lib/windows/um/x64/;/Users/chris/lib/windows/VC_lib/amd64/&amp;quot; \
cargo build --release --target=x86_64-pc-windows-msvc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the final &lt;code&gt;/&lt;/code&gt; on each path and the enclosing quotation marks are all important!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the binary to hand to a friend, without ever having had to leave your Mac.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To be sure, there was a little extra work involved in getting cross-compilation set up. (This is the kind of thing I’d love to see further automated with &lt;code&gt;rustup&lt;/code&gt; in 2017!) But what we have at the end is pretty magical. Now we can just compile cross-platform code and hand it to our friends.&lt;/p&gt;
&lt;p&gt;Given that, I expect not to be using Python for these kinds of tools much going forward.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Again: you can do similar with Haskell or OCaml or a number of other languages. And those are great options; they are in &lt;em&gt;some&lt;/em&gt; ways easier than Rust—but Cargo is really magical for this.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="software development"></category><category term="programming languages"></category></entry><entry><title>What is Functional Programming?</title><link href="http://www.chriskrycho.com/2016/what-is-functional-programming.html" rel="alternate"></link><published>2016-11-11T22:30:00-05:00</published><updated>2016-11-14T07:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-11-11:/2016/what-is-functional-programming.html</id><summary type="html">Functional programming—though not a panacea—is a really great tool to have in our toolbelt. (And you don’t have to be a mathematician to use it.)
</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;The following is a script I wrote for a tech talk I gave on functional programming. The recording isn’t (and won’t be) publicly available; but a script is often easier to reference anyway!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='editorial'&gt;&lt;strong&gt;Edit:&lt;/strong&gt; updated with corrected performance characterstics.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Hello, everyone. Today, we are going to talk about functional programming—asking what it is, and why we should care.&lt;/p&gt;
&lt;section id="clearing-the-table-functional-programmings-reputation" class="level2"&gt;
&lt;h2&gt;Clearing the Table: Functional Programming’s Reputation&lt;/h2&gt;
&lt;p&gt;Functional programming has something of a reputation: on the one hand, as incredible difficult, dense, full of mathematical jargon, applicable only to certain fields like machine learning or massive data analysis; on the other hand, as a kind of panacea that solves all of your problems. The reality, I think, is a little bit of both.&lt;/p&gt;
&lt;p&gt;The world of functional programming &lt;em&gt;does&lt;/em&gt; include a lot of jargon from the math world, and there are good reasons for that, but there is also a lot we could do to make it more approachable to people who don’t have a background in, say category. Category theory is useful, of course, and I think there are times when we might want to be able to draw on it. But gladly, functional programming doesn’t require you to know what an &lt;em&gt;applicative functor&lt;/em&gt; is to be able to use it. (And, gladly, there’s a lot of increasingly-solid teaching material out there about functional programming which &lt;em&gt;doesn’t&lt;/em&gt; lean on math concepts.)&lt;/p&gt;
&lt;p&gt;On the other side, functional programming does give us some real and serious benefits, and that’s what I’m going to spend the first third or so of this talk looking at. But of course, it’s still just a tool, and even though it is a very helpful and very powerful tool, it can’t keep us from writing bugs. Still, every tool we can add to our belt for writing correct software is a win.&lt;/p&gt;
&lt;p&gt;One more prefatory note before we get into the meat of this talk: unfamiliar terminology is not specific to functional programming. So, yes, when you see this list, it might seem a little out there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functor&lt;/li&gt;
&lt;li&gt;Applicative&lt;/li&gt;
&lt;li&gt;Monoid&lt;/li&gt;
&lt;li&gt;Monad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And in truth, a number of those could have better names. &lt;em&gt;But&lt;/em&gt; we have plenty of terminology we throw around in the world of imperative, object-oriented programming. To pick just one, obvious and easy example—what are the &lt;abbr&gt;SOLID&lt;/abbr&gt; principles?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single reponsibility&lt;/li&gt;
&lt;li&gt;Open/closed&lt;/li&gt;
&lt;li&gt;Liskov substitution&lt;/li&gt;
&lt;li&gt;Interface segregation&lt;/li&gt;
&lt;li&gt;Dependency inversion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may not remember what it felt like the first time you encountered &lt;abbr&gt;SOLID&lt;/abbr&gt;, but suffice it to say: “Liskov substitution principle” isn’t any more intuitive or obvious than “Monad”. You’re just familiar with one of them. The same is true of “applicative” and “Visitor pattern”. And so on. Granted, again: it would be nice for some of these things to have easier names, a &lt;em&gt;big&lt;/em&gt; part of the pain here is just unfamiliarity.&lt;/p&gt;
&lt;p&gt;So, with that out of the way, what &lt;em&gt;is&lt;/em&gt; functional programming?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-functional-programming" class="level2"&gt;
&lt;h2&gt;What is functional programming?&lt;/h2&gt;
&lt;p&gt;Functional programming is a style of programming that uses &lt;em&gt;pure functions&lt;/em&gt; and &lt;em&gt;immutable data&lt;/em&gt; for as many things as possible, and builds programs primarily out of &lt;em&gt;functions&lt;/em&gt; rather than other abstractions. I’ll define all of those terms in a moment, but first…&lt;/p&gt;
&lt;section id="why-do-we-care" class="level3"&gt;
&lt;h3&gt;Why do we care?&lt;/h3&gt;
&lt;p&gt;We care, frankly, because &lt;em&gt;we’re not that smart&lt;/em&gt;. Let’s think about some of the kinds of things we’re doing with, say, restaurant software: clients, with locations, building baskets, composed of products with options and modifiers, which have a set of rules for what combinations are allowed both of products and of their elements as making up a basket, which turn into orders, which have associated payment schemes (sometimes a lot of them), which generate data to send to a point-of-sale as well as summaries for the customer who ordered it, and so on. There are a &lt;em&gt;lot&lt;/em&gt; of moving pieces there. I’m sure a missed some non-trivial pieces, too. And if all of that is &lt;em&gt;stateful&lt;/em&gt;, that’s a lot of state to hold in your head.&lt;/p&gt;
&lt;p&gt;Let me be a bit provocative for a moment. Imagine you were reading a JavaScript module and it looked like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;var foo = 12;
var bar = &amp;#39;blah&amp;#39;;
var quux = { waffles: &amp;#39;always&amp;#39; };

export function doSomething() {
  foo = 42;
}

export function getSomething() {
  bar = quux;
  quux.waffles = &amp;#39;never&amp;#39;;
  return bar;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everyone watching would presumably say, “No that’s bad, don’t do that!” Why? Because there is &lt;em&gt;global state&lt;/em&gt; being changed by those functions, and there’s nothing about the functions which tells you what’s going on. Global variables are bad. Bad bad bad. We all know this. Why is it bad? Because you have no idea when you call &lt;code&gt;doSomething()&lt;/code&gt; or &lt;code&gt;getSomething()&lt;/code&gt; what kinds of side effects it might have. And if &lt;code&gt;doSomething()&lt;/code&gt; and &lt;code&gt;getSomething()&lt;/code&gt; affect the same data, then the order you call them in matters.&lt;/p&gt;
&lt;p&gt;In a previous job, I spent literally months chasing a bunch of bugs in a C codebase where all of the state was global. &lt;em&gt;We don’t do this anymore.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But really, what’s different about this?&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;class AThing {
  constructor() {
    this.foo = 12;
    this.bar = &amp;#39;blah&amp;#39;;
    this.quux = { waffles: &amp;#39;always&amp;#39; };
  }

  doSomething() {
    this.foo = 42;
  }

  getSomething() {
    this.bar = this.quux;
    this.quux.waffles = &amp;#39;never&amp;#39;;
    return this.bar;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have some “internal” data, just like we had in the module up above. And we have some public methods which change that state. In terms of these internals, it’s the same. There are differences in terms of having &lt;em&gt;instances&lt;/em&gt; and things like that, but in terms of understanding the behavior of the system—understanding the state involved—it’s the same. It’s global, mutable state. Now it’s not global like attaching something to the &lt;code&gt;window&lt;/code&gt; object in JavaScript, and that’s good, but still: at the module or class level, it’s just global mutable state, with no guarantees about how anything works. And this is normal—endemic, even—in object-oriented code. We encapsulate our state, but we have &lt;em&gt;tons&lt;/em&gt; of state, it’s all mutable, and as far as any given class method call is concerned, it’s all global to that class.&lt;/p&gt;
&lt;p&gt;You have no idea, when you call a given object method, what it might do. The fact that you call it with an &lt;code&gt;Int&lt;/code&gt; and get out a &lt;code&gt;String&lt;/code&gt; tells you almost nothing. For all you know, it’s triggering a &lt;abbr&gt;JSON-RPC&lt;/abbr&gt; call using the int as the &lt;abbr&gt;ID&lt;/abbr&gt; for the endpoint, which in turn triggers an operation, responds with another &lt;abbr&gt;ID&lt;/abbr&gt;, which you then use to query a database, and load a string from there, which you then set on some other member of the object instance, and then return. Should you write a method that does that? Probably not. But you can; nothing stops you.&lt;/p&gt;
&lt;p&gt;When you call a method, you have no idea what it will do. JavaScript, TypeScript, C&lt;sup&gt;♯&lt;/sup&gt;, it doesn’t matter. You have literally no idea. And that makes things &lt;em&gt;hard&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It often makes fixing bugs hard, because it means you have to figure out which particular &lt;em&gt;state&lt;/em&gt; caused the issue, and find a way to reproduce that state. Which usually means calling methods in a particular order.&lt;/li&gt;
&lt;li&gt;It makes testing hard. Again, it often entails calling methods in a particular order. It also means you often need mocks for all those outside-world things you’re trying to do.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functional programming is an out. An escape hatch. An acknowledgement, a recognition, that holding all of this in our heads is too much for us. No one is that smart. And our software, even at its best, is hard to hold in our heads, hard to make sure that our changes don’t break something seemingly unrelated, hard to see how the pieces fit together—hard, in a phrase you’ll often hear from functional programming fans, hard to reason about.&lt;/p&gt;
&lt;p&gt;So, how do we solve these problems? With functional programming!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-functional-programming-1" class="level3"&gt;
&lt;h3&gt;What &lt;em&gt;is&lt;/em&gt; functional programming?&lt;/h3&gt;
&lt;p&gt;Functional programming is basically combining four bigs ideas:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;First class functions&lt;/li&gt;
&lt;li&gt;Higher-order functions&lt;/li&gt;
&lt;li&gt;Pure functions&lt;/li&gt;
&lt;li&gt;Immutable data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The combination of these things leads us to a &lt;em&gt;very&lt;/em&gt; different style of programming than traditional &lt;abbr&gt;OOP&lt;/abbr&gt;. Let’s define them.&lt;/p&gt;
&lt;section id="first-class-functions-and-higher-order-functions" class="level4"&gt;
&lt;h4&gt;First class functions and higher-order functions&lt;/h4&gt;
&lt;p&gt;We’ll start by looking at the things that are probably most familiar to you if you’re a JavaScript developer (even if you haven’t necessarily heard the names): first-class functions and higher-order functions.&lt;/p&gt;
&lt;p&gt;When we talk about &lt;em&gt;first class functions,&lt;/em&gt; we mean that functions are just data—they’re first-class items in the language just like any other type. As such, a function is just another thing you can hand around as an argument to other functions. There’s no distinction between a function and a number or a string or some complex data structure. This is essential because, when you combine it with higher-order functions, it allows for incredible &lt;em&gt;simplicity&lt;/em&gt; and incredible &lt;em&gt;reusability&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Higher-order functions, in turn, are functions which take other functions as parameters or return them as their values. We’ll see this in detail in a worked example in a few, but for right now, let’s just use a really simple example that will be familiar to anyone who’s done much JavaScript: using &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we have a collection like an array and we want to transform every piece of data in it, we could of course do it with a for loop, and with iterable types we could use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;&lt;code&gt;for ... of&lt;/code&gt;&lt;/a&gt;. But with &lt;code&gt;map&lt;/code&gt;, we can just leave the implementation details of &lt;em&gt;how&lt;/em&gt; the items in the array are iterated through, and instead worry about what we want to change. We can do that because &lt;code&gt;map&lt;/code&gt; takes functions as arguments.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const initialValues = [1, 2, 3];
const doubledValues = initialValues.map(value =&amp;gt; value * 2);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We did it there with a function explicitly, but we could just as easily extract the function like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const double = value =&amp;gt; value * 2;
const initialValues = [1, 2, 3];
const doubledValues = initialValues.map(double);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is possible because &lt;em&gt;functions are just data&lt;/em&gt;—they’re first-class members of the language—and therefore &lt;em&gt;functions can be arguments or return values&lt;/em&gt;—the language supports higher-order functions.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pure-functions" class="level4"&gt;
&lt;h4&gt;Pure functions&lt;/h4&gt;
&lt;p&gt;What about &lt;em&gt;pure functions&lt;/em&gt;? Pure functions are functions with &lt;em&gt;no effects&lt;/em&gt;. The input directly translates to the output, every time. The examples we looked at just a moment ago with &lt;code&gt;map&lt;/code&gt; are all pure functions (and it’s a really weird antipattern to use effectful functions with &lt;code&gt;map&lt;/code&gt;! Don’t do that! Use &lt;code&gt;forEach&lt;/code&gt; if you must have an effect). Here are a few more super simple examples:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const add = (a, b) =&amp;gt; a + b;
const toString = (number) =&amp;gt; `The value is ${number}`;
const toLength = (list) =&amp;gt; list.length;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are some examples of straightforward functions which are &lt;em&gt;not&lt;/em&gt; pure:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const logDataFromEndpoint = (endpoint) =&amp;gt; {
  fetch(endpoint).then(response =&amp;gt; {
    console.log(response);
  });
};

let foo = 42;
const setFoo = (newValue) =&amp;gt; {
  foo = newValue;
};

const getFoo = () =&amp;gt; foo;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So a pure function is one whose output is &lt;em&gt;solely&lt;/em&gt; determined by its input That means no talking to a database, no making &lt;abbr&gt;API&lt;/abbr&gt; calls, no reading from or writing to disk.&lt;/p&gt;
&lt;p&gt;And of course, you can’t do anything meaningful with &lt;em&gt;just&lt;/em&gt; pure functions. We need user input, and we need to put the results of our computation somewhere. So the goal isn’t to write &lt;em&gt;only&lt;/em&gt; pure functions. It’s to write &lt;em&gt;mostly&lt;/em&gt; pure functions and to &lt;em&gt;isolate&lt;/em&gt; all impure functions.&lt;/p&gt;
&lt;p&gt;What this gets us is two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;A much smaller list of things to worry about when we’re looking at a given function.&lt;/li&gt;
&lt;li&gt;The ability to &lt;em&gt;compose&lt;/em&gt; functions together more easily.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have fewer things to keep in our heads when we look at any given pure function, because we don’t have to worry at all about whether something it touches has been changed by another function or not. We have inputs. We transform them into outputs. That’s it. Compare these two things in practice.&lt;/p&gt;
&lt;p&gt;Here’s a traditional &lt;abbr&gt;OOP&lt;/abbr&gt; approach:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;class Order {
  constructor() {
    this.subTotal = 0.0;
    this.taxRate = 0.01;
  }

  getTotal() {
    return this.subTotal * (1 + this.taxRate);
  }
}

const order = new Order();
order.subTotal = 42.00;

const total = order.getTotal();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the total is always dependent on what has happened in the object. If we write &lt;code&gt;order.subTotal = 43&lt;/code&gt;, &lt;code&gt;order.total&lt;/code&gt; will change. So if we want to test how &lt;code&gt;total&lt;/code&gt; behaves, or if there’s a bug in it, we need to make sure we’ve made all the appropriate transformations to the object ahead of time. That’s no big deal here; the &lt;code&gt;total&lt;/code&gt; getter is incredibly simple (and in fact, we’d normally just write it with a property getter). But still, we have to construct an order and make sure all the relevant properties are set to get the right value out of &lt;code&gt;getTotal()&lt;/code&gt;. Things outside the method call itself affect what we get back. We have no way to test &lt;code&gt;getTotal()&lt;/code&gt; by itself, and no way to debug it if there’s a bug without first doing some object setup.&lt;/p&gt;
&lt;p&gt;Now, here’s a functional approach.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const order = {
  subTotal: 42.0,
  taxRate: 0.01
}

const getTotal = (subTotal, taxRate) =&amp;gt; subTotal * (1 + taxRate);
const total = getTotal(order.subTotal, order.taxRate);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the object is &lt;em&gt;just data&lt;/em&gt;. It’s a &lt;em&gt;record&lt;/em&gt;. And the function just takes a couple of arguments. If there needed to be a more complicated transformation internally, we could do that just as easily. Note that it also decouples the structure of the data from the actual computation (though we could pass in a record as well if we had a good reason to).&lt;/p&gt;
&lt;p&gt;This makes it easily testable, for free. Want to make sure different tax rates get the correct output? Just… pass in a different tax rate. You don’t have to do any complicated work setting up an object instance first (which is especially important for more complex data types). It also makes it easier to chase down any bugs: the only thing you have to care about is that simple function body. There’s no other state to think about, because there’s no state at all here from the perspective of the function: just inputs and outputs.&lt;/p&gt;
&lt;p&gt;This has one other &lt;em&gt;really&lt;/em&gt; important consequence, which goes by the name &lt;strong&gt;referential transparency&lt;/strong&gt;. All that means is that anywhere you see a pure function, you can always substitute the value it produces, or vice versa. This is quite unlike the &lt;code&gt;Order::getTotal()&lt;/code&gt; method, where (a) it’s attached to an object instance and (b) it’s dependent on other things about that object. You can’t just substitute it in, or freely move it around, when you’re doing a refactor. &lt;em&gt;Maybe&lt;/em&gt; you can, but you’d better hope that all the other state is shuffled around with it correctly. Whereas, with the standalone &lt;code&gt;getTotal()&lt;/code&gt; function, all you need is its arguments, and you’ll always get the same thing back.&lt;/p&gt;
&lt;p&gt;This is just like math: if you say, &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt; = 5&lt;/span&gt; when solving an algebraic equation, you can put &lt;span class="math inline"&gt;5&lt;/span&gt; &lt;em&gt;anywhere you see &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;; or, if it’s useful for factoring the equation or something, you can just as easily put &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; anywhere you see &lt;span class="math inline"&gt;5&lt;/span&gt;. And in math, that’s true for &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; as well. When we use pure functions, it’s true for programming, too! That makes refactoring much easier.&lt;/p&gt;
&lt;p&gt;As we’ll see in the example I walk through in a minute, it also lets us &lt;em&gt;compose&lt;/em&gt; functions together far more easily. If all we have are inputs and outputs, then I can take the output from one function and use it as the input to the next.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="immutable-data" class="level4"&gt;
&lt;h4&gt;Immutable data&lt;/h4&gt;
&lt;p&gt;Complementing the use of mostly pure functions is to use &lt;em&gt;immutable data&lt;/em&gt;. Instead of having objects which we mutate, we create copies of the data as we transform it.&lt;/p&gt;
&lt;p&gt;You’re probably wondering how in the world this can work (and also how you avoid it being incredibly computationally expensive). For the most part, we can rely on two things: smart compilers and runtimes, and the fact that we often don’t need to reuse the &lt;em&gt;exact&lt;/em&gt; same data because we’re transforming it. However, as we’ll see below, in languages which don’t have native support for immutability, it can impose a performance penalty. Gladly, there are ways to work around this!&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="a-worked-example" class="level2"&gt;
&lt;h2&gt;A Worked Example&lt;/h2&gt;
&lt;p&gt;Let’s get down to a real example of these ideas. This is a ‘code kata’ I do every so often. In this particular kata, you get a list of burger orders which looks like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;[
  { condiments: [&amp;#39;ketchup&amp;#39;, &amp;#39;mustard&amp;#39;, &amp;#39;pickles&amp;#39;] },
  { condiments: [&amp;#39;tomatoes&amp;#39;] },
  { condiments: [&amp;#39;mustard&amp;#39;, &amp;#39;ketchup&amp;#39;] },
  // etc...
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’re supposed to take this list (of 10,000-some-odd burger variations!) and determine what the top ten most common orders (not just condiments, but orders) are. (The truth is, the list actually mostly looks like &lt;code&gt;condiments: ['ketchup']&lt;/code&gt; over and over again.) So as a preliminary, you can assume that the data is being loaded like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const getBurgers = () =&amp;gt;
  fetch(&amp;#39;http://files.example.com/burgers.json&amp;#39;)
    .then(request =&amp;gt; request.json());&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we’ll print our results (which will always end up in the same format) like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const descAndCountToOutput = descAndCount =&amp;gt; `${descAndCount[0]}: ${descAndCount[1]}`;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is actually a perfect case to demonstrate how functional programming ideas can help us solve a problem.&lt;/p&gt;
&lt;section id="imperative" class="level3"&gt;
&lt;h3&gt;Imperative&lt;/h3&gt;
&lt;p&gt;First, let’s look at what I think is a &lt;em&gt;relatively&lt;/em&gt; reasonable imperative approach. Our basic strategy will be:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Convert condiments to descriptions.
&lt;ol type="1"&gt;
&lt;li&gt;Convert the objects to just their lists of condiments.&lt;/li&gt;
&lt;li&gt;Sort those strings.&lt;/li&gt;
&lt;li&gt;Turn them into descriptions by joining them with a comma.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Build up a mapping from description to count.&lt;/li&gt;
&lt;li&gt;Sort that by count.&lt;/li&gt;
&lt;li&gt;Get the top 10.&lt;/li&gt;
&lt;li&gt;Print out the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="js"&gt;&lt;code&gt;getBurgers().then(burgers =&amp;gt; {
  let totals = {};

  // 2. Build up a mapping from description to count.
  for (let burger of burgers) {
    // 1. Convert condiments to descriptions.
    // 1.1. Convert the objects to just their lists of condiments.
    const condiments = burger.condiments;
    // 1.2. Sort those strings.
    condiments.sort();
    // 1.3. Turn them into descriptions by joining them with a comma.
    const description = condiments.join(&amp;#39;, &amp;#39;);

    // 2. Build up a mapping from description to count.
    const previousCount = totals[description];
    totals[description] = previousCount ? previousCount + 1 : 1;
  }

  // 3. Sort that by count.
  const sortableCondiments = Object.entries(totals);
  sortableCondiments.sort((a, b) =&amp;gt; b[1] - a[1]);
  // 4. Get the top 10.
  const topTen = sortableCondiments.slice(0, 10);
  // 5. Print out the results.
  for (let descAndCount of topTen) {
    console.log(descAndCountToOutput(descAndCount));
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s pretty well-factored. But it’s pretty wrapped up on the specific details of this problem, and there’s basically nothing here I could reuse. It’s also relatively hard to test. There aren’t really a lot of pieces there we could break up into smaller functions if we wanted to figure out why something was broken. The way you’d end up fixing a bug here is probably by dropping &lt;code&gt;debugger&lt;/code&gt; or &lt;code&gt;console.log()&lt;/code&gt; statements in there to see what the values are at any given spot.&lt;/p&gt;
&lt;p&gt;And this is where functional programming really does give us a better way.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="functional" class="level3"&gt;
&lt;h3&gt;Functional&lt;/h3&gt;
&lt;p&gt;Instead of thinking about the specific details of &lt;em&gt;how&lt;/em&gt; to get from A to B, let’s think about what we start with and what we finish with, and see if we can build up a pipeline of transformations that will get us there.&lt;/p&gt;
&lt;p&gt;We start with a &lt;em&gt;list&lt;/em&gt; of &lt;em&gt;objects&lt;/em&gt; containing &lt;em&gt;arrays&lt;/em&gt; of &lt;em&gt;strings&lt;/em&gt;. We want to end up with a &lt;em&gt;list&lt;/em&gt; of the &lt;em&gt;distinct combinations&lt;/em&gt; and their &lt;em&gt;frequency&lt;/em&gt;. How can we do this? Well, the basic idea is the same as what we did above:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Convert condiments to descriptions.
&lt;ol type="1"&gt;
&lt;li&gt;Convert the objects to just their lists of condiments.&lt;/li&gt;
&lt;li&gt;Sort those strings.&lt;/li&gt;
&lt;li&gt;Turn them into descriptions by joining them with a comma.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Build up a mapping from description to count.&lt;/li&gt;
&lt;li&gt;Sort that by count.&lt;/li&gt;
&lt;li&gt;Get the top 10.&lt;/li&gt;
&lt;li&gt;Print out the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To someone acquainted with functional programming, that looks like a bunch of &lt;code&gt;map&lt;/code&gt;s, a &lt;code&gt;reduce&lt;/code&gt;, and some &lt;code&gt;sort&lt;/code&gt;s. And each of those using just simple, pure functions. Let’s see what that might look like. First, what are our transformations?&lt;/p&gt;
&lt;p&gt;The step 1 transformations are all quite straightforward:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// 1. Convert condiments to descriptions.
// 1.1. Convert the objects to just their lists of condiments.
const toCondiments = burger =&amp;gt; burger.condiments ? burger.condiments : [];
// 1.2. Sort those strings.
const toSortedCondiments = condiments =&amp;gt; condiments.concat().sort();
// 1.3. Turn them into descriptions by joining them with a comma.
const toDescriptions = condiments =&amp;gt; condiments.join(&amp;#39;, &amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 2 is a little more involved: it involves building up a new data structure (&lt;code&gt;totals&lt;/code&gt;) from an old one. This function is a &lt;em&gt;reducer&lt;/em&gt;: it will build up &lt;code&gt;totals&lt;/code&gt; by updating &lt;code&gt;totals&lt;/code&gt; with each &lt;code&gt;description&lt;/code&gt; from an array of them.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// 2. Build up a mapping from description to count.
const toTotals = (totals, description) =&amp;gt; {
  const previousCount = totals[description];
  const count = previousCount ? previousCount + 1 : 1;
  totals[description] = count;
  return totals;
};

// 3. Sort that by count.
const byCount = (a, b) =&amp;gt; b[1] - a[1];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll see how to get just 10 in a moment; for now, let’s also wrap up the output:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// 5. Print it out
const output = value =&amp;gt; { console.log(value); };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are our base building blocks, and we’ll re-use them in each of the approaches I cover below. Note that we’ve now taken those same basic steps from our imperative approach and turned them into standalone, testable functions. They’re small and single-purpose, which always helps. But more importantly, (with two exceptions we’ll talk about in a minute) all of those transformations are &lt;em&gt;pure functions&lt;/em&gt;, we know that we’ll get the same results every time we use them. If I want to make sure that burger condiments are converted correctly, I can test &lt;em&gt;just that function&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;describe(&amp;#39;toCondiments&amp;#39;, () =&amp;gt; {
  it(&amp;#39;returns an empty list when there is no `condiments`&amp;#39;, () =&amp;gt; {
    toCondiments({}).should.deepEqual([]);
  });

  it(&amp;#39;returns the list of condiments when it is passed&amp;#39;, () =&amp;gt; {
    const condiments = [&amp;#39;ketchup&amp;#39;, &amp;#39;mustard&amp;#39;];
    toCondiments({ condiments }).should.deepEqual(condiments);
  });
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a trivial example, of course, but it gets the point across: all we have to do to test this is pass in an object. It doesn’t depend on anything else. It doesn’t have &lt;em&gt;any knowledge&lt;/em&gt; of how we’re going to use it. It doesn’t know that it’s going to be used with data coming from an array. All it knows is that if you give it an object with a &lt;code&gt;condiments&lt;/code&gt; property, it’ll hand you back the array attached to that property.&lt;/p&gt;
&lt;p&gt;The result is that, with all of these functions, we don’t have to deal with mocks or stubs or anything like that to be testable. Input produces output. Pure functions are great for this. Now, some of you may be thinking, “That’s great, but what about &lt;abbr&gt;I/O&lt;/abbr&gt;, or databases, or any other time we actually interact with the world? What about talking to a point-of-sale?” I actually have some tentative thoughts about a future tech talk to look at how to do that in some detail, but for today, just remember that the goal is to write as many pure functions as possible, and to isolate the rest of your code from knowing about that. And of course, that’s best practice anyway! We’re just codifying it. We’ll see what that looks like in practice in just a minute.&lt;/p&gt;
&lt;p&gt;Now, while we’re on the topic of pure functions, some of you with quick eyes may have noticed that two of these little functions we laid out are actually &lt;em&gt;not&lt;/em&gt; pure: JavaScript’s &lt;code&gt;Array.sort&lt;/code&gt; method operates in-place, for performance reasons, and so does our &lt;code&gt;toTotals&lt;/code&gt; function. So a truly pure version of the sorting function looks like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const toSortedCondiments = condiments =&amp;gt; condiments.concat().sort();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we &lt;em&gt;could&lt;/em&gt; define the &lt;code&gt;toTotals&lt;/code&gt; to return a new object every time, like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const toTotals = (totals, description) =&amp;gt; {
  const previousCount = totals[description];
  const count = previousCount ? previousCount + 1 : 1;
  const update = { [description]: count };
  return Object.assign({}, totals, update);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, given the amount of data we’re dealing with, that’s prohibitively expensive. We end up spending a &lt;em&gt;lot&lt;/em&gt; of time allocating objects and garbage-collecting them. As a result, it’s tens of thousands of times slower. Running it on my 4GHz iMac, the in-place version takes less than 40ms. Doing it the strictly pure way—returning copies every time—takes ~53s. And if you profile it, almost all of that time is spent in &lt;code&gt;assign&lt;/code&gt; (52.95s).&lt;/p&gt;
&lt;p&gt;This takes us to an important point, though: it’s actually not a particularly big deal to have this particular data changed in place, because we’re not going to do anything &lt;em&gt;else&lt;/em&gt; with it. And in fact, under the hood, this is exactly what pure functional languages do with these kinds of transformations—precisely because it’s perfectly safe to do so, because we’re the only ones who have access to this data. We’re generating a &lt;em&gt;new&lt;/em&gt; data structure from the data that we were originally handed, and the next function will make its own new data structure (whether a copy or something else).&lt;/p&gt;
&lt;p&gt;In other words, when we’re talking about a &lt;em&gt;pure function&lt;/em&gt;, we don’t really care about internal mutability (though of course, that can bite us if we’re not careful). We’re really concerned about &lt;em&gt;external&lt;/em&gt; mutability. As long as the same inputs get the same outputs every time, the rest of the world doesn’t have to care how we got that result.&lt;/p&gt;
&lt;p&gt;Now let’s see how we use these functions.&lt;/p&gt;
&lt;section id="pure-javascript" class="level4"&gt;
&lt;h4&gt;Pure JavaScript&lt;/h4&gt;
&lt;p&gt;First, here’s a pure-JavaScript approach, but a more functional one instead of an imperative one:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;getBurgers().then(burgers =&amp;gt; {
  const descriptionToCount = burgers
    .map(toCondiments)
    .map(toSortedCondiments)
    .map(toDescriptions)
    .reduce(toTotals, {})

  const entries = Object.entries(descriptionToCount);

  [...entries]
    .sort(byCount)
    .slice(0, 10)  // 4. Get the top 10.
    .map(descAndCountToOutput)
    .forEach(output);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, the good: our transformation is no longer all jumbled together. In fact, our code reads a lot like our original description did. Also, notice that we just have a bunch of functions operating on data: none of the functions used here have any knowledge about where the data comes from that they operate on.&lt;/p&gt;
&lt;p&gt;But then we also have a couple things that are a &lt;em&gt;little&lt;/em&gt; bit clunky. The main thing that sticks out is that sudden stop in the chain in the middle.&lt;/p&gt;
&lt;p&gt;When we’re dealing with the &lt;code&gt;Array&lt;/code&gt; type, everything is fine, but when we convert our data into a &lt;code&gt;Map&lt;/code&gt;, we no longer have that option, so we have to jump through some hoops to do the transformation back into the data type we need. We’re stuck if the object type doesn’t have the method we need. We’re kind of trying to mash together the imperative and functional styles, and it’s leaving us in a little bit of a weird spot.&lt;/p&gt;
&lt;p&gt;There’s another issue here, though, and it’s the way that using the method-style calling convention obscures something important. When we call &lt;em&gt;most&lt;/em&gt; of those methods, we’re doing something quite different from what most &lt;em&gt;methods&lt;/em&gt; do. A method normally is an operation on an object. These methods—most of them—are operations that return &lt;em&gt;new&lt;/em&gt; objects. So it’s nice from a syntax perspective, but if we’re not &lt;em&gt;already&lt;/em&gt; familiar with the behavior of a given method, it won’t be clear at all that we’re actually generating a bunch of totally new data by calling those methods.&lt;/p&gt;
&lt;p&gt;And… two of these methods (&lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;forEach&lt;/code&gt;) &lt;em&gt;are&lt;/em&gt; not doing that, but are modifying an array in place instead.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lodash" class="level4"&gt;
&lt;h4&gt;Lodash&lt;/h4&gt;
&lt;p&gt;The first step away from this problem is to use a tool like &lt;a href="https://lodash.com"&gt;Lodash&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// More functional, with _:
// We tweak how a few of these work slightly to play nicely.
const _toDescriptions = condiments =&amp;gt; _.join(condiments, &amp;#39;, &amp;#39;);
const _byCount = _.property(1);

getBurgers().then(burgers =&amp;gt; {
  const condiments = _.map(burgers, toCondiments);
  const sortedCondiments = _.map(condiments, toSortedCondiments);
  const descriptions = _.map(sortedCondiments, _toDescriptions);
  const totals = _.reduce(descriptions, toTotals, {});
  const totalPairs = _.toPairs(totals);
  const sortedPairs = _.sortBy(totalPairs, _byCount);
  const sortedPairsDescending = _.reverse(sortedPairs);
  const topTen = _.take(sortedPairsDescending, 10);
  const forOutput = _.map(topTen, descAndCountToOutput)
  _.forEach(forOutput, output);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But it seems like we lost something when we moved away from the object-oriented approach. Being able to chain things, so that each item worked with the previous item, was actually pretty nice. And needing all these intermediate variables is &lt;em&gt;not&lt;/em&gt; so nice.&lt;/p&gt;
&lt;p&gt;One way around this is to use Lodash’s &lt;code&gt;_.chain&lt;/code&gt; method. That would have let us write it like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;getBurgers().then(burgers =&amp;gt; {
  const foo = _.chain(burgers)
    .map(toCondiments)
    .map(toSortedCondiments)
    .map(_toDescriptions)
    .reduce(toTotals, {})
    .toPairs()
    .sortBy(_byCount)
    .reverse()
    .take(10)
    .map(descAndCountToOutput)
    .value()
    .forEach(output);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that &lt;em&gt;is&lt;/em&gt; a win. But it only works because JavaScript is &lt;em&gt;incredibly&lt;/em&gt; dynamic and lets us change the behavior of the underlying &lt;code&gt;Array&lt;/code&gt; type. (You’d have a much harder time doing that in Java or C&lt;sup&gt;♯&lt;/sup&gt;!)&lt;/p&gt;
&lt;p&gt;Perhaps just as importantly, it requires us to make sure that we do that &lt;code&gt;_.chain()&lt;/code&gt; call on on anything we want to tackle this way. So, can we get the benefits of this some &lt;em&gt;other&lt;/em&gt; way? Well, obviously the answer is &lt;em&gt;yes&lt;/em&gt; because I wouldn’t be asking otherwise.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="with-ramda." class="level4"&gt;
&lt;h4&gt;With Ramda.&lt;/h4&gt;
&lt;p&gt;But we can actually go a bit further, and end up in a spot where we don’t need to modify the object prototype at all. We can just do this with a series of standalone functions which don’t depend on being attached to &lt;em&gt;any&lt;/em&gt; object. If we use the &lt;a href="http://ramdajs.com"&gt;Ramda&lt;/a&gt; library,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; we can tackle this with nothing but functions.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const getTop10Burgers = R.pipe(
  R.map(R.prop(&amp;#39;condiments&amp;#39;)),
  R.map(R.sortBy(R.toString)),
  R.map(R.join(&amp;#39;, &amp;#39;)),
  R.reduce(toTotals, {}),
  R.toPairs,
  R.sortBy(R.prop(1)),  // will give us least to greatest
  R.reverse,
  R.take(10),
  R.map(descAndCountToOutput)
);

return getBurgers()
  .then(getTop10Burgers)
  .then(R.forEach(output));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the difference between here and even where we started with Lodash: we’re no longer dependent on a specific piece of data being present. Instead, we’ve created a standalone function which can operate on that data, simply by “piping” together—that is, &lt;em&gt;composing&lt;/em&gt;—a bunch of other, smaller functions. The output from each one is used as the input for the next.&lt;/p&gt;
&lt;p&gt;One of the many small niceties that falls out of this is that we can refactor this just by pulling it apart into smaller acts of compositions.&lt;/p&gt;
&lt;p&gt;Here’s an example of how we might use that. We defined those simple transformations for the condiments as a set of three functions, which converted them from objects with &lt;code&gt;condiments&lt;/code&gt; elements, sorted them, and joined them into a string. Now, let’s build those into meaningful functions for each step:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// 1. Convert condiments to descriptions.
const burgerRecordsToDescriptions = R.pipe(
  R.map(R.prop(&amp;#39;condiments&amp;#39;)),
  R.map(R.sortBy(R.toString)),
  R.map(R.join(&amp;#39;, &amp;#39;)),
);

// 2. Build up a mapping from description to count.
const descriptionsToUniqueCounts = R.pipe(
  R.reduce(toTotals, {}),
  R.toPairs,
);

// 3. Sort that by count.
const uniqueCountsToSortedPairs = R.pipe(
  R.sortBy(R.prop(1)),
  R.reverse,
);

// For (4), to get the top 10, we&amp;#39;ll just use `R.take(10)`.
// We could also alias that, but it doesn&amp;#39;t gain us much.

// 5. Print it out
const sortedPairsToConsole = R.pipe(
  R.map(descAndCountToOutput),
  R.forEach(output)
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can put those together into another, top-level function to do &lt;em&gt;exactly&lt;/em&gt; our steps.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const getTop10Burgers = R.pipe(
  burgerRecordsToDescriptions,  // (1)
  descriptionsToUniqueCounts,   // (2)
  uniqueCountsToSortedPairs,    // (3)
  R.take(10)                    // (4)
);

getBurgers()
  .then(getTop10Burgers)
  .then(sortedPairsToConsole);  // (5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that, because each step is just composing together functions, “refactoring” is easy. And, to be sure, you have to be mindful about what comes in and out of each function. But that’s true in the imperative approach, too: you always have to keep track of the state of the object you’re building up, but there you’re doing it in the middle of a loop, so you’re keeping track of a lot &lt;em&gt;more&lt;/em&gt; state at any given time. Functions with simple inputs and outputs give us a more explicit way of specifying the structure and state of the data at any given time. That’s true even in JavaScript, but it goes double if we’re in a typed language like F&lt;sup&gt;♯&lt;/sup&gt;, Elm, etc., where we can specify those types for the function as a way of designing the flow of the program. (That’s such a helpful way of solving problems, in fact, that I may also do a talk on type-driven design in the future!)&lt;/p&gt;
&lt;p&gt;Note, as well, that we’ve now completely isolated our input and output from everything else. The middle there is a chain of pure functions, built out of other pure functions, which neither know nor care that the data came in from an &lt;abbr&gt;API&lt;/abbr&gt; call, or that we’re going to print it to the console when we finish.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So this takes us back around to that first question: why do we care? At the end of the day, is this really a win over the imperative style? Is the final version, using Ramda, really better than the pure-JavaScript mostly-functional version we used at first?&lt;/p&gt;
&lt;p&gt;Obviously, I think the answers there are yes. The Ramda version there at the end is &lt;em&gt;way&lt;/em&gt; better than the imperative version, and substantially better than even the first “functional” JavaScript versions we wrote.&lt;/p&gt;
&lt;p&gt;For me, at least, the big takeaway here is this: we just built a small but reasonable transformation of data out of a bunch of really small pieces. That has two big consequences—consequences we’ve talked about all along the way, but which you’ve now seen in practice:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Those pieces are easy to test. If something isn’t working, I can easily take those pieces apart and test them individually, or test the result of any combination of them. As a result, I can test any part of that pipe chain, and I can &lt;em&gt;fix&lt;/em&gt; pieces independent of each other. No part depends on being in the middle of a looper where transformations are done to other parts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because they’re small and do one simple things, I can recombine those pieces any way I like. And you see that in the Ramda examples in particular: most of what we’re doing in those examples is not even something we wrote ourselves. They’re also &lt;em&gt;really&lt;/em&gt; basic building blocks, available in basically every standard library.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One last thing: if you’re curious about performance… you should know that it does matter for data at scale. In my tests (which are admittedly extremely unscientific; unfortunately, I couldn’t get JSPerf running nicely with this particular set of variations), I found that the time it took to run these varied depending on the approach &lt;em&gt;and&lt;/em&gt; the library. With a ~10k-record data set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The imperative version, unsurprisingly, was the fastest, taking ~16–17ms.&lt;/li&gt;
&lt;li&gt;After that, the chained lodash version and the pure-&lt;abbr&gt;JS&lt;/abbr&gt; version were comparable, at ~32–36ms, or around twice as long to finish as the imperative version.&lt;/li&gt;
&lt;li&gt;The plain lodash version was consistently a &lt;em&gt;little&lt;/em&gt; slower yet, at ~38–43ms.&lt;/li&gt;
&lt;li&gt;Ramda is &lt;em&gt;slow&lt;/em&gt;: both variations consistently took over 90ms to finish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those differences added up on larger data sets: dealing with ~10,000,000 records, the times ranged from ~12s for the imperative version, to ~15s for the lodash and pure-&lt;abbr&gt;JS&lt;/abbr&gt; variants, to ~50s for the Ramda version.&lt;/p&gt;
&lt;p&gt;They were all pretty darn quick. Compilers, including JavaScript &lt;abbr&gt;JIT&lt;/abbr&gt;s, are incredibly smart. Mostly you can just trust them; come back and profile before you even &lt;em&gt;think&lt;/em&gt; about optimizing things. But you &lt;em&gt;should&lt;/em&gt; know the performance characteristics of different libraries and consider the implications of what the language does well and what it doesn’t. Ramda is likely slower because of the way it curries every function—something that works well in languages with native support for it, e.g. F&lt;sup&gt;♯&lt;/sup&gt; or Elm or Haskell, but imposes a penalty in languages which don’t… like JavaScript. That said, if you’re not in the habit of processing tens of thousands of records, you’re probably okay using any of them.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;or &lt;a href="https://github.com/lodash/lodash/wiki/FP-Guide"&gt;lodash-fp&lt;/a&gt;, but Ramda is a bit better documented and I just like it a little better&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="functional programming"></category><category term="javascript"></category></entry><entry><title>Why Everything is Broken</title><link href="http://www.chriskrycho.com/2016/why-everything-is-broken.html" rel="alternate"></link><published>2016-11-01T20:45:00-04:00</published><updated>2016-11-01T20:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-11-01:/2016/why-everything-is-broken.html</id><summary type="html">&lt;p&gt;It’s something of a joke among many of the software developers I know to wonder aloud how &lt;em&gt;anything&lt;/em&gt; works. We’re all very painfully aware of how hard it is to write correct code, of how hard it is to account for all the corner cases that will arise …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It’s something of a joke among many of the software developers I know to wonder aloud how &lt;em&gt;anything&lt;/em&gt; works. We’re all very painfully aware of how hard it is to write correct code, of how hard it is to account for all the corner cases that will arise, and of how hard it is to write user interfaces (of any sort) that make good sense to the user.&lt;/p&gt;
&lt;p&gt;And our assumptions are broken in weird ways, but we don’t even realize it. Our paradigms for computing are built on decisions made 40–50 years ago, and in many cases there is no &lt;em&gt;good&lt;/em&gt; reason to continue doing things that way in a vacuum. But we’re not in a vacuum, and we have incredible resources built on top of those existing paradigms, and rewriting everything form scratch in a saner way with the lessons we’ve learned in the intervening years seems impossible.&lt;/p&gt;
&lt;p&gt;All of this came home to me again this evening in one of those startlingly painful moments of realization at how ridiculous this stack of cards we’ve built really is.&lt;/p&gt;
&lt;p&gt;I was helping a colleague, a designer who’s been learning HTML and CSS, figure out why his page wasn’t displaying properly on GitHub Pages. The site was loading, and the image assets were loading, but the style sheets weren’t. In fairly short order, I pulled up the site, noticed that the paths were to &lt;code&gt;/css/style.css&lt;/code&gt;, glanced at the source and noted that the actual content was at &lt;code&gt;/CSS/style.css&lt;/code&gt;, and said: “Oh, you just need to make the case of these match!” I explained: the URL proper (everything up through &lt;code&gt;.com&lt;/code&gt; or whatever domain ending) is case-insensitive, but everything after that is case-sensitive.&lt;/p&gt;
&lt;p&gt;There are reasons for that, some historical and some having to do with the fact that you can just serve a web page directly from a server, so the paths on your file system map to the paths on the web. And if your file system is case-sensitive, then the URL has to respect that.&lt;/p&gt;
&lt;p&gt;That is, in a word, &lt;em&gt;dumb&lt;/em&gt;. Don’t get me wrong: again, I see the perfectly defensible technical reasons why that is so. But it’s a leaky abstraction. And when you look closely at them, nearly &lt;em&gt;all&lt;/em&gt; of our abstractions leak, and badly.&lt;/p&gt;
&lt;p&gt;The pain of that moment was realizing, that like so many other things in tech, this particular thing is still broken for two reasons:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It’s too hard or too painful to change it. (That’s a big one here; the web has a pretty firm commitment to absolute backwards compatibility forever, &lt;em&gt;modulo&lt;/em&gt; a few things like killing Flash.)&lt;/li&gt;
&lt;li&gt;We get used to it, and just come to accept the ten thousand papercuts as normal, and eventually even forget about them until something comes up again and &lt;em&gt;forces&lt;/em&gt; us to see them. Usually in the form of someone learning for the first time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can’t necessarily do a lot about (1). We don’t have infinite time or money, and reinventing everything really is impossible. We can do wacky experiments, and iterate toward better solutions that can gradually replace what was there originally.&lt;/p&gt;
&lt;p&gt;But (2) is the bigger one. We need to stop accepting the papercuts as just part of how things are—and especially, stop seeing our acclimation to them as a badge of honor to be earned—and start treating them as rough edges that ought to be sanded off over time wherever possible. Notice the things that trip up new learners, and if you can, &lt;em&gt;get rid of them&lt;/em&gt;. If you can’t get rid of them, make note so that you are sure to cover it when you’re helping someone in the future. And explain the &lt;em&gt;whys&lt;/em&gt; for those little edge cases: even worse than not knowing them, in some ways, is knowing them but not understanding them—having a bag of little tricks you can use but never being able to progress because you can’t see how they fit together.&lt;/p&gt;
&lt;p&gt;Making our tech better starts, in many ways, with recognizing the problems we have. It requires us not to accept (much less embrace or revel in) the status quo, and always to push ourselves to do better. So iterate like made to get away from (1) and to fix (2).&lt;/p&gt;
</content><category term="software development"></category></entry><entry><title>Rust vs. React Native—What?</title><link href="http://www.chriskrycho.com/2016/rust-vs-react-native-what.html" rel="alternate"></link><published>2016-10-07T08:20:00-04:00</published><updated>2016-10-07T08:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-10-07:/2016/rust-vs-react-native-what.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I was recently discussing some thoughts I’ve had on building a top-notch application experience in a Slack team I belong to, and noted that I believe that a Rust core with native UIs is a &lt;em&gt;massively&lt;/em&gt; winning strategy. A friend in the group responded that he thinks “React + JS …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I was recently discussing some thoughts I’ve had on building a top-notch application experience in a Slack team I belong to, and noted that I believe that a Rust core with native UIs is a &lt;em&gt;massively&lt;/em&gt; winning strategy. A friend in the group responded that he thinks “React + JS is eating the world right now” and that “Rust as awesome for if you want to write a JS vm, or something like that… or a compiler… anything involving lots of speed and stability.” What follows is my response, lightly edited to remove details specific to that friend and to add a few further thoughts.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s the thing: I don’t &lt;em&gt;care&lt;/em&gt; what’s eating the world today, for three reasons:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I just want to build the best stuff I can build, and native UIs are still massively better than React and even React Native&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; in innumerable ways. There are clear advantages to React Native + JavaScript, and times when you absolutely should take that approach. But there are also a lot of times and reasons why you shouldn’t. Heck, even if you just want killer performance &lt;em&gt;in browsers&lt;/em&gt;, our future includes things like Rust-to-WebAssembly, and that’s a good thing.&lt;/li&gt;
&lt;li&gt;What was eating the world five years ago? Ten? Is it still eating the world today? I don’t feel obliged to follow those trends (not least because, not being a consultancy, following those trends doesn’t buy me anything for the things I want to do; your tradeoffs and mine look way different).&lt;/li&gt;
&lt;li&gt;I’m actually getting really tired of just treating as acceptable or normative the performance characteristics of browsers. Browsers are awesome. But we can (and should) do a &lt;em&gt;lot&lt;/em&gt; better in terms of user experience, and I don’t see browsers catching up to what you can do with e.g. Cocoa (Touch). Sure, that doesn’t matter that much for building yet-another-storefront. (Again, there are different tradeoffs for every single app!) But why in the world are we in a spot now where one of the most popular text editors in the world is &lt;em&gt;slower&lt;/em&gt; than any text editor of five years ago? That’s not a &lt;em&gt;necessary&lt;/em&gt; decision, and you can (and should) go after the same degree of ease-of-extensibility that Atom has had—perhaps even using things like HTML and CSS for skinning!—while not tying yourself to the browser and its upsides and downsides for &lt;em&gt;everything&lt;/em&gt;. We have &lt;em&gt;incredibly&lt;/em&gt; powerful machines, and the user experience is often getting &lt;em&gt;slower&lt;/em&gt;. I’m looking for ways to change that.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again, JS+React&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; may be &lt;em&gt;exactly&lt;/em&gt; the right tradeoff for a lot of apps, and given what consultancies (like my friends’s!) are doing, I think doing that with ReactNative for apps is a &lt;em&gt;very&lt;/em&gt; good move. It makes good sense business-wise, and it makes good sense in terms of the apps you’re likely to be delivering. Don’t hear me for a second saying Rust is the best for &lt;em&gt;everything&lt;/em&gt;. I think it, or something like it, is a very good choice for &lt;em&gt;many&lt;/em&gt; things, though, and it shouldn’t be dismissed simply because it’s a very different world from doing Ruby or Elixir or JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class=editorial&gt;So much for my initial response. On reflection, I wanted to expand it a bit. So here’s another few hundred words!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Beyond this, I think there’s a bit of a false dichotomy here: the idea that “lots of speed and stability” &lt;em&gt;aren’t&lt;/em&gt; values we should be seeking more aggressively for &lt;em&gt;all&lt;/em&gt; our apps. Fully granted that not every app needs the same &lt;em&gt;degree&lt;/em&gt; of each of those, and moreover that there are a lot of ways to get to those goals. Still: speed and stability are &lt;em&gt;core&lt;/em&gt; user experience values. I don’t really care how you get at those goals, whether it’s with Rust, or Elixir or Clojure, or, yes, React with TypeScript or &lt;a href="https://flowtype.org"&gt;Flow&lt;/a&gt;. I &lt;em&gt;do&lt;/em&gt; think that Rust is, for the moment at least, uniquely positioned to add real value in this space because it gives screaming performance but with so many niceties we’re used to when writing languages like Python or Ruby and so much of the power you get in languages like OCaml or F♯.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; But at the end of the day, I think &lt;em&gt;all&lt;/em&gt; apps should focus much more on speed and stability than they do today. We have supercomputers in our pockets, and we’re often shipping apps that are slower and more finicky.&lt;/p&gt;
&lt;p&gt;But I have this dream of a world where apps aren’t needlessly power-hungry or memory-intensive, where every swipe and or click or scroll results in buttery-smooth responses. We won’t get there by saying, “You know, Facebook is doing &lt;em&gt;x&lt;/em&gt; so that’s good enough for me.”&lt;/p&gt;
&lt;p&gt;Of course every developer, and any given product shop or consultancy, is going to have to make decisions about which stacks it invests in. If you’re primarily shipping web applications, investing in Elixir and React with React Native for your apps is a very sensible move. Most of your clients’ native apps may not &lt;em&gt;need&lt;/em&gt; the degree of polished performance you might get from writing their iOS app in Swift and their Android app in Kotlin and the core in Rust (or even C++). That tradeoff is a &lt;em&gt;tradeoff&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But let’s remember that there is real value there, and that some apps &lt;em&gt;do&lt;/em&gt; deserve that investment. We should evaluate the tradeoffs at every turn, and our core considerations should enduringly include &lt;em&gt;speed and stability&lt;/em&gt;. Don’t dismiss Rust (or Swift, or F♯) out of hand.&lt;/p&gt;
&lt;p&gt;Equally importantly, we need to stop assuming that just because something is eating the world today means it’s also the future. Betting big on Flash in the mid-2000s wasn’t a &lt;em&gt;bad&lt;/em&gt; move by a long shot. But its massive popularity then wasn’t a good predictor for its future. That goes double, frankly, for projects coming out of Facebook or Google or similar: big companies like that have the resources to drop everything and use a new language, or a new tool, as it suits them. If you don’t believe me, look at the actual open-source records of both of those companies! What’s hot today is far more relevant to a consultancy than to a product shop. And in both cases, choosing tech suitable for the job at hand is more important yet.&lt;/p&gt;
&lt;p&gt;My friend gets that, for what it’s worth. He’s making the right moves for his business as the owner of a consultancy. I just want him—and lots of other people—to see where languages like Rust and Swift and F♯ might be worth considering. And speed and stability matter in a lot of places besides just compilers and VMs.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’m aware that React-Native ultimately binds down to native widgets. It’s still not quite the same.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;or, frankly, Ember or whatever else; React is great, but it is also overhyped.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Swift too, and honestly for a lot of things Swift is an easier experience for not &lt;em&gt;that&lt;/em&gt; much less performance than Rust. But as of today you &lt;em&gt;can’t&lt;/em&gt; ship core functionality in Swift for Android or Windows.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="JavaScript"></category><category term="Rust"></category><category term="Swift"></category><category term="F Sharp"></category><category term="software development"></category></entry><entry><title>32 Theses (and several more words) on Podcasting</title><link href="http://www.chriskrycho.com/2016/32-theses-and-several-more-words-on-podcasting.html" rel="alternate"></link><published>2016-08-09T10:30:00-04:00</published><updated>2016-08-09T10:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-08-09:/2016/32-theses-and-several-more-words-on-podcasting.html</id><summary type="html">&lt;p&gt;A month ago, Alan Jacobs asked about quality conservative Christian podcasts. &lt;a href="https://mereorthodoxy.com/theses-on-podcasting/"&gt;Here’s&lt;/a&gt; a big part of why there are so few (at Mere Orthodoxy):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a Christian in the world of podcasting—I have both a “two dudes talking” show (Winning Slowly) and also a “one dude talking with …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A month ago, Alan Jacobs asked about quality conservative Christian podcasts. &lt;a href="https://mereorthodoxy.com/theses-on-podcasting/"&gt;Here’s&lt;/a&gt; a big part of why there are so few (at Mere Orthodoxy):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a Christian in the world of podcasting—I have both a “two dudes talking” show (Winning Slowly) and also a “one dude talking with maybe a brief musical intro and outro” show (New Rustacean)—I found much to agree with, but also much to clarify and a few things to disagree with…&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;First, a set of theses on podcasting as a medium. Some of these are obvious; none are intended to be tendentious. Some of them warrant further explanation—for which, see below….&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After which, &lt;a href="https://mereorthodoxy.com/theses-on-podcasting/"&gt;32 theses (and another ~3,000 words)&lt;/a&gt; on the constraints and challenges of podcasting as a medium.&lt;/p&gt;
&lt;p&gt;Aside: the format of this particular piece is heavily inspired by Jacobs’ own &lt;a href="http://iasc-culture.org/THR/channels/Infernal_Machine/2015/03/79-theses-on-technology-for-disputation/"&gt;“79 Theses on Technology. For Disputation.”&lt;/a&gt;&lt;/p&gt;
</content><category term="podcasting"></category><category term="my writing elsewhere"></category><category term="links"></category></entry><entry><title>Rust and Swift (xviii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xviii.html" rel="alternate"></link><published>2016-07-24T15:10:00-04:00</published><updated>2016-07-24T15:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-07-24:/2016/rust-and-swift-xviii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="part-i-ownership-semantics-vs.reference-counting" class="level2"&gt;
&lt;h2&gt;Part I: Ownership Semantics vs. Reference Counting&lt;/h2&gt;
&lt;p&gt;Perhaps unsurprisingly, the Swift book follows on from its discussion of initialization with a discussion of deinitialization, and here the differences between Rust and Swift are substantial, but (as has so often been the case) so are the analogies.&lt;/p&gt;
&lt;p&gt;In Rust, memory is, by default, stack-allocated and -deallocated, but with a very impressive system for tracking the lifetime of that data and allowing its to be moved from one function to another. The Rust compiler tracks the &lt;em&gt;ownership&lt;/em&gt; of every given item in the program as it is passed from one function to another, allowing other parts of the program to “borrow” the data safely, until a given piece of data goes out of scope entirely. At that point, Rust runs its destructors automatically. As part of its system for managing memory safely, Rust also tracks where and when a program attempts to access any given piece of data (whether directly or via reference), and will refuse to compile if you try to reference data in a place where it has already gone out of scope and been cleaned up (“dropped,” in Rust-speak).&lt;/p&gt;
&lt;p&gt;If this was a bit fuzzy, don’t worry: there’s a lot to say here. It’s arguably the most distinctive feature of the language, and it’s also the main thing that tends to trip up newcomers to the language. If you’re interested in further material on the topic, my own most succinct treatment of it is in &lt;a href="http://www.newrustacean.com/show_notes/e002/index.html" title="e002: Something borrowed, something... moved?"&gt;an early episode&lt;/a&gt; of New Rustacean, my Rust developer podcast, and &lt;a href="https://doc.rust-lang.org/book/ownership.html"&gt;the official documentation&lt;/a&gt; is &lt;em&gt;very&lt;/em&gt; good. For now, suffice it to say: Rust does extremely rigorous &lt;em&gt;compile-time&lt;/em&gt; checks to let you do C or C++-style memory management, but with absolute guarantees that you won’t have e.g. use-after-free bugs, with a default to handling everything on the stack.&lt;/p&gt;
&lt;p&gt;It is of course impossible to handle &lt;em&gt;everything&lt;/em&gt; on the stack, so there are heap-allocated types (e.g. vectors, a dynamically sized array-like type), which are fundamentally reference (or pointer) types. But those follow the same basic rules: Rust tracks the &lt;em&gt;pointers&lt;/em&gt; throughout their uses, and when they go out of scope, Rust automatically tears down not only the pointer but also the data behind it. There are times, though, when you can’t comply with Rust’s normal rules for handling multiple-access to the same data. For those situations, it also supplies some “smart pointer” container types, &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;Arc&lt;/code&gt;, the &lt;em&gt;reference-counted&lt;/em&gt; (non-thread-safe) and &lt;em&gt;atomically reference-counted&lt;/em&gt; (thread-safe) types. Both types just wrap up a type that you intend to put on the heap with reference-counters, which increment and decrement as various pieces of a program get access to them. Note that, unlike the compiler-level, &lt;em&gt;compile-time&lt;/em&gt; checks mentioned earlier, these are &lt;em&gt;run-time&lt;/em&gt; counts and they therefore incur a small but real runtime performance penalty. (The distinctions between the two types have to do with how they guarantee their memory safety and what kinds of a guarantees are required for cross-thread safety, and they’re important for writing Rust but not so important for this comparison, so I’ll leave them aside.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In Swift, all class instances (which are pass-by-reference types) are tracked with &lt;em&gt;automatic reference counting&lt;/em&gt; and cleaned up automatically when there are no more references to them. Don’t confuse Rust’s “&lt;em&gt;atomically&lt;/em&gt; reference-counted” type with Swift’s “&lt;em&gt;automatically&lt;/em&gt; reference-counted” type. Unlike Rust’s behavior in having everything checked at compile-time, reference counting is a run-time check in Swift, just as it is with the &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;Arc&lt;/code&gt; types in Rust.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But it happens for all reference types all the time in Swift, not just when specified manually as in Rust. (Value types seem to be &lt;em&gt;always&lt;/em&gt; passed by value, though the compiler has some smarts about that so it doesn’t get insanely expensive.) It’s &lt;em&gt;automatic&lt;/em&gt; in that the compiler and runtime handle it “behind the scenes” from the developer’s perspective.&lt;/p&gt;
&lt;p&gt;Swift’s approach here isn’t quite the same as having a full-on garbage-collected runtime like you’d see in Java, C&lt;sup&gt;#&lt;/sup&gt;, Python, Ruby, JavaScript, etc. (and so doesn’t have the performance issues those often can). But it also isn’t like Rust’s default of having &lt;em&gt;no&lt;/em&gt; runtime cost. It’s somewhere in the middle, with a goal of very good performance but good developer ergonomics. I think it achieves that latter goal: for the most part, it means that you don’t have to think about memory allocation and deallocation explicitly. Certainly there are times when you have to think about how your program handles those issues, but neither is it right up in your face like it is in Rust,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; nor does it come with the costs of a heavier runtime (from startup, to GC pauses, to non-deterministic performance characteristics).&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To make it concrete, the following snippets do &lt;em&gt;basically&lt;/em&gt; the same thing—but note that the reference counting is explicit in Rust. We’ll start with Rust, doing it the normal way:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct WouldBeJedi {
    name: String,
    rank: u8,
    description: String,
}

impl WouldBeJedi {
    fn new(name: &amp;amp;str, rank: u8, description: &amp;amp;str) -&amp;gt; WouldBeJedi {
        WouldBeJedi {
            name: name.to_string(),
            rank: rank,
            description: description.to_string()
        }
    }
}

fn main() {
    let trainee = WouldBeJedi::new(
        &amp;quot;Zayne Carrick&amp;quot;, 1, &amp;quot;not very competent, but still a great hero&amp;quot;);

    // When calling the function, we pass it a reference, and it
    // &amp;quot;borrows&amp;quot; access to the data. But the validity of that access
    // is checked at compile time. `main()` keeps the &amp;quot;ownership&amp;quot;
    // of the data.
    describe(&amp;amp;trainee);

    // When `main` ends, nothing owns the data anymore, so
    // Rust cleans it up. If something were still borrowing the
    // data (say, if we&amp;#39;d passed a reference into another thread),
    // this would actually be a compile error, because references
    // have to be guaranteed to live as long as the thing they
    // point back to. Rust has tools for managing that, as well,
    // its &amp;quot;lifetimes&amp;quot;, but we can leave them aside for this example.
}

fn describe(trainee: &amp;amp;WouldBeJedi) {
    // Rust checks at compile time to make sure there are no
    // mutable &amp;quot;borrows&amp;quot; of the data, and therefore knows
    // that it is safe to reference the data here, because it can
    // be *sure* nothing will change it at the same time.

    // Under the covers, this macro will actually call a
    // function with the data we pass it, so Rust actually checks
    // the ownership and borrowing state here, too. Again, all
    // at compile time, and therefore with no runtime penalty.
    println!(&amp;quot;{} (rank {}) is {}.&amp;quot;,
             trainee.name,
             trainee.rank,
             trainee.description);

    // When we exit the function, Rust notes that it is no
    // longer &amp;quot;borrowing&amp;quot; the data.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here’s the Swift code—note as well that we use a &lt;code&gt;class&lt;/code&gt; not a &lt;code&gt;struct&lt;/code&gt; here:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class WouldBeJedi {
    let name: String
    let rank: UInt8
    let description: String

    init(name: String, rank: UInt8, description: String) {
        self.name = name
        self.rank = rank
        self.description = description
    }
}

func main() {
    let aTrainee = WouldBeJedi(
        name: &amp;quot;Zayne Carrick&amp;quot;,
        rank: 1,
        description: &amp;quot;not very competent, but a great hero&amp;quot;)

    // When calling the function, the reference count goes up
    // here, too, but it&amp;#39;s implicit, rather than explicit.
    describe(aTrainee)

    // The implicit reference count Swift maintains for `aTrainee`
    // will go from 1 to 0 here, and Swift will do its cleanup of the
    // object data.
}

func describe(_ trainee: WouldBeJedi) {
    // When we enter this function, Swift bumps the reference
    // count, from 1 to 2. Both `main` and `describe` now have a
    // reference to the data.

    // No need for the unwrapping or any of that; Swift handles it
    // all automatically... thus the name of the technology!
    print(&amp;quot;\(trainee.name) (rank \(trainee.rank)) is \(trainee.description).&amp;quot;)

    // When we exit the function, Swift bumps the reference count
    // back down to 1 automatically.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, here is the (much longer, because all the reference counting is done explicitly) reference-counted Rust version:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use std::rc::Rc;

pub struct WouldBeJedi {
    name: String,
    rank: u8,
    description: String,
}

fn main() {
    let trainee = WouldBeJedi {
        name: &amp;quot;Zayne Carrick&amp;quot;.to_string(),
        rank: 1,
        description: &amp;quot;not very competent, but a great hero&amp;quot;.to_string()
    };
    let wrapped_trainee = Rc::new(trainee);

    // Start by calling `clone()` to get a *reference* to the
    // trainee. This increases the reference count by one.
    let ref_trainee = wrapped_trainee.clone();
    // Then pass the reference to the `describe()` function.
    // Note that we *move* the reference to the function, so
    // once the function returns, the reference will go out
    // of scope, and the reference count will decrement.
    describe(ref_trainee);

    // When `main` ends, several things will happen in order:
    // 1. The reference count on the `wrapped_trainee` will
    //    go to zero. As a result, the `wrapped_trainee`
    //    pointer---the `Rc` type we created---will get
    //    cleaned up.
    // 2. Once `wrapped_trainee` has been cleaned up, Rust
    //    will notice that there are no more references
    //    anywhere to `trainee` and clean it up as well.
    //    (More on this below.)
}

fn describe(trainee: Rc&amp;lt;WouldBeJedi&amp;gt;) {
    // We now have a *reference* to the underlying data, and
    // therefore can freely access the underlying data.
    println!(&amp;quot;{} (rank {}) is {}.&amp;quot;,
             trainee.name,
             trainee.rank,
             trainee.description);


    // When we exit the function, Rust destroys this *owned*
    // clone of the reference, and that bumps the reference
    // count back down to 1 automatically.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if we strip out all the explanatory comments and details, the &lt;em&gt;normal&lt;/em&gt; versions of the Rust and Swift code are pretty similar.&lt;/p&gt;
&lt;p&gt;Rust—&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct WouldBeJedi {
    name: String,
    rank: u8,
    description: String,
}

impl WouldBeJedi {
    fn new(name: &amp;amp;str, rank: u8, description: &amp;amp;str) -&amp;gt; WouldBeJedi {
        WouldBeJedi {
            name: name.to_string(),
            rank: rank,
            description: description.to_string()
        }
    }
}

fn main() {
    let trainee = WouldBeJedi::new(
        &amp;quot;Zayne Carrick&amp;quot;,
        1,
        &amp;quot;not very competent, but still a great hero&amp;quot;);

    describe(&amp;amp;trainee);
}

fn describe(trainee: &amp;amp;WouldBeJedi) {
    println!(&amp;quot;{} (rank {}) is {}.&amp;quot;,
             trainee.name,
             trainee.rank,
             trainee.description);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swift (as usual, is &lt;em&gt;slightly&lt;/em&gt; briefer than Rust)—&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class WouldBeJedi {
    let name: String
    let rank: UInt8
    let description: String

    init(name: String, rank: UInt8, description: String) {
        self.name = name
        self.rank = rank
        self.description = description
    }
}

func main() {
    let aTrainee = WouldBeJedi(
        name: &amp;quot;Zayne Carrick&amp;quot;,
        rank: 1,
        description: &amp;quot;not very competent, but a great hero&amp;quot;)

    describe(aTrainee)
}

func describe(_ trainee: WouldBeJedi) {
    print(&amp;quot;\(trainee.name) (rank \(trainee.rank)) is \(trainee.description).&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that in both of these implementations, all the actual cleanup of the memory is handled behind the scenes—this feels much more like writing Python than writing C, &lt;em&gt;especially&lt;/em&gt; for complex data types. Not least because this same kind of nice cleanup can happen for complex, heap-allocated types like dynamically-sized vectors/arrays, etc. Both languages just manage it automatically. (The same is true of modern C++, for the most part, but it has a more complicated story there because of its relationship with C, where &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; and friends run rampant and are quite necessary for writing a lot of kinds of code.) Most of the time, when you’re done using data, you just &lt;em&gt;stop using it&lt;/em&gt;, and both Rust and Swift will clean it up for you. The feel of using either language is fairly similar, though the underlying semantics are quite different.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="part-2-deconstructiondeinitialization" class="level2"&gt;
&lt;h2&gt;Part 2: Deconstruction/Deinitialization&lt;/h2&gt;
&lt;p&gt;Both Rust and Swift recognize that, the ordinary case notwithstanding, there are many times when you &lt;em&gt;do&lt;/em&gt; need to run some cleanup as part of tearing down an object. For example, if you had an open database connection attached to an object, you should return it to the collection pool before finishing tear-down of the object.&lt;/p&gt;
&lt;p&gt;In Rust, this is accomplished by implementing the &lt;code&gt;Drop&lt;/code&gt; trait and supplying the requisite &lt;code&gt;drop&lt;/code&gt; method. Imagine we had defined a &lt;code&gt;Jedi&lt;/code&gt; type, with a bunch of details about the Jedi’s lightsaber (including whether the Jedi even &lt;em&gt;has&lt;/em&gt; a lightsaber. We know from the &lt;em&gt;Star Wars&lt;/em&gt; movies that lightsabers turn off automatically when the Jedi dies, or even just drops it for that matter. We can implement &lt;em&gt;all&lt;/em&gt; of this in Rust using just the &lt;code&gt;Drop&lt;/code&gt; trait. Here’s a pretty full example.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; (Note that both of these implementations draw heavily on material I covered in &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;previous posts&lt;/a&gt;.)&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;#[derive(Debug)]
enum Color {
    Red,
    Blue,
    Green,
    Purple,
    Yellow
}

enum SaberState {
    On,
    Off,
}

struct Lightsaber {
    color: Color,
    blades: u8,
    state: SaberState
}

impl Lightsaber {
    pub fn new(color: Color, blades: u8) -&amp;gt; Lightsaber {
        if blades &amp;gt; 2 {
            panic!(&amp;quot;That&amp;#39;s just silly. Looking at you, Kylo.&amp;quot;);
        }

        Lightsaber { color: color, blades: blades, state: SaberState::Off }
    }

    pub fn on(&amp;amp;mut self) {
        self.state = SaberState::On;
    }

    pub fn off(&amp;amp;mut self) {
        self.state = SaberState::Off;
    }
}

struct WouldBeJedi {
    name: String,
    lightsaber: Option&amp;lt;Lightsaber&amp;gt;,
}

impl WouldBeJedi {
    pub fn new(name: &amp;amp;str, lightsaber: Option&amp;lt;Lightsaber&amp;gt;) -&amp;gt; WouldBeJedi {
        WouldBeJedi { name: name.to_string(), lightsaber: lightsaber }
    }

    pub fn describe(&amp;amp;self) {
        let lightsaber = match self.lightsaber {
            Some(ref saber) =&amp;gt;
                format!(&amp;quot;a {:?} lightsaber with {:} blades.&amp;quot;, saber.color, saber.blades),
            None =&amp;gt; &amp;quot;no lightsaber.&amp;quot;.to_string()
        };

        println!(&amp;quot;{} has {}&amp;quot;, self.name, lightsaber)
    }
}

// Here&amp;#39;s the actually important bit.
impl Drop for WouldBeJedi {
    fn drop(&amp;amp;mut self) {
        if let Some(ref mut lightsaber) = self.lightsaber {
            lightsaber.off();
        }
    }
}


fn main() {
    let saber = Lightsaber::new(Color::Yellow, 1);
    let a_jedi = WouldBeJedi::new(&amp;quot;Zayne Carrick&amp;quot;, Some(saber));
    a_jedi.describe();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do much the same in Swift, using its deinitializers, which are fairly analogous to (but much simpler than) &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvii.html"&gt;its initializers&lt;/a&gt;, and fulfill the same role as Rust’s &lt;code&gt;Drop&lt;/code&gt; trait and &lt;code&gt;drop()&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;enum Color {
    case red, blue, green, purple, yellow
}

enum SaberState {
    case on, off
}

struct Lightsaber {
    let color: Color
    let blades: UInt8
    var state: SaberState = .off

    init?(color: Color, blades: UInt8) {
        if blades &amp;gt; 2 {
            print(&amp;quot;That&amp;#39;s just silly. Looking at you, Kylo.&amp;quot;)
            return nil
        }

        self.color = color
        self.blades = blades
    }

    mutating func on() {
        state = .on
    }

    mutating func off() {
        state = .off
    }
}

class WouldBeJedi {
    let name: String
    var lightsaber: Lightsaber?

    init(name: String, lightsaber: Lightsaber?) {
        self.name = name
        self.lightsaber = lightsaber
    }

    deinit {
        self.lightsaber?.off()
    }

    func describe() {
        let saberDescription: String
        if let saber = self.lightsaber {
            saberDescription = &amp;quot;a \(saber.color) lightsaber with \(saber.blades) blades.&amp;quot;
        } else {
            saberDescription = &amp;quot;no lightsaber.&amp;quot;
        }

        print(&amp;quot;\(name) has \(saberDescription)&amp;quot;)
    }
}

func main() {
    let saber = Lightsaber(color: .yellow, blades: 1)
    let aJedi = WouldBeJedi(name: &amp;quot;Zayne Carrick&amp;quot;, lightsaber: saber)
    aJedi.describe();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a bit briefer, but that’s mostly down to Swift’s shorthand for optionals (the &lt;code&gt;?&lt;/code&gt; operator), which we’ll get to in a future post.&lt;/p&gt;
&lt;p&gt;Curiously, &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt; types &lt;em&gt;cannot&lt;/em&gt; have deinitializers in Swift. I expect this has something to do with their being value types rather than reference types, but the book offers no comment. (If a reader knows the answer, I’d welcome clarification.)&lt;/p&gt;
&lt;p&gt;Much as in the discussion of of initializers, the usual patterns with Rust and Swift’s approach come into play. Rust opts to build the pattern on the same basic language machinery (traits). Swift uses a bit of syntactical sugar dedicated to the purpose. It’s undeniable that the Swift is a bit briefer.&lt;/p&gt;
&lt;p&gt;However, there are a couple upsides to Rust’s approach. First, it is applicable on &lt;em&gt;all&lt;/em&gt; types, where Swift’s applies only to classes. Second, there is no additional syntax to remember. &lt;code&gt;Drop&lt;/code&gt; is just a trait like any other, and &lt;code&gt;drop&lt;/code&gt; a method like any other. Third, then, this means that you can run it explicitly elsewhere if you need to, and as a result you can define whatever kind of custom deconstruction behavior you might need. If we’d created &lt;code&gt;a_jedi&lt;/code&gt; above in Rust, we could simply write &lt;code&gt;a_jedi.drop()&lt;/code&gt; anywhere:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn prove_incompetent(a_jedi: WouldBeJedi) {
    // make some series of grievous mistakes which mean
    // you&amp;#39;re no longer able to be a Jedi and as such,
    // among other things, lose your lightsaber...
    a_jedi.drop();
    // other stuff
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or (going a bit more abstract) we could define a &lt;code&gt;daring_derring_do()&lt;/code&gt; method which called &lt;code&gt;drop()&lt;/code&gt; itself:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;impl WouldBeJedi {
    pub fn daring_derring_do(self) {
        // do some other operation, like freeing slaves from
        // a secret colony of slavers. But if it fails...
        self.drop();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, really, define &lt;em&gt;any&lt;/em&gt; behavior which culminated in a &lt;code&gt;drop()&lt;/code&gt; call. That’s extremely powerful, and it’s the upside that comes with its just being a trait whose behavior we have to define ourselves.&lt;/p&gt;
&lt;p&gt;That takes us back to one of the fundamental differences in design between the two languages. Rust goes out of its way to leave power in the hands of the user, at the cost of requiring the user to be a bit more explicit. Swift prioritizes brevity and productivity, but it gets there by taking some of the power out of the hands of the developer. Neither of these is wrong, &lt;em&gt;per se&lt;/em&gt;. They’re just aiming for (and in this case, I think, fairly successfully landing in) somewhat different spots on a spectrum of tradeoffs.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; More on initializers!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I did, however, cover them &lt;a href="http://www.newrustacean.com/show_notes/e015/index.html" title="e015: Not dumb pointers"&gt;quite recently&lt;/a&gt; on my podcast. Yes, this &lt;em&gt;is&lt;/em&gt; another shameless plug.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Mostly, anyway. I believe the Swift compiler also does some degree of static analysis similar to that done by Rust—though to a &lt;em&gt;much&lt;/em&gt; lesser extent and, speaking purely descriptively, much less rigorously (it just has different goals). Swift then uses that analysis to handle things at compile time rather than via reference counts if it’s able to determine that it can do so.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;We could, if we so desired, get this same basic behavior in Rust. We can easily imagine a world in which every type was automatically wrapped in &lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt;, and in fact, I’d be very interested to see just such a language—something which was only a thin layer over Rust, keeping all its semantics but wrapping some or all non-stack-allocated types in &lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt; as appropriate. (Something like &lt;a href="http://manishearth.github.io/blog/2015/09/01/designing-a-gc-in-rust/"&gt;this&lt;/a&gt;, but done behind the scenes rather than manually opted into.) You’d incur some performance coasts, but with the benefit that you’d have an &lt;em&gt;extremely&lt;/em&gt; ergonomic, practical, ML-descended language quite appropriate for slightly higher-level tasks, and without the radical shift required by switching to a lazily-evaluated, purely functional language like Haskell.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Notably, those tradeoffs are often entirely worth it, and high-performance VMs have astoundingly good characteristics in many ways. The JVM, the CLR, and all the JavaScript VMs have astonishingly excellent performance at this point.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;I &lt;em&gt;might&lt;/em&gt; have gotten slightly carried away in the details here. I’m just a little bit of a nerd.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Consistency in User Interfaces</title><link href="http://www.chriskrycho.com/2016/consistency-in-user-interfaces.html" rel="alternate"></link><published>2016-07-15T10:37:00-04:00</published><updated>2016-07-15T10:37:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-07-15:/2016/consistency-in-user-interfaces.html</id><summary type="html">&lt;p&gt;People sometimes ask what I mean when I say Git’s UI is maddeningly inconsistent. Here’s a concrete example: what are the commands to list tags, branches, and stashes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag --list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow that up by noticing the difference in meaning for the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;People sometimes ask what I mean when I say Git’s UI is maddeningly inconsistent. Here’s a concrete example: what are the commands to list tags, branches, and stashes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag --list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow that up by noticing the difference in meaning for the &lt;code&gt;-v&lt;/code&gt; flag between the commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch -v&lt;/code&gt;: &lt;em&gt;verbose&lt;/em&gt; mode: list the hash with an abbreviated commit summary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -v&lt;/code&gt;: &lt;em&gt;verify&lt;/em&gt; a tag against its GPG signature&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list -v&lt;/code&gt;: no-op, completely ignored&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is &lt;em&gt;disastrously&lt;/em&gt; bad user interface design, and there is literally no reason for it except that the developers of Git, led by Linus Torvalds, don’t care about designing for end users. They hack in whatever commands seem to make the most sense right here and right now, and call it good—and then imply or directly state that anyone who has a problem with it is stupid or lazy.&lt;/p&gt;
&lt;p&gt;But users are neither stupid nor lazy, and it is not stupid or lazy to want a system to behave in a a consistent way. Imagine if the buttons on you car’s media dashboard (a plastic one where the labels stay the same) did different things depending on whether you were in &lt;em&gt;Drive&lt;/em&gt; or &lt;em&gt;Reverse&lt;/em&gt;. Or if the light switches in your house behaved differently if you were using your toaster than if you were vacuuming, “on” and “off” labels notwithstanding.&lt;/p&gt;
&lt;p&gt;Good user interface design is no less applicable to a command-line utility than to a pretty iOS app. Don’t let Linus Torvalds or anyone else tell you otherwise.&lt;/p&gt;
</content><category term="git"></category><category term="software development"></category></entry><entry><title>Rust and Swift (xvii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xvii.html" rel="alternate"></link><published>2016-06-30T23:00:00-04:00</published><updated>2016-07-04T10:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-30:/2016/rust-and-swift-xvii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvi.html"&gt;last part&lt;/a&gt;, I talked through the first chunk of the Swift book’s material on initializers. But it’s a long section, and I definitely didn’t cover everything. (I also got a few bits incorrect, and thankfully got great feedback to tighten it up from Twitter, so if you read it right after I posted it, you might skim back through and find the places where I added “&lt;strong&gt;Edit:&lt;/strong&gt; …”)&lt;/p&gt;
&lt;p&gt;Picking up from where we left on, then. Swift has a number of further initializer types, some of which map rather directly to the way initializers work in Rust, and some of which have no &lt;em&gt;direct&lt;/em&gt; analog at all.&lt;/p&gt;
&lt;p&gt;In the first category are the memberwise initializers Swift supplies by default for &lt;em&gt;all&lt;/em&gt; types. The most basic &lt;code&gt;init&lt;/code&gt; method just uses the names of the members of any given &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; type in Swift (as in the previous section, I’m going to use the types the Swift book uses for simplicity):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Size {
    var height = 0.0, width = 0.0
}

someSize = Size(height: 1.0, width: 2.0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This actually looks almost exactly like the normal way we construct types in Rust, where the same basic pattern would look like this:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Size {
    height: f64,
    width: f64,
}

some_size = Size { height: 1.0, width: 2.0 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two big differences between the languages here. The first, and most immediately apparent, is syntactical: in this case, Rust doesn’t have a function-call syntax for creating instances, and Swift does. Swift’s syntax is similar to one of the several C++ constructor patterns, or especially to Python’s initializer calls (if we made a point to be explicit about the keyword arguments):&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;class Size:
    height = 0.0
    width = 0.0
    def __init__(height, width):
        self.height = height
        self.width = width

someSize = Size(height=1.0, width=2.0)  # unnecessarily explicit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second, and more significant, is that the default, memberwise initializer in in Swift is only available &lt;em&gt;if you have not defined any other initializers&lt;/em&gt;. This is very, &lt;em&gt;very&lt;/em&gt; different from Rust, where there’s not really any such thing as a dedicated initializer—just methods. If we defined &lt;code&gt;Size::new&lt;/code&gt; or &lt;code&gt;Size::default&lt;/code&gt; or &lt;code&gt;Size::any_other_funky_initializer&lt;/code&gt;, it wouldn’t make a whit of difference in our ability to define the type this way.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; However, and this is important: because Rust has field-level public vs. private considerations, we cannot always do memberwise initialization of any given &lt;code&gt;struct&lt;/code&gt; type there, either; it is just that the reasons are different. So:&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;mod Shapes {
    struct Rectangle {
        pub height: f64,
        pub width: f64,
        area: f64,
    }
}

fn main() {
    // This won&amp;#39;t work: we haven&amp;#39;t constructed `Size::area`, and as we noted
    // last time, you cannot partially initialize a struct.
    let some_size = Shapes::Size { height: 1.0, width: 2.0 };

    // But neither will this, because `area` isn&amp;#39;t public:
    let some_other_size = Shapes::Size { height: 1.0, width: 2.0, area: 2.0 };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swift lets you refer to &lt;em&gt;other&lt;/em&gt; initializers on the same type (reinforcing that &lt;code&gt;init()&lt;/code&gt; is basically a kind of method, albeit one with some special rules and some special sugar). You do that by calling &lt;code&gt;self.init()&lt;/code&gt;, and—very importantly—you can only call it from within another initializer. No funky reinitializations or anything like that. The net result is that if you have a couple different variations on ways you might initialize a type, you still get the benefit of reusability; you don’t have to reimplement the same initialization function over and over again. Do whatever &lt;em&gt;additional&lt;/em&gt; setup is required in any given instance, and then call a common base initializer.&lt;/p&gt;
&lt;p&gt;With Rust, again, we just have methods, so you &lt;em&gt;could&lt;/em&gt; of course call them wherever you like. However, those methods are distinguished as being type-level or instance-level methods by their signatures, rather than by keyword. If the first argument is (some variant on) &lt;code&gt;self&lt;/code&gt;, it’s an instance method, otherwise, a type-level method. This eliminates any potential confusion around the initializers:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Foo {
    pub a: i32
}

impl Foo {
    pub fn new(a: i32) -&amp;gt; Foo {
        Foo { a: a }
    }

    pub fn bar(&amp;amp;self) {
        // yes:
        let another_foo = Foo::new();
        // no (won&amp;#39;t even compile):
        // let self_foo = self.new();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can (of course!) build up a type through multiple layers of methods which are useful to compose an instance &lt;em&gt;together&lt;/em&gt;. This is what the &lt;a href="http://doc.rust-lang.org/stable/style/ownership/builders.html"&gt;&lt;em&gt;builder pattern&lt;/em&gt;&lt;/a&gt; is all about. There are definitely times when you want to be able to tweak how your initialization plays out, and being able to do that without just passing in some hairy set of options in a special data type is nice.&lt;/p&gt;
&lt;p&gt;One other important qualification on the Swift initializers: those default, memberwise constructors you get for free? You &lt;em&gt;only&lt;/em&gt; get them for free if you don’t define your own initializers. (The closest analogy to this in Rust is that you’ll have issues if you try to both &lt;code&gt;#[derive(Default)]&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;impl Default for Foo&lt;/code&gt;, since both will give you an implementation of &lt;code&gt;Foo::default()&lt;/code&gt;.) You can get around this in Swift by using an &lt;em&gt;extension&lt;/em&gt;. We’ll come back to that in a future post.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; You can also get around it by supplying a parameter-less, body-less initializer in addition to any other initializers you supply, so: &lt;code&gt;init() {}&lt;/code&gt;. (This, frankly, seems like a hack to me. It’s a &lt;em&gt;useful&lt;/em&gt; hack, given the other constraints, but these kinds of things pile up.) Similarly, you can just reimplement member-wise initializers yourself if you have a reason to (say, if you’ve implemented any &lt;em&gt;others&lt;/em&gt; and therefore the defaults no longer exist).&lt;/p&gt;
&lt;p&gt;Now things take a turn into Swift-only territory &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html"&gt;again&lt;/a&gt; as we look at initialization in the context of inheritance. (As mentioned last time: Rust will eventually get inheritance-like behavior, but it’s coming much later, and is not going to be &lt;em&gt;exactly&lt;/em&gt; like classical inheritance. Rust &lt;em&gt;strongly&lt;/em&gt; favors composition over inheritance, where Swift &lt;em&gt;lightly&lt;/em&gt; does but still supports the latter.)&lt;/p&gt;
&lt;p&gt;Swift has two kinds of initializers for class initializers. One, a &lt;em&gt;designated initializer&lt;/em&gt;, is required; a designated initializer must fully initialize every property on a class, and call the superclass initializer (assuming there is one). These can be inherited, but again: they are required.&lt;/p&gt;
&lt;p&gt;There are also &lt;em&gt;convenience initializers&lt;/em&gt;, which provide variant APIs for setting up any given class. These (by definition, given what we said a moment ago) &lt;em&gt;must&lt;/em&gt; call a designated initializer along the way. These could be useful in a lot of different scenarios: setting up variants on the class (as in our temperature examples from before), doing alternate setup depending on initial conditions, etc.&lt;/p&gt;
&lt;p&gt;The only difference between the two syntactically is that &lt;em&gt;convenience&lt;/em&gt; initializers get the &lt;code&gt;convenience&lt;/code&gt; keyword in front of the &lt;code&gt;init&lt;/code&gt; declaration, so:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class Foo {
    var bar : Int
    let quux: String
    // designated
    init(_ bar: Int, _ quux: String) {
        self.bar = bar
        self.quux = quux
    }

    // A convenience method which only takes the string.
    convenience init(_ quux: String) {
        self.init(0, quux)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Swift book gives a set of rules about how these delegated and convenience initializers must behave. The short version is that convenience initializers (eventually) have to call a delegated initializer from &lt;em&gt;their own&lt;/em&gt; class, and designated initializers have to call a designated initializer from the &lt;em&gt;superclass&lt;/em&gt;. This is an implementation detail, though: from the perspective of a &lt;em&gt;user&lt;/em&gt; of the class, it doesn’t matter which initializer is called.&lt;/p&gt;
&lt;p&gt;The other important bit about Swift &lt;em&gt;class&lt;/em&gt; initialization is that it is a two-phase process, which you might think of as “primary initialization” and “customization.” The primary initialization sets up the properties on a class &lt;em&gt;as defined by the class which introduced them&lt;/em&gt;. The following sample should illustrate how it plays out:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class Foo {
    let plainTruth = &amp;quot;Doug Adams was good at what he did.&amp;quot;
    let answer = 0

    init() {
        baz = answer / 2
    }
}

// Bar inherits from Foo
class Bar: Foo {
    let question = &amp;quot;What is the meaning of life, the universe, and everything?&amp;quot;
    let answer = 42

    init() {
        super.init()  // calls Foo.init()
    }

    convenience init(newQuestion question: String, newAnswer answer: Int) {
        self.question = question
        self.answer = answer
        self.init()  // calls own `init()`
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When building a &lt;code&gt;Bar&lt;/code&gt; via either the designated or convenience initializer, &lt;code&gt;plainTruth&lt;/code&gt; and &lt;code&gt;answer&lt;/code&gt; will be set up from &lt;code&gt;Foo&lt;/code&gt;, then &lt;code&gt;question&lt;/code&gt; will be set and &lt;code&gt;answer&lt;/code&gt; will be reassigned in &lt;code&gt;Bar&lt;/code&gt;. If the convenience initializer is used, then it will also override those new defaults with the arguments passed by the caller, before running the designated initializer, which will in turn call the superclass designated initializer. The machinery all makes good sense; I appreciate that there are no weird edge cases in the initialization &lt;em&gt;rules&lt;/em&gt; here. (There &lt;em&gt;are&lt;/em&gt; a bunch of special rules about which initializers get inherited; I’m just going to leave those aside at this point as they’re entirely irrelevant for a comparison between the languages. We’re already pretty far off into the weeds here.)&lt;/p&gt;
&lt;p&gt;Obviously, none of this remotely applies to Rust at all. Not having inheritance &lt;em&gt;does&lt;/em&gt; keep these things simpler (though of course it also means there’s a tool missing from your toolbox which you might miss). And of course, the rules around &lt;em&gt;method resolution&lt;/em&gt; are not totally trivial there, especially now that &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md"&gt;&lt;code&gt;impl&lt;/code&gt; specialization&lt;/a&gt; is making its way &lt;a href="https://github.com/rust-lang/rust/issues/31844"&gt;into the language&lt;/a&gt;. But those don’t strictly speaking, affect &lt;em&gt;initialization&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To account for the case that initialization can fail, Swift lets you definite &lt;em&gt;failable&lt;/em&gt; initializers, written like &lt;code&gt;init?()&lt;/code&gt;. Calling such an initializer produces an optional. You trigger the &lt;code&gt;nil&lt;/code&gt; valued optional state by writing &lt;code&gt;return nil&lt;/code&gt; at some point in the body of the initializer. Quoting from the Swift book, though, “Strictly speaking, initializers do not return a value…. Although you write &lt;code&gt;return nil&lt;/code&gt; tro trigger an initialization failure, you do not use the &lt;code&gt;return&lt;/code&gt; keyword to indicate initialization success.” These failable initializers get the same overall behavior and treatment as normal initializers in terms of delegating to other initializers within the same class, and inheriting them from superclasses.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class Foo {
    let bar: Int
    init?(succeed: Bool) {
        if !succeed {
            return nil
        }

        bar = 42
    }
}

let foo = Foo(true)
print(&amp;quot;\(foo?.bar)&amp;quot;)  // 42
let quux = Foo(false)
Print(&amp;quot;\(foo?.bar)&amp;quot;)  // nil&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is another of the places where Swift’s choice to treat initialization as a special case, not just another kind of method, ends up having some weird side effects. If &lt;code&gt;init&lt;/code&gt; calls were &lt;em&gt;methods&lt;/em&gt;, they would always just be &lt;em&gt;returning the type&lt;/em&gt;. This is exactly what we see in Rust, of course. To be clear, there are reasons why the Swift team made that choice, and many of them we’ve already touched on incidentally; the long and short of it is that inheritance adds some wrinkles. These aren’t &lt;em&gt;constructors&lt;/em&gt;, they’re &lt;em&gt;initializers&lt;/em&gt;. The point, per the Swift book, is “to ensure that &lt;code&gt;self&lt;/code&gt; is fully and correctly initializer by the time that initialization ends.” If you’re familiar with Python, you can think of Swift initializers as being quite analogous to &lt;code&gt;__init__(self)&lt;/code&gt; methods, which similarly are responsible for &lt;em&gt;initialization&lt;/em&gt; but not &lt;em&gt;construction&lt;/em&gt;. When we build a type in Rust, by contrast, we’re doing something much more like calling Python &lt;code&gt;__new__(cls)&lt;/code&gt; methods, which &lt;em&gt;do&lt;/em&gt; construct the type.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Edit:&lt;/strong&gt; interestingly, I’m &lt;a href="https://twitter.com/austinzheng/status/749831726122217473"&gt;informed via Twitter&lt;/a&gt; that Swift initializers can also throw errors. (Thanks, Austin!) The Swift book doesn’t mention this because it hasn’t gotten to error-handling yet (and so, neither have we).&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can of course write failable constructors in Rust, too:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Foo {
    bar: i64,
};

impl Foo {
    pub fn optional_new(succeed: bool) -&amp;gt; Option&amp;lt;Foo&amp;gt; {
        if succeed { Some(Foo { bar: 0 }) }
        else { None }
    }
}

let foo = Foo::optional_new(true);
match foo {
    Some(f) =&amp;gt; println!(&amp;quot;{}&amp;quot;, f.bar),
    None =&amp;gt; println!(&amp;quot;None&amp;quot;),
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are conditions in both languages where you’d want to do this: places where an initialization &lt;em&gt;can&lt;/em&gt; fail, e.g. trying to open a file, or open a websocket, or anything where the type represents something that is not guaranteed to return a valid result. It makes sense then that in both cases, returning an &lt;em&gt;optional&lt;/em&gt; value is the outcome. Of course, Rust can equally well have an initializer return a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Waffles {
    syrup: bool,
    butter: bool,
}

impl Waffles {
    fn properly(all_supplies: bool) -&amp;gt; Result&amp;lt;Waffles, String&amp;gt; {
        if all_supplies {
            Ok(Waffles { syrup: true, butter: true } )
        }
        else {
            let msg = &amp;quot;Who makes waffles this way???&amp;quot;;
            Err(msg.to_string())
        }
    }
}

let waffles = Waffles::properly(true);
match waffles {
    Ok(_) =&amp;gt; println!(&amp;quot;Got some waffles, yeah!&amp;quot;),
    Err(s) =&amp;gt; println!(&amp;quot;{:}&amp;quot;, s),
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;del&gt;This is simply not the kind of thing you can do in Swift, as far as I can tell. The upside to Swift’s approach is that there is one, standard path. The downside is that if you have a scenario where it makes sense to return an error—i.e., to indicate &lt;em&gt;why&lt;/em&gt; a class failed to initialize and not merely &lt;em&gt;that&lt;/em&gt; it failed—you’re going to have to jump through many more hoops.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/del&gt; &lt;em&gt;&lt;strong&gt;Edit:&lt;/strong&gt; See above; Swift &lt;em&gt;can&lt;/em&gt; do this. Moreover, the underlying semantics aren’t especially different from Rust’s. However, it does introduce &lt;em&gt;yet more&lt;/em&gt; syntax, rather than just being a normal return. But we’ll talk about that in more detail when we get to error-handling.&lt;/em&gt;&lt;a href="#fn4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; The downside for Rust is that there’s no shorthand; everything is explicit. The upside is the flexibility to do as makes the most sense in a given context, including defining whatever types you need and returning them as you see fit. If you need a type like &lt;code&gt;PartialSuccessPossible&amp;lt;C, P, E&amp;gt;&lt;/code&gt; where &lt;code&gt;C&lt;/code&gt; is a complete type, &lt;code&gt;P&lt;/code&gt; a partial type, and &lt;code&gt;E&lt;/code&gt; an error, you can do that. (I’m not saying that’s a good idea, for the record.) That in turn flows out of building even higher level language features on lower-level features and not introducing new syntax for the most part. Trade-offs!&lt;/p&gt;
&lt;p&gt;And with that, we’re done talking about initializers. This was a &lt;em&gt;huge&lt;/em&gt; topic—but it makes sense. If you don’t nail this down carefully, you’ll be in for a world of hurt later, and that goes whether you’re designing a language or just using it to build things.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvi.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Initialization: another area where Swift has a lot more going on than Rust.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[**Next: Deinitialization: ownership semantics and automatic reference counting][18]&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Also recall that in Rust, we would set the default values either by using the &lt;code&gt;#[derive(Default)]&lt;/code&gt; annotation or by implementing the &lt;code&gt;Default&lt;/code&gt; trait ourselves.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’m including a module because of a quirk around the public/private rules: within the same module, &lt;code&gt;area&lt;/code&gt; isn’t hidden and you can actually go ahead and initialize the object.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Depending on how you think about extensions, &lt;em&gt;either&lt;/em&gt; Rust doesn’t have anything quite like them… &lt;em&gt;or&lt;/em&gt; every type implementation is just an extension, because &lt;code&gt;impl&lt;/code&gt; allows you to extend &lt;em&gt;any&lt;/em&gt; data type in basically arbitrary ways (a few caveats of course). More on all of this when we get there.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Here’s a preview of what that would look like, though (fair warning, there’s a lot going on here we haven’t talked about!):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;enum Setup {
    case succeed
    case error
    case fail
}

enum BarSetupError: ErrorProtocol {
    case argh
}

class Bar {
    let blah: Int
    init?(setup: Setup) throws {
        switch setup {
        case .succeed:
            blah = 42
        case .error:
            throw BarSetupError.argh
        case .fail:
            return nil
        }
    }
}

do {
    let bar = try Bar(setup: .succeed)
    print(&amp;quot;\(bar!.blah)&amp;quot;)

    let baz = try Bar(setup: .fail)
    print(&amp;quot;\(baz?.blah)&amp;quot;)

    let quux = try Bar(setup: .error)
    print(&amp;quot;\(quux?.blah)&amp;quot;)
} catch BarSetupError.argh {
    print(&amp;quot;Oh teh noes!&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output from this would be &lt;code&gt;42&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt;, and &lt;code&gt;Oh teh noes!&lt;/code&gt;.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;&lt;del&gt;It’s conceivable this is actually possible, but nothing in &lt;em&gt;The Swift Programming Language&lt;/em&gt; even hints at it, if so.&lt;/del&gt; See above!&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Y Combinators, how do they even work?</title><link href="http://www.chriskrycho.com/2016/y-combinators-how-do-they-even-work.html" rel="alternate"></link><published>2016-06-19T09:20:00-04:00</published><updated>2016-06-19T09:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-19:/2016/y-combinators-how-do-they-even-work.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I was reading &lt;a href="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/"&gt;a post&lt;/a&gt; by &lt;a href="http://matt.might.net"&gt;Matt Might&lt;/a&gt;, a computer science professor at the University of Utah, about Y Combinators, and I was having a hard time tracking with some of it just by reading. The way I normally solve this problem is to write it out—and, optimally, to …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I was reading &lt;a href="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/"&gt;a post&lt;/a&gt; by &lt;a href="http://matt.might.net"&gt;Matt Might&lt;/a&gt;, a computer science professor at the University of Utah, about Y Combinators, and I was having a hard time tracking with some of it just by reading. The way I normally solve this problem is to write it out—and, optimally, to write it out in something roughly like &lt;a href="https://wiki.haskell.org/Literate_programming"&gt;Literate Haskell&lt;/a&gt; or &lt;a href="http://coffeescript.org/#literate"&gt;Literate CoffeeScript&lt;/a&gt;. That’s exactly what you’ll find below; this is basically &lt;em&gt;commentary&lt;/em&gt; on Might’s original post.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;A few other prefatory notes:&lt;/i&gt;&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;i class=editorial&gt;Since this is commentary, I’m not focusing on explaining combinators in general. For a very helpful explanation, though, both of what combinators are and why you’d ever want to use them, &lt;a href="http://programmers.stackexchange.com/a/117575"&gt;read this&lt;/a&gt;.&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=editorial&gt;The Y Combinator itself isn’t all that useful for ordinary programming. It &lt;em&gt;is&lt;/em&gt; really useful as a way of thinking about how programming &lt;em&gt;works&lt;/em&gt;, and that’s why I was reading about it and trying to figure out what was going on in Might’s original post.&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=editorial&gt;This didn’t actually all make sense to me until I also read Might’s post, &lt;a href="http://matt.might.net/articles/python-church-y-combinator/"&gt;“Equational derivations of the Y combinator and Church encodings in Python”&lt;/a&gt;. Which is a crazy post. But kind of fun. &lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Note for background (this was new to me today): &lt;span class="math inline"&gt;&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;v&lt;/em&gt;.&lt;em&gt;e&lt;/em&gt;&lt;/span&gt; is the function which maps v to e. In ECMAScript 2015 or later (hereafter just JS):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const λv_e = v =&amp;gt; e&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Y Combinator is a higher-order functional: it is a function which takes a functional/higher-order function. Quoting from Might:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Y combinator takes a functional as input, and it returns the (unique) fixed point of that functional as its output. A functional is a function that takes a function for its input. Therefore, the fixed point of a functional is going to be a function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And a “fixed point” is an input to a function equal to the &lt;em&gt;output&lt;/em&gt; of the function. (Not all functions have such.) A fixed point is where &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;) = &lt;em&gt;x&lt;/em&gt;&lt;/span&gt;. He uses the example &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;x&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; − 1&lt;/span&gt;, which has two solutions, two &lt;em&gt;fixed points&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;He starts out with the total recursion form—also known as the “crash all the things!” form—of the Y-combinator. (I’m using letters to denote the version of the combinator; this is Y-naive.)&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Yn = (F) =&amp;gt; F(Yn(F))  // all the recursing!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;“Crash all the things”… because of one pesky little detail: it calls itself immediately, and so recurses infinitely. Which is actually kind of a problem.&lt;/p&gt;
&lt;p&gt;Might then asks: What if we transformed this a bit? He notes that we can &lt;em&gt;transform&lt;/em&gt; with lambda calculus to expand what we’re doing, so:&lt;/p&gt;
&lt;figure&gt;
&lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;) = &lt;em&gt;F&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.(&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;))&lt;/span&gt;
&lt;/figure&gt;
&lt;p&gt;(I haven’t done this kind of thing since undergraduate math work I did for physics, but as I was thinking about it, it made sense. I’m used to trying to &lt;em&gt;remove&lt;/em&gt; extraneous variables when dealing with software, but in this case we’re using it as a tool for transforming the equation into a form that is &lt;em&gt;equivalent&lt;/em&gt; but &lt;em&gt;expressed differently&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;And &lt;span class="math inline"&gt;&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.(&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; is equivalent to the fixed point. It’s the function which takes &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; as an argument and results in &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;)(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;; but &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;)&lt;/span&gt; is just another argument, so this looks just like our original &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;) = &lt;em&gt;x&lt;/em&gt;&lt;/span&gt;, but with &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;)&lt;/span&gt; substituted for &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;&lt;/span&gt;. Can we write this in JS?&lt;/p&gt;
&lt;p&gt;Here’s my implementation, using modern JS; note that it still recurses. (I’m calling this updated Y-transformed, so &lt;code&gt;Yt&lt;/code&gt;.)&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Yt = (F) =&amp;gt; F((x) =&amp;gt; Yt(F)(x))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;His version:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;function Y(F) { return F(function(x) { return Y(F)(x); }); }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mine and his are equivalent; here’s his version transformed to modern JS:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Y = (F) =&amp;gt; F((x) =&amp;gt; Y(F)(x))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Might then says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using another construct called the U combinator, we can eliminate the recursive call inside the Y combinator, which, with a couple more transformations gets us to:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hated it when profs (or books!) did this when I was in college, and it frustrates me here, too. I want to &lt;em&gt;see&lt;/em&gt; the transformation. I really wish Might didn’t skip how the U combinator works or what transformations he applies, because then he jumps to this form:&lt;/p&gt;
&lt;figure&gt;
&lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt; = (&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;.&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;.&lt;em&gt;F&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.((&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;h&lt;/em&gt;))(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;)))(&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;.&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;.&lt;em&gt;F&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.((&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;h&lt;/em&gt;))(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;)))&lt;/span&gt;
&lt;/figure&gt;
&lt;p&gt;Writing this out in JS is going to be a real bear. More to the point, I don’t know how he got to it; now I need to go look up the U Combinator it seems.&lt;/p&gt;
&lt;p&gt;…which I’ve &lt;a href="http://www.ucombinator.org"&gt;now done&lt;/a&gt;. So:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the theory of programming languages, the U combinator, &lt;span class="math inline"&gt;&lt;em&gt;U&lt;/em&gt;&lt;/span&gt;, is the mathematical function that applies its argument to its argument; that is &lt;span class="math inline"&gt;&lt;em&gt;U&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;)&lt;/span&gt;, or equivalently, &lt;span class="math inline"&gt;&lt;em&gt;U&lt;/em&gt; = &lt;em&gt;λ&lt;/em&gt;&lt;em&gt;f&lt;/em&gt;.&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;That is, the U Combinator is the case where you apply a function to itself: &lt;span class="math inline"&gt;&lt;em&gt;U&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;)&lt;/span&gt;—you can see that in the result there, where the first expression is the same as the argument handed to it (and both are functions). It’s also there in the &lt;span class="math inline"&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;h&lt;/em&gt;)&lt;/span&gt; calls.&lt;/li&gt;
&lt;li&gt;The transformations are just transforming from a function-argument for to a lambda form, I think. The kind of thing where you go from &lt;code&gt;function a(b) { return c }&lt;/code&gt; to &lt;code&gt;var a = function(b) { return c }&lt;/code&gt; in JS. (Better, in &lt;em&gt;modern&lt;/em&gt; JS, to &lt;code&gt;const a = (b) =&amp;gt; c&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll return to that in a moment. First, writing up the JS. The innermost term is (repeated) &lt;span class="math inline"&gt;&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.((&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;h&lt;/em&gt;))(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;, so we’ll start by writing this out.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const λ_inner = (x) =&amp;gt; (h(h)(F))(x)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need the definition of &lt;span class="math inline"&gt;&lt;em&gt;h&lt;/em&gt;&lt;/span&gt; next; this comes from further out, the transformation &lt;span class="math inline"&gt;&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;.&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;.&lt;em&gt;F&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;em&gt;n&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;em&gt;r&lt;/em&gt;)&lt;/span&gt; (where we’re substituting the &lt;code&gt;λ_inner&lt;/code&gt; we just wrote to make this a bit easier to get our heads around).&lt;/p&gt;
&lt;p&gt;Remembering that each “.” in the equation represents a mapping, i.e. a JS function call, we have this (writing it with function definitions starting new lines to clarify):&lt;/p&gt;
&lt;p&gt;Here’s what I came up with as a fairly direct translation into JS:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Y = (
  (h) =&amp;gt;
    (F) =&amp;gt; F((x) =&amp;gt; (h(h)(F))(x))  // substituting λ_inner from above
) (
  (h) =&amp;gt;
    (F) =&amp;gt; F((x) =&amp;gt; (h(h)(F))(x))  // substituting λ_inner from above
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;His (note that things are aligned as they are so that it’s clear which functions match up):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;var Y = function (F) {
 return (function (x) {
  return F(function (y) { return (x(x))(y);});
  })
        (function (x) {
  return F(function (y) { return (x(x))(y);});
  }) ;
} ;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;His transformed to modern JS:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Y = (F) =&amp;gt; (
  (x) =&amp;gt; F((y) =&amp;gt; x(x)(y))
) (
  (x) =&amp;gt; F((y) =&amp;gt; x(x)(y))
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;His and mine are not &lt;em&gt;quite&lt;/em&gt; the same (though I know they’re equivalent because they both work). I really wish he’d explained how he got &lt;em&gt;this&lt;/em&gt; substitution as well! More importantly, I wish he’d been consistent in his notation; changing variable names is… frustrating when you’re trying to follow someone’s work.&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;When I get stuck on something like &lt;em&gt;this&lt;/em&gt;, the way I figure it out is by writing out how the substitutions would work at each step. See below.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;In any case, now that we have the Y combinator, we can use it with &lt;code&gt;FactGen&lt;/code&gt;, a functional which, if you pass it the factorial function, passes back the factorial function. &lt;code&gt;FactGen&lt;/code&gt; itself isn’t recursive. But with the Y Combinator, it builds a function which is &lt;em&gt;not&lt;/em&gt; recursive; it doesn’t reference itself anywhere. It just needs the right kind of “factory”: a function which returns &lt;em&gt;another&lt;/em&gt; funtion which itself &lt;em&gt;is&lt;/em&gt; recursive. Here’s a standard recursive factorial implementation (identical to the one Might supplies, though modernized):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const FactGen =
  (fact) =&amp;gt;
    (n) =&amp;gt; n === 0 ? 1 : n * fact(n - 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You call that like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;Y(FactGen)(5)  // 120&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Y(FactGen)&lt;/code&gt; call gets back a function which then runs on whatever input you hand it (a fairly standard pattern with curried arguments), so you could also write it like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const factorial = Y(FactGen)
factorial(5)  // 120&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I’m still not sure how his and mine are equivalent.&lt;/p&gt;
&lt;p&gt;A note: wrapping things in &lt;code&gt;(...)&lt;/code&gt; in JS defines that wrapped content as a distinct &lt;em&gt;expression&lt;/em&gt;. As long as the type of a given expression is a function, it can be called with an argument. So &lt;code&gt;(function() {})()&lt;/code&gt; or &lt;code&gt;(() =&amp;gt; {})()&lt;/code&gt; takes a no-operation function and immediately executes it.&lt;/p&gt;
&lt;p&gt;So in his Y combinator, the substitution goes like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Y = (F) =&amp;gt; (  // F is FactGen
  // x is the identical function passed as argument below
  (x) =&amp;gt;
    // Run FactGen by taking the function below as its `fact`
    // argument.
    F(
      // `y` is the argument passed to the result of Y, e.g.
      // `fact(5)`. Recall that `x` is the function below; we
      // call it with itself. Calling x(x) will get the actual
      // factorial function returned by `FactGen`.
      (y) =&amp;gt; x(x)(y)
    )
// We close the *expression* which defines the outer function,
// and call it with this next expression as an argument.
) (
  // and x here is the same function, passed as argument
  (x) =&amp;gt;
    // Again, run `FactGen` with this function as its argument.
    F(
      // `y`, again, will be the integer. `x(x)` again will be
      // the actual factorial function.
      (y) =&amp;gt; x(x)(y)
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is pretty funky! But it works; the two anonymous functions call &lt;em&gt;each other&lt;/em&gt; rather than recursing directly.&lt;/p&gt;
&lt;p&gt;In mine, it goes like this, instead:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Ymine = (
  // Where in Might&amp;#39;s example, the `x` function was where the
  // U Combinator was applied, here (because I followed the
  // original notation he gave) it&amp;#39;s `h`. So it&amp;#39;s `h` which is
  // the same function handed back and forth as argument
  // to itself.
  (h) =&amp;gt;
    // `h` takes a functional, which takes `FactGen` as its
    // parameter. This is similar to the outermost function in
    // Might&amp;#39;s version.
    (F) =&amp;gt;
      // As in Might&amp;#39;s version, we call `FactGen` here.
      F(
        // The form is *similar* but not identical to his,
        // because of the extra call structure. `h(h)(F)` is the
        // factorial function.
        //
        // Note that then he has `y` where I have `x`; my `x`
        // and his `y` are just the result of the computation
        // (in this case, the integer factorial).
        (x) =&amp;gt; (h(h)(F))(x))
) (
  // This is identical to the above; it&amp;#39;s using the U Combinator.
  (h) =&amp;gt; (F) =&amp;gt; F((x) =&amp;gt; (h(h)(F))(x))
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is how his simplification worked: instead of generating the factorial function each time, it generated it just the once and then &lt;em&gt;used&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;I still couldn’t &lt;em&gt;do&lt;/em&gt; the simplification he did myself. It’ll take more practice using and thinking about combinators and combinatorial logic before I get there, but that’s okay. That’s how learning works.&lt;/p&gt;
&lt;p&gt;And that’s enough playing with combinatorials for now. (Except that I’m kind of tempted to see if I can go implement the U or Y combinators—or both—in Rust.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class=editorial&gt;If you’re curious how I worked this out… I expanded the JS representations of the final forms (&lt;a href="//www.chriskrycho.com/extra/ycombinator.js"&gt;here’s the code&lt;/a&gt;) and then stepped through the result in my JavaScript dev tools, watching how the function calls worked and what the values of each intermediate value were. It’s fascinating, and well worth your time.&lt;/i&gt;&lt;/p&gt;
</content><category term="javascript"></category><category term="software development"></category><category term="programming languages"></category></entry><entry><title>Vectors and Iterator Access in Rust</title><link href="http://www.chriskrycho.com/2016/vectors-and-iterator-access-in-rust.html" rel="alternate"></link><published>2016-06-16T20:59:00-04:00</published><updated>2016-06-16T20:59:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-16:/2016/vectors-and-iterator-access-in-rust.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;In the midst of doing my reading and research for New Rustacean episode 15 (which will be out fairly soon after I post this), I bumped into this little tidbit. It doesn’t fit in the episode, so I thought I’d share it here.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;When you’re dealing with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;In the midst of doing my reading and research for New Rustacean episode 15 (which will be out fairly soon after I post this), I bumped into this little tidbit. It doesn’t fit in the episode, so I thought I’d share it here.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;When you’re dealing with vectors in Rust, a common misstep when working with them via iterators is to &lt;em&gt;move&lt;/em&gt; them when you only to &lt;em&gt;borrow&lt;/em&gt; them. If you write &lt;code&gt;for i in x&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is an iterator, you’ll &lt;em&gt;move&lt;/em&gt; the iterator into the looping construct. Instead, you should nearly always write &lt;code&gt;for i in &amp;amp;x&lt;/code&gt; to borrow a reference to the iterator, or &lt;code&gt;for i in &amp;amp;mut x&lt;/code&gt; if you need to get a mutable reference to it.&lt;/p&gt;
</content><category term="rust"></category></entry><entry><title>Testing Ember.js Mixins (and Helpers) With a Container</title><link href="http://www.chriskrycho.com/2016/testing-emberjs-mixins-with-a-container.html" rel="alternate"></link><published>2016-06-09T20:35:00-04:00</published><updated>2017-04-20T07:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-09:/2016/testing-emberjs-mixins-with-a-container.html</id><summary type="html">&lt;p&gt;&lt;i&gt;Updated to note that the same concerns apply to helpers. You can always see the full revision history of this item &lt;a href="https://github.com/chriskrycho/chriskrycho.com/commits/master/content/tech/ember-js-mixins-container.md"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Today I was working on an Ember.js &lt;a href="http://emberjs.com/api/classes/Ember.Mixin.html#content"&gt;mixin&lt;/a&gt; for the new mobile web application we’re shipping at Olo, and I ran into an interesting problem when …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i&gt;Updated to note that the same concerns apply to helpers. You can always see the full revision history of this item &lt;a href="https://github.com/chriskrycho/chriskrycho.com/commits/master/content/tech/ember-js-mixins-container.md"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Today I was working on an Ember.js &lt;a href="http://emberjs.com/api/classes/Ember.Mixin.html#content"&gt;mixin&lt;/a&gt; for the new mobile web application we’re shipping at Olo, and I ran into an interesting problem when trying to test it.&lt;/p&gt;
&lt;p&gt;When you’re testing mixins (or helpers), you’re generally not working with the normal Ember container.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In fact, the default test setup for mixins doesn’t have &lt;em&gt;any&lt;/em&gt; container in play. It just looks like this (assuming you ran &lt;code&gt;ember generate mixin bar&lt;/code&gt; in an app named &lt;code&gt;foo&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import BarMixin from &amp;#39;foo/mixins/bar&amp;#39;;
import { module, test } from &amp;#39;qunit&amp;#39;;

module(&amp;#39;Unit | Mixin | bar&amp;#39;);

// Replace this with your real tests.
test(&amp;#39;it works&amp;#39;, function(assert) {
  let BarObject = Ember.Object.extend(BarMixin);
  let subject = BarObject.create();
  assert.ok(subject);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It uses the basic Qunit &lt;code&gt;module&lt;/code&gt; setup, not the ember-qunit &lt;code&gt;moduleFor&lt;/code&gt; setup.&lt;/li&gt;
&lt;li&gt;It assumes you’re generating a new object instance for every single test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of those assumptions are fine, &lt;em&gt;if you don’t need to interact with the container&lt;/em&gt;. In many cases, that’s perfectly reasonable—I’d go so far as to say that most mixins and helpers probably &lt;em&gt;shouldn’t&lt;/em&gt; have any dependency on the container.&lt;/p&gt;
&lt;p&gt;In the specific case I was working on, however, the point of the mixin was to abstract some common behavior which included all the interactions with a &lt;a href="https://guides.emberjs.com/v2.6.0/applications/services/"&gt;service&lt;/a&gt;. This meant making sure the dependency injection worked in the unit test. This in turn meant dealing with the container. So let’s see what was involved in that. (You can generalize this approach to any place in the Ember ecosystem where you need to test something which doesn’t normally have the container set up.)&lt;/p&gt;
&lt;p&gt;We start by switching from the basic &lt;code&gt;qunit&lt;/code&gt; helpers to using the &lt;code&gt;ember-qunit&lt;/code&gt; helpers.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// Replace this...
import { module, test } from &amp;#39;qunit&amp;#39;;
module(&amp;#39;Unit | Mixin | bar&amp;#39;);

// with this:
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;
moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | Bar&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;moduleFor()&lt;/code&gt; helper has two things going for it—one of which we &lt;em&gt;need&lt;/em&gt;, and one of which isn’t strictly &lt;em&gt;necessary&lt;/em&gt;, but has some nice functionality. In any case, this will help when registering a container. Those two features:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It does support the use of the container. In fact, it’s declaring how this mixin relates to the container in the first argument to the helper function: &lt;code&gt;'mixin:foo'&lt;/code&gt; is the definition of the mixin for injection into the container.&lt;/li&gt;
&lt;li&gt;Any functions we define on the options argument we can pass to the &lt;code&gt;moduleFor()&lt;/code&gt; helper are available on the &lt;code&gt;this&lt;/code&gt; of the test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, in the first version of this, I had set up a common &lt;code&gt;Ember.Object&lt;/code&gt; which had mixed in the &lt;code&gt;BarMixin&lt;/code&gt;, so:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const BarObject = Ember.Object.extend(BarMixin);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, in each test, I created instances of this to use:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;test(&amp;#39;test some feature or another&amp;#39;, function(assert) {
  const subject = BarObject.create();
  // ...do stuff and test it with `assert.ok()`, etc.
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem was that any of those tests which required a container injection always failed. Assume we have a service named &lt;code&gt;quux&lt;/code&gt;, and that it’s injected into the mixin like this in &lt;code&gt;foo/app/mixins/bar.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;

export default Ember.Mixin.create({
  quux: Ember.inject.service()
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any test which actually tried to &lt;em&gt;use&lt;/em&gt; &lt;code&gt;quux&lt;/code&gt; would simply fail because of the missing container (even if you specified in the test setup that you needed the service):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test(&amp;#39;it uses quux somehow&amp;#39;, function(assert) {
  const subject = BarObject.create();
  const quux = subject.get(&amp;#39;quux&amp;#39;);  // throws Error
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifically, you will see &lt;code&gt;Attempting to lookup an injected property on an object without a container&lt;/code&gt; if you look in your console.&lt;/p&gt;
&lt;p&gt;Taking advantage of the two &lt;code&gt;ember-qunit&lt;/code&gt; features, though, we can handle all of this.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;

const { getOwner } = Ember;

moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | bar&amp;#39;, {
  // The `needs` property in the options argument tells the test
  // framework that it needs to go find and instantiate the `quux`
  // service. (Note that if `quux` depends on other injected
  // services, you have to specify that here as well.)
  needs: [&amp;#39;service:quux&amp;#39;],

  // Again: any object we create in this options object will be
  // available on the `this` of every `test` function below. Here,
  // we want to get a &amp;quot;test subject&amp;quot; which is attached to the
  // Ember container, so that the container is available to the
  // test subject itself for retrieving the dependencies injected
  // into it (and defined above in `needs`).
  subject() {
    BarObject = Ember.Object.extend(BarMixin);

    // This whole thing works because, since we&amp;#39;re in a
    // `moduleFor()`, `this` has the relevant method we need to
    // attach items to the container: `register()`.
    this.register(&amp;#39;test-container:bar-object&amp;#39;, BarObject);

    // `Ember.getOwner` is the public API for getting the
    // container to do this kind of lookup. You can use it in lots
    // of places, including but not limited to tests. Note that
    // that because of how the dependency injection works, what we
    // get back from the lookup is not `BarObject`, but an
    // instance of `BarObject`. That means that we don&amp;#39;t need to
    // do `BarObject.create()` when we use this below; Ember
    // already did that for us.
    return getOwner(this).lookup(&amp;#39;test-container:bar-object&amp;#39;);
  }
});

test(&amp;#39;the mixin+service does what it should&amp;#39;, function(assert) {
  // We start by running the subject function defined above. We
  // now have an instance of an `Ember.Object` which has
  // `BarMixin` applied.
  const subject = this.subject();

  // Now, because we used a test helper that made the container
  // available, declared the dependencies of the mixin in `needs`,
  // and registered the object we&amp;#39;re dealing with here, we don&amp;#39;t
  // get an error anymore.
  const quux = subject.get(&amp;#39;quux&amp;#39;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in summary:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Use the &lt;code&gt;ember-qunit&lt;/code&gt; helpers if you need the container.&lt;/li&gt;
&lt;li&gt;Define whatever dependencies you have in &lt;code&gt;needs&lt;/code&gt;, just as you would in any other test.&lt;/li&gt;
&lt;li&gt;Register the mixin-derived object (whether &lt;code&gt;Ember.Object&lt;/code&gt;, &lt;code&gt;Ember.Route&lt;/code&gt;, &lt;code&gt;Ember.Component&lt;/code&gt;, or whatever else) in a method on the options argument for &lt;code&gt;moduleFor()&lt;/code&gt;. Use that to get an instance of the object and you’re off to the races!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One final consideration: while in this case it made good sense to use this approach and make the service injection available for the test, there’s a reason that the tests generated by Ember CLI don’t use &lt;code&gt;moduleFor()&lt;/code&gt; by default. It’s a quiet but clear signal that you should reevaluate whether this &lt;em&gt;is&lt;/em&gt; in fact the correct approach.&lt;/p&gt;
&lt;p&gt;In general, mixins are best used for self-contained units of functionality. If you &lt;em&gt;need&lt;/em&gt; dependency injection for them, it may mean that you should think about structuring things in a different way. Can all the functionality live on the service itself? Can all of it live in the mixin instead of requiring a service? Can the service calls be delegated to whatever type is using the mixin?&lt;/p&gt;
&lt;p&gt;But if not, and you &lt;em&gt;do&lt;/em&gt; need a mixin which injects a service, now you know how to do it!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; The documentation around testing mixins is relatively weak, and in general the testing docs are the weak bits in the Ember guides right now.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; After a conversation with &lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt; on the &lt;a href="https://ember-community-slackin.herokuapp.com"&gt;Ember Community Slack&lt;/a&gt;, though, I was able to get a handle on the issue, and here we are. Since it stumped me, I’m guessing I’m not the only one.&lt;/p&gt;
&lt;p&gt;When this happens, &lt;em&gt;write it up&lt;/em&gt;. I’ve been guilty of this too often in the past few months: learning something new that I couldn’t find anywhere online, and then leaving it stored in my own head. It doesn’t take a particularly long time to write a blog post like this, and if you’re stuck, chances are &lt;em&gt;very&lt;/em&gt; good someone else is too.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re not familiar with the “container”, this is where all the various dependencies are registered, and where Ember looks them up to inject them when you use methods like &lt;code&gt;Ember.inject.service()&lt;/code&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Something I intend to help address in the next week or two via a pull request, so if you’re my Ember.js documentation team friend and you’re reading this… it’s coming. 😉&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="software development"></category></entry><entry><title>Rust and Swift (xvi)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xvi.html" rel="alternate"></link><published>2016-06-07T23:30:00-04:00</published><updated>2016-06-09T12:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-07:/2016/rust-and-swift-xvi.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Thanks to ubsan, aatch, and niconii on the &lt;a href="https://client00.chat.mibbit.com/?server=irc.mozilla.org&amp;amp;channel=%23rust"&gt;#rust-lang IRC&lt;/a&gt; for a fascinating discussion of the current status of Rust’s initialization analysis, as well as some very interesting comments on what might be possible to do in the future. Everything actually interesting about Rust in this post comes from the conversation I had with them on the evening of March 13.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The rules various languages have around construction and destruction of objects are &lt;em&gt;extremely&lt;/em&gt; important for programmer safety and ergonomics. I think it’s fair to say that both Swift and rust are actively trying to avoid some of the mistakes made in e.g. C++ which poorly affect both its safety and its ease of use for developers, albeit it in some superficially different ways. Both languages also support defining how types are destroyed, which we’ll come back to in a future discussion.&lt;/p&gt;
&lt;p&gt;The basic aim both Rust and Swift have in this area seems to be the same: avoid &lt;em&gt;partially&lt;/em&gt; initialized objects. (You don’t want partially initialized objects. Ask Objective C developers.)&lt;/p&gt;
&lt;p&gt;Swift does this via its rules around &lt;em&gt;initializers&lt;/em&gt;. Rust does it by requiring that all the values of a type be initialized at its creation. So, for example, the following &lt;em&gt;looks&lt;/em&gt; like it should work, but it doesn’t. You can initialize the variable piecemeal, but you cannot &lt;em&gt;use&lt;/em&gt; it:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;#[derive(Debug)]  // to make it printable.
struct Foo {
    pub a: i32,
    pub b: f64,
}

fn main() {
    // This will compmile, but `foo` will be useless.
    let mut foo: Foo;
    foo.a = 14;
    foo.b = 42.0;

    // This would actually fail to compile. Surprising? A bit!
    // println!(&amp;quot;{:?}&amp;quot;, foo);

    // This will work, though, because it fully constructs the type.
    let foo2 = Foo { a: 14, b: 42.0 };
    println!(&amp;quot;{:?}&amp;quot;, foo);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(The reasons why this is so are fairly complicated. See the addendum at the end for a brief discussion.)&lt;/p&gt;
&lt;p&gt;In any case, this means that especially with more complex data types, providing standard constructor-style methods like &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; is conventional and helpful. (If the type has non-public members, it’s also strictly necessary.)&lt;/p&gt;
&lt;p&gt;Swift has a number of options for initializers, which correspond to things you in most cases can do in Rust, but in a very different way.&lt;/p&gt;
&lt;p&gt;First, Swift allows you to overload the &lt;code&gt;init&lt;/code&gt; method on a type, so that you can have different constructors for different starting conditions. (This is, to my recollection, the first time any kind of overloading has come up so far in the Swift book—but that could just be my memory failing me. Certainly I haven’t referenced it in any previous discussion, though.)&lt;/p&gt;
&lt;p&gt;The example offered by the Swift book is illuminating for the different approaches the languages take, so we’ll run with it. Here’s a class defining a Celsius type in Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Celsius {
    let temp: Double

    init(fromFahrenheit f: Double) {
       temp = 1.8 * (f - 32.0)
    }

    init(fromKelvin k: Double) {
        temp = k - 273.15
    }
}

// Create an instance each way
let freezing = Celsius(temp: 0)
let balmy = Celsius(fromFahrenheit: 75.0)
let absoluteZero = Celsius(fromKelvin: 0.0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the internal and external parameter names. This is a common idiom Swift keeps (albeit with some non-trivial modification, and with &lt;a href="%7B%3E%3E%20TODO:%20Swift%203%20naming%20changes%20%3C%3C%7D"&gt;more to come&lt;/a&gt;). More on this below; first, the same basic functionality in Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Celsius {
    temp: f64
}

impl Celsius {
    fn from_fahrenheit(f: f64) -&amp;gt; Celsius {
        Celsius { temp: 1.8 * (f - 32.0) }
    }

    fn from_kelvin(k: f64) -&amp;gt; Celsius {
        Celsius { temp: k - 273.15 }
    }
}

// Create an instance each way
let freezing = Celsius { temp: 0 };
let balmy = Celsius::from_fahrenheit(75.0);
let absoluteZero = Celsius::from_kelvin(0.0);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note that there might be other considerations in implementing such types, like using a &lt;code&gt;Temperature&lt;/code&gt; base &lt;code&gt;trait&lt;/code&gt; or &lt;code&gt;protocol&lt;/code&gt;, or employing type aliases, but those are for later entries!)&lt;/p&gt;
&lt;p&gt;You can see a point I made about Swift’s initializer syntax back in &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-x.html"&gt;part x&lt;/a&gt;: the way Rust reuses normal struct methods while Swift has the special initializers. Neither is clearly the “winner” here. Rust gets to use existing language machinery, simplifying our mental model a bit by not adding more syntax. On the other hand, the addition of initializer syntax lets Swift use a fairly familiar type construction syntax even for special initializer cases, and a leaves us with a bit less noise in the constructor method. Note, though, that initializers in Swift &lt;em&gt;are&lt;/em&gt; special syntax; they’re not just a special kind of method (as the absence of the &lt;code&gt;func&lt;/code&gt; keyword emphasizes)—unlike Rust, where initializers really are just normal struct or instance methods.&lt;/p&gt;
&lt;p&gt;The Swift book notes this distinction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In its simplest form, an initializer is like an instance method with no parameters, written using the &lt;code&gt;init&lt;/code&gt; keyword.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The new keyword is the thing I could do without. Perhaps it’s just years of writing Python, but I really prefer it when constructors for types are just sugar and you can therefore reimplement them yourself, provide custom variations, etc. as it suits you. Introducing syntax instead of just picking a standard function to call at object instantiation means you lose that. At the same time, and in Swift’s defense, I’ve only rarely wanted or needed to use those facilities in work in Python. It’s a pragmatic decision—and it makes sense as such; it’s just not where my preference lies. The cost is a bit higher than I’d prefer relative to the gain in convenience.&lt;/p&gt;
&lt;p&gt;Back to the initializers and the issue of overloading: the external parameter names (the &lt;em&gt;first&lt;/em&gt; parameter) is one of the main ways Swift tells apart the initializers. This is necessitated, of course, by the choice of a keyword for the initializer; Rust doesn’t have any &lt;em&gt;need&lt;/em&gt; for this, and since Rust doesn’t have overloading, it also &lt;em&gt;can’t&lt;/em&gt; do this. In Rust, different constructors/initializers will have different names, because they will simply be different methods.&lt;/p&gt;
&lt;p&gt;[&lt;i class='editorial'&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I’m leaving this here for posterity, but it’s incomplete. See below.&lt;/i&gt;] One other important thing falls out of this: the external parameter names are &lt;em&gt;required&lt;/em&gt; when initializing a type in Swift. Because those parameter names are used to tell apart the constructor, this is not just necessary for the compiler. It’s also an essential element of making the item readable for humans. Imagine if this were &lt;em&gt;not&lt;/em&gt; the case—look again at the &lt;code&gt;Celsius&lt;/code&gt; example:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Celsius {
    let temp: Double

    init(fromFahrenheit f: Double) {
       temp = 1.8 * (f - 32.0)
    }

    init(fromKelvin k: Double) {
        temp = k - 273.15
    }
}

// Create an instance each way
let freezing = Celsius(0)
let balmy = Celsius(75.0)  // our old fromFahrenheit example
let absoluteZero = Celsius(0.0)  // our old &amp;quot;fromKelvin example&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We as humans would have no idea what the constructors are supposed to do, and really at this point there would &lt;em&gt;necessarily&lt;/em&gt; just be one constructor unless the later options took elements of another &lt;em&gt;type&lt;/em&gt;. That would be fairly similar to how overloading works in C++, Java, or C&lt;sup&gt;♯&lt;/sup&gt;, and while method overloading in those langauges is very &lt;em&gt;powerful&lt;/em&gt;, it can also make it incredibly difficult to figure out exactly what method is being called. That includes when the constructor is being called. Take a look at the &lt;em&gt;long&lt;/em&gt; list of &lt;a href="https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110)"&gt;C&lt;sup&gt;♯&lt;/sup&gt; &lt;code&gt;DateTime&lt;/code&gt; constructors&lt;/a&gt;, for example: you have to either have this memorized, have the documentation open, or be able simply to infer from context what is going on.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Given&lt;/em&gt; the choice of a keyword to mark initializers, then, Swift’s rule about external parameter name usage wherever there is more than one initializer is quite sensible.&lt;/p&gt;
&lt;p&gt;[&lt;i class='editorial'&gt;&lt;strong&gt;Edit:&lt;/strong&gt; several readers, most notably including &lt;a href="https://twitter.com/jckarter/status/740763363626586112"&gt;Joe Groff&lt;/a&gt;, who works on Swift for Apple, pointed out that Swift &lt;em&gt;does&lt;/em&gt; support overloading, including in &lt;code&gt;init()&lt;/code&gt; calls, and uses types to distinguish them. Moreover, you can leave off the label for the parameter. My initial summary was simply incorrect. I think this is a function of my not having finished the chapter yet.&lt;/i&gt;]&lt;/p&gt;
&lt;p&gt;Second, both languages support supplying default values for a constructed type. Swift does this via default values defined at the site of the property definition itself, or simply set directly from within an initializer:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Kelvin {
    var temp: Double = 0.0  // zero kinetic energy!!!
    init () {
        temp = 305.0  // Change of plans: maybe just freezing is better
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you can not supply default values directly on a property, but you can define any number of custom constructors:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Kelvin {
    temp: f64,
}

impl Kelvin {
    fn abs_zero() -&amp;gt; Kelvin {
        Kelvin { temp: 0.0 }
    }

    fn freezing() -&amp;gt; Kelvin {
        Kelvin { temp: 305.0 }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could of course shorten each of those two one line, so:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn abs_zero() -&amp;gt; Kelvin { Kelvin { temp: 0.0 } }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Rust is definitely a little noisier, and that is the downside of this tack. The upside is that these are just functions like any other. This is, in short, &lt;em&gt;exactly&lt;/em&gt; the usual trade off we see in the languages.&lt;/p&gt;
&lt;p&gt;Rust also has the &lt;code&gt;Default&lt;/code&gt; trait and the &lt;code&gt;#[derive(default)]&lt;/code&gt; attribute for getting some basic defaults for a given value. You can either define a &lt;code&gt;Default&lt;/code&gt; implementation yourself, or let Rust automatically do so if the underlying types have &lt;code&gt;Default&lt;/code&gt; implemented:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Kelvin {
    temp: f64,
}

// Do it ourselves
impl Default for Kelvin {
    fn default() -&amp;gt; Kelvin {
        Kelvin { temp: 305.0 }
    }
}

// Let Rust do it for us: calling `Celsius::default()` will get us a default
// temp of 0.0, since that&amp;#39;s what `f64::default()` returns.
#[derive(default)]
struct Celsius {
    temp: f64,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn’t get you quite the same thing as Swift’s initializer values. It requires you to be slightly more explicit, but the tradeoff is that you also get a bit more control and flexibility.&lt;/p&gt;
&lt;p&gt;There’s actually a lot more to say about initializers—there are &lt;em&gt;many&lt;/em&gt; more pages in the Swift book about them—but this is already about 1,700 words long, and I’ve been slowly chipping away at it since March (!), so I’m going to split this chapter of the Swift book into multiple posts. More to come shortly!&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Inheritance: a Swiftian specialty (for now).&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/2016/rust-and-swift-xvii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; More on initializers!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;section id="addendum-no-late-initialization-in-rust" class="level2"&gt;
&lt;h2&gt;Addendum: No Late Initialization in Rust&lt;/h2&gt;
&lt;p&gt;Returning to the first Rust example—&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;#[derive(Debug)]  // to make it printable.
struct Foo {
    pub a: i32,
    pub b: f64,
}

fn main() {
    // This will compmile, but `foo` will be useless.
    let mut foo: Foo;
    foo.a = 14;
    foo.b = 42.0;

    // This would actually fail to compile. Surprising? A bit!
    // println!(&amp;quot;{:?}&amp;quot;, foo);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can’t do anything with that data for a few reasons (most of this discussion coming from ubsan, aatch, and niconii on the &lt;a href="https://client00.chat.mibbit.com/?server=irc.mozilla.org&amp;amp;channel=%23rust"&gt;#rust-lang IRC&lt;/a&gt; back in March):&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Rust lets you “move” data out of a struct on a per-field basis. (Rust’s concept of “ownership” and “borrowing” is something we haven’t discussed a lot so far in this series; my &lt;a href="http://www.newrustacean.com/show_notes/e002/index.html" title="New Rustacean e002: Something borrowed, something... moved?"&gt;podcast episode&lt;/a&gt; about it is probably a good starting point.) The main takeaway here is that you could return &lt;code&gt;foo.a&lt;/code&gt; distinctly from returning &lt;code&gt;foo&lt;/code&gt;, and doing so would hand that data over while running the &lt;code&gt;foo&lt;/code&gt; destructor mechanism. Likewise, you could pass &lt;code&gt;foo.b&lt;/code&gt; to the function created by the &lt;code&gt;println!&lt;/code&gt; macro&lt;/li&gt;
&lt;li&gt;Rust allows you to re-initialize moved variables. I haven’t dug enough to have an idea of what that would look like in practice.&lt;/li&gt;
&lt;li&gt;Rust treats uninitialized variables the same as moved-from variables. This seems to be closely related to reason #2. The same “I’m not sure how to elaborate” qualification applies here.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll see if I can add some further comments on (2) and (3) as I hit the later points in the Swift initialization chapter.&lt;/p&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Rust and C++ function definitions</title><link href="http://www.chriskrycho.com/2016/03-1801.html" rel="alternate"></link><published>2016-06-03T18:01:00-04:00</published><updated>2016-06-07T23:16:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-03:/2016/03-1801.html</id><summary type="html">&lt;p&gt;I just put my finger on one of the (many) reasons Rust reads better than C++: the visual consistency of its function definitions. Compare—&lt;/p&gt;
&lt;p&gt;Rust has:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn foo() -&amp;gt; i32 { /* implementation */ }
fn bar() -&amp;gt; f32 { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C++ has:&lt;/p&gt;
&lt;pre class="cpp"&gt;&lt;code&gt;int foo() { /* implementation */ }
double bar() { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That consistency adds up over many lines of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just put my finger on one of the (many) reasons Rust reads better than C++: the visual consistency of its function definitions. Compare—&lt;/p&gt;
&lt;p&gt;Rust has:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn foo() -&amp;gt; i32 { /* implementation */ }
fn bar() -&amp;gt; f32 { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C++ has:&lt;/p&gt;
&lt;pre class="cpp"&gt;&lt;code&gt;int foo() { /* implementation */ }
double bar() { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That consistency adds up over many lines of code. There are many other such choices; the net effect is that Rust is &lt;em&gt;much&lt;/em&gt; more pleasant to read than C++.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Note: I’m aware that C++11 added the &lt;code&gt;auto foo() -&amp;gt; &amp;lt;type&amp;gt;&lt;/code&gt; syntax. But this actually &lt;em&gt;worsens&lt;/em&gt; the problem. A totally new codebase which uses that form exclusively (which may not always be possible, because the semantics aren’t the same) would have roughly the same visual consistency as Rust &lt;em&gt;in that particular category&lt;/em&gt;. (Plenty of others would still be a mess.) But the vast majority of C++ codebases are &lt;em&gt;not&lt;/em&gt; totally new. Adding the form means your codebase is more likely to look this this:&lt;/p&gt;
&lt;pre class="cpp"&gt;&lt;code&gt;int foo() { /* implementation */ }
auto quux() -&amp;gt; uint32_t { /* implementation */ }
double bar() { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is, for the record, &lt;em&gt;more&lt;/em&gt; visual inconsistency—not less!&lt;/p&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="cplusplus"></category></entry><entry><title>Free Dynamic DNS for Remote Login via SSH</title><link href="http://www.chriskrycho.com/2016/free-dynamic-dns-for-remote-login-via-ssh.html" rel="alternate"></link><published>2016-05-31T20:10:00-04:00</published><updated>2016-05-31T20:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-31:/2016/free-dynamic-dns-for-remote-login-via-ssh.html</id><summary type="html">&lt;p&gt;I recently set up a hostname and mapped it to a dynamic IP address for my home machine so that I can log into it via SSH&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; from &lt;em&gt;anywhere&lt;/em&gt; without needing to know what the IP address is. This is handy because I need to do just that on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently set up a hostname and mapped it to a dynamic IP address for my home machine so that I can log into it via SSH&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; from &lt;em&gt;anywhere&lt;/em&gt; without needing to know what the IP address is. This is handy because I need to do just that on a semi-regularly basis: I’ll be out with my work laptop at a coffee shop, and need something that’s on my personal machine at home, for example.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A friend &lt;a href="https://twitter.com/toddheitmann/status/728222459413958656"&gt;asked&lt;/a&gt; me to describe it, so here I am. (Hi, Todd!) This was pretty straightforward for me, and it should be for you, too.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Pick one of the &lt;a href="https://duckduckgo.com/?q=free+dynamic+dns+providers&amp;amp;t=osx&amp;amp;ia=web"&gt;many&lt;/a&gt; free dynamic DNS providers. I picked &lt;a href="http://www.noip.com/free"&gt;No-IP&lt;/a&gt; after a very short bit of digging. In the future I may switch to a more full-featured solution, not least because I’m planning to separate out my DNS management from my hosting and my domain registrar later this year.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; For now, though, No-IP is good enough.
&lt;ul&gt;
&lt;li&gt;Register.&lt;/li&gt;
&lt;li&gt;Pick a domain name.&lt;/li&gt;
&lt;li&gt;Add your current IP address. (If you need to find out what it is, you can literally just ask the internet: &lt;a href="http://www.whatsmyip.org"&gt;whatsmyip.org&lt;/a&gt; will tell you.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Set up a local service to talk to the dynamic DNS provider, so that when your external IP address changes (and from time to time it will, if you’re not paying your ISP for a dedicated IP address). You can do this one of two ways:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;By installing a service on your main machine.&lt;/strong&gt; No-IP and other large providers all have downloads where you can just install an app on your machine that goes out and talks to the service and keeps the IP address up to date.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;By configuring your router.&lt;/strong&gt; This is the route I took, because the router I have&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; fully supports dynamic DNS services right out of the box.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; Look for something like &lt;em&gt;Dynamic DNS&lt;/em&gt; and follow the configuration instructions there to get it talking to your dynamic DNS service provider. Mine has a built-in list which included No-IP; I just added my username and password and the domain name I specified back in Step 1, checked an &lt;em&gt;Enable DDNS&lt;/em&gt; box, and connected.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it. Even if you’re not a huge networking geek (which, for all my nerdiness, I really am not), you can set it up. From that point forward, if you have &lt;em&gt;other&lt;/em&gt; things configured locally on your machine for network access (e.g. enabling SSH by toggling &lt;em&gt;Remote Login&lt;/em&gt; to &lt;em&gt;On&lt;/em&gt; in the &lt;strong&gt;Sharing&lt;/strong&gt; preferences pane on OS X), you can just use the new domain you configured instead of the IP address. If that domain was e.g. &amp;lt;chriskrycho.example.com&amp;gt;, you could just &lt;code&gt;ssh chris@chriskrycho.example.com&lt;/code&gt; and be off to the races.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;or &lt;a href="https://mosh.mit.edu"&gt;mosh&lt;/a&gt;, which I’m hoping to check out this week&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Or, when I was traveling and my Windows VM crashed while I was in the airport, and I was able to work from the VM on my home machine instead via SSH magic I’ll cover in a future blog post.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Having each of those in a separate place is nice: it means that if the others change, you only have to deal with &lt;em&gt;that&lt;/em&gt; set of concerns. For example, if you move hosting providers, you don’t &lt;em&gt;also&lt;/em&gt; have to migrate all your DNS settings—just tweak the couple that are relevant to the move.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;&lt;a href="https://www.noip.com/download"&gt;Here’s the download page&lt;/a&gt; for No-IP, for example.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;&lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16833704177&amp;amp;nm_mc=AFC-C8Junction&amp;amp;cm_mmc=AFC-C8Junction-Skimlinks-_-na-_-na-_-na&amp;amp;cm_sp=&amp;amp;AID=10446076&amp;amp;PID=5431261&amp;amp;SID=skim45704X1167592X2be13284148d669370b61074c119afc2"&gt;this one&lt;/a&gt;, as &lt;a href="http://thewirecutter.com/reviews/best-wi-fi-router/"&gt;recommended&lt;/a&gt; by The Wirecutter&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;So will most open-source router firmwares, especially OpenWRT or DD-WRT, if they run on your router. I’ve done that in the past.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;This tiny post has a &lt;em&gt;hilarious&lt;/em&gt; number of footnotes. I noticed this early on, and instead of reworking it… I just ran with it.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>SpaceX: "First-stage landing | Onboard camera"</title><link href="http://www.chriskrycho.com/2016/spacex-first-stage-landing-onboard-camera.html" rel="alternate"></link><published>2016-05-28T20:58:00-04:00</published><updated>2016-05-28T20:58:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-28:/2016/spacex-first-stage-landing-onboard-camera.html</id><summary type="html">&lt;p&gt;OH WOW: &lt;a href="http://www.spacex.com"&gt;SpaceX&lt;/a&gt; first-stage landing footage… &lt;a href="https://youtu.be/4jEz03Z8azc"&gt;from the onboard camera&lt;/a&gt;. This is blow-your-mind incredible.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;OH WOW: &lt;a href="http://www.spacex.com"&gt;SpaceX&lt;/a&gt; first-stage landing footage… &lt;a href="https://youtu.be/4jEz03Z8azc"&gt;from the onboard camera&lt;/a&gt;. This is blow-your-mind incredible.&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Ben Thompson: "Peter Thiel, Comic Book Hero"</title><link href="http://www.chriskrycho.com/2016/ben-thompson-peter-thiel-comic-book-hero.html" rel="alternate"></link><published>2016-05-28T20:50:00-04:00</published><updated>2016-05-28T20:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-28:/2016/ben-thompson-peter-thiel-comic-book-hero.html</id><summary type="html">&lt;p&gt;I always appreciate Ben Thompson’s takes, but &lt;a href="https://stratechery.com/2016/peter-thiel-comic-book-hero/"&gt;this&lt;/a&gt;—on the Thiel/Gawker imbroglio—is one of his best posts ever.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I always appreciate Ben Thompson’s takes, but &lt;a href="https://stratechery.com/2016/peter-thiel-comic-book-hero/"&gt;this&lt;/a&gt;—on the Thiel/Gawker imbroglio—is one of his best posts ever.&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Ember.js: "Introducing Subteams"</title><link href="http://www.chriskrycho.com/2016/emberjs-introducing-subteams.html" rel="alternate"></link><published>2016-05-24T19:10:00-04:00</published><updated>2016-05-24T19:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-24:/2016/emberjs-introducing-subteams.html</id><summary type="html">&lt;p&gt;In which one tech I really like (&lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt;) steals a great idea from another tech I really like (&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;).&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In which one tech I really like (&lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt;) steals a great idea from another tech I really like (&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;).&lt;/p&gt;
</content><category term="links"></category><category term="programming languages"></category><category term="emberjs"></category><category term="rust"></category></entry><entry><title>2016-05-12 13:01</title><link href="http://www.chriskrycho.com/2016/2016-05-12-1301.html" rel="alternate"></link><published>2016-05-12T13:01:00-04:00</published><updated>2016-05-12T13:01:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/2016-05-12-1301.html</id><summary type="html">&lt;p&gt;This bit from the &lt;a href="http://fishshell.com"&gt;fish&lt;/a&gt; &lt;a href="http://fishshell.com/docs/current/design.html#ortho"&gt;design document&lt;/a&gt; perfectly captures what git does wrong (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When designing a program, one should first think about how to make a intuitive and powerful program. Implementation issues should only be considered once a user interface has been designed.&lt;/p&gt;
&lt;p&gt;Rationale:&lt;/p&gt;
&lt;p&gt;This design rule is …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This bit from the &lt;a href="http://fishshell.com"&gt;fish&lt;/a&gt; &lt;a href="http://fishshell.com/docs/current/design.html#ortho"&gt;design document&lt;/a&gt; perfectly captures what git does wrong (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When designing a program, one should first think about how to make a intuitive and powerful program. Implementation issues should only be considered once a user interface has been designed.&lt;/p&gt;
&lt;p&gt;Rationale:&lt;/p&gt;
&lt;p&gt;This design rule is different than the others, since it describes how one should go about designing new features, not what the features should be. &lt;strong&gt;The problem with focusing on what can be done, and what is easy to do, is that too much of the implementation is exposed. This means that the user must know a great deal about the underlying system to be able to guess how the shell works, it also means that the language will often be rather low-level.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>Ulysses, Byword, and “Just Right”</title><link href="http://www.chriskrycho.com/2016/ulysses-byword-and-just-right.html" rel="alternate"></link><published>2016-03-26T08:00:00-04:00</published><updated>2016-03-26T08:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-26:/2016/ulysses-byword-and-just-right.html</id><summary type="html">&lt;p&gt;I’m trying out Ulysses again, as it’s been updated substantially since I last used it. I think the main thing to say about it is that it’s gorgeous and a really great editor, and that there is nonetheless something about it which makes it feel not quite …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m trying out Ulysses again, as it’s been updated substantially since I last used it. I think the main thing to say about it is that it’s gorgeous and a really great editor, and that there is nonetheless something about it which makes it feel not quite as &lt;em&gt;fluid&lt;/em&gt; as Byword always has.&lt;/p&gt;
&lt;p&gt;Neither of them quite &lt;em&gt;nails&lt;/em&gt; it for my purposes, though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neither is quite there for text that includes a lot of code samples. (Basically: neither supports the GitHub variations on Markdown, which are incredibly important for &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;a lot of my writing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Neither has the ability to do things like autocompletion of citations from something like BibLatex. (No standalone app does, to my knowledge.)&lt;/li&gt;
&lt;li&gt;Ulysses’ most powerful features only work in its iCloud bucket. And they’re not standard: rather than embracing &lt;a href="http://criticmarkup.com"&gt;CriticMarkup&lt;/a&gt; for comments, they have their own. The same is true of e.g. their code blocks.&lt;/li&gt;
&lt;li&gt;Ulysses &lt;em&gt;converts&lt;/em&gt; any other Markdown documents to its own custom variant when you open them. Had those documents formatted a way you liked (e.g. with specific kinds of link or footnote formatting)? Don’t expect them to still be that way.&lt;/li&gt;
&lt;li&gt;Byword really does one thing well: opening and writing single documents. It does this extremely well, but it also has none of the library management that is useful for larger projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these apps are really wonderful in many ways, and I think it’s fair to say that they’re &lt;em&gt;perfect&lt;/em&gt; for many writers. &lt;a href="http://jaimiekrycho.com/"&gt;My wife&lt;/a&gt;, for example, does nearly all her fiction writing in Ulysses; it works wonderfully for her. But for the kinds of writing I do—usually technical in one way or another—it is limited in its utility. That’s not really a critique of the apps. It’s more the recognition that I have some pretty unusual requirements of my writing apps.&lt;/p&gt;
&lt;p&gt;That said, I don’t think I’m the only person out there who has these particular needs. I am, for example, hardly the only person working with citations and academic text, or writing Markup with lots of code samples in it. And as much as you can bend general-purpose text editors like &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt; to your will,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; it’s not the same as a dedicated writing app that focuses—in the ways that Ulysses and Byword both do—on just being a great tool for &lt;em&gt;writing&lt;/em&gt;. Writing and writing &lt;em&gt;code&lt;/em&gt; are not the same, after all. A tool that’s really well-optimized for the latter isn’t necessarily well-optimized for the former.&lt;/p&gt;
&lt;p&gt;Keep your ears open. You might just be hearing more about this in the future.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Trust me, I have: I have Zen mode installed, a custom Byword-like theme I use when I just want to write, and even a citation autocompletion package integrated with it. It’s not bad. But I still don’t love it as a first-choice &lt;em&gt;writing&lt;/em&gt; tool.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="design"></category><category term="software development"></category><category term="writing"></category></entry><entry><title>Rust and Swift (xv)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html" rel="alternate"></link><published>2016-03-12T14:45:00-05:00</published><updated>2016-03-12T14:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-12:/2016/rust-and-swift-xv.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The next chapter in the Swift book focuses on &lt;em&gt;inheritance&lt;/em&gt;, a concept which does not yet exist in Rust.&lt;/p&gt;
&lt;p&gt;Swift embraces classical inheritance for &lt;code&gt;class&lt;/code&gt; data types. As noted &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;previously&lt;/a&gt;, Rust’s &lt;code&gt;struct&lt;/code&gt; covers much of the ground covered by Swift’s &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; types together (value and reference types, etc.). However, what Swift’s &lt;code&gt;class&lt;/code&gt; types bring to the table is inheritance-based (and not just composition-based) extension of types.&lt;/p&gt;
&lt;p&gt;This is a bit of an interesting point: it is an area where, &lt;em&gt;as of today&lt;/em&gt;, Swift can do something that is flat impossible in Rust—a rarity.&lt;/p&gt;
&lt;p&gt;However, the &lt;em&gt;status quo&lt;/em&gt; will be changing sometime in the next year or so, as there is a &lt;a href="https://github.com/rust-lang/rfcs/pull/1210"&gt;Rust RFC&lt;/a&gt; which has been accepted and is in the process of being implemented which paves the way for inheritance. (Discussions are &lt;a href="https://aturon.github.io/blog/2015/09/18/reuse/"&gt;ongoing&lt;/a&gt; as to the best way to implement it for Rust. Classical inheritance with vtables as in Swift is probably &lt;em&gt;not&lt;/em&gt; going to be the approach.)&lt;/p&gt;
&lt;p&gt;The reason Rust’s core team chose to proceed without inheritance for the 1.0 release of the language last May is simple: at a philosophical level, they prefer (as in general most developers increasingly acknowledge that we should all prefer) composition over inheritance. &lt;em&gt;Prefer&lt;/em&gt;, not &lt;em&gt;universally choose&lt;/em&gt;, because there are situations in which inheritance is the correct choice. But there is a reason that programming with interfaces rather than via sub-classing is a “best practice” for many scenarios in languages like Java or C#.&lt;/p&gt;
&lt;p&gt;Rust’s &lt;code&gt;trait&lt;/code&gt; system gives you &lt;em&gt;composition&lt;/em&gt; in some remarkably powerful ways, allowing you to do things that in C++, for example, have to be accomplished via a combination of inheritance and overloading. Swift, likewise, supplies a &lt;code&gt;protocol&lt;/code&gt; system and allows extensions to define further behavior on top of existing data structures. From what I’ve gathered, those approaches are preferred over inheritance in Swift for the same reason Rust shipped 1.0 without it!&lt;/p&gt;
&lt;p&gt;But Swift does have inheritance, so it’s worth seeing how it works.&lt;/p&gt;
&lt;p&gt;First, any &lt;code&gt;class&lt;/code&gt; which doesn’t declare a parent from which to inherit is a base class. This is an important difference from, say, Python, where all classes inherit from &lt;code&gt;Object&lt;/code&gt; (leaving aside custom metaclasses).&lt;/p&gt;
&lt;p&gt;The syntax choices Swift has made around sub-class declarations are sensible and readable: &lt;code&gt;class SubClass: ParentClass&lt;/code&gt; is eminently readable and doesn’t have any obvious points of overlap with other elements in the language.&lt;/p&gt;
&lt;p&gt;Indeed, &lt;em&gt;many&lt;/em&gt; of the choices made around classes are quite sensible. Overrides, for example, are made explicit via the &lt;code&gt;override&lt;/code&gt; keyword. While I’ve sometimes poked fun at Swift’s tendency to add keywords everywhere, this seems like a reasonable place to have one, and it’s nice that overrides are explicit rather than implicit. The same is true of the use of &lt;code&gt;super&lt;/code&gt; to refer to the superclass. I’m not sure of the implementation details, but &lt;code&gt;super&lt;/code&gt; &lt;em&gt;appears&lt;/em&gt; to act as just a special/reserved name for an object: all the syntax around it is normal object instance syntax, which is as it should be.&lt;/p&gt;
&lt;p&gt;The limitations around overriding properties all make sense. You can override a read- or write-only parent property as both readable and writable, but you can’t override a readable or writable property &lt;em&gt;not&lt;/em&gt; to be readable or writable respectively. Presumably this is because the method lookup for properties always checks up the inheritance chain for getters or setters, so if one is present, you can’t just get rid of it. (You could of course override with a no-op function that spews a warning or some such, but that would pretty clearly be an abuse of the parent API. There might be times you would do that with a third-party library parent class, but in your own code it should be avoided: it indicates a problem in your API design that you need to address instead.)&lt;/p&gt;
&lt;p&gt;Finally, we have Swift’s &lt;code&gt;final&lt;/code&gt; keyword—and yes, pun intended. It marks whatever block-level item it is attached to—whether class, method, or property—as non-overridable. Attempts to override an item marked final are compile-time failures. (The same kind of thing exists in Java and C#.) In and of itself, this isn’t especially interesting. It is interesting to ponder whether you should make classes subclass-able or not in your API design. There has been &lt;a href="http://mjtsai.com/blog/2015/12/21/swift-proposal-for-default-final/"&gt;an active debate&lt;/a&gt;, in fact, whether classes in Swift should become final &lt;em&gt;by default&lt;/em&gt; in Swift 3.0, rather than open by default. The debate centers on the danger of unintended consequences of overriding, which ultimately takes us back around to the preference for composition, of course.&lt;/p&gt;
&lt;p&gt;All of this, among other things, raises the very interesting question of what this will look like in Rust when, eventually, we get inheritance there. After all, we know it will be quite different in some ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It presumably won’t involve a distinct data type constructor, &lt;em&gt;a la&lt;/em&gt; Swift’s distinction between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;: there may be syntactic sugar involved, and there will definitely be new functionality present, but it will certainly be built on the existing language features as well. There’s a good chance it will basically &lt;em&gt;look&lt;/em&gt; like just a special case of &lt;code&gt;impl SomeTrait for SomeStruct&lt;/code&gt;, which would fit very well with the ways Rust solves so many other problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust doesn’t have many of the things which Swift takes care to special-case for overriding with &lt;code&gt;final&lt;/code&gt;, but it will need to address that case for inherited methods and data in some way. (The proposal linked above uses a distinction between &lt;code&gt;default&lt;/code&gt; and blanket implementations for trait specialization to pull this off; if those words don’t mean anything to you, don’t worry: I’ve read that post and RFC half a dozen times before I got a really solid handle on all the pieces involved.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will be a relative latecomer to the language, rather than baked in from the start, and therefore will likely seem a secondary way of solving problems, especially at first. (This is, I think, both intentional and good.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiv.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Indexing and subscripts, or: traits vs. keywords again.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvi.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Initialization: another area where Swift has a lot more going on than Rust.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Rust and Swift (xiv)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xiv.html" rel="alternate"></link><published>2016-03-10T21:25:00-05:00</published><updated>2016-03-10T21:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-10:/2016/rust-and-swift-xiv.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Rust and Swift both support defining subscript access to a given data type, like &lt;code&gt;SomeType[accessedByIndex]&lt;/code&gt;. Unsurprisingly, given &lt;a href="/rust-and-swift.html"&gt;everything we’ve seen so far&lt;/a&gt;, Rust does this with traits, and Swift with a keyword.&lt;/p&gt;
&lt;p&gt;In Rust, you can define subscript-style access to a type by implementing the &lt;code&gt;Index&lt;/code&gt; and/or &lt;code&gt;IndexMut&lt;/code&gt; traits, which allow &lt;em&gt;indexing&lt;/em&gt; into a given location in a kind of type. The implementation simply requires one function, which is called when you use the &lt;code&gt;[]&lt;/code&gt; operator. That function, &lt;code&gt;index&lt;/code&gt; or &lt;code&gt;index_mut&lt;/code&gt;, implements how to do the lookup for the specific type. The &lt;code&gt;impl&lt;/code&gt; block indicates not only that &lt;code&gt;Index&lt;/code&gt; or &lt;code&gt;IndexMut&lt;/code&gt; is being implemented, but also the type of the &lt;em&gt;key&lt;/em&gt; used: &lt;code&gt;impl Index&amp;lt;Bar&amp;gt; for Foo { ... }&lt;/code&gt;, where access would look like &lt;code&gt;a_foo[some_bar]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The two kinds of traits and corresponding methods define the behavior for immutable and mutable data type, as their name suggest.&lt;/p&gt;
&lt;p&gt;Since the trait is defined generically, you can implement whatever kinds of accessors you like to the same underlying data structure, including generics accessors with trait bounds.&lt;/p&gt;
&lt;p&gt;It is perhaps telling that in Rust you just find these traits in the general &lt;code&gt;std::ops&lt;/code&gt; module, where all the core language operations and associated operators are defined. Rust doesn’t do “operator overloading” so much as it simply provides operators as one more class of trait potentially applicable to your type. (The family resemblance to Haskell’s type classes and similar in other languages is obvious.)&lt;/p&gt;
&lt;p&gt;In Swift, you define indexing behavior with the &lt;code&gt;subscript&lt;/code&gt; keyword. Subscripts act very similarly to Swift’s &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html"&gt;computed properties&lt;/a&gt;. They can be made read- or write-only by including or excluding &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; function definitions, just like computed properties.&lt;/p&gt;
&lt;p&gt;The behavior is in fact so closely aligned with the computed property syntax and behavior that I initially wondered if it wasn’t just a special case. It is not (though I’m sure much of the parsing machinery can be shared). As the designation of &lt;code&gt;subscript&lt;/code&gt; as a keyword strongly implies, and unlike in Rust, this is a separate language construct, not building on existing language machinery.&lt;/p&gt;
&lt;p&gt;Swift, like Rust, allows you to define arbitrary accessors. However, since the behavior relies on the &lt;code&gt;subscript&lt;/code&gt; construct rather than generics and protocols (Swift’s equivalent to Rust’s traits), you define different kinds of accessors via multiple &lt;code&gt;subscript&lt;/code&gt; blocks. (Presumably these could take generic arguments, but I haven’t tested that to be sure.)&lt;/p&gt;
&lt;p&gt;Both languages proceed to use these as ways of accessing types as makes sense—e.g. for not only arrays or vectors, but also dictionaries in Swift and &lt;code&gt;HashMap&lt;/code&gt; types in Rust.&lt;/p&gt;
&lt;p&gt;Since you can define the behavior yourself, you can also use complex types as keys. The languages approach this a bit differently, though. In Rust, if you wanted a compound key, you would need to define either a simple container &lt;code&gt;struct&lt;/code&gt; or use a tuple as the argument. In Swift, because it uses the same basic syntax as computed properties, you can just define as many method arguments, of whatever type, as you want.&lt;/p&gt;
&lt;p&gt;Takeaway: Rust uses traits; Swift uses a keyword. We probably could have guessed that when we started, at this point!&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Methods, instance and otherwise.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Inheritance: a Swiftian specialty (for now).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>The Future of JavaScript</title><link href="http://www.chriskrycho.com/2016/the-future-of-javascript.html" rel="alternate"></link><published>2016-03-02T12:30:00-05:00</published><updated>2016-03-02T12:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-02:/2016/the-future-of-javascript.html</id><summary type="html">JavaScript (ECMAScript) is in a state of substantial change. And nearly all of those changes make our software development safer and more ergonomic! A short talk covering some of the biggest changes.
</summary><content type="html">&lt;p&gt;I gave a short tech talk at my new employer &lt;a href="http://www.olo.com"&gt;Olo&lt;/a&gt; today, covering a number of the changes current and forthcoming in ECMAScript 2015 and later. Alas, I ran out of time in preparation and didn’t get to cover everything I wanted—I would have liked very much to cover modules, and to cover fat-arrow-functions in more depth than I did. I’ll look forward to hopefully giving further tech talks at Olo in the future, and perhaps giving this one, expanded and finished out a bit, elsewhere. (If you’d like me to give a talk, including this one, just let me know!) In the meantime, you can take a look at the &lt;a href="//www.chriskrycho.com/talks/es-future-olo"&gt;slides&lt;/a&gt;, which I think will be helpful and interesting!&lt;/p&gt;
&lt;p&gt;And yes, there &lt;em&gt;were&lt;/em&gt; a lot of really delightful &lt;em&gt;Doctor Who&lt;/em&gt; references in this talk. Because &lt;em&gt;of course&lt;/em&gt; there were!&lt;/p&gt;
</content><category term="talks"></category><category term="software development"></category><category term="programming languages"></category><category term="javascript"></category></entry><entry><title>Static Site Generators and Podcasting</title><link href="http://www.chriskrycho.com/2016/static-site-generators-and-podcasting.html" rel="alternate"></link><published>2016-02-28T12:50:00-05:00</published><updated>2016-02-28T12:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-28:/2016/static-site-generators-and-podcasting.html</id><summary type="html">&lt;p&gt;Presently, I publish both &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt; and &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; using what is admittedly a bit of a quirky approach. It works well for me, and I think it’s worth documenting for other nerdy types out there, but if you’re just getting going with podcasting and you’re …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Presently, I publish both &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt; and &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; using what is admittedly a bit of a quirky approach. It works well for me, and I think it’s worth documenting for other nerdy types out there, but if you’re just getting going with podcasting and you’re looking for the easy way to do it, let me warn you: &lt;em&gt;this isn’t it&lt;/em&gt;. Something like &lt;a href="https://soundcloud.com/for/podcasting"&gt;SoundCloud&lt;/a&gt; and a blog for show notes, or &lt;a href="https://wordpress.org"&gt;WordPress&lt;/a&gt; with &lt;a href="https://wordpress.org/plugins/powerpress/"&gt;Blubrry PowerPress&lt;/a&gt; is what you want instead. This approach works &lt;em&gt;extremely&lt;/em&gt; well for statically-generated sites, however, and I imagine a few people out there might find it useful.&lt;/p&gt;
&lt;section id="the-short-version" class="level2"&gt;
&lt;h2&gt;The short version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generate the feeds with &lt;a href="http://reinventedsoftware.com/feeder/"&gt;Feeder&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Generate the site statically with something else (and it &lt;em&gt;really&lt;/em&gt; doesn’t matter what).&lt;/li&gt;
&lt;li&gt;Copy the feed into the generated site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-long-version" class="level2"&gt;
&lt;h2&gt;The long version&lt;/h2&gt;
&lt;p&gt;I generate the sites themselves with &lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;Pelican&lt;/a&gt; and &lt;a href="http://www.newrustacean.com/show_notes/e001/index.html"&gt;&lt;code&gt;cargo doc&lt;/code&gt;&lt;/a&gt;, respectively. I was already comfortable with Pelican because it’s what I use to generate &lt;em&gt;this&lt;/em&gt; site (with a few &lt;a href="https://github.com/chriskrycho/chriskrycho.com/blob/master/pelicanconf.py"&gt;tweaks&lt;/a&gt; to the standard configuration, especially using &lt;a href="http://pandoc.org/"&gt;Pandoc&lt;/a&gt; rather than the Python Markdown implementation), so I ran with it for building the Winning Slowly site, and it has worked quite well for building the site itself. It just gets built locally and deployed via &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, it does not have built-in support for generating &lt;a href="https://en.wikipedia.org/wiki/RSS_enclosure"&gt;podcast feeds&lt;/a&gt;, even just the general case with enclosures. &lt;a href="https://itunespartner.apple.com/en/podcasts/overview"&gt;iTunes podcast support&lt;/a&gt; would have taken a lot of work to add.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Instead, I chose to build the RSS feed semi-manually. &lt;em&gt;Semi&lt;/em&gt;-manually, because doing it totally manually is a recipe for making mistakes. XML is many things, but “easy to write correctly by hand” is not one of them. I use &lt;a href="http://reinventedsoftware.com/feeder/"&gt;Feeder&lt;/a&gt; to manage the feeds, and &lt;em&gt;it&lt;/em&gt; makes sure that the enclosure and iTunes elements are set correctly.&lt;/p&gt;
&lt;p&gt;The biggest upside to this is that I can use Pelican without modification to how it generates feeds (apart from optionally turning them off entirely). It just &lt;a href="https://github.com/WinningSlowly/winningslowly.org/blob/master/pelicanconf.py#L99"&gt;copies&lt;/a&gt; the feed I generate to the output file during its normal build process. As suggested above, I also &lt;em&gt;don’t&lt;/em&gt; generate the other feeds which Pelican supports, as we have no need for them; we only care about the podcast feed.&lt;/p&gt;
&lt;p&gt;This process works equally well, with very little modification, for New Rustacean. In that case, I’m generating the content by running Rust’s documentation tool, &lt;code&gt;cargo doc&lt;/code&gt;&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; to render the “API docs” which serve as show notes. Notice the family resemblance between &lt;a href="http://www.newrustacean.com/show_notes/"&gt;my “show notes”&lt;/a&gt; and, say, the &lt;a href="http://sgrif.github.io/diesel/diesel/index.html"&gt;Diesel docs&lt;/a&gt;, which are both generated the same way. This is &lt;em&gt;not&lt;/em&gt; a normal way of building a podcast website; you can hear me explain why I did it this way in &lt;a href="http://www.newrustacean.com/show_notes/e001/index.html"&gt;New Rustacean e001: Document all the things!&lt;/a&gt; In any case, I just take the show note-relevant parts of the documentation and put it in Feeder, generate the feed, and &lt;a href="https://github.com/chriskrycho/newrustacean.com/blob/master/Makefile#L32"&gt;copy that as part of the build process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;And, incidentally, &lt;a href="http://www.sap-py.com"&gt;Sap.py&lt;/a&gt; and my &lt;a href="http://www.chriskrycho.com/sermons.xml"&gt;sermons&lt;/a&gt; feed.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;If I stick with Pelican long-term, I might look into adding it anyway, but honestly, I don’t love Pelican. The reasons have little to do with Pelican for itself, and a lot more to do with my particular and somewhat peculiar needs. That’s a post for another day. In any case, I’m likelier to use another generator—even one I write myself!—than to do the work to make Pelican do what I want.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Technically, Rust’s documentation tool is &lt;code&gt;rustdoc&lt;/code&gt;, which &lt;code&gt;cargo doc&lt;/code&gt; wraps around. I never actually use &lt;code&gt;rustdoc&lt;/code&gt; directly, though.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="podcasting"></category><category term="python"></category><category term="rust"></category></entry><entry><title>Rust and Swift (xiii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xiii.html" rel="alternate"></link><published>2016-02-28T11:15:00-05:00</published><updated>2016-03-06T13:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-28:/2016/rust-and-swift-xiii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Rust and Swift both have methods which are attached to given data types. However, whereas Rust takes its notion of separation of data and functions rather strictly, Swift implements them on the relevant data structures (classes, structs, or enums) directly. In other words, the implementation of a given type’s methods is within the body of the type definition itself in swift, whereas in Rust it is in an &lt;code&gt;impl&lt;/code&gt; block, usually but not always immediately adjacent in the code.&lt;/p&gt;
&lt;p&gt;This goes to one of the philosophical differences between the two languages. As we’ve discussed often in the series, Rust reuses a smaller set of concepts—language-level primitives—to build up its functionality. So methods on a type and methods for a trait on a type are basically the same thing in Rust; they’re defined in almost exactly the same way (the latter includes &lt;code&gt;for SomeTrait&lt;/code&gt; in the &lt;code&gt;impl&lt;/code&gt; expression). In Swift, a method is defined differently from a protocol definition, which we’ll get to in the future. The point is simply this: the two take distinct approaches to the relationship between a given type definition and the implementations of any functions which may be attached to it.&lt;/p&gt;
&lt;p&gt;Another important difference: access to other members of a given data type from within a method is &lt;em&gt;explicit&lt;/em&gt; in Rust and &lt;em&gt;implicit&lt;/em&gt; in Swift. In Rust, the first parameter to an instance method is always &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;&amp;amp;self&lt;/code&gt; (or a mutable version of either of course), much as in Python. This explicitness distinction is by now exactly what we expect from the two languages.&lt;/p&gt;
&lt;p&gt;Both use dot notation, in line with most other languages with a C-like syntax, for method calls, e.g. &lt;code&gt;instance.method()&lt;/code&gt; in Swift and &lt;code&gt;instance.method()&lt;/code&gt; in Rust. The latter is just syntactical sugar for &lt;code&gt;T::method(&amp;amp;instance)&lt;/code&gt; or &lt;code&gt;T::method(instance)&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is the type of the instance (depending on whether the item is being borrowed or moved). Given its implicit knowledge of/access to instance-local data, and the distinctive behavior of Swift methods (see below), I don’t &lt;em&gt;think&lt;/em&gt; the same is, or even could be, true of Swift.&lt;/p&gt;
&lt;p&gt;All of Swift’s &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;other behaviors around functions&lt;/a&gt;—internal and external names, and all the distinctions that go with those—are equally applicable to methods. Similarly, with the sole change that the first parameter is always the instance being acted on, a Rust methods follow all the same rules as ordinary Rust functions (which is why you can call the struct or enum method with an instance parameter as in the example above).&lt;/p&gt;
&lt;p&gt;Swift does &lt;em&gt;have&lt;/em&gt; a &lt;code&gt;self&lt;/code&gt;—it is, of course, implicit. It’s useful at times for disambiguation—basically, when a parameter name shadows an instance name. This will look familiar to people coming from Ruby.&lt;/p&gt;
&lt;p&gt;The strong distinction Swift makes &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;between reference and value types&lt;/a&gt; comes into play on methods, as you might expect, as does its approach to mutability. Methods which change the values in value types (&lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt; instances) have to be declared &lt;code&gt;mutating func&lt;/code&gt;. This kind of explicit-ness is good. As we discussed in &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;Part 10&lt;/a&gt;, Rust approaches this entire problem differently: types are not value or reference types; they are either mutable and passed mutably (including as &lt;code&gt;mut self&lt;/code&gt; or &lt;code&gt;&amp;amp;mut self&lt;/code&gt;), or they are not. If an instance is mutable and passed mutably, a method is free to act on instance data. And in fact both languages require that the instance in question not be immutable. In fact, everything we said in Part 10 about both languages applies here, just with the addendum that private properties are available to methods.&lt;/p&gt;
&lt;p&gt;The distinction, you’ll note, is in where the indication that there’s a mutation happens. Swift has a special keyword combination (&lt;code&gt;mutating func&lt;/code&gt;) for this. With Rust, it’s the same as every other function which mutates an argument. This makes Rust slightly more verbose, but it also means that in cases like this, the existing language tooling is perfectly capable of handling what has to be a special syntactical case in Swift.&lt;/p&gt;
&lt;p&gt;Both Swift and Rust let you out-and-out change the instance by assigning to &lt;code&gt;self&lt;/code&gt;, albeit in fairly different ways. In Swift, you’d write a mutating method which updates the instance proper like this:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Point {
    var x = 0.0, y = 0.0
    mutating func changeSelf(x: Double, y: Double) {
        self = Point(x: x, y: y)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you’d need to explicitly pass a mutable reference and dereference it. (If you tried to pass &lt;code&gt;mut self&lt;/code&gt; instead of &lt;code&gt;&amp;amp;mut self&lt;/code&gt;, it would fail unless you returned the newly created object and assigned it outside.) Note that while the full implementation here is a couple lines longer, because of the data-vs.-method separation discussed earlier, the implementation of the method itself is roughly the same length.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;pub struct Point {
    pub x: f64,
    pub y: f64,
}

impl Point {
    pub fn change_self(&amp;amp;mut self, x: i32, y: i32) {
        *self = Point { x: x, y: y };
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that though you &lt;em&gt;can&lt;/em&gt; do this, I’m not sure it’s particularly Rustic. My own instinct would be to get a &lt;em&gt;new&lt;/em&gt; &lt;code&gt;Point&lt;/code&gt; rather than mutate an existing one, in either language, and let the other be cleaned up “behind the scenes” as it were (with automatic memory management in Swift or the compiler’s automatic destruction of the type in Rust)—purer functions being my preference these days.&lt;/p&gt;
&lt;p&gt;You can do this with &lt;code&gt;enum&lt;/code&gt; types as well, which the Swift book illustrates with a three-state switch which updates the value type passed to a new value when calling its &lt;code&gt;next()&lt;/code&gt; method. You can do the same in Rust, with the same reference/dereference approach as above.&lt;/p&gt;
&lt;p&gt;Here’s a three-state switch in Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;enum ThreeState {
    case First, Second, Third
    mutating func next() {
        switch self {
        case First:
            self = Second
        case Second:
            self = Third
        case Third
            self = First
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the same in Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;enum ThreeState { First, Second, Third }
impl ThreeState {
    pub fn next(&amp;amp;mut self) {
        match *self {
            ThreeState::First =&amp;gt; *self = ThreeState::Second,
            ThreeState::Second =&amp;gt; *self = ThreeState::Third,
            ThreeState::Third =&amp;gt; *self = ThreeState::First,
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both languages also have what Swift calls “type methods”, and which you might think of as “static class methods” coming from a language like Java or C♯. In Swift, you define them by adding the &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; keywords to the &lt;code&gt;func&lt;/code&gt; definition. The &lt;code&gt;class func&lt;/code&gt; keyword combo is only applicable in &lt;code&gt;class&lt;/code&gt; bodies, and indicates that sub-classes may override the method definition.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Bar {
    static func quux() { print(&amp;quot;Seriously, what&amp;#39;s a `quux`?&amp;quot;) }
}

func main() {
    Bar.quux()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you simply drop &lt;code&gt;self&lt;/code&gt; as a first parameter and call it with &lt;code&gt;::&lt;/code&gt; syntax instead of &lt;code&gt;.&lt;/code&gt; syntax:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Bar;
impl Bar {
    pub fn quux() { println!(&amp;quot;Seriously, what&amp;#39;s a `quux`?&amp;quot;); }
}

fn main() {
    Bar::quux();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual, Rust chooses to use existing language machinery; Swift uses new (combinations of) keywords.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Properties: type and instance, stored and computed.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiv.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Indexing and subscripts, or: traits vs. keywords again.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (xii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html" rel="alternate"></link><published>2016-02-27T22:30:00-05:00</published><updated>2016-02-27T22:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-27:/2016/rust-and-swift-xii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class="editorial"&gt;A note on publication: I had this drafted in early January and simply forgot to publish it. Whoops!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As noted in &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;my discussion of the product types in Rust and Swift&lt;/a&gt;, Swift distinguishes between classes and structs, with the former being reference types and the latter being value types. All structs are value types in Rust. (That you can wrap them in a pointer for heap-allocation with one of the smart pointer types, e.g. &lt;code&gt;Box&lt;/code&gt; or &lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt;, doesn’t change this fundamental reality.) This underlying difference gives rise to one the big difference between Swift classes and Rust structs: a constant &lt;code&gt;class&lt;/code&gt; instance in Swift can still have its fields mutated; not so with a Rust &lt;code&gt;struct&lt;/code&gt; instance. But also not so with a &lt;em&gt;Swift&lt;/em&gt; &lt;code&gt;struct&lt;/code&gt; instance, as it turns out! There isn’t a straightforward way to do this with &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; in Rust; you &lt;em&gt;could&lt;/em&gt; do it with something like an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;, though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s &lt;code&gt;lazy&lt;/code&gt; keyword, and associated delayed initialization of properties has, as far as I know, no equivalent whatsoever in Rust. And while I can see the utility in principle, I’m hard-pressed to think of any time in my working experience where the behavior would actually be useful. Rather than having &lt;code&gt;lazy&lt;/code&gt; properties, I would be far more inclined to separate the behavior which should be initialized at a later time into its own data structure, and supplying it via &lt;em&gt;inversion of control&lt;/em&gt; if it is necessary for an actions taken by other data structures. (This seems—at first blush at least—to be a way of supporting the un- or partially-initialized data types possible in Objective C?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift has computed properties, a concept familiar to Python developers (and relatively recently introduced in JavaScript). These can e quite handy, as they let you define a property to be accessed like any other (&lt;code&gt;someInstance.theProperty&lt;/code&gt;) while being defined with functions which compute the value dynamically. A common, trivial example: if you defined a &lt;code&gt;Person&lt;/code&gt; with &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; members, you could define a computed property, &lt;code&gt;fullName&lt;/code&gt;, which was built using the existing values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust doesn’t have computed properties at all. This is because of its design decision to deeply separate &lt;em&gt;data&lt;/em&gt; from &lt;em&gt;behavior&lt;/em&gt;, essentially stealing a page from more pure-functional languages (Haskell etc.). This is (one reason) why you don’t define the implementation of a &lt;code&gt;struct&lt;/code&gt; method in the same block as the members of the struct. See an excellent explanation &lt;a href="https://www.reddit.com/r/rust/comments/2uvfic/why_doesnt_rust_have_properti%20es/cocmunq"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s also closely related the way Rust favors composition over inheritance (by making the latter impossible, at least for now!). By separating &lt;code&gt;impl&lt;/code&gt; from &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt;, Rust makes it not only straightforward but &lt;em&gt;normal&lt;/em&gt; to define new behavior for a given item separately from the data description. This, combined with the use of traits (like Swift’s protocols) as the primary way of sharing behavior between objects, means that you don’t have to worry about conforming to some interface when you define a given type; it can always&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; be defined later, even by entirely other modules or even other crates (packages).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, the result is that it’s not at all Rustic&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; to have something like getters or setters or computed properties. It makes sense to have them in Swift, though, which has a more traditionally object-oriented type system (though with some neat additions in the form of its &lt;code&gt;protocol&lt;/code&gt; type classes, which are analogous to Rust’s &lt;code&gt;trait&lt;/code&gt;s—but we’ll come to those in a future post). This is a wash: it’s just a function of the slightly different approaches taken in object design in the two systems. If you have a Swift-style type system, you should have computed properties. If you have a Rust-like type system, you shouldn’t.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m shocked—utterly shocked!—to find that Swift provides a default &lt;code&gt;newValue&lt;/code&gt; argument for setters for computed properties, and shorthand for defining read-only properties. By which I mean: I find this kind of thing entirely unsurprising at this point in Swift, but I don’t like it any better. Making so much implicit just rubs me the wrong way. Once you know the language, it’s fine of course: you’ll recognize all the patterns. It just seems, in an interesting way, to add cognitive load rather than reducing it. That may just be me, though!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interestingly, Swift also allows you to set watchers on given properties—functions called with the new or the removed value whenever the value of the computed property is updated or touched for any reason. It has two of these built in: &lt;code&gt;willSet&lt;/code&gt; and &lt;code&gt;didSet&lt;/code&gt;. You can override these to get custom behavior when a normal property is about to change. (You can of course just implement the desired behavior yourself in the &lt;code&gt;set&lt;/code&gt; method for a computed property.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since Rust doesn’t have properties, it doesn’t have anything analogous. I can’t think of a particularly straightforward way to implement it, either, though you might be able do some chicanery with a trait. Of course you can always define a setter method which takes a value and optional callbacks for actions to take before and after setting the value; the thing that’s nice in Swift is that it gives you these as built-in capabilities within the language itself. (Now I’m wondering if or how you could implement an &lt;code&gt;Observable&lt;/code&gt; trait, though! Might have to play with that idea more later.) It’s worth remembering , in any case, that Rust doesn’t have these &lt;em&gt;because it doesn’t have properties&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Curiously, Swift provides the same functionality for “global” and “local” variables in a given context. In both cases, this is suggestive of the underlying object model for both modules and functions in Swift.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now I’m curious what the representation of a module is in Swift; is it part of the general object system in some way?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This likewise gets me asking: what &lt;em&gt;is&lt;/em&gt; a module in Rust? It’s a block item, clearly, and accordingly defines a scope (as do functions, if and match expressions, and so on). It’s &lt;em&gt;not&lt;/em&gt; a compilation unit (as it is in C or C++). What other machinery is attached to it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both of these questions can be answered by reading the source code for the languages (&lt;a href="https://github.com/rust-lang/rust"&gt;Rust&lt;/a&gt;, &lt;a href="https://github.com/apple/swift"&gt;Swift&lt;/a&gt;), of course. Putting that on my to-do list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift also has &lt;em&gt;type properties&lt;/em&gt;: values common to all instances of a given type. These are directly analogous to &lt;em&gt;class properties&lt;/em&gt; (or &lt;em&gt;class attributes&lt;/em&gt;) in Python or prototype properties in JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust doesn’t have anything like this to my knowledge. You could accomplish something similar using a module-level variable with a &lt;code&gt;'static&lt;/code&gt; lifetime,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; much as you could in C—but that wouldn’t be an item on the type itself, of course.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;static&lt;/code&gt; declaration of item in Swift suggests what a possible implementation might look like in Rust: defining a member like &lt;code&gt;a_static_long: 'static i64&lt;/code&gt;. There might be some interesting challenges around that, though; I don’t know enough to comment meaningfully. At the least, it seems like it would be an odd fit with the rest of the memory management approach Rust takes, and it would make it a bit harder to reason correctly about the behavior of data in a given type. (There are certainly issues there around mutability guarantees and lifetime checking!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because of the differences in underlying approach to data types and implementation, this is one of the areas where the superficially (and sometimes actually) similar languages diverge &lt;em&gt;a lot&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Hopes for the next generation of systems programming.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Methods, instance and otherwise.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;leaving aside details about &lt;code&gt;trait&lt;/code&gt; specialization &lt;a href="https://github.com/aturon/rfcs/blob/impl-specialization/text/0000-impl-specialization.md"&gt;still being hashed out&lt;/a&gt; in Rust&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;This is now my preferred term for “idiomatic Rust”—directly analogous to “Pythonic,” but with the upside of being an actual word, and one with pleasantly evocative connotations to boot.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;There’s nothing analogous to Rust’s concept of explicit lifetimes in Swift, as far as I can tell. The &lt;code&gt;static&lt;/code&gt; keyword in Swift, like that in C, Objective-C, and C++, is &lt;em&gt;sort of&lt;/em&gt; like Rust’s &lt;code&gt;'static&lt;/code&gt; lifetime specifically, for variables at least—but Rust’s lifetime is substantially more sophisticated and complex than that analogy might suggest.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="listicles"></category><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>“I Don't Know When I'd Use That”</title><link href="http://www.chriskrycho.com/2016/i-dont-know-when-id-use-that.html" rel="alternate"></link><published>2016-01-17T10:00:00-05:00</published><updated>2016-01-17T10:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-17:/2016/i-dont-know-when-id-use-that.html</id><summary type="html">&lt;p&gt;I was reading an interesting Stack Overflow &lt;a href="http://stackoverflow.com/questions/21170493/when-are-higher-kinded-types-useful"&gt;discussion&lt;/a&gt; of the value of &lt;a href="http://stackoverflow.com/questions/6246719/what-is-a-higher-kinded-type-in-scala"&gt;higher-kinded types&lt;/a&gt; (hereafter &lt;abbr&gt;HKTs&lt;/abbr&gt;), and noted someone repeatedly commenting, “But when would you use this in a &lt;em&gt;real app&lt;/em&gt;?” To put it the way another &lt;a href="https://m4rw3r.github.io/rust-and-monad-trait/"&gt;blog post&lt;/a&gt; about &lt;abbr&gt;HKTs&lt;/abbr&gt; (in Rust), they are “a feature people do not …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was reading an interesting Stack Overflow &lt;a href="http://stackoverflow.com/questions/21170493/when-are-higher-kinded-types-useful"&gt;discussion&lt;/a&gt; of the value of &lt;a href="http://stackoverflow.com/questions/6246719/what-is-a-higher-kinded-type-in-scala"&gt;higher-kinded types&lt;/a&gt; (hereafter &lt;abbr&gt;HKTs&lt;/abbr&gt;), and noted someone repeatedly commenting, “But when would you use this in a &lt;em&gt;real app&lt;/em&gt;?” To put it the way another &lt;a href="https://m4rw3r.github.io/rust-and-monad-trait/"&gt;blog post&lt;/a&gt; about &lt;abbr&gt;HKTs&lt;/abbr&gt; (in Rust), they are “a feature people do not really know what to do with.”&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: I’m sympathetic to that desire for concrete examples. I’m interested in these kinds of things not primarily for their intellectual value but for their pragmatic value (though I don’t think those two are as distinct as many people do). I’d &lt;em&gt;also&lt;/em&gt; love to see some more real-world examples in those discussions. All too often, the discussions of types in Haskell end up being quite abstract and academic—no surprise, given the language’s origin. But I’m also aware that quite often it’s difficult to see how a given kind of abstraction is useful without jumping into a language which has that abstraction available and &lt;em&gt;using&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;People often get turned off by Haskell (and other similarly high-abstraction languages like Scala) because of challenging terms like &lt;em&gt;monad&lt;/em&gt;, &lt;em&gt;applicative&lt;/em&gt;, &lt;em&gt;functor&lt;/em&gt;, and so on. And again: I get that. To grok Haskell, you need to wrap your head around a lot of &lt;em&gt;math&lt;/em&gt; ideas—mainly various properties of &lt;em&gt;sets&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But I remember feeling the same way six years ago when I started playing with JavaScript and jQuery and every tutorial out there simply assumed existing familiarity and comfort with functions as arguments or return values. Coming from the world of Fortran and C, my head ached for weeks as I tried to make sense of what I was seeing. Even when I finally got it, &lt;em&gt;I didn’t like it&lt;/em&gt;. Over the last several years, though, I’ve become increasingly comfortable and even reliant on closures, composition of functions to transform data, and so on as I worked regularly in Python and JavaScript.&lt;/p&gt;
&lt;p&gt;That experience has taught me that my current inability to see the utility of a given abstraction means little about the abstraction. It’s primarily an indicator of my own inexperience.&lt;/p&gt;
&lt;p&gt;To the question of the utility &lt;abbr&gt;HKTs&lt;/abbr&gt; in general—in Haskell, Rust, or somewhere else—I don’t have the knowledge myself (yet) to supply a good answer. Heck, I can’t even &lt;em&gt;explain&lt;/em&gt; them very well. (&lt;a href="http://adriaanm.github.io/research/2010/10/06/new-in-scala-2.8-type-constructor-inference/"&gt;Other people can, though!&lt;/a&gt;) But I can say that reading &lt;a href="https://gumroad.com/l/maybe-haskell"&gt;&lt;em&gt;Maybe Haskell&lt;/em&gt;&lt;/a&gt; showed me clearly that such things can be very useful. Even if I am not yet comfortable using that tool, I see how learning to use it would be profitable in the long-term. And like any good tool, even if you don’t need it every day… when you want it, you &lt;em&gt;really&lt;/em&gt; want it.&lt;/p&gt;
</content><category term="software development"></category><category term="programming languages"></category><category term="rust"></category><category term="haskell"></category></entry><entry><title>Women in Rust</title><link href="http://www.chriskrycho.com/2016/women-in-rust.html" rel="alternate"></link><published>2016-01-10T15:25:00-05:00</published><updated>2016-01-10T15:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-10:/2016/women-in-rust.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I posted these bullet points last night as a series of tweets on my &lt;a href="https://www.twitter.com/chriskrycho"&gt;main account&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007510147309568"&gt;∞ January 9, 2016 21:11&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A thing I’d really, really like to see change—this is from the &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt; Twitter data. Unsurprising, but awful:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/images/new-rustacean-followers.png" alt="@newrustacean Twitter follower gender data" /&gt;&lt;figcaption&gt;&lt;a href="https://www.twitter.com/newrustacean"&gt;@newrustacean&lt;/a&gt; Twitter follower gender data&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007729371148289"&gt;∞ January 9, 2016 …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I posted these bullet points last night as a series of tweets on my &lt;a href="https://www.twitter.com/chriskrycho"&gt;main account&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007510147309568"&gt;∞ January 9, 2016 21:11&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A thing I’d really, really like to see change—this is from the &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt; Twitter data. Unsurprising, but awful:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/images/new-rustacean-followers.png" alt="@newrustacean Twitter follower gender data" /&gt;&lt;figcaption&gt;&lt;a href="https://www.twitter.com/newrustacean"&gt;@newrustacean&lt;/a&gt; Twitter follower gender data&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007729371148289"&gt;∞ January 9, 2016 21:12&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Takeaway: the &lt;a href="https://www.twitter.com/rustlang"&gt;@rustlang&lt;/a&gt; community has many strengths, but like every tech community, we need to improve here—a lot.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686008145752272896"&gt;∞ January 9, 2016 21:14&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Standing offer: if you’re a female &lt;a href="https://www.twitter.com/rustlang"&gt;@rustlang&lt;/a&gt; dev, I’d &lt;em&gt;love&lt;/em&gt; to feature your experience learning Rust on the show.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686008527937245185"&gt;∞ January 9, 2016, 21:15&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ll be doing some interview &lt;a href="https://www.twitter.com/newrustacean"&gt;@newrustacean&lt;/a&gt; episodes soon-ish—I want as many female voices in the mix as possible.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="podcasting"></category><category term="tweetstorm"></category><category term="rust"></category></entry><entry><title>Rust and Swift (xi)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html" rel="alternate"></link><published>2016-01-10T10:00:00-05:00</published><updated>2016-01-10T10:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-10:/2016/rust-and-swift-xi.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I’ve still been (slowly) working through the Swift book and comparing Swift and Rust; I have another draft started which I’ll hopefully finish this week. And I still find the comparison deeply profitable. The two languages continue to evolve in interesting ways, and the comparison is all the more interesting &lt;a href="https://github.com/apple/swift"&gt;now that Swift is open-source&lt;/a&gt; and its future &lt;a href="https://github.com/apple/swift-evolution"&gt;open for community input&lt;/a&gt; (just as &lt;a href="https://github.com/rust-lang/rfcs"&gt;Rust is&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Something I’ve been thinking about for several months, and which the &lt;a href="https://overcast.fm/+CdSzsTIY/1:16:42"&gt;brief discussion of Swift, Go, and Rust&lt;/a&gt; at the end of the latest &lt;a href="http://atp.fm/episodes/151"&gt;Accidental Tech Podcast&lt;/a&gt; brought back to my mind, is the question of what the next generation of systems-level programming language should be. And my answer is: there shouldn’t be &lt;em&gt;just one&lt;/em&gt;. The best possible thing for the space, in many ways, is for there to be a healthy diversity of options and lots of competition in the space. We don’t want to have &lt;em&gt;ten&lt;/em&gt; different systems programming languages to deal with, I think—but three or four or five would be &lt;em&gt;much&lt;/em&gt; preferable to having one or two (closely related) as we have in the decades of C and C++ dominance.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: both languages (and perhaps especially C) do many things exceptionally well. For all that they are (justly) maligned for some of their problems, the longevity of both C and C++ has a great deal to do with how well they fit the problem domain, and how much they’ve empowered developers to accomplish within that space (which is very, &lt;em&gt;very&lt;/em&gt; large).&lt;/p&gt;
&lt;p&gt;The problem, though, at least as I see it, is that the existence of only two really serious systems programming languages for the last several decades has led a lot of developers to think that C and C++‘s ways of solving problems are the &lt;em&gt;only&lt;/em&gt; way to solve problems. The languages we use shape the way we think about possible solutions, and when a given language doesn’t recognize entire classes of different approaches, that deeply limits developers’ ability to tackle certain issues. (See also the interesting CppCast &lt;a href="http://cppcast.com/2015/10/andrei-alexandrescu/"&gt;interview with D’s Andrei Alexandrescu&lt;/a&gt; in which he makes similar points.)&lt;/p&gt;
&lt;p&gt;The most obvious thing missing from both is the ability to do truly functional-style programming. C of course is also lacking classes and thus is much more difficult to use for any sort of object-oriented programming.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Neither has anything remotely like Rust’s traits or Swift’s extensions; C++ has only gotten lambdas recently.&lt;/p&gt;
&lt;p&gt;All of this comes out to mean that the set of &lt;em&gt;tools&lt;/em&gt; available to systems programmer has necessarily been missing any number of things available in languages outside that context. In some cases, this may be a necessary consequence of the kinds of programming being done: when you need totally deterministic memory and compiler behavior, dynamic typing and a non-trivial runtime are simply not options. But in many cases, they are simply a function of the history of the languages’ development and history. Being an ALGOL descendant, and especially a C descendant, means there are some fundamental choices about the language which will differ from those made in a language descended from ML.&lt;/p&gt;
&lt;p&gt;All of which is to say: C and C++ have been really useful tools in many ways, but having &lt;em&gt;only&lt;/em&gt; C and C++ available for serious systems programming work over the last decades has left many developers blind to or simply unaware of the real advantages other paradigms might offer them.&lt;/p&gt;
&lt;p&gt;So going forward, I don’t want there to be &lt;em&gt;a winner&lt;/em&gt; in the systems programming space. I’d rather see D, Rust, Swift, Go, and maybe even a few other contenders all stay strong—finding their own niches and continually pushing each other and learning from each other. That will give us a space in which different languages are free to try out different approaches to the same problems, without being tied to the specific constraints faced by other languages. Built-in greenthreading? Go! Hindley-Milner types, memory safety, and zero runtime? Rust! Something in beween, highly expressive and with different type systems and tradeoffs around memory management, etc.? Swift, or D!&lt;/p&gt;
&lt;p&gt;Having a robust, thriving set of competitors in the market will be good for the languages themselves. But it will also be good for developers. It will take off some of the blinders that come from a single language (or a pair of very closely related languages) dominating the ecosystem. It will make it likelier that people will be more familiar with different programming paradigms. And that can only be a good thing, as far as I’m concerned.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Classes and structs (product types), and reference and value types.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Properties: type and instance, stored and computed.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;It is of course entirely possible to do non-classical OOP; the point is that C entirely lacks &lt;em&gt;language-level&lt;/em&gt; facilities for OOP, inheritance, etc.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming-languages"></category></entry><entry><title>Rust and Swift (x)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-x.html" rel="alternate"></link><published>2015-12-06T11:25:00-05:00</published><updated>2015-12-22T13:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-12-06:/2015/rust-and-swift-x.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Swift and Rust both have “product types” as well as the &lt;code&gt;enum&lt;/code&gt; “sum types.” In Rust, these are &lt;code&gt;struct&lt;/code&gt; types; Swift splits them into &lt;code&gt;class&lt;/code&gt;es and &lt;code&gt;struct&lt;/code&gt;s.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Product types” will be much more familiar to programmers coming from a C-like background, or indeed most object-oriented programming languages: these are the same basic kind of thing as classes, structs, and objects in other languages. These include &lt;em&gt;all&lt;/em&gt; the value types which compose them, unlike sum types—&lt;code&gt;enum&lt;/code&gt;—which have &lt;em&gt;only one&lt;/em&gt; of the value types which compose them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Right off the bat, I note the Swift book’s somewhat amusing reticence to call out C and C-descended languages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike other programming languages, Swift does not require you to create separate interface and implementation files for custom classes and structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because there’s such a long list of languages not directly descended from C which do that, right? 😉&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust differs not only from Swift but from every other modern language I have used in not having a constructor &lt;em&gt;syntax&lt;/em&gt; for its instantiations. Whereas C++ has &lt;code&gt;new NameOfType()&lt;/code&gt; and Python and Swift both have &lt;code&gt;NameOfType()&lt;/code&gt;, “constructors” for Rust &lt;code&gt;struct&lt;/code&gt;s are just functions which return an instance constructed using literal syntax, by convention &lt;code&gt;NameOfType::new()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let’s make a &lt;code&gt;struct&lt;/code&gt; defining a location in a plane, you might do this in Swift (leaving aside initializer values; I’ll come back to those later). These definitions look &lt;em&gt;very&lt;/em&gt; similar. Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Point {
    var x: Double var y: Double
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Point {
    x: f64,
    y: f64,
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating the types looks a little different, though. Here’s a constructor in Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;let point = Point(x: 0, y: 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the two ways we could construct the type in Rust, a literal constructor (fairly similar to constructing &lt;code&gt;dict&lt;/code&gt; literals in Python or object literals in JavaScript):&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let point = Point { x: 0.0, y: 0.0 };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or a constructor method, &lt;code&gt;new&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;// &amp;quot;Constructor&amp;quot;
impl Point {
    fn new(x: f64, y: f64) -&amp;gt; Point {
        Point { x: x, y: y }
    }
}

let another_point = Point::new(0, 0);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe: these two things in Rust are the same under the covers (though if &lt;code&gt;Point&lt;/code&gt;s had non-public internals, they would be non-trivially different: you couldn’t construct it with its private members externally). As usual, Rust opts to keep the language relatively small in these core areas. Given the plethora of ways you can construct something in e.g. C++, I count that a big win.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another difference: Swift has &lt;em&gt;syntax&lt;/em&gt; for default values; Rust uses a &lt;code&gt;trait&lt;/code&gt; instead. In Swift, you simply supply the default value in the definition of the &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Point {
    var x = 0.0 var y = 0.0
}

let point = Point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you use &lt;code&gt;std::default::Default&lt;/code&gt;, which provides a standard value for a given type, and for simple types can be supplied by the compiler even for custom types. Here is the equivalent Rust code:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use std::default::Default;

#[derive(Default)]
struct Point {
    x: f64,
    y: f64,
}

let point = Point::default();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is reasonable enough, but we can also supply our own custom implementation if we so desire:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use std::default::Default;

struct Point {
    x: f64,
    y: f64,
}

impl Default for Point {
    fn default() -&amp;gt; Point {
        Point { x: 0.0, y: 0.0 }
    }
}

let point = Point::default();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this is trivial for this type, but you can see how it could be useful for more complex types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The tradeoffs here are our usual suspects: Rust’s re-use of an existing concept/tool within the language (&lt;code&gt;trait&lt;/code&gt;) vs. Swift’s use of syntax. Rust is slightly more explicit, making it obvious that a default value is being created—but Swift is perfectly readable and the syntax is consistent with many other languages, and it &lt;em&gt;is&lt;/em&gt; shorter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages use &lt;code&gt;.&lt;/code&gt; syntax for member access. Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;println(&amp;quot;The point is: \(point.x), \(point.y)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;println!(&amp;quot;The point is {:}, {:}&amp;quot;, point.x, point.y);&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift lets you define items &lt;em&gt;within&lt;/em&gt; a struct as mutable or constant. So you can create a variable struct instance, with some of its items immutable:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct PointOnZAxis {
    var x: Double var y: Double let z = 0.0
}

var point = PointOnZAxis(x: 4.0, 5.0)
point.x = 5.0 point.y = 6.0
// This wouldn&amp;#39;t compile, though:
// point.z = 1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is pretty handy for a lot of object-oriented programming approaches.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And Rust doesn’t have it. There are ways to accomplish the same thing; this isn’t the end of the world. Still, it’s an interesting omission, and it’s very much by design. Rust &lt;em&gt;used&lt;/em&gt; to have this feature, and dropped it—and for good reason. Say you had a mutable field in a mutable struct, and then an immutable reference to it; should the mutable field be mutable, or immutable, with that reference?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Rusty way to do this is to differentiate between public and private data. The above examples don’t make the public/private distinction particularly clear, because they assume everything is within the same module. However, many times, this will not be the case.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;mod geometry {
    pub struct Point {
        x: f64,
        pub y: f64,
    }

    impl Point {
        pub fn new() -&amp;gt; Point {
            Point { x: 0.0, y: 0.0 }
        }

        pub fn set_x(&amp;amp;mut self, x: f64) {
            self.x = x;
        }
    }
}

fn main() {
    // Won&amp;#39;t compile: the `x` field is private.
    // let mut p = geometry::Point { x: 0.0, y: 0.0 };

    // Will compile: the `new` method is public.
    let mut p = geometry::Point::new();

    // Won&amp;#39;t compile: `x` isn&amp;#39;t public.
    // p.x = 4.0;
    // You can use the setter, though:
    p.set_x(4.0);

    // You *can* set `y` directly, though, because it&amp;#39;s public.
    p.y = 14.0;

    // You can&amp;#39;t set fields either way if the instance is immutable.
    let q = geometry::Point::new();

    // This fails because `set_x` requires a mutable reference, but `q` is
    // immutable.
    // q.set_x(4.0);

    // This fails because `q` is immutable, and so all its fields are, too.
    // q.y = 14.0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is an interesting way of handling this issue. Rust takes the fairly standard use of information hiding (one of the basic principles of most object-oriented programming techniques) and combines it with the language’s normal mutability rules to make it so that the mutability of any given instance data is quite clear: all public members are just as mutable as the struct. If a member isn’t potentially publicly mutable, it isn’t publicly accessible. I really like this, though it took some mental readjustment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s one other difference here, and it’s actually one of the areas Swift and Rust diverge substantially. Rust has &lt;code&gt;struct&lt;/code&gt; for all product types; Swift splits them into &lt;code&gt;struct&lt;/code&gt; types and &lt;code&gt;class&lt;/code&gt; types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift &lt;code&gt;class&lt;/code&gt;es have inheritance; there is presently &lt;em&gt;no&lt;/em&gt; inheritance in Rust.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, whereas Rust determines whether to use pass-by-reference or-value depending on details of the type (whether it implements the &lt;code&gt;Copy&lt;/code&gt; &lt;code&gt;trait&lt;/code&gt;) and expected arguments to a function, Swift makes that distinction between &lt;code&gt;class&lt;/code&gt; (pass-by-reference) and &lt;code&gt;struct&lt;/code&gt; (pass-by-value) types. Quirky.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not bad, &lt;em&gt;per se&lt;/em&gt;. But quirky.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I recently bumped into some discussion of data types in C♯ along with C, C++, and Java (&lt;a href="http://joeduffyblog.com/2015/12/19/safe-native-code/"&gt;here&lt;/a&gt;) and discovered that Swift is stealing this idea from C♯, which &lt;a href="https://msdn.microsoft.com/en-us/library/0taef578.aspx"&gt;makes the same copy/reference distinction&lt;/a&gt; between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One consequence of this: in Rust, you’re always rather explicit about whether you’re accessing things by value vs. by reference. Not so in Swift; you have to remember whether the item you’re touching is a &lt;code&gt;struct&lt;/code&gt; type or a &lt;code&gt;class&lt;/code&gt; type, so that you can &lt;em&gt;remember&lt;/em&gt; whether a given assignment or function call results in a reference or a copy. This is necessary because Swift doesn’t let you make that explicit (trying to hide the memory management from you). And it’s not alone in that, of course; many other high-level languages obscure that for convenience but still require you to think about it in certain circumstances. I’ve been bitten in the past by the value/reference distinction when thinking through the behavior of Python objects, for example, so that’s not a critique of Swift. Moreover, having the distinction between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; types does let you be &lt;em&gt;more&lt;/em&gt; explicit than you might in e.g. Python about how given data will be handled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I won’t lie, though: I like Rust’s approach better. (Shocking, I know.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All that nice initializer syntax for Swift &lt;code&gt;struct&lt;/code&gt; types is absent for its &lt;code&gt;class&lt;/code&gt; types, which seems strange to me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift supplies some syntax for object identity, since it’s useful to know not only whether two &lt;code&gt;class&lt;/code&gt; instances have the same data, but are in fact the same instance. You can use &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;. Handy enough. To get at this kind of equivalence in Rust, you have to use raw pointers (which are often but not always &lt;code&gt;unsafe&lt;/code&gt;; you can do this specific comparison &lt;em&gt;without&lt;/em&gt; being &lt;code&gt;unsafe&lt;/code&gt;, for example) to check whether the memory addresses are the same.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ix.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Sum types (&lt;code&gt;enum&lt;/code&gt;s) and more on pattern matching.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Hopes for the next generation of systems programming.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="listicles"></category><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (ix)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-ix.html" rel="alternate"></link><published>2015-11-09T22:20:00-05:00</published><updated>2016-01-02T21:54:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-11-09:/2015/rust-and-swift-ix.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Right off the bat when looking at the definitions for Swift’s and Rust’s &lt;code&gt;enum&lt;/code&gt; types, a difference pops out: the use of the keyword &lt;code&gt;case&lt;/code&gt; to introduce an enum member in Swift. In one sense, this overloads that keyword, but in another sense it’s fine: pattern matching and enums go hand in hand, so the use in both cases is fairly natural. Rust doesn’t have any special syntax to designate the elements of an enum; they’re just separated by commas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I am not at all shocked to find that Swift has a variant syntax for its unit type case declarations, where a single &lt;code&gt;case&lt;/code&gt; keyword precedes a list of comma-separated cases defined on a single line. (At this point, I would be more surprised &lt;em&gt;not&lt;/em&gt; to find a variant syntax for something in Swift!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Something truly wonderful about both a Rust and Swift: enumerated types aren’t just wrappers around integer values. They’re real types of their own. This is powerful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust and Swift also share in having enumerated types that can hold values. The most prominent of these so far in the Swift book are optionals, the &lt;code&gt;Optional&lt;/code&gt; enum type, corresponding very closely to Rust’s &lt;code&gt;Option&lt;/code&gt; type. Having had these for a bit in playing with Rust, and having gotten familiar with the utility of types like these while reading &lt;a href="https://gumroad.com/l/maybe-haskell"&gt;&lt;em&gt;Maybe Haskell&lt;/em&gt;&lt;/a&gt;—a delightful book which introduces Haskell and functional programming using Haskell’s &lt;code&gt;Maybe&lt;/code&gt; type—I now miss them profoundly in languages which don’t have them. (Which is to say: every language I use on a regular basis professionally: C, C++, Python, JavaScript, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s enum types don’t have integer values &lt;em&gt;by default&lt;/em&gt;—but they can have them if you define a type and assign a value to each enum case at the definition. These “raw values” are distinct from the “associated values” noted just above. I expect these exist primarily for ease of interoperation with Objective-C.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;del&gt;Rust doesn’t have anything like this, at least that I can think of. The main place it would be useful would be for foreign function interfaces (as in Swift), and this is one of several such gaps in Rust,&lt;/del&gt; along with the lack of a straightforward way to map to C’s &lt;code&gt;union&lt;/code&gt; types. &lt;del&gt;There are trade offs in terms of adding the functionality to the language, though, as it substantially increases the complexity of what an enum value can be, I think.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; This was incorrect. From the &lt;a href="https://doc.rust-lang.org/reference.html"&gt;Rust Reference&lt;/a&gt; section on &lt;a href="https://doc.rust-lang.org/reference.html#enumerations"&gt;Enumerations&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enums have a discriminant. You can assign them explicitly:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;enum Foo {
    Bar = 123,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a discriminant isn’t assigned, they start at zero, and add one for each variant, in order.&lt;/p&gt;
&lt;p&gt;You can cast an enum to get this value:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let x = Foo::Bar as u32; // x is now 123u32&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This only works as long as none of the variants have data attached. If it were &lt;code&gt;Bar(i32)&lt;/code&gt;, this is disallowed.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initialization of Swift’s raw-valued enum type is quite similar, and pleasantly so, to Python’s initialization of enums.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In a surprising change from the usual, Swift’s syntax for binding variable names when pattern matching against an enum is &lt;em&gt;more&lt;/em&gt; verbose than Rust’s, requiring the use of either a leading &lt;code&gt;let&lt;/code&gt; on the &lt;code&gt;case&lt;/code&gt; statement if all the elements are of the same type, or a &lt;code&gt;let&lt;/code&gt; in front of each element otherwise:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;var matchedValue: String
let matchee = 3.14159
switch matchee {
case 3.14159:
    matchedValue = &amp;quot;pi&amp;quot;
case _:
    matchedValue = &amp;quot;not pi&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, a matched pattern can simply bind its value directly:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let matchee = 3.14159;
let matchedValue = match matchee {
    3.14159 =&amp;gt; &amp;quot;pi&amp;quot;.to_string(),
    _ =&amp;gt; &amp;quot;not pi&amp;quot;.to_string()
};&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift has the ability to do recursive enumerations with its &lt;code&gt;indirect&lt;/code&gt; type. This is conceptually interesting, but off the top of my head I can’t think of a time when this would have been useful at any point since I started programming seven and a half years ago. The book’s example of a recursive function a aliasing arithmetic expressions is fine, but not particularly illuminating to me. I suspect, though, that it might make more sense if I were more familiar with pure functional programming paradigms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; a friend &lt;a href="https://alpha.app.net/jws/post/65990633"&gt;points out&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Indirect enums are useful for recursive types in general. There are a lot of these: Lists, trees, and streams are the big ones that come to mind.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All those same lines: Rust does &lt;em&gt;not&lt;/em&gt; have the ability to have recursive enumerations at present (or recursive &lt;code&gt;struct&lt;/code&gt; types, for that matter), at least without heap-allocating with &lt;code&gt;Box&lt;/code&gt; along the way. You &lt;em&gt;can&lt;/em&gt; construct such a type, in other words, but you have to be explicit about how you’re handling the memory, and it can’t be stack-allocated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For an example of a recursive enumeration type (as well as an interesting/hilarious example of how you can easily confuse the compiler if you do this wrong), see &lt;a href="https://users.rust-lang.org/t/recursive-enum-types/2938"&gt;this Rust forum post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For some discussion on stack- and heap-allocated memory in Rust, I’ll shamelessly promote my Rust podcast, &lt;a href="http://www.newrustacean.com"&gt;New Rustacean&lt;/a&gt;: take a listen to &lt;a href="http://www.newrustacean.com/show_notes/e005/index.html"&gt;e005: Allocate it where?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Functions, closures, and an awful lot of Swift syntax.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Classes and structs (product types), and reference and value types.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="software development"></category><category term="listicles"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>CSS Fallback for OpenType Small Caps</title><link href="http://www.chriskrycho.com/2015/css-fallback-for-opentype-small-caps.html" rel="alternate"></link><published>2015-10-19T20:00:00-04:00</published><updated>2015-10-19T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-10-19:/2015/css-fallback-for-opentype-small-caps.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I wrote this up as &lt;a href="http://stackoverflow.com/questions/24846264/css-fallback-for-opentype-small-caps/25172932#25172932"&gt;a question on Stack Overflow&lt;/a&gt; a bit over a year ago. It has continued to get a fair bit of traffic, so I’ve republished it here and cleaned it up a bit.&lt;/i&gt;&lt;/p&gt;
&lt;section id="the-problem" class="level2"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over the last year, I’ve worked on &lt;a href="//holybible.com"&gt;a site …&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I wrote this up as &lt;a href="http://stackoverflow.com/questions/24846264/css-fallback-for-opentype-small-caps/25172932#25172932"&gt;a question on Stack Overflow&lt;/a&gt; a bit over a year ago. It has continued to get a fair bit of traffic, so I’ve republished it here and cleaned it up a bit.&lt;/i&gt;&lt;/p&gt;
&lt;section id="the-problem" class="level2"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over the last year, I’ve worked on &lt;a href="//holybible.com"&gt;a site&lt;/a&gt; where small caps are important: setting the text of the Bible. In the Old Testament the name of God is transliterated as &lt;code&gt;Lord&lt;/code&gt; but in small caps—not “LORD” but &lt;span class="divine-name"&gt;Lord&lt;/span&gt; (RSS readers will want to click through and see this on my site). However, the state of OpenType small caps support at the moment is… less than optimal. Safari (even up through Safari 9 on El Capitan, from which I am typing this) still doesn’t support the &lt;code&gt;-webkit-font-feature-settings: 'smcp'&lt;/code&gt; option, and a lot of the hits for this website will be coming from mobile.&lt;/p&gt;
&lt;p&gt;Unfortunately, “graceful degradation” is problematic here: if you specify both &lt;code&gt;font-variant: small-caps&lt;/code&gt; and &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; in a browser that supports the latter (e.g. Chrome), the &lt;code&gt;font-variant&lt;/code&gt; declaration overrides it, so the horribly ugly old-style version still comes into play. (Note: this is as it should be per the &lt;a href="http://www.w3.org/TR/css-fonts-3/#feature-precedence"&gt;spec&lt;/a&gt;: the &lt;code&gt;font-variant&lt;/code&gt; declaration has a higher priority than the &lt;code&gt;font-feature-settings&lt;/code&gt; declaration). Given the current implementations of &lt;code&gt;font-variant: small-caps&lt;/code&gt;, though—shrunken capitals rather than actual small capitals—the result is that using &lt;code&gt;font-variant: small-caps&lt;/code&gt; realists in not-so-gracefully degrading &lt;em&gt;everyone’s&lt;/em&gt; reading experience.&lt;/p&gt;
&lt;p&gt;In the past, I have exported the small caps as a distinct webfont and specified them directly; see &lt;a href="http://www.chriskrycho.com/2014/learning-qml-part-1.html"&gt;this post&lt;/a&gt; for a simple example: the first line of each paragraph is specified that way.&lt;/p&gt;
&lt;p&gt;While I &lt;em&gt;can&lt;/em&gt; do the same thing here (and at least in theory could deliver a pretty small typeface, since I really only need three characters: &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt;), I’d prefer simply to enable sane fallbacks. As noted above, however, that’s not possible. I am &lt;em&gt;open to&lt;/em&gt; but would very much prefer to avoid server-side solutions (browser detection, etc.) as a point of complexity that is better to minimize, especially given how rapidly browsers change. How else might one solve this problem, and especially are there existing solutions for it?&lt;/p&gt;
&lt;p&gt;In the future, &lt;code&gt;font-variant: small-caps&lt;/code&gt; will handle this nicely, as per &lt;a href="http://www.w3.org/TR/css3-fonts/#small-caps"&gt;the spec&lt;/a&gt; it should display a small-capitals-variant of the typeface if the typeface supplies it. However, at present, &lt;em&gt;no browser supports this&lt;/em&gt; (at least, none that I can find!). This means that instead, they all render fake small capitals simply by scaling down actual capitals. The result is typographically unpleasant, and unacceptable on this project.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solutions" class="level2"&gt;
&lt;h2&gt;The Solution(s)&lt;/h2&gt;
&lt;p&gt;I spent a considerable amount of time researching this and wrestling with it. After digging around as best I could, the top solutions for now are:&lt;/p&gt;
&lt;section id="supports" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Take advantage of the &lt;code&gt;@supports&lt;/code&gt; rule in browsers. This is what I initially opted to do on this project.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; You use the rule this way:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.some-class {
    font-variant: small-caps;
}

@supports(font-feature-settings: &amp;#39;smcp&amp;#39;) {
    .some-class {
        font-variant: normal;
        font-feature-settings: &amp;#39;smcp&amp;#39;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I’ve simplified by leaving out the prefixed versions; you’ll need to add the &lt;code&gt;-webkit-&lt;/code&gt; and &lt;code&gt;-moz-&lt;/code&gt; prefixes to get this actually working.) This has the advantage that support for real small caps and support for the &lt;code&gt;@supports&lt;/code&gt; rule are very similar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@supports&lt;/code&gt;: &lt;a href="http://caniuse.com/#feat=css-featurequeries"&gt;Can I Use Feature Queries?&lt;/a&gt;: Chrome 31+, Firefox 29+, Opera 23+, Android 4.4+, Safari 9+, Edge 12+, Chrome for Android&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-feature-settings&lt;/code&gt;: &lt;a href="http://usabilitypost.com/2014/05/10/using-small-caps-and-text-figures-on-the-web/"&gt;Using Small Caps &amp;amp; Text Figures on the Web&lt;/a&gt;: Chrome, Firefox, IE10+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This isn’t perfect: since IE10/11 don’t implement &lt;code&gt;@supports&lt;/code&gt;, you miss one browser—sort of. At this point, IE is a legacy browser, and Edge has had &lt;code&gt;@supports&lt;/code&gt; available from the start. Thus, this gets you most of the way there, and it should be future-facing: this should progressively enhance the site nicely. The normal (bad, but functional) small caps are displayed in the meantime, and when browsers eventually get around to using OpenType small caps by default for &lt;code&gt;font-variant: small-caps&lt;/code&gt;, this will continue to work just fine. It’s “progressive enhancement” and it’ll work nicely for most purposes.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="typeface-subsetting" class="level3"&gt;
&lt;h3&gt;Typeface subsetting&lt;/h3&gt;
&lt;p&gt;As mentioned above, one can create a subset of the typeface that includes only small capitals. This is what I have done for the small caps on this site; see the example in the first paragraph.&lt;/p&gt;
&lt;p&gt;To pull this off, you’ll need to start by subsetting the typeface. You can do this manually with a font tool, or (the simpler way) you can use FontSquirrel’s custom subsetting tool in their &lt;a href="http://www.fontsquirrel.com/tools/webfont-generator"&gt;webfont generator&lt;/a&gt;. (&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; You &lt;em&gt;must&lt;/em&gt; check the license and confirm that the typeface in question allows this kind of modification. See below.) In the web font generator, first upload the file you wish to modify. Then choose the &lt;strong&gt;Expert&lt;/strong&gt; radio button. Most of the settings you can leave as they are; they’re good sane defaults. Midway down the page you’ll see &lt;strong&gt;OpenType Flattening&lt;/strong&gt; options. Here, select only “Small Caps”. Run the generator. The result will be a complete replacement of the normal lowercase letters with the small caps set.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In that case, you can simply apply a style to the elements you want to have small capitals, e.g.:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.divine-name {
    font-family: &amp;#39;my_typeface_smcp&amp;#39;, &amp;#39;my_typeface&amp;#39;, serif;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The major advantage to this approach is consistency: that typeface is going to display on every browser out there, back to IE5.5, as long as you deliver it correctly using the various hooks required by &lt;code&gt;@font-face&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a few disadvantages to this approach, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It means delivering another font file. In my case, this would be an acceeptably low size (since I actually only need four characters), but it’s still something to consider in general. It is in any case another HTTP request, which is going to further slow the page load time or at least give you some flash of unstyled text when it reloads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It may violate the licenses of the typefaces in question. For at least one of the fonts I used on this project, it &lt;em&gt;does&lt;/em&gt;: the license explicitly forbids rebuilding the font using tools like FontSquirrel. (FontSquirrel was the tool I used for this approach before, and it works quite well.) This is a make-or-break issue for using a subset of a typeface to accomplish the goal. That being said, if you have a good reason to do it, you may be able to get support from the vendor (especially if they’re a small shop). For the project that prompted this question, I was able to do just that with a nice email—the designer is a great guy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The other major reason not to do it this way is that it has a significantly higher maintenance cost. If at any point you need to change or update the typeface, you have to go through the subsetting process all over again. By contrast, the first option will simply &lt;em&gt;work&lt;/em&gt;, though admittedly not as pleasantly as one might hope, and will not only continue to work but will actually improve over time as browsers increase their implementation of the CSS3 standard.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I opted for the second solution on HolyBible.com—typography was one of the driving differentiators for the site, so I prioritized it and did the necessary legwork for it. In general, though, the first option should work well for most sites. In any case, both ways work, though the first one is a &lt;em&gt;better&lt;/em&gt; example of progressive enhancement. And we can all look forward to the day when true small-caps support is available on every browser, right?&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For various reasons (especially see note 2 below), I actually opted for the second approach outlined here, which is the same approach I was trying to avoid. Alas.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Issues remain: even in the latest Chrome (46 as of the time of this post), using the &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; approach has some issues. For example, if you turn on &lt;code&gt;letter-spacing&lt;/code&gt; (a fairly common &lt;a href="http://practicaltypography.com/letterspacing.html"&gt;recommendation&lt;/a&gt; for small caps), the small caps will revert to normal lowercase letters.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;From the FontSquirrel blog post that introduced the feature:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have a font with OpenType features, you can now flatten some of them into your webfont. For instance, some fonts have small caps built in, but they are completely inaccessible in a web browser. By selecting the “Small Cap” option, the Generator will replace all the lowercase glyphs with the small cap variants, giving you a small cap font. Please note that not all OpenType features are supported and if the font lacks OpenType features, using these options won’t create them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="design"></category><category term="software development"></category><category term="typography"></category></entry><entry><title>Rust and Swift (viii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html" rel="alternate"></link><published>2015-10-18T11:50:00-04:00</published><updated>2015-10-19T20:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-10-18:/2015/rust-and-swift-viii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Rust and Swift handle function definition fairly similarly, at least for basic function definitions. In fact, for most basic functions, the only difference between the two is the keyword used to indicate that you’re declaring a function: &lt;code&gt;fn&lt;/code&gt; in Rust and &lt;code&gt;func&lt;/code&gt; in Swift.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Likewise, both return an empty tuple, &lt;code&gt;()&lt;/code&gt;, called the &lt;em&gt;unit type&lt;/em&gt; in Rust or &lt;code&gt;Void&lt;/code&gt; in Swift. Note, however, that this unit/&lt;code&gt;Void&lt;/code&gt; type is &lt;em&gt;not&lt;/em&gt; like C(++)’s &lt;code&gt;void&lt;/code&gt; or Java’s &lt;code&gt;null&lt;/code&gt;: you cannot coerce other types to it; it really is an empty tuple.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type declarations on functions are basically identical for simple cases, though they vary into the details as you get into generics and constraints in generics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have no idea why the Swift team chooses to represent function names like this: &lt;code&gt;function_name(_:second_param:third_param:&amp;lt;etc.&amp;gt;)&lt;/code&gt;. Perhaps it’s a convention from other languages I’m simply unfamiliar with, but it seems both odd and unhelpful: eliding the first parameter name obscures important information. Also, why use colons for the delimiter?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I’m informed via Twitter and App.net that this reflects how function names work in Objective C, and derives ultimately from Smalltalk.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being able to name the items in a returned type in Swift is quite handy; it’s something I have often wanted and had to work around with dictionaries or other similar types in Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll see how I feel once I’ve been writing both for a while, but initially I &lt;em&gt;strongly&lt;/em&gt; prefer Rust’s more-obvious (if also somewhat longer) &lt;code&gt;-&amp;gt; Option&amp;lt;i32&amp;gt;&lt;/code&gt; to return an optional integer to Swift’s &lt;code&gt;-&amp;gt; Int?&lt;/code&gt;. I am quite confident that I’ll miss that trailing &lt;code&gt;?&lt;/code&gt; somewhere along the way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m sure there’s a reason for Swift’s internal and external parameter names and the rules about using &lt;code&gt;_&lt;/code&gt; to elide the need to use keyword arguments (but automatically eliding the first one) and so on… but I really can’t see the utility, overall. It seems like it would be better just to have Python-like args and keyword args.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That’s doubly so given that Swift’s rules for default-valued parameters map exactly to Python’s: they need to go at the end, after any parameters which don’t have default values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s variadic parameters are nice—though of course limited, since if you have more than one, the compiler may not know how to resolve which destination parameter a given argument belongs with. (I imagine the compiler &lt;em&gt;could&lt;/em&gt; be extended to be able to handle multiple variadic parameters as long as they were all of different types, but that’s probably not worth the work or the potential confusion it would introduce.) In any case, it’s a small nicety that I do wish Rust had.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s variable parameters are… interesting. I can see the utility, sort of, but (probably from years of habit with C and Python and pass-by-reference types), it’s just not a pattern that makes a lot of sense to me right now. No doubt I’ll get used to them in idiomatic Swift, but while Rust doesn’t have a similar feature, I suspect I won’t miss it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In/out parameters—that is, mutable pass-by-reference types—are available in both languages. The syntax is &lt;em&gt;very&lt;/em&gt; different here, as are the semantics.&lt;/p&gt;
&lt;p&gt;Swift has the &lt;code&gt;inout&lt;/code&gt; keyword, supplied before a parameter definition:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;func adds4ToInput(inout num: Int) {
    num += 4;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust has instead a variation on every other type definition, declaring the type in this case to be a mutable reference:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn adds_4_to_input(num: &amp;amp;mut i32) {
    num += 4;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual, in other words, Swift opts to use new syntax (in this case, a dedicated keyword) while Rust opts to use the same syntax used everywhere else to denote a mutable reference. In fairness to Swift, though, this is something of a necessity there. From what I’ve seen so far, Swift generally doesn’t (and perhaps can’t?) do pointers or references explicitly (though of course it’s handling lots of things that way under the covers); arguments to functions are a special case, presumably present primarily for interoperability with Objective-C.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s function type definitions, as used in e.g. function parameter definitions, are quite nice, and reminiscent of Haskell in the best way. Rust’s are pretty similar, and add in its &lt;code&gt;trait&lt;/code&gt; usage—because functions types &lt;em&gt;are&lt;/em&gt; &lt;code&gt;trait&lt;/code&gt;s. Once again, I really appreciate how Rust builds more complicated pieces of functionality on lower-level constructs in the language. (Swift may be doing similar under the covers, but the Swift book doesn’t say.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Again, though, the downside to Rust’s sophistication is that it sometimes bundles in some complexity. Returning a function in Swift is incredibly straightforward:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;func getDoubler() -&amp;gt; (Int) -&amp;gt; Int {
    func doubler(number: Int) -&amp;gt; Int {
        return number * 2
    }

    return doubler
}

func main() {
    let doubler = getDoubler()
    println(&amp;quot;\(doubler(14))&amp;quot;)  // -&amp;gt; 28
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing the same in Rust is a bit harder, because—as of the 1.3 stable/1.5 nightly timeframe—it requires you to explicitly heap-allocate the function. Swift just takes care of this for you.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn get_doubler() -&amp;gt; Box&amp;lt;Fn(i32) -&amp;gt; i32&amp;gt; {
    fn doubler(number: i32) -&amp;gt; i32 {
        number * 2
    }

    Box::new(doubler)
}

fn main() {
    let doubler = get_doubler();
    println!(&amp;quot;{:}&amp;quot;, doubler(14));  // -&amp;gt; 28
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you understand what’s going on under the covers here, this makes sense: Rust normally stack-allocates a function in a scope, and therefore the &lt;code&gt;doubler&lt;/code&gt; function goes out of scope entirely when the &lt;code&gt;get_doubler&lt;/code&gt; function returns if you don’t heap-allocate it with &lt;code&gt;Box::new&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In both languages, closures and “ordinary” functions are variations on the same underlying functionality (as it should be). In Rust’s case, functions and closures both implement the &lt;code&gt;Fn&lt;/code&gt; trait. In Swift’s case, named functions are a special case of closures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Swift syntax for a closure is, well, a bit odd to my eye. The basic form is like this (with the same “doubler” functionality as above):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;{ (n: Int) -&amp;gt; Int in return n * 2 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For brevity, this can collapse down to the shorter form with types inferred from context, parentheses dropped and the &lt;code&gt;return&lt;/code&gt; keyword inferred from the fact that the closure has only a single expression (note that this wouldn’t be valid unless in a context where the type of &lt;code&gt;n&lt;/code&gt; could be inferred):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;{ n in n * 2 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The simplicity here is nice, reminiscent in a good way of closures/lambdas in other languages.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The fact that it’s a special case is less to my taste.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust’s closure syntax is fairly similar to Swift’s brief syntax. More importantly, there’s no special handling for closures’ final expressions. Remember: the final expression of &lt;em&gt;any&lt;/em&gt; block is always returned in Rust.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;|n| n * 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to fully annotate the types, as in the first Swift example, it would be like so:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;|n: i32| -&amp;gt; i32 { n * 2 }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are even &lt;em&gt;more&lt;/em&gt; differences between the two, because of Rust’s ownership notion and the associated need to think about whether a given closure is being borrowed or moved (if the latter, explicitly using the &lt;code&gt;move&lt;/code&gt; keyword).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift has the notion of shorthand argument names for use with closures.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The arguments to a closure get the default names &lt;code&gt;$0&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt;, etc. This gets you even &lt;em&gt;more&lt;/em&gt; brevity, and is quite convenient in cases where closures get used a lot (&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, etc.).&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;{ $0 * 2 }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If that weren’t enough, Swift will go so far as to simply reuse operators (which are special syntax for functions) as closures. So a closure call could simply be &lt;code&gt;+&lt;/code&gt; for a function expecting a closure operating on two numbers; Swift will infer that it needs to map back to the relevant method definition on the appropriate type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The upside to this is that the code can be incredibly brief, and—once you’re used to it, at least—still fairly clear. The downside to this is yet &lt;em&gt;more&lt;/em&gt; syntax for Swift, and the ever-growing list of things to remember and ways to write the same thing I expect will lead to quite a bit of instability as the community sorts out some expectations for what is idiomatic in any given instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And if that weren’t enough, there is more than one way to supply the body of a closure to a Swift function that expects it: you can supply a block (&lt;code&gt;{ /* closure body */ }&lt;/code&gt;) &lt;em&gt;after&lt;/em&gt; the function which expects it. Yes, this can end up looking nearly identical to the form for declaring a function:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;someFunctionExpectingAnIntegerClosure() { n * 2 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you can also drop the parentheses if that’s the only argument.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;someFunctionExpectingAnIntegerClosure { n * 2 }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In terms of the &lt;em&gt;mechanics&lt;/em&gt; of closures, and not just the syntax, the one significant difference between Rust and Swift is the same one we’ve seen in general between the two languages: Swift handles the memory issues automatically; Rust makes you be explicit about ownership. That is, as noted above about the closures themselves, in Rust you may have to &lt;code&gt;move&lt;/code&gt; ownership to get the expected behavior. Both behave basically like closures in any other language, though; nothing surprising here. Both also automatically copy values, rather than using references, whever it makes sense to do so.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift autoclosures allow for lazy evaluation, which is neat, but: &lt;em&gt;yet more syntax&lt;/em&gt;! Seriously. But I think all its other closure syntaxes &lt;em&gt;also&lt;/em&gt; allow for lazy evaluation. The only reason I can see to have the special attribute (&lt;code&gt;@autoclosure&lt;/code&gt;) here is because they added this syntax. And this syntax exists so that you can call functions which take closures as if they &lt;em&gt;don’t&lt;/em&gt; take closures, but rather the argument the closure itself takes. But of course, this leads the Swift book to include the following warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Overusing autoclosures can make your code hard to understand. The context and function name should make it clear that the evaluation is being deferred.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, care needed indeed. (Or, perhaps, you could just avoid adding more special syntax that leads to unexpected behaviors?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Good grief. I’m tired now. That’s a half-dozen variants on &lt;em&gt;closure syntax&lt;/em&gt; in Swift.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember: there’s still just one way to write and use a closure in Rust.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This takes me back to something I noticed &lt;a href="/2015/rust-and-swift-ii.html"&gt;early on&lt;/a&gt; in my analysis of the two languages. In Swift, there’s nearly always more than one way to do things. In Rust, there’s usually one way to do things. Swift prefers brevity. Rust prefers to be explicit. In other words, Swift borrows more of its philosophy from Perl; Rust more from Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m a Python guy, through and through. Perl drives me crazy every time I try to learn it. You could guess (even if you hadn’t already seen) where this lands me between Rust and Swift.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is incredibly long, but I blame that on the (frankly incredible) number of variants Swift has on the same concept.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Pattern matching and the value of expression blocks.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ix.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Sum types (&lt;code&gt;enum&lt;/code&gt;s) and more on pattern matching.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Compare the closure syntaxes especially in Ruby and ES6+.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;For a similar example in another up-and-coming language, see &lt;a href="http://elixir-lang.org/getting-started/modules.html#function-capturing"&gt;Elixir&lt;/a&gt;, which does almost exactly the same but with &lt;code&gt;&amp;amp;&lt;/code&gt; in place of &lt;code&gt;$&lt;/code&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="listicles"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Jeb Bush on net neutrality</title><link href="http://www.chriskrycho.com/2015/jeb-bush-on-net-neutrality.html" rel="alternate"></link><published>2015-09-24T07:15:00-04:00</published><updated>2015-09-24T07:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-24:/2015/jeb-bush-on-net-neutrality.html</id><summary type="html">&lt;p&gt;Dear Republicans: your &lt;a href="http://arstechnica.com/tech-policy/2015/09/if-elected-president-jeb-bush-will-get-rid-of-net-neutrality-rules/"&gt;opposition to net neutrality&lt;/a&gt; might be justifiable as something other than kowtowing to megacorporations &lt;em&gt;if you ever got around to proposing something else&lt;/em&gt;. As is, all you’re doing is propping up some of the nastiest, most anti-consumer companies in the country and sustaining monopolies and duopolies …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dear Republicans: your &lt;a href="http://arstechnica.com/tech-policy/2015/09/if-elected-president-jeb-bush-will-get-rid-of-net-neutrality-rules/"&gt;opposition to net neutrality&lt;/a&gt; might be justifiable as something other than kowtowing to megacorporations &lt;em&gt;if you ever got around to proposing something else&lt;/em&gt;. As is, all you’re doing is propping up some of the nastiest, most anti-consumer companies in the country and sustaining monopolies and duopolies, supposedly in the name of “free markets”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stop it.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;N.b. This isn’t intrinsically a partisan issue. It’s become one, but mostly because Republicans have felt compelled to do the bidding of the telecom industry for… reasons.&lt;/p&gt;
&lt;p&gt;The only thing worse than a government monopoly is a &lt;em&gt;private&lt;/em&gt; monopoly.&lt;/p&gt;
&lt;p&gt;If Republicans wanted to push for &lt;a href="https://en.wikipedia.org/wiki/Local-loop_unbundling"&gt;local loop unbundling&lt;/a&gt; in place of net neutrality, &lt;em&gt;almost everyone&lt;/em&gt; would be for it. (The exception: telecom companies.)&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Rust and Swift (vii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-vii.html" rel="alternate"></link><published>2015-09-19T15:00:00-04:00</published><updated>2015-09-20T13:42:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-19:/2015/rust-and-swift-vii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Both Rust and Swift have &lt;em&gt;pattern-matching&lt;/em&gt;, and with what appears to be fairly similar basic behavior. (I touched on this briefly in my &lt;a href="/2015/rust-and-swift-i.html"&gt;first post in the series&lt;/a&gt;.) In Rust this goes under the &lt;code&gt;match&lt;/code&gt; construct, with matches specified like &lt;code&gt;&amp;lt;pattern&amp;gt; =&amp;gt; &amp;lt;expression|statement&amp;gt;&lt;/code&gt;, optionally with guards specified with &lt;code&gt;if&lt;/code&gt; expressions. In Swift, patterns are matched using the &lt;code&gt;switch&lt;/code&gt; construct, with matches specified like &lt;code&gt;case &amp;lt;pattern&amp;gt;: &amp;lt;expression|statement&amp;gt;&lt;/code&gt;, optionally with guards specified with &lt;code&gt;where&lt;/code&gt; expressions. (&lt;code&gt;where&lt;/code&gt; is also used in Rust, but for generic constraints, not pattern match guards.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages allow you to bind names to a matched pattern: Swift with &lt;code&gt;case let &amp;lt;name&amp;gt;&lt;/code&gt; and Rust simply by using the name in a normal destructuring expression as part of the match definition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; that’s not &lt;em&gt;quite&lt;/em&gt; right. In Rust, you use the &lt;code&gt;@&lt;/code&gt; operator with the variable name you want to bind in the match.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit the second:&lt;/strong&gt; I was mixed up, because Rust actually has &lt;em&gt;both&lt;/em&gt; of those options. You can either match directly, e.g. when getting the value of an &lt;code&gt;Option&lt;/code&gt; type: &lt;code&gt;Some(value)&lt;/code&gt; as the pattern will bind &lt;code&gt;value&lt;/code&gt;. But if you need to bind a specific part of more complicated data structure, the &lt;code&gt;@&lt;/code&gt; operator is present to let you do it in a fairly straightforward way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages allow for the use of &lt;code&gt;_&lt;/code&gt; as a “wildcard” in match definitions. Since match definitions in Rust use the patterns directly, the equivalent of Swift’s C-like &lt;code&gt;default&lt;/code&gt; is simply a wildcard match pattern (&lt;code&gt;_ =&amp;gt; &amp;lt;-expression|statement&amp;gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One significant difference: like its &lt;code&gt;if&lt;/code&gt; blocks, Rust’s &lt;code&gt;match&lt;/code&gt; blocks are expressions, so they can be assigned. I.e., you can write this:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let test = 5u32;
let description = match test {
    0..10 =&amp;gt; &amp;quot;less than ten&amp;quot;,
        _ =&amp;gt; &amp;quot;greater than ten&amp;quot;,
}
println!(&amp;quot;{?:}&amp;quot;);  // &amp;quot;less than ten&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swift doesn’t let you do this; the same thing there would be written like this:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;let test: UInt32 = 5
var description: String
switch test {
    case 0..&amp;lt;10:
        description = &amp;quot;less than ten&amp;quot;
    default:
        description = &amp;quot;greater than ten&amp;quot;
}
println(&amp;quot;\(description)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages have &lt;code&gt;break&lt;/code&gt; statements, but in Rust they’re only used in loop constructs, while Swift (like C) uses them to escape &lt;code&gt;case&lt;/code&gt;s as well. The Swift book gives an example of one place they’re necessary in a &lt;code&gt;switch&lt;/code&gt;: to match a case and do nothing there (e.g. &lt;code&gt;default: break&lt;/code&gt;). In Rust, you would simply supply an empty block for that scenario (e.g. &lt;code&gt;_ =&amp;gt; {}&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Correctly, both languages force you to match exhaustively on relevant patterns. If you’re matching an enumerated type, for example, you must handle every enumerated value. You can of course do this with wildcard patterns or with Swift’s &lt;code&gt;default&lt;/code&gt;, but the good thing is that both languages will refuse even to compile if a given pattern isn’t matched.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s default behavior around its &lt;code&gt;switch&lt;/code&gt; statements is sane: it does &lt;em&gt;not&lt;/em&gt; automatically fall through into the next statement. It does let you do this, without checking the condition on the next statement (as in C), using the &lt;code&gt;fallthrough&lt;/code&gt; keyword. Rust, by contrast, simply doesn’t allow this at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages supply named control statements (loops, etc.), with slightly different syntax for naming them. Rust’s, curiously, shares its syntax with lifetime definitions—more on those in a future post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I don’t believe Rust has anything quite like Swift’s &lt;code&gt;guard&lt;/code&gt;s, which allow you to leave normal or expected control flow in the main body of a block, with a secondary block for cases where the &lt;code&gt;guard&lt;/code&gt; isn’t matched. This isn’t a huge deal, but it does fit as a nice convenience into the typical &lt;code&gt;if let&lt;/code&gt; pattern in Swift. Basically, it just lets you elide an empty &lt;code&gt;if&lt;/code&gt; block and supply only the &lt;code&gt;else&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; a friend &lt;a href="https://alpha.app.net/jws/post/64804111"&gt;points out&lt;/a&gt; that Swift &lt;code&gt;guard&lt;/code&gt;s also require you to exit the current scope, so it’s unambiguous what you’re doing if you use them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vi.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Collection types and the difference between syntax and semantics.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Functions, closures, and an awful lot of Swift syntax.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="software development"></category><category term="listicles"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (vi)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-vi.html" rel="alternate"></link><published>2015-09-19T09:00:00-04:00</published><updated>2015-09-19T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-19:/2015/rust-and-swift-vi.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It kind of feels like this summarizes a &lt;em&gt;lot&lt;/em&gt; of things about the overall design of Swift:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although the two forms are functionally identical, the shorthand form is preferred and is used throughout this guide when referring to the type of an array. —&lt;em&gt;The Swift Programming Language (Swift 2 Prerelease)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The documentation for the various types in Rust’s &lt;code&gt;std::collections&lt;/code&gt; module is hilarious and great. Highly recommended.&lt;/p&gt;
&lt;p&gt;One thing that jumped out at me reading this chapter of the Swift book (though I don’t think it’s been explicitly discussed yet): Rust doesn’t have named parameters; Swift does. There are good reasons for that in both cases, but I suspect this is one of the small details I’ll miss the most in Rust. I’ve been spoiled by Python.&lt;/p&gt;
&lt;p&gt;Swift’s &lt;code&gt;Array&lt;/code&gt; type is analogous to Rust’s &lt;code&gt;Vec&lt;/code&gt; type (usually created with the &lt;code&gt;vec!&lt;/code&gt; macro), &lt;em&gt;not&lt;/em&gt; its &lt;code&gt;Array&lt;/code&gt; type. Rust &lt;code&gt;Vec&lt;/code&gt;s and Swift &lt;code&gt;Array&lt;/code&gt;s are dynamically sized and created on the heap, whereas Rust’s &lt;code&gt;Array&lt;/code&gt;s are statically sized and created on the stack. Syntax for creating &lt;code&gt;Array&lt;/code&gt;s in both languages is quite similar (though the results are different):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swift:
&lt;ul&gt;
&lt;li&gt;Fixed size: &lt;code&gt;let an_array: [Int] = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Variable size: &lt;code&gt;var an_array = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rust:
&lt;ul&gt;
&lt;li&gt;Array: &lt;code&gt;let an_array: [i32, 3] = [1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector: &lt;code&gt;let a_vector: Vec&amp;lt;i32&amp;gt; = vec![1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s the long form, of course; both languages have type inference, so you’d rarely write it like that. The usual form would be with the type in all of those cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swift:
&lt;ul&gt;
&lt;li&gt;Fixed size: &lt;code&gt;let an_array = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Variable size: &lt;code&gt;var an_array = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rust:
&lt;ul&gt;
&lt;li&gt;Array: &lt;code&gt;let an_array = [1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector: &lt;code&gt;let a_vector = vec![1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust also adds the concept of “slices,” which provide access to segments of arrays, and are heap-allocated as pointers to a given item in the array and a length (number of elements) included.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Array&lt;/code&gt; operations in Swift are all pretty reasonable, and surprisingly descriptive. They remind me in a good way of Python’s &lt;code&gt;list&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;There are a &lt;em&gt;lot&lt;/em&gt; of &lt;a href="http://doc.rust-lang.org/stable/std/vec/struct.Vec.html"&gt;ways to interact with &lt;code&gt;Vec&lt;/code&gt;s in Rust&lt;/a&gt;. (That’s not a bad thing.) A bit surprising to me was the absence of an &lt;code&gt;enumerate&lt;/code&gt; method, on &lt;code&gt;Vec&lt;/code&gt; itself, but then I discovered that it exists in the &lt;code&gt;IntoIter&lt;/code&gt; struct in the same module, which fully implements the &lt;code&gt;Iterator&lt;/code&gt; &lt;code&gt;trait&lt;/code&gt;. As a result, it has an &lt;code&gt;enumerate&lt;/code&gt; function returning an &lt;code&gt;Enumerate&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt; instance. (Under the covers, I suspect Swift &lt;code&gt;Array&lt;/code&gt;s just implement an &lt;code&gt;Iterable&lt;/code&gt; &lt;code&gt;protocol&lt;/code&gt;, which is similar to this approach in some ways.)&lt;/p&gt;
&lt;p&gt;This makes a point I’m coming back to fairly often: Rust doesn’t necessarily put everything on a single object definition, but rather into a set of related &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt; types and &lt;code&gt;trait&lt;/code&gt;s. This is really powerful, but it’s going to take some mental adjustment. In this way, Swift’s structure and semantics are much more like the languages I’m used to than Rust’s are (but even there, the use of &lt;code&gt;protocols&lt;/code&gt; gives it considerable new flexibility).&lt;/p&gt;
&lt;p&gt;Note that I said &lt;em&gt;semantics&lt;/em&gt;, not syntax. Swift and Rust are a great example of how very similar syntax can mask differences in semantics. (For another such example, compare JavaScript’s syntax and semantics to Java’s: they’re superficially similar syntactically, and light years apart semantically.)&lt;/p&gt;
&lt;p&gt;Swift’s &lt;code&gt;Set&lt;/code&gt; type and Rust’s roughly analogous &lt;code&gt;HashSet&lt;/code&gt; both have a &lt;code&gt;contains&lt;/code&gt; method which behaves much like Python’s &lt;code&gt;in&lt;/code&gt; keyword. Indeed, and perhaps unsurprisingly, the two types implement many of the same methods in general. This is perhaps to be expected given that the language around sets (as a mathematical concept being mapped down into a representation in a program) is quite standardized.&lt;/p&gt;
&lt;p&gt;Because of their stricter typing systems, both Rust and Swift require you to specify the types used in their mapping constructs (Rust has &lt;code&gt;HashMap&lt;/code&gt; and Swift has &lt;code&gt;Dictionary&lt;/code&gt;), though of course both can infer this as well in certain cases. At the most basic level, you can’t use arbitrary (hashable) types as keys in mixed fashion like you can in e.g. Python’s &lt;code&gt;dict&lt;/code&gt; type, but in practice this shouldn’t matter, for two reasons:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It’s generally inadvisable to use different types for keys in the same dictionary anyway. To me, at least, that usually indicates the need to step back and think more carefully about the types and data structures I’m using.&lt;/li&gt;
&lt;li&gt;For the occasional case where it &lt;em&gt;is&lt;/em&gt; appropriate, I wonder if you could declare the type as generic in either Rust or Swift. I’m putting this down as a TODO item for myself to find out!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I really wish that Swift used the Python-style curly-brace delimited syntax (&lt;code&gt;{'key': 'value'}&lt;/code&gt;) for its dictionary literal initializers. I can see, from a syntax reason, why it doesn’t: that would overload the block syntax (which Python can avoid because it’s white-space delimited). But it’s &lt;em&gt;really&lt;/em&gt; convenient.&lt;/p&gt;
&lt;p&gt;Along similar lines, I can see why the Swift designers chose to make all iterables have literal initializers using braces (&lt;code&gt;[...]&lt;/code&gt;); it makes parsing fairly straightforward. However, the result is that it’s pretty difficult to see at first glance what you’re dealing with. It could quite easily be an &lt;code&gt;Array&lt;/code&gt;, a &lt;code&gt;Set&lt;/code&gt;, or a &lt;code&gt;Dictionary&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This highlights a too-little-appreciated aspect of programming language design: &lt;em&gt;readability&lt;/em&gt;. However much we programmers enjoy writing code, the reality is that we will all spend a great deal of our time—probably even a majority of it—reading it instead. Thus, while we should care about conveniences for writing code, and being overly verbose can be a pain, we should also concern ourselves with the ease of comprehending code when it is read, and the syntax and conventions a language embraces are a big part of this.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Dictionary&lt;/code&gt; type in Swift is a pretty close analog to Python’s &lt;code&gt;dict&lt;/code&gt;, right down to several of the method names. the same is true of Rust’s &lt;code&gt;HashMap&lt;/code&gt;. That’s not a bad thing by any stretch of the imagination.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-v.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; The value (and challenge) of learning languages in parallel.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Pattern matching and the value of expression blocks.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (v)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-v.html" rel="alternate"></link><published>2015-09-12T13:45:00-04:00</published><updated>2015-09-12T13:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-12:/2015/rust-and-swift-v.html</id><summary type="html">I have been learning Rust and Swift in parallel. I wouldn’t normally recommend this course of action, but I’m finding it enormously profitable. You might, too, under the right circumstances.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I’ve been working on learning Swift over the past couple weeks, and had spent the month prior to that doing a deep first dive on Rust. This kind of approach, learning two languages basically at the same time, is entirely new to me, and for good reason. Programming languages are not trivial to learn, and to learn them meaningfully one must practice with them a great deal.&lt;/p&gt;
&lt;p&gt;I’m doing this largely of necessity. I’m hoping to build an application with a very capable, performant cross-platform core language (Rust), but planning to ship a native OS X app (first) when all is said and done. My desire to make the core libraries portable rules out Swift immediately. To be frank, so does the fact that it’s an Apple language: I am happy to use Apple’s tools on its platform, but I don’t want to shackle myself to their choices in the long run. Too, having good Rust experience is likely to be valuable in many other contexts.&lt;/p&gt;
&lt;p&gt;So I need to learn both.&lt;/p&gt;
&lt;p&gt;And, while I wouldn’t ordinarily recommend this course of action—indeed, unless you already have a fair bit of programming experience and already know several languages, I’d actively recommend against it—I’m finding it enormously profitable. The languages have been designed in roughly the same time frame, cite many of the same influences, and overlap substantially in terms of audience and goals. Yet they are, as this series has already highlighted, quite different languages in many ways.&lt;/p&gt;
&lt;p&gt;Learning them in parallel is helping me see the trade-offs each one has made, and force me to think about &lt;em&gt;why&lt;/em&gt; they differ in the ways they do. In particular, I think I have a much better idea what’s going on “under the covers” in each language and therefore know what to expect of them better. This, in turn, has dramatically deepened my grasp of the languages relative to the amount I’ve been looking at them, compared to previous language-learning efforts. (It also helps that I’ve already learned a number of languages, of course, and that I’ve been pushing my brain into the learning-programming-languages space via reading about Haskell, functional patterns in JavaScript, and so on this year.)&lt;/p&gt;
&lt;p&gt;I have a long way to go in both languages, of course. Reading on nights and weekends, and the little bit of playing I’ve been able to do with each of them, is no replacement for just sinking my teeth into a project and finding the pain points. Nonetheless, I’m really glad to be learning these two languages &lt;em&gt;together&lt;/em&gt;. If you’re up for a challenge, try it sometime! You’ll be surprised how much you learn.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iv.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Language design tradeoffs, highlighted by string manipulation.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vi.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Collection types and the difference between syntax and semantics.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>If-expressions in Rust</title><link href="http://www.chriskrycho.com/2015/if-expressions-in-rust.html" rel="alternate"></link><published>2015-09-12T11:05:00-04:00</published><updated>2015-09-12T11:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-12:/2015/if-expressions-in-rust.html</id><summary type="html">&lt;p&gt;I love the fact that all &lt;code&gt;if&lt;/code&gt; statements in Rust are expressions. It gives you a great deal of expressitivity in the language.&lt;/p&gt;
&lt;p&gt;Let’s contrast with Python (which I love, for the record). In Python, you can do something like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;some_condition = True
if some_condition:
    a_value = &amp;quot;Yeah!&amp;quot;
else:
    a_value …&lt;/code&gt;&lt;/pre&gt;</summary><content type="html">&lt;p&gt;I love the fact that all &lt;code&gt;if&lt;/code&gt; statements in Rust are expressions. It gives you a great deal of expressitivity in the language.&lt;/p&gt;
&lt;p&gt;Let’s contrast with Python (which I love, for the record). In Python, you can do something like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;some_condition = True
if some_condition:
    a_value = &amp;quot;Yeah!&amp;quot;
else:
    a_value = &amp;quot;Oh, sads.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those are &lt;em&gt;statements&lt;/em&gt; in the body of the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; block; you can’t assign the block itself to &lt;code&gt;a_value&lt;/code&gt;. However, like C, C++, Java, etc., Python does provide an &lt;em&gt;expression&lt;/em&gt;-type conditional, a ternary expression.&lt;/p&gt;
&lt;p&gt;So you can also do this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;some_condition = True
a_value = &amp;quot;Yeah&amp;quot; if some_condition else &amp;quot;Oh, sads.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This expression form of the &lt;code&gt;if&lt;/code&gt; block is what all Rust &lt;code&gt;if&lt;/code&gt; blocks are. So in Rust, the normal long form is:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let some_condition = true;
let a_value = if some_condition {
    &amp;quot;Yeah!&amp;quot;
}
else {
    &amp;quot;Oh, sads.&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(You could also write this with a &lt;code&gt;let mut a_value&lt;/code&gt; and then set its value inside the conditional blocks, but that’s not at all good form in Rust.)&lt;/p&gt;
&lt;p&gt;And of course, you can shorten that rather nicely where the expressions are brief enough:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let some_condition = true;
let a_value = if some_condition { &amp;quot;Yeah!&amp;quot; } else { &amp;quot;Oh, sads.&amp;quot; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this gets really nice when you have more complicated work to do in a Rust conditional. It doesn’t matter how many things going on inside an &lt;code&gt;if&lt;/code&gt; expression; it’s still an expression. As such, you can also write this:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let some_condition = true;
let a_value = if some_condition {
    let the_answer = 42;
    let theme = &amp;quot;Take my love, take my land...&amp;quot;;
    &amp;quot;Yeah!&amp;quot;  // An expression!
}
else {
    let the_question = &amp;quot;What do you get when you multiply six by nine?&amp;quot;;
    let song = &amp;quot;You can&amp;#39;t take the sky from me!&amp;quot;;
    &amp;quot;Oh, sads.&amp;quot;  // An expression!
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously this is totally contrived and silly; the point is that no matter what the internals are, &lt;code&gt;if&lt;/code&gt; blocks are expressions, and their final expressions can be assigned like any other.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As a note: I got here because I was originally thinking you couldn’t do a one-liner like you can in Python. As shown above, that’s totally false, and in fact the Rust version is much more capable than Python’s, because you don’t need a dedicated ternary when all &lt;code&gt;if&lt;/code&gt; blocks are expressions. Rust used to have a C-style ternary (&lt;code&gt;&amp;lt;condition&amp;gt; ? &amp;lt;value if true&amp;gt; : &amp;lt;value if false&amp;gt;&lt;/code&gt;) but it was &lt;a href="https://github.com/rust-lang/rust/issues/1698"&gt;removed&lt;/a&gt; during the lead-up to the 1.0 release—a decision I wholeheartedly affirm.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note that under normal conditions the compiler won’t actually accept this because of the unused names.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="programming languages"></category><category term="rust"></category><category term="python"></category></entry><entry><title>Rust and Swift (iv)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-iv.html" rel="alternate"></link><published>2015-09-10T21:05:00-04:00</published><updated>2015-09-10T21:05:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-10:/2015/rust-and-swift-iv.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Both Swift and Rust directly address the issue of having to worry about memory allocation and safety. They do it in different ways, though: Swift by automatic reference counting, Rust by its concept of ownership. For a lot of day-to-day development, I can see the Swift approach being a win for the same reason a language like Python or Ruby is: having that all handled for you is &lt;em&gt;nice&lt;/em&gt;. Having the power Rust gives you comes at the price of increased cognitive load from having to reason about ownership.&lt;/p&gt;
&lt;p&gt;To put it another way: all programming languages have to make trade offs. Although I like Rust’s better than Swift’s so far, I’ve no doubt I will find any number of things to appreciate about Swift over Rust. You can’t have everything.&lt;/p&gt;
&lt;p&gt;This caught my attention in part because dealing with things like strings (or other pass-by-value types) in Swift is rather more straightforward than in Rust. The outcomes are much the same, but since &lt;em&gt;all&lt;/em&gt; &lt;code&gt;String&lt;/code&gt;s in Swift are passed by value (never by reference), you simply don’t have to think about modification—even safe modification!&lt;/p&gt;
&lt;p&gt;Rust of course had the &lt;code&gt;Copy&lt;/code&gt; trait which lets you do this, but the point is that the “ergonomics” are slightly nicer in Swift.&lt;/p&gt;
&lt;p&gt;Also, the string interpolation Swift does is &lt;em&gt;nice&lt;/em&gt;. That’s one thing I really wish Rust had. It’s Python-style string formatting macro is great, but being able to interpolate values (&lt;code&gt;&amp;quot;strings with \(variables)&amp;quot;&lt;/code&gt; or even &lt;code&gt;&amp;quot;embedded expressions like \(2 + 4)&amp;quot;&lt;/code&gt;) is very nice.&lt;/p&gt;
&lt;p&gt;Swift’s approach to strings in general seems well-thought-through and gives appropriate levels of attention to the details which make handling complex or non-Western languages much more manageable. As a typography geek, I appreciate this a great deal.&lt;/p&gt;
&lt;p&gt;That said, since Swift’s strings &lt;em&gt;do&lt;/em&gt; handle all those edge cases for Unicode, you lose some standard string access patterns and lose much (maybe all?) insight into the internal structure of the string. That may be good, and may be bad, depending on the circumstance. Like I said: trade-offs.&lt;/p&gt;
&lt;p&gt;Actually, on reading further, the way Swift handles Unicode strings is pretty nice. It &lt;em&gt;does&lt;/em&gt; give you insight into those, via specific methods for different representations. I particularly appreciate that it’s you deal with them as the standalone &lt;code&gt;String&lt;/code&gt; type as well as giving you direct access to the code points—and not just one Unicode code point set, but any of &lt;abbr&gt;UTF8&lt;/abbr&gt;, &lt;abbr&gt;UTF16&lt;/abbr&gt;, or &lt;abbr&gt;UTF32&lt;/abbr&gt; (Unicode scalars). Trust Apple to pay close attention to text.&lt;/p&gt;
&lt;p&gt;Rust’s strings are &lt;em&gt;good&lt;/em&gt;, but not quite as sophisticated (presumably for simplicity around the memory mapping). All Rust &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;str&lt;/code&gt; instances are composed of &lt;abbr&gt;UTF32&lt;/abbr&gt; Unicode scalars, encoded as &lt;abbr&gt;UTF8&lt;/abbr&gt; sequences. It doesn’t have some of the convenience methods Swift does for getting any of the other representations. That said, I expect this should show up rarely if at all in my ordinary usage. Importantly, the fundamental storage is the same: both use scalars.&lt;/p&gt;
&lt;p&gt;This was the first section where it didn’t feel like Rust was just a clear overall “winner” over Swift. Some of the trade offs between the language designs are more apparent here, and I do appreciate the “ergonomics” of Swift in a number of these things.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Operators, including overloading, and thoughts on brevity.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-v.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; The value (and challenge) of learning languages in parallel.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (iii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-iii.html" rel="alternate"></link><published>2015-09-07T11:55:00-04:00</published><updated>2016-03-12T23:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-07:/2015/rust-and-swift-iii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I just hit operators in the Swift book. First question: are operators special syntax, or are they sugar for &lt;code&gt;protocol&lt;/code&gt;s? (Every modern language I use or even have played with handles them as sugar for another language construct—Python, Ruby, Io, Elixir, and Rust, to name just a few ranging over a substantial variety of ages and styles.)&lt;/p&gt;
&lt;p&gt;Oh. I did the requisite digging, and operators are functions (which is okay) defined in the &lt;del&gt;global namespace (&lt;em&gt;:sigh:&lt;/em&gt;)&lt;/del&gt; Swift module.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I say “okay” rather than good because the justification offered is that this is the only way to make the operators work as binary operators between existing instances of types. But that elides the fact that, if that’s the case, it is so because of other language design decisions. This seems like a perfect place to use a &lt;code&gt;protocol&lt;/code&gt;, but perhaps (unlike Rust’s &lt;code&gt;trait&lt;/code&gt;) they’re not sufficiently capable to handle this? That’s an open question; I have no idea about the answer.&lt;/p&gt;
&lt;p&gt;Interestingly, Rust has several fewer operators than Swift, even apart from those mentioned in my &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;previous post&lt;/a&gt;. It drops the pre- and post-increment operators entirely (as does Python), since their results can always be accomplished in other ways with less potential for confusion. Swift keeps them, no doubt in part because most (Objective) C programs are deeply familiar with them and with idioms associated with them.&lt;/p&gt;
&lt;p&gt;I learned a few new things about Rust’s operators as well: the Boolean &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators and its bitwise &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; operators differ not only in that the former are &lt;em&gt;short-circuit&lt;/em&gt; operators and the latter are not. Obviously you can also do things like bit-wise flag operations with the latter, but the reference emphasizes the short-circuiting behavior. This makes perfect sense, but it wasn’t something I’d ever considered explicitly before.&lt;/p&gt;
&lt;p&gt;There is no ternary operator in Rust, because of how it handles the relationship between expressions and statements. Swift keeps it. That’s an interesting reflection of differences in design: Rust dropped it because &lt;code&gt;if&lt;/code&gt; blocks are expressions, so it’s redundant, and they have had a goal of removing unnecessary features. (See the discussion on dropping the ternary operator—with an interesting aside from Brendan Eich on JavaScript—&lt;a href="https://github.com/rust-lang/rust/issues/1698"&gt;here&lt;/a&gt;). Note that this is not a criticism of Swift, just an observation, though I do really like Rust’s expression-driven approach.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;??&lt;/code&gt; “nil coalescing operator”, on the other hand, I actively dislike. This seems like shorthand for the sake of shorthand, partly necessitated by the existing drive toward shorthand with optional types in Swift. Sometimes brevity can lead to decreased clarity. Eliding too much, or subsuming it into shorthand, makes the language harder to hold in your head and requires you to slow down more for parsing each line.&lt;/p&gt;
&lt;p&gt;Nothing surprising (or different) between the standard boolean operators in the two languages.&lt;/p&gt;
&lt;p&gt;I wonder how many times the word “concise” (or synonyms of it) appear in the Swift book? It’s increasingly clear to me reading that brevity is one of the primary design goals. Maybe it’s just me, but that actually seems a little weird. Brevity is good so far as it goes, but &lt;em&gt;legibility&lt;/em&gt; is much better.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Basic types and the syntax around them.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iv.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Language design tradeoffs, highlighted by string manipulation.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;See edit in discussion of functions and global namespace in &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;part ii&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (ii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html" rel="alternate"></link><published>2015-09-06T10:20:00-04:00</published><updated>2016-03-12T23:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-06:/2015/rust-and-swift-ii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;At first blush, I find the extra syntax around optionals in Swift more confusing than helpful. I think this comes down to my preference for a more Python-like approach: “Explicit is better than implicit” and “There should be one– and preferably only one –obvious way to do it” both militate against the multiple different ways you can handle optional values in Swift. &lt;code&gt;Optional&lt;/code&gt; types are created in one of two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with the &lt;code&gt;?&lt;/code&gt; operator on a type definition, creating an explicitly wrapped type which must be checked in some way.&lt;/li&gt;
&lt;li&gt;with the &lt;code&gt;!&lt;/code&gt; operator on a type definition, creating an “implicitly unwrapped optional” by forcibly unwrapping it (and creating a runtime error if the optional is empty)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After creating an optional, you can get at its contents by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using the &lt;code&gt;if let&lt;/code&gt; or &lt;code&gt;while let&lt;/code&gt; constructs to bind the optional value’s non-&lt;code&gt;nil&lt;/code&gt; value for a block&lt;/li&gt;
&lt;li&gt;using the &lt;code&gt;!&lt;/code&gt; operator on a variable name, explicitly unwrapping it (and creating a runtime error if the optional is empty)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By contrast, in Rust you always have to explicitly unwrap the item, using the &lt;code&gt;unwrap&lt;/code&gt; method or pattern matching. There are no implicitly unwrapped types. Moreover, there is no special syntax around creating optional types in Rust: you just declare them with an &lt;code&gt;Option&lt;/code&gt; type or another type that &lt;code&gt;impl&lt;/code&gt;s the &lt;code&gt;Option&lt;/code&gt; behavior. The “shortcut” behavior around error handling, &lt;code&gt;try!&lt;/code&gt;, isn’t special syntax, but application of another standard language construct (in this case, a macro).&lt;/p&gt;
&lt;p&gt;The discussion of &lt;code&gt;assert&lt;/code&gt; in the Swift book re-raises the question about the global namespace:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“You write an assertion by calling the global &lt;code&gt;assert(_:_:)&lt;/code&gt; function.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This continues to suggest strongly that Swift does in fact have a true global namespace, &lt;em&gt;not&lt;/em&gt; an automatically-imported prelude. That can make a big difference for applications in certain spaces (e.g. systems programming), when you might have good reason to want to replace the standard library’s approach with a different one. (See Rust’s &lt;a href="https://doc.rust-lang.org/book/no-stdlib.html"&gt;&lt;code&gt;#[no_std]&lt;/code&gt;&lt;/a&gt; docs and the &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1184-stabilize-no_std.md"&gt;related RFC&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; “strongly suggests” or no, I have now been &lt;a href="https://twitter.com/jckarter/status/708765262309228544" title="Tweet by one of the Swift developers"&gt;reliably informed&lt;/a&gt; that I was mistaken—and am happy to have been wrong here. As in Haskell, these functions are implicitly imported and belong to the &lt;code&gt;Swift&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;In Rust, &lt;code&gt;assert!&lt;/code&gt; is a macro, not a function, which is an interesting but perhaps not &lt;em&gt;especially&lt;/em&gt; important distinction in this particular case. (It might be, though; I’d have to see the implementation of each to see how they play out differently.)&lt;/p&gt;
&lt;p&gt;In any case, this also highlights another large difference between the two: testing is &lt;a href="https://doc.rust-lang.org/stable/book/testing.html"&gt;front and center&lt;/a&gt; in Rust, and barely receives a mention so far in the Swift book (and isn’t in the table of contents). Having language-level support for testing is a big deal.&lt;/p&gt;
&lt;p&gt;Language tour and first chapter of the language guide down, my sense is that Swift is a substantially better language than C or C++ (and presumably than Objective C, but since I don’t know that language I can’t speak to it) for app design, but that Rust is a better language yet. Both a far more modern than their predecessors, but they approach the same problems in surprisingly different ways, relatively similar syntax notwithstanding. So far, I like the Rust approach better.&lt;/p&gt;
&lt;p&gt;In particular, more syntax is not my preferred way to tackle these things. Providing good language constructs and primitives on which to build seems better in &lt;em&gt;many&lt;/em&gt; ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It substantially reduces the cognitive load for the developer, by keeping the number of constructs small and simply varying how they are applied.&lt;/li&gt;
&lt;li&gt;It increases the quality of those primitives, because it forces the language deadness to make sure they actually address the full problem space.&lt;/li&gt;
&lt;li&gt;It lets developers approach the same problem in ways the language design team may not have anticipated, and over time the community may find shared conventions that improve on the &lt;code&gt;std&lt;/code&gt; approach, and nothing has to change in the language spec (or the compiler!) to adopt those changes.&lt;/li&gt;
&lt;li&gt;In general, then, it makes change much easier to manage, and change can be community-driven rather than requiring the language design team to manage it.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-i.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Thoughts after reading the introduction to the Swift book.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Operators, including overloading, and thoughts on brevity.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This may of course be intentional on Apple’s part with Swift. Maintaining tight control over its tooling is very typical of modern Apple.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Rust and Swift (i)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-i.html" rel="alternate"></link><published>2015-09-04T22:59:00-04:00</published><updated>2015-09-07T13:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-04:/2015/rust-and-swift-i.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I started writing these responses in a Slack channel of developers I participate in as I worked through the &lt;a href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt; &lt;a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/"&gt;book&lt;/a&gt;. I realized after a bit that it would make a better blog post than chat room content, so here we are. This is all entirely off-the-cuff: me just thinking …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I started writing these responses in a Slack channel of developers I participate in as I worked through the &lt;a href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt; &lt;a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/"&gt;book&lt;/a&gt;. I realized after a bit that it would make a better blog post than chat room content, so here we are. This is all entirely off-the-cuff: me just thinking out loud as I read; this is by no means expert opinion.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;I later turned this into the first part of a whole &lt;a href="/rust-and-swift.html"&gt;series&lt;/a&gt; comparing Rust and Swift!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;..&amp;lt;&lt;/code&gt; – seriously?&lt;/p&gt;
&lt;p&gt;That has to be one of the most annoying operators I’ve ever seen. It ends up with cognitive noise because &lt;code&gt;&amp;lt;name&lt;/code&gt; initially processes as “starting a generic” and you have to re-parse it visually and mentally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the first chapter of the Swift book, my impression is “a poor man’s Rust”; my gut feel based on that first pass and everything I’ve seen and read about Swift over the past two years is that it’s roughly what you would get if you took Rust’s syntax and replaced Rust’s hard safety goals with the aim of mapping to ObjC semantics. (To be fair to Apple, that interoperability was probably necessary.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An example that jumps out at me as immediately illustrative of the difference in approach the languages take is the way you pass structures by reference vs. copy. In Swift, that’s done via two completely distinct language constructs, &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;class&lt;/code&gt;es respectively.&lt;/p&gt;
&lt;p&gt;In Rust, there is just the &lt;code&gt;struct&lt;/code&gt; type to handle both of those. They’re immutable unless you declare them with &lt;code&gt;mut&lt;/code&gt;, and you can pass them via copy simply by implementing the &lt;code&gt;Copy&lt;/code&gt; &lt;code&gt;trait&lt;/code&gt; (which seems roughly analogous to Swift’s &lt;code&gt;protocol&lt;/code&gt;, but I’ve not yet dig deeply enough to see how they differ). Those things aren’t baked into the language, but use simpler language building blocks to define behavior into he library.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I saw someone do a write up a while back arguing that Go isn’t a &lt;em&gt;bad&lt;/em&gt; language, it just isn’t a &lt;em&gt;good&lt;/em&gt; language. My first impression of Swift, after having spent the last month with Rust, is very much along those lines.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Huh. Here’s something that I appreciate about Rust, Haskell, and others now that I didn’t before: there’s a difference between implicitly/automatically importing a prelude or a given set of standard library functions, and having actually global functions. Does Swift actually have functions like &lt;code&gt;print&lt;/code&gt; in a global namespace, as the book seems to imply, or they being imported automatically &lt;em&gt;a la&lt;/em&gt; Rust/Haskell/etc.?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; it appears Swift does likewise, but that you can’t access the relevant module directly. Which is halfway there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hmm. Why have &lt;code&gt;Double&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;Float&lt;/code&gt;—just for ObjC interop, I guess?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; follow-up from a conversation with a friend: it’s because you have 32- and 64-bit architectures out there; sometimes you don’t want 64 bits of floating point precision for that reason. Note that Rust &lt;em&gt;also&lt;/em&gt; has this distinction; you can declare things as &lt;code&gt;f32&lt;/code&gt; or &lt;code&gt;f64&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extending the above note on &lt;code&gt;class&lt;/code&gt;es and &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;protocol&lt;/code&gt;s vs. Rust’s approach: the same thing is true about &lt;code&gt;extension&lt;/code&gt;, which is a distinct concept from implementing a &lt;code&gt;protocol&lt;/code&gt;; again, in Rust these are both just handled with a single language construct, &lt;code&gt;impl&lt;/code&gt;. That’s not because &lt;code&gt;impl&lt;/code&gt; is overloaded, but rather because the underlying language machinery is the same for the two things. (edited)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(I’ve a feeling learning Swift is going to turn me into even more of a Rust fanboy.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reading the two books in close sequence like this is proving really productive mentally for thinking about how the two handle the same issues. I’ve never done anything quite like this before, and it’s fascinating.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have an increased appreciation for Rust’s use of semi-colons to turn expressions into statements, and thereby to distinguish clearly between the two (among other things, allowing for implicit return of anything that’s an expression).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another interesting comparison: Rust’s &lt;code&gt;match&lt;/code&gt; and Swift’s &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; fill the same role of pattern matching. I’m curious to see how they differ. Does Swift do matching on arbitrary expressions?&lt;/p&gt;
&lt;p&gt;Also, I see where the syntax choices came from in both, and while I slightly prefer Rust’s, I think both make reasonably good sense; Swift’s will understandably be more familiar to C and ObjC programmers, and that’s a perfectly defensible approach. Seen that way, it is expanding on the C-style construct (even if it’s actually doing something substantially more sophisticated than that under the hood by being a form of actual pattern matching).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Basic types and the syntax around them.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="listicles"></category><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>On Editing Podcasts</title><link href="http://www.chriskrycho.com/2015/on-editing-podcasts.html" rel="alternate"></link><published>2015-08-24T20:16:00-04:00</published><updated>2015-08-28T19:51:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-24:/2015/on-editing-podcasts.html</id><summary type="html">Most podcasts are more like blog posts than magazine articles. (That doesn't mean you shouldn't edit, them, though!)
</summary><content type="html">&lt;p&gt;Last week, Alan Jacobs posted &lt;a href="http://text-patterns.thenewatlantis.com/2015/08/podcasts.html"&gt;a few thoughts&lt;/a&gt; on the overall quality of podcasts. While he’s &lt;a href="http://text-patterns.thenewatlantis.com/2015/08/podcasts-redux.html"&gt;since acknowledged&lt;/a&gt; that part of his challenge with podcasts is that his bar is extremely high, I think his original piece bears quoting and responding to briefly, including a few thoughts about how Stephen and I handle &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From his piece:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Podcasts, overall, are&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;People struggling to articulate for you stuff you could find out by looking it up on Wikipedia (e.g. In Our Time);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People using old-timey radio tricks to fool you into thinking that a boring and inconsequential story is fascinating (e.g. Serial);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People leveraging their celebrity in a given field as permission to ramble incoherently about whatever happens to come to their minds (e.g. The Talk Show); or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People using pointless audio-production tricks to make a pedestrian story seem cutting-edge (e.g. Radiolab).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I actually happen to basically agree with those critiques. However, one category he left out is: &lt;em&gt;people podcasting the way people blog&lt;/em&gt;. And this is where many of the most interesting podcasts I listen to come in. It’s also basically where Winning Slowly fits: you can think of our show like an audio version of a blog post. It’s not as carefully considered or edited as a long-form magazine piece (or, in its respective medium, a professionally produced radio show). But like blog posts, the fact that it’s a bit more off the cuff and that it’s &lt;em&gt;not&lt;/em&gt; the incredibly tight work that you find in a magazine can actually be attractive at times. Many of my favorite podcasts are very conversational and not heavily produced.&lt;/p&gt;
&lt;p&gt;But—and here I think Jacobs is absolutely correct—all of the shows I really enjoy make a point to edit their shows. They clean up the audio from artifacts, they cut segments that were off topic, they make sure the levels are good between the different members of the podcast, and so on. And while you don’t have to do those things to have a podcast, any more than you need to edit the things you write to have a blog, you do need to do them if you want to have a &lt;em&gt;good&lt;/em&gt; show. Sadly, this is where a number of shows I otherwise might enjoy show themselves to the door.&lt;/p&gt;
&lt;p&gt;There is a reason Stephen and I spent a whole &lt;a href="http://www.winningslowly.org/season-0.html"&gt;“beta” season&lt;/a&gt; of &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; working not only on what we wanted the show to be about, but finding its voice and tone, the structure of the episodes, and the quality of our audio. We wrestled with the audio output from mediocre microphones and adopted seemingly silly practices like putting blankets over our heads and microphones and laptops while recording so that we can get better sound spaces. We have taken the time to learn about compression and limiting and other audio editing techniques, and work hard to get the mix between our intro and outro music and our own voices correct. And we cut things mercilessly.&lt;/p&gt;
&lt;p&gt;For example, here is the blooper reel from &lt;a href="http://www.winningslowly.org/3.05/"&gt;3.05&lt;/a&gt;, which consists of only the &lt;em&gt;funny&lt;/em&gt; parts of what I cut from the show (there was probably as much again that I just removed and didn’t include):&lt;/p&gt;
&lt;audio class="media-embed" title="3.05 Bloopers" controls preload="metadata"&gt;
&lt;source src="http://www.podtrac.com/pts/redirect.m4a/cdn.winningslowly.org/3.05-bloopers.m4a"&gt;
&lt;source src="http://www.podtrac.com/pts/redirect.mp3/cdn.winningslowly.org/3.05-bloopers.mp3"&gt;
&lt;/audio&gt;
&lt;p&gt;That doesn’t begin to touch all the “umms” and long pauses and overly heavy breathing and do-overs we cut out (though, because this was a particularly rough episode, it does give you an idea). The result, as I think most of our listeners would agree, is a show that’s pretty tight as far as the audio goes.&lt;/p&gt;
&lt;p&gt;In terms of content, different shows will have a different feel, of course. Some will require more planning. &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt;, a new show on learning Rust I’m hoping to launch later this week or early next week, requires a &lt;em&gt;lot&lt;/em&gt; of planning. &lt;a href="http://www.sap-py.com/"&gt;Sap.py&lt;/a&gt;, the fun little show my wife and I are about to launch, about her adventures in learning Python, requires basically &lt;em&gt;no&lt;/em&gt; planning. Winning Slowly doesn’t require a lot of formal planning, but it does require Stephen and me to keep a good eye on ongoing stories in our fields of technology, religion, ethics, and art, and to discuss big-picture ideas regularly and actively. Some episodes, we outline carefully (like the one we recorded today, which will come out next Tuesday). For others, we can basically just wing it (like the one we recorded a week ago and which comes out tomorrow). But if our podcast is good, and I really do think it is, it is because we take the time to work at making it good. Just like you have to do on a blog, or really anything else in life.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;13 published episodes, and one we dropped entirely!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;One big difference between a podcast and a blog is that it actually takes a lot &lt;em&gt;more&lt;/em&gt; work to make a good podcast than a good blog post. Audio editing is much more involved than editing writing, and speaking intelligently for any length of time—whether off the cuff, with a detailed outline, or as an interviewer—is much harder to get right than writing, where you can polish to your heart’s content.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="podcasting"></category></entry><entry><title>High- and Low-Level Programming Languages</title><link href="http://www.chriskrycho.com/2015/high-and-low-level-programming-languages.html" rel="alternate"></link><published>2015-08-07T20:00:00-04:00</published><updated>2015-08-07T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-07:/2015/high-and-low-level-programming-languages.html</id><summary type="html">&lt;p&gt;It occurred to me while listening to &lt;a href="https://edwinb.wordpress.com"&gt;Edwin Brady&lt;/a&gt; talk about &lt;a href="http://www.idris-lang.org"&gt;Idris&lt;/a&gt; on the &lt;a href="http://typetheorypodcast.com"&gt;Type Theory Podcast&lt;/a&gt;,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; having just spent a few weeks starting to learn &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;: “low-level” has at least two meanings in software. One is whether something has manual memory management or is garbage collected, reference counted …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It occurred to me while listening to &lt;a href="https://edwinb.wordpress.com"&gt;Edwin Brady&lt;/a&gt; talk about &lt;a href="http://www.idris-lang.org"&gt;Idris&lt;/a&gt; on the &lt;a href="http://typetheorypodcast.com"&gt;Type Theory Podcast&lt;/a&gt;,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; having just spent a few weeks starting to learn &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;: “low-level” has at least two meanings in software. One is whether something has manual memory management or is garbage collected, reference counted, or otherwise manages memory itself. This is what people often mean when they talk about C, C++, etc. as being “low-level” and languages like Python or Ruby or C♯ being high-level.&lt;/p&gt;
&lt;p&gt;But then you toss in a language like &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;, and things start to get a little more complicated. Rust can do the same kind of direct memory management that makes C or C++ a good language for things like writing operating system kernels. [&lt;a href="https://github.com/torvalds/linux"&gt;1&lt;/a&gt;,&lt;a href="https://en.wikipedia.org/wiki/Architecture_of_Windows_NT"&gt;2&lt;/a&gt;,&lt;a href="http://www.opensource.apple.com/source/xnu/xnu-2782.10.72/"&gt;3&lt;/a&gt;] But it is also memory-safe, at least in ordinary usage. Like C♯, you have to be explicit about any unsafe code, with the &lt;code&gt;unsafe&lt;/code&gt; keyword on any blocks that do memory management that isn’t safe. And the vast majority of Rust code &lt;em&gt;is&lt;/em&gt; safe.&lt;/p&gt;
&lt;p&gt;More than that, though, Rust &lt;em&gt;feels&lt;/em&gt; like a high-level language. It gives you higher-kinded functions, generics, traits-based composition of types, hygienic macros, and the implementation of many important parts the essentials of the language in the library. If you need to patch something, or extend something, you can do that in a straightforward way. In short, it gives you lots of good abstractions like you would expect in a high-level language.&lt;/p&gt;
&lt;p&gt;Rust is low-level in that you can write (and people are writing) systems-level programs in it. It is high-level in that it lets you express things in ways normally associated with languages like Haskell or OCaml or Python or Ruby. To put it simply: it’s &lt;em&gt;low-level&lt;/em&gt; in its ability to address the computer, and &lt;em&gt;high-level&lt;/em&gt; in the abstractions it hands to a programmer. That’s a powerful combination, and I hope more languages embrace it in the years to come.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, I know that’s insanely nerdy. What did you expect?&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="python"></category><category term="ruby"></category><category term="c"></category><category term="cplusplus"></category></entry><entry><title>Reeder 3 for Mac Beta</title><link href="http://www.chriskrycho.com/2015/reeder-3-for-mac-beta.html" rel="alternate"></link><published>2015-07-30T09:26:00-04:00</published><updated>2015-07-30T09:26:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-30:/2015/reeder-3-for-mac-beta.html</id><summary type="html">&lt;p&gt;Ooh, look! A beta for &lt;a href="http://reederapp.com/beta3/"&gt;Reeder 3&lt;/a&gt;! Shiny!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Ooh, look! A beta for &lt;a href="http://reederapp.com/beta3/"&gt;Reeder 3&lt;/a&gt;! Shiny!&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>SMuFL and MusicXML to W3C</title><link href="http://www.chriskrycho.com/2015/smufl-and-musicxml-to-w3c.html" rel="alternate"></link><published>2015-07-28T12:29:00-04:00</published><updated>2015-07-28T12:29:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-28:/2015/smufl-and-musicxml-to-w3c.html</id><summary type="html">&lt;p&gt;Another one in the music industry—but in this case, companies taking the long view and advancing the &lt;a href="http://www.sibeliusblog.com/news/makemusic-and-steinberg-transfer-development-of-musicxml-and-smufl-to-web-community-group/"&gt;good of the whole community&lt;/a&gt;, rather than just their own bottom line. (Spreadbury, the guy behind SMuFL, was one of the team laid off in the &lt;a href="%7Bfilename%7Dsibelius-8.md"&gt;aforementioned&lt;/a&gt; layoff from the Sibelius team …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another one in the music industry—but in this case, companies taking the long view and advancing the &lt;a href="http://www.sibeliusblog.com/news/makemusic-and-steinberg-transfer-development-of-musicxml-and-smufl-to-web-community-group/"&gt;good of the whole community&lt;/a&gt;, rather than just their own bottom line. (Spreadbury, the guy behind SMuFL, was one of the team laid off in the &lt;a href="%7Bfilename%7Dsibelius-8.md"&gt;aforementioned&lt;/a&gt; layoff from the Sibelius team, and now heads the product development for a new notation software tool from Steinberg.)&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Sibelius 8</title><link href="http://www.chriskrycho.com/2015/sibelius-8.html" rel="alternate"></link><published>2015-07-28T12:25:00-04:00</published><updated>2015-07-28T12:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-28:/2015/sibelius-8.html</id><summary type="html">&lt;p&gt;Avid: &lt;a href="http://www.sibeliusblog.com/news/sibelius-8-is-here/"&gt;charging Sibelius users more money than ever for less value than ever&lt;/a&gt;, after laying off their dev team a couple years ago just to maximize profits.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly​&lt;/a&gt; material here, folks. They lost me (and many other) customers along the way, and they’re headed further …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Avid: &lt;a href="http://www.sibeliusblog.com/news/sibelius-8-is-here/"&gt;charging Sibelius users more money than ever for less value than ever&lt;/a&gt;, after laying off their dev team a couple years ago just to maximize profits.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly​&lt;/a&gt; material here, folks. They lost me (and many other) customers along the way, and they’re headed further down that road here.&lt;/p&gt;
&lt;p&gt;Subscription models for software can be valuable and reasonable—but the providers have to justify them with product to match. Avid isn’t, and hasn’t been. I’ve no doubt they’re continuing to profit in the short term, but this will no doubt erode their market position and waste an amazing product in the long term. Greed destroys good things.&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Academic Markdown and Citations</title><link href="http://www.chriskrycho.com/2015/academic-markdown-and-citations.html" rel="alternate"></link><published>2015-07-26T13:50:00-04:00</published><updated>2015-07-26T20:07:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-26:/2015/academic-markdown-and-citations.html</id><summary type="html">Managing citations is painful—especially in plain text. But with a little setup, Pandoc and BibTEX can take a lot of the pain out of it, whether for Word documents or a static site generator.
</summary><content type="html">&lt;p&gt;Much of my past few weeks were taken up with study for and writing and editing &lt;a href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.html"&gt;a paper&lt;/a&gt; for one of my classes at Southeastern. I’ve been writing all of my papers in Markdown ever since I got here, and haven’t regretted any part of that… except that managing references and footnotes has been painful at times.&lt;/p&gt;
&lt;p&gt;Footnotes in Markdown look like this:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Here is some text.[^fn]

[^fn]: And the footnote!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This poses no problems at all for normal footnotes. Academic writing introduces a few wrinkles, though, which means that this has always been the main pain point of my use of Markdown for writing papers.&lt;/p&gt;
&lt;p&gt;Many academic citation styles (including the Chicago Manual of Style, on which our seminary’s &lt;a href="http://www.press.uchicago.edu/books/turabian/turabian_citationguide.html"&gt;style guide&lt;/a&gt; is based) tend to have a long version of the footnote appear first, followed by short versions later. Nearly &lt;em&gt;all&lt;/em&gt; academic citations styles make free use of the &lt;a href="https://en.wikipedia.org/wiki/Ibid."&gt;“ibid.”&lt;/a&gt; abbreviation for repeated references to save space, time, and energy. Here is how that might look in manually-written footnotes, citing the very paper in which I sorted this all out:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Some text in which I cite an author.[^fn1]

More text. Another citation.[^fn2]

What is this? Yet _another_ citation?[^fn3]

[^fn1]: So Chris Krycho, &amp;quot;Not Exactly a Millennium,&amp;quot; chriskrycho.com, July 22,

2015, http://www.chriskrycho.com/2015/not-exactly-a-millennium.html
(accessed July 25, 2015), ¶6.
[^fn2]: Contra Krycho, ¶15, who has everything _quite_ wrong.
[^fn3]: ibid.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This seems straightforward enough, though it is a bit of work to get the format right for each different kind of citation (articles, books, ebooks, electronic references to articles…). Things &lt;em&gt;really&lt;/em&gt; get complicated in the editing process, though. For example, what if I needed to flip the order of some of these notes because it became clear that the paragraphs needed to move around? This happens &lt;em&gt;frequently&lt;/em&gt; during the editorial process. It becomes particularly painful when dealing with the “ibid.”-type references, because if I insert a new reference between two existing references, I have to go back in and manually add all that the reference content again myself.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enter Pandoc and &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;.&lt;/p&gt;
&lt;section id="managing-citations" class="level2"&gt;
&lt;h2&gt;Managing Citations&lt;/h2&gt;
&lt;p&gt;The idea of plain-text solutions to academic writing is not especially new; only the application of Markdown to it is—and that, only relatively. People have been doing this, and &lt;a href="http://kieranhealy.org/blog/archives/2014/01/23/plain-text/"&gt;documenting their approaches&lt;/a&gt;, for quite a while. Moreover, tools for managing references and citations have existed for quite some time as well; the entire &lt;a href="http://www.latex-project.org"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/a&gt; toolchain is largely driven by the concerns of academic publishing, and as such there are tools in the &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; ecosystem which address many of these problems.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One such is &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;, and the later (more capable) &lt;span class="tex"&gt;BibL&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;: tools for managing bibliographies in &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; documents. The &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;/&lt;span class="tex"&gt;BibL&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; approach to managing citations in a document is the use of the &lt;code&gt;\cite&lt;/code&gt; command, with the use of “keys” which map to specific documents: &lt;code&gt;\cite{krycho:2015aa}&lt;/code&gt;, for example.&lt;/p&gt;
&lt;p&gt;This is not Markdown, of course. But other folks who have an interest in Markdown and academic writing have put their minds to the problem already. Folks such as Jon MacFarlane, the originator and lead developer of &lt;a href="http://pandoc.org"&gt;Pandoc&lt;/a&gt;, perhaps the single most capable text-conversion tool in existence. As it turns out, Pandoc Markdown supports a &lt;a href="http://pandoc.org/README.html#citations"&gt;citation extension&lt;/a&gt; to the basic markup. It’s just a variant on the &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; citation style that feels more at home in Markdown: a pair of braces and an &lt;code&gt;@&lt;/code&gt;, plus the citation key, like &lt;code&gt;[@krycho]&lt;/code&gt;. Moreover, Pandoc knows how to use &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; libraries, as well as many others, and &lt;a href="http://citationstyles.org"&gt;Citation Style Languages&lt;/a&gt; (&lt;abbr&gt;CSL&lt;/abbr&gt;s) to generate markup in &lt;em&gt;exactly&lt;/em&gt; the format needed for any given citation style.[^citeproc]&lt;/p&gt;
&lt;p&gt;Instead of writing out all those citations details by hand, then, I can just format my footnotes like this (assuming the citekey I had set up for the article was &lt;code&gt;krycho:revelation:2015&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Some text in which I cite an author.[^fn1]

More text. Another citation.[^fn2]

What is this? Yet _another_ citation?[^fn3]

[^fn1]: [@krycho:revelation:2015], ¶6.
[^fn2]: Contra [@krycho:revelation:2015], ¶15, who has everything _quite_ wrong.
[^fn3]: [@krycho:revelation:2015].&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is much simpler and, importantly, has the exact same form for each citation. Pandoc will take care of making sure that the first reference is in the long form, later references are in the short form, and repeated references are in the “ibid.” form as appropriate. It even renders a properly sorted and structured Works Cited section.[^styleset]&lt;/p&gt;
&lt;p&gt;The slightly complex command I used to generate a Word document from a Markdown file with citations (using my own &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; library and the Chicago Manual of Style &lt;abbr&gt;CSL&lt;/abbr&gt;) on the command line is:[^template]&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;$ pandoc revelation.md --smart --standalone \
--bibliography /Users/chris/icloud-drive/Documents/writing/library.bib \
--csl=/Users/chris/icloud-drive/Documents/writing/chicago.csl -o revelation.docx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see an extended sample of this kind of usage in practice, take a look at the &lt;a href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.txt"&gt;Markdown source&lt;/a&gt; for the paper I wrote last week, using exactly this approach. Every footnote that references a specific source simply has a cite key of this variety. The header metadata includes a path to the bibliography file and a &lt;abbr&gt;CSL&lt;/abbr&gt;. (These could be configured globally, as well, but I chose to specify them on a per-file basis so that if I want or need to use &lt;em&gt;different&lt;/em&gt; styles or a separate library for another file at a later time, I can do so with a minimum of fuss. More on this below.)&lt;/p&gt;
&lt;p&gt;&lt;a href="/downloads/revelation.docx"&gt;Here&lt;/a&gt; is the rendered result. You can see that it automatically generated everything right down to the “ibid.”-style footnotes. I made a few, fairly minimal tweaks (replacing the search &lt;abbr&gt;URL&lt;/abbr&gt; with an &lt;abbr&gt;ATLA&lt;/abbr&gt; database catalog reference and inserting a section break before the Works Cited list), and turned the paper in—confident, for the first time since I started seminary, that all of the references were in the right order and the right format. With carefully formatted reference documents (with their own style sets),[^reference] I was able to generate an actually &lt;em&gt;nice&lt;/em&gt; &lt;abbr&gt;&lt;a href="/downloads/revelation-pretty.pdf"&gt;PDF&lt;/a&gt;&lt;/abbr&gt; version of the paper from another Word document, as well.[^pdf]&lt;/p&gt;
&lt;p&gt;And, better yet, you don’t even have to put citations in footnotes. As &lt;a href="https://twitter.com/anjdunning"&gt;@anjdunning&lt;/a&gt; pointed out in a &lt;a href="https://twitter.com/anjdunning/status/625415216575197184"&gt;tweet&lt;/a&gt; response to the original version of this post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.twitter.com/chriskrycho"&gt;@chriskrycho&lt;/a&gt; Don’t put citekeys in a footnote: write everything as inline citations and it will also generate notes when asked by CSL def. &lt;a href="https://twitter.com/anjdunning/status/625415216575197184"&gt;∞&lt;/a&gt; July 26, 2015 17:19&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my standard example from above, then, you could simply do this:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Some text in which I cite an author.[@krycho:revelation:2015, ¶6]

More text. Another citation.[Contra @krycho:revelation:2015, ¶15, who has
everything *quite* wrong.]

What is this? Yet _another_ citation?[@krycho:revelation:2015]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will generate the same markup for my purposes here; and as &lt;a href="https://twitter.com/anjdunning"&gt;@anjdunning&lt;/a&gt; noted, it goes one step further and does what’s appropriate for the &lt;abbr&gt;CSL&lt;/abbr&gt;. This might be handy if, for example, you wanted to use the Chicago notes-bibliography style in one format, but switch to a simpler parenthetical citation style for a different medium—or even if you had a paper to submit to different journals with different standards. Having the citations inline thus has many advantages.&lt;/p&gt;
&lt;p&gt;Now, there are still times when you might want to split those out into distinct footnotes, of course. That second one is a good candidate, at least for the way I tend to structure my plain-text source. I find it useful in the case of &lt;em&gt;actual&lt;/em&gt; footnote content—i.e. text that I’m intentionally leaving aside from the main text, even with reference to other authors—to split it out from the main flow of the paragraph, so that someone reading the plain text source gets a similar effect to someone reading the web or Word or &lt;abbr&gt;PDF&lt;/abbr&gt; versions, with the text removed from the flow of thought. In any case, it’s quite nice that Pandoc has the power and flexibility such that you don’t &lt;em&gt;have&lt;/em&gt; to.&lt;/p&gt;
&lt;p&gt;Finally, you don’t actually &lt;em&gt;need&lt;/em&gt; the brackets around the citekey, depending on how you’re using the reference. If you wanted to cite the relevant author inline, you can—and it will properly display both the inline name and a reference (footnote, parenthetical, etc.) in line with the &lt;abbr&gt;CSL&lt;/abbr&gt; you’ve chosen. If I were going to quote myself in a paper, I would do something like this:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;As @krycho:revelation:2015 comments:

&amp;gt; This was a hard paper to write.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is &lt;em&gt;extremely&lt;/em&gt; powerful, and while I didn’t take advantage of it in my first paper using these tools, you can bet I will be in every future paper I write.&lt;/p&gt;
&lt;section id="all-those-references" class="level3"&gt;
&lt;h3&gt;All those references&lt;/h3&gt;
&lt;p&gt;Of course, as is probably apparent, managing a &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; library by hand is no joke. Entries tend to look like this:&lt;/p&gt;
&lt;pre class="tex"&gt;&lt;code&gt;@book{beale:revelation:2015,
        Date-Added = {2015-07-20 21:16:02 +0000},
        Date-Modified = {2015-07-20 21:21:05 +0000},
        Editor = {G. K. Beale and David H. Campbell},
        Publisher = {William B. Eerdmans Publishing Company},
        Title = {Revelation: A Shorter Commentary},
        Year = {2015}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While there is a lot of utility in having that data available in text, on disk, no one wants to &lt;em&gt;edit&lt;/em&gt; that by hand.[^noone] Gladly, editing it by hand is not necessary. For this project, I used the freely available &lt;a href="http://bibdesk.sourceforge.net"&gt;BibDesk&lt;/a&gt; tool, which is a workable (albeit not very pretty and not &lt;em&gt;very&lt;/em&gt; capable) manager for &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/images/bibdesk.png" title="Not very pretty, but it does work" alt="BibDesk – open to the library for my Revelation paper" /&gt;&lt;figcaption&gt;BibDesk – open to the library for my Revelation paper&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once I filled in the details for each item and set a citekey for it, I was ready to go: BibDesk just stores the files in a standard &lt;code&gt;.bib&lt;/code&gt; file on the disk, which I specified per the Pandoc command above.&lt;/p&gt;
&lt;p&gt;BibDesk gets the job done alright, but only alright. Using a citation and reference management tool was a big win, though, and I fully intend to use one for every remaining project while in seminary—and, quite possibly, for other projects as well. Whether that tool is BibDesk or something else is a different matter entirely. (More on this below.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="to-the-web" class="level2"&gt;
&lt;h2&gt;To the web!&lt;/h2&gt;
&lt;p&gt;I wanted something more out of this process, if I could get it. One of the reasons I use plain text as a source is because from it, I can generate Word documents, &lt;abbr&gt;PDF&lt;/abbr&gt;s, and &lt;em&gt;this website&lt;/em&gt; with equal ease. However, Python Markdown knows nothing of &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; or citekeys, to my knowledge—and since I render everything for school with Pandoc, I have long wanted to configure &lt;a href="http://docs.getpelican.com/en/3.6.0/"&gt;Pelican&lt;/a&gt; to use Pandoc as its Markdown engine instead of Python Markdown anyway.&lt;/p&gt;
&lt;p&gt;As it happens, I actually set this up about a month ago. The process was pretty simple:[^pelicanconf]&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I installed the &lt;a href="https://github.com/jstvz/pelican-pandoc-reader"&gt;pandoc-reader&lt;/a&gt; Pelican extension.&lt;/li&gt;
&lt;li&gt;I set the plugin path in my Pelican configuration file.&lt;/li&gt;
&lt;li&gt;I specified the arguments to Pelican I wanted to use.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The only additional tweaks necessary to get citation support were calling it with the &lt;code&gt;'--filter pandoc-citeproc'&lt;/code&gt; arguments, which lets it process any bibliography data supplied in the header metadata for the files. Calling Pandoc with &lt;code&gt;--bibliography &amp;lt;path to bibliography&amp;gt;&lt;/code&gt; (as in my example above) is a &lt;a href="http://pandoc.org/README.html#citation-rendering"&gt;shortcut&lt;/a&gt; for calling it with &lt;code&gt;--metadata &amp;lt;path to bibliography&amp;gt;&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;--filter pandoc-citeproc&lt;/code&gt; arguments. I could just supply the bibliography directly in the call from Pelican, but this would limit me to using a single bibliography file for &lt;em&gt;all&lt;/em&gt; of my posts—something I’d rather not limit myself to, since it might make sense to build up bibliographies around specific subjects, or even to have smaller bibliographies associated with each project (exported from the main bibliography), which could then be freely available along with the contents of the paper itself.[^smarter] (On this idea, see a bit more below under &lt;strong&gt;The Future&lt;/strong&gt;.)&lt;/p&gt;
&lt;p&gt;One word of warning: Pandoc is much slower to generate &lt;abbr&gt;HTML&lt;/abbr&gt; with &lt;code&gt;--filter pandoc-citeproc&lt;/code&gt; than &lt;em&gt;without&lt;/em&gt; the filter, and the larger your site, the more you will feel this. (The time to generate the site from scratch jumped from about 10s to about 30s for me, with 270 articles, 17 drafts, 2 pages, and 1 hidden page, according to Pelican.) Pandoc has to process &lt;em&gt;every&lt;/em&gt; article to check for citations, and that’s no small task. However, if you have Pelican’s content caching turned on, this is a one-time event. After that, it will only be processing any new content with it; total generation time is back down where it was before for me: the effort is all in generating the large indexes I use to display the content for the landing pages and for category and tag archives.&lt;/p&gt;
&lt;p&gt;And the result: that same paper, rendered to &lt;abbr&gt;HTML&lt;/abbr&gt; &lt;a href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.html"&gt;on my website&lt;/a&gt;, with citations and works cited, generated automatically and beautifully.&lt;/p&gt;
&lt;section id="other-site-generators" class="level3"&gt;
&lt;h3&gt;Other site generators&lt;/h3&gt;
&lt;p&gt;I don’t know the situation around using Pandoc itself in other generators, including Jekyll—I simply haven’t looked. I do know, however, that there &lt;em&gt;is&lt;/em&gt; some tooling for Jekyll specifically to allow a similar workflow. If you’re using Jekyll, it looks like your best bet is to check out &lt;a href="https://github.com/inukshuk/jekyll-scholar"&gt;jekyll-scholar&lt;/a&gt; and the &lt;a href="https://github.com/inukshuk/citeproc-ruby"&gt;citeproc-ruby&lt;/a&gt; project, which (like pandoc-citeproc) enables you to embed citations and filter them through &lt;abbr&gt;CSL&lt;/abbr&gt;s to generate references automatically. As a note: you should definitely be able to get those working on your own deployment sites, but I have no idea whether it’s possible to do them with the GitHub Pages variant of Jekyll. (If anyone who reads this knows the answer to that, let me know on Twitter or App.net, and I’ll update the post accordingly.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-future" class="level2"&gt;
&lt;h2&gt;The future&lt;/h2&gt;
&lt;p&gt;In addition to continuing to use &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; with BibDesk as a way of managing my citations in the short term, I’m thinking about other ways to improve this workflow. One possibility is integrating with &lt;a href="http://scholdoc.scholarlymarkdown.com"&gt;Scholdoc&lt;/a&gt; as it matures, instead of &lt;a href="http://pandoc.org"&gt;pandoc&lt;/a&gt;, and maybe (hopefully, albeit unlikely) even contributing to it somewhat. I’m also open to using other citation library tools, though my early explorations with Mendeley and Zotero did not particularly impress me.&lt;/p&gt;
&lt;p&gt;There are substantial advantages for the applications (and thus for most users) to maintaining the data in an application-specific format (e.g. an SQLite database) rather than on the file system—but the latter has the advantage of making it much easier to integrate with other tools. However, Zotero and Mendeley both natively export to &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; format, and Mendeley natively supports &lt;a href="http://blog.mendeley.com/tipstricks/howto-use-mendeley-to-create-citations-using-latex-and-bibtex/"&gt;sync&lt;/a&gt; to a &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; library (Zotero can do the same, but via third-party &lt;a href="https://zoteromusings.wordpress.com/tag/bibtex/"&gt;plugins&lt;/a&gt;), so those remain viable options, which I may use for future projects.&lt;/p&gt;
&lt;p&gt;I also want to look at making my library of resources available publicly, perhaps (a) as a standalone library associated with each project, so that anyone who wants to can download it along with the Markdown source to play with as an example and (b) as a general library covering my various reading and research interests, which will certainly be irrelevant to most people but might nonetheless provide some value to someone along the way. I’m a big fan of making this kind of data open wherever possible, because people come up with neat things to do with it that the original creators never expect. Not &lt;em&gt;everything&lt;/em&gt; should be open—but lots of things should, and this might be among them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I’m pretty happy with the current state of affairs, the aforementioned interest in other reference managers notwithstanding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can set up the citations &lt;em&gt;once&lt;/em&gt;, in a tool designed to manage references, instead of multiple times in multiple places.&lt;/li&gt;
&lt;li&gt;I can use Pandoc and a &lt;abbr&gt;CSL&lt;/abbr&gt; to get the citations formatted correctly throughout a paper, including generating the bibliography automatically.&lt;/li&gt;
&lt;li&gt;I can use the same tooling, integrated into my static site generator, to build a web version of the content—with no extra effort, once I configured it properly the first time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps most importantly, this helps me meet one of my major goals for all my writing: to have a single canonical &lt;em&gt;source&lt;/em&gt; for the content, which I will be able to access in the future regardless of what operating system I am using or what publishing systems come and go. Simple plain text files—Markdown—get me there. Now I’ve put good tools around that process, and I love it even more.&lt;/p&gt;
&lt;p&gt;general for long documents. If you try to name them manually, like I do for posts on my website, you will very quickly end up wasting time on the names. If you try to number them, they will end up out of order in a hurry. My own &lt;a href="http://2012-2013.chriskrycho.com/web/markdown-and-academic-writing/"&gt;previous solution&lt;/a&gt; to this problem quickly became unwieldy for larger papers, and required a &lt;em&gt;lot&lt;/em&gt; of hand-editing. Gladly, I no longer deal with that manually. Instead, I do all my drafting in &lt;a href="http://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt;, where you just type &lt;code&gt;(fn)&lt;/code&gt; and it creates a footnote automatically, and will move that footnote &lt;em&gt;object&lt;/em&gt; around transparently as you edit, handling all the number-setting, etc. on its own.&lt;/p&gt;
&lt;p&gt;typesetting system&amp;quot; and looks like &lt;a href="http://www.latex-project.org"&gt;&lt;em&gt;this&lt;/em&gt;&lt;/a&gt; is not lost on me… [^citeproc]: If you used the installers on Pandoc’s website, &lt;code&gt;pandoc-citeproc&lt;/code&gt; comes with it. If you installed it via a package manager (e.g. by running &lt;code&gt;brew install pandoc&lt;/code&gt;), it may not have, so you’ll need to install it manually yourself (e.g. &lt;code&gt;brew install pandoc-citeproc&lt;/code&gt;). [^styleset]: All of the content, including the rendered footnotes and the bibliography, has sensible content types set on it: headers are headers, body text is body text, etc. You can then customize to match the specifications of your style guide. I have a Chicago/Turabian style set set up with the formatting rules to match. [^template]: Actually, it was even hairier than this, because I also had a &lt;code&gt;--reference-docx path/to/template.docx&lt;/code&gt; specified. If you think it’s perhaps a bit too complex, well, I agree. I plan to turn that into a command line alias in pretty short order, because remembering it every time is just not going to happen. [^reference]: Using the &lt;code&gt;--reference-docx&lt;/code&gt; argument to Pandoc, you can hand it a document that already uses your desired style set, so you don’t have to go in and apply it manually. [^pdf]: I could have done that with Pandoc’s &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; &lt;abbr&gt;PDF&lt;/abbr&gt; tools, as well, but didn’t really feel like taking the time to tweak the &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; template for it. [^noone]: Probably someone does, but not me, and not most people! [^pelicanconf]: If you’re using Pelican, you can take a look at my Pelican configuration file &lt;a href="https://github.com/chriskrycho/chriskrycho.com/blob/ef3ecbca1765750392086355aeae026c1159d4b9/pelicanconf.py#L109"&gt;here&lt;/a&gt; to see the full configuration for using Pandoc this way. [^smarter]: Optimally, I’d really just prefer to be able to set &lt;em&gt;all&lt;/em&gt; of these arguments at a per-file level—i.e., not use &lt;code&gt;--filter pandoc cite-proc&lt;/code&gt; unless the file actually specifies a bibliography. And I could hack Pelican to do that; I’ve actually already &lt;a href="https://github.com/liob/pandoc_reader/pull/5"&gt;messed around&lt;/a&gt; with other, semi-related bits regarding Pelican and Pandoc’s shared handling of &lt;abbr&gt;YAML&lt;/abbr&gt; metadata. But I’d prefer to keep my installation as “vanilla” as possible to minimize the cost of setting things up again on a new machine or after a crash, etc.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Coming up with names for footnotes in Markdown can be painful in&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;The irony of site for software which boasts that it is &amp;quot;a high-quality&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="workflow"></category><category term="writing"></category></entry><entry><title>HTML5 Location, &lt;base&gt;, and SVG</title><link href="http://www.chriskrycho.com/2015/html5-location-base-and-svg.html" rel="alternate"></link><published>2015-06-20T10:30:00-04:00</published><updated>2015-07-02T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-20:/2015/html5-location-base-and-svg.html</id><summary type="html">Angular requires &lt;code&gt;&lt;base&gt;&lt;/code&gt; if you want to use HTML5's &lt;code&gt;location&lt;/code&gt;… but if you get it wrong, SVG things can and will break under you.
</summary><content type="html">&lt;p&gt;For quite some time, I have been frustrated by a bug in HolyBible.com: Firefox would not render SVGs using the &lt;code&gt;&amp;lt;use xlink:xhref=&amp;quot;#some-SVG-ID&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;&lt;/code&gt; pattern. Today, I set aside my ongoing work on new user-facing functionality and dedicated what working time I had to hunting down the cause of this and fixing it at last.&lt;/p&gt;
&lt;p&gt;I was surprised to find the culprit: the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag. If you don’t know what the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag is, you’re not alone. It is &lt;em&gt;not&lt;/em&gt; used all that much in general, and I had never actually seen it on a site before starting on this project last year.&lt;/p&gt;
&lt;p&gt;So what went wrong? How do these two things play together?&lt;/p&gt;
&lt;p&gt;I am using (and reusing) SVG items throughout the HolyBible.com interface, taking advantage of the ability to define symbols and reference them with the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag, like so:&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;svg version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; xmlns:ev=&amp;quot;http://www.w3.org/2001/xml-events&amp;quot; style=&amp;quot;display: none&amp;quot;&amp;gt;
  &amp;lt;symbol id=&amp;quot;logo-shape&amp;quot; viewBox=&amp;quot;0 0 256 256&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Logo&amp;lt;/title&amp;gt;
    &amp;lt;desc&amp;gt;The HolyBible.com logo: sunrise breaking over an open book (the Bible).&amp;lt;/desc&amp;gt;
    &amp;lt;path id=&amp;quot;logo-light&amp;quot; d=&amp;quot;M172.1 116.3l5.1-4.1-12.5-.5 32-26.3-41.4 18.4 11-20.1L148 96l12.2-37.5L138.8 91l.1-36.2-10.3 34.4L114 36.1l4.3 54.9-22.2-34.9 13 39.9-18.3-12.4 11 20.1-42.5-19.2 32.8 26.9-10.4.8 4.4 3.9c13.1-1.6 27.4-2.7 42.4-2.7 15.4 0 30.1 1.2 43.6 2.9z&amp;quot;/&amp;gt;
    &amp;lt;path id=&amp;quot;logo-book&amp;quot; d=&amp;quot;M199.9 219.9c-47.4-9.8-96.4-9.8-143.8 0-6-28.9-12-57.7-17.9-86.6 59.3-12.3 120.4-12.3 179.7 0-6 28.9-12 57.8-18 86.6z&amp;quot;/&amp;gt;
  &amp;lt;/symbol&amp;gt;
&amp;lt;/svg&amp;gt;

&amp;lt;!-- somewhere else on the page --&amp;gt;
&amp;lt;svg&amp;gt;
  &amp;lt;use xlink:href=&amp;quot;#logo-shape&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;
&amp;lt;/svg&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Throughout all my early prototyping, this worked perfectly across all modern browsers. (For more, see &lt;a href="https://css-tricks.com/svg-sprites-use-better-icon-fonts/"&gt;CSS Tricks&lt;/a&gt;.) Now, when I started moving from the prototype phase into actually building the application in Angular last fall, I learned that you have to set the base URL for the application using the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag to use the HTML5 Location API with Angular 1.x. If you want URL-based, rather than &lt;code&gt;#&lt;/code&gt;-based navigation in an Angular app, you need this. Following the recommendation of whatever documentation and tutorials I found, I set it so:&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;base href=&amp;quot;/&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this was the recommendation I saw in every bit of documentation and every tutorial, so I assumed it would have no problems. As it turns it, that’s not the case. (This is a &lt;a href="http://www.chriskrycho.com/2015/how-to-build-a-single-page-app-api-right.html"&gt;recurring theme&lt;/a&gt; in my experience with Angular.) In Chrome, Safari, and IE9+, this works exactly as expected. In Firefox, however, it does &lt;em&gt;not&lt;/em&gt;. The use of the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag changes the behavior of &lt;code&gt;#&lt;/code&gt;-based URLs on a page. Specifically, it makes it so that if you’re at a URL that &lt;em&gt;isn’t&lt;/em&gt; the base route, anchor links don’t behave as expected. In order to make the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag as expected, we would have to use the same URL as the base tag. Among other things, this would require making sure that any place we used the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag, we would have to set that—not exactly a good idea, given that it would entail an awful lot of changes if the base URL were ever changed.&lt;/p&gt;
&lt;p&gt;What if, instead, we did this?&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;base href=&amp;quot;&amp;#39; + document.location.origin + &amp;#39;&amp;quot; /&amp;gt;&amp;#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, when the page renders, it writes the document location based on the &lt;em&gt;current&lt;/em&gt; location. The URL history still behaves as expected with Angular, but the relative URLs for IDs behave as expected in Firefox again, while not breaking the behavior in any other browsers.&lt;/p&gt;
&lt;p&gt;But… then you’ll navigate to another page, and Firefox will be back to not working.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/angular/angular.js/issues/8934#issuecomment-56568466"&gt;solution&lt;/a&gt;, it turns out, only came into being after I’d done the initial implementation, and I have no idea how much later it found its way into the Angular docs. However, even though it now &lt;em&gt;exists&lt;/em&gt; in the docs, it’s by no means obvious why you should do it this way, and certainly no mention of SVG! This might not seem odd to you… but it should, given that the only reason that Angular introduced this API change was to account for &lt;em&gt;exactly this issue&lt;/em&gt;.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the Angular docs note, leaving out the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag means all your URLs have to be absolute if you want to use HTML5 location and the &lt;code&gt;$locationProvider&lt;/code&gt;. If you want to use SVGs with &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; and Firefox, though, that’s what you have to do (and therefore that’s what I’m doing).&lt;/p&gt;
&lt;p&gt;Fun times, right?&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The closest it gets is this reference:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Links that only contain a hash fragment (e.g. &lt;code&gt;&amp;lt;a href=&amp;quot;#target&amp;quot;&amp;gt;&lt;/code&gt;) will only change &lt;code&gt;$location.hash()&lt;/code&gt; and not modify the url otherwise. This is useful for scrolling to anchors on the same page without needing to know on which page the user currently is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even this, however, only &lt;em&gt;hints&lt;/em&gt; at the root of the SVG issue.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="angularjs"></category><category term="javascript"></category></entry><entry><title>How to Build a Single-Page App API Right</title><link href="http://www.chriskrycho.com/2015/how-to-build-a-single-page-app-api-right.html" rel="alternate"></link><published>2015-06-09T22:16:00-04:00</published><updated>2015-06-09T22:16:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-09:/2015/how-to-build-a-single-page-app-api-right.html</id><summary type="html">How to write a single-page app API so that you get usable data on the first load *and* have a nice interface for your single-page application built in Ember/Angular/Knockout/Backbone/etc.
</summary><content type="html">&lt;p&gt;When I was first working on HolyBible.com, I struggled for quite a while to wrap my head around the right way to structure its API—and in truth, I actually didn’t come up with what I would call the &lt;em&gt;right&lt;/em&gt; solution. I came up with a &lt;em&gt;working&lt;/em&gt; solution, and the site performs all right, most of the time. However, our goal as developers shouldn’t be “all right, most of the time.” It should be “really well, all the time.” A big part of what I did wrong came from the bad advice I found in reading up on the issue along the way. This is my shot at helping you, dear reader, avoid making the same mistake.&lt;/p&gt;
&lt;section id="the-challenge" class="level2"&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;When building a client-side application, we need to get the data for each view so that we can render it. In the case of HolyBible.com, that means everything from actual Bible text to study Bible notes, about pages, etc. The question is &lt;em&gt;how&lt;/em&gt; to do this: we need to be able to load an actual page from our server, and we need a way to request data (rather than whole pages) from the server.&lt;/p&gt;
&lt;p&gt;(More experienced developers already know where this is going: that last sentence there has the key to this whole thing. I know. But the internet &lt;em&gt;doesn’t.&lt;/em&gt; I learned this the hard way.)&lt;/p&gt;
&lt;section id="the-mistake" class="level3"&gt;
&lt;h3&gt;The mistake&lt;/h3&gt;
&lt;p&gt;Here’s the mistake I made: I built the Bible data API as (essentially) a &lt;em&gt;single&lt;/em&gt; endpoint. When I went looking for advice on how to build this in Angular and Node/Express, every single tutorial or blog post I found outlined the same basic solution: routes for your data endpoints, and catch-all route that returns the basic frame page for everything else. So, for HolyBible.com, that would come out with route matchers for e.g. &lt;code&gt;/data/gen.1.1&lt;/code&gt;, and for any other specific routes needed (for other views, static resources, etc.), with a default behavior of just dropping a static, basically empty template at the catchall &lt;code&gt;*&lt;/code&gt; route. Then, once the application has loaded, it can inspect the URL and load the relevant data.&lt;/p&gt;
&lt;p&gt;This works. It’s exactly what I did on HolyBible.com, in fact. But it’s &lt;em&gt;slow&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: the time until the initial page load is actually relatively quick (though I plan to improve it substantially over the next couple months). The real problem is that the initial page load &lt;em&gt;doesn’t include any content&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;hate&lt;/em&gt; this. That’s why people are on the site: not to see my neat skills with JavaScript, just to read the Bible. And they have to wait, because once the page &lt;em&gt;does&lt;/em&gt; load, Angular has to spin up the full application, see what content &lt;em&gt;should&lt;/em&gt; have been loaded, and request it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solution" class="level3"&gt;
&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;Don’t write &lt;em&gt;one&lt;/em&gt; API. Write &lt;em&gt;two&lt;/em&gt;. They should be structured nearly identically, but one of them will be a &lt;em&gt;page&lt;/em&gt; API endpoint, and one will be a &lt;em&gt;data&lt;/em&gt; API endpoint. In the context of HolyBible.com, here’s how that would play out.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; One endpoint would be based purely on the standard URL, something like &lt;code&gt;holybible.com/jhn.3.16&lt;/code&gt;. The other would be to retrieve a set of &lt;em&gt;data&lt;/em&gt; associated with a given address, like &lt;code&gt;holybible.com/data/jhn.3.16&lt;/code&gt;. This is only a little different from the approach suggested above, but that small difference matters—in fact, it matters a &lt;em&gt;lot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Instead of having the &lt;code&gt;/jhn.3.16&lt;/code&gt; route get handled by a catchall &lt;code&gt;*&lt;/code&gt; route on the back end, it gets its own API endpoint, which looks for URLS of this shape and hands back a full page. That API endpoint is responsible to actually render the content of the page appropriately—in this case, with something like the whole chapter of John 3.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;That&lt;/em&gt; gets handed back to the browser, so the very first thing the user sees is not a blank page while the JavaScript framework spins up and requests data, but rather &lt;em&gt;the Bible text they asked for in the first place&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Meanwhile, the JavaScript framework &lt;em&gt;can&lt;/em&gt; spin up, and load any required session data, etc. and start managing the UI like normal. Once we get to this point, the framework can go ahead and request a data payload from the &lt;code&gt;/data/&amp;lt;reference&amp;gt;&lt;/code&gt; endpoint. So, for example, if there is a navigation control on the page (as on HolyBible.com and indeed most sites), clicking to navigate to Job 14 could, instead of requesting &lt;code&gt;/job.14.4&lt;/code&gt;, fetch the data from the other endpoint by running an AJAX request to &lt;code&gt;/data/job.14.4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The backend thus supplies &lt;em&gt;both&lt;/em&gt; a &lt;code&gt;/&amp;lt;resource&amp;gt;&lt;/code&gt; and a &lt;code&gt;/data/&amp;lt;resource&amp;gt;&lt;/code&gt; route. This might seem redundant, but we’ve just seen why it isn’t, Moreover, if you have any logic that needs to be in place—in our example here, a Bible reference parser, for example, to decide what content should be supplied—you can easily reuse it between the two routes. The differences is simply in the form of the data returned: is it a fully-rendered template, or just the data?&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="so-what" class="level2"&gt;
&lt;h2&gt;So what?&lt;/h2&gt;
&lt;p&gt;This approach has two big advantages over the catch-all approach that was frequently recommended in e.g. Angular SPA tutorials I read.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It’s &lt;em&gt;progressive enhancement&lt;/em&gt;. If the JavaScript fails, or the user has it disabled, or it fails to load because it’s loaded asynchronously, the user still gets the page they asked for. Moreover, as long as the page content is build carefully (links built appropriately for other content, and so on), the entire application could continue to work even if the JavaScript &lt;em&gt;never&lt;/em&gt; becomes available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s &lt;em&gt;performant&lt;/em&gt;. Loading the content this way will be &lt;em&gt;much&lt;/em&gt; faster than the standard approach recommended for single-page apps. As noted above, it gets the content to the user immediately, then lets the JavaScript UI bits come into play. Since future page loads can take advantage of both caching and smaller data payloads, the whole thing can actually be faster than either a pure client-side &lt;em&gt;or&lt;/em&gt; a pure server-side approach. That is, once the client-side application is running, it can just update its views with data delivered via AJAX, rather than reloading the whole page. But &lt;em&gt;before&lt;/em&gt; that, the user doesn’t have to wait to see something useful until the JavaScript framework spins up.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s not often an approach gives you progressive enhancement and actually increases the performance of an application, but this one does. Better yet, you can apply this in just about any framework: it’s equally applicable to AngularJS with ExpressJS, Backbone with Rails, Ember with Django, Aurelia with Phoenix, or any other combination you come up with.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note: this is &lt;em&gt;not&lt;/em&gt; the actual API structure of HolyBible.com, or even particularly close to it. Remember, I learned everything I’m writing here by doing it &lt;em&gt;wrong&lt;/em&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Or possibly a section which constitutes a semantic block of data. I have some thoughts on chunking Bible data semantically rather than by chapter and verse for this kind of thing. That’s another post for another day, though.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="javascript"></category></entry><entry><title>Corporate and Government Surveillance</title><link href="http://www.chriskrycho.com/2015/corporate-and-government-surveillance.html" rel="alternate"></link><published>2015-06-02T22:43:00-04:00</published><updated>2015-06-02T22:43:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-02:/2015/corporate-and-government-surveillance.html</id><summary type="html">A response to Senator Sheldon Whitehouse's address to the NSA on Americans’ greater mistrust of government collection of data than corporations’.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;&lt;a href="https://witheredgrass.wordpress.com/"&gt;Brian Auten&lt;/a&gt; shared &lt;a href="http://www.lawfareblog.com/2015/06/why-americans-hate-government-surveillance-but-tolerate-corporate-data-aggregators/"&gt;this speech&lt;/a&gt; by Sen. Sheldon Whitehouse on Facebook, and I wrote up what follows in response.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;I broadly agree with the critique of the libertarian/TP angle on government as essentially an appendage to business. I am &lt;em&gt;by no means&lt;/em&gt; hostile to the government in general or in principle, nor even to &lt;em&gt;spying&lt;/em&gt;, nor even to warranted (double entendre intended) use of data for law enforcement. The idea that all government is bad is woefully incorrect; it is better to speak of &lt;em&gt;abuses&lt;/em&gt;, either of government or of business or indeed of any sphere exceeding its right domain or acting inappropriately within its domain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a profound and important difference between corporate data collection and federal government data collection: one of them, people accede to directly (though see below); the other they accede to (at best!) indirectly through elected representatives, with whom they may profoundly disagree and against whom they have no recourse (unlike the case of, say, Google or Facebook—one &lt;em&gt;can&lt;/em&gt; simply stop dealing with them). Whatever information I have granted to a corporation, I have chosen to grant them, and I can stop doing so with future information at any time. I &lt;em&gt;cannot&lt;/em&gt; do so with the NSA, FBI, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That distinction may be relatively meaningless for most people in practice, given that the terms, means, and consequences of the data collection carried about by corporations are often obscure to the point of incomprehensibility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As such, a serious reformation ought to occur in the realm of business and the way that people’s information is handled. Treating information about customers as the primary point of transactional value has significantly deleterious costs on any number of things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For this reason, I consistently advocate for and (where possible) choose to use services which are supported by direct payment, rather than by advertising, and so on. This is not always possible, but where it is, we should consider taking that path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nonetheless, because of the government’s power of coercion—a power not held by corporations, though to be sure they can exercise significant force of a certain sort through legal machinery/chicanery—the collection of metadata by the government does pose a more potent and long-term threat to liberty than that by corporations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As such, people are &lt;em&gt;absolutely right&lt;/em&gt; to be more tolerant of corporate data collection than of federal data collection. That they ought to be less tolerant of corporate data collection by no means suggests that their hostility to unwarranted governmental data collection should be diminished: quite the contrary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Therefore, while some of the criticism of the government’s data collection may well be driven by the sorts of corporate interests he suggests, and while much of the opposition from companies like Facebook and Google is indeed hypocritical, the criticism is still warranted. The NSA has clearly and repeatedly overstepped even the extremely wide bounds granted it by the Patriot Act, and the Patriot Act itself licensed behavior that should be horrifying to people concerned with the long-term effects of mass surveillance on governance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content><category term="listicles"></category></entry><entry><title>Python Enums, ctypes.Structures, and DLL exports</title><link href="http://www.chriskrycho.com/2015/ctypes-structures-and-dll-exports.html" rel="alternate"></link><published>2015-05-28T18:00:00-04:00</published><updated>2015-05-28T18:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-28:/2015/ctypes-structures-and-dll-exports.html</id><summary type="html">Unfortunately, the official docs for &lt;code&gt;ctypes&lt;/code&gt; leaves a few things  out—namely, the most basic use case with &lt;code&gt;from_param&lt;/code&gt;! Here's a simple,  working example from my own development work.
</summary><content type="html">&lt;p&gt;For one of my contracts right now, I’m writing a &lt;code&gt;ctypes&lt;/code&gt; Python interface to existing C code. I got stuck and confused for quite a while on getting the interface to a given function to build correctly, and along the way had to try to understand the &lt;code&gt;from_param&lt;/code&gt; class method. The official docs are… fine… but the examples provided don’t cover the most common/basic use case: defining a simple, &lt;em&gt;non-ctypes&lt;/em&gt; data type as an argument to a DLL-exported function.&lt;/p&gt;
&lt;p&gt;Let’s say you have a C function exported from a DLL; for convenience we’ll make it something rather silly but easy to understand:&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;/** my_exported.h */
#include &amp;quot;exports.h&amp;quot;

typedef enum {
    ZERO,
    ONE,
    TWO
} MyEnum;

MY_API int getAnEnumValue(MyEnum anEnum);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The implementation just gives back the integer value of the function:&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;int getAnEnumValue(MyEnum anEnum) {
    return (int)anEnum;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I said, a &lt;em&gt;very&lt;/em&gt; silly example. Note that you don’t technically need the &lt;code&gt;(int)&lt;/code&gt; cast there; I’ve just put it in to be explicit about what we’re doing.&lt;/p&gt;
&lt;p&gt;How would we use this from Python? Assuming we have a DLL named &lt;code&gt;my_dll&lt;/code&gt; which exports the &lt;code&gt;getAnEnumValue&lt;/code&gt; function, we’d load it up roughly like this:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;import ctypes as c

my_dll = c.cdll.LoadLibrary(&amp;#39;my_dll&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we bind to the function like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;get_an_enum_value = my_dll.getAnEnumValue&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when you do this, you usually also supply the &lt;code&gt;argtypes&lt;/code&gt; and &lt;code&gt;restype&lt;/code&gt; values for these functions. If you’re like me, you’d think, “Oh, an enum—a perfect opportunity to use the &lt;code&gt;Enum&lt;/code&gt; type in Python 3.4+!” and then you’d do something like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;import ctypes as c
from enum import IntEnum

class MyEnum(IntEnum):
    ZERO = 0
    ONE = 1
    TWO = 2

my_dll = c.cdll.LoadLibrary(&amp;#39;my_dll&amp;#39;)
get_an_enum_value = my_dll.getAnEnumValue
get_an_enum_value.argtypes = [MyEnum]
get_an_enum_value.restype = c.c_int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That seems sensible enough, but as it is, it won’t work: you’ll get an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TypeError: item 1 in _argtypes_ has no from_param method&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because &lt;code&gt;argtypes&lt;/code&gt; values &lt;em&gt;have&lt;/em&gt; to be either existing &lt;code&gt;ctypes&lt;/code&gt; types&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; or supply either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;from_param&lt;/code&gt; classmethod, or&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use &lt;code&gt;ctypes.Structure&lt;/code&gt; subclasses natively that way, because the &lt;code&gt;Structure&lt;/code&gt; class supplies its &lt;code&gt;from_param&lt;/code&gt; classmethod. The same is &lt;em&gt;not&lt;/em&gt; true of our custom enum class, though. As the docs put it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have defined your own classes which you pass to function calls, you have to implement a &lt;code&gt;from_param()&lt;/code&gt; class method for them to be able to use them in the argtypes sequence. The &lt;code&gt;from_param()&lt;/code&gt; class method receives the Python object passed to the function call, it should do a typecheck or whatever is needed to make sure this object is acceptable, and then return the object itself, its &lt;code&gt;_as_parameter_&lt;/code&gt; attribute, or whatever you want to pass as the C function argument in this case. Again, the result should be an integer, string, bytes, a &lt;code&gt;ctypes&lt;/code&gt; instance, or an object with an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, to make the enum type work, we need to add a &lt;code&gt;from_param&lt;/code&gt; class method or an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute to it. Thus, either of these options will work:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;class MyEnum(IntEnum):
    ZERO = 0
    ONE = 1
    TWO = 2

    # Option 1: set the _as_parameter value at construction.
    def __init__(self, value):
        self._as_parameter = int(value)

    # Option 2: define the class method `from_param`.
    @classmethod
    def from_param(cls, obj):
        return int(obj)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the constructor-based option, the &lt;code&gt;value&lt;/code&gt; argument to the constructor is the value of the &lt;code&gt;Enum&lt;/code&gt; instance. Since the value of anan &lt;code&gt;IntEnum&lt;/code&gt; is always the same as the integer to whcih it is bound, we can just return &lt;code&gt;int(value)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;from_param&lt;/code&gt; approach works a little differently, but with the same results. The &lt;code&gt;obj&lt;/code&gt; argument to the &lt;code&gt;from_param&lt;/code&gt; method is the object instance, in this case the enumerated value itself. &lt;em&gt;Any&lt;/em&gt; &lt;code&gt;Enum&lt;/code&gt; with an integer value can be directly cast to &lt;code&gt;int&lt;/code&gt; (though it is possible for &lt;code&gt;Enum&lt;/code&gt; instances to have other values, so be careful), and since we have an &lt;code&gt;IntEnum&lt;/code&gt; here, we can again just return &lt;code&gt;int(obj)&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;Now, let’s say we want to apply this pattern to more than a single &lt;code&gt;IntEnum&lt;/code&gt; class, because our C code defines more than one enumeration. Extracting it to be common functionality is simple enough: just create a class that implements the class method, and inherit from it.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;class CtypesEnum(IntEnum):
    &amp;quot;&amp;quot;&amp;quot;A ctypes-compatible IntEnum superclass.&amp;quot;&amp;quot;&amp;quot;
    @classmethod
    def from_param(cls, obj):
        return int(obj)


class MyEnum(CtypesEnum):
    ZERO = 0
    ONE = 1
    TWO = 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our final (working!) Python code, then, would be:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Import the standard library dependencies
import ctypes as c
from enum import IntEnum


# Define the types we need.
class CtypesEnum(IntEnum):
    &amp;quot;&amp;quot;&amp;quot;A ctypes-compatible IntEnum superclass.&amp;quot;&amp;quot;&amp;quot;
    @classmethod
    def from_param(cls, obj):
        return int(obj)


class MyEnum(CtypesEnum):
    ZERO = 0
    ONE = 1
    TWO = 2


# Load the DLL and configure the function call.
my_dll = c.cdll.LoadLibrary(&amp;#39;my_dll&amp;#39;)
get_an_enum_value = my_dll.getAnEnumValue
get_an_enum_value.argtypes = [MyEnum]
get_an_enum_value.restype = c.c_int

# Demonstrate that it works.
print(get_an_enum_value(MyEnum.TWO))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output will be &lt;code&gt;2&lt;/code&gt;, just as you’d expect!&lt;/p&gt;
&lt;p&gt;An important note: The type definition we’ve provided here will work for &lt;code&gt;argtypes&lt;/code&gt; or &lt;code&gt;restype&lt;/code&gt; assignments, but &lt;em&gt;not&lt;/em&gt; as one of the members of a custom &lt;code&gt;ctypes.Structure&lt;/code&gt; type’s &lt;code&gt;_fields_&lt;/code&gt; value. (Discussing how you’d go about doing that is beyond the scope of this post; the most direct approach is just to use a &lt;code&gt;ctypes.c_int&lt;/code&gt; and note that it is intended to be used with a given &lt;code&gt;IntEnum&lt;/code&gt;/&lt;code&gt;CtypesEnum&lt;/code&gt; type.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Thanks to &lt;a href="https://alpha.app.net/oluseyi"&gt;@oluseyi&lt;/a&gt; for being my &lt;a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber ducky&lt;/a&gt; while I was working this out earlier this week!&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’m leaving out the part where we build the DLL, and also the part where we locate the DLL, and only using the Windows convention. If you’re on a *nix system, you should use &lt;code&gt;'my_dll.so'&lt;/code&gt; instead, and in any case you need to make sure the DLL is available in the search path.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; the redundancy of “&lt;code&gt;ctypes&lt;/code&gt; types,” don’t you?&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category></entry><entry><title>Open Source is Neat</title><link href="http://www.chriskrycho.com/2015/open-source-is-neat.html" rel="alternate"></link><published>2015-05-17T22:52:00-04:00</published><updated>2015-05-17T22:52:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-17:/2015/open-source-is-neat.html</id><summary type="html">Link: Andrew J. Camenga took advantage of the fact that my site design is under an open-source license, and adapted it. It is truly lovely!</summary><content type="html">&lt;p&gt;I confess: my &lt;em&gt;first&lt;/em&gt; response to seeing &lt;a href="//andrewcamenga.com/"&gt;this page&lt;/a&gt; was a flash of anger: &lt;em&gt;Hey, he didn’t just learn from my site configuration, he actually stole my site &lt;/em&gt;&lt;strong&gt;design&lt;/strong&gt;_!_ And then I remembered: I open-sourced the design precisely so people could do that. This was just the first time I’ve ever actually had someone reuse something I did and shared like this. It was a strange (but ultimately wonderful) feeling. I hope to have it again many more times.&lt;/p&gt;
&lt;p&gt;In any case, I rather like the tweaks Andrew Comenga made to my design to make it his own; &lt;a href="//andrewcamenga.com/"&gt;go take a look&lt;/a&gt;!&lt;/p&gt;
</content><category term="links"></category><category term="software development"></category><category term="design"></category></entry><entry><title>A Modern Python Development Toolchain</title><link href="http://www.chriskrycho.com/2015/a-modern-python-development-toolchain.html" rel="alternate"></link><published>2015-05-16T22:40:00-04:00</published><updated>2015-05-16T22:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-16:/2015/a-modern-python-development-toolchain.html</id><summary type="html">Using homebrew, pyenv, and pip to manage Python development environments and workspaces.</summary><content type="html">&lt;p&gt;Most of my development time these days—and especially the majority of my happiest time!—is spent working in Python. As such, I’ve experimented off and on over the last few years with the best workflow, and have settled down with a set of tools that is &lt;em&gt;very&lt;/em&gt; effective and efficient for me. I’m sure I’m not the only one who’s had to wrestle with some of the issues particular to this toolchain, and I know that information like this can be valuable especially for people just starting off, so I thought I would document it all in one place.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: when talking about a given program, I will italicize it, like &lt;em&gt;brew&lt;/em&gt; or &lt;em&gt;git&lt;/em&gt; or &lt;em&gt;python&lt;/em&gt;. When talking about things to type, I will make them a code block like &lt;code&gt;git clone &amp;lt;a repository&amp;gt;&lt;/code&gt;. For any extended samples, I will make them full-on code blocks:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;import re

def a_neat_function():
    my_string = &amp;quot;Isn&amp;#39;t it cool?&amp;quot;
    if re.match(r&amp;quot;i\w+&amp;quot;, my_string, flags=re.I):
        print(my_string)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;The main tools I use are: a good text editor (I like all of &lt;a href="//www.sublimetext.com"&gt;Sublime Text&lt;/a&gt;, &lt;a href="//atom.io"&gt;Atom&lt;/a&gt;, &lt;a href="//github.com/textmate/textmate"&gt;TextMate&lt;/a&gt;, and &lt;a href="//chocolatapp.com"&gt;Chocolat&lt;/a&gt;; each has its own strengths and weaknesses) or sometimes &lt;a href="https://www.jetbrains.com/pycharm/"&gt;a full IDE&lt;/a&gt;, version control software (I appreciate and use both &lt;a href="http://www.git-scm.com"&gt;Git&lt;/a&gt; and &lt;a href="http://mercurial.selenic.com"&gt;Mercurial&lt;/a&gt;), and three dedicated tools to which the rest of this post is devoted: &lt;em&gt;pyenv&lt;/em&gt;, &lt;em&gt;pip&lt;/em&gt;, and virtual environments.&lt;/p&gt;
&lt;p&gt;Everyone is going to have their own preferences for version control tools and an editor; but the recommendations I make regarding Python installations, package management, and workspaces/virtual environments should be fairly standard for anyone doing Python development on a Unix-like system in 2015.&lt;/p&gt;
&lt;section id="python-proper" class="level2"&gt;
&lt;h2&gt;Python Proper&lt;/h2&gt;
&lt;p&gt;First up: Python itself. OS X ships with a built-in copy of Python 2; in the latest version of Yosemite, it’s running Python 2.7.6. The latest version of Python 2 is 2.7.9, so that isn’t &lt;em&gt;terribly&lt;/em&gt; far behind—but it is still behind. Moreover, OS X does &lt;em&gt;not&lt;/em&gt; ship with Python 3, and since I do all of my development in Python 3&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; I need to install it.&lt;/p&gt;
&lt;section id="homebrew" class="level3"&gt;
&lt;h3&gt;Homebrew&lt;/h3&gt;
&lt;p&gt;For a long time, I managed all my Python installations with &lt;a href="http://brew.sh"&gt;&lt;em&gt;homebrew&lt;/em&gt;&lt;/a&gt;. If you’re not familiar with it, &lt;em&gt;homebrew&lt;/em&gt; is a package manager that lets you installed tools on the command line, similar to what you get from &lt;em&gt;aptitude&lt;/em&gt; or &lt;em&gt;yum&lt;/em&gt; on Ubuntu or Fedora respectively.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; If you’re not using &lt;em&gt;homebrew&lt;/em&gt; yet, I highly recommend it for installing command-line tools. (If you’re not using command-line tools yet, then the rest of this post will either bore you to death, or prove extremely enlightening!) If you haven’t started yet, now’s a good time: &lt;a href="http://brew.sh"&gt;go install it!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While &lt;em&gt;homebrew&lt;/em&gt; is great for installing and managing packages in general, I can’t say this loud enough: &lt;em&gt;don’t manage Python with homebrew&lt;/em&gt;. It’s finicky, and really isn’t meant for all the things you have to do to manage more than one version of Python at a time.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; (There’s a reason there’s a whole &lt;a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md"&gt;troubleshooting section&lt;/a&gt; devoted to it.) If you think it’s crazy that I might want more than one copy of Python installed a time, well… let’s just say I suspect you’ll change your mind after doing a bit more development. (At the most basic, most people will end up wanting both Python 2 and 3 installed, and will want to upgrade them as bug fixes and the like come out.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pyenv" class="level3"&gt;
&lt;h3&gt;pyenv&lt;/h3&gt;
&lt;p&gt;Instead of installing via &lt;em&gt;homebrew&lt;/em&gt;, use it to install &lt;a href="https://github.com/yyuu/pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;, and use that to manage your installations. &lt;em&gt;pyenv&lt;/em&gt; is a dedicated tool for managing your “Python environment,” and it excels at that. If you were on a Mac with &lt;em&gt;homebrew&lt;/em&gt; installed, your setup process to add the latest version of Python might look something like this:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ brew install pyenv
$ echo &amp;#39;eval &amp;quot;$(pyenv init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~.profile
$ source ~/.profile
$ pyenv install 3.4.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Line by line, that (a) installs &lt;em&gt;pyenv&lt;/em&gt;, (b) adds a hook to your shell profile,&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; (c) updates your current session using the updated profile, and (d) installs the latest version of Python (as of the time I’m writing this). Now you have a full version of Python 3.4.3 alongside the system install of Python 2.7.6. If you wanted to install 2.7.9, or 2.2.3, or the development version of PyPy3, you could easily do that as well.&lt;/p&gt;
&lt;p&gt;In addition, &lt;em&gt;pyenv&lt;/em&gt; lets you specify which version to use globally (&lt;code&gt;pyenv global &amp;lt;name&amp;gt;&lt;/code&gt;) and which version to use in a given directory structure (&lt;code&gt;pyenv local &amp;lt;name&amp;gt;&lt;/code&gt;). So if you prefer to use Python 3 in general, but need to use Python 2 on one project, you can just navigate to the root of that project and set it:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ pyenv global 3.4.3
$ cd path/to/my/project
$ pyenv local 2.7.9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a simple plain text file, &lt;code&gt;.python-version&lt;/code&gt;, whose contents will be just &lt;code&gt;2.7.9&lt;/code&gt;—but for everything under &lt;code&gt;path/to/my/project&lt;/code&gt;, typing &lt;code&gt;python&lt;/code&gt; will launch Python 2.7.9, while typing it &lt;em&gt;outside&lt;/em&gt; that folder will launch Python 3.4.3. (If you want, you can just create the &lt;code&gt;.python-version&lt;/code&gt; file yourself manually and give it the name of a version. There’s nothing special about it all; it’s just the place &lt;code&gt;pyenv&lt;/code&gt; looks to know which Python version to use.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="managing-python-packages" class="level2"&gt;
&lt;h2&gt;Managing Python Packages&lt;/h2&gt;
&lt;p&gt;There are four basic approaches to managing Python packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;installing them manually&lt;/li&gt;
&lt;li&gt;using a system-level package manager like &lt;em&gt;homebrew&lt;/em&gt;, &lt;em&gt;yum&lt;/em&gt;, or &lt;em&gt;aptitude&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;using &lt;em&gt;easy_install&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;using &lt;em&gt;pip&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The vast majority of the time, the right choice is using &lt;em&gt;pip&lt;/em&gt;. Over the last few years, &lt;em&gt;pip&lt;/em&gt; has become the default install tool for Python packages and it now ships natively with it on every platform. Suffice it to say: if you need to install a package, do not install it not with &lt;em&gt;homebrew&lt;/em&gt; (or &lt;em&gt;aptitude&lt;/em&gt; or &lt;em&gt;yum&lt;/em&gt;). Install it with &lt;em&gt;pip&lt;/em&gt;. It integrates with Python better, it always has access both to the latest versions of Python packages (including those only available in e.g. development repositories on GitHub or Bitbucket or wherever else) and to all previously released versions, and it’s the community’s main tool for the job.&lt;/p&gt;
&lt;p&gt;That said, occasionally it makes sense to install packages manually by downloading them and running &lt;code&gt;python setup.py install&lt;/code&gt; or to use a system-level package manager. On the other hand, given &lt;em&gt;pip&lt;/em&gt;’s ability to do everything &lt;em&gt;easy_install&lt;/em&gt; does, and its ability to do quite a few more things as well, there really isn’t a time to use &lt;em&gt;easy_install&lt;/em&gt;. Using the language-supplied tools keeps everything playing nicely together. Perhaps just as importantly, it is the only way to make sure everything behaves the way it should when you start using…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="virtual-environments" class="level2"&gt;
&lt;h2&gt;Virtual Environments&lt;/h2&gt;
&lt;p&gt;When working with a variety of different clients, or simply on different projects, it is common not only to end up with different versions of Python but also with different sets of packages or—tricker still!—different versions of the same package required for different projects. Virtual environments provide a solution: they reuse the main Python executable (by creating links on the file system to it), but create isolated “workspaces” for the various packages you might install.&lt;/p&gt;
&lt;p&gt;That way, in one workspace, you might have version 1.2 of a package installed, and in another you might have version 3.3 installed—because those are the required dependencies for something &lt;em&gt;else&lt;/em&gt; you’re doing. This isn’t a hypothetical situation. For quite a while with one of my clients, we had pinned a particular version of the Python documentation package we use because it broke our use case after an update—but I still wanted to have the latest version of that tool in my &lt;em&gt;other&lt;/em&gt; projects. Setting up virtual environments neatly solves that problem.&lt;/p&gt;
&lt;section id="venv-and-virtualenv" class="level3"&gt;
&lt;h3&gt;venv and virtualenv&lt;/h3&gt;
&lt;p&gt;If you have Python 3.3 or later, you have a built-in tool for this called &lt;a href="https://docs.python.org/3/library/venv.html"&gt;&lt;em&gt;pyvenv&lt;/em&gt;&lt;/a&gt;; if you have Python 3.4 or later, it supports &lt;em&gt;pip&lt;/em&gt; right out of the gate so you don’t have to install it yourself. If you’re on older versions, you can install &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;pip install virtualenv&lt;/code&gt;) and get the same basic tooling: &lt;em&gt;pyvenv&lt;/em&gt; was inspired by &lt;em&gt;virtualenv&lt;/em&gt;. Then you can create virtual environments with the &lt;code&gt;pyvenv&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt; commands, and use those to isolate different setups from each other. If you haven’t started using virtual environments yet, start now!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pyenv-with-virtualenv" class="level3"&gt;
&lt;h3&gt;pyenv with virtualenv&lt;/h3&gt;
&lt;p&gt;I know, the similarity of names for &lt;em&gt;pyenv&lt;/em&gt; and &lt;em&gt;pyvenv&lt;/em&gt; is unfortunate. If it helps, you can call the latter as &lt;code&gt;venv&lt;/code&gt; rather than &lt;code&gt;pyvenv&lt;/code&gt;. But, more importantly, one of the areas &lt;em&gt;pyenv&lt;/em&gt; is much better than &lt;em&gt;homebrew&lt;/em&gt; is its support for managing virtual environments. Install &lt;a href="https://github.com/yyuu/pyenv-virtualenv"&gt;&lt;em&gt;pyenv-virtualenv&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ brew install pyenv-virtualenv
$ echo &amp;#39;eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.profile&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you’re off to the races: you’ll never have to type &lt;code&gt;pyvenv &amp;lt;path to a virtual environment&amp;gt;&lt;/code&gt;, because instead you can just type &lt;code&gt;pyenv virtualenv &amp;lt;version&amp;gt; &amp;lt;name&amp;gt;&lt;/code&gt; and &lt;em&gt;pyenv&lt;/em&gt; will take care of setting it up for you. Even better: all the nice tricks I listed above about setting directory-specific and global preferences for which Python version to use work equally well with virtual environments managed via &lt;em&gt;pyenv&lt;/em&gt;. In other words, you can do something like this:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ pyenv install 2.7.9
$ pyenv install 3.4.3
$ pyenv global 3.4.3
$ pyenv virtualenv 2.7.9 my-virtual-environment
$ cd path/to/my/project
$ pyenv local my-virtual-environment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.python-version&lt;/code&gt; file will contain &lt;code&gt;my-virtual-environment&lt;/code&gt;. The Python version will be 2.7.9. The environment will be isolated, just as if you had run &lt;code&gt;pyvenv&lt;/code&gt; to set up a virtual environment. Everything works together beautifully! Moreover, you can easily reuse virtual environments this way, because you can set the &lt;code&gt;local&lt;/code&gt; value in more than one place. For example, I use the same virtual environment for this site and &lt;a href="//www.winningslowly.org/" title="A podcast: taking the long view on technology, religion, ethics, and art."&gt;Winning Slowly&lt;/a&gt;, because they have slightly different site configurations but all the same Python dependencies. Creating it was simple:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ pyenv install 3.4.3
$ pyenv virtualenv 3.4.3 pelican
$ cd ~/Sites/chriskrycho.com
$ pyenv local pelican
$ cd ~/Sites/winningslowly.org
$ pyenv local pelican&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I named the virtual environment after &lt;a href="//docs.getpelican.com/"&gt;the tool I use to generate the sites&lt;/a&gt;, and reused it in both sites. Both now have a &lt;code&gt;.python-version&lt;/code&gt; file that reads &lt;code&gt;pelican&lt;/code&gt;. Now, anytime I’m working anywhere under &lt;code&gt;~/Sites/chriskrycho.com&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code&gt;~/Sites/winningslowly.org&lt;/code&gt;, I have the same tooling in place.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The combination of &lt;em&gt;pip&lt;/em&gt;, &lt;em&gt;pyenv&lt;/em&gt; and virtual environments makes for a very simple, straightforward process to manage Python environments these days:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install Python versions with &lt;em&gt;pyenv&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Install Python packages with &lt;em&gt;pip&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Set up virtual environments with &lt;em&gt;pyenv-virtualenv&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you stick to those basic rules, Python itself shouldn’t give you any trouble at all.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;All the usual caveats apply, of course: this may or may not work well for you; it’s just what works for me, and I make no claim or warranty on the tools below—they’re working well for &lt;em&gt;me&lt;/em&gt;, but I don’t maintain them, so if they break, please tell the people who maintain them! Also, because I do nearly all my development on a Mac (I test on Windows, but that’s it), the following is necessarily &lt;em&gt;fairly&lt;/em&gt; specific to OS X. You can readily adapt most of it to Linux, though, or even to a &lt;a href="https://www.cygwin.com"&gt;Cygwin&lt;/a&gt; install on Windows—I do just that when I have cause. But my main tool is a Mac, so that’s what I’ve specialized for.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Lucky me, I know!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Yes, I know that those are wrappers around Debian and Arch, and I know about &lt;em&gt;apt-get&lt;/em&gt; and &lt;em&gt;rpm&lt;/em&gt;. No, that information isn’t especially relevant for the rest of this post.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;For example, if you upgrade your Python installation using homebrew and then cleanup the old version (e.g., by running the typical &lt;code&gt;brew update &amp;amp;&amp;amp; brew upgrade &amp;amp;&amp;amp; brew cleanup&lt;/code&gt; sequence)—say, from 3.4.2 to 3.4.3—and you have virtual environments which depended on 3.4.2… well, you’re in a bad spot now. A &lt;em&gt;very&lt;/em&gt; bad spot. Have fun getting back to a working state!&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;You can of course drop it directly in &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bash_profile&lt;/code&gt; or wherever else. &lt;a href="//github.com/chriskrycho/profile"&gt;My setup&lt;/a&gt; puts all common handling in &lt;code&gt;.profile&lt;/code&gt; and runs &lt;code&gt;source .profile&lt;/code&gt; as the first action in any other shell configurations.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="Software Development"></category></entry><entry><title>Tolle Lege!</title><link href="http://www.chriskrycho.com/2015/tolle-lege.html" rel="alternate"></link><published>2015-05-01T10:30:00-04:00</published><updated>2015-05-01T10:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-01:/2015/tolle-lege.html</id><summary type="html">Designing Readable Bibles with Digital Typography (BibleTech 2015 conference talk)
</summary><content type="html">&lt;p&gt;I was delighted to be able to give a talk at &lt;a href="http://bibletechconference.com/"&gt;BibleTech&lt;/a&gt; this year. I spoke for almost exactly 40 minutes on the subject of digital typography, with a focus on some of the nitty-gritty details that make texts readable… or not. Here is the screen capture and audio from the talk!&lt;/p&gt;
&lt;div class="iframe-wrapper four-to-three"&gt;
&lt;iframe src="https://player.vimeo.com/video/126655499" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;You can also access the &lt;a href="/talks/bibletech2015/"&gt;slides&lt;/a&gt; whenever you like (though note that they were designed to be complements to the talk, &lt;em&gt;not&lt;/em&gt; the content of the talk, and as such they elide a great deal of the content).&lt;/p&gt;
</content><category term="design"></category><category term="typography"></category><category term="talks"></category></entry><entry><title>Lessons Learned</title><link href="http://www.chriskrycho.com/2015/lessons-learned.html" rel="alternate"></link><published>2015-04-12T13:49:00-04:00</published><updated>2015-04-12T13:49:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-12:/2015/lessons-learned.html</id><summary type="html">&lt;p&gt;Since mid July 2014, I have been working on a complete redesign and re-build of &lt;a href="//holybible.com"&gt;HolyBible.com&lt;/a&gt;. The good folks at &lt;a href="//prts.edu"&gt;Puritan Reformed Theological Seminary&lt;/a&gt; who own the site wanted to replace its previous content with a Bible reading tool. While there’s still a lot to wrap up, the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since mid July 2014, I have been working on a complete redesign and re-build of &lt;a href="//holybible.com"&gt;HolyBible.com&lt;/a&gt;. The good folks at &lt;a href="//prts.edu"&gt;Puritan Reformed Theological Seminary&lt;/a&gt; who own the site wanted to replace its previous content with a Bible reading tool. While there’s still a lot to wrap up, the project is &lt;em&gt;nearing&lt;/em&gt; its conclusion, and I thought I’d note a few things I’ve learned (in some cases, learned &lt;em&gt;again&lt;/em&gt;) along the way. I want to say up front, lest these be taken the wrong way: I’m extremely proud of the work I’ve done, and the application I’ve delivered &lt;em&gt;does&lt;/em&gt; work to the specifications I was hired to meet. More than that, it does it well. But, of course, it could do it &lt;em&gt;better&lt;/em&gt;. The following thoughts are therefore not, “How I failed” but rather “How I will do this &lt;em&gt;even better&lt;/em&gt; next time around.”&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Single page apps are great, but not always the right choice.&lt;/em&gt; I made the decision, based on my expectations and understandings of what I would need, to develop the site as a single-page web application. This was a mistake. Not the worst mistake ever: it has its upsides, including performance &lt;em&gt;once the app spins up&lt;/em&gt;, but for the kind of content I have here, I would take a different tack today. Better in this case to deliver static content and &lt;em&gt;update&lt;/em&gt; it dynamically as appropriate than to try to load all the content dynamically every time.&lt;/p&gt;
&lt;p&gt;At a technical level, that would probably mean supplementing standard HTML with &lt;a href="//backbonejs.org"&gt;Backbone&lt;/a&gt; instead of developing it as a single-page app in &lt;a href="//angularjs.org"&gt;Angular&lt;/a&gt;. For the backend, while I did it in Node.js and that would work fine, I’d probably do a straight Django app (especially with a few of the goals I learned about &lt;em&gt;after&lt;/em&gt; the project was well along in development).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Progressive enhancement or graceful degradation are hard in web applications, but they still matter.&lt;/em&gt; In the past, I’ve always taken a hard line on making sure things either degrade gracefully or are simply enhanced by JavaScript content. In the architecture decisions I made for this app, I failed to take that into account (largely because I thought it would just &lt;em&gt;need&lt;/em&gt; to work as a web app, but see above). I regret that enormously at this point; it would be much better in this particular case to have content available even if the additional functionality doesn’t work. Even if you &lt;em&gt;are&lt;/em&gt; doing something where you are building an &lt;em&gt;app&lt;/em&gt;, finding ways to make it work on poor connections, older browsers, etc. matters. I’m still thinking a &lt;em&gt;lot&lt;/em&gt; about the best way to do this in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;More popular doesn’t mean better.&lt;/em&gt; Angular has a ton of traction and uptake, and that was deceptive early on. I won’t so easily be fooled in the future. Angular is so very popular in part because Google can put serious money behind its development—and its marketing. But it’s &lt;em&gt;not&lt;/em&gt; the best for many applications; if you’re not in the business of developing your own custom framework, it’s not even &lt;em&gt;close&lt;/em&gt; to the best. Use Ember or Knockout or any number of other full-stack frameworks rather than a meta-framework.&lt;/p&gt;
&lt;p&gt;How to avoid making that mistake? Well, for my part since then, I’ve learned to look not just as the &lt;em&gt;quantity&lt;/em&gt; of material in a given community, but its &lt;em&gt;quality&lt;/em&gt;. For example, &lt;a href="//emberjs.com"&gt;Ember&lt;/a&gt; has &lt;em&gt;incredible&lt;/em&gt; documentation (far better than Angular’s), and they also have a much clearer vision and a more dependable approach to development (strict semantic versioning, etc.). Had I taken the time to read &lt;em&gt;both&lt;/em&gt; sets of docs more carefully and think through the consequences of their designs more thoroughly, I could have recognized this before starting. Next time, I will do just that.&lt;/p&gt;
&lt;p&gt;I will also look at the way the community behaves. The Ember community is &lt;em&gt;far&lt;/em&gt; friendlier for newcomers from what I’ve seen than the Angular community—no slam meant on the Angular crowd, but the Ember folks are just doing that really well. That matters, too. (I can’t speak for other communities, of course; these are just the groups I’ve watched the most.)&lt;/p&gt;
&lt;p&gt;All in all, Ember would have been the better fit between these two (even though, as noted above, it also wouldn’t have been the &lt;em&gt;best&lt;/em&gt; fit).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Unit tests really are the best.&lt;/em&gt; I did a vast majority of this project with unit tests—the first time I’ve ever been able to do that for a whole project. In other projects, I’ve been able to do it for parts, but never this much. It saved my bacon a &lt;em&gt;lot&lt;/em&gt;. Where I got in a hurry and felt like I didn’t have time to write the tests, I (inevitably and predictably!) ended up spending a lot of time chasing down hard-to-isolate bugs—time I could have avoided by writing well-tested (and therefore better-factored) code in the first place. Lesson learned &lt;em&gt;very&lt;/em&gt; thoroughly. Server- and client-side unit tests are &lt;em&gt;really&lt;/em&gt; good. They’re also sometimes &lt;em&gt;hard&lt;/em&gt;; getting mocks set up correctly for dealing with databases, etc. can take a while. That difficulty pays for itself, though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Unit tests &lt;strong&gt;really&lt;/strong&gt; don’t replace API documentation.&lt;/em&gt; I have seen people advocate test-driven-development as a way of obviating the need to do major documentation of an API. This is, in a word, ridiculous. Having to read unit tests if you want to remember how you structured an API call is a pain in the neck. Don’t believe it. Design your API and document it, &lt;em&gt;then&lt;/em&gt; do test-driven development against that contract.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Sometimes ‘good enough’ is enough.&lt;/em&gt; There is always more to be done, and inevitably you can see a thousand things that could be improved. But ‘good’ shipping code is far more valuable than ‘perfect’ code that never ships. You should never ship &lt;em&gt;bad&lt;/em&gt; code, but sometimes you do have to recognize ‘good enough’ and push it out the door.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Full-stack development is fun, but it’s also really hard.&lt;/em&gt; I wrote every scrap of code in HolyBible.com proper (though of course it relies on a lot of third-party code). It was very, very difficult to manage that all by myself; it’s a lot to hold in one’s head. (One of the reasons I chose Node was because keeping my implementation and testing all in one language helped reduce that load somewhat.) Would I do it again? Sure. But very much chastened about the difficulties involved. It has been enormously rewarding, and I &lt;em&gt;like&lt;/em&gt; being a full-stack developer. But it’s a lot of work, and now I know more clearly just how much.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could say a great deal more about the technical side of things especially, but my biggest takeaway here is that a lot of the hardest and most important work in developing software has nothing to do with the code itself. Architecture and approach shape &lt;em&gt;far&lt;/em&gt; more than the implementation details (even if those details still matter an awful lot). And popularity is not at all the same as either &lt;em&gt;quality&lt;/em&gt; or (especially) &lt;em&gt;suitability for a given task&lt;/em&gt;. In the future, I will be better equipped for the necessary kinds of evaluation, and will hopefully make still better decisions accordingly.&lt;/p&gt;
</content><category term="software development"></category><category term="javascript"></category><category term="angularjs"></category></entry><entry><title>The NSA wants tech companies to give it 'front door' access to encrypted data</title><link href="http://www.chriskrycho.com/2015/the-nsa-wants-tech-companies-to-give-it-front-door-access-to-encrypted-data.html" rel="alternate"></link><published>2015-04-12T13:16:00-04:00</published><updated>2015-04-12T13:16:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-12:/2015/the-nsa-wants-tech-companies-to-give-it-front-door-access-to-encrypted-data.html</id><summary type="html">&lt;p&gt;The Verge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I don’t want a back door,” Rogers said. “I want a front door. And I want the front door to have multiple locks. Big locks….”&lt;/p&gt;
&lt;p&gt;Rogers suggests the adoption of “front door” access will allow for essential security measures while keeping data safe from hackers or an …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The Verge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I don’t want a back door,” Rogers said. “I want a front door. And I want the front door to have multiple locks. Big locks….”&lt;/p&gt;
&lt;p&gt;Rogers suggests the adoption of “front door” access will allow for essential security measures while keeping data safe from hackers or an outside attack. But opponents of the idea note that even broken into pieces, a master digital key creates security flaws. “There’s no way to do this where you don’t have unintentional vulnerabilities,” Donna Dodson, chief cyber­security adviser at the Commerce Department’s National Institute of Standards and Technologies, told the Post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That last bit is absolutely true. The government basically wants to make sure it can spy on anyone, any time it wants. That’s a bad, bad plan.&lt;/p&gt;
</content><category term="[links]"></category></entry><entry><title>Unsurprisingly, In Flux</title><link href="http://www.chriskrycho.com/2015/unsurprisingly-in-flux.html" rel="alternate"></link><published>2015-04-08T16:05:00-04:00</published><updated>2015-08-28T19:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-08:/2015/unsurprisingly-in-flux.html</id><summary type="html">The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone – React &amp; Angular – Ember – Meteor.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;This started as a &lt;a href="https://alpha.app.net/chriskrycho/post/57102562"&gt;series of posts&lt;/a&gt; on App.net. I &lt;a href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html"&gt;resolved&lt;/a&gt; a while ago that if I was tempted to do that, I should just write a blog post instead. I failed at that resolution, but at a friend’s &lt;a href="https://alpha.app.net/jws/post/57108281"&gt;suggestion&lt;/a&gt;, am adapting it into a blog post anyway. You can see the posts that prompted it &lt;a href="https://alpha.app.net/keita/post/57096585"&gt;here&lt;/a&gt; and &lt;a href="https://alpha.app.net/jws/post/57096838"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone – React &amp;amp; Angular – Ember – Meteor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backbone and related library Underscore are really collections of common JS tools and patterns you can use to write apps, but they’re not &lt;em&gt;frameworks&lt;/em&gt;, per se. You’ll write all your own boilerplate there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React and Angular supply much &lt;em&gt;more&lt;/em&gt; of the functionality, but Angular is a “meta-framework” that aims to do &lt;em&gt;some&lt;/em&gt; boilerplate but let you construct your own custom app framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is very powerful, but it’s kind of like Git: wires are exposed; you have to understand a &lt;em&gt;lot&lt;/em&gt; about the internals to get it to do what you want. Its routing functionality is pretty limited out of the box, too—so much so that there’s a near-standard third-party router.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React, as I understand it, supplies a paradigm and associated tools oriented primarily at view state management, though with capabilities via extensions for routing, etc. These tools are &lt;em&gt;extremely&lt;/em&gt; powerful for performance in particular. It’s not a full framework, and the docs expressly note that you can &lt;em&gt;just&lt;/em&gt; use React for the view layer with other tools if you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, Angular and React do &lt;em&gt;different&lt;/em&gt; things from each other, but both do substantially more than Backbone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember is a full framework, strongly emphasizing shared conventions (with a lot of common developers from Rails). It’s perhaps less adaptable than React or Angular, but is much more full-featured; you have very little boilerplate to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meteor is like Ember, but does server-side Node as well as client-side stuff, with the goal being to minimize code duplication, sharing assets as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of all of those, Ember has easily (easily!) the best-explained roadmap, most articulate leadership, and best development path. They are also aggressively adopting the best features of other frameworks wherever it makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is currently in flux, as Google has announced Angular 2.0 will be basically a completely different framework; there will be &lt;em&gt;no&lt;/em&gt; direct migration path for Angular 1.x apps to Angular 2.0+. Total rewrite required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember uses a steady 6-week release schedule with very careful regression testing and semantic versioning, with clear deprecation notices and upgrade paths, and is therefore both rapidly iterating &lt;em&gt;and&lt;/em&gt; relatively stable for use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you just need a set of tools for enhance functionality on otherwise relatively static pages, Backbone+Underscore is a great combo. If you already have a bunch of things in place but want a dedicated view layer, React is good.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re writing a new, full-on web &lt;em&gt;application&lt;/em&gt; (SPA, or organized in whatever other way), I think Ember is the very clear winner at this point. I have good confidence in their leadership and they’re firing on all cylinders.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Angular, &lt;a href="https://alpha.app.net/mikehoss"&gt;@mikehoss&lt;/a&gt; &lt;a href="https://alpha.app.net/mikehoss/post/57105656"&gt;posted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record they are doing that to make it more mobile-friendly. The Ang1 has abysmal performance on mobile. Besides a time machine, this maybe the best option. And Miško is a bit of a jerk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can’t speak to his comment about Miško (Miško Hevery, one of the leads on AngularJS), but I agree about Angular itself: the rewrite needs to happen. Angular 1.x is a mess—as are its docs. It’s just not a good time to be using 1.x for any new projects.&lt;/p&gt;
&lt;p&gt;I’ll add to these points that I’ve used Angular for the last 9 months on HolyBible.com development. As I noted: the documentation is pretty rough, and in a lot of cases you really do have to understand what the framework is doing and how before you can get it to do the things you want. This is, in one sense, exactly the &lt;em&gt;opposite&lt;/em&gt; of what I’m looking for in a framework—but it makes sense given Angular’s goal of being a meta-framework.&lt;/p&gt;
&lt;p&gt;Rather like Git, though, which was originally going to be infrastructure for version control systems which would have their own interface, but eventually just had a “good enough” interface that we’re all now stuck with, Angular is being used &lt;em&gt;as&lt;/em&gt; a framework, not just as a &lt;em&gt;meta-framework&lt;/em&gt;, and it’s unsurprisingly not great for that.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Take this for what it’s worth: not the final word (by a long stretch) on JavaScript frameworks, but rather the perspective of one guy who notably &lt;em&gt;hasn’t used all of the frameworks&lt;/em&gt;, but has spent some time looking at them. Moreover, I haven’t particularly edited this; it’s more a summary in the kind of short-form posts that I originally created than a detailed analysis. The only things I’ve done are expand some of the notes on Angular and React, and add the footnote on React.&lt;/i&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; don’t know a ton about React, but I do think a lot of what I do know about it is cool from a programming perspective. From a designer perspective, however, it’s a bit of a pain: React’s “JSX” domain-specific language is &lt;em&gt;much&lt;/em&gt; less friendly to developers than standard HTML, and therefore than either Ember or Angular, both of which implement their templating via HTML templating languages. There’s a substantil tradeoff there: React’s model is interesting not only academically but in practice because of the performance results it produces. It’s worth note, though, that others have recognized this and are adopting it to varying degrees; notably, Ember is incorporating the idea of minimizing changes to the DOM by keeping track of state and updating only differences, rather than refreshing the whole tree, in the new rendering engine (HTMLBars) they’re rolling out over the past several and future several releases.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="javascript"></category><category term="angularjs"></category><category term="emberjs"></category><category term="react"></category></entry><entry><title>The New Macbook</title><link href="http://www.chriskrycho.com/2015/the-new-macbook.html" rel="alternate"></link><published>2015-03-13T08:00:00-04:00</published><updated>2015-03-13T08:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-03-13:/2015/the-new-macbook.html</id><summary type="html">&lt;p&gt;I have seen and heard lots of discussion of the &lt;a href="http://www.apple.com/macbook/"&gt;new Macbook&lt;/a&gt; this week, and have been thinking about its appeal and Apple’s strategy a bit along the way. At first I was extremely skeptical of the only-one-port approach, but the more I’ve thought about it, the more …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have seen and heard lots of discussion of the &lt;a href="http://www.apple.com/macbook/"&gt;new Macbook&lt;/a&gt; this week, and have been thinking about its appeal and Apple’s strategy a bit along the way. At first I was extremely skeptical of the only-one-port approach, but the more I’ve thought about it, the more sense it makes to me. Why? &lt;em&gt;Market segmentation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a MacBook, not a MacBook Pro. &lt;em&gt;I&lt;/em&gt; need more ports than this. But &lt;a href="http://jaimiekrycho.com/"&gt;Jaimie&lt;/a&gt;? I don’t remember the last time I saw her plug anything into the machine besides its power cord. This is a MacBook for ordinary users, not a machine for power-users. Now, I still think that the loss of MagSafe is a bit sad; it has saved us more than once (especially with young children in the house). But in terms of the needs of ordinary users, a single port that &lt;em&gt;can&lt;/em&gt; double as video out or USB input really is perfect.&lt;/p&gt;
&lt;p&gt;In the meantime, it lets Apple cleanly differentiate between its MacBook and MacBook Pro lines. If you need the ports for expandability—because you’re a power user—you get a Pro. If you don’t, you get the MacBook. The tradeoffs with CPU make sense here, too: a computer that performs about like a 2012 MacBook Air would not be my favorite for development work. But for the writing work that Jaimie does? Again, the performance levels there are perfectly reasonable. It’ll do everything she needs, and do it &lt;em&gt;well&lt;/em&gt;. Throw in the retina screen, and it’ll be really nice for her purposes.&lt;/p&gt;
&lt;p&gt;In fact, I fully expect that we’ll end up getting her a 2nd or 3rd generation machine when we need to replace her current (a 2010 white MacBook) sometime in 2016–17.&lt;/p&gt;
&lt;p&gt;So: better done than I initially thought, Apple.&lt;/p&gt;
</content></entry><entry><title>The Tablet “Productivity” Problem</title><link href="http://www.chriskrycho.com/2015/the-tablet-productivity-problem.html" rel="alternate"></link><published>2015-02-25T21:35:00-05:00</published><updated>2015-02-25T21:35:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-02-25:/2015/the-tablet-productivity-problem.html</id><summary type="html">&lt;p&gt;I’m thinking this one through out loud. I rather hope that I can take these nascent thoughts and turn them into a more fully-fledged essay over the course of this year, so if you have thoughts, I’d &lt;em&gt;love&lt;/em&gt; to hear them. Hit me up on &lt;a href="https://twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;, &lt;a href="https://alpha.app.net/chriskrycho"&gt;ADN&lt;/a&gt;, or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m thinking this one through out loud. I rather hope that I can take these nascent thoughts and turn them into a more fully-fledged essay over the course of this year, so if you have thoughts, I’d &lt;em&gt;love&lt;/em&gt; to hear them. Hit me up on &lt;a href="https://twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;, &lt;a href="https://alpha.app.net/chriskrycho"&gt;ADN&lt;/a&gt;, or via &lt;a href="mailto:chris@krycho.com"&gt;email&lt;/a&gt;. In the meantime… consider this a rough draft of a larger idea I’m working out.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I saw a &lt;a href="https://jasonirwin.ca/2015/02/24/whats-a-tablet-for/"&gt;post&lt;/a&gt; by internet acquaintance Jason Irwin (&lt;a href="https://alpha.app.net/matigo"&gt;@matigo&lt;/a&gt; on ADN) yesterday about how he doesn’t find tablets especially compelling. There were quite a few things he said in the piece that did &lt;em&gt;not&lt;/em&gt; resonate with me (and even a few suspicions I think are out and out incorrect), but generally on technology things like this I simply say: to each his own. So what follows is not so much a response to Jason’s post as some thoughts inspired by it.&lt;/p&gt;
&lt;p&gt;Jason hit on a meme that’s been extremely common about tablets in general and iPads in particular: that you cannot do real work on them, only “consumption”. What is meant, nearly always, in such discussions, is that it is harder to write, develop software, and other keyboard-intensive activities using an iPad than a traditional laptop or desktop form factor. This is certainly true of &lt;em&gt;those&lt;/em&gt; activities. Even of a few other activities Jason mentions, iPads do &lt;em&gt;very&lt;/em&gt; well.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; But there is another, more important issue here.&lt;/p&gt;
&lt;p&gt;We (quite readonably) tend to define productivity poorly in terms of output. In that sense, there are many categories for which the iPad is &lt;em&gt;not&lt;/em&gt; as capable as a laptop. It is true, for example, that I do not do a lot of writing or software development on my iPad (a retina Mini)—I’ll start drafts of blog posts (part of this was dictated on my iPhone!), and occasionally log into and do administrative work on a server via SSH using an iPad client. That doesn’t mean it isn’t a valuable device for me, though. It simply means that “valuable” and “productive” are not synonyms.&lt;/p&gt;
&lt;p&gt;Less helpfully, however, we also tends to define “value” in terms of “productivity”. People say that iPads are not valuable to them because they do not specifically allow them to be &lt;em&gt;productive&lt;/em&gt; in the sense outlined above… but then, there are a great many valuable things that are not producing content. I use my iPad daily for a wide array of things, and find it enormously preferable to a laptop for nearly all of them. True, many of them are “consumptive”—but since when did that become a bad thing?&lt;/p&gt;
&lt;p&gt;I recognize that the answer may seem obvious against the backdrop of a consumerist culture against which many an anti-consumerism critique has rightly been levied. But think about what we mean by “consumption” in this case. Nearly every day I use my iPad both for reading and for displaying (and for learning) music. To be sure, I also watch the occasional YouTube video, interact on Twitter and App.net, and so on. But the vast majority of what I do with an iPad is best summed up as &lt;em&gt;learning&lt;/em&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Whether it is reading through a few carefully selected RSS feeds in &lt;a href="http://supertop.co/unread/"&gt;Unread&lt;/a&gt;, reading the news in &lt;a href="http://cir.ca"&gt;Circa&lt;/a&gt;,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; working through reading for school in iBooks,&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; perusing the &lt;a href="http://emberjs.com"&gt;EmberJS&lt;/a&gt; docs in preparation for a major project I’ll be starting with the tool in a few months, or reading the Bible every morning, I do a &lt;em&gt;lot&lt;/em&gt; of reading on my iPad. Add in the fact that I use it for music as I practice piano, and I get an awful lot of mileage out of it every day.&lt;/p&gt;
&lt;p&gt;Now, none of this negates Jason’s post in particular. If he doesn’t get that kind of traction out of an iPad, that’s no skin off my back. But I do think that the criticism of devices which are primarily “consumptive”—perhaps implied in Jason’s post; certainly stated outright in many other responses to the iPad—is misplaced. Whether simply for entertainment (joy in the arts is good!) or in reading (joy in the arts &lt;em&gt;or&lt;/em&gt; in self-betterment is good!) or in the myriad other ways that people put the iPad&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; to use that are not making something new, there is value in the kinds of consumption done with it.&lt;/p&gt;
&lt;p&gt;Are there valid critiques to be offered of tablets, including that certain kinds of consumptive habits are problematic? Of course. But reducing things to their productive utility is ethically flawed, and reducing human pursuits to their productive output even more so. It is just fine if &lt;a href="https://alpha.app.net/matigo"&gt;@matigo&lt;/a&gt; isn’t the sort of guy who loves an iPad. It is &lt;em&gt;not&lt;/em&gt; fine if tech pundits want to slam the iPad and other tablets because they have a misanthropic view of human flourishing—and make no mistake, the utilitarian calculus so often levied against tablets is just that. People are more than what they make; their time is valuable even (and sometimes especially) when not producing anything tangible at all.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Notably, his point about keyboards that differ for different applications has been addressed quite thoroughly in that market! Most music apps ship with music-oriented interfaces, &lt;em&gt;not&lt;/em&gt; traditional QUERTY-style keyboards.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, in theory I could do that on another, less expensive device—but I had a Nexus 7 and nothing I have seen about Android tablets since then convinces me the Android tablet ecosystem has meaningfully improved in the last couple years. The experience factor in using things really does matter to me, and iOS gives me an enormously better experience in every category, even with its foibles and flaws, and nowhere more so than in the massively better app ecosystem.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;An app my friend &lt;a href="http://independentclauses.com/"&gt;Stephen Carradini&lt;/a&gt; and I like so much that we did a &lt;a href="http://www.winningslowly.org/2015/01/take-my-money-now/"&gt;whole episode&lt;/a&gt; of &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt; on it!&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;I like ePUB way better than Kindle’s proprietary, and haven’t gotten around to finding a replacement for &lt;a href="http://readmill.com"&gt;Readmill&lt;/a&gt; yet.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;And yes, with plenty of other tablets, too! If you’re a Microsoft Surface person, that’s splendid as well.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>Facebook's "Security" Requirements</title><link href="http://www.chriskrycho.com/2015/facebooks-security-requirements.html" rel="alternate"></link><published>2015-02-21T12:35:00-05:00</published><updated>2015-02-21T12:35:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-02-21:/2015/facebooks-security-requirements.html</id><summary type="html">&lt;p&gt;I went to set up 2-step login (AKA 2-factor authentication, or what Facebook calls “Login Approvals”) on Facebook yesterday morning, and was greeted with this lovely message when I clicked “enable”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your current Firefox settings might make it hard to use Login Approvals. It’s probably because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You sometimes clear …&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I went to set up 2-step login (AKA 2-factor authentication, or what Facebook calls “Login Approvals”) on Facebook yesterday morning, and was greeted with this lovely message when I clicked “enable”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your current Firefox settings might make it hard to use Login Approvals. It’s probably because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You sometimes clear your cookies.&lt;/li&gt;
&lt;li&gt;Your browser is set to automatically clear cookies whenever it closes.&lt;/li&gt;
&lt;li&gt;You use your browser’s “private browsing” or “incognito” mode.&lt;/li&gt;
&lt;li&gt;You’re using a new browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It may take a few days after fixing these issues before you will be able to enable Login Approvals. You also may need to log out and then log in again after fixing these settings for the changes to take effect.&lt;/p&gt;
&lt;p&gt;Visit the Help Center for step-by-step directions on how to fix these settings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I use Firefox for the social media access I do online—and because I don’t like being tracked, I tell Firefox not to remember history and to delete cookies as soon as I close the browser, and I run &lt;a href="https://github.com/gorhill/uBlock"&gt;μBlock&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and &lt;a href="https://disconnect.me/"&gt;Disconnect&lt;/a&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you attempt to enable 2-step login, Facebook checks your security policy… and &lt;em&gt;will not let you turn it on&lt;/em&gt; if your settings are like mine. They supply the message above, with no option to proceed anyway. Of course, there is no technical issue with using 2-step login with a browser configured this way. I use it for GitHub, Google, my domain registrar, and every other service with 2-step login.&lt;/p&gt;
&lt;p&gt;Facebook probably has two motives here. The better one is user experience: it &lt;em&gt;would&lt;/em&gt; be frustrating if you are a non-tech-savvy user who doesn’t understand the consequences of setting this given the browser settings I have. But of course, if they were primarily just concerned with that, they could give the warning and then let users say, “Go ahead; I know what I’m getting into.” The second, less obvious but almost certainly more important motive from Facebook’s point of view, is to discourage people from using a browser the way I do. They want to be able to monetize my Facebook use better, and this means not just my time on Facebook, but my time all over the web. Facebook wants to know what I’m looking at any time I’m surfing &lt;em&gt;anywhere&lt;/em&gt; so that they can tailor their ads to me.&lt;/p&gt;
&lt;p&gt;I’m not interested in being tracked that way.&lt;/p&gt;
&lt;p&gt;Apparently, Facebook isn’t interested in letting people have actual, modern security unless they’re willing to be tracked that way.&lt;/p&gt;
&lt;p&gt;We have a problem here.&lt;/p&gt;
&lt;p&gt;As it turns out, of course, people like me aren’t particularly valuable customers to Facebook anyway, so they probably don’t mind the fact that they’re losing more and more of our time. But losing that time they are. My use of Facebook is diminishing at an ever-increasing rate, for countless little reasons like this, where Facebook’s ad-driven motivations push them to treat me poorly. Too bad for them.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If anyone tells you that blocking ads is “stealing”, they’re talking up nonsense. The Internet is built in such a way that if nothing else you can always just request the plain text version of a website, and that’s extremely important for many reasons, including accessibility. I &lt;em&gt;choose&lt;/em&gt; to leave ads on for any number of sites I want to support, but at the end of the day it’s every publisher’s choice how theyw ant to make money. If a newspaper supports itself with ads and coupons, I have every right to throw them in the trash without a glance; the same is true online.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, I know this isn’t foolproof and I’m still being tracked. It’s impossible &lt;em&gt;not&lt;/em&gt; to be tracked to some degree or another. What I am doing here is &lt;em&gt;decreasing&lt;/em&gt; the degree to which companies can track me.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>Growing Up Together</title><link href="http://www.chriskrycho.com/2014/growing-up-together.html" rel="alternate"></link><published>2014-11-15T00:30:00-05:00</published><updated>2014-11-15T00:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-11-15:/2014/growing-up-together.html</id><summary type="html">&lt;p&gt;A few years ago, you might have caught me in a grumpy moment grousing about JavaScript. I distinctly did &lt;em&gt;not&lt;/em&gt; like writing it. Every time I sat down to deal with it, I found myself in a tangled mess of plain JavaScript, jQuery, and DOM manipulations that inevitably left me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few years ago, you might have caught me in a grumpy moment grousing about JavaScript. I distinctly did &lt;em&gt;not&lt;/em&gt; like writing it. Every time I sat down to deal with it, I found myself in a tangled mess of plain JavaScript, jQuery, and DOM manipulations that inevitably left me tearing my hair out.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I found it difficult to write in the first place, and even harder to maintain in the long run. I could not come up with good ways to organize it, especially because so much of what I was doing was so thoroughly &lt;em&gt;ad hoc&lt;/em&gt; in nature. Cobble this together over here; scrounge together those things over there; hope nothing collides in the middle.&lt;/p&gt;
&lt;p&gt;In the last four months, I have written several thousand lines of JavaScript, and I have &lt;em&gt;loved&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;For my latest major project, relaunching &lt;a href="https://holybible.com"&gt;HolyBible.com&lt;/a&gt;, I wrote the front end in &lt;a href="https://angularjs.org"&gt;AngularJS&lt;/a&gt; and the back end as an &lt;a href="http://expressjs.com"&gt;Express&lt;/a&gt; app (the most popular &lt;a href="http://nodejs.org"&gt;NodeJS&lt;/a&gt; web framework). I’ve written gobs of tests in &lt;a href="http://jasmine.github.io"&gt;Jasmine&lt;/a&gt; (using &lt;a href="https://github.com/mhevery/jasmine-node"&gt;jasmine-node&lt;/a&gt; for server-side tests) and drawn on tons of other open-source packages.&lt;/p&gt;
&lt;p&gt;And I have &lt;em&gt;loved&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;A small example: a moment ago, looking up the link for Jasmine, I noted that the latest version released today. My response was, “Ooh—cool!”&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What changed? Well, mostly I changed, but also JavaScript changed a bit. We both grew up over the last four years. On the JavaScript side of things, a lot of good design patterns and tools have come into play in that span. I’m sure there were plenty of good, disciplined web developers writing clear, careful, well-organized client-side JavaScript four years go. But in the interval, that kind of JavaScript got a lot more prominent, in part because it has had help from the rapid rise of server-side JavaScript in the form of Node.js and its flourishing ecosystem of components and tools. Build tools like &lt;a href="http://browserify.org"&gt;Browserify&lt;/a&gt; and development tools like &lt;a href="http://livereload.com"&gt;LiveReload&lt;/a&gt; and &lt;a href="https://incident57.com/codekit/"&gt;Codekit&lt;/a&gt; have combined with best practices learned from those long years of jQuery/DOM-manipulation hell so that these days, good JavaScript is a lot like good programming in any other language: highly modular, carefully designed, and well-organized.&lt;/p&gt;
&lt;p&gt;In the same period of time, I have matured enormously as a developer (just enough to see how far I still have to go, of course). At the point where I most hated JavaScript, I also really struggled to see the utility of callbacks. Frankly, it took me the better part of a month just to get my head around it—most of the tutorials out there just assumed you understood them already, and, well: I didn’t. Functions as first-class members of a language was new to me at that point. Fast-forward through several years of full-time Python development, lots of time spent reading about software development and some harder computer science concepts, and my perspective on JavaScript has shifted more than a little. Closures are beautiful, wonderful things now. Functions as arguments to other functions are delightful and extremely expressive. Prototypal inheritance—trip me up though it sometimes still does—is a fascinating variation on the idea of inheritance and one that I think I like rather better than classical inheritance.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are still things I don’t love about JavaScript. Its syntax owes far too much to the C family of languages to make me happy; I quite like the way that CoffeeScript borrows from Python (white-space-delimited blocks, use of equality words like &lt;code&gt;is&lt;/code&gt; and boolean rules like &lt;code&gt;and&lt;/code&gt; rather than &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; respectively, etc.). And I am looking forward to a number of features coming in the next version of JavaScript—especially generators and the &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; keywords, which will allow for &lt;em&gt;much&lt;/em&gt; saner patterns.&lt;/p&gt;
&lt;p&gt;But all of that is simply to say that I am now starting to know JavaScript enough to know that its &lt;em&gt;real&lt;/em&gt; issues aren’t the surface-level differences from the other languages with which I’m familiar. They’re not even the warts I noted here. They’re things like the mix of classical and prototypal inheritance in the way the language keywords and object instantiation work. But I don’t mind those. Every language has tradeoffs. Python’s support for lambdas is pretty minimal, despite the utility of anonymous functions, for example. But I &lt;em&gt;like&lt;/em&gt; the tradeoffs JavaScript makes.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In other words, I discovered the same thing so many other people have over the last few years: JavaScript isn’t just a good choice for utilitarian reasons. Beneath that messy exterior is a gem of a language. I’m having a lot of fun with it.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Thus the early balding starting by my temples.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;My wife’s bemused response: “Is that &lt;em&gt;another&lt;/em&gt; language?” Take that as you will.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;The couple weeks I got to spend &lt;a href="http://www.chriskrycho.com/2014/a-little-crazy.html"&gt;playing&lt;/a&gt; with &lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt; certainly helped! Io’s prototypal inheritance is semantically “purer” than JavaScript’s, which is quite an improvement in my view. JavaScript’s &lt;code&gt;new&lt;/code&gt; keyword and the pseudo-classical object pattern it brings along can go rot in a bog.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Truth be told, I like them even better from the perspective of CoffeeScript, which hides a lot of the rough edges of JavaScript and, as noted above, brings in quite a few things I like from Python. For my part, I intend to write as much CoffeeScript as possible going forward.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[software development]"></category></entry><entry><title>A Ridiculous Situation</title><link href="http://www.chriskrycho.com/2014/a-ridiculous-situation.html" rel="alternate"></link><published>2014-11-07T21:00:00-05:00</published><updated>2014-11-07T21:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-11-07:/2014/a-ridiculous-situation.html</id><summary type="html">An example of just how deep the rabbit-hole can go.</summary><content type="html">&lt;p&gt;One of the pieces of code I’m maintaining has an &lt;em&gt;absurd&lt;/em&gt; situation in its build structure—honestly, I’m not sure how it ever compiled. For simplicity’s sake, let us assume the four following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secondary.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writer.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculator.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project has many more files than this, of course, but these are the important ones for demonstrating this particular piece of insanity (which shows up &lt;em&gt;many&lt;/em&gt; places in the codebase).&lt;/p&gt;
&lt;p&gt;I’m reproducing here some dummy code representing an &lt;em&gt;actual set of relationships in the codebase&lt;/em&gt;. The functions and module nameshave been changed; the relationships between the pieces of code have not.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; When I started trying to build the program that included what I am representing as &lt;code&gt;main.c&lt;/code&gt; below, this is the basic structure I found:&lt;/p&gt;
&lt;section id="main.cpp" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;main.cpp&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the main module of the program. In the actual code in which I found this particular morass, it was actually code generated by the UI builder in Visual Studio 6&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and then turned into an unholy mess by a developer whose idea of good programming involved coupling the various parts of the code as tightly as possible.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;#include &amp;quot;calculator.h&amp;quot;
#include &amp;quot;secondary.h&amp;quot;

int a=0, int b=0;

int addNumbers(a, b) {
    return a+b;
}

void doBadThingsWithGlobals(int * someNumber) {
    a = 6;
    *someOtherNumber = 5;
}

#include &amp;quot;writer.h&amp;quot;

void main() {
    a = 3;
    doBadThingsWithGlobals(&amp;amp;b);
    addNumbers(a, b);
    doStuffWithNumbers(a,b);
    subtractNumbers(b, a);
}

// More insanity follows...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, the main function and the &lt;code&gt;doBadThingsWithGlobals&lt;/code&gt; function are both modifying global state, and yes, there is an include statement midway down through the module. (Just wait till you see what it does.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="secondary" class="level3"&gt;
&lt;h3&gt;“secondary”&lt;/h3&gt;
&lt;p&gt;Here is a secondary module which has been somewhat cleaned up. It has normal relationships between header and source files, and includes all its dependency headers at the top of the file. It has a header which defines the public API for the module, and that even has inclusion guards on it.&lt;/p&gt;
&lt;section id="secondary.h" class="level4"&gt;
&lt;h4&gt;&lt;code&gt;secondary.h&lt;/code&gt;&lt;/h4&gt;
&lt;pre class="c"&gt;&lt;code&gt;#ifndef SECONDARY_H
#define SECONDARY_H

int doStuffWithNumbers();

#endif SECONDARY_H&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="secondary.c" class="level4"&gt;
&lt;h4&gt;&lt;code&gt;secondary.c&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;doStuffWithNumbers&lt;/code&gt; function here calls &lt;code&gt;addNumbers&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;#include &amp;quot;secondary.h&amp;quot;
#include &amp;quot;calculator.h&amp;quot;

int doStuffWithNumbers(int x, int y) {
    addNumbers(x, y);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;But wait!&lt;/em&gt; you say, &lt;em&gt;That function isn’t defined here!&lt;/em&gt; Ah, and you would be right, except that it doesn’t refer to the &lt;code&gt;addNumbers&lt;/code&gt; function in &lt;code&gt;main.c&lt;/code&gt;. It refers to a function implementation in &lt;code&gt;calculator.h&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="calculator.h" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;calculator.h&lt;/code&gt;&lt;/h3&gt;
&lt;pre class="c"&gt;&lt;code&gt;int addNumbers(int p, int q) {
    return p + q;
}

int subtractNumbers(int r, int s) {
    return r - s;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Strangely, this &lt;code&gt;addNumbers&lt;/code&gt; function is identical to the one in &lt;code&gt;main.c&lt;/code&gt;. Even &lt;em&gt;more&lt;/em&gt; strangely, it is defined—not merely declared, actually defined—in the header file! Nor is this the only such function. Look at the details of &lt;code&gt;writer.h&lt;/code&gt;, which was mysteriously included above in the middle of the main module.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="writer.h" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;writer.h&lt;/code&gt;&lt;/h3&gt;
&lt;pre class="c"&gt;&lt;code&gt;void writeStuff() {
    fprintf(stdout, &amp;quot;a: %d, b: %d&amp;quot;, a, b);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, we have a full-fledged implementation in the header file. Why, you ask? Presumably because the developer responsible for writing this code never quite got his head around how C’s build system works. The entirety of one of the central components of this software—an element that in any normal build would be a common library—was a single, approximately 2,000-line &lt;em&gt;header file&lt;/em&gt;. (Say hello to &lt;code&gt;calculator.h&lt;/code&gt; up there; that’s what I’m abstracting away for this example.)&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Worse: it is printing the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and no, I am not skipping some part of &lt;code&gt;writer.h&lt;/code&gt;. It is getting those from &lt;code&gt;main.c&lt;/code&gt;, because it was included after they were defined, and the build process essentially drops this header inline into &lt;code&gt;main.c&lt;/code&gt; before it compilation.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; So here we have a header file with the implementation of a given piece of code, included in a specific location and defined in such a way that if you change where it is included, it will no longer function properly (since the variables will not have been defined!)&lt;/p&gt;
&lt;p&gt;Worse, there are conflicting definitions for one of the functions used in &lt;code&gt;main.c&lt;/code&gt;, and because of its dependency on &lt;em&gt;other&lt;/em&gt; functions in &lt;code&gt;calculator.h&lt;/code&gt; (e.g. &lt;code&gt;subtractNumbers&lt;/code&gt; in this mock-up), it cannot be removed! Moreover, given the many places &lt;code&gt;calculator.h&lt;/code&gt; is referenced throughout the code base, it is non-trivial to refactor it.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If this sounds insane… that’s because it is.&lt;/p&gt;
&lt;p&gt;If you’re curious how I dealt with it, well… I renamed the &lt;code&gt;addNumbers()&lt;/code&gt; function in &lt;code&gt;main.c&lt;/code&gt; to &lt;code&gt;_addNumbers()&lt;/code&gt; and put a loud, angry &lt;code&gt;TODO&lt;/code&gt; on it for the current release, because the only way to fix it is to refactor this whole giant mess.&lt;/p&gt;
&lt;p&gt;The takeaway of the story, if there is one, is that people will do crazier, weirder, worse things than you can possibly imagine when they don’t understand the tools they are using and just hack at them till they can make them work. The moral of the story? I’m not sure. Run away from crazy code like this? Be prepared to spend your life refactoring?&lt;/p&gt;
&lt;p&gt;How about: try desperately &lt;em&gt;not&lt;/em&gt; to leave this kind of thing for the person following you.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;That’s actually not &lt;em&gt;wholly&lt;/em&gt; true, because these pieces of code are also duplicated in numerous places throughout the codebase. We’ve eliminated as many as possible at present… but not all of them, courtesy of the crazy dependency chains that exist. Toss in a dependency on Visual Studio 6 for some of those components, and, well… suffice it to say that we’re just happy there are only two versions floating around instead of the seven that were present when I started working with this codebase two and a half years ago.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, &lt;a href="http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_6.0_.281998.29"&gt;&lt;em&gt;that&lt;/em&gt;&lt;/a&gt; Visual Studio 6. The one from 1998. Yes, that’s insane. No, we haven’t managed to get rid of it yet, though we’re close. So close.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I am not joking. Multi-thousand line functions constituting the entirety of a program are not just &lt;em&gt;normal&lt;/em&gt;, they are pretty much the only way that programmer ever wrote. When you see the code samples below, you will see why: someone was lacking an understanding of C’s build system.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Also, that’s the piece of code of which I found seven different versions in various places when I started. Seven!&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;I once ran into some code working on a different project for an entirely different client where there had been a strict 1,000-line limit to C source files, as part of an attempt to enforce some discipline in modularizing the code. Instead of embracing modularity, the developers just got in the habit of splitting the source file and adding &lt;code&gt;#include&lt;/code&gt; statements at the end of each file so that they could just keep writing their non-modular code.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;I have tried. Twice. I’m hoping that the third time &lt;em&gt;will&lt;/em&gt; be the charm.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[software development]"></category></entry><entry><title>Nailed It</title><link href="http://www.chriskrycho.com/2014/nailed-it.html" rel="alternate"></link><published>2014-10-22T22:15:00-04:00</published><updated>2014-10-22T22:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-10-22:/2014/nailed-it.html</id><summary type="html">Someone leaked a copy of the trailer for Avengers: Age of Ultron&amp;hellip; and Marvel didn&amp;rsquo;t throw a fit. Quite the opposite, in fact.</summary><content type="html">&lt;p&gt;Yesterday, something rather remarkable happened. Someone leaked a copy of the trailer for &lt;em&gt;Avengers: Age of Ultron&lt;/em&gt;… and Marvel, rather than throwing a hissy fit, just tweeted:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dammit, Hydra. (&lt;a href="https://twitter.com/Marvel/status/525071656306626560"&gt;October 22, 7:50 PM EST&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pitch perfect. It’s self-aware, self-&lt;em&gt;referential&lt;/em&gt; in a funny way without being too clever-seeming or coming off like it’s trying too hard, and just a generally good response. The team could have fought it (though ultimately that would have just made things worse), but instead Marvel played its hand perfectly. The response was was funny &lt;em&gt;and&lt;/em&gt; demonstrated that the folks who work there actually understand how the internet works.&lt;/p&gt;
&lt;p&gt;That alone would have been good enough to put Marvel in a league of its own when it comes to managing things &lt;em&gt;not&lt;/em&gt; going the way hoped for. But (after what I’m sure was considerable back-room wrangling), they followed it up an hour and a half later with another, equally fantastic tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here it is! Watch the &lt;a href="https://twitter.com/Avengers"&gt;@Avengers&lt;/a&gt;: &lt;a href="https://twitter.com/hashtag/AgeofUltron?src=hash"&gt;#AgeofUltron&lt;/a&gt; Teaser Trailer right NOW: &lt;a href="http://youtu.be/tmeOjFno6Do" class="uri"&gt;http://youtu.be/tmeOjFno6Do&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Avengers?src=hash"&gt;#Avengers&lt;/a&gt; (&lt;a href="https://twitter.com/Marvel/status/525093857772318720"&gt;October 22, 9:18 PM EST&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your average old-media company these days would have thrown a fit and made a stink about the release of their media. They would have done everything in their power to get the video taken down. Many companies &lt;em&gt;have&lt;/em&gt; done just that under similar circumstances, aiming to get the trailer, snippets of the movie, music, or the like removed from the internet. But that simply isn’t how the internet works: it famously “treats censorship like damage and routes around it” (&lt;a href="http://www.chemie.fu-berlin.de/outerspace/internet-article.html"&gt;John Gilmore&lt;/a&gt;). Once a video is online, it’s online. Someone, somewhere, still has a copy of it and can put it back up. So rather than fight it… Marvel just rolled with it and made the best of the situation. They cracked a joke, went ahead and put the trailer out themselves, and earned general approval from the internet. Again.&lt;/p&gt;
&lt;p&gt;Despite being a decades-old company, Marvel is clearly a new media company through and through at this point. They managed to dodge the &lt;a href="http://www.economist.com/blogs/economist-explains/2013/04/economist-explains-what-streisand-effect"&gt;Streisand effect&lt;/a&gt; quite nicely, turning what could have been an opportunity for hostility all around into a PR coup and a win that they couldn’t have scored on their own.&lt;/p&gt;
&lt;p&gt;Other old (and new!) media companies, take note. &lt;em&gt;This&lt;/em&gt; is the way you play the game. You recognize when the cat is out of the bag and you run with it. Own it. Make it your own somehow. Don’t let it own you. The internet is a big, crazy, chaotic place, and you can never hope to control it—nor even the narrative about you and your stuff, whatever that may be—like you might have been able to do twenty-five years ago. But that’s okay. If you can roll with the punches, you can still come out ahead, and you’ll look a little more human doing it. I call that winning.&lt;/p&gt;
&lt;p&gt;(Go Marvel.)&lt;/p&gt;
</content></entry><entry><title>The Next Generation of Version Control</title><link href="http://www.chriskrycho.com/2014/next-gen-vcs.html" rel="alternate"></link><published>2014-10-16T21:45:00-04:00</published><updated>2014-10-20T07:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-10-16:/2014/next-gen-vcs.html</id><summary type="html">The current state of affairs with version control is a mess. Things we can get right next time around.
</summary><content type="html">&lt;p&gt;The current state of affairs in version control systems is a mess. To be sure, software development is &lt;em&gt;far&lt;/em&gt; better with &lt;em&gt;any&lt;/em&gt; of the distributed version control systems in play—the three big ones being &lt;a href="http://git-scm.com"&gt;Git&lt;/a&gt;, &lt;a href="http://mercurial.selenic.com"&gt;Mercurial&lt;/a&gt; (&lt;code&gt;hg&lt;/code&gt;), and &lt;a href="http://bazaar.canonical.com/en/"&gt;Bazaar&lt;/a&gt; (&lt;code&gt;bzr&lt;/code&gt;), with a few other names like &lt;a href="http://www.fossil-scm.org"&gt;Fossil&lt;/a&gt; floating around the periphery—than it ever was in a centralized version control system. There are definitely a few downsides for people converting over from some standard centralized version control systems, notably the increased number of steps in play to accomplish the same tasks.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; But on the whole, the advantages of being able to commit locally, have multiple complete copies of the repository, and share work without touching a centralized server far outweigh any downsides compared to the old centralized system.&lt;/p&gt;
&lt;p&gt;That being so, my opening statement remains true, I think: &lt;em&gt;The current state of affairs in version control is a mess.&lt;/em&gt; Here is what I mean: of those three major players (Git, Hg, and Bazaar), each has significant downsides relative to the others. Git is famously complex (even arcane), with a user interface design philosphy closely matching the UI sensibilities of Linus Torvalds—which is to say, all the wires are exposed, and it is about as user-hostile as it could be.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; It often outperforms Hg or Bazaar, but it has quirks, to say the very least. Hg and Bazaar both have &lt;em&gt;much&lt;/em&gt; better designed user interfaces. They also have saner defaults (especially before the arrival of Git 2.0), and they have better branching models and approaches to history.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; They have substantially better documentation—perhaps especially so with Bazaar, but with either one a user can understand how to use the tool &lt;em&gt;without having to understand the mechanics of the tool&lt;/em&gt;. This is simply not the case with Git, and while I &lt;em&gt;enjoy&lt;/em&gt; knowing the mechanics of Git because I find them interesting, &lt;em&gt;having&lt;/em&gt; to understand the mechanics of a tool to be able to use it is a problem.&lt;/p&gt;
&lt;p&gt;But the other systems have their downsides relative, to Git, too. (I will focus on Hg because I have never used Bazaar beyond playing with it, though I have read a good bit of the documentation.) Mutable history in Git is valuable and useful at times; I have rewritten whole sequences of commits when I realized I committed the wrong things but hadn’t yet pushed.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Being able to commit chunks instead of having to commit whole files at a go is good; I feel the lack of this every time I use Hg.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; (Needing to understand the &lt;em&gt;file system&lt;/em&gt; that Git invented to make sure you do not inadvertently destroy your repository is… not so good.) A staging area is nice,&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; (even if &lt;em&gt;having&lt;/em&gt; to stage everything manually can be in the pain in the neck&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In short, then, there was no clear winner for this generation. Each of the tools has significant upsides and downsides relative to the others. Git has become the &lt;em&gt;de facto&lt;/em&gt; standard, but &lt;em&gt;not&lt;/em&gt; because of its own superiority over the alternatives. Rather, it won because of other forces in the community. Mostly I mean &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;, which is a &lt;em&gt;fantastic&lt;/em&gt; piece of software and easily the most significant driving factor in the wider adoption of Git as a tool. The competition (&lt;a href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt; and &lt;a href="https://launchpad.net"&gt;Launchpad&lt;/a&gt;) are nowhere near the same level of sophistication or elegance, and they certainly have not managed to foster the sorts of community that GitHub has. The result has been wide adoption of Git, and a degree of Stockholm Syndrome among developers who have adopted it and concluded that the way Git works is the way a distributed version control system &lt;em&gt;should&lt;/em&gt; work.&lt;/p&gt;
&lt;p&gt;It is not. Git is complicated to use and in need of tools for managing its complexity; the same is true of Hg and Bazaar, though perhaps to a slightly lesser extent because of their saner branching models. This is what has given rise to the &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;plethora&lt;/a&gt; of &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;different&lt;/a&gt; formal &lt;a href="https://about.gitlab.com/2014/09/29/gitlab-flow/"&gt;workflows&lt;/a&gt; representing various attempts to manage that complexity (which have been &lt;a href="https://bitbucket.org/yujiewu/hgflow/wiki/Home"&gt;applied&lt;/a&gt; to other systems &lt;a href="https://andy.mehalick.com/2011/12/24/an-introduction-to-hgflow"&gt;as well&lt;/a&gt;). Managing branching, linking that workflow to issues, and supplying associated documentation for projects have also cropped up as closely associated tasks— thus the popularity of GitHub issues and Bitbucket wikis, not to mention &lt;a href="http://www.fossil-scm.org"&gt;Fossil’s&lt;/a&gt; integration of both into the DVCS tool itself. None of the tools handle differences between file systems very elegantly (and indeed, it took &lt;em&gt;years&lt;/em&gt; for Git even to be useable on Windows). All of them especially struggle to manage symlinks and executable flags.&lt;/p&gt;
&lt;p&gt;So there is an enormous opportunity for the &lt;em&gt;next&lt;/em&gt; generation of tools. Git, Hg, and so on are huge steps forward for developers from CVS, Visual SourceSafe, or SVN. But they still have major weaknesses, and there are many things that not only can but should be better. In brief, I would love for the next-generation version control system to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distributed (this is now a non-negotiable);&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;well-documented—&lt;em&gt;at least&lt;/em&gt; as well as Hg is, and preferably as well as Bazaar is;&lt;/li&gt;
&lt;li&gt;well-designed, which is to say having a user interface that is actually a user-interface (like Hg’s) and not an extremely leaky abstraction around the mechanics;&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;file-system oriented, &lt;em&gt;not&lt;/em&gt; diff-oriented: this is one of Git’s great strengths and the reason for a lot of its performance advantages;&lt;/li&gt;
&lt;li&gt;extensible, with a good public API so that it is straightforward to add functionality like wikis, documentation, social interaction, and issue tracking in a way that actually integrates the tool;&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and last but not least, truly cross-platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is a non-trivial task, but the first DVCS that manages to hit even a sizeable majority of these desires will gain a lot of traction in a hurry. The second generation of distributed version control has been good for us. The third could be magical.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;A point that was highlighted for me in a conversation a few months ago with my father, a programmer who has been using SVN for a &lt;em&gt;long&lt;/em&gt; time and found the transition to Git distinctly less than wonderful.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Anyone who feels like arguing with me on this point should go spend five minutes laughing at the &lt;a href="http://git-man-page-generator.lokaltog.net"&gt;fake man pages&lt;/a&gt; instead.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Few things are as hotly debated as the relative merits of the different systems’ branching models and approaches to history. At the least, I can say that Hg and Bazaar’s branching models are &lt;em&gt;more to my taste&lt;/em&gt;.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Yes, there are extensions that let you do this with Hg, but they are fragile at best in my experience, and substantially less capable than Git’s.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Yes, I know about Hg’s record extension. No, it is &lt;em&gt;not&lt;/em&gt; quite the same, especially because given the way it is implemented major GUI tools cannot support it without major chicanery.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Yes, I know about Hg’s queue extension, too. There is a reason it is not turned on by default, and using it is substantially more arcane than Git’s staging are. Think about that for a minute.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;Yes, there is the &lt;code&gt;-a&lt;/code&gt; flag. No, I do not want to have to remember it for every commit.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Let’s be honest: if Git’s abstraction were a boat, it would sink. It’s just that leaky.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;GitHub does all of this quite well… but they have had to write heaps and gobs of software &lt;em&gt;around&lt;/em&gt; Git to make it work.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category></entry><entry><title>Pushing Into C's Corner Cases</title><link href="http://www.chriskrycho.com/2014/pushing-into-cs-corner-cases.html" rel="alternate"></link><published>2014-08-12T09:00:00-04:00</published><updated>2014-08-12T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-08-12:/2014/pushing-into-cs-corner-cases.html</id><summary type="html">&lt;p&gt;I’m working on a project that is all in C because of its long history and legacy. We’re slowly modernizing the codebase and writing all our new code in Python (using NumPy, C extensions, and so on for performance where necessary). Occasionally, I just want to bang my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m working on a project that is all in C because of its long history and legacy. We’re slowly modernizing the codebase and writing all our new code in Python (using NumPy, C extensions, and so on for performance where necessary). Occasionally, I just want to bang my head against the wall because there are things we can do so simply in any modern language that you just can’t do in any straightforward way in C. For example, I have file writers that all work &lt;em&gt;exactly&lt;/em&gt; the same way, with the single exception that the format string and the data that you put into it vary for each file.&lt;/p&gt;
&lt;p&gt;In Python, this would be straightforward to handle with the class machinery: you could simply specify the format string in each inheriting class and define the data points to be supplied at the top of an overriding function, call the parent function with &lt;code&gt;super()&lt;/code&gt; and be done.&lt;/p&gt;
&lt;p&gt;To do something similar in pure C is nearly impossible. You can supply a format string with each function (or module, or however you separate out the code), and if you feel especially clever you could convert all your data types to strings and pass them as a list to be printed by the standard function. The net result would be &lt;em&gt;longer&lt;/em&gt; and &lt;em&gt;less maintainable&lt;/em&gt; than simply having a set of essentially-duplicate functions, though.&lt;/p&gt;
</content><category term="software development"></category></entry><entry><title>Don't Be Rude</title><link href="http://www.chriskrycho.com/2014/dont-be-rude.html" rel="alternate"></link><published>2014-07-12T15:30:00-04:00</published><updated>2014-07-12T15:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-12:/2014/dont-be-rude.html</id><summary type="html">Customer service matters. In this post, I explain how I bid a company adieu because they talked down to me. Don&amp;lsquo;t be like them.</summary><content type="html">&lt;section id="note" class="level6"&gt;
&lt;h6&gt;Note&lt;/h6&gt;
&lt;p&gt;I have left the original post here as I wrote it, but there is an important &lt;a href="#edit-and-addendum"&gt;addendum&lt;/a&gt; at the bottom of the post that you should make sure to read (and note in particular the &lt;a href="#further-addendum"&gt;further addendum&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This post came off as pretty critical of MarketCircle, and that &lt;em&gt;really&lt;/em&gt; wasn’t my point. I wanted to use a bad experience I had with MarketCircle to illustrate a general principle, &lt;em&gt;not&lt;/em&gt; to poke at any particular company. I did that poorly in this particular piece; for some follow-up on that see &lt;a href="http://www.chriskrycho.com/2014/i-wrote-it-wrong.html"&gt;this post&lt;/a&gt; which I wrote later that day, analyzing how and why this piece so spectacularly failed to accomplish my desired goals.&lt;/p&gt;
&lt;p&gt;In any case, I do not want this piece to turn people off of using MarketCircle’s software. I leave the unedited version below because I believe in having the intellectual integrity to own one’s mistakes. This was one of mine.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The quickest way to make me bid your company or product farewell is to patronize me. Don’t talk down to me. Never treat me like anything but an adult. The moment you do, I am gone.&lt;/p&gt;
&lt;p&gt;Given which: farewell &lt;a href="https://www.marketcircle.com"&gt;MarketCircle&lt;/a&gt;, and adieu &lt;a href="https://www.marketcircle.com/billingspro/"&gt;Billings&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A story: When I started working as a freelance software developer on the side a few years ago,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I looked at my options for tracking time and invoicing clients. I eventually settled on &lt;a href="https://www.marketcircle.com/billingspro/"&gt;Billings&lt;/a&gt;, by &lt;a href="https://www.marketcircle.com"&gt;MarketCircle&lt;/a&gt;. It’s solid software: it is reliable, works well, and does everything I need it to, including tracking different clients and projects easily and sending them estimates or invoices. Best of all, from my perspective, it was a local app. You &lt;em&gt;could&lt;/em&gt; sync with a server out in the cloud somewhere via Billings Pro, but you did not have to, and you could use the Mac-native application, not some web app out there. Last but not least, it had a &lt;em&gt;great&lt;/em&gt; menubar app. I was sold, and I gladly dropped $40 for a single-user license.&lt;/p&gt;
&lt;p&gt;Fast forward to June 2013. MarketCircle, like a lot of software development companies, came to the conclusion that it is &lt;em&gt;really&lt;/em&gt; hard to develop software as a series of discrete releases, for which you get people to pay over and over again. Perfectly sensibly, they &lt;a href="https://www.marketcircle.com/blog/streamlining-the-billings-product-line/"&gt;discontinued development&lt;/a&gt; on and support for their standalone software and provided &lt;a href="https://www.marketcircle.com/billingspro/offer/"&gt;a (discounted!) migration path&lt;/a&gt; for users to upgrade to the Pro (syncing, etc.) version of the software. Note that they did &lt;em&gt;not&lt;/em&gt; do anything to disable functionality in existing Billings installations—just provided an upgrade path and stopped developing it. That is the right way to handle it. So far so good.&lt;/p&gt;
&lt;p&gt;I am a software developer, and I have seen the pressures that exist in this industry. This move made good business sense to me, and I liked Billings as a product. I was quite willing to look at their Pro plan, and possibly even to invest in it, despite the fact that I did not &lt;em&gt;need&lt;/em&gt; it, because I believe in supporting the developers of the software I use.&lt;/p&gt;
&lt;p&gt;I emailed them a couple follow-up questions. One of them, and among the most important to me because of how I work for one particular client:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I note that in Billings Pro, unlike in Billings, I can’t track multiple slips simultaneously. This is problematic for me, as I often do this to keep track of hours worked against a “Personal projects” bit so I can see my hourly variations. That’s a make-or-break kind of thing for me—any chance you guys will change that behavior?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To elaborate: I like to track my total hours worked every week in a simple way, so I have a “Personal” timer going alongside the project timer for whatever I am doing. The fact that Billings let me do this was one of the selling points for me. Even so, I did not necessarily expect them to support the functionality going forward. The response I got started out reasonably enough:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We allow you to have multiple active timers, but you can only time one task at a time in both applications. In Billings, there was a bug with this, however, this was corrected in Billings Pro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus far, fair enough: they saw this as a bug. I disagreed, but I understand.&lt;/p&gt;
&lt;p&gt;Then this, though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While we all multi-task we cannot work on two billable items at once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Whoops.&lt;/em&gt; You just talked down to me.&lt;/p&gt;
&lt;p&gt;You also clearly didn’t read the original email, because you followed up by asking this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you explain a little more about what you track and how and I can see if there’s a different way to do this in Billings Pro that will give you the same result?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hmm. Let me get this straight: I told you what I track and how I use your software, and you thought the appropriate response was to instruct me on what I can and cannot do with it? Clearly not having even read the original question carefully?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nope.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let me explain: you don’t tell your customers that they can’t use your software in ways peculiar to them. You particularly do not do so as though explaining to a child that we simply cannot do certain things. If a user has a quirky way of using your software, you can of course say you don’t intend to support that quirky behavior—but you do not get to tell them that their unanticipated usage is &lt;em&gt;wrong&lt;/em&gt;, and especially not in a condescending tone&lt;/p&gt;
&lt;p&gt;I cancelled my Billings Pro trial within five minutes of receiving that email. The original software I kept: I was at a busy time in the year, switching time- tracking software is non-trivial, and it wasn’t hurting me a bit to keep using the original software anyway. As I am evaluating time tracking software again, not least because I do not know through how many OS X upgrades Billings will continue to perform properly, MarketCircle isn’t on the list. It only took one bad experience to leave a bad taste in my mouth and convince me to move on.&lt;/p&gt;
&lt;p&gt;At this point, it looks like I’m headed to &lt;a href="http://www.getharvest.com/"&gt;Harvest&lt;/a&gt;. It turns out they don’t support multiple timers, either. But they haven’t talked down to me, and that makes all the difference in the world.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is a takeaway here for anyone paying attention. Namely: respect your customers. Do not talk down to them. Do not assume their uses for your software are wrong, or stupid, even if they are not what you intended. (If anything, that means your users have thought of use cases you didn’t.)&lt;/p&gt;
&lt;p&gt;It is going to far to say that the customer is always right. Sometimes, the customer is wrong. Sometimes, &lt;em&gt;I&lt;/em&gt; am wrong as a customer. But the customer &lt;em&gt;is&lt;/em&gt; always someone to respect. The moment you stop treating your customer with respect is the moment you cross the line into being a company with which I want to do business to one I will avoid.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="edit-and-addendum" class="level6"&gt;
&lt;h6&gt;Edit and Addendum&lt;/h6&gt;
&lt;p&gt;When I posted this on App.net, a few thoughtful acquaintances &lt;a href="https://alpha.app.net/chriskrycho/post/34459957"&gt;pushed back&lt;/a&gt;, noting that the customer service interactions did &lt;em&gt;not&lt;/em&gt; read as condescending to them. It is possible that I misread the original customer service rep’s tone in interacting in me. This is a constant danger in dealing with text-only communication. I take some responsibility for that—but I also note that the frustration had already built up in the course of a conversation that had already included a number of failures to respond to address or respond to my questions and concerns.&lt;/p&gt;
&lt;p&gt;I should also note that I didn’t mean this as a critique of MarketCircle in particular, though re-reading the post in light of the response, it is clear it comes off more that way than I intended. My interactions with MarketCircle were meant simply to illustrate the broader point: customer service matters, and even one bad customer experience can turn off a customer.&lt;/p&gt;
&lt;p&gt;But the takeaway from this addendum is a bit different: I can sympathize with the difficulties facing the customer service rep. I failed at precisely the same task of communicating my intent in writing effectively. Now, whether that rep meant it the way I took it or the way others took it in reading the post, he certainly did not accomplish what he meant to with the exchange. My sympathies are with him. I am perfectly willing (though not perhaps &lt;em&gt;happy&lt;/em&gt;; humility is rarely particularly pleasant) to say that I got it wrong here.&lt;/p&gt;
&lt;p&gt;All that being said… I still have a bad taste in my mouth, and I am still leery of doing further business with MarketCircle. And that &lt;em&gt;does&lt;/em&gt; make the original point in a way, because the emotional response from a bad experience, even one you did not intend, doesn’t fade quickly or at all, even in the face of reasonable articulations of alternative explanations for the bad experience. You have to work at a good customer experience continually.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="further-addendum" class="level6"&gt;
&lt;h6&gt;Further Addendum&lt;/h6&gt;
&lt;p&gt;MarketCircle actually saw this piece—presumably via my link on Twitter—and got back to me, looking to fix this issue, which I really appreciated. In some sense, then, they &lt;em&gt;are&lt;/em&gt; doing exactly what I advocated in this piece.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Early 2010, if you’re curious.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>Goodbye, Notifications</title><link href="http://www.chriskrycho.com/2014/goodbye-notifications.html" rel="alternate"></link><published>2014-07-11T18:50:00-04:00</published><updated>2014-07-11T18:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-11:/2014/goodbye-notifications.html</id><summary type="html">The Accidental Tech Podcast guys inspired me to change how I handle notifications for social media&amp;mdash;silencing them all. So far, I like it a lot.</summary><content type="html">&lt;p&gt;In &lt;a href="http://atp.fm/episodes/73" title="73: Notifications Duck"&gt;this week’s episode&lt;/a&gt; of &lt;a href="http://atp.fm"&gt;Accidental Tech Podcast&lt;/a&gt;, hosts Casey Liss and John Siracusa mentioned that they have the sound aspect of notifications disabled on their iDevices (Liss’ iPhone, Siracusa’s iPod Touch). Strange though it might seem, the thought hadn’t occurred to me. I like getting the notice of things having happened on my social media accounts, but I’d concluded recently that I actively disliked having the interruption even of a buzz in my pocket: it forces a mental context shift which inevitably degrades my concentration on whatever task I am about.&lt;/p&gt;
&lt;p&gt;I spent ten minutes this evening and went through my iPhone’s notification settings. The only things which have audible or vibrating notifications now are phone calls (including FaceTime) and text messages. Everything else I disabled. Now, I still have notifications on a number of other items: they can show up in Notification Center, and they can put markers on the home screen apps. After all: if I already have my phone out, it is almost certainly no problem to see a notification come in, and I definitely want to be able to glance at the app on my home screen and see that someone has interacted with me in some way. But when I &lt;em&gt;don’t&lt;/em&gt; have my phone out? It is unhelpful. It is distracting.&lt;/p&gt;
&lt;p&gt;I actually turned on app badges for a number of apps for which I had previously disabled them, because they had been extraneous when I was getting noises or buzzes for the apps and services in question. I also tweaked a number of other apps: some can show app badges but not appear in notification center. Most cannot show anything on the lock screen at all. If I want to check on notifications, I can look explicitly.&lt;/p&gt;
&lt;p&gt;We will see how the experiment goes. Even just a few hours in, though, I can already say I like it. I did &lt;em&gt;not&lt;/em&gt; get any buzzing in my pocket when a few people interacted with me on App.net, or Instagram, or anywhere else. And, social media being what it is, none of those interactions are temporally important (however much it might feel otherwise). They will still be there waiting when I get back.&lt;/p&gt;
&lt;p&gt;Now, this does not automatically make me more productive. I still need self control to be most effective in using my time. It does take away a few of the most obvious distractions and interruptions that make it hard to focus, though, and that is &lt;em&gt;definitely&lt;/em&gt; a win.&lt;/p&gt;
</content></entry><entry><title>Economies of Scale</title><link href="http://www.chriskrycho.com/2014/economies-of-scale.html" rel="alternate"></link><published>2014-07-11T10:35:00-04:00</published><updated>2014-07-11T10:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-11:/2014/economies-of-scale.html</id><summary type="html">In which I strongly critique Robert Gates' years-old comments on the cost of the B-2, because I'm a pedant.</summary><content type="html">&lt;p&gt;I was reading through an interesting Ars Technica &lt;a href=""&gt;article&lt;/a&gt; on the new Long Range Strike Bomber (LRS-B) proposal the Air Force is soliciting. It’s generally interesting to me in part because I’ve worked on a related project in the past, and we talked fairly often about how the LRS-B program might impact it. The article is worth your time. This quote from Robert Gates in the middle of the article, which touches on the program the LRS-B would replace, caught my attention, though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What we must not do is repeat what happened with our last manned bomber. By the time the research, development, and requirements processes ran their course, the aircraft, despite its great capability, turned out to be so expensive—$2 billion each in the case of the B-2—that less than one-sixth of the planned fleet of 132 was ever built.&lt;/p&gt;
&lt;p&gt;Looking ahead, it makes little sense to pursue a future bomber—a prospective B-3, if you will—in a way that repeats this history. We must avoid a situation in which the loss of even one aircraft—by accident, or in combat—results in a loss of a significant portion of the fleet, a national disaster akin to the sinking of a capital ship. This scenario raises our costs of action and shrinks our strategic options, when we should be looking to the kind of weapons systems that limit the costs of action and expand our options.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, in one sense, Gates was absolutely right. On the other hand, he seems to have committed a classic blunder in dealing with these kinds of costs: economies of scale matter. Part of the reason the per-unit price of the B-2 was so high was precisely that we only bought 20 of them. While the units were individually expensive to manufacture and maintain, because of unique materials used in their construction and so on, they were much &lt;em&gt;more&lt;/em&gt; expensive to manufacture in small numbers than they would have been in large numbers. There are basically two reasons for this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;The manufacturing process couldn’t do what it does best (turn out large numbers of standardized parts and thereby reduce costs).&lt;/li&gt;
&lt;li&gt;The costs of development—research, software development, etc.—were all distributed over a much smaller pool than they would have been had the government purchased more aircraft.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This second point is incredibly important to understand. It is certainly true that the absolute cost of buying 132 B-2s would have been high, possibly astronomically and unaffordably high. What it would &lt;em&gt;not&lt;/em&gt; have been is $264 billion. Even assuming that manufacture costs were fully half of the cost-per- plane (almost certainly not the case), it would have been barely over half that. Assume that the B-2 cost $1B per plane to build, and that the other $10B was research. Well, that’s still an expensive plan… but the total cost is something like $144B, not $264B. Those economies of scale matter.&lt;/p&gt;
&lt;p&gt;This same reality is a point made later in the article by another commentator, but I couldn’t let it go. Things like this drive me nuts, because they’re such a common failing in our political discourse. Ignorance of basic economics from the people making decisions with this kind of economic impact is profoundly unhelpful.&lt;/p&gt;
</content></entry><entry><title>Bundling!</title><link href="http://www.chriskrycho.com/2014/bundling.html" rel="alternate"></link><published>2014-05-13T14:35:00-04:00</published><updated>2014-05-13T14:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-13:/2014/bundling.html</id><summary type="html">The world of ebook pricing is sometimes a bit crazy. A smart bundling strategy might make it a bit less so.</summary><content type="html">&lt;p&gt;&lt;a href="http://www.digitalbookworld.com/2012/why-do-we-have-to-choose-between-print-and-digital/"&gt;“Why do we have to choose between print and digital?”&lt;/a&gt; asked Richard Curtis at Digital Book World last week, before tackling the topic of bundling—getting ebooks at reduced cost or even free when buying a physical copy of the book. Drawing an analogy from music purchases that have moved in the same direction, he suggests that publishers &lt;em&gt;ought&lt;/em&gt; to be bundling, and then poses the query: When you purchase a print book you should be able to get the e-book for…&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;the full combined retail prices of print and e-book editions&lt;/li&gt;
&lt;li&gt;an additional 50% of the retail price of the print edition&lt;/li&gt;
&lt;li&gt;an additional 25% of the retail price of the print edition&lt;/li&gt;
&lt;li&gt;$1.00 more than the retail price of the print edition&lt;/li&gt;
&lt;li&gt;free&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;He suggests that this proves to be something of a conundrum for decision-makers in the publishing industry. With respect, and while recognizing that it probably &lt;em&gt;feels&lt;/em&gt; like a conundrum to the publishers, I think the answer is really quite simple. Publishers can dramatically increase their profits, and do it in a way that readers will &lt;em&gt;love&lt;/em&gt;. (This is the part where you call me crazy. Up next is the part where I show you why I’m not.)&lt;/p&gt;
&lt;section id="all-or-nothing" class="level2"&gt;
&lt;h2&gt;All or nothing&lt;/h2&gt;
&lt;p&gt;First, we should note that while readers would always choose (e) and publishers would love it if they could get away with (a), the reality is that both of these leave one party out in the cold. Publishers need readers, and readers need publishers. Publishers need readers or they die. Readers need publishers as providers of quality content—not only as the gatekeepers but also as polishers who take good books and make them great. Any system that will pan out well must therefore respect &lt;em&gt;both&lt;/em&gt; sides of that equation. Both (a) and (e) fail that test immediately.&lt;/p&gt;
&lt;p&gt;In the case of (a), the consumer can rightly point out that the cost of distribution of a book is minimal, trivial even, in the grand scheme of book production. That goes double for ebooks: the cost of running a server is a pittance compared to the cost of writing, editing, and proofing a book. “So,” any smart reader says, “I’ve already paid for the book. Why should I have to pay &lt;em&gt;just as much again&lt;/em&gt; for the ebook?”&lt;/p&gt;
&lt;p&gt;In the case of (e), the consumer is getting something of real value—the ebook, with its associated portability, the ability to create [communal interactions][craigmod] around the content through shared marginalia, and so forth—but without recognizing any infrastructure costs this poses to the publisher. As always, there is no free lunch, and that is as it should be.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The worker deserves his wages, and that includes the editor who turns a manuscript into ebook form—especially for &lt;em&gt;good&lt;/em&gt; ebooks, which entail a great deal of work beyond simply running the print manuscript through a conversion script. That involves real people’s time, and therefore costs real money.&lt;/p&gt;
&lt;p&gt;Neither of these options, then, is ultimately good for the market. The readers will rightly reject paying the full price again for a book in a different form; they’ve been conditioned by too many interactions on the internet not to recognize that digital transmission of files the size of a book is, while not costless, not costly either. On the other hand, publishers still need to make money, and they do sink real time and money into the ebook—not at the distribution point, but in the infrastructure involved in the preparation of the manuscript and readying it for digital and physical publication.&lt;/p&gt;
&lt;p&gt;Again: publishers need readers and readers need publishers.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="percentage-games" class="level2"&gt;
&lt;h2&gt;Percentage games&lt;/h2&gt;
&lt;p&gt;Percentage-based cuts—like Curtis’ options (b) and (c)—are much more sensible and reasonable from the perspective of both the consumer and the publisher. In each of these cases, the publisher is granting that the customer has already made a purchase—perhaps a significant one, in the case of a hardcover fiction book. Indeed, when we move out into the realm of reference books or textbooks, the consumer has already given the publisher quite a lot of money. Thus, options (b) and (c) are much friendlier to the consumer than choice (a), while still affording the publisher some profits, unlike (e). This is clearly a step in the right direction.&lt;/p&gt;
&lt;p&gt;The percentage option quickly runs into issues when we start thinking about how such a scheme would work in practice, though. Is it 25% of the hardcover but 50% of the paperback, so that the publisher can recoup more of the costs? In this scheme, it is difficult to match the actual cost of the ebook sale to its relative value compared to the physical copy. Moreover, it’s difficult to standardize. When purchasing a textbook at $150, should someone have to pay another $37.50 or $75 to have a digital copy? It seems unlikely that preparing an ebook of a textbook is really 5-6 times more costly than the preparation of a fiction ebook, which on a percentage basis would come out around $6.50 or $13 for the hardcover at those rates, or $2 or $4 for paperbacks.&lt;/p&gt;
&lt;p&gt;Equally important: &lt;em&gt;will&lt;/em&gt; people pay that much for a digital copy? Publishers may want to study the question in depth by testing the market, but this is a waste of time. The answer is obvious to anyone under the age of 30: &lt;em&gt;no&lt;/em&gt;. The market simply won’t support those kinds of costs on the upper end of the spectrum.&lt;/p&gt;
&lt;p&gt;Again, customers may recognize that they are subsidizing more than simply the cost of distribution, but the preparation and distribution of the ebook don’t justify an additional percentage on these scales beyond some point. I suspect that most customers are willing to pay extra to get the ebook in addition to the physical copy—just not, in most cases, &lt;em&gt;that&lt;/em&gt; much extra.&lt;/p&gt;
&lt;section id="aside-on-reasonability-and-trained-markets" class="level3"&gt;
&lt;h3&gt;Aside: on reasonability and trained markets&lt;/h3&gt;
&lt;p&gt;We must recognize that markets can be &lt;em&gt;trained&lt;/em&gt;. People have come to see $0.99 as a reasonable price for individual songs. There was nothing inevitable about that outcome; it is a direct result of the success of the iTunes store. Had prices been set at $1.49 or $0.33, it’s likely we would have settled on that number as a reasonable price. Similarly, TV show episodes sell at $1.99,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and people seem to treat that as a reasonable price: the perceived value matches the cost well. They could have been $1 or $2.50, and consumers probably would have settled in with those numbers equally well.&lt;/p&gt;
&lt;p&gt;Of course, had the price been too high, we would have rejected it entirely: markets can be trained, but they’re not capable of stretching into just any shape at all.&lt;/p&gt;
&lt;p&gt;Admittedly, the music market remains volatile, but consumers on the whole don’t seem to balk at spending a dollar on a song. While the piracy rate remains high, iTunes and similar markets provide an outlet for those who are interested in purchasing their music legitimately.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This outcome results from the combination of a trained market and a sensible cost/value relationship that allowed the training to occur in the first place. Book publishers should aim for the same outcome: profitability on the basis of perceived reasonability of their prices. This will require training the market, but that is possible so long as their expectations are reasonable.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="a-reasonable-target" class="level2"&gt;
&lt;h2&gt;A reasonable target&lt;/h2&gt;
&lt;section id="price-points" class="level3"&gt;
&lt;h3&gt;Price points&lt;/h3&gt;
&lt;p&gt;Curtis’ final suggested price point is close to the mark, but I think some revision is in order. Remember: the aim is to buoy both customer satisfaction &lt;em&gt;and&lt;/em&gt; publisher profitability. Here’s my proposed pricing scheme for fiction (which could be adapted to other parts of the market fairly straightforwardly):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standalone ebook: $4.99&lt;/li&gt;
&lt;li&gt;Paperback:
&lt;ul&gt;
&lt;li&gt;Book: $7.99&lt;/li&gt;
&lt;li&gt;Bundle: $9.99&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Trade paperback:&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Book: $14.99&lt;/li&gt;
&lt;li&gt;Bundle: $15.99&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hardcover:
&lt;ul&gt;
&lt;li&gt;Book: $26.99&lt;/li&gt;
&lt;li&gt;Bundle: $26.99&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m basing these on the current pricing schemes in the market—these are the normal suggested retail prices for paperbacks, trade paperbacks, and hard covers—and on the assumption that the publisher’s goal is to maximize revenue, while the consumer’s goal is to get the most content at a price he feels is reasonable. I’m also taking into account the existing profit curves for publishers: paperbooks are relatively low margin, while hardcovers are the major profit points, at least when they’re successful.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="rationale" class="level3"&gt;
&lt;h3&gt;Rationale&lt;/h3&gt;
&lt;p&gt;First, and most importantly, I believe the market will support these price points. The standalone ebook is less expensive than the paperback, as it should be, since its distribution costs are much lower than the costs of printing and shipping paperbacks. At the same time, ebooks sales will still generate revenue for the publisher; $5 is not a meaningless amount of money.&lt;/p&gt;
&lt;p&gt;For each tier upwards, the cost of the bundled ebook drops. The publisher thus acknowledges the increasing profitability of each tier as well as the increasing cost to the reader. At the same time, the lowered bundling cost incentivizes the user toward the higher profit items. In each case, the bundling cost is sufficiently low as to be in the “impulse purchase” range for most users.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Readers will be far more likely to front the cost of a hardcover if an ebook comes bundled with it, because the value proposition is so much better. At the same time, this is unlikely to decrease the profits of the publisher, because the margins are much higher for hardcovers.&lt;/p&gt;
&lt;p&gt;In fact, bundling at these rates will likely increase publisher profits from ebooks, as most readers currently choose between ebook and physical books. The price of a hardcover is simply too high to allow for the purchase of both. (Even when this is not actually true, it &lt;em&gt;seems&lt;/em&gt; true to consumers, which is equally important in determining their behavior.) With a sufficiently lower barrier to getting the additional content, the likelihood that the reader purchases both goes up substantially.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This potential for increased profitability is compounded by the availability of the bundle at initial purchase time. A consumer who has already committed to spending $8 on a book is unlikely to balk at $10, and even less to balk at the transition from $15 to $16. In many cases, the publisher will earn more money from the book purchase than before, but the reader is still getting a good deal on the ebook. This is &lt;em&gt;exactly&lt;/em&gt; the combination that makes for a flourishing market.&lt;/p&gt;
&lt;p&gt;Finally, the simplicity of these numbers is extremely helpful. Standardizing these prices will decrease the friction inherent in making the purchase decision, which increases the likelihood that a purchase will be made. I’m not suggesting a cartel—price standardization is natural in this sort of market—and I believe the price points I’ve suggested are where the market will settle in the long run. The publishers who get there first will earn enormous goodwill from their readers in the short term, as well as demonstrating their leadership in the industry in ways that set them up for long term success.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="bundle-up" class="level2"&gt;
&lt;h2&gt;Bundle up&lt;/h2&gt;
&lt;p&gt;A smart approach to bundling could be enormously beneficial to the publishing industry. In addition to the pure numerical profitability of the approach outlined above—no small detail in an industry struggling to adapt to the realities of the new economy—it establishes that the publishers are responsive to customers in a way that other large media have not seemed to be. Nothing is so helpful to a company’s long-term sustainability as for consumers to &lt;em&gt;like&lt;/em&gt; it. Reasonable bundling prices would go a long way toward helping readers see publishers as friends, rather than enemies.&lt;/p&gt;
&lt;p&gt;Obviously these numbers work best in the context of fiction. The value propositions are entirely different in other contexts; a cookbook is an entirely different thing than a copy of &lt;em&gt;The Hobbit&lt;/em&gt;. Across the board, though, publishers should keep the same goals in mind: profitability by means of reasonability and approachability. Be allies of the readers, not their enemies. Make it easy and affordable for them to pay you for your work, and they will.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My thanks to &lt;a href="http://stephencarradini.com"&gt;Stephen Carradini&lt;/a&gt; for invaluable contributions to this piece in two forms: many long conversations about this very topic, and a helpful edit of the actual content.&lt;/p&gt;
&lt;p&gt;[craigmod]: http://craigmod.com/journal/post_artifact/#section_4 “Post Artifact Books and Publishing, Section 4: The post-artifact system” from Craig Mod&amp;quot;&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Additionally, there is a signaling problem here: “free” suggests “low value” in a way that publishers rightly want to avoid. See &lt;a href="http://informationarchitects.net/blog/ia-writer-on-prices-and-features/"&gt;“iA Writer: On Prices and Features”&lt;/a&gt;, Section 2: Cost, by Oliver Richtenstein for a lengthy and sensible exploration of this issue. The issue of signaling value should be taken into account in my suggestions later, as well. But more on that below.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;When they sell at all, of course. I’ve written about this problem [before][piracy]: piracy explodes when there is demand without supply. It also tends to grow at a higher rate when the cost is perceived as unreasonable. TV shows priced at $5/episode wouldn’t do well; they seem to sell quite briskly at $1.99. Publishers run the risk of fomenting piracy by setting their prices too high.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I have never seen someone complain that a song is too expensive at a dollar who was willing to pay &lt;em&gt;anything&lt;/em&gt;. A penny would be too pricey from the pirates’ point of view.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Trade paperbacks (TPBs) are similar in size to hardcovers, but have soft covers similar to those in a paperback. Fiction TPBs typically go for around $15. Over the last few years, publishers have started shifting away from the low-margin paperback market into these trade paperbacks, which provide a bit higher profit for them. Personally, I don’t mind, because these books tend to be higher quality paper and bindings. If I’m sitting down with a monster like one of the books in &lt;cite&gt;The Wheel of Time&lt;/cite&gt;, this is far and away the best format for a physical copy.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;On the signaling issue: the price of the ebook is sufficiently high as to continue to signal real value here, I think. However, in the case of other kinds of books, this scheme should be revisited. A complex EPUB3 with embedded videos or interactive content should signal that it offers a higher value proposition than other ebooks with a higher price point; in some cases, if that content is sufficiently central to the value proposition of the book, it might be more expensive than the physical copies.&lt;/p&gt;
&lt;p&gt;Similarly, a textbook might sell for $150, its ebook at $50, and the bundle at $165—because the cost of preparing a textbook ebook may be substantially higher than that of preparing a fiction ebook. Signaling matters, but overpricing is as much a risk here as underpricing.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;This has the added benefit of making the purchase of new books over used books more attractive to the consumer: if the coupon for ebook at reduced rate is only available at new book purchase, a $3 used book suddenly has a much lower value proposition relative to the original when the reader is interested in having an ebook copy as well, since the cost of having both is still $8.&lt;/p&gt;
&lt;p&gt;Of course, this leads us to the question of ebook resale, which is currently a legally murky area at best, and requires considerable legal and intellectual development.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>Why the Smart Reading Device of the Future May Be … Paper</title><link href="http://www.chriskrycho.com/2014/why-the-smart-reading-device-of-the-future-may-be-paper.html" rel="alternate"></link><published>2014-05-03T10:45:00-04:00</published><updated>2014-05-03T10:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-03:/2014/why-the-smart-reading-device-of-the-future-may-be-paper.html</id><summary type="html">Link&amp;mdash;I enjoy Kindle and iPad, but I still love books best. Turns out I'm not alone... and there might just be reason for it.</summary><content type="html">&lt;p&gt;One thing I didn’t talk about in comparing reading experiences on a Kindle and on an iPad the other day is the elephant in the room: old-fashioned books. I enjoy Kindle and iPad, but I still love books best. Turns out I’m not alone… and there might just be reason for it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wired.com/2014/05/reading-on-screen-versus-paper/"&gt;Brandon Keim at Wired:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Paper books were supposed to be dead by now. For years, information theorists, marketers, and early adopters have told us their demise was imminent. Ikea even redesigned a bookshelf to hold something other than books. Yet in a world of screen ubiquity, many people still prefer to do their serious reading on paper.&lt;/p&gt;
&lt;p&gt;Count me among them. When I need to read deeply—when I want to lose myself in a story or an intellectual journey, when focus and comprehension are paramount—I still turn to paper. Something just feels fundamentally richer about reading on it. And researchers are starting to think there’s something to this feeling.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="links"></category></entry><entry><title>iPad vs. Kindle</title><link href="http://www.chriskrycho.com/2014/ipad-vs-kindle.html" rel="alternate"></link><published>2014-04-30T21:20:00-04:00</published><updated>2014-04-30T21:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-30:/2014/ipad-vs-kindle.html</id><summary type="html">&lt;p&gt;I’ve been a happy owner of both a Kindle and an iPad Mini for the last several months, and it occurred to me tonight that I use them &lt;em&gt;very&lt;/em&gt; similarly in some ways. Both are primarily reading devices for me. What is different is the kinds of material I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve been a happy owner of both a Kindle and an iPad Mini for the last several months, and it occurred to me tonight that I use them &lt;em&gt;very&lt;/em&gt; similarly in some ways. Both are primarily reading devices for me. What is different is the kinds of material I read on each.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My Kindle is a first generation Paperwhite, in fairly good condition. (It has one significant quirk in that it sometimes turns on without the power button being pushed. Alas.) I use it nearly every day right now. I have most of my school books on it, and several of my favorite novels. I’m rereading Patrick Rothfuss’ &lt;em&gt;The Wise Man’s Fear&lt;/em&gt; right now, and so I spend a good half a hour a day on the Kindle for that alone. I also get a lot of my seminary reading done on the device.&lt;/p&gt;
&lt;p&gt;On the iPad, on the other hand, I read a lot of web pages, nearly all via &lt;a href="https://www.instapaper.com"&gt;Instapaper&lt;/a&gt;. I had sometimes had Instapaper items delivered to my Kindle, and that worked &lt;em&gt;fairly&lt;/em&gt; well, but I much prefer the experience of using the app on the iPad. I opt to do pretty much any technical reading on the device: its screen just works much better for dealing with things like code samples embedded in a blog post—not least because I can scroll easily if I need to! I also do basically all my Bible reading on the iPad. It is far easier to navigate to different parts of the text, switch translations (or original languages!) while keeping my place there on any of the top-tier iPad apps than on the Kindle. And I sometimes read comics on the iPad—something I would not try in a million years on the current Kindle screen!&lt;/p&gt;
&lt;p&gt;A friend asked a few months ago if I thought one would obviate the other. Given the qualification that neither is in any sense truly a &lt;em&gt;necessity&lt;/em&gt;—we could quite easily get along without either—my answer after several months with both is &lt;em&gt;no&lt;/em&gt;. Though the devices are similar in a number of ways, they fit into very different niches. The things I actively enjoy on each are very different. The Kindle is good for much longer-form reading, and its lack of distractions is nice (though I often take advantage of the Do Not Disturb mode on the iPad when I actually want to accomplish things besides talking on social media). The iPad is better for anything with color, for technical documents, and for anything where navigation more complex than one-page-after-another is important. I would not particularly want to read a novel on it, though!&lt;/p&gt;
&lt;p&gt;I will be curious to see if the devices converge at some point in the future.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; At present, no technology gives both the responsiveness and gorgeous color of the iPad &lt;em&gt;and&lt;/em&gt; the low-contrast, pleasant long-form reading experience offered by the Kindle’s e-ink. If at some point we get a technology that does both, it will be pretty amazing. In the meantime… we still have pretty amazing pieces of technology, and I enjoy them both a lot.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I also use the iPad for a number of other things: App.net and Twitter and so on, &lt;a href="http://www.fiftythree.com"&gt;Paper&lt;/a&gt;, starting some ideas for blog posts, etc. But mainly I read on it!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;No, Amazon’s Kindle Fire series of tablets are nothing like that convergence: they are &lt;em&gt;functionally&lt;/em&gt; just poor-man’s-iPads hooked into Amazon’s ecosystem. Note that I’m not making a comment about the quality or lack thereof on the devices—only that they’re much reduced in capabilities compared to an iPad or Android (e.g. Nexus 7).&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>A Little Crazy</title><link href="http://www.chriskrycho.com/2014/a-little-crazy.html" rel="alternate"></link><published>2014-04-29T19:30:00-04:00</published><updated>2014-04-29T19:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-29:/2014/a-little-crazy.html</id><summary type="html">I am going to write a static site generator in Io. Oh, and also the Markdown parser and HTML templating engine required to go with it.
</summary><content type="html">&lt;p&gt;I’m going to do something a little crazy, I’ve decided. I’m going to go ahead and do like I wrote &lt;a href="http://www.chriskrycho.com/2014/doing-it-myself.html"&gt;a bit back&lt;/a&gt;, and make &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt; actually a thing over the course of the rest of the year. Not so crazy. What is a bit nuts is the way I’ve decided to go about that process. In short: as close to the hardest way possible as I can conceive.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Over the last couple weeks, I’ve been spending a fair bit of time toying with &lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt;. It’s a neat little language, very different in its approach to a &lt;em&gt;lot&lt;/em&gt; of things than the languages I’ve used previously. My programming language history is very focused on the “normal” languages. The vast majority of real- world code I’ve written has been in one of C, PHP, or Python. I’ve done a good bit of Javascript along the way, more Fortran than anyone my age has any business having done, and a little each of Java and Ruby. Like I said: the normal ones. With the exception of Javascript, all of those are either standard imperative, object-oriented, or mixed imperative and object-oriented languages. Python and Ruby both let you mix in a fair bit of functional-style programming, and Javascript does a &lt;em&gt;lot&lt;/em&gt; of that and tosses in prototypal inheritance to boot.&lt;/p&gt;
&lt;p&gt;But still: they’re all pretty mainstream, “normal” languages. Io isn’t like that at all. For one thing, it’s hardly popular in any sense at all. Well-known among the hackers&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I know, perhaps, but not popular by any measure. It’s small. And it’s very &lt;em&gt;alien&lt;/em&gt; in some ways. It’s &lt;a href="http://en.wikipedia.org/wiki/Prototype-based_programming"&gt;prototypal inheritance&lt;/a&gt;, not normal inheritance. Courtesy of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain"&gt;Javascript&lt;/a&gt;, I have a &lt;em&gt;little&lt;/em&gt; familiarity with that, but it’s definitely still not my default way of thinking about inheritance. Python’s inheritance model (the one I use most frequently) is &lt;em&gt;essentially&lt;/em&gt; the same as that in C++, Java, PHP, and so on—it’s normal class-driven inheritance. Io goes off and does full-blown prototypal inheritance; even just the little I’ve played with it has been fun.&lt;/p&gt;
&lt;p&gt;Io also does a bunch of other things a &lt;em&gt;lot&lt;/em&gt; different from the other languages I’ve used. First, there are no keywords or—formally speaking—even operators in the language. Every action (including ones like &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;) is simply a message. Every value is an object (so &lt;code&gt;1.0&lt;/code&gt; is just as fully an object as an arbitrarily-defined &lt;code&gt;Person&lt;/code&gt;). The combination means that writing &lt;code&gt;1 + 2&lt;/code&gt; is actually just interpreted as the object &lt;code&gt;1&lt;/code&gt; receiving the &lt;code&gt;+&lt;/code&gt; message carrying as its “argument” the &lt;code&gt;2&lt;/code&gt; object (really just the message contents). This is &lt;em&gt;completely&lt;/em&gt; different at a deep paradigm level from the normal object-oriented approach with object methods, even in a language like Python where all elements are objects (including functions). The net result isn’t necessarily particularly different from calling methods on objects, but it is a &lt;em&gt;little&lt;/em&gt; different, with have some interesting consequences. Notably (though trivially—or at least, so it seems to me at this point), you can pass a message to the null object without it being an error. More importantly, the paradigm shift is illuminating.&lt;/p&gt;
&lt;p&gt;Io also has far more capabilities in terms of concurrency than any of the other languagues with which I’m familiar, because it actively implements the &lt;a href="http://en.wikipedia.org/wiki/Actor_model"&gt;Actor Model&lt;/a&gt;, which means its implementation of messaging instead of object method calls can behave in concurrent ways. (I’d say more if I understood it better. I don’t yet, which is one of the reasons I want to study the language. Concurrency is very powerful, but it’s also fairly foreign to me.) It’s also like Lisp in that its code can be inspected and modified at runtime. I’ve wanted to learn a Lisp for several years for this kind of mental challenge, but the syntax has always just annoyed me too much ever to get there. Io will give me a lot of its benefits with a much more pleasant syntax. It has coroutines, which are new to me, and also helpful for concurrency.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The long and short of it is that the language has a ton of features not present in the languages I have used, and—more importantly—is &lt;em&gt;paradigmatically&lt;/em&gt; different from them. Just getting familiar with it by writing a goodly amount of code in it would be a good way to learn in practice a bunch of computer science concepts I never had a chance to learn formally.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;By now, as long as I’ve rambled about Io, you’ve probably figured out where I was going in that first paragraph. I’ve decided to stretch my brain a bit and write Step Stool in Io. There are bunches of static site generators out there in Python already, many of them quite mature. (This site is running on &lt;a href="https://github.com/getpelican"&gt;one of them&lt;/a&gt; as of the time I write this post—it’s quite solid, even its quirks and limitations occasionally annoy me.) The point of Step Stool has always been twofold, though. First, I’ve wanted to get to a spot where I was really running my own software to manage my site, letting me do whatever I want with it and guaranteeing I always understand it well enough to make those kinds of changes. Second, I’ve just wanted to &lt;em&gt;learn&lt;/em&gt; a whole bunch along the way. Third, it’s right there in the website link: &lt;a href="http://step-stool.io"&gt;step-stool.io&lt;/a&gt;! How could I pass up such an opportunity?&lt;/p&gt;
&lt;p&gt;It is that second goal that has pushed me to do this crazy project this crazy way. It’s crazier than just teaching myself a language in order to do the static site generator itself, too, because there are a few other pieces missing that I’ll need to write to make this work… like a Markdown implementation and an HTML templating language. I’ve never written anything remotely like either before, so I’m going to take the chance to learn a &lt;em&gt;lot&lt;/em&gt; of new things. For the Markdown implementation, rather than relying on regular expression parsing (like most Markdowns do), I’m going to use a Parsing Expression Grammar. That will certainly be more efficient and reliable, but—more importantly—it is also outside my experience. I have yet to start thinking through how to tackle the HTML templating language implementation (though I know I am going to make it an Io implementation of &lt;a href="http://slim-lang.com"&gt;Slim&lt;/a&gt;, which I quite like).&lt;/p&gt;
&lt;p&gt;In any case, I’m going to be taking a good bit longer to get Step Stool finished. That is all right: I am going to learn a ton along the way, and I am quite sure I will have a blast doing it. And that is &lt;em&gt;exactly&lt;/em&gt; what these kinds of projects are for.&lt;/p&gt;
&lt;p&gt;I’ll post updates as I go, with the things I’m learning along the way. Hopefully they’ll be interesting (or at least entertaining).&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Hackers in the original sense of the world. Not “crackers”, but people who like hacking on code, figuring things out the hard way.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Python 3.5 is actually adding coroutines, and I’m excited about that. I’ll feel much more comfortable with them there having used them in Io, I’m sure!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I got here backwards, as it were—by way of an undergraduate degree in physics. I don’t regret that for a second: I got a much broader education than I could have managed while getting an engineering degree, and most importantly learned &lt;em&gt;how to learn&lt;/em&gt;: easily the most important skill anyone gains from any engineering degree.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category></entry><entry><title>Learning QML, Part 1</title><link href="http://www.chriskrycho.com/2014/learning-qml-part-1.html" rel="alternate"></link><published>2014-04-11T15:30:00-04:00</published><updated>2014-04-11T15:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-11:/2014/learning-qml-part-1.html</id><summary type="html">&lt;p&gt;For part of my work with Quest Consultants, I’ve been picking up Qt’s QML toolkit to use in building out the UI. The declarative syntax and ability to define one’s own model in non-C++- or Python-specific ways is quite nice. That said, the learning process has had …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For part of my work with Quest Consultants, I’ve been picking up Qt’s QML toolkit to use in building out the UI. The declarative syntax and ability to define one’s own model in non-C++- or Python-specific ways is quite nice. That said, the learning process has had more than a few bumps along the way. I decided to go ahead and write those up as I go, both for my own reference and in the hope that it may prove useful to others as I go.&lt;/p&gt;
&lt;p&gt;QML is a &lt;em&gt;Javascript-like&lt;/em&gt; language for &lt;em&gt;declarative programming&lt;/em&gt; of a user interface. So it’s a Javascript-based language that sort of behaves like HTML. In fact, it behaves like Javascript in terms of how you define, access, and update properties, and you can embed full-featured (mostly) Javascript functions and objects in it.&lt;/p&gt;
&lt;p&gt;But when you have nested QML Types, you end up with them behaving more like HTML.&lt;/p&gt;
&lt;p&gt;The weirdest bit, and the thing that I’m having the hardest time adjusting to, is that you can only edit properties of root Types when you’re working with an instance of that Type. And those Types are defined by &lt;em&gt;documents&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, to give the simplest possible example, let’s say I defined a new type called &lt;code&gt;Monkey&lt;/code&gt;, in the &lt;code&gt;Monkey.qml&lt;/code&gt; file, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Monkey.qml
import QtQuick 1.1

Item {
    id: monkey_root
    property int monkey_id: -1
    property string monkey_name: &amp;quot;I don&amp;#39;t have a name!&amp;quot;

    Item {
        id: monkey_foot
        property string monkey_foot_desc: &amp;quot;The monkey has a foot!&amp;quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can use that in another file. If they’re in the same directory, it’s automatically imported, so I can just do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//main.qml
import QtQuick 1.1

// Rectangle is exactly what it sounds like. Here we can display things.
Rectangle {
    id: the_basic_shape
    height: 400
    width: 400
    color: green

    Monkey {
        id: monkey_instance
        monkey_id = 42
        monkey_name = &amp;quot;George&amp;quot;  // he&amp;#39;s kind of a curious little guy
    }

    Text {
        text: monkey_instance.monkey_name
        color: &amp;quot;red&amp;quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That creates a (really ugly) rectangle that prints the &lt;code&gt;Monkey&lt;/code&gt;’s name in red text on a green background. It’s impossible to access directly the &lt;code&gt;monkey_foot&lt;/code&gt; element, though, which means that composing more complex objects in reusable ways is difficult. In fact, I haven’t come up with a particularly good way to do it yet. At least, I should say that I haven’t come up with a good way to create high-level reusable components yet. I can see pretty easily how to create low-level reusable components, but once you start putting them together in any &lt;em&gt;specific&lt;/em&gt; way, you can’t recompose them in other ways.&lt;/p&gt;
&lt;p&gt;From what I’ve gotten my head around so far, this ends up being less flexible than either HTML templating languages (which are, or at least can be, completely declarative) or normal Javascript (which is obviously &lt;em&gt;not&lt;/em&gt; declarative). Mind you, it’s all sorts of &lt;em&gt;interesting&lt;/em&gt;, and I have a pretty decent idea what I’m going to do to implement our UI with it, but it’s taken me most of the day to get a good handle on that, and my head still feels a bit funny whenever I’m trying to see how best to create composable components.&lt;/p&gt;
&lt;p&gt;Note, too, that this is the &lt;em&gt;only&lt;/em&gt; way to create a new basic type of object in QML: it has to be the root level object in a QML document. I would &lt;em&gt;really&lt;/em&gt; like to be able to access internal declarations—to have named internal types/objects. Unfortunately, QML doesn’t let you do this. I suspect this has to do with how the QML type system works: it actually binds these types to C++ objects behind the scenes. This is a non-trivially helpful decision in terms of the performance of the application, but it certainly makes my brain a little bit twitchy.&lt;/p&gt;
&lt;p&gt;There are two basic consequences of this structure. First, any types you need to be able to use in other QML objects have to be defined in their own QML documents. Second, it is (as near as I can see so far, at least) difficult to create good generic QML types of more complex structures that you can then use to implement specific variations. For example: if you want to create accordions, you can create a fair number of the low-level elements in generic ways that you can reuse, but once you get to the relationships between the actual model, delegate, and view elements, you will need to create them in custom forms for each distinct approach.&lt;/p&gt;
&lt;p&gt;This is more like creating HTML documents than Javascript, which makes sense, &lt;em&gt;if&lt;/em&gt; you remember that QML is Javascript-based but &lt;em&gt;declarative&lt;/em&gt;. You just have to remember that while you can define some reusable components, the full-fledged elements are like full HTML pages with a templating system: you can include elements, but not override their internal contents. In QML, you can override &lt;em&gt;some&lt;/em&gt; of their contents, which is nice—but that is not the primary way to go about it.&lt;/p&gt;
</content><category term="[software development]"></category></entry><entry><title>Feels Right</title><link href="http://www.chriskrycho.com/2014/feels-right.html" rel="alternate"></link><published>2014-04-04T21:30:00-04:00</published><updated>2014-04-04T21:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-04:/2014/feels-right.html</id><summary type="html">Little details in how things work can make all the difference when it comes to the experience of using software. So be diligent, and do it right.</summary><content type="html">&lt;p&gt;I had spent most of the last week and a half working on getting &lt;a href="http://www.firebirdsql.org"&gt;FirebirdSQL&lt;/a&gt; configured and ready to use for a project I’m working on with &lt;a href="http://www.questconsult.com"&gt;Quest Consultants&lt;/a&gt;. It was slow going. The tool is decent, but the documentation is spotty and it felt like everything was just a bit of a slog—to get it working correctly, to get it playing nicely with other pieces of the development puzzle, to get it working across platforms.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Then, because I had done something a &lt;em&gt;little&lt;/em&gt; bit silly in my eagerness to get up and going last week and written code without a testable configuration, I hit a wall today. The queries weren’t working. I had made a &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception"&gt;bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I spent a substantial part of the day chasing down that bug, and then a conversation with user &lt;em&gt;agronholm&lt;/em&gt; on the &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/"&gt;SQLAlchemy&lt;/a&gt; IRC channel (&lt;a href="irc://irc.freenode.net/sqlalchemy"&gt;freenode/#sqlalchemy&lt;/a&gt;) got me thinking. The Firebird team describes one of their options as an “embedded” server, but &lt;em&gt;agronholm&lt;/em&gt; pointed out that what they really mean is &lt;em&gt;portable&lt;/em&gt;. It’s running a standalone server and client, but it’s not part of the same thread/process (like SQLite is). Then &lt;em&gt;agronholm&lt;/em&gt; very helpfully asked—my having mentioned my preference for &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; earlier—“Does Postgres not have a portable version?” Two minutes later, we had both found &lt;a href="http://sourceforge.net/projects/postgresqlportable/"&gt;PostgreSQL Portable&lt;/a&gt;, and I rejoiced.&lt;/p&gt;
&lt;p&gt;It took me less than half an hour to get it downloaded and set up and to confirm that it would work the way we need for this particular piece of software. (Firebird had taken me a good three hours, what with digging through badly organized and not terribly clear documentation.) It took me less than half an hour more to get PostgreSQL to the same point that I’d finally gotten Firebird to after multiple hours working with it. And I was so &lt;em&gt;very&lt;/em&gt; happy. What had been an especially frustrating work day now had me quietly smiling to myself constantly for the last two and a half hours as I &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception/22872598#22872598"&gt;finished&lt;/a&gt; tracking down the bug that had set me on this path in the first place.&lt;/p&gt;
&lt;p&gt;Several years ago, when I first started doing web development, I got my feet wet in database work with MySQL—probably the single most common starting point for anyone going that route, courtesy of the ubiquity of the standard Linux-Apache- MySQL-PHP stack.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; A year after that, I picked up some work that was already using PostgreSQL and fell in love almost immediately.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Something just felt &lt;em&gt;better&lt;/em&gt; about running &lt;code&gt;psql&lt;/code&gt; than running &lt;code&gt;mysql&lt;/code&gt; on the command line. Postgres’ implementation of the SQL standard felt more natural. Even the tiniest little details like the way tables display when you query them in &lt;code&gt;psql&lt;/code&gt; was nicer. In less than a week, I was sold and haven’t looked back. While I’ve used MySQL out of convenience on shared hosting from time to time, PostgreSQL is unquestionably my preferred database target.&lt;/p&gt;
&lt;p&gt;Today’s experience brought that all home again. That grin on my face all afternoon felt a bit silly, but it highlights the difference that really good software design makes. I am not just talking about how it looks here—though, to be sure, PostgreSQL is prettier than FirebirdSQL—but how it works. PostgreSQL feels responsive, its command set makes a lot of sense and is easy to use, and it is &lt;em&gt;extremely&lt;/em&gt; well documented. In fact, I would go so far as to say that it is the best documented open source software I have ever used, as well as among the very most robust. (The only other open source software I find to be as incredibly rock-solid and reliable as PostgreSQL is the Linux kernel. I am by no means an expert on either, or on open source software in general, but the Linux kernel is an unarguably amazing piece of work. So is PostgreSQL.) All those tiny little details add up.&lt;/p&gt;
&lt;p&gt;It’s a good reminder for me as I write software that yes, the things I care about—the small matters that would be so easy to overlook when customers express no interest in them—really do matter. People may not know that things like typography make a difference in their experience, but those subtle, often imperceptible things matter. They may not consciously notice the differences in your interface design (even a command line interface), but it will change their experience of the software. Do it poorly, or even in a just-good-enough-to-get- by fashion, and you’ll annoy or simply bore them. Do it well, and you might just delight them—even if they can’t tell you why.&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="examples" class="level2"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;To make my point a little more visible, I thought it might be useful to post samples of SQL to accomplish the same task in the two different database dialects.&lt;/p&gt;
&lt;section id="firebirdsql4" class="level3"&gt;
&lt;h3&gt;FirebirdSQL:&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id INT NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
CREATE SEQUENCE project_id_sequence;
SET TERM + ;
CREATE TRIGGER project_id_sequence_update
  ACTIVE BEFORE INSERT OR UPDATE POSITION 0
  ON projects
AS
BEGIN
  IF ((new.id IS NULL) OR (new.id = 0))
    THEN new.id = NEXT VALUE FOR project_id_sequence;
END+
SET TERM ; +&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="postgresql" class="level3"&gt;
&lt;h3&gt;PostgreSQL&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id SERIAL NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not just that the PostgreSQL example is shorter and clearer—it is that it is shorter and clearer because its designers and developers have taken the time to make sure that the shorter, cleaner way works well, and have documented it so you can know how to use that shorter cleaner way without too much difficulty.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I do most of my development on a Mac, but do all the testing on the target platform (Windows) in a VM.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;At this point, I would only use one of those by default if I were building a web app: Linux. I’d use &lt;a href="http://wiki.nginx.org/Main"&gt;nginx&lt;/a&gt; instead of Apache, &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; instead of MySQL, and &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; (though &lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, Javascript via &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/vstudio/hh341490"&gt;C# and the .NET stack&lt;/a&gt;, or just about anything &lt;em&gt;but&lt;/em&gt; PHP would do fine).&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;&lt;em&gt;Almost&lt;/em&gt; immediately because at that point configuration on OS X was a bit of a pain. That is &lt;a href="http://postgresapp.com" title="Postgres.app"&gt;no longer the case&lt;/a&gt;.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;To be perfectly fair to Firebird, it is improving. The upcoming 3.0 series release will make these two a lot more similar than they are at present, and clean up a number of other issues. What it won’t do is get the &lt;em&gt;feel&lt;/em&gt; of using Firebird more like that of using Postgres, or make the installation procedure smoother or easier, or make the documentation more complete.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[software development"></category><category term="design]"></category></entry><entry><title>FirebirdSQL and IntelliJ IDEA (etc.)</title><link href="http://www.chriskrycho.com/2014/firebirdsql-and-intellij-idea-etc.html" rel="alternate"></link><published>2014-03-28T09:00:00-04:00</published><updated>2014-03-28T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-28:/2014/firebirdsql-and-intellij-idea-etc.html</id><summary type="html">Configuration instructions for FirebirdSQL JDBC with JetBrains IntelliJ IDEA platform (including PyCharm, RubyMine, WebStorm, etc.).
</summary><content type="html">&lt;p&gt;Setting up IntelliJ IDEA’s built-in database tools to work with FirebirdSQL requires a particular setup configuration, which I’m documenting here for public consumption.&lt;/p&gt;
&lt;p&gt;These setup tools &lt;em&gt;should&lt;/em&gt; be applicable to any of JetBrains’ other Java-based IDEs which include database support (e.g. PyCharm, RubyMine, WebStorm, etc.). &lt;em&gt;Note:&lt;/em&gt; the following apply to IntelliJ IDEA 12 and the associated platforms, but &lt;em&gt;not&lt;/em&gt; to the IDEA 13 platform, which made substantial changes to how databases are configured. The underlying details are consistent, but the interface has changed. I have tested on PyCharm 3.1 to confirm that.&lt;/p&gt;
&lt;p&gt;This was all done on OS X 10.9, so I also make no guarantees that this works on other platforms, though the likelihood that it behaves the same on Linux is fairly good. I will update the post if and when I have confirmed that it does.&lt;/p&gt;
&lt;p&gt;Steps to configuring a database correctly for use with IDEA/etc. Note that steps 1–3 are fairly obvious; the real point of interest is in steps 4 and 5, which took me the longest time to figure out.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Download the latest version of the Firebird &lt;a href="http://www.firebirdsql.org/en/jdbc-driver/"&gt;Java drivers&lt;/a&gt; for your operating system and your Java version. (You can check your Java version by running &lt;code&gt;java -version&lt;/code&gt; at the command line.) Extract the downloaded zip file. The extracted folder should include a file named &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt; (&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is currently 2.2.4).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In IDEA, in the database view, add a new data source: in the Database view (accessible via a menu button on the right side of the screen), right click and choose &lt;strong&gt;New -&amp;gt; Data Source&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;JDBC driver files&lt;/strong&gt;, browse to the location where you extracted the Jaybird driver files and select &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;JDBC driver class&lt;/strong&gt;, choose &lt;code&gt;org.firebirdsql.jdbc.FBDriver&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;Database URL&lt;/strong&gt;, specify &lt;code&gt;jdbc:firebirdsql://localhost:3050/&lt;/code&gt; followed by &lt;em&gt;either&lt;/em&gt; the full path to the database in question or a corresponding alias.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; A full path might look like this on Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/C:/my_project/the_database.db&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With an alias, you would instead have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/the_alias&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then specify valid values for the &lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;Password&lt;/strong&gt; fields from your existing configuration of the database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;strong&gt;Test Connection&lt;/strong&gt; button and make sure the configuration works.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should do it. Note that the driver choice and path configuration both matter. On OS X, I found that only the &lt;code&gt;FBDriver&lt;/code&gt; with this (and one other, older-style and therefore not recommended) path setup worked successfully.&lt;/p&gt;
&lt;p&gt;Observations, corrections, additional information, and miscellaneous comments welcomed on &lt;a href="https://alpha.app.net/chriskrycho"&gt;App.net&lt;/a&gt; or &lt;a href="https://www.twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I strongly recommend configuring an alias in the aliases.conf file in the Firebird home directory (usually set as &lt;code&gt;$FIREBIRD_HOME&lt;/code&gt; during installation on *nix systems). This lets you move the database around at will, update just the configuration file, and not have to update any references to the database file whatsoever.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="Software Development"></category></entry><entry><title>The End of Surfing</title><link href="http://www.chriskrycho.com/2014/the-end-of-surfing.html" rel="alternate"></link><published>2014-03-26T20:00:00-04:00</published><updated>2014-03-26T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-26:/2014/the-end-of-surfing.html</id><summary type="html">Tabbed browsers killed "surfing." You only thought it was Facebook to blame.</summary><content type="html">&lt;p&gt;Sometime in the last few months it occurred to me that I no longer “surf” the internet. I read, to be sure, and every once in a long while I even go on a spree where I follow links from one site to another (or just in a long trail on Wikipedia). In general, however, I no longer surf. I suspect I am not alone in this: if we took a straw poll I would venture that most of my friends offline and acquaintances online alike spend rather less time in “browsing” mode than they do reading Facebook or Twitter or Instagram. Motion from link to link has been replaced by individual hops out onto Buzzfeed or a viral cat picture website.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The obvious explanation for all of this is already there in what I’ve written: Facebook and Twitter and all the rest of the social media web. To be sure, the advent of social media and the increasing degree to which social media have captured user attention on the web are a significant factor in the end of the old surfing/browsing behavior. This is a dream come true for those social media giants which have found ways to deliver ads to their many millions of users and thereby turn enormous profits.&lt;/p&gt;
&lt;p&gt;At the same time, I think there is an oft-overlooked factor in the shifting nature of the web over the last decade: the browser. In fact, if there is any single cause behind the death of old-fashioned surfing, I would point to Firefox 1.0: the browser which popularized tabbed browsing to increasingly large sections of the internet-using public.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The open-source browser steadily ate away at Internet Explorer’s then absurd levels of dominance, until Internet Explorer 8 included of tabs itself. By the time that Chrome came on the scene, tabbed browsing had long since become a given.&lt;/p&gt;
&lt;p&gt;So why do I think that &lt;em&gt;tabbed browsing&lt;/em&gt; of all things contributed to the end of “browsing” and “surfing” as our dominant mode of reading the internet? Simply put: it broke linearity. Previously,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; one’s experience of the web was single- stranded, leaping from one point to another in a line that however contorted was always connected by the forward and backward buttons on the browser. The moment tabbed browsing came on the scene, that line was broken. Following a link might mean it opened in a new tab instead of moving the whole view forward to it.&lt;/p&gt;
&lt;p&gt;Surfing as I remember it in the late ’90s and early ’00s was inherently the experience of getting lost along that timeline, finding myself dozens of links along the chain and wondering how I had ended up there, and then being able to trace my way back. With tabs, that traceability was gone. With it went the inherent tension that we faced with every link: to follow, or not? To get sucked down into &lt;em&gt;this&lt;/em&gt; vortex or &lt;em&gt;that&lt;/em&gt;? Because in all likelihood, we knew, we were not going to be coming back to this page. With tabs, though, I could open both of those pages without ever leaving this one. I could start new journeys without ending the old. But there was a hidden cost: that newly opened tab had no history. It was a clean slate; before that newly opened link there was only a blank page. If I closed the original from which I had opened it, there was no going back.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; If I closed this new tabs, there was no going forward to them. The line was broken.&lt;/p&gt;
&lt;p&gt;From there it was only a short step to the idea of a single site being the center from which one ventured out to other points on the web before returning: the Facebooks and Twitters of the world. In some sense, Facebook’s entire model is predicated on the idea that it is natural to open a new tab with that juicy Buzzfeed content while keeping Facebook itself open in a background tab. Would it work in that old linear model? Sort of. Would it feel natural? Never.&lt;/p&gt;
&lt;p&gt;All of this because of tabs. Invention’s most significant results are rarely those the minds behind it expect. When we are designing things—whether a piece of furniture or a piece of the web—we have to remember that design decisions all have repercussions that we may not see. Technology is never neutral. Particular innovations may or may not be &lt;em&gt;morally&lt;/em&gt; significant, but they always produce changes in people’s behavior. Design has consequences.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For the record, lots of that hopping from link to link was on Buzzfeed- like and viral-cat-picture-like sites, too. I am not concerned with the &lt;em&gt;kind&lt;/em&gt; of content being read here, so much as the way it is being read.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Note that I am not crediting Firefox 1.0 with &lt;em&gt;creating&lt;/em&gt; the tabbed browser—only with popularizing it. That distinction matters.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Excepting having multiple browser windows open, which I am sure people did—but to a much lesser extent.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Yes, yes, browser history and re-open closed tab commands. But the &lt;em&gt;experience&lt;/em&gt; of those is different, and that’s what we’re talking about here.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[design"></category><category term="software development]"></category></entry><entry><title>Doing It Myself</title><link href="http://www.chriskrycho.com/2014/doing-it-myself.html" rel="alternate"></link><published>2014-03-21T22:14:00-04:00</published><updated>2014-03-21T22:14:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-21:/2014/doing-it-myself.html</id><summary type="html">Working with Pelican&amp;mdash;the static site generator I use for my blog currently&amp;mdash;has reinforced my desire to write my own such software. Sometimes, you just have to do it yourself.</summary><content type="html">&lt;p&gt;Last summer, I started work on a project I named &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;—aiming to make a static site generator that would tick of all the little boxes marking my desires for a website generator. In due time, the project got put on hold, as I started up classes again and needed to focus more on my family than on fun side projects.&lt;/p&gt;
&lt;p&gt;Come the beginning of 2014, I was ready to bit WordPress farewell once and for all, though. While &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; looks interesting, since I do all my writing in Markdown files, there is something tempting about the canonical version of the documents being the version on my computer (and thus also on my iPad and iPhone and anywhere I have Dropbox and/or Git access). I did not have time at the beginning of the year to finish writing Step Stool, and I knew as much,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; so instead I moved to &lt;a href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; as a stop-gap. There were lots of good reasons to pick Pelican: it has an active development community, fairly thorough documentation,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and it’s in Python and uses Jinja2 templates—the same basic approach I had taken with Step Stool, and the same toolset.&lt;/p&gt;
&lt;p&gt;Unfortunately, while I have been glad to be away from WordPress, my experience with Pelican so far has only reinforced my desire to get Step Stool done. There are &lt;em&gt;lots&lt;/em&gt; of little things that it does in ways that just annoy me. Many of them have to do with configuration and documentation. On the latter, while the documentation is &lt;em&gt;fairly&lt;/em&gt; complete, there are quite a few holes and gaps. (Yes, yes, open source software and anyone can add to the docs. That’s great—it really is—but if I’m going to use someone else’s solution, it had better &lt;em&gt;just work&lt;/em&gt;. Otherwise, I’d rather spend my time getting my own going.)&lt;/p&gt;
&lt;p&gt;For example, if you want to see how the pagination actually works, good luck figuring it out from the documentation. You’ll need to go looking at the way the sample themes (yes, both of them) are implemented to start getting a feel for it. Along the same lines, many of the objects that get handed to the templates are not fully documented, so it is difficult to know what one can or cannot do. I do not particularly want to spend my time adding debug print statements to my templates just to figure out what options I have available.&lt;/p&gt;
&lt;p&gt;The same kinds of things hold true for configuration options. Moreover, the configuration is done through a Python module. While that makes the module easier to integrate on the code side of things, it makes its actual content much less transparent than one might hope. Python is not really well optimized for writing configuration files—nor is any normal programming language. Configuration is inherently declarative, rather than imperative.&lt;/p&gt;
&lt;p&gt;This is not to say that Pelican is bad software. It is not. It is, however, a fairly typical example of open source software implemented by committee. It has holes (some of them serious), bumps, and quirks. Here is the reality: so will Step Stool, though they will be the quirks that come from an individual developer’s approach rather than a group’s. But the one thing I can guarantee, and the reason I am increasingly motivated to get back to working on Step Stool. And yes, I do have a couple other projects on my plate as well—contributions to the Smartypants and Typogrify modules, my own &lt;a href="https://bitbucket.org/chriskrycho/spacewell"&gt;Spacewell typography project&lt;/a&gt;, and quite possibly a &lt;a href="https://bitbucket.org/chriskrycho/markdown-poetry/"&gt;Markdown Poetry extension&lt;/a&gt;. But I would like very much to just get back to doing this myself. There is freedom in rolling my own solution to things. I will not always have time to do these kinds of things; I figure I should do them when I can.&lt;/p&gt;
&lt;p&gt;So here’s to &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;, and—more importantly—to writing your own software just to scratch that itch.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I spent quite a bit of time tweaking my friend Vernon King’s &lt;a href="http://www.vernonking.org"&gt;Jekyll-powered site&lt;/a&gt;, I got Winning Slowly off the ground, including designing the site from scratch and implementing it (also in Pelican), and I did some substantial redesign work on this site. That was more than enough for my three week break—as evidenced by the fact that I didn’t get to the sort of 1.0 version of this site until just a week or so ago.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Emphasis on “fairly.” More on &lt;em&gt;that&lt;/em&gt; in a moment as well.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[software development]"></category></entry><entry><title>Why Is American Internet So Slow?</title><link href="http://www.chriskrycho.com/2014/why-is-american-internet-so-slow.html" rel="alternate"></link><published>2014-03-07T19:55:00-05:00</published><updated>2014-03-07T19:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-07:/2014/why-is-american-internet-so-slow.html</id><summary type="html">&lt;p&gt;Pretty damning of the current (lack of a) regulatory regime, if you ask me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to a recent study by Ookla Speedtest, the U.S. ranks a shocking 31st in the world in terms of average download speeds. The leaders in the world are Hong Kong at 72.49 Mbps …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Pretty damning of the current (lack of a) regulatory regime, if you ask me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to a recent study by Ookla Speedtest, the U.S. ranks a shocking 31st in the world in terms of average download speeds. The leaders in the world are Hong Kong at 72.49 Mbps and Singapore on 58.84 Mbps. And America? Averaging speeds of 20.77 Mbps, it falls behind countries like Estonia, Hungary, Slovakia, and Uruguay.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="[links]"></category></entry><entry><title>Goodbye, Chrome</title><link href="http://www.chriskrycho.com/2014/goodbye-chrome.html" rel="alternate"></link><published>2014-02-24T15:20:00-05:00</published><updated>2014-02-24T15:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-24:/2014/goodbye-chrome.html</id><summary type="html">Opting people into Google Now in the browser is bad enough. Doing it when they're signed out? Beyond creepy.
</summary><content type="html">&lt;p&gt;Last week, Chrome crossed the line for me. I deleted it from my system to clean up its many hooks into my system—I searched out every trace of it I could find—and will put it back on my system only for testing websites. Why? Because it’s just too creepy now.&lt;/p&gt;
&lt;p&gt;Here’s the story: two weekends ago, I was sitting at a coffee shop working on a friend’s website, when up popped a series of Google Now OS X desktop notifications from Chrome, informing me of the weather, a package having recently shipped, and so on.&lt;/p&gt;
&lt;p&gt;There were just two problems with this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I never gave Chrome permission to do anything of the sort.&lt;/li&gt;
&lt;li&gt;I was not signed into Chrome or any Google service at the time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Number 1 is bothersome. Number 2 is so far beyond bothersome that I took the nuclear option. Let’s walk through them.&lt;/p&gt;
&lt;p&gt;Google apparently decided to start opting people into Google Now on the Chrome 33 Beta. Opting people into anything new is nearly always a bad idea in my view; opting someone into something that actively integrates with email, calendar, etc. without asking them is just creepy. Now, full disclosure: I had previously granted Google access to some of this data for Google Now on my Android phone (though I have since moved to an iPhone). However, as is usual for Google these days, the company took that permission in one context and treated it as global permission in all contexts.&lt;/p&gt;
&lt;p&gt;No doubt the box I checked when I gave them access to that data in the first place legally allowed them to continue touching it. That did not particularly bother me. Rather, it was the assumption that I wanted the same kind of interactions from the service in a different context. This is typical of Google —typically un-human-friendly, that is. People do different things with their phones than with their browsers, and have different expectations of what each will do. More importantly, though, even if we might &lt;em&gt;want&lt;/em&gt; our browsers to start supplying us the kinds of sometimes-valuable information that we get from Google Now (or Apple or Microsoft’s similar tools), we generally want the opportunity to make that decision. Increasingly, Google is making that decision for its users, leaving them to opt out and turn it off if they so desire. That is not a policy I particularly like. So: strike one. Or rather: strike several dozen, of the sort that had me moving away from Google’s services for quite some time— but it probably still wouldn’t have pushed me across the line to this kind of hard kill-it-with-fire mentality.&lt;/p&gt;
&lt;p&gt;What did? That would be the part where Chrome started sending me desktop Google Now notifications. Without asking me. In a browser to which I was not logged in, nor logged into any Google services.&lt;/p&gt;
&lt;p&gt;I will say that again to be clear: I was not signed into Chrome. I was not signed into any Google services in the browser. I had not allowed the browser to create desktop notifications. And it started sending me Google Now notifications for my main Google account. Worse: nothing I could do with the browser itself changed that behavior. (Unsurprising: there was no way Chrome should have been able to do that in the first place, logged out of all Google services as I was.)&lt;/p&gt;
&lt;p&gt;Goodbye, Chrome. You’re just too creepy.&lt;/p&gt;
&lt;p&gt;This was not the first time I have seen Chrome engage in behavior that does not respect its users. I have repeatedly run into cases where clearing the cache and deleting browsers… doesn’t. Cookies sometimes still stick around. Private browsing sessions inherit cookies from the main window (and sometimes vice versa). Closing a private session and launching a new one would sometimes still include cookies and cache from a previous session (bank accounts still logged in, etc.). Chrome had thus long been untrustworthy to me. But this was a bridge too far. This was not just slightly unnerving. It was creepy.&lt;/p&gt;
&lt;p&gt;Call it a bug if you like. It is likely that it was, in fact, a bug. So, most likely, were the other cases I saw above. But these are the kinds of bugs that make a browser fundamentally untrustworthy, and they are the kinds of bugs that are that much creepier coming from a company whose profit comes almost entirely from selling advertising—that is, from selling user information to advertising companies. The deal was that we trusted Google not to abuse that information. Unfortunately, that deal just keeps getting worse all the time. (Pray they do not alter it further.)&lt;/p&gt;
&lt;p&gt;I will have a copy of the browser on my system for testing purposes, but for nothing else. Goodbye, Chrome. And for that matter: goodbye, Google services. Over the course of the rest of this year, I will be moving myself completely off of all Google services (mail, calendar, etc.), with the sole exception of (non- logged-in) search. You’re just too creepy now.&lt;/p&gt;
</content></entry></feed>