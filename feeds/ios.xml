<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - iOS</title><link>http://v4.chriskrycho.com/</link><description></description><lastBuildDate>Mon, 28 Oct 2019 07:25:00 -0400</lastBuildDate><item><title>Apple, Your Developer Documentation is Garbage</title><link>http://v4.chriskrycho.com/2019/apple-your-developer-documentation-is-garbage.html</link><description>&lt;p&gt;&lt;i&gt;&lt;b&gt;&lt;a href="https://v4.chriskrycho.com/2018/assumed-audiences.html"&gt;Assumed Audience&lt;/a&gt;:&lt;/b&gt; practitioners or interested lookers-on for software development—and Apple itself.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Over the past few months, I have been trying to get up to speed on the Apple developer ecosystem, as part of working on my &lt;a href="https://rewrite.software"&gt;&lt;b&gt;&lt;i&gt;re&lt;/i&gt;write&lt;/b&gt;&lt;/a&gt; project. This means I have been &lt;a href="https://v4.chriskrycho.com/2019/rewrite-dev-journal-how-progress-doesnt-feel.html"&gt;learning&lt;/a&gt; Swift (again), SwiftUI, and (barely) the iOS and macOS &lt;abbr title='application programming interface'&gt;API&lt;/abbr&gt;s.&lt;/p&gt;
&lt;p&gt;It has been &lt;em&gt;terrible&lt;/em&gt;. The number of parts of this ecosystem which are entirely undocumented is frankly shocking to me.&lt;/p&gt;
&lt;p&gt;Some context: I have spent the last five years working very actively in the JavaScript front-end application development world, working in first AngularJS and then Ember.js. Ember’s docs once had a reputation of being pretty bad, but in the ~4 years I’ve been working with it, they’ve gone from decent to really good. On the other hand, when I was working in AngularJS 5 years ago, I often threw up my hands in quiet despair at the utter lack of explanation (or, occasionally, the &lt;em&gt;inane&lt;/em&gt; explanations) of core concepts. I thought that would have to be the absolute worst a massive tech company (in that case, Google) providing public &lt;abbr&gt;API&lt;/abbr&gt;s could possibly do.&lt;/p&gt;
&lt;p&gt;I was wrong. The current state of Apple’s software documentation is the worst I’ve ever seen for any framework anywhere.&lt;/p&gt;
&lt;p&gt;Swift itself is relatively well covered (courtesy of the well-written and well-maintained book). But that’s where the good news ends.&lt;a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Most of SwiftUI is entirely undocumented—not even a single line explanation of what a given type or modifier does. Swift Package Manager has &lt;em&gt;okay&lt;/em&gt; docs, but finding out the limits of what it can or can’t do from the official docs is difficult to impossible; I got my ground truth from Stack Overflow questions. I’ve repeatedly been reduced to searching through &lt;abbr title='World Wide Developer Conference'&gt;WWDC&lt;/abbr&gt; video transcripts to figure out where someone says something relevant to whatever I’m working on.&lt;a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is, frankly, unacceptable. In the Ember ecosystem, we have a simple rule that code doesn’t get to ship unless it’s documented. The same goes in Rust (I should know: I &lt;a href="https://github.com/rust-lang/rfcs/pull/1636"&gt;wrote&lt;/a&gt; the &lt;abbr title='request for comments'&gt;RFC&lt;/abbr&gt; &lt;a href="https://rust-lang.github.io/rfcs/1636-document_all_features.html"&gt;that made that official policy&lt;/a&gt;). Now, I understand that Apple’s &lt;abbr&gt;API&lt;/abbr&gt; developers (often) work in a different context than these open source projects—especially in that they face crunches around releases which are tied to hardware products shipping.&lt;/p&gt;
&lt;p&gt;But. At the end of the day, when you’re vending an &lt;abbr&gt;API&lt;/abbr&gt;, it isn’t done until it’s documented. Full stop.&lt;/p&gt;
&lt;p&gt;Given what I know of Apple’s approach to this, the problem is not individual engineers—who are not responsible for writing docs; that is the responsibility of dedicated coumentation teams. But that does not make it any less a failure of Apple’s engineering &lt;em&gt;organization&lt;/em&gt;. The job of an &lt;abbr&gt;API&lt;/abbr&gt; engineering organization is to support those who will consume that &lt;abbr&gt;API&lt;/abbr&gt;. I don’t doubt that many of Apples &lt;abbr&gt;API&lt;/abbr&gt; engineers would &lt;em&gt;love&lt;/em&gt; for all of these things to be documented. I likewise do not doubt that the documentation team is understaffed for the work they have to do. (If I’m wrong, if I &lt;em&gt;should&lt;/em&gt; doubt that, because Apple’s engineering culture &lt;em&gt;doesn’t&lt;/em&gt; value this, then that’s even worse an indictment of the engineering culture.) This kind of thing has to change at the level of the entire engineering organization.&lt;/p&gt;
&lt;p&gt;Apple claims to be interested in building a platform that is accessible to everyone—from a brand new developer to the most experienced gray-haired folks who’ve been around since the NeXT days. Right now, they’re not even close. I have a decade of software development under my belt, a fair bit of it in languages with rich type systems and functional programming idioms, and some of this stuff is hard for &lt;em&gt;me&lt;/em&gt; to figure out. I can’t imagine how mind-bogglingly terrible the experience would be for someone just starting in software, or coming over with experience only in languages like Ruby or Python or JavaScript. It would be completely impossible to learn.&lt;/p&gt;
&lt;p&gt;Apple, if you want developers to love your platform—and you should, because good developers are your lifeblood—and if you don’t want them to flee for other platforms—and you should be worried about that, because the web is everywhere and Microsoft is coming for you—then you need to take this seriously. Adopt the mentality that has served other frameworks and languages so well: &lt;strong&gt;&lt;em&gt;If it isn’t documented, it isn’t done.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;section class="footnotes" role="doc-endnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1" role="doc-endnote"&gt;&lt;p&gt;I am not the only one who has noticed this. &lt;a href="https://nooverviewavailable.com"&gt;No Overview Available&lt;/a&gt; summarizes the extent of documentation in Apple’s &lt;abbr&gt;API&lt;/abbr&gt;s and… it’s not a good look. Hat tip to &lt;a href="https://lobste.rs/u/wink"&gt;Lobste.rs user wink&lt;/a&gt; and my friend &lt;a href="https://jeremywsherman.com"&gt;Jeremy Sherman&lt;/a&gt;, who both noted this.&lt;a href="#fnref1" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2" role="doc-endnote"&gt;&lt;p&gt;Credit where credit is due: it is genuinely excellent from an accessibility and general usability standpoint that Apple has these transcripts. However, they’re not a substitute for &lt;em&gt;documentation&lt;/em&gt;!&lt;a href="#fnref2" class="footnote-back" role="doc-backlink"&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 28 Oct 2019 07:25:00 -0400</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2019-10-28:/2019/apple-your-developer-documentation-is-garbage.html</guid><category>Swift</category><category>iOS</category><category>macOS</category><category>software development</category></item><item><title>Hey Siri, Record a Zettel</title><link>http://v4.chriskrycho.com/2018/hey-siri-record-a-zettel.html</link><description>&lt;p&gt;&lt;i&gt;&lt;b&gt;&lt;a href="https://v4.chriskrycho.com/2018/assumed-audiences.html"&gt;Assumed Audience:&lt;/a&gt;&lt;/b&gt; people interested in reading, writing, learning, and research systems—particularly on iOS, and particularly with automation in view.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;A few evenings ago, I spent a little while building out some Siri Shortcuts to make the process of building out notes in &lt;a href="https://v4.chriskrycho.com/zettelkasten"&gt;my Zettelkasten&lt;/a&gt; on the fly easier. Building them in Bear is easy &lt;em&gt;enough&lt;/em&gt;, but it’s even nicer to just be able to tap a button and have things like the date auto-generated for the note title in exactly the format I want: &lt;code&gt;YYYY.MM.DD.HHMM&lt;/code&gt;, like &lt;code&gt;2018.12.14.2205&lt;/code&gt; for a note created on December 14, 2018, at 10:05 pm.&lt;/p&gt;
&lt;p&gt;This timestamp format means I can always find notes by when they were written, and it’s easy to sort them by when I created them, which in turn seems the kind of thing that will prove helpful in the long-term, given how much our memories are &lt;em&gt;associative&lt;/em&gt;. (This insight is &lt;a href="https://zettelkasten.de/posts/no-categories/"&gt;not original&lt;/a&gt; by any means, but it’s something I’ve long valued in my &lt;a href="https://v4.chriskrycho.com/2018/just-write-down-what-you-do.html"&gt;work&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;So having a little tool that handles that part automatically is &lt;em&gt;great&lt;/em&gt;. The other thing that’s nice about using shortcuts is that I can use them in a hands-free context. I can now just say, “Hey Siri, record a new Zettel” and (since Shortcut configurations are shared across my iCloud account), I can do the whole process without typing a thing. Tagging is a bit harder here, but I can do well enough (it helps that I enunciate &lt;em&gt;extremely&lt;/em&gt; clearly).&lt;/p&gt;
&lt;p&gt;One thing I wish is that iOS had support for doing these kinds of things when in do-not-disturb mode when driving. That’s the time when my “record a new Zettel” Siri Shortcut would be &lt;em&gt;most&lt;/em&gt; handy, and it’s not available. I’d be perfectly fine with having to come back and do a bit of cleanup later to get it &lt;em&gt;just right&lt;/em&gt;, as long as I could get the thought down somewhere I could come back to it later. You can do things like say “Hey Siri, in Bear, add a note,” and Siri will prompt you for its content—so clearly the functionality is there. SiriKit just needs to better support it.&lt;/p&gt;
&lt;p&gt;As for these particular shortcuts: I’m still working out the kinks, but for what it’s worth, here are the shortcuts I’ve built so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.icloud.com/shortcuts/c2406245de5846bebbda93d798034e25"&gt;Record a New Zettel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.icloud.com/shortcuts/ae956fdd00454f0d824dd47ea69cecd2"&gt;Write a New Zettel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.icloud.com/shortcuts/45a7c484309344c9a59e2f3e48a68083"&gt;Quote → Zettel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m also thinking I’ll end up using the built-in hook Bear has to download a web page, but I haven’t worked that into my flow just yet.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Fri, 14 Dec 2018 22:15:00 -0500</pubDate><guid isPermaLink="false">tag:v4.chriskrycho.com,2018-12-14:/2018/hey-siri-record-a-zettel.html</guid><category>Zettelkasten</category><category>automation</category><category>iOS</category><category>research</category><category>notes</category></item></channel></rss>