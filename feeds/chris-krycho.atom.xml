<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Chris Krycho - Chris Krycho</title><link href="http://www.chriskrycho.com/" rel="alternate"></link><link href="http://www.chriskrycho.com/feeds/chris-krycho.atom.xml" rel="self"></link><id>http://www.chriskrycho.com/</id><updated>2018-10-18T19:00:00-04:00</updated><entry><title>Assumed Audiences</title><link href="http://www.chriskrycho.com/2018/assumed-audiences.html" rel="alternate"></link><published>2018-10-18T19:00:00-04:00</published><updated>2018-10-18T19:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-10-18:/2018/assumed-audiences.html</id><summary type="html">“The Internet” is far too broad an audience for, well, basically &lt;em&gt;any&lt;/em&gt; post I write. My current best solution: “Assumed Audience” headings on posts.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;&lt;strong&gt;Assumed audience:&lt;/strong&gt; everyone on the internet.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I am working on a post about something I think is interesting in programming, and shared it with a friend last night to get some feedback on what I had written so far. His response made me realize that the post left me open to wild and massive misinterpretation of my intent. (The specific details aren’t really that interesting for my broader point here.)&lt;/p&gt;
&lt;p&gt;I was thinking about how to clarify that, and it took me back to a Winning Slowly episode we recorded back in 2015, with the wonderful title &lt;a href="https://winningslowly.org/2.02/"&gt;Basketballs ≠ Pumpkins&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In which we talk about… the general phenomenon of things you say on the internet going viral (often when you least expect them to). How do you deal with the reality that your audience is never limited but may universalize at any moment? What is the audience’s responsibility, and what are creators’ responsibilities? How do we deal charitably with authors writing “in-house” on controversial topics?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The basic problem here is that a blog post is open to everyone on the internet to read… but &lt;em&gt;everyone on the internet&lt;/em&gt; is far too broad an audience for, well, basically &lt;em&gt;any&lt;/em&gt; post I write. (Or indeed any post anyone writes.)&lt;/p&gt;
&lt;p&gt;What’s more, for any given post I write, there is an &lt;em&gt;implicit&lt;/em&gt; audience. You as reader just have no way of knowing who I have in mind. Maybe I &lt;em&gt;am&lt;/em&gt; thinking of “the whole internet,” but that certainly isn’t the case for &lt;em&gt;most&lt;/em&gt; posts. So what if I just made my intended audience explicit?&lt;/p&gt;
&lt;p&gt;My current best solution for handling this phenomenon is an “assumed audience” heading on the top of a post. It won’t head off &lt;em&gt;all&lt;/em&gt; the nonsense, of course. But it at least gives people a frame of reference. A few examples that leap to mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assumed audience:&lt;/strong&gt; other theologically conservative Christians in the &lt;abbr title="Presbyterian Church in America"&gt;PCA&lt;/abbr&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assumed audience:&lt;/strong&gt; people curious about functional programming&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assumed audience:&lt;/strong&gt; experienced Rust developers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assumed audience:&lt;/strong&gt; people outright hostile to religious belief&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of those are people I might actually address on this blog—and there are plenty of others, of course. What’s potentially useful about this kind of thing is that good-faith readers know how to approach the content. Bad-faith readers will of course do with any text what they will. I cannot stop someone from hate-reading me. All I can do is put up sign-posts for people who are &lt;em&gt;interested&lt;/em&gt; in good faith readings.&lt;/p&gt;
&lt;p&gt;For example, if you’re a die-hard devotee of dynamic programming languages, a note that the assumed audience is people interested in advanced static types tells you that my point isn’t persuading &lt;em&gt;you&lt;/em&gt;, but persuading someone else entirely. You can adjust your read accordingly.&lt;/p&gt;
&lt;p&gt;Likewise, if I’m writing on Christian ethics with an assumed audience of secular progressives, and you’re a fundamentalist Christian, you can read with the understanding that I will frame things differently for someone who disagrees with me about everything (down to and including the nature of reality itself!) than if we were having an “in-house” conversation! You can adjust your read accordingly.&lt;/p&gt;
&lt;p&gt;I’m increasingly convinced something like this is important. &lt;em&gt;Very&lt;/em&gt; important, even.&lt;/p&gt;
&lt;p&gt;It’s worthwhile to blog and write publicly—some of the best feedback I get on things I write is from total strangers!—but it’s also very difficult to write effectively when everything must be couched in forty-eight layers of nuance and qualification just in case someone from a different tribe happens along.&lt;/p&gt;
&lt;p&gt;Maybe I’ll just be this weird guy over here marking my posts this way, or maybe it’ll catch on with other weird people and a few corners of the internet will be a little less open to misunderstanding. Maybe people will completely ignore them and engage in full on flame wars on Twitter and Hacker News. (That seems more likely than not.) I think it’s worth a shot anyway. Let’s try it and find out!&lt;/p&gt;
</content><category term="writing"></category><category term="reading"></category></entry><entry><title>Neither Being Dumb Nor Giving In</title><link href="http://www.chriskrycho.com/2018/neither-being-dumb-nor-giving-in.html" rel="alternate"></link><published>2018-10-15T09:20:00-04:00</published><updated>2018-10-15T09:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-10-15:/2018/neither-being-dumb-nor-giving-in.html</id><summary type="html">With burnout, getting out on a run (for example), can feel impossible—but it’s essential. We can neither ignore experiences like burnout, nor let them dominate our mental lives: both approaches make things significantly worse.
</summary><content type="html">&lt;p&gt;One of the ways I respond to my experience of burnout is &lt;em&gt;refusing&lt;/em&gt; to let the fact that I’m experiencing burnout set the terms of my life. I cannot ignore the fact that I’m burnt out unless I want to make things worse. But I also recognize that with experiences like burnout, letting them dominate our mental lives can make things significantly worse, too.&lt;/p&gt;
&lt;p&gt;There is a fine little dance here: acknowledging the reality of the hard things we experience, while not narrowing our lives to &lt;em&gt;merely&lt;/em&gt; those hard things.&lt;/p&gt;
&lt;p&gt;An example of the way I try to walk this line in my own life: I am not holding myself to some of the exercise goals I set for myself before the worst of the burnout set in… but I am still exercising every day. That half marathon I wanted to run at the end of this month? I’m not running it. On too many runs in the last few weeks my body has simply shut down a few miles into a run. Two miles in, six miles in, three miles in… none of them are anything like 13.1 miles. So while I’ve managed a 14-mile run this training season, in the weeks since I did I have gotten loud, clear signals that continuing to push myself toward the race was a bad idea.&lt;/p&gt;
&lt;p&gt;That doesn’t mean I’m going to stop running, though. It means I’m going to be careful and wise about it. I’m going to listen to my body even more carefully when I’m out on a run than I normally do (and I’m not one of those people who keeps running when they shouldn’t anyway!). I’m going to switch some days over to doing Pilates with my wife instead of running. But also, on days like this past Saturday, when I felt &lt;em&gt;terrible&lt;/em&gt; emotionally and wanted nothing more than to lay in bed… I got up and went for a 4-mile run. It helped.&lt;/p&gt;
&lt;p&gt;Again: I won’t be dumb about my response to my burnout and pretend it doesn’t exist. But I also refuse to let especially the emotional experience of burnout be wholly determinative of what I do.&lt;/p&gt;
&lt;p&gt;An aside, and a thing I will come back to in the future: you may have noticed that I have avoided writing of burnout as something external to me. This is intentional. Too often in our discussions of burnout, depression, or the like, we externalize them—a way of distancing ourselves from them, usually aimed at the same kinds of things I’ve gestured at in this little post. For reasons I’ll come back to, I don’t think that’s quite the right solution: burnout is not a foe outside myself to vanquish, but a set of emotional, physical, and spiritual things &lt;em&gt;about&lt;/em&gt; myself. Again: more on that in the future.&lt;/p&gt;
</content><category term="burnout"></category><category term="exercise"></category><category term="running"></category></entry><entry><title>Ringworld Review</title><link href="http://www.chriskrycho.com/2018/ringworld-review.html" rel="alternate"></link><published>2018-10-14T17:30:00-04:00</published><updated>2018-10-14T17:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-10-14:/2018/ringworld-review.html</id><summary type="html">Recommended: A classic, Hugo- and Nebula-winning novel: I &lt;em&gt;enjoyed&lt;/em&gt; it… but it felt a bit overrated.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I keep my book review ratings simple—they’re either &lt;em&gt;required&lt;/em&gt;, &lt;em&gt;recommended&lt;/em&gt;, &lt;em&gt;recommended with qualifications&lt;/em&gt;, or &lt;em&gt;not recommended&lt;/em&gt;. If you want the TL;DR, this is it:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended:&lt;/strong&gt; In want of a bit of classic sci-fi, I recently picked up Larry Niven’s &lt;cite&gt;Ringworld&lt;/cite&gt; and read it this week. I enjoyed it, but more than that I find it hard to say. I’m still not sure exactly what to describe it as: an exploratory high concept romp, maybe. The characters were fine, the plot serviceable, and the two high concepts very high indeed. (Certainly the more interesting of those conceits is the one &lt;em&gt;not&lt;/em&gt; advertized by the title of the book.) I’m not sad I read it; I also don’t think I’d read it again. I might even call it a bit overrated.&lt;/p&gt;
</content><category term="science fiction"></category><category term="book reviews"></category><category term="reading"></category></entry><entry><title>Burnout Symptoms</title><link href="http://www.chriskrycho.com/2018/burnout-symptoms.html" rel="alternate"></link><published>2018-10-11T20:20:00-04:00</published><updated>2018-10-11T20:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-10-11:/2018/burnout-symptoms.html</id><summary type="html">Just a list of weird things that have happened to me while dealing with this.
</summary><content type="html">&lt;p&gt;Some of the symptoms I’ve had while experiencing burnout, all of which are exceedingly unusual in life for me normally:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;aches and pains:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;headaches: from low-level and relatively minor, to shooting pain in the temples or behind the eyes&lt;/li&gt;
&lt;li&gt;backaches and neckaches: unrelieved (and unrelievable, no matter the Pilates routine) sensations of muscle tension, including everything from the lower back to the base of my skull—likely a partial cause of the low-level headaches&lt;/li&gt;
&lt;li&gt;stomachaches: so far, only when feeling exceptionally stressed, but regularly and often when feeling particularly stressed&lt;/li&gt;
&lt;li&gt;occasional pains in my limbs unrelated to exercise I’ve done&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fatigue:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;I only sleep 7–7½ hours of sleep a night but now am needing 8½–9 hours to feel even somewhat rested&lt;/li&gt;
&lt;li&gt;decreased ability while exercising: though I have kept exercising anyway, my general athletic performance is much degraded and on a semi-regular basis I’m unable to complete workouts normally&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;cynicism&lt;/strong&gt;: finding it difficult to think the best of decisions others make, even when I can explain them in rational and reasonable ways&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;severe demotivation:&lt;/strong&gt; having difficulty getting to work and through work; and having a hard time doing any of my normal side projects. The only hobby which has felt &lt;em&gt;doable&lt;/em&gt; for most of the last few months has been &lt;a href="https://www.chriskrycho.com/2018/making-things-helps.html" title="Making Things Helps"&gt;writing on and working on this website&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;crying, of all sorts:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;streams of silent tears: not in the “I have something in my eye” sense but in the “I have tears streaming down my face” sense—but with no trigger&lt;/li&gt;
&lt;li&gt;quietly sobbing, with or without any trigger—but never triggers that would ordinarily prompt much of a reaction at all, much less crying&lt;/li&gt;
&lt;li&gt;outright weeping, to date only with a trigger—but again, with triggers of the sort that would normally just make me roll my eyes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;anger:&lt;/strong&gt; seething frustration boiling over into white-hot rage or cold furies—not things I am prone to, and often over the smallest provocations from work. (Never from family! This is one of the clearest signals that I’m dealing with &lt;em&gt;burnout&lt;/em&gt;.) I carefully contain these, effectively practicing various ways of calming myself—especially prayer, recitation of Scripture, and singing hymns—and I &lt;em&gt;never&lt;/em&gt; allow myself to lash out at the people around me. It is nonetheless strange and disconcerting to have minor nuisances provoke such deep anger.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cravings:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;for sugary foods: occasionally sated with a good chocolate chip cookie, but more usually with a good piece of fruit&lt;/li&gt;
&lt;li&gt;for alcohol: &lt;em&gt;always&lt;/em&gt; set aside when I feel a “need” for it, lest it become a crutch or a means of self-medication&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Burnout is &lt;em&gt;strange&lt;/em&gt;. Our bodies and minds tell us the story of the stresses we experience, whether we want to hear the story or not. (I’m listening clearly, and making lots of moves to deal with it. More on that in the weeks ahead.)&lt;/p&gt;
</content><category term="burnout"></category><category term="exercise"></category><category term="health"></category></entry><entry><title>Making Things Helps</title><link href="http://www.chriskrycho.com/2018/making-things-helps.html" rel="alternate"></link><published>2018-09-28T20:45:00-04:00</published><updated>2018-09-28T20:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-09-28:/2018/making-things-helps.html</id><summary type="html">At least for me, doing “non-stressful” things as part of burnout sometimes means doing things other people would find stressful. That’s okay.
</summary><content type="html">&lt;p&gt;As a small bit of follow-up to my recent post on &lt;a href="https://www.chriskrycho.com/2018/cant-stop-wont-stop.html" title="Can’t Stop, Won’t Stop"&gt;blogging as part of what helps with my burnout&lt;/a&gt;, I thought it worth noting that this principle is a bit broader than just &lt;em&gt;blogging&lt;/em&gt; for me. Writing (currently mostly expressed in the form of blogging) is deep in me, and so blogging remains a helpful outlet.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; But so a fair number of other things which might look like &lt;em&gt;work&lt;/em&gt; to other people.&lt;/p&gt;
&lt;p&gt;Tonight I started putting together some thoughts on what some extensions to an open source software library I maintain might look like.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; This after what has to be a record-setting week: the kind in which I reviewed and merged 60 pull requests for a ridiculous crunch of a project I’m on at work. I’m exhausted. I had another one of those moments this evening where I started crying a bit as I was sitting down to eat dinner and praying beforehand. Why? Just because I’m &lt;em&gt;that&lt;/em&gt; emotionally wrung out: nothing was wrong in the particular moment at all, and probably the “trigger” was actually the small bit of relief of being &lt;em&gt;away&lt;/em&gt; from the particular (very weird) stressors of this project at work for a while.&lt;/p&gt;
&lt;p&gt;So why in the world did I start writing up thoughts about an open-source library after that? And why have I been spending my evenings reading all about a particularly nerdy bit of computer science this week?&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Because, as I suggested at the beginning, these things are what end up feeling restful or re-energizing to me. (That might make me weird. I’m okay with that. I’ve been weird for a long time.)&lt;/p&gt;
&lt;p&gt;Much of the advice around burnout emphasizes “not working.” There’s good reason for that, but it’s important to understand the underlying reasons for that advice. Burnout &lt;em&gt;usually&lt;/em&gt; stems from work-related stress, for an appropriately broad definition of “work.”&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Besides the stressors themselves, many of us—whether we admit it or not!—put far too much of our self-worth into our work. Putting it aside leaves us feeling worthless or useless. If your burnout is coming from the combo of stress and having invested your self-worth in your work, then you’re not likely to get better until you disengage from that work &lt;em&gt;entirely&lt;/em&gt; for large stretches of time: that is, until you are &lt;em&gt;forced&lt;/em&gt; to divest your self-worth from your work.&lt;/p&gt;
&lt;p&gt;But there are other ways burnout comes to pass. For me, it’s a combination of particular work stressors with the stress my family has undergone over the last year: a cross-country move, building a house, and most of all my father’s (so far blessedly successful) fight with a brain tumor. The work stressors are largely not related to the work &lt;em&gt;load&lt;/em&gt;, though; and I have by God’s grace kept my personal sense of meaning and value detached from my job. Insofar as my work is involved, the burnout is much more about frustrations and stymied aims and boredom with certain parts of the job than it is about overwork! The net of that is that doing some open-source brainstorming in the evenings is not a way of reinforcing the things that have caused this (though it very well &lt;em&gt;could&lt;/em&gt; become that). Rather, left in the same kinds of space as my blogging (“not on a schedule, not on a deadline, but whenever I feel like it”), it ends up being a &lt;em&gt;counter&lt;/em&gt; to burnout.&lt;/p&gt;
&lt;p&gt;All of which is a long way of saying: if you’re experiencing burnout, you need to figure out &lt;em&gt;why&lt;/em&gt; if you want to have a chance of getting through it. Otherwise good advice will actually mislead you otherwise. If your problem is that you’ve dumped all your self-worth into your open-source work, &lt;em&gt;stop doing open-source work&lt;/em&gt;. On the other hand, if the cause of your burnout is that you’re deeply invested in caretaking for someone in your family, it might well be that doing something that looks like &lt;em&gt;work&lt;/em&gt; to someone else—even writing a novel or something similarly massive in scale—might be a genuine relief and outlet for you.&lt;/p&gt;
&lt;p&gt;For me, &lt;em&gt;genuine rest&lt;/em&gt; often includes writing and learning and thinking and creating—not by themselves, but as part of a healthy mix that includes many other good things: a healthy dose of exercise and building LEGO contraptions with my daughters and watching &lt;cite&gt;The Expanse&lt;/cite&gt; with my wife, and enjoying the company of good friends over good food and good drinks.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’ve actually been blogging longer than I’ve been writing software in any meaningful way. I did tiny bits of Visual Basic and C++ in middle school and high school, and I started picking up &lt;abbr&gt;HTML&lt;/abbr&gt; and &lt;abbr&gt;CSS&lt;/abbr&gt; for the sake of my website and blog in college. I didn’t pick up programming in a more general sense until I learned Fortran for my senior capstone project in physics!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’m thinking about &lt;code&gt;Future&lt;/code&gt; and/or &lt;code&gt;Task&lt;/code&gt; extensions to &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt;, for those of you interested in the details. I’ll have a GitHub issue up sometime soon-ish, and might blog about it here as well.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;&lt;a href="https://en.m.wikipedia.org/wiki/Conflict-free_replicated_data_type"&gt;&lt;abbr title="Conflict-free Replicated Data Type"&gt;CRDT&lt;/abbr&gt;s&lt;/a&gt;, for my fellow software nerds out there. &lt;a href="http://archagon.net/blog/2018/03/24/data-laced-with-history/" title="Data Laced With History"&gt;This introduction&lt;/a&gt; is absolutely outstanding, as are a number of the pieces it links to. Among other things, I actually &lt;em&gt;understand&lt;/em&gt; a few concepts in set theory I’ve had a hard time wrapping my head around in the past, because the explanations here are so good.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;As I talked about in my &lt;a href="https://newrustacean.com/show_notes/bonus/burnout/"&gt;New Rustacean episode about burnout&lt;/a&gt;, lots of things which &lt;em&gt;aren’t&lt;/em&gt; “work” in the “what I do to pay the bills” sense can also be triggers.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="burnout"></category><category term="open-source software"></category><category term="productivity"></category><category term="rest"></category></entry><entry><title>Can’t Stop, Won’t Stop</title><link href="http://www.chriskrycho.com/2018/cant-stop-wont-stop.html" rel="alternate"></link><published>2018-09-26T20:15:00-04:00</published><updated>2018-09-26T20:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-09-26:/2018/cant-stop-wont-stop.html</id><summary type="html">Some people have a hard time keeping their blogging resolutions. I… have the opposite problem.
</summary><content type="html">&lt;p&gt;A couple things have had me thinking about blogging today. I happened to end up reading &lt;a href="http://christineyen.com/2014/01/in-2014-reflection-consistency-and-balls/"&gt;this post by Christine Yen from 2014&lt;/a&gt; just a few hours after listening to &lt;a href="https://craigmod.com/onmargins/005/"&gt;Craig Mod’s interview with Jason Kottke&lt;/a&gt;. They have two very different takes on blogging. Yen’s piece has the sense so often echoed online: “I want to be blogging more.” Mod’s interview with Kottke notes how remarkable a 20-year-old website with daily blog-like entries throughout is, and Kottke emphasizes how he loves the work (and it is work!) that he does to keep it up.&lt;/p&gt;
&lt;p&gt;My relationship with blogging is somewhere nearer Kottke than Yen on that spectrum. While I have &lt;em&gt;occasionally&lt;/em&gt; resolved to blog more—and occasionally to &lt;a href="https://www.chriskrycho.com/2018/writing-plans-for-the-rest-of-2018.html"&gt;blog &lt;em&gt;less&lt;/em&gt;&lt;/a&gt;!—I find that mostly my problem is that I cannot stop blogging even if I want to.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of the things that’s strange about &lt;a href="https://www.chriskrycho.com/burnout"&gt;burnout&lt;/a&gt; is that what constitutes &lt;em&gt;rest&lt;/em&gt; from the stressors will vary from person to person. Writing, for may people, might be a source of tension or stress. The perceived &lt;em&gt;obligation&lt;/em&gt; to generate content can be stressful.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But far more often, writing is restful for me. It is a way of &lt;a href="http://www.chriskrycho.com/2018/blog-as-note-taking-tool.html"&gt;organizing my mental life&lt;/a&gt;—publicly, but (at least) as much for my own benefit as for that of potential readers—and organizing my mental life is somehow a good form of stress relief.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; So it turns out that blogging—not on a schedule, not on a deadline, but whenever I feel like it (and that is obviously a lot)—is good for me in the midst of this. It seems to go in the same basic bucket as running.&lt;/p&gt;
&lt;p&gt;So: my aim back in May, just before I realized what exactly I’m dealing with in burnout, to blog less in the interest of getting &lt;em&gt;other&lt;/em&gt; projects done? When I said this?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don’t think I could stop myself from blogging that way from time to time if I &lt;em&gt;wanted&lt;/em&gt; to. But it won’t be the focus, and if things are relatively quiet around here for much of the rest of the year, don’t worry… you know why!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, at this point I’ve let that go. Subconsciously at first. Now consciously. I wasn’t wrong when I said couldn’t stop myself from writing &lt;em&gt;entirely&lt;/em&gt;. Now I just know that I also &lt;em&gt;mostly shouldn’t.&lt;/em&gt; There may be points on other writing projects in the future, times when I’m not dealing with not-so-mild-anymore burnout, when I can and should. But not now.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;In truth, as this blog post suggests, I cannot even stop blogging about blogging! I’ve been metablogging for over a decade now; don’t expect it to stop anytime soon!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;More than one thoughtful listener to my &lt;a href="https://newrustacean.com/show_notes/bonus/burnout/"&gt;most recent New Rustacean episode&lt;/a&gt; responded along these very lines; and it’s a point I haven’t made here before, so: consider it raised.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Interpret that as you will. I have given it no small amount of thought myself. As I noted on the aforementioned latest New Rustacean episode: I am hypermetacognitive, and my incessant metacogitating is a source of alternating bemusement and frustration for my poor wife.&lt;/p&gt;
&lt;p&gt;Yes. I said “incessant metacogitating.” This is what poor Jaimie has to put up with.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="blogging"></category><category term="burnout"></category></entry><entry><title>Why We Want Pattern-Matching in JavaScript</title><link href="http://www.chriskrycho.com/2018/why-we-want-pattern-matching-in-javascript.html" rel="alternate"></link><published>2018-09-23T13:00:00-04:00</published><updated>2018-09-24T18:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-09-23:/2018/why-we-want-pattern-matching-in-javascript.html</id><summary type="html">A worked example of transforming if/else statements to the proposed pattern-matching syntax, showing how much pattern-matching can clarify (as well as shorten) complicated code.
</summary><content type="html">&lt;p&gt;I’ve often noted how much I want the &lt;a href="https://github.com/tc39/proposal-pattern-matching"&gt;JavaScript pattern-matching proposal&lt;/a&gt; to land. I noted in conversation with some people recently, though, that it’s not always obvious &lt;em&gt;why&lt;/em&gt; it will be so helpful. Similarly, &lt;a href="https://twitter.com/littlecalculist"&gt;Dave Herman&lt;/a&gt; recently noted to me that &lt;a href="https://twitter.com/dhh"&gt;DHH&lt;/a&gt;’s mantra of “Show me the code” is a really helpful tool for thinking about language design. (I tend to agree!) So with that in mind, here’s a piece of example code from the Ember app I work on today, very slightly modified to get at the pure essentials of this particular example.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The context is a &lt;abbr&gt;UI&lt;/abbr&gt; component which shows the user their current discount, if any, and provides some nice interactivity if they try to switch to a different discount.&lt;/p&gt;
&lt;p&gt;First, some types that we’ll use in the example, which I use in the actual component to avoid the problems that inevitably come with using string values for these kinds of things. Linters like ESLint or type systems like TypeScript or Flow will catch typos this way, and you’ll also get better errors at runtime even if you’re not using a linter or a type system!&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const DiscountTypes = {
  Offer: &amp;#39;Offer&amp;#39;,
  Coupon: &amp;#39;Coupon&amp;#39;,
  None: &amp;#39;None&amp;#39;,
};

const Change = {
  OfferToOffer: &amp;#39;OfferToOffer&amp;#39;,
  OfferToCoupon: &amp;#39;OfferToCoupon&amp;#39;,
  CouponToCoupon: &amp;#39;CouponToCoupon&amp;#39;,
  CouponToOffer: &amp;#39;CouponToOffer&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we set up a component which has a little bit of internal state to track the desired change before we submit it, which we display differently based on what the value of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get"&gt;&lt;abbr&gt;ES5&lt;/abbr&gt; getter&lt;/a&gt; for &lt;code&gt;change&lt;/code&gt; is here:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;class DiscountComponent {
  constructor(currentDiscountType) {
    this.currentDiscountType = currentDiscountType;
    this.newDiscountType = null;
  }

  changeDiscount(newDiscountType) {
    this.newDiscountType = newDiscountType;
  }

  submitChange() {
    // logic for talking to the server
  }

  get change() {
    const { currentDiscountType, newDiscountType } = this;

    if (currentDiscountType === DiscountTypes.Offer) {
      if (newDiscountType === DiscountTypes.Offer) {
        return Change.OfferToOffer;
      } else if (newDiscountType === DiscountTypes.Coupon) {
        return Change.OfferToCoupon;
      } else if (newDiscountType === DiscountTypes.None) {
        return null;
      } else {
        assertInDev(
          `Missed a condition: ${currentDiscountType}, ${newDiscountType}`
        );
      }
    } else if (currentDiscountType === DiscountTypes.Coupon) {
      if (newDiscountType === DiscountTypes.Offer) {
        return Change.CouponToOffer;
      } else if (newDiscountType === DiscountTypes.Coupon) {
        return Change.CouponToCoupon;
      } else if (newDiscountType === DiscountTypes.None) {
        return null;
      } else {
        assertInDev(
          `Missed a condition: ${currentDiscountType}, ${newDiscountType}`
        );
      }
    } else if (currentDiscountType === DiscountTypes.None) {
      return null;
    } else {
      assertInDev(
        `Missed a condition: ${currentDiscountType}, ${newDiscountType}`
      );
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the &lt;em&gt;exact&lt;/em&gt; same semantics for computing the &lt;code&gt;change&lt;/code&gt; value we’re interested, but with pattern matching:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;class DiscountComponent {
  // ...snip

  get change() {
    case ([this.currentDiscountType, this.newDiscountType]) {
      when [DiscountTypes.Offer, DiscountTypes.Offer] -&amp;gt;
        return Change.OfferToOffer;
      when [DiscountTypes.Offer, DiscountTypes.Coupon] -&amp;gt;
        return Change.OfferToCoupon;
      when [DiscountTypes.Coupon, DiscountTypes.Offer] -&amp;gt;
        return Change.CouponToOffer;
      when [DiscountTypes.Coupon, DiscountTypes.Coupon] -&amp;gt;
        return Change.CouponToCoupon;
      when [DiscountTypes.None, ...] || [..., DiscountTypes.None] -&amp;gt;
        return null;
      when [...] -&amp;gt;
        assertInDev(
          `Missed a condition: ${currentDiscountType}, ${newDiscountType}`
        );
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The difference is stark. It’s not just that there are fewer lines of code, it’s that the actual intent of the code is dramatically clearer. (And while I’ve formatted it for nice display here, those are all one-liners in my normal 100-characters-per-line formatting.)&lt;/p&gt;
&lt;p&gt;My preference would be for pattern-matching to have expression semantics, so you wouldn’t need all the &lt;code&gt;return&lt;/code&gt; statements in the mix—and it’s &lt;em&gt;possible&lt;/em&gt;, depending on how a number of proposals in flight right now shake out, that it still will. Even if pattern matching doesn’t ultimately end up with an expression-based syntax, though, we can still get a lot of those niceties if the &lt;code&gt;do&lt;/code&gt;-expression proposal lands:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;class DiscountComponent {
  // ...snip

  get change() {
    return do {
      case ([this.currentDiscountType, this.newDiscountType]) {
        when [DiscountTypes.Offer, DiscountTypes.Offer] -&amp;gt;
          Change.OfferToOffer;
        when [DiscountTypes.Offer, DiscountTypes.Coupon] -&amp;gt;
          Change.OfferToCoupon;
        when [DiscountTypes.Coupon, DiscountTypes.Offer] -&amp;gt;
          Change.CouponToOffer;
        when [DiscountTypes.Coupon, DiscountTypes.Coupon] -&amp;gt;
          Change.CouponToCoupon;
        when [DiscountTypes.None, ...] || [..., DiscountTypes.None] -&amp;gt;
          null;
        when [...] -&amp;gt;
          assertInDev(
            `Missed a condition: ${currentDiscountType}, ${newDiscountType}`
          );
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this is profoundly clearer about the intent of the code, and it’s far easier to be sure you haven’t missed a case.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; after some comments on Twitter, I thought I’d note how this is &lt;em&gt;even nicer&lt;/em&gt; in pure functions. If we assume that it gets expression semantics (which, again, I’m hoping for), a pure functional version of the sample above would look like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const change = (currentType, newType) =&amp;gt;
  case ([currentType, newType]) {
    when [DiscountTypes.Offer, DiscountTypes.Offer] -&amp;gt;
      Change.OfferToOffer;
    when [DiscountTypes.Offer, DiscountTypes.Coupon] -&amp;gt;
      Change.OfferToCoupon;
    when [DiscountTypes.Coupon, DiscountTypes.Offer] -&amp;gt;
      Change.CouponToOffer;
    when [DiscountTypes.Coupon, DiscountTypes.Coupon] -&amp;gt;
      Change.CouponToCoupon;
    when [DiscountTypes.None, ...] || [..., DiscountTypes.None] -&amp;gt;
      null;
    when [...] -&amp;gt;
      assertInDev(
        `Missed a condition: ${currentDiscountType}, ${newDiscountType}`
      );
  };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This may not be &lt;em&gt;quite&lt;/em&gt; as clear as the same thing in F&lt;sup&gt;♯&lt;/sup&gt; or Elm or another language in that family… but it’s amazingly better than anything we’ve seen in JavaScript to date.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;&lt;code&gt;assertInDev&lt;/code&gt; looks a little different; we’re actually using the &lt;code&gt;Maybe&lt;/code&gt; type from my &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt; library instead of returning &lt;code&gt;null&lt;/code&gt;; it’s an Ember app; as such it uses a &lt;code&gt;@computed&lt;/code&gt; decorator; and of course it’s all in TypeScript. I chose to write it with standard JavaScript to minimize the number of things you have to parse as a reader.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;In the actual TypeScript, these are defined with an &lt;a href="http://www.typescriptlang.org/docs/handbook/enums.html"&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/a&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Fun fact: the original code actually &lt;em&gt;had&lt;/em&gt; missed a number of cases, which I learned only because TypeScript’s &lt;code&gt;strictNullChecks&lt;/code&gt; setting informed me.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="javascript"></category><category term="programming languages"></category></entry><entry><title>Burnout (New Rustacean)</title><link href="http://www.chriskrycho.com/2018/burnout-new-rustacean.html" rel="alternate"></link><published>2018-09-22T21:30:00-04:00</published><updated>2018-09-22T21:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-09-22:/2018/burnout-new-rustacean.html</id><summary type="html">In which I talk for about 25 minutes about my experience of burnout.
</summary><content type="html">&lt;p&gt;Insofar as I have a platform and a voice on this blog and &lt;a href="https://www.chriskrycho.com/podcasts.html"&gt;my podcasts&lt;/a&gt;, I hope to use it to help &lt;em&gt;others&lt;/em&gt; who experience burnout as well. So, the only episode I’ve managed to release of New Rustacean so far in September is &lt;a href="https://newrustacean.com/show_notes/bonus/burnout/"&gt;this one, on burnout&lt;/a&gt;.&lt;/p&gt;
</content><category term="burnout"></category><category term="links"></category><category term="podcasting"></category></entry><entry><title>“Zuckerberg’s Blindness and Ours” (L. M. Sacasas)</title><link href="http://www.chriskrycho.com/2018/zuckerbergs-blindness-and-ours-l-m-sacasas.html" rel="alternate"></link><published>2018-09-17T08:20:00-04:00</published><updated>2018-09-17T08:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-09-17:/2018/zuckerbergs-blindness-and-ours-l-m-sacasas.html</id><summary type="html">Solutionism is a nasty besetting culture-level sin we barely recognize as such.
</summary><content type="html">&lt;p&gt;Yesterday while talking with my wife as we drove to spend some time with extended family, I caught myself: tempted to describe a given &lt;em&gt;response&lt;/em&gt; to a particular cultural ill as a &lt;em&gt;solution&lt;/em&gt;. This is a turn of thinking that’s especially tempting for engineers—and perhaps the more so engineers with a physics background (like me!). In two of the fields to which I have applied myself (physics and software), knowledge often genuinely appears in the form of &lt;em&gt;solutions to problems&lt;/em&gt;. But the extent to which science (and scientism) on the one hand and engineering disciplines (especially software) on the other have come to the fore in our culture—the degree to which they have achieved nearly unassailable authority for us—means that we now too often take solutions as coextant with knowledge more generally.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;solutionism&lt;/em&gt;, and it is bad. I noted above that two of the fields to which I have applied myself share this feature of having solutions to problems as their predominant form of knowledge. But this is not so in two of the other fields I have studied in some depth: for neither theology nor music is a &lt;em&gt;solution&lt;/em&gt; very often in demand. Very different modes of thought and of reasoning are in play in each of those, and appropriately so.&lt;/p&gt;
&lt;p&gt;So it was with some particular appreciation that I read &lt;a href="https://thefrailestthing.com/2018/09/16/zuckerbergs-blindness-and-ours/"&gt;this piece by L. M. Sacasas&lt;/a&gt;, reflecting on the recent New Yorker profile of Mark Zuckerberg. Sacasas rightly highlights how mistaken this solutionist frame of knowledge is. From his conclusion (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reducing knowledge to know-how and doing away with thought leaves us trapped by an impulse to see the world merely as a field of problems to be solved by the application of the proper tool or technique, and this impulse is also compulsive because it cannot abide inaction. We can call this an ideology or we can simply call it a frame of mind, but either way it seems that this is closer to the truth about the mindset of Silicon Valley.&lt;/p&gt;
&lt;p&gt;It is not a matter of stupidity or education, formally understood, or any kind of personal turpitude. Indeed, by most accounts, Zuckerberg is both earnest and, in his own way, thoughtful. Rather it is the case that one’s intelligence and one’s education, even if it were deeply humanistic, and one’s moral outlook, otherwise exemplary and decent, are framed by something more fundamental: a distinctive way of perceiving the world. This way of seeing the world, including the human being, as a field of problems to be solved by the application of tools and techniques, bends all of our faculties to its own ends. &lt;em&gt;The solution is the truth, the solution is the good, the solution the beautiful. Nothing that is given is valued.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The trouble with this way of seeing the world is that it cannot quite imagine the possibility that some problems are not susceptible to merely technical solutions or, much less, that some problems are best abided.&lt;/em&gt; It is also plagued by hubris—often of the worst sort, the hubris of the powerful and well-intentioned—and, consequently, it is incapable of perceiving its own limits. As in the Greek tragedies, hubris generates blindness, a blindness born precisely out of one’s distinctive way of seeing. And that’s not the worst of it. That worst of it is that we are all, to some degree, now tempted and prone to see the world in just this way too.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="links"></category><category term="ethics"></category><category term="wisdom"></category></entry><entry><title>Your Job Is Not Your Community</title><link href="http://www.chriskrycho.com/2018/your-job-is-not-your-community.html" rel="alternate"></link><published>2018-09-15T09:10:00-04:00</published><updated>2018-09-15T09:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-09-15:/2018/your-job-is-not-your-community.html</id><summary type="html">Thoughts on third spaces, remote jobs, misplaced flirtation, and the thread that ties them together: the way we have offloaded so much of our social existence to our employeers.
</summary><content type="html">&lt;p&gt;Skimming through Twitter this morning, two threads caught my attention.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mobile.twitter.com/kyleshevlin/status/1040674991392452608"&gt;The first&lt;/a&gt;, by Kyle Shevlin, pushes back on the idea that people should be expected to just pick up and move across the country for a job—never mind the personal and communal costs to them. This stands at the crux of the point he’s making (but the whole thread is good; I encouraged him to turn it into a blog post):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We don’t even pay attention to this [i.e. the lack of communal ties and third spaces in our lives]. The pastor/philosopher in me gets frustrated with the lack of concern over the loss of community. Instead, we have tried to replace our relationship to other people with the relationship to our work and work place.&lt;br /&gt;
—&lt;a href="https://mobile.twitter.com/kyleshevlin/status/1040674981468758016"&gt;@kyleshevlin &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://mobile.twitter.com/sehurlburt/status/1040778111057444866"&gt;The second&lt;/a&gt;, by Stephanie Hurlburt, gently but firmly tells guys to stop trying to &lt;em&gt;flirt&lt;/em&gt; with the women they meet at professional meetups.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am noticing a trend in women age 18-22 I’m mentoring— they try to network and get mentoring and go to meetups and literally every guy they try to talk with gets flirty&lt;/p&gt;
&lt;p&gt;They’re &lt;em&gt;blocked&lt;/em&gt; from this professional advancement because so many guys jump straight into trying to date&lt;br /&gt;
—&lt;a href="https://mobile.twitter.com/sehurlburt/status/1040778111057444866"&gt;@sehurlburt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I agree with Stephanie’s point here, but it was the juxtaposition with Kyle’s point that particularly caught my attention.&lt;/p&gt;
&lt;p&gt;Without excusing the young men who turn from professional networking to flirting immediately on encountering an attractive woman at a tech meetup—again, don’t do that!—it’s also worth addressing the structural reasons why move is so tempting. (As usual, these kinds of things are worth addressing &lt;a href="https://winningslowly.org/season-5"&gt;both individually and structurally&lt;/a&gt;, and in fact &lt;em&gt;have&lt;/em&gt; to be addressed both ways to see real change.) One of the structural issues which leads to “see an attractive woman at a JavaScript meetup, decide to flirt with her” is the thing Kyle is pointing at. Namely: we’ve offloaded the vast majority of our social existence to work.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Given that many of these young men have no other social contexts… where exactly &lt;em&gt;are&lt;/em&gt; they going to flirt?&lt;/p&gt;
&lt;p&gt;It’s good and right to do as Stephanie does here and say, “This isn’t the right place for this, guys.” But—and this is no critique of Stephanie’s point; not every blog post or every tweet is responsible to cover every angle on a topic!—we also need to substantially reorient our understanding of the place of professional contexts in our lives. Leaders need to stop framing their companies as “a family”&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and, even more, need to recognize that companies are not &lt;em&gt;and cannot be&lt;/em&gt; the solution to this problem. To the contrary. When a company responds to their employees’ felt need for more community by trying to become that community, it reinforces the actual problem. Counterintuitive though it might seem, the best thing company leaders can do for their employees is make sure that their company is &lt;em&gt;just a job&lt;/em&gt;. (If you want to do more than this, find healthy local community spaces and support &lt;em&gt;those&lt;/em&gt;—financially, by promoting them, etc.)&lt;/p&gt;
&lt;p&gt;Neighborhood book clubs, churches, recreational sports, local art-making of all sorts, topical discussion groups, political activism, community service… these are the actual kinds of activities and institutions we need more of. Not more of company-as-community, professional-as-identity. If we work hard to build those thicker, healthier kinds of spaces, then professionally-focused spaces actually can remain professional. They won’t have to do work they aren’t meant to do, and ultimately can’t do well without compromising their primary work.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;and social media, but that’s a different blog post—it exacerbates these issues as well, to be sure&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;something my own employer has been guilty of, and on which I have prodded them!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="sexism"></category><category term="community"></category><category term="remote work"></category><category term="corporatism"></category></entry><entry><title>A Real Victory</title><link href="http://www.chriskrycho.com/2018/a-real-victory.html" rel="alternate"></link><published>2018-09-05T21:45:00-04:00</published><updated>2018-09-05T21:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-09-05:/2018/a-real-victory.html</id><summary type="html">Today—just shy of two years since I started adding types to our Ember app—it fully type-checks.
</summary><content type="html">&lt;p&gt;On September 29, 2016, I started working on adding (&lt;a href="https://flow.org"&gt;Flow&lt;/a&gt;) types to the &lt;a href="https://emberjs.com"&gt;Ember&lt;/a&gt; app I had been working on since the start of the year. Throughout the rest of the year I worked on adding some basic Flow types to our app and for Ember. For my last commit in 2016, I switched us to TypeScript and began the rest of the long journey to fully type-checking our app. In early 2018, we made it to “the app type-checks”… in the loosest strictness settings.&lt;/p&gt;
&lt;p&gt;And as of 6pm today—September 5, 2018, almost two full years later, and 21 months after we switched from Flow to TypeScript (more on this below)—we have a fully type-checked TypeScript Ember application, with the strictness notches dialed as strict as they will go.&lt;/p&gt;
&lt;p&gt;It took almost two full years for us to get there, and I’m incredibly proud of that work.&lt;/p&gt;
&lt;p&gt;It took almost two full years because it was a lot of work, and slow work to do at that, and it was rare that I could block out any large chunks of time for that work—we had to sneak in improvements between features we were working urgently on for our clients and our own internally goals. More, it wasn’t just the work of adding types to our application. It was also the work of writing types for Ember itself, and for the surrounding ecosystem—which thankfully I did not finish alone, but which I did have to start alone. It was the work of integrating (and reintegrating) TypeScript into Ember’s build pipeline.&lt;/p&gt;
&lt;p&gt;Happily, I did &lt;em&gt;not&lt;/em&gt; do most of that work alone, and even on our app I’ve had a ton of help getting the types in place. But it has been a massive task, and finishing it today was a real victory. It’s not perfect. We have 200-or-so instances of &lt;code&gt;any&lt;/code&gt; in the application (most of them in semi-legitimate places, to be fair), and I wish it were more like 20. We have a number of places in the app with the &lt;code&gt;!&lt;/code&gt; “I promise this isn’t &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; here” operator on some nullable field, with long comments explaining &lt;em&gt;why&lt;/em&gt; it’s not possible for it to be null there.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But it type-checks today, and type errors fail the builds, and that &lt;em&gt;is&lt;/em&gt; a real victory.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;You can consider this “part 1” of my thoughts on what feels to me like a pretty significant achievement. I’ll hopefully follow this up with some backstory sometime in the next few weeks.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;See my &lt;a href="https://www.chriskrycho.com/2018/type-informed-design.html"&gt;recent post&lt;/a&gt; on thinking a lot about design decisions I would have made differently with TypeScript’s strict null checking available from day one!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="JavaScript"></category><category term="Flow"></category><category term="Ember.js"></category><category term="software development"></category></entry><entry><title>True Myth 2.1.0 Released</title><link href="http://www.chriskrycho.com/2018/true-myth-210-released.html" rel="alternate"></link><published>2018-09-02T16:25:00-04:00</published><updated>2018-09-02T16:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-09-02:/2018/true-myth-210-released.html</id><summary type="html">A bunch of neat new utility functions on Maybe for arrays and tuples.
</summary><content type="html">&lt;p&gt;I’ve just released True Myth 2.1.0 (&lt;a href="https://github.com/chriskrycho/true-myth/tree/v2.1.0"&gt;source&lt;/a&gt;, &lt;a href="https://true-myth.js.org"&gt;docs&lt;/a&gt;), which includes a handful of new utility functions for use with the &lt;code&gt;Maybe&lt;/code&gt; types and arrays or tuples. Note that to make use of these you’ll need to be on at least TypeScript 3.0: they take advantage of the some of the shiny new features in the type system!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; and, five minutes later, versions 2.1.1 and 2.1.2 are out with bugfixes consisting of “I forgot to export two functions. Now they’re exported.” Because that’s how this &lt;em&gt;always&lt;/em&gt; works, right?&lt;/p&gt;
&lt;p&gt;Here’s what’s new:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.find&lt;/code&gt;:&lt;/strong&gt; for those times when you want to do &lt;code&gt;Array.prototype.find&lt;/code&gt; and would love to not have to wrap up the result with a &lt;code&gt;Maybe&lt;/code&gt; explicitly every time. As with most functions in True Myth, it’s curried so you can easily use it in a functional programming style.&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

let foundRegular = Maybe.find(n =&amp;gt; n &amp;gt; 1, [1, 2, 3]);
console.log(foundRegular.toString());  // Just(2)

let notFound = Maybe.find(n = n &amp;lt; 1, [1, 2, 3]);
console.log(notFound.toString());  // Nothing

let findAtLeast5 = Maybe.find((n: number) =&amp;gt; n &amp;gt; 5);
let foundCurried = findAtLeastFive([2, 4, 6, 8, 10]);
console.log(foundCurried.toString());  // Just(6)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.head&lt;/code&gt; (aliased as &lt;code&gt;Maybe.first&lt;/code&gt;):&lt;/strong&gt; for getting the first item of an array safely. Like lodash’s &lt;code&gt;_.head&lt;/code&gt; (or &lt;code&gt;someArray[0]&lt;/code&gt;) but it returns a &lt;code&gt;Maybe&lt;/code&gt; instead of possibly giving you back &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

let empty = Maybe.head([]);
console.log(empty.toString());  // Nothing

let hasItems = Maybe.head([1, 2, 3]);
console.log(hasItems.toString());  // Just(1)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.last&lt;/code&gt;:&lt;/strong&gt; the same as &lt;code&gt;Maybe.head&lt;/code&gt;, but for getting the &lt;em&gt;last&lt;/em&gt; element in an array.&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

let empty = Maybe.last([]);
console.log(empty.toString());  // Nothing

let hasItems = Maybe.last([1, 2, 3]);
console.log(hasItems.toString());  // Just(3)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.all&lt;/code&gt;:&lt;/strong&gt; for converting an array of &lt;code&gt;Maybe&lt;/code&gt;s to a &lt;code&gt;Maybe&lt;/code&gt; of an array. If you have an array whose contents are all &lt;code&gt;Maybe&lt;/code&gt;s, it’s sometimes useful to be able to flip that around so that if all of the items are &lt;code&gt;Just&lt;/code&gt;s, you get back a single &lt;code&gt;Just&lt;/code&gt; wrapping the array of the values which were wrapped in all the &lt;code&gt;Just&lt;/code&gt;s in the array, but if any were &lt;code&gt;Nothing&lt;/code&gt;, the whole thing is a single &lt;code&gt;Nothing&lt;/code&gt;. This works for both heterogeneous and homogenous arrays, which is pretty cool. A code sample will make this a lot clearer:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { just, nothing } from &amp;#39;true-myth/maybe&amp;#39;;

let includesNothing = Maybe.all(just(2), nothing&amp;lt;string&amp;gt;());
console.log(includesNothing.toString());  // Nothing

let allJusts = Maybe.all(just(2), just(&amp;#39;hi&amp;#39;), just([42]));
console.log(allJusts.toString());  // Just([2, &amp;#39;hi&amp;#39;, [42]]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting type of both &lt;code&gt;includesNothing&lt;/code&gt; and &lt;code&gt;allJusts&lt;/code&gt; here is &lt;code&gt;Maybe&amp;lt;Array&amp;lt;string | number | Array&amp;lt;number&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Maybe.tuple&lt;/code&gt;:&lt;/strong&gt; just like &lt;code&gt;Maybe.all&lt;/code&gt; except it works in tuples (preserving their types’ order) for up to five-item tuples. (As the docs I wrote say: if you’re doing a larger tuple than that I don’t want to know what you’re doing but I won’t help with it!)&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { just, nothing } from &amp;#39;true-myth/maybe&amp;#39;;

type Tuple = [Maybe&amp;lt;number&amp;gt;, Maybe&amp;lt;string&amp;gt;, Maybe&amp;lt;number[]&amp;gt;];

let withNothing: Tuple = [just(2), nothing(), just([42])];
let withNothingResult = Maybe.tuple(withNothing);
console.log(withNothingResult.toString());  // Nothing

let allJusts: Tuple = [just(2), just(&amp;#39;hi&amp;#39;), just([42])];
let allJustsResult = Maybe.tuple(allJusts);
console.log(allJustsResult.toString());  // Just([2, &amp;quot;hi&amp;quot;, [42]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These have the same &lt;em&gt;output&lt;/em&gt; (i.e. the same underlying representation) as the array output, but a different type. The resulting type of both &lt;code&gt;includesNothing&lt;/code&gt; and &lt;code&gt;allJusts&lt;/code&gt; here is &lt;code&gt;Maybe&amp;lt;[number, string, Array&amp;lt;number&amp;gt;]&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once TypeScript 3.1 is out, I should be able to collapse these into a single &lt;code&gt;all&lt;/code&gt;, and &lt;code&gt;tuple&lt;/code&gt; will just become an alias for it.&lt;/p&gt;
</content><category term="TypeScript"></category><category term="functional programming"></category><category term="monads"></category><category term="libraries"></category><category term="software development"></category><category term="open source software"></category><category term="True Myth"></category></entry><entry><title>Going Offline</title><link href="http://www.chriskrycho.com/2018/going-offline.html" rel="alternate"></link><published>2018-09-01T09:00:00-04:00</published><updated>2018-09-01T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-09-01:/2018/going-offline.html</id><summary type="html">I signed out of Slack for most of the day a few times this week, and it was bliss. Chatting can genuinely be great, but it can also be very disruptive when there are large or hard tasks to be finished.
</summary><content type="html">&lt;p&gt;Several times this week, I signed out of both my company Slack and the &lt;a href="https://embercommunity.slack.com/"&gt;Ember Community Slack&lt;/a&gt; and just worked in “solitude” for about six and a half of the eight hours I was working. It was, in a word, &lt;em&gt;bliss&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Over the past few years, I’ve come to enjoy a lot of chatting during the day while at work, and the social interaction is very much a &lt;em&gt;must&lt;/em&gt; in a lot of ways for someone who works remotely. The flip side, however, is that chat is a huge time-suck, and more than that it’s a constant drain on attention. I’m far from the first person to see this or to say it, of course, and I’ve experienced it before. But it struck me much more forcefully this week than it usually has in the past.&lt;/p&gt;
&lt;p&gt;Some of that, I suspect, is the effect of the burnout I’ve been experiencing: I’m much more taxed by social interaction and by shifts in attention right now than I have been in the past. More and more, though, I’ve also become aware of the effect the constant distraction of chat has on me. I am much less effective as a software developer when I am constantly switching modes.&lt;/p&gt;
&lt;p&gt;To be sure: some tasks are more mentally demanding than others. Some days I get done &lt;em&gt;plenty&lt;/em&gt; while still switching contexts often—less, perhaps, than I might if I were not being interrupted, but also perhaps &lt;em&gt;more&lt;/em&gt; in the sense that enabling others to finish &lt;em&gt;their&lt;/em&gt; tasks is also important. When I need to dive deep on something hard, though—or even when I just need to get after a &lt;em&gt;large&lt;/em&gt; task—the kind of mental silence that signing out of chat affords is very helpful. I plan to make this a regular habit.&lt;/p&gt;
</content><category term="chat"></category><category term="remote work"></category><category term="productivity"></category><category term="Slack"></category><category term="burnout"></category></entry><entry><title>Once More Around The Wheel</title><link href="http://www.chriskrycho.com/2018/once-more-around-the-wheel.html" rel="alternate"></link><published>2018-08-31T18:30:00-04:00</published><updated>2018-08-31T18:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-31:/2018/once-more-around-the-wheel.html</id><summary type="html">I keep hoping a solution to my publishing needs will present itself instead of my having to build it myself. Such a solution does *not* appear forthcoming, though.
</summary><content type="html">&lt;p&gt;I very much wish my publishing needs were not so… complicated. Academic writing—though that’s done for a while—poetry, code, and a strong preference for semantic HTML to be generated by it along with an equally strong preference for plain text authoring…&lt;/p&gt;
&lt;p&gt;Nothing works for me.&lt;/p&gt;
&lt;p&gt;The only Markdown parser out there which does the right thing with all of those is &lt;a href="http://pandoc.org"&gt;Pandoc&lt;/a&gt;. The options for using Pandoc directly are not great. Shelling out to it via &lt;a href="https://getpelican.com"&gt;Pelican&lt;/a&gt; (my current strategy) works but is &lt;em&gt;slow&lt;/em&gt;. The implemented-in-Rust &lt;a href="https://www.getgutenberg.io"&gt;Gutenberg&lt;/a&gt; generator looks like &lt;em&gt;exactly&lt;/em&gt; what I want performance-wise, but its &lt;a href="https://github.com/google/pulldown-cmark" title="pulldown-cmark"&gt;underlying Markdown engine&lt;/a&gt; doesn’t support citations &lt;em&gt;or&lt;/em&gt; poetry.&lt;/p&gt;
&lt;p&gt;I keep coming back to the conclusion that I’m basically going to have to build whatever I want myself, if I want my desired publishing flow to exist. I don’t really &lt;em&gt;want&lt;/em&gt; to do that, though. It’s a boatload of work, even “just”—just!—to do something like (a) learn Haskell well enough to build on top of Pandoc directly or (b) build a good C-based API wrapper in Rust so that I can do it &lt;em&gt;that&lt;/em&gt; way or (c) extend &lt;a href="https://github.com/google/pulldown-cmark"&gt;pulldown-cmark&lt;/a&gt; to support poetry and citation management.&lt;/p&gt;
&lt;p&gt;For lots of reasons (c) is probably what I’ll ultimately end up doing; I want that for more than just blogging. More on that eventually, I hope.&lt;/p&gt;
&lt;p&gt;But in the meantime I really just… want someone else to have the same weird needs I do and build this for me. I just know full well at this point that that’s not going to happen, and accordingly am basically resigned to muddling along with Pelican and Pandoc until such a time as I can actually buckle down and build what I want and need.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;C’est la vie.&lt;/em&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;As an aside: the prospect of buckling down and building things like that in my spare time is &lt;em&gt;much&lt;/em&gt; less appealing given my current &lt;a href="https://www.chriskrycho.com/burnout/"&gt;struggles with burnout&lt;/a&gt;, and as I’ll write about at some point in the future I feel a (perhaps-surprising to you, my reader) lack of confidence about my &lt;em&gt;ability&lt;/em&gt; to accomplish those things.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="blogging"></category><category term="static site generators"></category></entry><entry><title>Review: The Fated Sky</title><link href="http://www.chriskrycho.com/2018/review-the-fated-sky.html" rel="alternate"></link><published>2018-08-31T07:00:00-04:00</published><updated>2018-08-31T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-31:/2018/review-the-fated-sky.html</id><summary type="html">Recommended: Mary Robinette Kowal picks up her alt-history of the space program after a meteor strike and continues doing what sci-fi does best: throwing new light on present-day cultural issues by showing something that *isn't* the present day.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I keep my book review ratings simple—they’re either &lt;em&gt;required&lt;/em&gt;, &lt;em&gt;recommended&lt;/em&gt;, &lt;em&gt;recommended with qualifications&lt;/em&gt;, or &lt;em&gt;not recommended&lt;/em&gt;. If you want the TL;DR, this is it:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended:&lt;/strong&gt; Mary Robinette Kowal picks up her alt-history of the space program after a meteor strike and continues doing what sci-fi does best: throwing new light on present-day cultural issues by showing something that &lt;em&gt;isn’t&lt;/em&gt; the present day. Where the first book looked head-on at sexism, the second carries that line forward but digs in on racism as well. And all this while still being an exciting &lt;em&gt;novel&lt;/em&gt; with interesting characters and an engaging (if never quite surprising) novel. It doesn’t have quite the same magic &lt;em&gt;The Calculating Stars&lt;/em&gt; did, but I still enjoyed it very thoroughly.&lt;/p&gt;
</content><category term="book reviews"></category><category term="science fiction"></category><category term="sexism"></category><category term="mental illness"></category><category term="racism"></category></entry><entry><title>Type-Informed Design</title><link href="http://www.chriskrycho.com/2018/type-informed-design.html" rel="alternate"></link><published>2018-08-30T19:40:00-04:00</published><updated>2018-08-30T19:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-30:/2018/type-informed-design.html</id><summary type="html">Revisiting our app in TypeScript’s strict mode has me thinking about what we’d do different if we had this input in the first place.</summary><content type="html">&lt;p&gt;I’ve been working on getting the Ember app I work on fully type-checked in strict mode this week, and noticed something interesting along the way: there are a lot of design decisions—a few of them really core to the behavior of the app!—which we never, &lt;em&gt;ever&lt;/em&gt; would have made if we had been using Typescript in the first place.&lt;/p&gt;
&lt;p&gt;One of these is pervasive references to certain optional properties that appear in services throughout our app—the basket, for example. These can indeed be inset and at certain times they are. However, many of our components pull in this property from the service and simply assume it’s there to use. We’ve known for a while that this was a problem at times: &lt;a href="https://raygun.com/"&gt;Raygun&lt;/a&gt; has told us loud and clear. But it wasn’t obvious how pervasive this was—and how badly we were just assuming the presence of something that may well be absent &lt;em&gt;all over the app&lt;/em&gt;!—until I saw the type errors from it. Dozens of them.&lt;/p&gt;
&lt;p&gt;Some of them are places where we should have built the components differently: to take the item as an argument, for example, and to require it as an input, because the component just doesn’t make any sense without it, indeed lives in a part of the app such that it’s not even possible to render the component without it.&lt;/p&gt;
&lt;p&gt;And sure, we could document that invariant and use TypeScript’s override tools to carry on. (What do you think I’m doing this week?)&lt;/p&gt;
&lt;p&gt;But, and this is the thing that really caught my attention in thinking about all of this: it would be much better &lt;em&gt;not&lt;/em&gt; to have to do that. Had we had TypeScript in place when we started, we simply would have designed large swaths of the app differently because we’d have seen these kinds of things when we were building it in the first place!&lt;/p&gt;
&lt;p&gt;That’s a bit of wishing for the impossible in one sense: we literally couldn’t have done that when we started on the app, because TS didn’t have the necessary pieces to support typing the Ember libraries. My team helped &lt;em&gt;build&lt;/em&gt; the TS and Ember story over the last 18 months! But at a minimum I have a pretty good idea how the process will be different next time around, with this tool available and providing this kind of helpful design feedback from the outset!&lt;/p&gt;
</content><category term="TypeScript"></category><category term="JavaScript"></category><category term="functional programming"></category><category term="types"></category><category term="software development"></category><category term="Ember.js"></category></entry><entry><title>Give Me Chronological Archives or Go Away</title><link href="http://www.chriskrycho.com/2018/give-me-chronological-archives-or-go-away.html" rel="alternate"></link><published>2018-08-25T12:15:00-04:00</published><updated>2018-08-25T12:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-25:/2018/give-me-chronological-archives-or-go-away.html</id><summary type="html">Algorithmically-sorted archives for blogs are hyper-user-hostile and I hate them. Looking at you, Medium.
</summary><content type="html">&lt;p&gt;I was looking at the (really excellent) content in Vaidehi Joshi’s &lt;a href="https://medium.com/basecs"&gt;basecs&lt;/a&gt; series, and it crystallized something for me: Algorithmically-sorted archives for blogs are hyper-user-hostile and I &lt;em&gt;hate&lt;/em&gt; them.&lt;/p&gt;
&lt;p&gt;Trying to just work through that series in chronological order of publication is &lt;em&gt;nearly&lt;/em&gt;—not quite &lt;em&gt;actually&lt;/em&gt;, but &lt;em&gt;nearly&lt;/em&gt;—impossible. Never mind that the series is a &lt;em&gt;series&lt;/em&gt;, and that most posts build on earlier posts, Medium wants to &lt;em&gt;foster engagement&lt;/em&gt; and tell you what other people have read most.&lt;/p&gt;
&lt;p&gt;It keeps up this nonsense even when you pull the the Archive view: it displays the top 10 posts from 2017, sorted by which ones people read most. There’s no view of &lt;em&gt;all&lt;/em&gt; the posts in the series, simply sorted by date, period. You can sort those top 10 posts by date, but to get to the series in chronological sequence, you have to click into each month… and then click the button &lt;em&gt;again&lt;/em&gt; to sort by date &lt;em&gt;for every single month&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This absurd focus on algorithmic sorting is an abomination—a desecration of all that is good and noble and beautiful about the format of the blog. It should die an ignominious death, unmourned by anyone but Silicon Valley venture capitalists thinking to make a quick buck on other people’s publishing efforts.&lt;/p&gt;
</content><category term="writing"></category><category term="blogging"></category><category term="publishing"></category><category term="medium"></category></entry><entry><title>RSS Triage is Just Like Email Triage</title><link href="http://www.chriskrycho.com/2018/rss-triage-is-just-like-email-triage.html" rel="alternate"></link><published>2018-08-22T18:15:00-04:00</published><updated>2018-08-22T18:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-22:/2018/rss-triage-is-just-like-email-triage.html</id><summary type="html">My strategy for keeping up with my RSS subscriptions: read it, send it to Pocket to read later, or mark it as read. Then move on.
</summary><content type="html">&lt;p&gt;I’ve heard people say they find &lt;abbr&gt;RSS&lt;/abbr&gt; overwhelming: the constant flow of new items. I find that managing &lt;abbr&gt;RSS&lt;/abbr&gt; well is not actually all that hard though; it just takes the same kind of discipline as keeping an empty inbox does.&lt;/p&gt;
&lt;p&gt;In short: keep my reading list restrained, and have a strategy to keep up to date on that list.&lt;/p&gt;
&lt;p&gt;My strategy for keeping up to date is simple, too: for every time, either read it, send it to Pocket to read later (on my Kobo, via Kobo’s Pocket integration), or mark it as read. Then move on.&lt;/p&gt;
&lt;p&gt;As for the Pocket items: clear &lt;em&gt;those&lt;/em&gt; out after long enough, too: I go through my backlog every so often and if I haven’t read it yet and it has been in my to-read list for more than a month or two, I decide to read it &lt;em&gt;now&lt;/em&gt; or just remove it. (At some point you just have to admit that you’re &lt;em&gt;not&lt;/em&gt; going to read something, and that it’s okay. We all have limited time.)&lt;/p&gt;
&lt;p&gt;With that simple strategy, &lt;abbr&gt;RSS&lt;/abbr&gt; becomes more than merely “manageable” for me: I get to read a lot of things I actually &lt;em&gt;want&lt;/em&gt; to read, and it’s focused in a way that Twitter or Apple News or whatever else isn’t.&lt;/p&gt;
</content><category term="rss"></category><category term="reading"></category></entry><entry><title>Dealing With Burnout In Public</title><link href="http://www.chriskrycho.com/2018/dealing-with-burnout-in-public.html" rel="alternate"></link><published>2018-08-20T07:00:00-04:00</published><updated>2018-08-20T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-20:/2018/dealing-with-burnout-in-public.html</id><summary type="html">If I'm going to go through burnout, it might as well be a help to others. Especially if I can offer a more thoroughly Christian view of burnout than much of what I see in either secular *or* Christian literature on the subject.
</summary><content type="html">&lt;p&gt;For the last several months, I’ve been experiencing what I &lt;a href="https://www.chriskrycho.com/2018/some-mild-burnout.html" title="Some Mild Burnout"&gt;initially described&lt;/a&gt; as &lt;em&gt;mild burnout&lt;/em&gt;. I’m not sure how mild it is at this point, but I’m definitely still experiencing it. As a result, I’m still thinking about how to mitigate it, minimize the length of it, and not least to walk through it well as a Christian.&lt;/p&gt;
&lt;p&gt;One of my aims–we will see how this plays out, but it is an aim–is to walk through this experience of burnout as publicly as seems appropriate. My reason is basically the same as I noted at the end of the post where I first noted publicly my experience of burnout. Seeing that others have gone through this, and seeing what helped them, can sometimes be a help to us as we walk through things. My experience won’t totally generalize. Some of the things I conclude aren’t going to stick for others because they reject my priors–more on that in a moment. But nonetheless, having something of a public record of dealing with something like this seems to me to be a broadly good thing if it’s done well. I hope to do it well. (I also hope you’ll bear with me insofar as I don’t!)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I noted that one of my interests is in what it looks like to walk through burnout as a Christian, specifically. This seems to be an interesting and relatively open topic. Most of the literature I’ve bumped into on the subject is explicitly secular, and it uses language and approaches I find &lt;em&gt;partial&lt;/em&gt; at best and &lt;em&gt;outright wrong&lt;/em&gt; at worst. I have a good resource paper to work through from my pastor–who, in God’s providence, wrote an academic research paper on the question for part of his D. Min. work–and I expect to be leaning a fair bit on the things I find there and in further secondary resources.&lt;/p&gt;
&lt;p&gt;At the same time, if my experience watching my wife walk through serious clinical depression over the last decade is any guide, there is a lot yet to be thought through and written about in this space. Nearly all the material I’ve encountered on depression in that time–&lt;em&gt;not&lt;/em&gt; all, but nearly all–misses the boat in one way or another. On just one of the many poles: the approaches tend either to wholly medicalize depression, or to throw medical factors out the window. Both of these responses seem to me very specifically &lt;em&gt;sub&lt;/em&gt;-Christian in their view of the human person.&lt;/p&gt;
&lt;p&gt;So likewise does much of the literature I have found on burnout so far. The language of “self-care,” for example, is well-intentioned and much of the advice that comes with it is good. (I’ll try to unpack some of that at some point.) Yet I also think that framing does as much harm as good. My response to burnout is not merely a matter of taking care of myself as though my being happy and healthy is an end in and of itself. Rather, in a Christian frame, I ought to think in terms of &lt;em&gt;wisely stewarding my body and mind&lt;/em&gt;–a very different thing. The language of “stewardship” implies the end of the things I choose to do and not to do: not merely my own well-being, but my being able to steadfastly and faithfully honor God and serve the church and love all those around me well (Christian and non-Christian alike!).&lt;/p&gt;
&lt;p&gt;This is not merely a semantic game. The language we use, the way we choose to frame our lives, &lt;em&gt;matters&lt;/em&gt;. Self-care is about me. Stewardship involves me but is not about me.&lt;/p&gt;
&lt;p&gt;On the other hand, much of the Christian discussion of issues like depression or burnout seems (curiously) narrow in its understanding of how to treat these problems. They are very often reduced simply to a question of one’s faith: if one were only more intent on taking joy in salvation, this problem would go away. To which I say: &lt;em&gt;have you read the Psalms?&lt;/em&gt; And more: &lt;em&gt;have you read Genesis 3?&lt;/em&gt; And not least: &lt;em&gt;have you read the gospels?&lt;/em&gt; When above I described what I have read as “sub-Christian,” I had these kinds of things in mind no less than the more “secular” advice. This kind of advice–to pray more and read one’s Bible more and repent of sin more–is not wrong, but it is desperately incomplete. When “seek joy more!” is &lt;em&gt;all&lt;/em&gt; that is on offer, what is evidenced is an impoverished anthropology, a view of human nature that forgets our physicality or diminishes it to an ancillary to the &lt;em&gt;real&lt;/em&gt;, spiritual self; and which fails to grasp the ways our brokenness is not merely a matter of our choices but also of the world we encounter and the bodies and minds we find ourselves bearing as their own kinds of crosses in this age.&lt;/p&gt;
&lt;p&gt;My own thoughts here are still nascent in many ways, though already shaped in many ways by the experience of watching my wife bear up well under her own burdens these last ten years. But I hope that as I trace them out–and also simply explain &lt;em&gt;how things are&lt;/em&gt;–that it will be helpful and encouraging to some other travelers along this particularly thorny way.&lt;/p&gt;
</content><category term="burnout"></category><category term="writing"></category><category term="depression"></category></entry><entry><title>The Calculating Stars</title><link href="http://www.chriskrycho.com/2018/the-calculating-stars.html" rel="alternate"></link><published>2018-08-19T16:00:00-04:00</published><updated>2018-08-19T16:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-19:/2018/the-calculating-stars.html</id><summary type="html">Required: Mary Robinette Kowal’s alt-history of the space program (after a meteor strike!) is wonderful—smashingly-good plotting which somehow makes a half decade span feel *urgent* and *fast-paced*; a fantastic lead character; an interesting examination of women’s friendships; and frank treatment of both sexism and mental illness without being preachy about either. This was one of my favorite pieces of science-fiction I’ve read in a long time.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I keep my book review ratings simple—they’re either &lt;em&gt;required&lt;/em&gt;, &lt;em&gt;recommended&lt;/em&gt;, &lt;em&gt;recommended with qualifications&lt;/em&gt;, or &lt;em&gt;not recommended&lt;/em&gt;. If you want the TL;DR, this is it:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Required:&lt;/strong&gt; Mary Robinette Kowal’s alt-history of the space program (after a meteor strike!) is wonderful—smashingly-good plotting which somehow makes a half decade span feel &lt;em&gt;urgent&lt;/em&gt; and &lt;em&gt;fast-paced&lt;/em&gt;; a fantastic lead character; an interesting examination of women’s friendships; and frank treatment of both sexism and mental illness without being preachy about either. This was one of my favorite pieces of science-fiction I’ve read in a long time.&lt;/p&gt;
</content><category term="book reviews"></category><category term="science fiction"></category><category term="sexism"></category><category term="mental illness"></category></entry><entry><title>Level up your `.filter` game</title><link href="http://www.chriskrycho.com/2018/level-up-your-filter-game.html" rel="alternate"></link><published>2018-08-18T10:00:00-04:00</published><updated>2018-08-18T10:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-18:/2018/level-up-your-filter-game.html</id><summary type="html">&lt;p&gt;Adam Giese’s &lt;a href="https://css-tricks.com/level-up-your-filter-game/"&gt;“Level up your &lt;code&gt;.filter&lt;/code&gt; game”&lt;/a&gt; does something really interesting and helpful: it introduces a bunch of fairly sophisticated functional programming concepts without ever mentioning functional programming and without ever using any of the jargon associated with those terms.&lt;/p&gt;
&lt;p&gt;“Level up your &lt;code&gt;.filter&lt;/code&gt; game” gives you a reason …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Adam Giese’s &lt;a href="https://css-tricks.com/level-up-your-filter-game/"&gt;“Level up your &lt;code&gt;.filter&lt;/code&gt; game”&lt;/a&gt; does something really interesting and helpful: it introduces a bunch of fairly sophisticated functional programming concepts without ever mentioning functional programming and without ever using any of the jargon associated with those terms.&lt;/p&gt;
&lt;p&gt;“Level up your &lt;code&gt;.filter&lt;/code&gt; game” gives you a reason to use some standard FP tools—currying, higher-order functions, composition—in your ordinary work. It’s pitched at working JS developers. It gives a real-world example of wanting to filter search results based on user input. It shows the utility of defining a bunch of small functions which can fit together like LEGO.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Filters are an essential part of JavaScript development. Whether you’re sorting out bad data from an API response or responding to user interactions, there are countless times when you would want a subset of an array’s values. I hope this overview helped with ways that you can manipulate predicates to write more readable and maintainable code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I commend the piece to you not so much for the explanation of how to use JavaScript’s &lt;code&gt;Array.prototype.filter&lt;/code&gt; effectively (though it has some good suggestions that way!) but &lt;em&gt;primarily&lt;/em&gt; as a great example of the kind of pedagogy we need a lot more of to demonstrate the value of functional programming in ordinary, day-to-day development work.&lt;/p&gt;
</content><category term="links"></category><category term="pedagogy"></category><category term="javascript"></category><category term="functional programming"></category></entry><entry><title>Stable Libraries</title><link href="http://www.chriskrycho.com/2018/stable-libraries.html" rel="alternate"></link><published>2018-08-14T19:45:00-04:00</published><updated>2018-08-14T19:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-14:/2018/stable-libraries.html</id><summary type="html">True Myth has changed very little since I first released it, and I do not expect it to change much in the future: because it is basically done. I wish more libraries took this approach; churn is not a virtue.
</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt; has changed very little since I first released it, and although I have a few ideas for small additions I might make, I don’t really expect it to change much in the future. &lt;em&gt;That’s okay.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There’s a strange idea in some parts of the software development ecosystem—a way of think I also find myself falling into from time—which takes a lack of changes to a library as a sign that the library is &lt;em&gt;dead&lt;/em&gt; and shouldn’t be used. I call this idea “strange” because if you take a step back, it’s actually not necessarily very healthy for certain kinds of libraries to be changing all the time.&lt;/p&gt;
&lt;p&gt;But if you’re in an ecosystem where rapid change in libraries is normal, you end up assuming that something which &lt;em&gt;isn’t changing&lt;/em&gt; is &lt;em&gt;unmaintained&lt;/em&gt; or &lt;em&gt;not usable&lt;/em&gt; when in fact the opposite may be true. If someone opens a pull request or an issue for True Myth, I generally get to it in under a day, often under an hour if it’s in my normal working time. (That’s easy enough for me to do because it’s a small, simple library; I don’t have the scale problems that larger projects do.) The project isn’t &lt;em&gt;dead&lt;/em&gt;. It’s just mostly &lt;em&gt;done&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One of the things I’d like to see in the front-end/JavaScript community in particular is a growing embrace of the idea that some libraries can genuinely be finished. They might need a tweak here or there to work with a new packaging solution, or to fix some corner case bug that has been found. But the “churn” we all feel to varying degrees would be much diminished if maintainers didn’t feel a constant push to be changing for the sake of, well… change. The burden on maintainers would be lower, too. Maybe we’d all get to spend less time on small changes that just keep us “up to date” and more on solving bigger problems.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: sometimes changing perspective warrants a rewrite. But in libraries as in apps, just as often you’ll end up with a bad case of &lt;a href="https://en.m.wikipedia.org/wiki/Second-system_effect"&gt;second system syndrome&lt;/a&gt;; and rewrites are &lt;em&gt;rarely&lt;/em&gt;—not never, but rarely—clean wins.&lt;/p&gt;
</content><category term="software development"></category><category term="open source software"></category><category term="libraries"></category><category term="true myth"></category><category term="javascript"></category></entry><entry><title>“Free Speech”</title><link href="http://www.chriskrycho.com/2018/free-speech.html" rel="alternate"></link><published>2018-08-11T10:35:00-04:00</published><updated>2018-08-11T10:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-11:/2018/free-speech.html</id><summary type="html">Arguments about free speech on these private platforms are exercises in missing the point. The bigger problem is that we have abandoned our public discourse (and nearly everything else) to these companies.
</summary><content type="html">&lt;p&gt;Every time there is a major controversy about large platforms blocking or delisting some controversial figure, something like the following exchange follows:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Person 1:&lt;/strong&gt; But what about free speech? You’re censoring this party!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Person 2:&lt;/strong&gt; [Twitter/Facebook/Youtube/etc.] is a private platform! Free speech guarantees the right not to be jailed for what you say, &lt;em&gt;not&lt;/em&gt; the right to have it on every platform you want.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So far as it goes, this is true. XKCD’s explanation is completely right on the legal merits:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/1357/"&gt;&lt;img src="http://www.explainxkcd.com/wiki/images/a/ae/free_speech.png" title="XKCD 1357: Free Speech" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But while this is all true in some sense, it also seems to me to be missing the larger and &lt;em&gt;much&lt;/em&gt; more important point. Namely: the whole reason we have these arguments—and the reason people tend to think as they do about the “free speech” question in these situations, legally nonsensical or not—is that we have outsourced the vast majority of our public discourse to these private platforms.&lt;/p&gt;
&lt;p&gt;Twitter and Facebook have become the &lt;em&gt;de facto&lt;/em&gt; public fora of the 2010s, with Google’s search results and Wikipedia’s summaries taking similarly authoritative roles on what &lt;em&gt;exists&lt;/em&gt; and what &lt;em&gt;is true&lt;/em&gt;. Not that most people would put it that way, but it remains true: if something isn’t in Google search, it might as well not exist on the internet, and therefore for many people &lt;em&gt;at all&lt;/em&gt;. Likewise with Wikipedia’s summaries: the admonitions of every college professor in the world notwithstanding, what Wikipedia says has an undeniable authority. And when someone is blacklisted from Twitter or Facebook, their ability to be heard at all by internet users as a block is &lt;em&gt;dramatically&lt;/em&gt; curtailed.&lt;/p&gt;
&lt;p&gt;This centralization of discussion and information into a few private platforms has a great many downsides. But perhaps chief among them is that we have ceded major aspects of our public and civic life to private platforms, and their interests are not the interests of the public good. They are driven almost entirely by the profit motive, or (possibly even worse at times) by nebulous and chimeric ideologies that treat “connecting people [digitally]” or “organizing the world’s information” as inherent and superlative goods. So when someone has their page removed from Facebook, or their website blacklisted from Google, there is a real sense in which they &lt;em&gt;have&lt;/em&gt; been removed from public discourse and their speech “silenced”—even if not in an illegal sense.&lt;/p&gt;
&lt;p&gt;For the purposes of this post, though, I could not care less what the major internet companies do or don’t show on their platforms. Instead, I worry about our practice both as individuals and also as communities-of-practice—churches, associations, and so on—of abdicating our responsibility to maintain real public and civic lives in our local places in favor of letting these corporate giants do the work for us. I worry about the costs of letting Google and Facebook replace genuine public fora in our lives. I worry about the long-term effect of letting supranational megacorporations driven by that toxic combination of profit motive and nonsensical ideologies set the terms of our lives. I worry about the whole set of underlying structural and systematic moves that have made delisting on one of those platforms seem like a violation of the ideal of free speech.&lt;/p&gt;
&lt;p&gt;As I’ve said for many years in this space: we should work hard at reclaiming our lives from the tangle of the corporations. We should limit the way we both use and think about these platforms. We should read books, old and new, rather than simply rely on the Google results and Wikipedia summaries. We should have painful, awkward conversations and indeed arguments with neighbors and colleagues and family members rather than merely all-caps shouting at each other on Facebook or Twitter. We should carve out our own spaces on the internet, &lt;a href="http://tumblr.austinkleon.com/post/37863874092"&gt;owning our own turf&lt;/a&gt;; but more than that we should remember that even that is no substitute for the thicker (and yes, more painful, frustrating, and awkward!) communities and interactions of a church or a neighborhood or a town hall meeting.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Given the context in which I’m writing this, it’s probably helpful to say that I think InfoWars is a font of demonic lies. I’m a Christian; I mean that literally.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="ethics"></category><category term="politics"></category><category term="social media"></category><category term="Twitter"></category><category term="indie web"></category></entry><entry><title>Imprecatory Psalms and Comfort for Weary Souls</title><link href="http://www.chriskrycho.com/2018/imprecatory-psalms-and-comfort-for-weary-souls.html" rel="alternate"></link><published>2018-08-08T07:00:00-04:00</published><updated>2018-08-08T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-08:/2018/imprecatory-psalms-and-comfort-for-weary-souls.html</id><summary type="html">Psalm 94 shows us what to pray and how to pray, even when our circumstances are not so dire as enemies trying to murder us.</summary><content type="html">&lt;p&gt;I read Psalm 94 in my devotions this morning—one of the “imprecatory psalms” which prays for God to judge the wicked. After the last couple days I’ve had, I joked with my wife that I was praying it against Microsoft Windows.&lt;/p&gt;
&lt;p&gt;The imprecatory content of the psalm is a deep well I shall not plumb today; in any case Windows is not an “enemy” the way the psalmist meant it. The thing I noticed as I reflected on the psalm, though, was how much it did that &lt;em&gt;is&lt;/em&gt; good and right for me to imitate. This is not merely a prayer for God to deliver from oppression and to right wrongs. It is also a prayer that simultaneously demonstrates and practices trust in God: &lt;em&gt;demonstrates&lt;/em&gt;, because only one who trusts God can pray like this; and &lt;em&gt;practices&lt;/em&gt;, because the act of prayer is the necessary outworking of that trust. This is the right model for us whatever our circumstances—including for me, in the midst of some burnout and some particularly deep frustrations with the &lt;a href="http://bib.ly/Ge3.17-19" title="Genesis 3:17–19"&gt;thorns and thistles&lt;/a&gt; of work and labor in this life.&lt;/p&gt;
&lt;p&gt;Put more directly: If a man facing enemies of the murderous sort could say “When I thought, ‘My foot slips,’ / your steadfast love, oh &lt;span class="divine-name"&gt;Lord&lt;/span&gt;, held me up. // When the cares of my heart are many, / your consolations cheer my soul,” then I can—and must—say the same with him.&lt;/p&gt;
</content><category term="psalms"></category><category term="prayer"></category><category term="burnout"></category></entry><entry><title>Building Things</title><link href="http://www.chriskrycho.com/2018/building-things.html" rel="alternate"></link><published>2018-08-06T21:15:00-04:00</published><updated>2018-08-06T21:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-08-06:/2018/building-things.html</id><summary type="html">On “force multipliers” and being an individual contributor at heart—even if one who is good at teaching and who enjoys leading.
</summary><content type="html">&lt;section id="i." class="level2"&gt;
&lt;h2&gt;I.&lt;/h2&gt;
&lt;p&gt;For almost three years, now, I have been more or less steadily—sometimes more, sometimes less!—putting out episodes of New Rustacean. It’s fairly popular. I’ve had really smart people tell me how helpful it was in getting them up to speed with the language. I have had the surprising and slightly weird (if also somewhat gratifying) experience of walking into a room and seeing people respond in recognition of my voice.&lt;/p&gt;
&lt;p&gt;I’m grateful for the impact the podcast has had, and as I tell people often: this is far and away the most significant thing I could have done in the Rust ecosystem in the last three years. There are a lot of people better-equipped than I to write top-notch libraries and applications in the ecosystem. People well-equipped for podcasting by dint of already being active in the space, and well-equipped for teaching specifically by dint of background and training? There are a lot fewer of those. I don’t think there is anywhere at all I could have made a bigger dent in the same time for Rust.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;If I went and applied for a job today, where actual Rust &lt;em&gt;experience&lt;/em&gt; was desired, the vast majority of my show’s listeners would have substantially more to show than me. A command line tool here, a little experiment there. My &lt;a href="https://github.com/chriskrycho/lightning-rs" title="lightning (lx)"&gt;one real project&lt;/a&gt; has been on hold almost since I started it. Another project, my original inspiration for learning Rust at all, I’ve never even started. My actual lines of Rust code written in the last three years top out somewhere under 3,000. It’s a pittance. As well as I know the language’s &lt;em&gt;ideas&lt;/em&gt;, and indeed as well as I can explain them… I actually haven’t gotten to &lt;em&gt;build&lt;/em&gt; much of anything with it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ii." class="level2"&gt;
&lt;h2&gt;II.&lt;/h2&gt;
&lt;p&gt;The last few months at work, I’ve spent a lot of my time—and an increasingly large proportion of it—on mentoring, code reviews, and leading the team and effort I’m on. This is genuinely wonderful in a lot of ways. I &lt;em&gt;love&lt;/em&gt; teaching, and it’s a pleasure to help shape the overall direction of a project and a codebase.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In many ways, I’m right in line with the goals I set explicitly with my manager at the beginning of the year.&lt;/p&gt;
&lt;p&gt;That’s really good, and really important. I recently saw someone tweet the pithy remark that the &lt;em&gt;definition&lt;/em&gt; of a senior engineer is that they are mentoring a more junior engineer. I don’t think that’s quite right—there is a lot of room for really outstanding technical contributors who don’t have the gift of teaching, but whose technical chops mean they genuinely &lt;em&gt;are&lt;/em&gt; senior people on the team.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But the reasonable insight under the hyperbole is that enabling others can often be far more effective than merely doing work yourself.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;Over the last several months, the amount of code I have written myself has dropped substantially. Not to nothing, of course; I’m still doing the actual work of designing and implementing pieces of the application I work on a majority of the time. But I’m not sure how much more than 50% of my time it is on any given week at this point. As much as I’ve enjoyed helping drive this particular project forward,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; I haven’t actually gotten to &lt;em&gt;build&lt;/em&gt; as much during this phase of it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="iii." class="level2"&gt;
&lt;h2&gt;III.&lt;/h2&gt;
&lt;p&gt;These two things have a great deal in common, for all their superficial differences. Both are places where my most valuable contributions are not what I can build myself, but what I can enable &lt;em&gt;others&lt;/em&gt; to build.&lt;/p&gt;
&lt;p&gt;Thousands and thousands of people have listened to New Rustacean. For some non-trivial number of them, the podcast was an important part of their wrapping their heads around the language. I know this because they tell me, in emails and conversations and tweets that are genuinely my favorite parts of doing the show! I have done far, far more with the podcast than I possibly could have by building another library in Rust.&lt;/p&gt;
&lt;p&gt;Similarly, albeit on a much smaller scale, my role in my team at Olo matters. I’ve been able to help set the overall technical direction of a number of our front-end initiatives at the company in important ways. I’ve been able to help more junior developers ramp up their skills. I have done far more in this kind of role than I could possibly have done by just quietly shipping features.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;Being a “force multiplier” (what a terrible phrase!) isn’t always what it’s cracked up to be. It can be both &lt;em&gt;worth it&lt;/em&gt; and also &lt;em&gt;profoundly frustrating and boring&lt;/em&gt; at times. I was drawn to software in no small part because of the joy of being able to make things—to start with nothing but an idea or a sketch and a few hours later have something people can interact with, that solves a problem for them. I still love that side of it, and it’s clear to me if nothing else that (for the foreseeable future, anyway) I have no desire whatsoever to go into management roles, “force multiplier” or not.&lt;/p&gt;
&lt;p&gt;There’s a real trick here, because it’s not that I’m &lt;em&gt;not&lt;/em&gt; building things in these roles. It’s just that building a team or a community is not quite the same thing—it does not scratch the same itch—as building a really elegant user interface component with an elegant and communicative animation. They’re both good; and they’re very, very different from each other.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I separate those on purpose: a project and a codebase are &lt;em&gt;related&lt;/em&gt;, but they’re far from identical. A project can succeed—at least in the short term—with a terrible codebase; an excellent codebase is no guarantee of project success. Getting them aligned is rare, difficult, and rewarding.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;This seems like a typical overcorrection: against the idea that teaching is &lt;em&gt;unimportant&lt;/em&gt;, it now comes into vogue to say that teaching is the &lt;em&gt;most&lt;/em&gt; important. Imagine if we simply noted that teaching is some people’s gift and vocation, and not others; and that we can complement one another’s strengths by sharing our own—that it is not a zero-sum game but one in which &lt;a href="https://www.esv.org/1+Corinthians+12+12/" title="1 Corinthians 12:12 and following"&gt;we are like hands and feet and elbows and ears, each one needing the other, none able to do without the others&lt;/a&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;much of the time anyway; the &lt;a href="https://www.chriskrycho.com/2018/some-mild-burnout.html" title="Some Mild Burnout"&gt;burnout&lt;/a&gt; I’m experiencing is related to some of the dynamics of this particular project&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="leadership"></category><category term="podcasting"></category><category term="New Rustacean"></category></entry><entry><title>Is Agile the Enemy of Good Design?</title><link href="http://www.chriskrycho.com/2018/is-agile-the-enemy-of-good-design.html" rel="alternate"></link><published>2018-07-29T16:15:00-04:00</published><updated>2018-07-29T16:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-07-29:/2018/is-agile-the-enemy-of-good-design.html</id><summary type="html">This is painfully accurate: “It is all about “ship, ship, ship”. We don’t pivot. We don’t refine. The product owner just wants to mark it done in Jira. The MVPs are an excuse to get crappy stuff out the door.”
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;In line with my recently stated &lt;a href="https://www.chriskrycho.com/2018/continuing-to-reflect-on-my-internet-presence.html" title="Continuing to Reflect on My Internet Presence"&gt;desire&lt;/a&gt; to share out things I’m reading:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I just ran into a really excellent piece by John Cutler (who is also new to me), &lt;a href="https://hackernoon.com/is-agile-the-enemy-of-good-design-14a35806cde7"&gt;Is Agile the Enemy (of Good Design)?&lt;/a&gt;. The whole thing is worth your time, but a couple bits in particular stood out to me in light of some ongoing conversations &lt;a href="https://mobile.twitter.com/bmakuh"&gt;Ben Makuh&lt;/a&gt; about wisdom and folly in startup culture.&lt;/p&gt;
&lt;p&gt;In particular, these two bits from other designers Cutler cites sum up a &lt;em&gt;huge&lt;/em&gt; amount of what’s wrong with a lot of what passes for “Agile” and indeed for “startup culture”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The stuff you’re talking about rarely happens. It is all about “ship, ship, ship”. We don’t pivot. We don’t refine. The product owner just wants to mark it done in Jira. The MVPs are an excuse to get crappy stuff out the door. I guarantee that if I am methodical with my prototype testing, I can come up with something better because I will expose it to users. Not AS great as doing it the perfect Agile way, but better than nothing. I mean I struggle even to do usability testing. So you know…yes in theory all that is good, but it doesn’t happen.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;!-- --&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The enemy of both actual agilistas and the UX/design community in 2018 is, as John points out, short-term, output-centric thinking driven by a focus on short-term financial results, and all the cultural ramifications of this mindset.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;These things are &lt;em&gt;antithetical&lt;/em&gt; to the original ideas of the &lt;a href="http://agilemanifesto.org"&gt;Manifesto for Agile Software Development&lt;/a&gt;. But they’re also, well… pretty common. As Cutler puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…Agile — like many other things in cut-throat business — is often no match for the universal threats of output fetishism, success theater, and cutting corners. Trust me… these predated Agile.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this is some hot fire here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So where does this leave us? Designers have a right to be concerned. At least with waterfall no one prematurely yells “ship it” in the middle of the project. Designers have time to work instead of trying to jump on and off the sprint conveyor belt. And because the “thing” is built in a big batch, they have time to tackle the design problem holistically right from the beginning. “Good” waterfall beats abused Agile any day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He’s not wrong. &lt;a href="https://hackernoon.com/is-agile-the-enemy-of-good-design-14a35806cde7"&gt;You should read the whole thing.&lt;/a&gt;&lt;/p&gt;
</content><category term="design"></category><category term="agile"></category><category term="software development"></category><category term="business"></category></entry><entry><title>Blog as Note-Taking Tool</title><link href="http://www.chriskrycho.com/2018/blog-as-note-taking-tool.html" rel="alternate"></link><published>2018-07-16T07:00:00-04:00</published><updated>2018-07-16T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-07-16:/2018/blog-as-note-taking-tool.html</id><summary type="html">Pretty regularly, I go back and reread my own blog posts—and not for vanity. It’s an illuminating experience, a lot like reading through old notes.
</summary><content type="html">&lt;p&gt;I have a habit that might not make sense to you. I reread my own blog posts fairly regularly. It’s not vanity—not some weird obsession with my own awesomeness in the form of my own writing or some such nonsense. It’s that in my blog posts over the last decade, I have a pretty serious backlog of &lt;em&gt;what I was thinking about at any given point in time.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It’s not exhaustive, by a long shot. It only includes things I actually decided to publish.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; There are, sadly, not many short thoughts in the mix. Nor is it well-tagged or organized in any internally-consistent way—even in any single version of the site, much less across versions. But nonetheless the history is still there, and I &lt;em&gt;can&lt;/em&gt; traverse the various lines through it, such as they are. (Sometimes, even, the changes in organization and structure are illuminating about how I was thinking about things at the time!) In any case, my habit of linking to previous references to ideas has proven invaluable for the times when I want to trawl back through old posts and consider those old thoughts again.&lt;/p&gt;
&lt;p&gt;Reading old blog posts is a strange experience, of course. The person who wrote these things was recognizably myself; but I am not who I then I was, and I sometimes disagree with myself on the substance and often on the style. (I occasionally find an old gem and wonder how I ever managed to write so well.) That very strangeness, it turns out, is why I do this every so often, though. Thinking well is often a matter of forging connections between ideas that were previously not connected for us. We cannot consciously hold in our minds even a fraction of all the things we have thought about or even written something about over the years. We can, however, jog our memories, and let new connections form. And rereading one’s own blog post is a great way to do that.&lt;/p&gt;
&lt;p&gt;I’d not heard specifically of the &lt;a href="https://zettelkasten.de"&gt;Zettelkasten method&lt;/a&gt; until Alan Jacobs linked it a while back, but it fits this model pretty perfectly, and maps as well to ways I’ve been &lt;em&gt;trying&lt;/em&gt; to structure my note-taking and thinking for the past few years. (I’m going to be consciously doing more of this in &lt;a href="http://www.bear-writer.com"&gt;Bear&lt;/a&gt;, my current notes app of choice. I’ll probably write up my experience that way once I’ve actually had some experience!) But this also ties into some of the things Jacobs has been &lt;a href="https://blog.ayjay.org/the-blog-garden/" title="The Blog Garden"&gt;musing out loud&lt;/a&gt; about in his own blog over the last week. It’s not just that a blog can serve as a place to do some of the fleshing-out of ideas. It’s not just that a blog can be a record of the development of ideas. It can also serve to jog new ideas if you read yourself again, displaced (both literally and temporally) from the original writing of the thing. A blog is kind of like a public notebook, and while it &lt;em&gt;may&lt;/em&gt; be useful for others to browse through it, is &lt;em&gt;is&lt;/em&gt; useful for me to browse back through it.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Though: if you look at the archives, especially including those on my &lt;a href="http://blog.chriskrycho.com" title="Thoughts; A Flame"&gt;first real blog&lt;/a&gt; and &lt;a href="http://2012-2013.chriskrycho.com"&gt;the previous iteration of this site&lt;/a&gt;, you’ll notice that I published a lot of posts about a lot of subjects, whether my thoughts were especially well-formed or not.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="Zettelkasten"></category><category term="notes"></category><category term="memory"></category><category term="writing"></category><category term="blogging"></category></entry><entry><title>Some Mild Burnout</title><link href="http://www.chriskrycho.com/2018/some-mild-burnout.html" rel="alternate"></link><published>2018-07-15T17:15:00-04:00</published><updated>2018-07-15T17:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-07-15:/2018/some-mild-burnout.html</id><summary type="html">I find that I am experiencing a mild case of burnout. It is far from as bad as it could be, and I am doing the things I should to mitigate it. But it is real, and dangerous, and I hope this post might help others keep their eyes open for it.
</summary><content type="html">&lt;p&gt;I came to terms with reality a bit last week. It wasn’t fun. I concluded something attentive folks around me have likely known for a bit: I am dealing with low-level &lt;a href="https://www.mayoclinic.org/healthy-lifestyle/adult-health/in-depth/burnout/art-20046642" title="The Mayo Clinic’s summary of burnout"&gt;burnout&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Have you become cynical or critical at work?&lt;/li&gt;
&lt;li&gt;Do you drag yourself to work and have trouble getting started once you arrive?&lt;/li&gt;
&lt;li&gt;Have you become irritable or impatient with co-workers, customers or clients?&lt;/li&gt;
&lt;li&gt;Do you lack the energy to be consistently productive?&lt;/li&gt;
&lt;li&gt;Do you lack satisfaction from your achievements?&lt;/li&gt;
&lt;li&gt;Do you feel disillusioned about your job?&lt;/li&gt;
&lt;li&gt;Are you using food, drugs or alcohol to feel better or to simply not feel?&lt;/li&gt;
&lt;li&gt;Have your sleep habits or appetite changed?&lt;/li&gt;
&lt;li&gt;Are you troubled by unexplained headaches, backaches or other physical complaints?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Mayo Clinic (the source for that list) notes that if you’re suffering from any &lt;em&gt;one&lt;/em&gt; of those, you may be experiencing burnout. By my count, I am experiencing &lt;em&gt;six&lt;/em&gt;. If you’re looking at the list and wondering: the first six. No changes to sleep, no abuse of food or drugs or alcohol, and I haven’t started having physical problems yet, which is why I classify what I’m experiencing as low-level or mild. But burnout is tricky. I’ve know a number of people who’ve had more serious cases—cases which led into significant physical problems that took them years to recover from.&lt;/p&gt;
&lt;p&gt;In my experience, when people think about burnout, they tend to think of the kind that comes from &lt;em&gt;overwork&lt;/em&gt; or from a lack of rest. You certainly can (indeed: certainly will) burn out by pulling 80-hour weeks for years on end. But those are not the only way you can burn out. You can also do it by ending up in a spot where you have too much responsibility, or deep and lasting conflict within your working environment, or sharp ethical disagreements with your leadership, or even just—“just” being the wrong word here—lasting mismatches between your tasks and the things you care about.&lt;/p&gt;
&lt;p&gt;The particular reasons for my mild case of burnout aren’t the stereotypical kind. I get plenty of sleep, I enjoy my hobbies, I exercise and eat well, and I very carefully maintain a limit on the hours I work every week. I’m not &lt;em&gt;overworked&lt;/em&gt;. It’s a mix of other factors I won’t go into. The details aren’t actually that important here, and in any case my (genuinely excellent) manager knows them well and we are working on them together.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What is important is trying to figure out how to keep the burnout from getting worse. And acknowledging that it can happen to anyone. And that you may not see it coming, may deny you’re experiencing till something finally makes it click for you.&lt;/p&gt;
&lt;p&gt;What made this all finally click for me? It was &lt;a href="http://www.alliancenet.org/mos/postcards-from-palookaville/six-years-on#.W0vQM4pMFvI" title="Six Years On"&gt;this post by Carl Trueman&lt;/a&gt;, reflecting on his own &lt;em&gt;very&lt;/em&gt; different vocation—specifically, his bivocational work as both a pastor and a professor:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A few months into my pastorate, an academic friend who had done the same thing for nine years wrote me a letter and urged me to be careful – as soon as I ceased to enjoy the hobbies and casual pleasures of life, he warned, I would be close to burn-out and would need to step down. I was glad of the warning – every minister I have ever know who has burned out has told me that there was no obvious warning: one day everything seemed fine, the next they were barely able to get out of bed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That started me thinking on my own experience, and if I’m not quite there, I can see warning signs. The biggest danger sign, for me, is an utter lack of motivation around some of my hobbies. I generally relax, as my wife can attest, in &lt;em&gt;weird&lt;/em&gt; ways—by writing, by building an open-source library, by reading hard-and-interesting books. For the last several months, I have had almost no interest in doing any of that. So I’ve a mild case at the moment, and I’m doing everything I can to keep it from getting worse.&lt;/p&gt;
&lt;p&gt;Burnout like I have right now is not the end of the world, to be clear. It &lt;em&gt;is&lt;/em&gt; manageable. Many people—including people in my own family—carry much more significant burdens in terms of physical and mental health. But it is real, and it’s dangerous in no small part because it can cascade into really serious mental and physical health problems if you let it spiral out of control.&lt;/p&gt;
&lt;p&gt;So, two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;If I’m a bit slower on open-source projects for a while, you know why.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’d like to be that blog post for someone else. If you’re experiencing the things on that list, figure out how to change &lt;em&gt;something&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;You can assume that it’s not sharp conflict over ethical issues, because nothing in the world would make me jet from a job faster than that would&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="burnout"></category><category term="work"></category><category term="productivity"></category></entry><entry><title>How Do Virtue Ethics Arise From Metaphysics?</title><link href="http://www.chriskrycho.com/2018/how-do-virtue-ethics-arise-from-metaphysics.html" rel="alternate"></link><published>2018-07-14T10:15:00-04:00</published><updated>2018-07-14T10:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-07-14:/2018/how-do-virtue-ethics-arise-from-metaphysics.html</id><summary type="html">&lt;p&gt;Context: I’ve just picked back up Shannon Vallor’s &lt;em&gt;Technology and the Virtues&lt;/em&gt; about a month away from it (since my &lt;a href="https://www.chriskrycho.com/2018/good-arguments.html" title="Good Arguments—Learning a great deal by disagreeing with an excellent interlocutor — and thinking hard “out loud.”"&gt;last post about it&lt;/a&gt;). And in light of a number of things I’ve been thinking about over the last month,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I’m trying to publish short …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Context: I’ve just picked back up Shannon Vallor’s &lt;em&gt;Technology and the Virtues&lt;/em&gt; about a month away from it (since my &lt;a href="https://www.chriskrycho.com/2018/good-arguments.html" title="Good Arguments—Learning a great deal by disagreeing with an excellent interlocutor — and thinking hard “out loud.”"&gt;last post about it&lt;/a&gt;). And in light of a number of things I’ve been thinking about over the last month,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I’m trying to publish short thoughts on things like this as they come up. &lt;a href="https://blog.ayjay.org/new-uses-for-old-blogs/"&gt;Blogging as gardening&lt;/a&gt;, if you will.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Vallor argues (relatively persuasively, but I confess my relative ignorance of these traditions) that Aristotelian, Confucian, and Buddhist ethics all have deep commonalities in the actual virtues they espouse and practices they endorse for the formation of those virtues, despite their sharp differences in their metaphysical priors. But—and this is, to my eye, the book’s most significant weakness—Vallor seems uninterested in what is to me an extremely important question: how and why do such different frames of viewing the world come to such (relatively!) similar conclusions about how we ought to live in it?&lt;/p&gt;
&lt;p&gt;Why, in other words, does wisdom have a particular shape? Is there indeed such a thing as &lt;em&gt;human nature&lt;/em&gt;—and if so, what is it and where does it come from? (As a Christian, I have thoughts on this, of course. I think there’s a good reason the wisdom/virtue traditions end up landing in similar places, and it’s because there &lt;em&gt;is&lt;/em&gt; an order to the world and to human beings. But more on that later.)&lt;/p&gt;
&lt;p&gt;Vallor presupposes some of this, and of course I can’t fault her for not tracing out every single one of her priors. But in a book arguing that there is indeed a basis for a shared virtue ethic we can use to work together across these traditions when confronting specific questions about technology, this &lt;em&gt;particular&lt;/em&gt; omissions seems curious indeed.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;including an ironically unpublished blog post&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="virtue ethics"></category><category term="Shannon Vallor"></category><category term="Confucianism"></category><category term="Buddhism"></category><category term="Christianity"></category></entry><entry><title>The Value of a Good Habit</title><link href="http://www.chriskrycho.com/2018/the-value-of-a-good-habit.html" rel="alternate"></link><published>2018-07-10T22:10:00-04:00</published><updated>2018-07-10T22:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-07-10:/2018/the-value-of-a-good-habit.html</id><summary type="html">I now have seven months of regular writing every morning under my belt. The habit has been productive. Time to start building another new habit (even while I maintain this one)!
</summary><content type="html">&lt;p&gt;Since December, I’ve been working on &lt;a href="https://www.chriskrycho.com/2017/knowing-your-rhythms.html" title="Knowing Your Rhythms--Or: why I&amp;#39;m marking out all the time before 7am as mine."&gt;writing every day before I start work&lt;/a&gt;. I am content to admit that I certainly haven’t done it every single day along the way–but I’m content with that admission in no small part because I &lt;em&gt;have&lt;/em&gt; done it &lt;em&gt;most&lt;/em&gt; days along the way. And it has been genuinely wonderful.&lt;/p&gt;
&lt;p&gt;The things I have written along the way have come in many forms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’ve published around 50,000 words on this site already this year (even if ‘word count’ here is a loose metric: it includes lots of code samples and in some cases those code samples are repeated for effect)&lt;/li&gt;
&lt;li&gt;I’ve put together a workshop and a couple of short talks on &lt;a href="https://www.emberjs.com"&gt;Ember&lt;/a&gt; and &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I’ve written a talk on the future of our front-end development practices at Olo.&lt;/li&gt;
&lt;li&gt;I’ve written and published 11 episodes of New Rustacean (totaling about 25,000 more words!).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And very little of that could have or would have happened without the time I’ve dedicated nearly every weekday morning to writing.&lt;/p&gt;
&lt;p&gt;It’s not so much that I’m hyper-productive on any one day. To the contrary: many days along the way I struggled just to get out a few hundred words of one of the projects I was working on, and those projects (however much I love them) have sometimes ended up being something of a slog. It’s okay: that’s the point of building the habit in.&lt;/p&gt;
&lt;p&gt;I’ve made the analogy before–as have many others, I’m sure!–of writing to running. There are many days when going for a run doesn’t actually seem all that appealing, but I go anyway, because I’ve long since developed the habit of just getting out whether I feel like it or not. Some of those days I very much do not enjoy the actual run, either: I find myself somewhere out along the way and end up feeling sick or simply having to work much harder than I could wish. But even if it’s a short and unpleasant run in the end, I come away having gone for a run.&lt;/p&gt;
&lt;p&gt;Writing (or any other valuable habit) seems to be much the same. There are days I do not feel like doing it. There are days when the doing of it is hard, when I feel like I have to drag the words out of myself. There have been days even just in the last few weeks where I realized that words I’d written on previous days simply had to be thrown away–content for New Rustacean that ranged from ill-worded to actually-wrong, for example.&lt;/p&gt;
&lt;p&gt;But I have been able to say, nearly every workday when I wasn’t sick or traveling, that I did in fact write &lt;em&gt;something&lt;/em&gt;. And that’s enough, in truth. As I noted &lt;a href="https://www.chriskrycho.com/2017/momentum.html" title="Momentum--Two weeks of daily writing, and how &amp;quot;productivity&amp;quot; happens."&gt;when I began building this habit&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[The] early morning is the best time for me to be writing, and I get a lot of mileage out of taking anywhere from 30 to 90 minutes to get at it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I recognized six months ago, even when an individual day here or there slips, doing the work to make writing habitual means that the &lt;em&gt;other&lt;/em&gt; days don’t. The result is that, delightfully, I’ve been able to get a lot of writing done, even through times when I &lt;em&gt;really&lt;/em&gt; didn’t feel like writing.&lt;/p&gt;
&lt;p&gt;So, next up: do the same thing with reading nonfiction books. I’ve read an absurd amount of fiction in the last year–and I allowed myself that intentionally as a kind of letdown after finishing seminary. But as I’ve noted in this space before, I don’t want to stay in that letdown mode forever. I want to build once again the habit of reading hard books carefully. The way to do it, of course, is… just to do it. Day by day, just &lt;em&gt;reading&lt;/em&gt;. Hopefully in six months I’ll have a report complementary to this one, where I can say that I &lt;em&gt;kept writing&lt;/em&gt; but also &lt;em&gt;started reading hard things again&lt;/em&gt;.&lt;/p&gt;
</content><category term="writing"></category><category term="productivity"></category></entry><entry><title>Ember.js, TypeScript, and Class Properties</title><link href="http://www.chriskrycho.com/2018/ember-ts-class-properties.html" rel="alternate"></link><published>2018-07-10T20:00:00-04:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-07-10:/2018/ember-ts-class-properties.html</id><summary type="html">I made an important mistake in my discussion of JavaScript and TypeScript class properties in relation to computed properties and injections in Ember earlier this year. Here's the fix you need.</summary><content type="html">&lt;p&gt;A few months ago, I wrote a mostly-complete series describing the state of using &lt;a href="https://typescriptlang.org"&gt;TypeScript&lt;/a&gt; with &lt;a href="https://emberjs.com"&gt;Ember&lt;/a&gt; in 2018. I got one &lt;em&gt;very&lt;/em&gt; important thing wrong in that series, and I’m back with the correction!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In that series, I showed an example of a component definition; it looked like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import Computed from &amp;#39;@ember/object/computed&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem here is all the computed property assignments and the actions hash assignments. The fact that this sample code ever worked at all was… an accident. It wasn’t &lt;em&gt;supposed&lt;/em&gt; to work. I &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html#computed-properties"&gt;noted at the time&lt;/a&gt; that this way of doing things had a performance tradeoff because computed properties ended up installed on every &lt;em&gt;instance&lt;/em&gt; rather than on the &lt;em&gt;prototype&lt;/em&gt;… and as it turns out, that was never intended to work. Only the prototype installation was supposed to work. And as it turns out, the &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0281-es5-getters.md" title="RFC #0281"&gt;&lt;abbr&gt;ES5&lt;/abbr&gt; getters implementation of computed properties&lt;/a&gt; which landed in Ember 3.1 broke every computed property set up this way.&lt;/p&gt;
&lt;p&gt;So if you can’t use class properties for this… how &lt;em&gt;do&lt;/em&gt; you do it? There are two ways: the &lt;code&gt;.extend()&lt;/code&gt; hack I mentioned &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html#computed-properties-1"&gt;previously&lt;/a&gt;, and &lt;a href="http://ember-decorators.github.io/ember-decorators/latest/"&gt;decorators&lt;/a&gt;. (The Ember Decorators docs include a discussion of this topic as well—see &lt;a href="http://ember-decorators.github.io/ember-decorators/latest/docs/class-fields"&gt;their discussion of class fields&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Note that throughout I’m assuming Ember 3.1+ and therefore &lt;abbr&gt;ES5&lt;/abbr&gt; getter syntax (&lt;code&gt;this.property&lt;/code&gt; instead of &lt;code&gt;this.get('property')&lt;/code&gt;).&lt;/p&gt;
&lt;section id="extend" class="level2"&gt;
&lt;h2&gt;&lt;code&gt;.extend()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The first workaround uses &lt;code&gt;.extend()&lt;/code&gt; in conjunction with a class definition. I originally wrote about this approach:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you need the absolute best performance, you can continue to install them on the prototype by doing this instead…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As it turns out, it’s more like “If you want your app to work at all…”&lt;/p&gt;
&lt;p&gt;Here’s how that would look with our full example from above. Note that there are three things which &lt;em&gt;must&lt;/em&gt; go in the &lt;code&gt;.extend()&lt;/code&gt; block with this approach: injections, computed properties, and the &lt;code&gt;actions&lt;/code&gt; hash.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component.extend({
  // -- Injections -- //
  session: service(&amp;#39;session&amp;#39;),

    // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel: computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${this.model.firstName};`;
    }
  ),

  aComputed: computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  }),

  isLoggedIn: bool(&amp;#39;session.user&amp;#39;),
  savedUser: alias(&amp;#39;session.user&amp;#39;) as Person,

  actions: {
    addToCollection(this: AnExample, value: string) {
      this.set(&amp;#39;aCollection&amp;#39;, this.aCollection.concat(value));
    }
  },
}) {
  // -- Component arguments -- //
  model!: Person;     // required
  modifier?: string;  // optional, thus the `?`

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.aCollection.includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, this.aCollection.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are three main things to note here.&lt;/p&gt;
&lt;p&gt;First, check out the &lt;code&gt;session('service')&lt;/code&gt; injection. We need the name of the service being injected for TypeScript to be able to resolve the type correctly (which it does by using “type registries,” as discussed briefly &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html#fn1"&gt;in this footnote&lt;/a&gt; in my series earlier this year). The alternative is writing &lt;code&gt;session: service() as Session&lt;/code&gt;—a type cast—which is &lt;em&gt;fine&lt;/em&gt; but isn’t particularly idiomatic TypeScript.&lt;/p&gt;
&lt;p&gt;Second, notice that we do have to use a type cast, &lt;code&gt;as Person&lt;/code&gt;, for the &lt;code&gt;savedUser&lt;/code&gt; definition. While many computed property macros and the &lt;code&gt;computed&lt;/code&gt; helper itself can properly infer the type of the resulting computed property, macros which accept nested keys do not and cannot. Thus, &lt;code&gt;bool&lt;/code&gt; can resolve its type to a &lt;code&gt;boolean&lt;/code&gt;, but &lt;code&gt;readOnly&lt;/code&gt; or &lt;code&gt;alias&lt;/code&gt; have to resolve their type as &lt;code&gt;any&lt;/code&gt;. The value passed to them could be a strangely shaped string key on the local object (&lt;code&gt;['like.a.path']: true&lt;/code&gt;) or an actual path through multiple objects. (This is the same limitation that means we cannot do nested &lt;code&gt;get&lt;/code&gt; lookups.)&lt;/p&gt;
&lt;p&gt;Third, as I noted even when we were doing this the &lt;em&gt;wrong&lt;/em&gt; way, with class field assignment, we need to explicitly specify the type of &lt;code&gt;this&lt;/code&gt; for callback passed in to define the computed properties. In the context of a &lt;code&gt;.extend()&lt;/code&gt; invocation, though, this sometimes falls down. You’ll see an error like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‘AnExample’ is referenced directly or indirectly in its own base expression.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This doesn’t happen for &lt;em&gt;all&lt;/em&gt; computed properties, but it happens often enough to be very annoying—and it &lt;em&gt;always&lt;/em&gt; happens with Ember Concurrency tasks. (More on this &lt;a href="#ember-concurrency"&gt;below&lt;/a&gt;.) This problem was actually the original motivation for my experimentation with assigning computed properties to class fields.&lt;/p&gt;
&lt;p&gt;This set of problems with defining computed properties and injections in an &lt;code&gt;.extend()&lt;/code&gt; invocation is a major motivator for my team in eagerly adopting decorators.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="decorators" class="level2"&gt;
&lt;h2&gt;Decorators&lt;/h2&gt;
&lt;p&gt;The cleaner, but currently still experimental, way to do this is to use Ember Decorators.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; To use these, you should run &lt;code&gt;ember install ember-decorators&lt;/code&gt; and then set the &lt;code&gt;experimentalDecorators&lt;/code&gt; compiler option to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you’ve installed the decorators package, you can update your component. In general, the imports match exactly to the Ember module imports, just with &lt;code&gt;@ember-decorators&lt;/code&gt; as the top-level package rather than &lt;code&gt;@ember&lt;/code&gt;. Here’s how our component looks using decorators:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import { action, computed } from &amp;#39;@ember-decorators/object&amp;#39;;
import { alias, bool } from &amp;#39;@ember-decorators/object/computed&amp;#39;;
import { service } from &amp;#39;@ember-decorators/service&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model!: Person;     // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  @service session: Session;

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  @computed(&amp;#39;model.firstName&amp;#39;)
  get fromModel(): string {
    return `My name is ${this.model.firstName}`;
  }

  @computed(&amp;#39;aString&amp;#39;)
  get aComputed(): number {
    return this.aString.length;
  }

  @bool(&amp;#39;session.user&amp;#39;) isLoggedIn: boolean;
  @alias(&amp;#39;session.user&amp;#39;) savedUser: Person;

  @action
  addToCollection(this: AnExample, value: string) {
    this.set(&amp;#39;aCollection&amp;#39;, this.aCollection.concat(value));
  }

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.aCollection.includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, this.aCollection.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, notice that using decorators switches us to using actual &lt;abbr&gt;ES5&lt;/abbr&gt; getters. This is &lt;em&gt;exactly&lt;/em&gt; the same thing that &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0281-es5-getters.md" title="RFC #0281"&gt;&lt;abbr&gt;RFC&lt;/abbr&gt; #0281&lt;/a&gt; specified, and which was implemented for Ember’s traditional computed property and injection functions in Ember 3.1 to unlock . What’s extra nice, though, is that decorators are backwards compatible &lt;a href="http://ember-decorators.github.io/ember-decorators/latest/docs/stability-and-support#ember-support"&gt;all the way to Ember 1.11&lt;/a&gt;. (You won’t get the &lt;abbr&gt;ES5&lt;/abbr&gt; getters on versions prior to to Ember 3.1—there the decorators &lt;em&gt;just&lt;/em&gt; install things on the prototype—but you will at least get the correct behavior.)&lt;/p&gt;
&lt;p&gt;Second, note that we don’t get type inference for the computed property macros like &lt;code&gt;@bool&lt;/code&gt; here. That’s because decorators are not currently allowed to modify the &lt;em&gt;type&lt;/em&gt; of the thing they’re decorating from TypeScript’s perspective. Now, decorators can—and &lt;em&gt;do&lt;/em&gt;!—modify the type of the thing they decorate at runtime; it’s just that &lt;abbr&gt;TS&lt;/abbr&gt; doesn’t yet capture that. This means that &lt;em&gt;all&lt;/em&gt; decorated fields will still require type annotations, not just a subset as in the &lt;code&gt;.extend()&lt;/code&gt; world. It’s annoying—especially in the case of things like &lt;code&gt;@bool&lt;/code&gt;, where it &lt;em&gt;really&lt;/em&gt; seems like we ought to be able to just tell TypeScript that this means the thing is a boolean rather than writing &lt;code&gt;@bool('dependentKey') someProp: boolean&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This leads us to our final point to notice: we also need the type annotations for service (or controller) injections—but we do &lt;em&gt;not&lt;/em&gt; need the string keys for them service injections.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; The net of this is that the injections themselves roughly equally ergonomic.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;// the old way
session: service(&amp;#39;session&amp;#39;),
// the new way
@service session: Session;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ember-concurrency" class="level2"&gt;
&lt;h2&gt;Ember Concurrency&lt;/h2&gt;
&lt;p&gt;One other thing I need to draw your attention to here: I and a few others have taken a stab at writing type definitions for &lt;a href="http://ember-concurrency.com/docs/introduction/"&gt;Ember Concurrency&lt;/a&gt;. Unfortunately, typings that &lt;em&gt;type-check&lt;/em&gt; run smack dab into the fact that as of 3.1 that style doesn’t &lt;em&gt;work&lt;/em&gt;; and typings that &lt;em&gt;work&lt;/em&gt; cannot be type-checked at present. You can’t even use decorators to push your way to a solution. Nor is there a lot of hope on the horizon for this reality to change.&lt;/p&gt;
&lt;p&gt;You can see some of the discussion as to &lt;em&gt;why&lt;/em&gt; &lt;a href="https://github.com/machty/ember-concurrency/pull/209#issuecomment-403246551"&gt;starting here&lt;/a&gt; in one pull request for them; it all gets back to the limitation I mentioned above: TypeScript doesn’t let you change the types of things with decorators. Unfortunately, there’s no reason to believe that will change anytime soon. This is a &lt;em&gt;fundamental&lt;/em&gt; conflict between the Ember Object model and modern JavaScript—and specifically TypeScript’s understanding of it.&lt;/p&gt;
&lt;p&gt;I am still mulling over solutions to that problem (as are others), and we’ll be continuing to work on this idea in &lt;a href="https://embercommunity.slack.com/messages/C2F8Q3SK1"&gt;#-topic-typescript&lt;/a&gt; in the Ember Community Slack (and publicizing any good ideas we come up with there in a searchable location, of course). For today, the best thing you can do is explicitly set the &lt;code&gt;this&lt;/code&gt; type to &lt;code&gt;any&lt;/code&gt; for the task property generator function callback, and use type casts internally if you look up services or other properties from the containing object.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary-mea-culpa" class="level2"&gt;
&lt;h2&gt;Summary: &lt;em&gt;mea culpa&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Sorry again to everyone I misled along the way with my earlier, very wrong advice! Hopefully this helps clear up the state of things and will help you keep from falling into this tar pit going forward!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I don’t feel too bad about having gotten in wrong: no one who read the posts noticed the problem at the time, and it was subtle and easy to miss… because, at the time, everything actually &lt;em&gt;worked&lt;/em&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It’s experimental because decorators are still only at Stage 2 in the &lt;abbr&gt;TC39&lt;/abbr&gt; process. They &lt;em&gt;may&lt;/em&gt; advance at this month’s meeting.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;If you’re using a non-default name, like &lt;code&gt;specialSession&lt;/code&gt;, for the name of the property, the usual rules apply for injections. In that case, you’d write the injection like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { service } from &amp;#39;@ember-decorators/service&amp;#39;;
import Session from &amp;#39;my-app/services/session&amp;#39;;

export default class AnExample extends Component {
  @service(&amp;#39;session&amp;#39;) specialSession: Session;
}&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Files do get an extra import in the decorator version… but as it happens, I’m more than okay with that; I’d actually &lt;em&gt;prefer&lt;/em&gt; explicit imports of dependencies personally.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>Continuing to Reflect on My Internet Presence</title><link href="http://www.chriskrycho.com/2018/continuing-to-reflect-on-my-internet-presence.html" rel="alternate"></link><published>2018-06-25T06:15:00-04:00</published><updated>2018-06-25T06:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-06-25:/2018/continuing-to-reflect-on-my-internet-presence.html</id><summary type="html">Still using Pinboard for what it is good at, but also thinking about this blog itself. Yes, again. You aren’t surprised by this, are you? So yes: more thoughts on link-blogging, commentary, and the blog software I want to exist. (No, neither WordPress nor Ghost fit the bill for me.)
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;A quick note: I drafted this back in June, but forgot to actually publish it!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I find that I’m always reflecting on the shape I want my internet presence to take. Over the last month, in particular, I’ve been thinking about the kind of “link-blogging” and commentary-on-articles-I’ve-read that I’ve experimented with pushing into Pinboard for the last &lt;a href="https://www.chriskrycho.com/2017/pick-the-right-tool-for-the-job.html"&gt;year and some change&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the one hand, I’ve found that Pinboard is &lt;em&gt;great&lt;/em&gt; for two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;having an easy place to look up articles I’ve read but can’t necessarily remember the name of off the top of my head&lt;/li&gt;
&lt;li&gt;being &lt;em&gt;a&lt;/em&gt; place with its own &lt;abbr&gt;RSS&lt;/abbr&gt; feed of that content, which is social-network-like in some ways but using open web tech like &lt;abbr&gt;RSS&lt;/abbr&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what it isn’t is &lt;em&gt;integrated with my own site&lt;/em&gt;, or particularly easily discoverable &lt;em&gt;from&lt;/em&gt; my site. Adding a link to my public Pinboard feed would help, perhaps, but you wouldn’t know what I use it &lt;em&gt;for&lt;/em&gt; from seeing that link.&lt;/p&gt;
&lt;p&gt;The thing is, I want this material here on this site. There remain two blockers to me there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ease of publishing&lt;/li&gt;
&lt;li&gt;site design and structure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the most part, I am happy enough with a static site generator setup. However, for this specific kind of use, I wish for a web front-end to my website (or, honestly, an easy way to integrate &lt;a href="https://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt; with it). The options which exist in that general space—WordPress and Ghost—both have their upsides, but also a great many downsides, and I find that I have no interest in using either.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;You might find that an odd commitment; here’s an aside on why.&lt;/p&gt;
&lt;p&gt;Our &lt;a href="https://krycho.com"&gt;family blog&lt;/a&gt; is a Ghost install, and the previous iteration of this site ran on WordPress. Ghost is &lt;em&gt;fine&lt;/em&gt;, and for many setups it’s actually really good. For my fairly complex set of publishing requirements, it unfortunately doesn’t really do the trick. Some of those requirements (like integration with citation-management tooling) are &lt;em&gt;currently&lt;/em&gt; less pressing, but I don’t count on that being the case in the long term.&lt;/p&gt;
&lt;p&gt;That said, one possible alternative here is simply to cross that bridge if or when I come to it and lean on the somewhat simpler tools that &lt;em&gt;do&lt;/em&gt; meet my needs for today. If I did that, it would certainly be with Ghost, because WordPress feels to me the same way Windows feels to me: technically very competent, but impossibly frustrating to use. (That’s not insulting either of the two; it’s a statement of my very—overly, perhaps!—specific aesthetic tastes and my corresponding—admittedly irrational!—response to the experience of using Windows or WordPress. Maybe it’s just the ‘W’s that start the names?)&lt;/p&gt;
&lt;p&gt;This is one reason I’ve seriously considered figuring out how to make my &lt;a href="https://github.com/chriskrycho/lightning-rs"&gt;long-on-hold site generator&lt;/a&gt; actually be a hybrid: never dynamically generating content, but with an &lt;abbr&gt;API&lt;/abbr&gt; to enable programmatic access, so that I &lt;em&gt;can&lt;/em&gt; put a web or app front end on it. (Existing solutions in that space, like &lt;a href="https://www.netlifycms.org"&gt;Netlify CMS&lt;/a&gt; or &lt;a href="https://forestry.io/"&gt;forestry.io&lt;/a&gt;, are really good, but don’t quite support everything I have historically committed to needing. They also don’t have anything like an iOS share sheet!)&lt;/p&gt;
&lt;p&gt;The problem, of course, is that I’m not yet ready to spend my limited time building out my long-planned and long-delayed personal website generator tool. In short, I’m caught in a catch-22 of my own making.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In any case, I want to figure out a flow for sharing those kinds of notes-on-articles that works better for getting it onto my blog, rather than caught in the mostly-invisible space that is my Pinboard. I need a refreshed site design to support it effectively. I need different &lt;em&gt;tools&lt;/em&gt; to support that flow effectively. Which means I’m not going to end up doing it tomorrow or anything.&lt;/p&gt;
&lt;p&gt;I’ll get to it eventually. Maybe. Hopefully. And in the meantime I’ll do one extra step when I see something worth linking, and copy it into a Ulysses document that I can publish shortly thereafter.&lt;/p&gt;
&lt;p&gt;This is where every nerd ends up with their blogging software, I think: in a pit of good-enough-to-get-by but not-actually-satisfying. (But I’m not helping myself with how persnickety I am about these things.)&lt;/p&gt;
</content><category term="pinboard"></category><category term="writing"></category><category term="blogging"></category></entry><entry><title>Client-Side Ideas for Server-Side Apps</title><link href="http://www.chriskrycho.com/2018/client-side-ideas-for-server-side-apps.html" rel="alternate"></link><published>2018-06-07T16:00:00-04:00</published><updated>2018-06-07T16:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-06-07:/2018/client-side-ideas-for-server-side-apps.html</id><summary type="html">It turns out that a bunch of the tools we've built for front-end web development are really, really nice ways to build UI. Who could have guessed, from all the kvetching you hear about them?
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;A quick note: I drafted this back in June, but forgot to actually publish it!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I’ve been working on the design of a particular website I maintain (not this one; keep your eyes open), and besides the fact that I have learned a &lt;em&gt;lot&lt;/em&gt; about web design in general in the years since I originally built that site, I discovered that I desperately want to use a component-drive model for developing sites on the client.&lt;/p&gt;
&lt;p&gt;In my day job, I’m used to breaking down my application into discrete components with their own responsibilities. I’ve gotten spoiled by the component-driven model that dominates the front-end web development world now. (My tool of choice is usually Ember, but you’d get the same with React or Vue or whatever else.) And on the server development side, I’m desperately missing those.&lt;/p&gt;
&lt;p&gt;I’m using &lt;a href="https://getpelican.com"&gt;Pelican&lt;/a&gt; for this particular site because that’s what it’s been built on for the past few years and I have no desire to change it at the moment. And that means using &lt;a href="http://jinja.pocoo.org"&gt;Jinja2&lt;/a&gt; for templating. And Jinja2 has no notion of &lt;em&gt;components&lt;/em&gt;. Partials, yes—with all the implicit context you have to carry around in your head. It has a few different ways you can sort of hack your way to something sort of vaguely component-like using some of its &lt;a href="http://jinja.pocoo.org/docs/2.10/templates/#block-assignments"&gt;fancy features&lt;/a&gt;. But without any kind of “argument” or “return value”/yielding (&lt;em&gt;a la&lt;/em&gt; the ideas I discussed in &lt;a href="https://www.chriskrycho.com/2018/higher-order-components-in-emberjs.html" title="Higher-Order Components in Ember.js"&gt;this post&lt;/a&gt;). All of the solutions available in &lt;em&gt;any&lt;/em&gt; of these server-side frameworks for breaking up pages are &lt;em&gt;partial&lt;/em&gt;-style: which means they’re basically just dumb string includes!&lt;/p&gt;
&lt;p&gt;There’s nothing like the way I solve this problem in an Ember app every single day: &lt;em&gt;components&lt;/em&gt;. There’s no particular reason that the same component-based approach that has flourished on the client &lt;em&gt;can’t&lt;/em&gt; be done on the client side. It just… hasn’t, mostly. Which is kind of weird.&lt;/p&gt;
&lt;p&gt;Until this week, projects like &lt;a href="https://github.com/gatsbyjs/gatsby"&gt;Gatsby&lt;/a&gt; in the React world made no sense to me at all. It seemed like using a sledgehammer to kill a spider. But after this week, I’m suddenly &lt;em&gt;very&lt;/em&gt; interested in it—and I might in fact experiment with some server-side component-driven approaches to this at some point in the future—because a couple of days mucking with Jinja2 has me desperately wishing for a good old Ember or React component.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As an aside: people talk about client-side development being overly complicated. I know some of what they mean, but the truth is that my experience hacking on this over the last week has actually served to remind me of just how &lt;em&gt;great&lt;/em&gt; the tooling is in this world.&lt;/p&gt;
&lt;p&gt;It’s true that there’s more complexity in many ways to building things with Ember or React or whatever other &lt;abbr&gt;JS&lt;/abbr&gt;-powered client-side framework than with plain-old &lt;abbr&gt;HTML&lt;/abbr&gt;. It’s more complex even than with something like Jinja2 or Liquid or whatever other server-side templating language you use. There’s good reason for that complexity, though: it comes with &lt;em&gt;more power&lt;/em&gt; and &lt;em&gt;more expressiveness&lt;/em&gt;. And the thing many critiquing the front-end seem to miss is that once you are used to having that power and expressiveness, it’s &lt;em&gt;really&lt;/em&gt; painful to go back to not having it.&lt;/p&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="web design"></category></entry><entry><title>Good Arguments</title><link href="http://www.chriskrycho.com/2018/good-arguments.html" rel="alternate"></link><published>2018-06-04T10:30:00-04:00</published><updated>2018-06-04T10:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-06-04:/2018/good-arguments.html</id><summary type="html">I’m reading Shannon Vallor’s Technology and the Virtues—agreeing with a lot, disagreeing with a lot, and learning as much from the disagreements as the agreement. Good arguments are invaluable for clear thinking and the pursuit of truth.
</summary><content type="html">&lt;p&gt;I’m working my way slowly and carefully through Shannon Vallor’s &lt;cite&gt;Technology and the Virtues&lt;/cite&gt; and as I put it to my friend and partner-in-&lt;a href="https://winningslowly.org"&gt;Winning Slowly&lt;/a&gt; Stephen Carradini: I find that I &lt;em&gt;very often&lt;/em&gt; agree with Vallor on her conclusions while &lt;em&gt;equally often&lt;/em&gt; disagreeing with her on how she gets there. It makes for very interesting reading, certainly; and so far, at least, I can pretty heartily commend the book despite my disagreements.&lt;/p&gt;
&lt;p&gt;And the reason why I can so heartily recommend it is what I’m more interested in at the moment. Vallor is a really excellent &lt;em&gt;conversation partner&lt;/em&gt;. Not all writers are. But &lt;cite&gt;Technology and the Virtues&lt;/cite&gt; is the kind of book that is sufficiently well-written and well-argued&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; that the very act of disagreeing with it—if you take the time, anyway—produces light rather than merely heat.&lt;/p&gt;
&lt;p&gt;A good conversation partner prompts you to think hard about the differences between her position and your own. She pushes you to articulate &lt;em&gt;why&lt;/em&gt; you disagree, and whether your disagreements are well-founded, and if not to see if you &lt;em&gt;can&lt;/em&gt; provide a good foundation for them. Vallor has this and in spades. I have pages of notes both agreeing with many of her points and also articulating why—as a &lt;em&gt;Christian&lt;/em&gt; interested in virtue ethics—I differ sharply with her in certain areas.&lt;/p&gt;
&lt;p&gt;What makes all of this valuable is that these are &lt;em&gt;illuminating&lt;/em&gt; differences. I have a better sense of some of the gaps at least in my own education in Christian ethical systems.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; I have a better sense of the space in which Stephen and I are playing with Winning Slowly &lt;a href="https://winningslowly.org/season-6.html" title="Rejecting the Inevitable Future"&gt;Season 6&lt;/a&gt;. I have clarified my own view of the relationship of virtue and wisdom and law in meaningful ways in just the short time I’ve been working through this book—and I can feel the gears turning still in the background; there is a lot more sharpening to come from this.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When people talk about the benefits of reading those you disagree with, this is what they mean. The best interlocutors are those who push you like this—whether you agree or disagree, they make you work harder and think more sharply. Good arguments are invaluable for clear thinking and the pursuit of truth.&lt;/p&gt;
&lt;p&gt;One other thing this points at is that good thinking often begets good thinking. I actively &lt;em&gt;want&lt;/em&gt; to think well about these things, but I also am unable to do as well in a vacuum as I can with the help of others who are thinking hard and well about them—even, and sometimes &lt;em&gt;especially&lt;/em&gt;, when we disagree.&lt;/p&gt;
&lt;p&gt;One of the reasons I blog is as an attempt to think well out loud. I cannot make others think well no matter how well I think; and I certainly do not presume that my own thinking &lt;em&gt;is&lt;/em&gt; always thinking well. But the act of writing, and writing publicly, is an attempt to do the kind of work (on however small a scale) that I see people like Vallor and &lt;a href="http://blog.ayjay.org" title="Snakes and Ladders"&gt;Alan Jacobs&lt;/a&gt; and &lt;a href="https://stratechery.com"&gt;Ben Thompson&lt;/a&gt; doing in their own spaces. If I can do even a fraction so well as they are in my own space, perhaps I too can help others think well. At the least, I know I am learning to think better along the way, and that is no small thing.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;These are different! Complementary, but different.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;See &lt;a href="https://www.chriskrycho.com/2018/the-chinese-room-argument.html#fn2"&gt;footnote 2 on an earlier blog post&lt;/a&gt; for a comment on why I assume the problem is likely with &lt;em&gt;me&lt;/em&gt;. It’s probable that there &lt;em&gt;is&lt;/em&gt; quite a bit of specifically Christian reflection on many of these ideas; I simply haven’t encountered it. This may also say some things about the specifics of my theological education; I think it does and may return to that in a later post, but that’s neither here nor there.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;A preview:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Vallor sees virtue ethics as incommensurable with deontological accounts of ethics; I think the two are meant to complement one another. The structure of Biblical ethics is both deontological and virtuous. In particular, my read of the Wisdom literature (as well as the New Testament account of righteous life which builds upon it) is that the Biblical account sees virtue (or righteousness) and wisdom as the fruit—and I choose that word intentionally—of life lived under God’s enduring law. The moral precepts do not change; their specific applications are plurifold, and the shape of Biblical ethical reflection itself is likewise wide-ranging. Put more simply: life lived under God’s law in his power &lt;em&gt;yields&lt;/em&gt; wisdom. This is not so different from Vallor’s picture of the virtue ethics of Aristotle, Confucius, or Buddha—save that wisdom in the Biblical account does not &lt;em&gt;supercede&lt;/em&gt; God’s law; it comes to rightly apprehend &lt;em&gt;how&lt;/em&gt; God’s ways are rightly applied in every circumstance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vallor rejects the notion of any singular account of a human &lt;em&gt;telos&lt;/em&gt; or specific nature (other than what we have been given by evolution) that is capable of grounding the pursuit of virtue across all cultures. She aims for a kind of ethical pluralism that can account for the various cultural notions of human nature and &lt;em&gt;telos&lt;/em&gt; without falling into ethical relativism or absolutism. I don’t think her account can actually support this weight, though. By contrast, I think Christianity &lt;em&gt;does&lt;/em&gt; have the resources to support the kind of pluralism she rightly recognizes as necessary because its account of human naature and &lt;em&gt;telos&lt;/em&gt; are rich enough to embrace the goods of many cultures and contexts and wisdom traditions. (That Christianity has not perfectly or even very much at all lived up to this potential is, as Vallor herself notes of her own account of virtue ethics, by no means a defeater for the claim.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is much, &lt;em&gt;much&lt;/em&gt; more to say here, and I will—later!&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="philosophy"></category><category term="ethics"></category></entry><entry><title>Strategies for Maintaining Motivation</title><link href="http://www.chriskrycho.com/2018/strategies-for-maintaining-motivation.html" rel="alternate"></link><published>2018-06-03T11:00:00-04:00</published><updated>2018-06-03T11:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-06-03:/2018/strategies-for-maintaining-motivation.html</id><summary type="html">A thing I’ve been thinking about a bit over the last few weeks is how to sustain motivation as you come into the "this no longer holds any intrinsic interest for me" phase of a project. Here I’m jotting down a couple of the strategies I’ve been taking so far; I’ll probably have another post like this in roughly six months when these particular projects are wrapped up.
</summary><content type="html">&lt;p&gt;A thing I’ve been thinking about a bit over the last few weeks is how to sustain motivation as you come into the “this no longer holds any intrinsic interest for me” phase of a project. I have a couple of these on my plate right now, but I also want to &lt;a href="http://esv.to/col3.23" title="Colossians 3:23"&gt;do my work well&lt;/a&gt;. Here I’m jotting down a couple of the strategies I’ve been taking so far; I’ll probably have another post like this in roughly six months when these particular projects are wrapped up.&lt;/p&gt;
&lt;section id="section" class="level2"&gt;
&lt;h2&gt;– 1. –&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Find related problems you can solve that support the effort or the team, which &lt;em&gt;are&lt;/em&gt; intrinsically interesting.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you keep your eyes open, you can sometimes find problems which don’t &lt;em&gt;directly&lt;/em&gt; advance the project you’re working on, but which both &lt;em&gt;indirectly&lt;/em&gt; advance the project and also give you something to work on when you need a break. In my context, this looks like small but broadly-useful pieces of developer tooling.&lt;/p&gt;
&lt;p&gt;For example: we’re in a spot where we’re spinning up a number of new applications in a given framework and stack. After getting through everything else on my plate this last Friday, I took a couple hours and started putting together a little tool that will make the major part of that process a single command-line invocation. This doesn’t directly advance the project I’m working on. But it &lt;em&gt;will&lt;/em&gt; be useful for our whole team over the next six months.&lt;/p&gt;
&lt;p&gt;Another example here for me is identifying technical initiatives we need, and taking the time to think through how we can accomplish them. These are real problems that we really need to solve, and even if we don’t need them solved &lt;em&gt;today&lt;/em&gt; (because we’re prioritizing other things), there is a lot of value in figuring out we’ll solve them when we &lt;em&gt;do&lt;/em&gt; get to them in a few months.&lt;/p&gt;
&lt;p&gt;Both of those kinds of things can help by giving a sense of accomplishment while simultaneously doing something &lt;em&gt;besides&lt;/em&gt; the main task, but they don’t require huge blocks of time or keep you from getting the main project done. And they &lt;em&gt;do&lt;/em&gt; advance your team or your project in some sense.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="section-1" class="level2"&gt;
&lt;h2&gt;– 2. –&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Find tasks which are &lt;em&gt;totally unrelated&lt;/em&gt; and &lt;em&gt;instrincically interesting&lt;/em&gt;, but which do not keep you from getting your main job done.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is kind of like the previous task except that it may or may not even be related to what you’re working on. I have a couple pieces of technology work that I variously have started and will be starting that are totally unrelated to my main projects. But they’re things that I can go after a bit here and a bit there – the last half hour of a day when my brain is shot, or over lunch, or for a few hours when I’ve finished everything else on my plate.&lt;/p&gt;
&lt;p&gt;These kinds of things help me by serving as a &lt;em&gt;reward&lt;/em&gt; for getting through the stuff I need to get through. They thus provide a kind of extrinsic motivation where my intrinsic motivation has flagged. They also have enough intrinsic interest of their own that I can feel some of that very helpful sense of accomplishing something I care about when I make progress on them.&lt;/p&gt;
&lt;p&gt;It’s important that these things fit the profile I described, though: easy to move forward in small chunks of time, and okay to take a long while to finish. The danger with these–even more than with the first kind of small tasks I suggested–is that they &lt;em&gt;are&lt;/em&gt; so interesting, and you have to make sure you &lt;em&gt;do&lt;/em&gt; still get your regular work done.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="section-2" class="level2"&gt;
&lt;h2&gt;– 3. –&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Find ways to gain a sense of &lt;em&gt;momentum.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This one is in some ways the hardest of these, because it’s just digging in deeper on the slog of the project in question–but it’s also the one that most directly gets you closer to the end of the project. The trick is to find a rhythm where you actually move meaningfully closer to the goal of &lt;em&gt;finishing the project&lt;/em&gt; all the time, while not ending up bogged down in nothing but slogs along the way.&lt;/p&gt;
&lt;p&gt;A big part of this is figuring out how to break up the project into smaller and more tractable pieces, and then alternating the various elements of it in such a way that you can continually feel the satisfaction of finishing things. Over the last two weeks at work, despite some pretty significant frustrations which made it really hard to do this, I came out with more of a sense of momentum than I had even before those frustrations came up–precisely because I actually knocked out the things we aimed to get done in that specific span of time. And we’re in a spot where we’re actually about to go live with the first meaningful chunk of what we’ve been building.&lt;/p&gt;
&lt;p&gt;Keeping that sense of momentum is really important. Even when you’re looking at a 6-month stretch of not-that-interesting a set of work ahead of you, it helps to see yourself chipping away at it and making real progress.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="section-3" class="level2"&gt;
&lt;h2&gt;– 4. –&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Just watch &lt;a href="https://m.youtube.com/watch?v=sl9pTDK8PAk"&gt;this sequence from Doctor Who Series 9&lt;/a&gt; over and over again.&lt;/strong&gt; Or better yet, the whole episode.&lt;/p&gt;
&lt;iframe title="Breaking the Wall (Doctor Who Series 9 Episode 11)" width="560" height="315" src="https://www.youtube.com/embed/sl9pTDK8PAk?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;blockquote&gt;
&lt;p&gt;Personally, I think that’s a hell of a bird.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
</content><category term="productivity"></category><category term="work"></category></entry><entry><title>Going Dark For a Week</title><link href="http://www.chriskrycho.com/2018/going-dark-for-a-week.html" rel="alternate"></link><published>2018-06-02T20:45:00-04:00</published><updated>2018-06-02T20:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-06-02:/2018/going-dark-for-a-week.html</id><summary type="html">Just a quick note: I’m signing out of all social media until June 11. You can email me if you need something urgently. Mental silence is needful!
</summary><content type="html">&lt;p&gt;Just a quick note: I’m signing out of all social media until June 11. I’m on vacation from work for a week, and I’m taking the opportunity to enjoy the mental silence of not being on Twitter, &lt;em&gt;any&lt;/em&gt; Slack instance, etc. (I may or may not be posting here along the way, but my feeling right now is that I &lt;em&gt;won’t&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;Feel free to &lt;a href="mailto:hello@chriskrycho.com"&gt;send me an email&lt;/a&gt; if you have something come up that needs my attention with any urgency; otherwise, I’ll be back in a week and a half.&lt;/p&gt;
</content></entry><entry><title>Sum Type Constructors in TypeScript</title><link href="http://www.chriskrycho.com/2018/sum-type-constructors-in-typescript.html" rel="alternate"></link><published>2018-05-31T07:00:00-04:00</published><updated>2018-05-31T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-31:/2018/sum-type-constructors-in-typescript.html</id><summary type="html">You can build the same kind of sophisticated discriminated union types in TypeScript as you'd get in Elm or F♯. Kind of. With a lot of work. (Here’s how.)</summary><content type="html">&lt;p&gt;A pretty common pattern I’ve seen is to have three basic states for some kind of &lt;abbr&gt;HTTP&lt;/abbr&gt; request: &lt;em&gt;loading&lt;/em&gt;, &lt;em&gt;failure&lt;/em&gt;, and &lt;em&gt;success&lt;/em&gt;. Since each of these has its own associated date, it’s a really good fit for a discriminated union or sum type. In a language like Elm (or F&lt;sup&gt;♯&lt;/sup&gt; or Haskell or PureScript or…) you’d write that basically like this:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;module Fetch exposing (State)

type alias HTTPStatusCode = Int
type alias ErrorData = { code: HTTPStatusCode, reason: String }

type State a
    = Loading
    | Failure ErrorData
    | Success a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because I find that pattern extremely helpful, I’ve at times gone out of my way to replicate it in TypeScript. And what you get is… verbose. It’s a necessary evil, given what TypeScript is doing (layering on top of JavaScript), and so much so that I wouldn’t actually recommend this unless you’re already doing this kind of programming a lot and find it pretty natural. If you are, though, here’s how you get the equivalent of those four lines of Elm in TypeScript:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type HttpStatusCode = number;

export enum Type { Loading, Failure, Success }

export class Loading {
  readonly type: Type.Loading = Type.Loading;

  static new() {
    return new Loading();
  }
}

type ErrorData = { code: HttpStatusCode, reason: string };

export class Failure {
  readonly type: Type.Failure = Type.Failure;
  constructor(readonly value: ErrorData) {}

  static new(value: ErrorData) {
    return new Failure(value);
  }
}

export class Success&amp;lt;T&amp;gt; {
  readonly type: Type.Success = Type.Success;
  constructor(readonly value: T) {}

  static new&amp;lt;A&amp;gt;(value: A) {
    return new Success(value);
  }
}

export type FetchState&amp;lt;T&amp;gt; = Loading | Failure | Success&amp;lt;T&amp;gt;;
export const FetchState = {
  Type,
  Loading,
  Failure,
  Success,
};

export default FetchState;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s a &lt;em&gt;lot&lt;/em&gt; more code to do the same thing. Even if you dropped the static constructors—which you really don’t want to do, because then you can’t use them in a functional style but &lt;em&gt;have&lt;/em&gt; to use &lt;code&gt;new Loading()&lt;/code&gt; or whatever to construct them.&lt;/p&gt;
&lt;p&gt;You can make this work. And I do. And honestly, it’s amazing that TypeScript can do this at all—a real testament to the sophistication of the TypeScript type system and the ingenuity that has gone into it.&lt;/p&gt;
&lt;p&gt;But have I mentioned recently that I’d &lt;em&gt;really&lt;/em&gt; prefer to be writing something like F&lt;sup&gt;♯&lt;/sup&gt; or Elm than TypeScript?&lt;/p&gt;
</content><category term="elm"></category><category term="typescript"></category><category term="programming languages"></category></entry><entry><title>“Life Hacks” Are Dumb</title><link href="http://www.chriskrycho.com/2018/life-hacks-are-dumb.html" rel="alternate"></link><published>2018-05-30T07:00:00-04:00</published><updated>2018-05-30T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-30:/2018/life-hacks-are-dumb.html</id><summary type="html">The anthropology implicit in the phrase “life hacking” is dumb. What we need is wisdom.</summary><content type="html">&lt;p&gt;I don’t know where the idea of “life hacking” first appeared, or who first coined the term, and frankly I don’t much care about the details. The phrase itself says enough. It is the stereotypical and often self-caricaturing ethos of Silicon Valley: the rejection of what has come before, only to discover/invent/disrupt it as if it were wholly new, and proclaim the glories of tech startup culture.&lt;/p&gt;
&lt;p&gt;We did once have a word for the idea of being attentive to your own strengths and weaknesses, and disciplining yourself in response to this so you could accomplish the things that are truly important. We called it &lt;em&gt;wisdom&lt;/em&gt;, and the pursuit of it was considered—in some circles, anyway—one of the great aims of human existence. All the great philosophical and religious traditions have had something to say about it. Many of them even find considerable concord on the sorts of practical wisdom for accomplishing goals that is an essential part of human flourishing, even as they disagree sharply about what constitutes that human flourishing!&lt;/p&gt;
&lt;p&gt;But look to the tech startup scene and “wisdom” is not a word to be found in that vernacular. Instead we have “life hacks.” The anthropology here may be implicit, but it’s also obvious, and very dumb. We are not machines to be hacked. We are people, who ought to seek the good—wisely.&lt;/p&gt;
</content><category term="wisdom"></category><category term="culture"></category><category term="life hacks"></category></entry><entry><title>#EmberJS2018, Part 4</title><link href="http://www.chriskrycho.com/2018/emberjs2018-part-4.html" rel="alternate"></link><published>2018-05-29T07:45:00-04:00</published><updated>2018-05-29T07:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-29:/2018/emberjs2018-part-4.html</id><summary type="html">We need to shift from a posture of defensiveness about Ember.js to one of embracing the ecosystem, and embracing our role in the ecosystem.</summary><content type="html">&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-3.html"&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Over the last few weeks, I’ve talked about a few big ideas that I think the Ember.js community should go after in 2018 which will help the framework excel over the next few years. This last one (like Part 3 before it) is more a &lt;em&gt;culture shift&lt;/em&gt; than a matter of &lt;em&gt;things to build&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We need to shift from a posture of defensiveness about Ember.js to one of embracing the ecosystem, and embracing our role in the ecosystem.&lt;/p&gt;
&lt;p&gt;It’s easy to end up in an us-vs.-them mentality when looking at different libraries and frameworks. It’s doubly easy to go there when you often hear “Isn’t Ember dead?” or variations on that theme. We should avoid that way of thinking anyway. And there are three big pieces to this: &lt;em&gt;contributing outwards&lt;/em&gt;, &lt;em&gt;smoothing the paths into Ember&lt;/em&gt; from other ecosystems, and &lt;em&gt;embracing the rest of the ecosystem&lt;/em&gt;.&lt;/p&gt;
&lt;section id="contributing-outwards" class="level3"&gt;
&lt;h3&gt;Contributing outwards&lt;/h3&gt;
&lt;p&gt;There is genuinely great stuff happening all over the place in the front-end, and many of the things we love about working with Ember today have come directly out of e.g. React—hello, “data-down-actions-up”! The same is true in reverse: Ember has contributed many important ideas to the broader front-end ecosystem, from its early emphasis on rigorously linking URLs and application state to helping pioneer and popularize the use of good command line tooling, to more recent emphasis on &lt;em&gt;compilation&lt;/em&gt; as a way of solving certain classes of problems.&lt;/p&gt;
&lt;p&gt;So as we build all of these things, one of the best things to do—and, I believe, one of the ways we help Ember grow!—is think about how our work can benefit the larger ecosystem. When you build a library, you should consider whether there are parts of it that &lt;em&gt;don’t&lt;/em&gt; have to be Ember specific. For example, a colleague and I recently built out the foundation of a solution for well-rationalized form-handling.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; We build it in two pieces, though: a core library in TypeScript that will work as well in Vue or React as in Ember, and an Ember component library that consumes that core functionality.&lt;/p&gt;
&lt;p&gt;The more we can take that tack in &lt;em&gt;general&lt;/em&gt;, the better. It’s the first piece of making the gap between people’s experience in other parts of the front-end ecosystem and the Ember part smaller. Ember will seem much more interesting if people find themselves &lt;em&gt;often&lt;/em&gt; getting value out of things we’ve built.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="smoothing-the-paths-in" class="level3"&gt;
&lt;h3&gt;Smoothing the paths in&lt;/h3&gt;
&lt;p&gt;The flip side of this is figuring out ways to make it easier for people coming &lt;em&gt;into&lt;/em&gt; Ember.js to map patterns from their existing experience onto the framework’s tools and patterns. The simple reality is that there are far, far more developers familiar with React, Angular, and Vue than with modern Ember.js. Ember genuinely has a lot to offer there, but we need to make it easier for people to see that value and to recognize how it’s a lot like the good parts of what they already know!&lt;/p&gt;
&lt;p&gt;This is primarily a communications effort; it means changes to the docs and to the homepage, but also to what we do in blog posts and tutorials and talks as a community!&lt;/p&gt;
&lt;p&gt;At the highest level, I cannot recommend strongly enough the model suggested by Chris Garrett in &lt;a href="https://medium.com/@pzuraq/emberjs-2018-ember-as-a-component-service-framework-2e49492734f1"&gt;his #EmberJS2018 post&lt;/a&gt;: treat Ember.js (both in the docs and also in our presentations and communications about it) as a &lt;em&gt;component-service&lt;/em&gt; framework. This not only maps more easily to patterns people know from other communities, it has the really important effect of demystifying a lot of the “magic” that seems perplexing in the framework, especially around Ember Data—which is, after all, just a service you can inject!&lt;/p&gt;
&lt;p&gt;When we write blog posts, we can accomplish a lot of this simply by being aware of the rest of the ecosystem and making analogies there. You can see an example of how I’ve started trying to do this in my recent blog post on &lt;a href="http://www.chriskrycho.com/2018/higher-order-components-in-emberjs.html"&gt;higher-order components in Ember.js&lt;/a&gt;. It was just one little line:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In React, the [higher-order components] pattern as a whole is often known as the &lt;code&gt;renderProps&lt;/code&gt; pattern, for the way you most often accomplish it. It’s all the same idea, though!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s not a lot of extra work, but it means that if someone searches for “renderProps Ember.js” there now exists a blog post which will help someone map there existing knowledge over! I wasn’t writing a “how to do React renderProps in Ember” post—but I still smoothed the path in just a little bit. We should be doing that everywhere we can. It’s usually not a lot of effort to make those kinds of moves in talks or blog posts, but the yield is high: Ember stops being some super weird foreign entity and starts looking like a variation on a theme.&lt;/p&gt;
&lt;p&gt;There is also a much larger effort we &lt;em&gt;do&lt;/em&gt; need to undertake to make that story clearer on the home page and in the documentation—an effort that I know is already very much in consideration from chatting with the really amazing crew in &lt;code&gt;#-team-learning&lt;/code&gt; on Slack. In the &lt;strong&gt;how you can help&lt;/strong&gt; bucket: seriously please go into that channel and start chipping away at small tasks! There’s (&lt;a href="https://m.youtube.com/watch?v=Abu2BNixXak" title="“Becoming a Contributor”, my Rust Belt Rust 2017 talk"&gt;always!&lt;/a&gt;) way more work to be done than hands to do it.&lt;/p&gt;
&lt;p&gt;I think this also means prioritizing technical work that eases this. The sooner we can land the Glimmer component model, the better. The sooner we can hash out a more cogent story on routes and controllers and components, the better. The sooner we can make “npm-install-your-way-to-Ember” an actually viable strategy, the better. Because each of those things makes Ember dramatically more accessible to people working in other ecosystems today; each lowers the barrier to entry in some substantial way; and the combination of them all makes it far more viable for someone to &lt;em&gt;try&lt;/em&gt; Ember in an existing application.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="embracing-the-rest-of-the-ecosystem" class="level3"&gt;
&lt;h3&gt;Embracing the rest of the ecosystem&lt;/h3&gt;
&lt;p&gt;The final piece of this is actively embracing the best parts of the rest of the ecosystem.&lt;/p&gt;
&lt;p&gt;We as a community need to avoid defensiveness and recognize that there’s a &lt;em&gt;lot&lt;/em&gt; of good in the rest of the front-end space. I understand how it can be easy to feel defensive. Being dismissed, having people be surprised that the project even still exists, etc. gets really old after a while. But however reasonable that defensiveness is, it’s ultimately counterproductive. It makes us hold onto things we don’t need to hold onto, and it makes us ignore things that might benefit us, and as a result it can make us &lt;em&gt;needlessly weird&lt;/em&gt; technically.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Needless weirdness&lt;/em&gt; is an important idea I’d love for us to keep in mind. Any time you’re willing to move more slowly, to let the “new shiny” bake for a while to see whether it’s genuinely worth investing in, you’re going to seem weird. Likewise when you strongly embrace stability, in a broader ecosystem which hasn’t. Likewise when you value convention over configuration, in a broader ecosystem which hasn’t. But it’s important to be able to distinguish between &lt;em&gt;needful&lt;/em&gt; and &lt;em&gt;needless&lt;/em&gt; weirdness.&lt;/p&gt;
&lt;p&gt;We should have regular conversations as a community—through &lt;abbr title="request for comments"&gt;RFC&lt;/abbr&gt;s, through forum threads, through blog post arguments, etc.—about what’s &lt;em&gt;needful&lt;/em&gt; weirdness, and what has become &lt;em&gt;needless&lt;/em&gt; weirdness. (Because which weird things are needful change over time!) We should gleefully embrace the needful weirdness. But we should equally gleefully drop the needless weirdness.&lt;/p&gt;
&lt;p&gt;What makes Ember special is, by and large, &lt;em&gt;not&lt;/em&gt; the specific technical implementations we’ve landed on.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; What makes Ember valuable is having a coherent top-to-bottom story and a rich community with a commitment to aggressively seeking out shared solutions, and an even deeper commitment to providing good migration paths forward when we change things.&lt;/p&gt;
&lt;p&gt;But here’s the thing: those values are increasingly (if slowly) being embraced &lt;em&gt;outside&lt;/em&gt; the Ember ecosystem as well. Ember can contribute and even lead in many ways here—but only if we start actively embracing the good of other parts of the front-end ecosystem.&lt;/p&gt;
&lt;p&gt;For example: I’ve heard more times than I can count over the last few years that our use of Broccoli.js is really important for Ember, and the reality is… that isn’t true. We could have built on top of just about &lt;em&gt;any&lt;/em&gt; solution, and it would have been &lt;em&gt;fine&lt;/em&gt;. Broccoli &lt;em&gt;does&lt;/em&gt; have some advantages; it also has some real disadvantages (one of which is that we’re the only ones using it!), and we should forthrightly acknowledge those. By the same token, if Webpack is working well for many people, let’s neither trash it in discussion nor ignore it in implementation. Instead, let’s make it easy for people to integrate Webpack into the Ember world.&lt;/p&gt;
&lt;p&gt;That doesn’t oblige us to chuck out our existing build tooling! It just means making our own build pipelines robust enough to interoperate well with other packaging systems. And that’s precisely what the Ember &lt;abbr&gt;CLI&lt;/abbr&gt; team has been doing! This needs to be our pattern across the board going forward.&lt;/p&gt;
&lt;p&gt;It’s truly well and good to have made a call a few years ago, and to be going out of our way to mitigate the costs of churn. At the same time, we need to communicate—to a degree that probably feels like &lt;em&gt;over&lt;/em&gt;communicating to the people who already understand all these decisions!—so that both the original rationales and the current status are accessible to all the people who &lt;em&gt;weren’t&lt;/em&gt; there when the decisions were made.&lt;/p&gt;
&lt;p&gt;Insofar as it’s true that Broccoli and Webpack solve different problems, &lt;em&gt;explaining&lt;/em&gt; how Broccoli and Webpack actually solve meaningfully different problems —or at least, &lt;em&gt;excel&lt;/em&gt; at solving different problems—is one of the most important things we can do as well. Props to Chris Thoburn (&lt;a href="https://twitter.com/runspired"&gt;@runspired&lt;/a&gt;) for doing this in a few different contexts recently, but we need a lot more of it—because it’s one example I think most people both inside and outside the Ember community have just kind of scratched their heads at for a long time (me included).&lt;/p&gt;
&lt;p&gt;Again: I take the Broccoli/Webpack example simply because it’s an obvious one. The broader point is that we need to find ways to embrace the shared solutions which emerge not only in the Ember community but in the front-end ecosystem as a whole, even as we also do the hard work to make our own shared solutions useful to the rest of the front-end ecosystem. That two-way exchange will benefit us, and smooth the paths in for newcomers, and benefit the rest of the ecosystem, too—and that’s a huge win. Because in a very real sense, we front-end developers are all in this together.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Keep your eyes open; you’ll see a blog post announcing that along with a full set of documentation for it sometime in the next month or so!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;To be clear: many, though certainly not all, of those specific implementations I like, but that’s beside the point.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="typescript"></category><category term="emberjs2018"></category></entry><entry><title>Higher-Order Components in Ember.js</title><link href="http://www.chriskrycho.com/2018/higher-order-components-in-emberjs.html" rel="alternate"></link><published>2018-05-26T14:00:00-04:00</published><updated>2018-05-28T06:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-26:/2018/higher-order-components-in-emberjs.html</id><summary type="html">Components as arguments! Components getting yielded! Components everywhere! A powerful way to make your Ember.js components more flexible and composeable.
</summary><content type="html">&lt;p&gt;One of the most powerful patterns in programming is the idea of &lt;em&gt;higher-order functions&lt;/em&gt;: functions which can take other functions as arguments or return them as their return values. If you’ve spent much time at all working in JavaScript, you’ve certainly encountered these—whether you’re using &lt;code&gt;Array.map&lt;/code&gt; to transform the values in an array, or passing a function as an argument to an event handler.&lt;/p&gt;
&lt;p&gt;The same pattern is incredibly useful in building components, and most modern front-end frameworks support it—including Ember.js! (In React, the pattern as a whole is often known as the &lt;code&gt;renderProps&lt;/code&gt; pattern, for the way you most often accomplish it. It’s all the same idea, though!)&lt;/p&gt;
&lt;p&gt;In this little post, I’ll show you how to build a small “higher-order component” in Ember.js, hopefully demystifying that term a little bit a long the way. (If you just want to see how the pieces fit together, you can see the finished app &lt;a href="https://github.com/chriskrycho/ember-hoc-example"&gt;in this repo&lt;/a&gt;.)&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;I’m going to be using classes and decorators throughout. Both are very much ready-to-go in Ember, and I commend them to you! I’m also going to be using some of the new &lt;a href="https://emberjs.com/blog/2018/04/13/ember-3-1-released.html#toc_introducing-optional-features-3-of-4"&gt;optional features&lt;/a&gt; available in Ember 3.1+ to use template-only components!&lt;/p&gt;
&lt;p&gt;Note that one of the most important consequences of this is that arguments have to be referenced as &lt;code&gt;@theArgumentName&lt;/code&gt; rather than just &lt;code&gt;theArgumentName&lt;/code&gt; in templates. The reason is precisely that there is no backing JavaScript component. In old-school Ember.js components, &lt;code&gt;{{theArgumentName}}&lt;/code&gt; is implicitly turned into &lt;code&gt;{{this.argumentName}}&lt;/code&gt;, which does a lookup on the backing component. In Glimmer-style components—of which these are the first part—arguments live on a designated &lt;code&gt;args&lt;/code&gt; property and are accessible in templates via &lt;code&gt;@theArgumentName&lt;/code&gt; instead.&lt;/p&gt;
&lt;/aside&gt;
&lt;section id="higher-order-components-what-are-they" class="level2"&gt;
&lt;h2&gt;Higher-Order Components, What Are They&lt;/h2&gt;
&lt;p&gt;Just like with a “higher-order function,” all we mean when we talk about a “higher-order component” is a component which takes other components as arguments, returns other components itself (in Ember’s case via &lt;code&gt;yield&lt;/code&gt; in a template), or both.&lt;/p&gt;
&lt;p&gt;The thing we’re actually going to build here is a “modal” which accepts an optional button as an arguments, and which yields out a component for dividing the modal into sections visually so you can pass your own content in and have it look just right. This is closely based on a component my colleagues and I at Olo built recently, just with some of our specific details stripped away to get at the actually important bits. Here’s what it looks like in practice:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/hoc-rendered.png" alt="a modal with sectioned text and a close button" /&gt;&lt;figcaption&gt;a modal with sectioned text and a close button&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The goal for the button arguments is to let the modal be able to render the button the caller passes in, while not being concerned with the &lt;em&gt;functionality&lt;/em&gt; of the button. Otherwise, we’d have to tie the “API” of the modal to the details of button behavior, bind more actions into it, etc.&lt;/p&gt;
&lt;p&gt;The goal for the yielded sectioning component is for whatever is rendering the modal itself to be able to pass content in and get it chunked up however the modal decides is appropriate—the modal can display its own styles, etc.—without having to worry about the details of applying classes or sectioning up the content itself.&lt;/p&gt;
&lt;p&gt;In short, we want to &lt;em&gt;separate our concerns&lt;/em&gt;: the modal knows how to lay out its contents and where to put buttons, but it doesn’t want to have to know &lt;em&gt;anything&lt;/em&gt; about what the buttons do. The most complicated interaction in the world could be going on, and the modal won’t have to care. Likewise, things &lt;em&gt;using&lt;/em&gt; the modal can pass content and buttons into it, and let the modal manage its own layout and so on without having to be concerned with the details of that. So what does that look like in practice?&lt;/p&gt;
&lt;p&gt;The approach I use here builds on the “contextual components” pattern in Ember.js. The main new idea is that the &lt;em&gt;context&lt;/em&gt; includes components!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="implementing-it" class="level2"&gt;
&lt;h2&gt;Implementing It&lt;/h2&gt;
&lt;p&gt;We have three components here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a button&lt;/li&gt;
&lt;li&gt;a modal&lt;/li&gt;
&lt;li&gt;a modal section&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since Ember.js still (for now!) requires component names to be at least two words separated by a dash, we’ll just call these &lt;code&gt;x-button&lt;/code&gt;, &lt;code&gt;x-modal&lt;/code&gt;, and &lt;code&gt;x-modal-section&lt;/code&gt;.&lt;/p&gt;
&lt;section id="x-button" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;x-button&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The button component, we’ll keep pretty simple: it’s just a button element with a given label and an action bound to it:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;&amp;lt;button class={{@buttonClass}} type=&amp;#39;button&amp;#39; {{action @onClick}}&amp;gt;
  {{@label}}
&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="x-modal" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;x-modal&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;x-modal&lt;/code&gt; has the meat of the implementation.&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;&amp;lt;div class=&amp;#39;modal-backdrop&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;#39;modal&amp;#39;&amp;gt;
  &amp;lt;div class=&amp;#39;modal-content&amp;#39;&amp;gt;
    {{yield (hash section=(component &amp;#39;x-modal-section&amp;#39;))}}
  &amp;lt;/div&amp;gt;

  {{#if @button}}
    {{component @button buttonClass=&amp;#39;modal-button&amp;#39;}}
  {{/if}}
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two things two notice here are the &lt;code&gt;yield&lt;/code&gt; and the &lt;code&gt;component&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;yield&lt;/code&gt; statement yields a &lt;a href="https://www.emberjs.com/api/ember/3.1/classes/Ember.Templates.helpers"&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/a&gt; with one property: &lt;code&gt;section&lt;/code&gt;. Yielding a hash is a convenient pattern in general. Here, we’re doing it to make the &lt;abbr&gt;API&lt;/abbr&gt; nicer for users of this component. It means that if we name the yielded value &lt;code&gt;|modal|&lt;/code&gt; when we invoke this, we’ll be able to write &lt;code&gt;modal.section&lt;/code&gt; to name this particular yielded item. (You’ll see exactly this below.)&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;component&lt;/code&gt; helper twice: once as the value of the &lt;code&gt;section&lt;/code&gt; key in the yielded hash, and once for the &lt;code&gt;button&lt;/code&gt; below. In both cases, the helper does the same thing: invokes a component! While the most common way to render a component is with its name, inline—like &lt;code&gt;{{x-modal}}&lt;/code&gt;—you can always render it with the &lt;code&gt;component&lt;/code&gt; helper and the name as a string: &lt;code&gt;{{component 'x-modal'}}&lt;/code&gt;. This lets you render different components dynamically!&lt;/p&gt;
&lt;p&gt;Let’s remember our initial analogy: the same way you can pass different functions to a higher-order function like &lt;code&gt;Array.prototype.map&lt;/code&gt;, you can pass different components to a higher-order component like our &lt;code&gt;x-modal&lt;/code&gt; here. And just like you can &lt;em&gt;return&lt;/em&gt; a function from a higher-order function, we can &lt;em&gt;yield&lt;/em&gt; a component from a higher-order component. Just like higher-order functions, the function passed in or returned just has to have the right shape.&lt;/p&gt;
&lt;p&gt;For example, the argument to &lt;code&gt;Array.prototype.map&lt;/code&gt; needs to be a function which performs an operation on a single item in the array (and maybe also the index) and hands back the result of that operation. Similarly, the &lt;code&gt;button&lt;/code&gt; argument to our &lt;code&gt;x-modal&lt;/code&gt; needs to accept a &lt;code&gt;buttonClass&lt;/code&gt; component so that the modal can apply some styling to it. The same thing holds for the component being yielded back out: it has an &lt;abbr&gt;API&lt;/abbr&gt; you should use to invoke it, just like any other.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of this gets at something really important: you can think of components as just being &lt;em&gt;pure functions&lt;/em&gt;: they take some input in the form of arguments, and give you the output of what they &lt;em&gt;render&lt;/em&gt; and what they &lt;em&gt;yield&lt;/em&gt;—and they always give you the same rendered &lt;abbr&gt;HTML&lt;/abbr&gt; and the same yielded values for the same inputs. They’re just functions!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="x-modal-section" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;x-modal-section&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;x-modal-section&lt;/code&gt; component is the simplest of all of these: it has no behavior, just some styling to actually chunk up the content:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;&amp;lt;div class=&amp;#39;modal-section&amp;#39;&amp;gt;
  {{yield}}
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="application-controller-and-template" class="level3"&gt;
&lt;h3&gt;Application controller and template&lt;/h3&gt;
&lt;p&gt;Now, let’s use in the context of the application template, where we can see how the pieces all fit together. First, let’s see the application controller backing it—nothing unusual here, just a simple toggle to show or hide the modal.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Controller from &amp;quot;@ember/controller&amp;quot;;
import { action } from &amp;quot;@ember-decorators/object&amp;quot;;

export default class Application extends Controller {
  constructor() {
    super(...arguments);
    this.showModal = false;
  }

  @action
  showIt() {
    this.set(&amp;quot;showModal&amp;quot;, true);
  }

  @action
  hideIt() {
    this.set(&amp;quot;showModal&amp;quot;, false);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now for the interesting bit—the template where we invoke &lt;code&gt;x-modal&lt;/code&gt; and use its higher-order-component functionality:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;{{#if showModal}}
  {{#x-modal
      button=(component &amp;#39;x-button&amp;#39;
        label=&amp;#39;Close modal!&amp;#39;
        onClick=(action &amp;#39;hideIt&amp;#39;)
      )
      as |modal|
  }}
    {{#modal.section}}
      Here is some content!
    {{/modal.section}}

    {{#modal.section}}
      Here is some other content.
    {{/modal.section}}

    {{#modal.section}}
      &amp;lt;p&amp;gt;The content can have its own sections, as you&amp;#39;d expect!&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Nothing crazy going on here. Just a normal template!&amp;lt;/p&amp;gt;
    {{/modal.section}}
  {{/x-modal}}
{{/if}}

&amp;lt;button class=&amp;#39;button&amp;#39; {{action &amp;#39;showIt&amp;#39;}}&amp;gt;Show modal&amp;lt;/button&amp;gt;

&amp;lt;!-- some other content on the page --&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We invoke the block form of &lt;code&gt;x-modal&lt;/code&gt; just like we would any block component, and we get back the thing it yields with &lt;code&gt;as |modal|&lt;/code&gt;. However, one of the arguments we pass to it is a component. But &lt;code&gt;modal&lt;/code&gt; is a &lt;code&gt;hash&lt;/code&gt; (an object!) with a property named &lt;code&gt;section&lt;/code&gt;, which is the &lt;code&gt;x-modal-section&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;Again, you can think of this like calling a function with one function as an argument and getting another function back as its return value—that returned function being something we could call over and over again once we had it.&lt;/p&gt;
&lt;p&gt;Here, we “call the function”—invoke the &lt;code&gt;x-modal&lt;/code&gt; component—with &lt;code&gt;component 'x-button'&lt;/code&gt; as its argument, and the returned &lt;code&gt;modal.section&lt;/code&gt; is a component we can invoke like a normal component.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; We could even pass it into some &lt;em&gt;other&lt;/em&gt; component itself if we so desired.&lt;/p&gt;
&lt;p&gt;And that’s really all there is to it!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;“Higher-order components” aren’t necessarily something you need all the time, but they’re really convenient and very powerful when you &lt;em&gt;do&lt;/em&gt; need them. They’re also a lot less complicated than the name might seem! Components are just things you can pass around in the context of a component template—they’re the &lt;em&gt;functions&lt;/em&gt; of Handlebars.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Splitting things into components like this does increase complexity, and in particular it can increase the mental overhead of keeping track of how the pieces fit together. However, they also let us cleanly separate different pieces of functionality from each other. Doing it this way means that our modal can be concerned about &lt;em&gt;positioning&lt;/em&gt; a button without needing to expose an &lt;abbr&gt;API&lt;/abbr&gt; for all of the button’s own mechanics for handling clicks and performing whatever actions necessary. That makes our modal &lt;em&gt;and&lt;/em&gt; our button way more reusable across our application. The button can be used &lt;em&gt;wherever&lt;/em&gt; a button is useful, and the modal doesn’t need to know or care anything about it. Likewise, the button has no need to know anything about the context where it’s being used; from the button component’s perspective, it just gets wired up to some actions as usual. The same thing goes for the modal sections: they let us abstract over how the DOM is laid out, what classes are applied to it, and so on—they chunk up the modal, but the modal itself maintains responsibility for how that chunking up happens. And the caller doesn’t even &lt;em&gt;have&lt;/em&gt; to use that; it’s just a tool that’s available for that purpose.&lt;/p&gt;
&lt;p&gt;To sum it all up, I’ll just reiterate my earlier description: components are just like pure functions: the same inputs give you the same outputs—and, just like functions, those inputs and outputs can be other functions, that is, other components.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you want a good way to document the things a component &lt;code&gt;yield&lt;/code&gt;s, check out &lt;a href="https://ember-learn.github.io/ember-cli-addon-docs/latest/docs/api/components/docs-demo"&gt;ember-cli-addon-docs&lt;/a&gt;, which can read an &lt;code&gt;@yield&lt;/code&gt; JSDoc annotation.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;And it could just as well be a component; the top-level controller template is just where we put our main app functionality.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;We could also simplify this since we’re only returning one component, and if we had the full Glimmer component story, this could look &lt;em&gt;very&lt;/em&gt; nice:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;&amp;lt;Modal @button={{component &amp;#39;Button&amp;#39;}} as |Section|&amp;gt;
  &amp;lt;Section&amp;gt;
    Some content!
  &amp;lt;/Section&amp;gt;
  &amp;lt;Section&amp;gt;
    Some more content!
  &amp;lt;/Section&amp;gt;

  &amp;lt;Section&amp;gt;
    &amp;lt;p&amp;gt;The content can have its own sections, as you&amp;#39;d expect!&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;Nothing crazy going on here. Just a normal template!&amp;lt;/p&amp;gt;
  &amp;lt;/Section&amp;gt;
&amp;lt;/Modal&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;If you’re inclined to “well actually” me about &lt;em&gt;helpers&lt;/em&gt; being the real functions of Handlebars templates: in the Glimmer &lt;abbr&gt;VM&lt;/abbr&gt; world, helpers are just a kind of component.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="typescript"></category></entry><entry><title>#EmberJS2018, Part 3</title><link href="http://www.chriskrycho.com/2018/emberjs2018-part-3.html" rel="alternate"></link><published>2018-05-23T07:30:00-04:00</published><updated>2018-05-23T07:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-23:/2018/emberjs2018-part-3.html</id><summary type="html">There are often good reasons to have private discussions in any kind of core team—but they should not be the default. The default should be public.</summary><content type="html">&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;One of the small changes I think would substantially improve the Ember.js ecosystem is: &lt;strong&gt;defaulting to public for discussions&lt;/strong&gt; among the core team. Indeed: for any open-source project with community involvement like Ember.js has, that should be the default. Not the &lt;em&gt;only&lt;/em&gt; option, just the default option.&lt;/p&gt;
&lt;p&gt;There is plenty of value in having private channels for discussion in contexts like this. Sometimes you have to deal with something awkward or socially difficult. Sometimes you have already taken the community’s input and just have to come to a decision about what to do on something. Private channels are useful.&lt;/p&gt;
&lt;p&gt;But: they shouldn’t be the default. They should be what you turn to when you’re in one of those particular kinds of situations which require it. The default should be public discussion and interaction.&lt;/p&gt;
&lt;p&gt;Over the last year, the maintainer-ship (and therefore decision-making) of ember-cli-typescript and the surrounding TypeScript ecosystem has grown from being pretty much just me to being a small group of four of us: Derek Wickern, Dan Freeman, James Davis, and me. We have the “final say,” so to speak, on the things we’re doing with the addon and the typings and so on. (What that actually means in practice is mostly just we all try to shoulder the burden of staying on top of pull requests.) And we have a private channel for discussions as a “core team” for projects in the &lt;a href="https://github.com/typed-ember"&gt;typed-ember&lt;/a&gt; organization.&lt;/p&gt;
&lt;p&gt;But: it’s not the default. It’s what we turn to when we’re in one of those particular kinds of situations which require it. The default is public discussion and interaction.&lt;/p&gt;
&lt;p&gt;And this isn’t just an unspoken norm or something. As a team, we all explicitly agreed that we default to public. Pretty much the only times we chat in our private channel is if we’re figuring out how to diffuse an awkward situation kindly, or if we’re adding someone else to the team. Otherwise, we try to have all our discussions in the GitHub issues for the projects or the &lt;code&gt;#topic-typescript&lt;/code&gt; room in the Ember Community Slack.&lt;/p&gt;
&lt;p&gt;This has a few major effects, as I see it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No one should feel left out or in the dark about what we’re up to. Even if we’re hashing out crazy-seeming ideas for how to move stuff forward, it’s all there for everyone to see. This includes neat things like Dan Freeman’s proof-of-concept on &lt;a href="https://twitter.com/__dfreeman/status/994410180661170177"&gt;type-checked templates&lt;/a&gt;, or our mad sprint (as a team!) to get some core improvements landed before I gave a workshop at EmberConf, or anything else we’re going after.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’re obviously available for input on things as people have questions, because we’re interacting with &lt;em&gt;each other&lt;/em&gt; in those public forums. And if we’d like to start moving some of the oft-repeated questions over to the &lt;a href="https://discuss.emberjs.com"&gt;Ember Discourse&lt;/a&gt; or to &lt;a href="https://stackoverflow.com/questions/tagged/ember.js"&gt;Stack Overflow&lt;/a&gt;, it’s still really helpful for people who &lt;em&gt;are&lt;/em&gt; on the Slack to see that we’re there and available for help.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We get to see the regular pain points others run into. That often turns into issues, priorities, etc. for us as a group. The slowly growing issue &lt;a href="https://github.com/typed-ember/ember-cli-typescript/issues/170"&gt;tracking things we need to document&lt;/a&gt; is essentially a direct product of that constant cycle of interaction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We get the benefit of input from others! If we’ve missed something, or simply failed to think of something, others in the community often haven’t. One prime example of this: the “registry” strategy we use for making things like Ember Data store, adapter, etc. lookups work came out of conversations with a community member (&lt;a href="https://github.com/maerten"&gt;Maarten Veenstra&lt;/a&gt;) which happened many months before we were in a spot where we could land that kind of thing—and initially I was pretty skeptical of it, but they were totally right, and it’s now core to how Ember’s typings work!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recommend—very strongly—that the Ember.js core team adopt the same strategy. Teams &lt;em&gt;do&lt;/em&gt; need private channels sometimes. But they shouldn’t be the default. They should be for those particular circumstances which &lt;em&gt;require&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;The biggest things I think could come out of this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A greater confidence from within the Ember.js community about what the core team is up to and where we’re going. Technical leadership seems to me to be about 10% technical brilliance and 90% clear communication. We have loads of technical brilliance; we need more communication!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More confidence in the trajectory of Ember.js from &lt;em&gt;outside&lt;/em&gt; its existing community. Seeing that there is active leadership is essential for people to have confidence that choosing Ember.js is a good choice both today and for the medium-to-long-term.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we need both of those—a lot—for Ember.js to continue to grow and thrive in the years ahead!&lt;/p&gt;
</content><category term="emberjs"></category><category term="emberjs2018"></category><category term="javascript"></category><category term="leadership"></category></entry><entry><title>Delivering Talks a Bit More Accessibly</title><link href="http://www.chriskrycho.com/2018/delivering-talks-a-bit-more-accessibly.html" rel="alternate"></link><published>2018-05-22T07:50:00-04:00</published><updated>2018-05-22T07:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-22:/2018/delivering-talks-a-bit-more-accessibly.html</id><summary type="html">How well could someone who cannot see at all follow along with your talk? How can you improve your answer to that question?
</summary><content type="html">&lt;p&gt;One thing I try to take into account when I’m &lt;a href="https://www.chriskrycho.com/2018/how-i-write-a-talk.html" title="How I Write a Talk"&gt;writing a talk&lt;/a&gt; is how the talk will work for people who cannot see well or at all. It’s easy, when you have good vision, to simply assume that everyone else does, too. But there are lots of ways that assumption falls over—everything from protanopia (the most common form of color-blindness) to total blindness.&lt;/p&gt;
&lt;p&gt;There’s a question here that you &lt;em&gt;must&lt;/em&gt; keep in mind when it comes to slides: Is my talk comprehensible without the slides? Because the reality is that some people simply cannot see them. At all.&lt;/p&gt;
&lt;p&gt;Here’s a helpful way of thinking about it: however you actually go about building and rehearsing your talk, think about its content like a podcast episode. If someone can’t rip the audio out of the video stream, upload it to their podcast player, and follow along without any issue whatsoever… you’re leaning too hard on your slides.&lt;/p&gt;
&lt;p&gt;I was reminded of this quite sharply by two things in the last week:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;I &lt;em&gt;did&lt;/em&gt; rip the audio from a couple talks and upload it to my podcast player and listen to them while walking and running.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I gave a talk at a meetup that involved some live-demoing/coding and I was thinking afterward: had anyone in the room been hard of sight or unsighted, they could not have followed much of what I said at all. No one was (to my knowledge!) but it had me thinking about how I would solve for that were it otherwise.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So: think hard about making sure people in the audience who can’t see your slides can still follow your talk.&lt;/p&gt;
</content></entry><entry><title>How To Bundle TypeScript Type Definitions</title><link href="http://www.chriskrycho.com/2018/how-to-bundle-typescript-type-definitions.html" rel="alternate"></link><published>2018-05-21T07:00:00-04:00</published><updated>2018-05-21T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-21:/2018/how-to-bundle-typescript-type-definitions.html</id><summary type="html">Create a custom build that puts the type definitions in the root of your package, instead of putting them alongside the compiled JavaScript files. Because if your consumers have to use compiler options, they will be very sad.
</summary><content type="html">&lt;p&gt;One of the lessons that led to the True Myth 2.0.0 release was the difficulty of consuming the library under its original packaging strategy. There are a few things that are &lt;em&gt;not&lt;/em&gt; obvious about how TypeScript type definitions get consumed when you’re first starting out, and a few things that seem like they should work &lt;em&gt;don’t&lt;/em&gt;. This is my attempt to help &lt;em&gt;you&lt;/em&gt; (and the people consuming your TypeScript libraries!) avoid the same pain I (and the people consuming mine) have felt.&lt;/p&gt;
&lt;section id="the-problem" class="level2"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The problem is the result of the ways TypeScript resolves type definitions, and the kinds of type definition files it can (and cannot) generate for you.&lt;/p&gt;
&lt;p&gt;TypeScript only properly resolves two kinds of type definition distributions automatically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A single-file type definition, located anywhere in the package as long as &lt;code&gt;package.json&lt;/code&gt; has a &lt;code&gt;types&lt;/code&gt; key pointing to it.&lt;/li&gt;
&lt;li&gt;Type definition module files in the &lt;em&gt;root&lt;/em&gt; of the distributed package, mapping to the distributed modules of the package (wherever they live).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TypeScript will only generate a single-file type definition for the &lt;abbr&gt;AMD&lt;/abbr&gt; and SystemJS standards—which &lt;em&gt;cannot&lt;/em&gt; be imported with ES6 module imports. If you want to use an output mode which generates a JS file per originating TS file—Node, ES6, etc.—you will get individual TS module file type definitions as well. It is not that the type definition files themselves can’t be written to support Node or ES6-style module layouts in a single-file definition. To the contrary: hand-written definitions for libraries &lt;em&gt;often&lt;/em&gt; do just that. It is just a matter of what the compiler supports generating.&lt;/p&gt;
&lt;p&gt;The net of this is: if you want module type definitions to go with ES6 modules to import, they &lt;em&gt;must&lt;/em&gt; live in the root of your distributed bundle.&lt;/p&gt;
&lt;p&gt;However, most libraries I’m familiar with—because I work in the &lt;em&gt;browser&lt;/em&gt; ecosystem, not the &lt;em&gt;Node&lt;/em&gt; ecosystem—do not work with the root of their repository as the place where their source lives, or for the place where the output of their build process lives. It’s far more common to have a &lt;code&gt;src&lt;/code&gt; directory and &lt;code&gt;dist&lt;/code&gt; or &lt;code&gt;build&lt;/code&gt; directory, the latter of which is where the build artifacts go.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solution" class="level2"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;The solution—which we shipped for ember-cli-typescript some time ago, and which I switched to this past week for True Myth—is to have separate build artifacts for the type definitions and the JavaScript output. Put the JavaScript output in the &lt;code&gt;dist&lt;/code&gt; or &lt;code&gt;build&lt;/code&gt; directory as usual, without type declarations. Then, put the type definitions in the root of the repository.&lt;/p&gt;
&lt;p&gt;In the case of both ember-cli-typescript and True Myth, we’re doing the type generation step in the &lt;code&gt;prepublishOnly&lt;/code&gt; hook and cleaning it up in the &lt;code&gt;postpublish&lt;/code&gt; hook. Your &lt;code&gt;package.json&lt;/code&gt; might look like something like this, assuming your &lt;code&gt;tsconfig.json&lt;/code&gt; is set to generate JavaScript artifacts in &lt;code&gt;dist&lt;/code&gt; as your build directory.&lt;/p&gt;
&lt;pre class="json"&gt;&lt;code&gt;{
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;ts:js&amp;quot;: &amp;quot;tsc&amp;quot;,
    &amp;quot;ts:defs&amp;quot;: &amp;quot;tsc --declaration --outDir . --emitDeclarationOnly&amp;quot;,
    &amp;quot;prepublishOnly&amp;quot;: &amp;quot;yarn ts:js &amp;amp;&amp;amp; yarn ts:defs&amp;quot;,
    &amp;quot;postpublish&amp;quot;: &amp;quot;rm -r *.d.ts dist&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(If you have nested modules, your &lt;code&gt;postpublish&lt;/code&gt; hook there should clean up the generated folders as well as the generated files.)&lt;/p&gt;
&lt;p&gt;You can see the full setup I built for True Myth—which generates type defs along these lines, as well as both CommonJS and ES6 modules—in the repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/package.json"&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;—note especially the &lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/package.json#L32:L42"&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;&lt;/code&gt;&lt;/a&gt; configuration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/tsconfig.json"&gt;root &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt;, with derived&lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/ts/cjs.tsconfig.json"&gt;CommonJS &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/chriskrycho/true-myth/blob/v2.0.0/ts/es.tsconfig.json"&gt;ES6 &lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/a&gt; files.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;This isn’t an especially complicated thing, but the scenario leading to the need for this is common enough, and the dance frustrating enough and easy enough to get wrong, that I really wish the TypeScript team would make it possible to generate single-file type definitions for &lt;em&gt;all&lt;/em&gt; kinds of JavaScript module systems.&lt;/p&gt;
&lt;/section&gt;
</content><category term="typescript"></category><category term="programming languages"></category><category term="true myth"></category></entry><entry><title>Rust is Incredibly Productive for CLIs</title><link href="http://www.chriskrycho.com/2018/rust-is-incredibly-productive-for-clis.html" rel="alternate"></link><published>2018-05-20T08:35:00-04:00</published><updated>2018-05-20T08:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-20:/2018/rust-is-incredibly-productive-for-clis.html</id><summary type="html">I built a little tool in Rust to convert an Evernote export file to Markdown. It was impressively easy.
</summary><content type="html">&lt;p&gt;There are &lt;em&gt;reasons&lt;/em&gt; I’m a Rust fanboy. One of them is the kind of thing I proved out to myself today—again, because I’ve had this experience before, albeit not with anything quite this “complicated.”&lt;/p&gt;
&lt;p&gt;I built &lt;a href="https://github.com/chriskrycho/evernote2md"&gt;a little tool&lt;/a&gt; in Rust to convert Evernote exports (in their custom &lt;code&gt;.enex&lt;/code&gt; &lt;abbr&gt;XML&lt;/abbr&gt; format) to Markdown files with &lt;abbr&gt;YAML&lt;/abbr&gt; metadata headers—mostly just to see how quickly and effectively I could do it, because I’ve never actually had an excuse to use &lt;a href="https://serde.rs"&gt;Serde&lt;/a&gt; and I thought this might be a nice spot to try it.&lt;/p&gt;
&lt;p&gt;There’s a lot this little library &lt;em&gt;doesn’t&lt;/em&gt; do. (Like include the creation and modification timestamps in the header, for example.) But all of those things would be &lt;em&gt;very&lt;/em&gt; straightforward to do. I built this functioning little “script” in about two hours. For context: I’ve taken multiple passes at this in Python—which in the way people normally think about these things should be way &lt;em&gt;easier&lt;/em&gt;—and I’ve failed both times.&lt;/p&gt;
&lt;p&gt;Rust’s compiler just helps you out &lt;em&gt;so much&lt;/em&gt; along the way, not only with the type-checking but with the really amazing metaprogramming capabilities you get with it. Being able to slap &lt;code&gt;#[derive(Deserialize)]&lt;/code&gt; on a struct and a couple attributes on struct fields and having it Just Work™ to deserialize XML into local types is mind-blowing. (The only thing I know of that’s playing the same game is F&lt;sup&gt;♯&lt;/sup&gt; type-providers. I’d love to hear about similar capabilities in other languages!)&lt;/p&gt;
&lt;p&gt;I’m basically at the point where if I need a small command-line tool, I write it in Rust, &lt;em&gt;not&lt;/em&gt; in a conventional scripting language like Python, because the benefits I get more than outweigh whatever small extra amount of mental overhead there is. And there’s not much of that mental overhead anyway for this kind of thing! As you can see &lt;a href="https://github.com/chriskrycho/evernote2md/blob/master/src/main.rs#L71"&gt;in the actual code&lt;/a&gt;, I make free and liberal use of &lt;a href="https://doc.rust-lang.org/1.26.0/std/option/enum.Option.html"&gt;&lt;code&gt;expect&lt;/code&gt;&lt;/a&gt; for this kind of tool.&lt;/p&gt;
&lt;p&gt;It’s also hard to oversell the ecosystem—even as relatively nascent as it is compared to some much older languages, the tools which exist are just really good. This project uses &lt;a href="https://serde.rs"&gt;Serde&lt;/a&gt; for deserializing from &lt;abbr&gt;XML&lt;/abbr&gt; and serializing to &lt;abbr&gt;YAML&lt;/abbr&gt;; &lt;a href="https://github.com/rust-lang/regex"&gt;Regex&lt;/a&gt;; &lt;a href="https://clap.rs"&gt;Clap&lt;/a&gt; for command line parsing; a nice little wrapper around &lt;a href="https://pandoc.org"&gt;pandoc&lt;/a&gt;; and, superpower even among superpowers, &lt;a href="https://docs.rs/rayon/1.0.1/rayon/"&gt;Rayon&lt;/a&gt;: free parallelization.&lt;/p&gt;
&lt;p&gt;Rust is, in short, &lt;em&gt;very productive&lt;/em&gt; for things in this space. Far more than you might expect from the billing. Yes, it’s a “systems programming language” and you can write operating systems with it. But it’s also just a really great tool for &lt;em&gt;all sorts&lt;/em&gt; of domains, including little &lt;abbr&gt;CLI&lt;/abbr&gt; tools like this one.&lt;/p&gt;
</content><category term="Rust"></category><category term="programming languages"></category></entry><entry><title>Destructuring with True Myth 1.3+</title><link href="http://www.chriskrycho.com/2018/destructuring-with-true-myth-13.html" rel="alternate"></link><published>2018-05-19T12:20:00-04:00</published><updated>2018-05-19T12:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-19:/2018/destructuring-with-true-myth-13.html</id><summary type="html">Making the value and error properties available means you can now use destructuring.
</summary><content type="html">&lt;p&gt;I just realized a neat capability that &lt;a href="#"&gt;True Myth 1.3+&lt;/a&gt; unlocks: you can now use destructuring of the &lt;code&gt;value&lt;/code&gt; property on &lt;code&gt;Just&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; and the &lt;code&gt;error&lt;/code&gt; property on &lt;code&gt;Error&lt;/code&gt; instances.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;Maybe&lt;/code&gt; instances:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { just, nothing, isJust } from &amp;#39;true-myth/maybe&amp;#39;;

const maybeStrings: Maybe&amp;lt;string&amp;gt;[] =
  [just(&amp;#39;hello&amp;#39;), nothing(), just(&amp;#39;bye&amp;#39;), nothing()];

const lengths = maybeStrings
  .filter(Maybe.isJust)
  .map(({ value }) =&amp;gt; value.length);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;Result&lt;/code&gt; instances:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Result, { ok, err } from &amp;#39;true-myth/result&amp;#39;;

const results: Result&amp;lt;number, string&amp;gt;[] =
  [ok(12), err(&amp;#39;wat&amp;#39;), err(&amp;#39;oh teh noes&amp;#39;), ok(42)];

const okDoubles = results
  .filter(Result.isOk)
  .map(({ value }) =&amp;gt; value * 2);

const errLengths = results
  .filter(Result.isErr)
  .map(({ error }) =&amp;gt; error.length);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;None of this is especially novel or anything. It was just a neat thing to realize after the fact, because it wasn’t something I had in mind when I was making these changes!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This was a very strange experience. There’s nothing quite like learning something about a library &lt;em&gt;you wrote&lt;/em&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="typescript"></category><category term="open source software"></category><category term="libraries"></category><category term="true myth"></category></entry><entry><title>The Chinese Room Argument</title><link href="http://www.chriskrycho.com/2018/the-chinese-room-argument.html" rel="alternate"></link><published>2018-05-19T11:20:00-04:00</published><updated>2018-05-19T11:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-19:/2018/the-chinese-room-argument.html</id><summary type="html">If “formal operations on symbols cannot produce thought,” what (if anything) does that say about today’s “strong AI” projects and the Turing test itself?
</summary><content type="html">&lt;p&gt;I took a bunch of half days last week, because &lt;em&gt;goodness&lt;/em&gt; but I was tired. Too long running at full-throttle, and &lt;a href="http://www.chriskrycho.com/2018/on-steam-specifically-running-out-of-it.html" title="On Steam (Specifically, Running Out Of It)"&gt;I’d been running out of steam&lt;/a&gt; as a result. And what did I do instead, that ended up being so effective in &lt;a href="https://www.chriskrycho.com/2018/vacation-as-recharging.html" title="Vacation as Recharging"&gt;recharging&lt;/a&gt;? Well, mostly… read literature reviews on interesting topics in philosophy, at least for the first few days. Dear reader, I am a nerd. But I thought I’d share a few of the thoughts I jotted down in my notebook from that reading.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="the-chinese-room-argument" class="level2"&gt;
&lt;h2&gt;“The Chinese Room Argument”&lt;/h2&gt;
&lt;p&gt;This was an argument whose &lt;em&gt;influence&lt;/em&gt; I’ve certainly encountered, but the actual content of which I was totally unfamiliar with.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The argument, in &lt;em&gt;exceedingly&lt;/em&gt; brief summary, is that “formal operations on symbols cannot produce thought”—that syntax is insufficient for conveying semantics. Searle made the argument by way of a thought experiment; a reference in a review on “Thought Experiments” I may post about later is how I found my way to the discussion. That thought experiment supposes a man being handed symbols (under a door, perhaps) which are questions in Chinese, who has a set of rules for constructing correct answers to those questions, also in Chinese—but the man himself, however much he gives every &lt;em&gt;appearance&lt;/em&gt; of knowing Chinese to the person passing in questions by way of the answers he gives, does not in fact know Chinese. He simply has a set of rules that allow him to give the appearance of knowledge. The Chinese Room argument, in other words, is a(n attempted) refutation of the &lt;a href="https://en.m.wikipedia.org/wiki/Turing_test"&gt;Turing Test&lt;/a&gt; as a metric for evaluating intelligence.&lt;/p&gt;
&lt;p&gt;The rejoinders to this are varied, of course, and I encourage you simply to follow the link above and read the summary—it’s good.&lt;/p&gt;
&lt;p&gt;There were two particularly interesting points to me in reading this summary: the Churchland response, and the Other Minds response. To these I’ll add a quick note of my own.&lt;/p&gt;
&lt;section id="the-churchland-response" class="level3"&gt;
&lt;h3&gt;1: The Churchland response&lt;/h3&gt;
&lt;p&gt;Searle’s argument specifically addressed an approach to &lt;abbr title="artificial intelligence"&gt;AI&lt;/abbr&gt; (and especially so-called “strong &lt;abbr title="artificial intelligence"&gt;AI&lt;/abbr&gt;,” i.e. &lt;abbr title="artificial intelligence"&gt;AI&lt;/abbr&gt; that is genuinely intelligent) that was very much in vogue when he wrote the article in the 1980s, but which is very much &lt;em&gt;out&lt;/em&gt; of vogue now: rule-driven computation. One of the responses, which looks rather prescient in retrospect, was the Churchland reply that the brain is not a symbolic computation machine (i.e. a computer as we tend to think of it) but “a vector transformer”… which is a precise description of the “neural network”-based &lt;abbr title="artificial intelligence"&gt;AI&lt;/abbr&gt; that is now dominating research into e.g. self-driving cars and so on.&lt;/p&gt;
&lt;p&gt;The main point of interest here is not so much whether the Churchlands were correct in their description of the brain’s behavior, but in their point that any hypothesis about neural networks is &lt;em&gt;not&lt;/em&gt; defeated by Searle’s thought experiment. Why not? Because neural networks are not performing symbolic computation.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-other-minds-response" class="level3"&gt;
&lt;h3&gt;2: The Other Minds response&lt;/h3&gt;
&lt;p&gt;The other, and perhaps the most challenging response for Searle’s argument, is the “other minds” argument. Whether in other humans, or in intelligent aliens should we encounter them, or—and this is the key—in a genuinely intelligent machine, we attribute the existence other minds &lt;em&gt;intuitively&lt;/em&gt;. Nor do we (in general) doubt our initial conclusion that another mind exists merely because we come to have a greater understanding of the underlying neuro-mechanics. We understand far more about human brains and their relationship to the human mind than we did a hundred years ago; we do not therefore doubt the reality of a human mind. (Most of us, anyway! There are not many hard determinists of the sort who think consciousness is merely an illusion; and there are not many solipsists who think only their own minds exist.)&lt;/p&gt;
&lt;p&gt;But the “other minds” objection runs into other intuitive problems all its own: supposing that we learned an apparently-conscious thing we interacted with were but a cleverly-arranged set of waterworks, we would certainly revise our opinion. Which intuition is to be trusted? Either, neither, or in some strange way both?&lt;/p&gt;
&lt;p&gt;And this gets again at the difficulty of using thought experiments to reason to truth. What a thought experiment can genuinely be said to show is complicated at best. Yet their utility—at least in raising problems, but also in making genuine advances in understanding the world—seems clear.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lowered-standards" class="level3"&gt;
&lt;h3&gt;Lowered standards&lt;/h3&gt;
&lt;p&gt;The other thing I think is worth noting in all these discussions is a point I first saw Alan Jacobs raise a few years ago, but which was only &lt;em&gt;alluded&lt;/em&gt; to in this literature review. Jacobs &lt;a href="http://text-patterns.thenewatlantis.com/2010/08/advice-from-jaron-lanier.html"&gt;cites&lt;/a&gt; Jaron Lanier’s &lt;cite&gt;You Are Not A Gadget&lt;/cite&gt;. (I don’t have a copy of the book, so I’ll reproduce Jacobs’ quotation here.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But the Turing test cuts both ways. You can’t tell if a machine has gotten smarter or if you’ve just lowered your own standards of intelligence to such a degree that the machine seems smart. If you can have a conversation with a simulated person presented by an AI program, can you tell how far you’ve let your sense of personhood degrade in order to make the illusion work for you?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is one of the essential points often left aside. Is the test itself useful? Is “ability to fool a human into think you’re human” &lt;em&gt;actually&lt;/em&gt; pointing at what it means to be intelligent? This is sort of the unspoken aspect of the “other minds” question. But it’s one we &lt;em&gt;ought&lt;/em&gt; to speak when we’re talking about intelligence!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For those of you following along at home: I wrote all but the last 100 or so words of this a week ago and just hadn’t gotten around to publishing it. It’s not the even more absurd contradiction to yesterday’s post on writing plans than it seems. Really. I promise.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It’s occasionally frustrating to find that there is &lt;em&gt;so&lt;/em&gt; much I’m unfamiliar with despite attempting to read broadly and, as best I can, deeply on subjects relevant to the things I’m talking about on Winning Slowly, in programming, etc. One of the great humility-drivers of the last few years is finding that, my best efforts to self-educate notwithstanding, I know &lt;em&gt;very little&lt;/em&gt; even in the fields I care most about.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="AI"></category><category term="ethics"></category><category term="philosophy"></category></entry><entry><title>Vacation as Recharging</title><link href="http://www.chriskrycho.com/2018/vacation-as-recharging.html" rel="alternate"></link><published>2018-05-19T11:15:00-04:00</published><updated>2018-05-19T11:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-19:/2018/vacation-as-recharging.html</id><summary type="html">Rest is good, and needful; and resting well improves your work; but you cannot rest merely for the sake of your work.
</summary><content type="html">&lt;p&gt;I know, I know: I &lt;a href="http://www.chriskrycho.com/2018/writing-plans-for-the-rest-of-2018.html"&gt;&lt;em&gt;just&lt;/em&gt; said&lt;/a&gt; you wouldn’t be seeing many blog posts here. But I also said I wouldn’t be able to resist. And it’s Saturday! And I have &lt;em&gt;thoughts&lt;/em&gt;. So.&lt;/p&gt;
&lt;p&gt;As I noted last week, &lt;a href="https://www.chriskrycho.com/2018/vacation-as-helpful-reminder.html"&gt;taking a vacation&lt;/a&gt; can provide helpful reminds to us. Not just, as I noted there, about our own role in our teams. Also about the importance and goodness of rest, and the way that we are better able to accomplish the good of &lt;em&gt;work&lt;/em&gt; when we also rightly pursue the good of &lt;em&gt;rest&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I took four half days. That was it. Not an extremely long or even a total vacation. But the difference it made… This week, I &lt;em&gt;more&lt;/em&gt; than made up for those half days in productivity, both at work and in my side projects.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rest is &lt;em&gt;essential&lt;/em&gt; for us.&lt;/p&gt;
&lt;p&gt;Now, what I’ve just written could be taken as a way of instrumentalizing rest: “Rest is good &lt;em&gt;because&lt;/em&gt; it makes us better at working.” That’s not it. It’s rather that when we rest appropriately because rest is a good and necessary element of the design of human beings, we also find that we flourish in the other aspects of our lives. &lt;em&gt;Most&lt;/em&gt; goods in our lives are simultaneously interrelated; and you cannot pursue one of those goods merely &lt;em&gt;for the sake&lt;/em&gt; of another, failing to recognize it as a good in its own right, or usually you will end up getting &lt;em&gt;neither&lt;/em&gt;.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Good grief, just look at how many words I posted yesterday.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>#EmberJS2018, Part 2</title><link href="http://www.chriskrycho.com/2018/emberjs2018-part-2.html" rel="alternate"></link><published>2018-05-18T22:00:00-04:00</published><updated>2018-05-18T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-18:/2018/emberjs2018-part-2.html</id><summary type="html">A project is only as good as its documentation. Ember’s documentation has come a long way… but it still has a long way to go, and it's essential for helping Ember thrive.
</summary><content type="html">&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-3.html"&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;section id="part-2-double-down-on-docs" class="level2"&gt;
&lt;h2&gt;Part 2: Double down on docs&lt;/h2&gt;
&lt;p&gt;The best project in the world is useless without documentation. As such, my &lt;em&gt;second&lt;/em&gt; major goal for Ember.js this year is to see our documentation story improve dramatically across a number of fronts. This is not just the kind of thing that’s important in principle or because we care about doing the right thing, though those alone &lt;em&gt;are&lt;/em&gt; sufficient motivation. It’s &lt;em&gt;also&lt;/em&gt; absolutely necessary for Ember to grow and thrive in the ways it deserves to in the years ahead.&lt;/p&gt;
&lt;p&gt;To be clear: Ember’s story around documentation is &lt;em&gt;pretty good&lt;/em&gt; and it continues to improve all the time. A few years ago, the base documentation was a mess and even figuring out where to start was hard. Today, Ember.js itself has great guides along with versioned-and-searchable &lt;abbr title="application programming interface"&gt;API&lt;/abbr&gt; documentation. The gaps now are in the &lt;em&gt;surrounding ecosystem&lt;/em&gt; and in the &lt;em&gt;framework internals&lt;/em&gt;. That’s huge progress! But if we want Ember to excel, we need to go after both of these with gusto.&lt;/p&gt;
&lt;section id="the-surrounding-ecosystem" class="level3"&gt;
&lt;h3&gt;The surrounding ecosystem&lt;/h3&gt;
&lt;p&gt;Ember Data, Ember Engines, and perhaps most important Ember &lt;abbr title="command line interface"&gt;CLI&lt;/abbr&gt; and its core dependency Broccoli all &lt;em&gt;desperately&lt;/em&gt; need documentation work just at the “how do you even use these things level.”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Broccoli.js&lt;/strong&gt; in particular is core to pretty much everything in Ember’s ecosystem, and its docs today are in roughly the state Webpack’s were back in its sad 1.0 days. We should take a page out of our own history (and Webpack’s for that matter!) and make it easy for people to use Broccoli in whatever ways their apps need, and that mostly means documenting it!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Oli Griffith’s recent &lt;a href="http://www.oligriffiths.com/broccolijs/"&gt;blog post series&lt;/a&gt; is an incredibly valuable first step in that direction. But we need really solid documentation for &lt;a href="http://broccolijs.com"&gt;Broccoli itself&lt;/a&gt;, and also for the equally important &lt;a href="https://www.npmjs.com/search?q=keywords:broccoli-plugin"&gt;plugin ecosystem&lt;/a&gt; which is the primary way people interact with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The docs for &lt;strong&gt;Ember &lt;abbr&gt;CLI&lt;/abbr&gt;&lt;/strong&gt; itself are &lt;em&gt;decent&lt;/em&gt;, but they’re quite out of date and are about to be a lot more so because of the previously-mentioned packager bits. We need accurate and up-to-date guides and &lt;abbr&gt;API&lt;/abbr&gt; docs for the &lt;abbr&gt;CLI&lt;/abbr&gt;, and we also need clarity about the seams between Ember &lt;abbr&gt;CLI&lt;/abbr&gt; and Broccoli—something I’ve only begun to become clear on after a year of hacking on &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt;! This includes a number of kinds of documentation:
&lt;ul&gt;
&lt;li&gt;up-to-date guides&lt;/li&gt;
&lt;li&gt;complete &lt;abbr&gt;API&lt;/abbr&gt; documentation&lt;/li&gt;
&lt;li&gt;a “cookbook” of common patterns to use&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;Ember Data&lt;/strong&gt; docs need to be split into two parts: one for &lt;em&gt;users&lt;/em&gt; of Ember Data, and one for people building Ember Data integrations and addons. Right now, all the docs are targeted squarely at implementors of Ember Data addons. This means that one of the pieces of the Ember ecosystem that’s in widest use (and is &lt;em&gt;most&lt;/em&gt; distinct from the rest of the JS ecosystem!) is really, really hard to learn. This is the part of the framework I still struggle the most with, despite having worked full time on an Ember app for over two years now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ember Engines&lt;/strong&gt; are really need for manually breaking up your app into discrete sections which can be worked on independently and even loaded dynamically as you need them, and they provide a different level of abstraction than route-splitting and other similar approaches. (Not necessarily better or worse, but different.) Unfortunately, most of the documentation hasn’t been touched in over a year. That means if you &lt;em&gt;want&lt;/em&gt; to use Ember Engines, almost all of the information is in an example here and a Slack conversation there. We need to turn that sort of “tribal knowledge” into actual docs!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be clear, the Ember docs team is doing great work and is already going after a lot of these areas; but there’s an enormous amount of ground to cover. They could use your help! Because if Ember is going to flourish in the year(s) ahead, we need good docs. And users are the people best-placed in all the world to help write docs.&lt;/p&gt;
&lt;p&gt;So &lt;strong&gt;how you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open issues about things you don’t understand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you see an error in the documentation, open a pull request to fix it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Volunteer to proofread or edit as new materials are produced. Yes, seriously: proofreading is &lt;em&gt;incredibly&lt;/em&gt; valuable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Volunteer to write documentation of things you &lt;em&gt;do&lt;/em&gt; understand where you see gaps.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="framework-internals" class="level3"&gt;
&lt;h3&gt;Framework internals&lt;/h3&gt;
&lt;p&gt;Every time I have started poking into Ember’s own codebase—to ship a fix for some small bug, or simply to understand the behavior of my own application—I have found myself stymied by a really serious issue. &lt;em&gt;Almost nothing is documented.&lt;/em&gt; This is true of Ember proper, of Ember Data, of Ember &lt;abbr&gt;CLI&lt;/abbr&gt;, of Broccoli’s internals… Everything I named above as being in need of &lt;em&gt;user&lt;/em&gt;-facing documentation also desperately needs &lt;em&gt;developer&lt;/em&gt;-facing documentation.&lt;/p&gt;
&lt;p&gt;A lot of this happens naturally in projects developed organically by small teams. I’ve seen it in my own current job: the &lt;em&gt;vast&lt;/em&gt; majority of our codebase is without any formal documentation, because it didn’t &lt;em&gt;require&lt;/em&gt; it when we were a much smaller organization working on a much smaller codebase. But no project—whether private or open-source—can grow or thrive unless it becomes possible for new contributors to come in, understand the system as it exists, and start making changes effectively. “Tribal knowledge” is &lt;em&gt;not&lt;/em&gt; a bad thing in some contexts, but it does not scale.&lt;/p&gt;
&lt;p&gt;The Ember.js ecosystem needs developer documentation of several sorts, then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Architecture documents:&lt;/strong&gt; what are the pieces of the framework or library in question, and how do they fit together? This is often the hardest piece to maintain, simply because it changes organically over time, and unlike the next couple examples it doesn’t have an inherent attachment to the code. However, it’s also the piece that’s absolutely the most important, because it’s what gives anyone trying to dive in and contribute the orientation they need to be effective.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;“Why” comments:&lt;/strong&gt; The internals of the core libraries very often have good reasons for doing things even in apparently odd ways. However, the reasons for those are &lt;em&gt;very&lt;/em&gt; rarely written down anywhere. This is &lt;em&gt;precisely&lt;/em&gt; what comments are for! If some implementation actually &lt;em&gt;can’t&lt;/em&gt; be simplified in the way it looks like it can, write it down right there in a comment! This will save both you and other developers lots of wasted time with false starts and useless pull requests and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Documentation of private &lt;abbr&gt;API&lt;/abbr&gt;:&lt;/strong&gt; Much of the public-facing &lt;abbr&gt;API&lt;/abbr&gt; for Ember is fairly clear (modulo caveats around completeness and accuracy). However, most internal &lt;abbr&gt;API&lt;/abbr&gt; is essentially entirely undocumented. This makes it &lt;em&gt;extremely&lt;/em&gt; difficult for someone to know how to use the internal &lt;abbr&gt;API&lt;/abbr&gt;s when working on internal code!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these things came home to me pretty sharply as I started poking at the Glimmer VM project to see where and how I can pull together my knowledge of both TypeScript and Rust to drive some of those efforts forward. The core team folks I’ve interacted with have all been &lt;em&gt;extremely&lt;/em&gt; helpful—and that’s always been true all along the way!—but they’re also busy, and taking the time to write down something &lt;em&gt;once&lt;/em&gt; ends up being a major “force multiplier”. You can explain the same thing to multiple different people via multiple different conversations, or you can write it down &lt;em&gt;once&lt;/em&gt; and make it a resource that anyone can use to start working effectively in the system!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you’re a current Ember developer in any part of the ecosystem: &lt;em&gt;start writing down what you know.&lt;/em&gt; If a question comes up more than once, put it in a document somewhere. If nothing else, then you can link to it instead of typing it up one more time in Slack!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re just getting started on developing core Ember functionality: &lt;em&gt;write down what you learn.&lt;/em&gt; If you’re working through some section of the codebase, don’t understand it, and then come to understand it by way of asking questions, add documentation for that! You’ll help the next person coming along behind you!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;In short: please write more things down! We need user-facing and developer-facing documentation; they need to be different and distinct from each other; and we need the whole range in both. That’s an &lt;em&gt;enormous&lt;/em&gt; amount of work, and it’s very different from programming (and therefore harder for many of us).&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But it’s also work that will pay equally enormous dividends in enabling the Ember community to grow in both the &lt;em&gt;number&lt;/em&gt; and the &lt;em&gt;effectiveness&lt;/em&gt; of its contributors—and that’s something we very much need!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Most of Webpack’s bad reputation is long-since undeserved: it &lt;em&gt;was&lt;/em&gt; poorly documented… a few years ago. So was Ember!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’ll let you draw your own conclusions about my own relationship to writing given the absurd number of words I put out on this site.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="typescript"></category><category term="emberjs2018"></category></entry><entry><title>Writing Plans for the Rest of 2018</title><link href="http://www.chriskrycho.com/2018/writing-plans-for-the-rest-of-2018.html" rel="alternate"></link><published>2018-05-18T21:30:00-04:00</published><updated>2018-05-18T21:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-18:/2018/writing-plans-for-the-rest-of-2018.html</id><summary type="html">Don’t worry if it gets quiet around here: I’m just busy knocking out a lot of other things.
</summary><content type="html">&lt;p&gt;A quick note on what you can expect here over the next few months: mostly, not much that isn’t technical, and not &lt;em&gt;very&lt;/em&gt; much of that. I suggested &lt;a href="http://www.chriskrycho.com/2018/intentional-cyclicality.html" title="Intentional Cyclicality (March 6, 2018)"&gt;a couple months ago&lt;/a&gt; that it’s worth intentionally carving out different phases for different things, and I’m intentionally carving out a phase that’s lighter on blogging.&lt;/p&gt;
&lt;p&gt;I have mapped out a pretty aggressive schedule for &lt;a href="https://newrustacean.com"&gt;New Rustacean&lt;/a&gt; to hit some (mostly but not entirely self-imposed) goals and deadlines—on which I’m &lt;em&gt;quite&lt;/em&gt; behind.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; As such, &lt;em&gt;most&lt;/em&gt; of my writing time needs to be dedicated to that through roughly September.&lt;/p&gt;
&lt;p&gt;And it’s not going to change &lt;em&gt;much&lt;/em&gt; even after that, because I have a &lt;em&gt;different&lt;/em&gt; writing project I’ll be starting work on in October.&lt;/p&gt;
&lt;p&gt;It’s not that you won’t get occasional blog posts on ethics and theology and so on. I don’t think I could stop myself from blogging that way from time to time if I &lt;em&gt;wanted&lt;/em&gt; to. But it won’t be the focus, and if things are relatively quiet around here for much of the rest of the year, don’t worry… you know why!&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;As I’ve mentioned here &lt;a href="http://www.chriskrycho.com/2018/on-steam-specifically-running-out-of-it.html" title="On Steam (Specifically, Running Out of It)"&gt;before&lt;/a&gt;: building a workshop for EmberConf proved to be even &lt;em&gt;more&lt;/em&gt; work than I expected going into it, and I followed that up by giving talks at our engineering all-hands and Austin ATX a month later, and a talk at the Denver/Boulder Rust meetup just this week.&lt;/p&gt;
&lt;p&gt;Besides a lightning talk I’m giving at Denver Ember in June, I think I’m done giving talks of any sort for quite some time. Because seriously.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>True Myth 1.3.0 and 2.0.0</title><link href="http://www.chriskrycho.com/2018/true-myth-130-and-200.html" rel="alternate"></link><published>2018-05-18T19:15:00-04:00</published><updated>2018-05-18T19:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-18:/2018/true-myth-130-and-200.html</id><summary type="html">Get `value` and `error` directly after type narrowing, make type definitions Just Work™, drop Flow types, and simplify the contents of the distributed build.
</summary><content type="html">&lt;p&gt;Today I released two versions of &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt;: &lt;a href="https://github.com/chriskrycho/true-myth/releases/tag/v1.3.0"&gt;1.3.0&lt;/a&gt; and &lt;a href="https://github.com/chriskrycho/true-myth/releases/tag/v2.0.0"&gt;2.0.0&lt;/a&gt;. You can read the &lt;a href="https://www.chriskrycho.com/2017/announcing-true-myth-10.html"&gt;1.0 announcement&lt;/a&gt; from last November for an overview of the library and a discussion of why you might want to use the library in the first place!&lt;/p&gt;
&lt;p&gt;Since its initial release last November, True Myth has gone through a number of small &lt;a href="https://github.com/chriskrycho/true-myth/releases" title="True Myth releases on GitHub"&gt;feature and bug fix releases&lt;/a&gt;, each of which is more interesting in its own right than 2.0 is—because there are almost no new “features” here, and the changes to the &lt;em&gt;functionality&lt;/em&gt; which are in 2.0 are purely additive and could readily have gone in 1.3 instead.&lt;/p&gt;
&lt;p&gt;In fact, the act of writing that sentence made me realize that there really &lt;em&gt;should&lt;/em&gt; be a 1.3 which people can trivially upgrade to and then take on the changes in 2.0 later.&lt;/p&gt;
&lt;section id="section" class="level2"&gt;
&lt;h2&gt;– 1.3.0 –&lt;/h2&gt;
&lt;p&gt;There are a few very small changes in 1.3 that are just nice ergonomic wins. (You may also be interested in looking back at the &lt;a href="https://github.com/chriskrycho/true-myth/releases"&gt;list of other releases&lt;/a&gt; to see what else has landed since 1.0.)&lt;/p&gt;
&lt;section id="expose-value-and-error" class="level3"&gt;
&lt;h3&gt;Expose &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; property in &lt;code&gt;Maybe.Just&lt;/code&gt; and &lt;code&gt;Result.Ok&lt;/code&gt; instances, and the &lt;code&gt;error&lt;/code&gt; property in &lt;code&gt;Result.Err&lt;/code&gt; instances, are now &lt;em&gt;public, readonly properties&lt;/em&gt; instead of &lt;em&gt;private properties&lt;/em&gt;. I made those private in the initial implementation because I thought it made more sense to expose them via methods, but experience showed that this is a relatively common pattern in practice:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;function dealsWithAMaybe(couldBeAString: Maybe&amp;lt;string&amp;gt;) {
  if (couldBeAString.isJust()) {
    console.log(`It was! ${couldBeAString.unsafelyUnwrap()}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a contrived example of course, but I and my colleagues found in practice that this is a scenario that comes up relatively often, &lt;em&gt;especially&lt;/em&gt; when integrating with existing code rather than writing new code – control flow patterns there tend to assume early-return-on-&lt;code&gt;null&lt;/code&gt; or similar instead.&lt;/p&gt;
&lt;p&gt;So I made a change (leaning on TypeScript’s notion of &lt;a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards" title="“User-Defined Type Guards” in the TypeScript handbook"&gt;“type narrowing”&lt;/a&gt;) so that you don’t have to use &lt;code&gt;unsafelyUnwrap&lt;/code&gt; in this scenario anymore! You can use the method types, the standalone functions, or direct matching against the variants on the property&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

function dealsWithAMaybe(maybe: Maybe&amp;lt;string&amp;gt;) {
  if (maybe.isJust()) {
    console.log(`It was! ${maybe.value}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;code&gt;Result&lt;/code&gt; case this is even nicer (notice that I’m using the variant, rather than a function, to discriminate between the two and narrow the types here):&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Result, { Variant } from &amp;#39;true-myth/result&amp;#39;;

function dealsWithAResult(result: Result&amp;lt;string, Error&amp;gt;) {
  if (result.variant === Variant.Ok) {
    console.log(`Huzzah: ${result.value}`);
  } else {
    console.log(`Alas: ${result.error.message}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically: you now have more options for handling these scenarios, a nicer &lt;abbr title="application programming interface"&gt;API&lt;/abbr&gt;, and—not that it should &lt;em&gt;usually&lt;/em&gt; matter that much, but for whatever it’s worth—better performance by way of doing things with property lookups instead of function invocations in quite a few places.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="static-helper-methods" class="level3"&gt;
&lt;h3&gt;Static helper methods&lt;/h3&gt;
&lt;p&gt;At my friend and collaborator &lt;a href="https://mobile.twitter.com/bmakuh"&gt;Ben Makuh&lt;/a&gt;’s suggestion, I built a couple static helper methods to go with those. These helpers just give you nice abstractions to drop into functional pipelines. For example, you can lean on the type-narrowing capabilities described above while working through a &lt;em&gt;list&lt;/em&gt; of &lt;code&gt;Maybe&lt;/code&gt;s to &lt;em&gt;know&lt;/em&gt; that an item is a &lt;code&gt;Just&lt;/code&gt; and use the new &lt;code&gt;Just.unwrap&lt;/code&gt; static method in the pipeline:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Maybe, { Just } from &amp;#39;true-myth/maybe&amp;#39;;

function justLengths(maybeStrings: Array&amp;lt;Maybe&amp;lt;string&amp;gt;&amp;gt;) {
  return maybeStrings
    .filter(Maybe.isJust)
.map(Just.unwrap)
    .map(s =&amp;gt; s.length);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Analogous helpers exist for &lt;code&gt;Result&lt;/code&gt; in the form of the &lt;code&gt;Ok.unwrap&lt;/code&gt; and &lt;code&gt;Err.unwrapErr&lt;/code&gt; methods. (&lt;code&gt;Nothing&lt;/code&gt; has no analog for what I hope are obvious reasons!)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tweaks-to-the-variant-properties" class="level3"&gt;
&lt;h3&gt;Tweaks to the &lt;code&gt;variant&lt;/code&gt; properties&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;variant&lt;/code&gt; property on both &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; has changed in two ways:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It is now &lt;code&gt;readonly&lt;/code&gt;. This was an implicit invariant previously—you would break &lt;em&gt;everything&lt;/em&gt; in the library if you changed the &lt;code&gt;variant&lt;/code&gt; value—and I’ve just made it explicit in the type system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is now properly constrained with a &lt;em&gt;literal type&lt;/em&gt; on the concrete instances. That is, the type of &lt;code&gt;Just.variant&lt;/code&gt; is no longer &lt;code&gt;Variant&lt;/code&gt; but specifically &lt;code&gt;Variant.Just&lt;/code&gt;. (This is what enables you to use the variant for narrowing as demonstrated above. I should have done this in 1.0, and just forgot to!)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s it for 1.3.0!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="section-1" class="level2"&gt;
&lt;h2&gt;– 2.0.0 –&lt;/h2&gt;
&lt;p&gt;The 2.0 release is identical in &lt;em&gt;features&lt;/em&gt; with the 1.3 release. However, it makes a breaking change to how consumers interact with the application, requiring updates to your &lt;code&gt;tsconfig.json&lt;/code&gt; file and your bundler configuration, and removing support for Flow types.&lt;/p&gt;
&lt;section id="configuration-file-updates" class="level3"&gt;
&lt;h3&gt;Configuration file updates&lt;/h3&gt;
&lt;p&gt;Getting True Myth working nicely with consuming TypeScript packages has been a source of frustration for me &lt;em&gt;and&lt;/em&gt; others. In short, requiring you to use the &lt;code&gt;&amp;quot;paths&amp;quot;&lt;/code&gt; key in the &lt;code&gt;&amp;quot;compilerOptions&amp;quot;&lt;/code&gt; section of the &lt;code&gt;tsconfig.json&lt;/code&gt; made for an annoying amount of setup work, &lt;em&gt;and&lt;/em&gt; it meant that using True Myth in a library &lt;em&gt;required&lt;/em&gt; you to set it up in any consuming app. No good.&lt;/p&gt;
&lt;p&gt;For type resolution to Just Work™, the types &lt;em&gt;must&lt;/em&gt; be at the root of the distributed package.&lt;/p&gt;
&lt;p&gt;As a result, I’ve stopped using &lt;a href="https://github.com/tildeio/libkit"&gt;libkit&lt;/a&gt;, which put the generated types in a reasonable-seeming but (in my experience) painful-to-use place, and have simplified the build layout substantially.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The types themselves are generated only when publishing an update to npm. They go in the root at that point, and they get cleaned up after publishing. (This is pretty much identical to the solution we came up in &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;The other build files no longer get dropped in a nested &lt;code&gt;src&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Since I was already at it, I renamed the two build directories from &lt;code&gt;commonjs&lt;/code&gt; to &lt;code&gt;cjs&lt;/code&gt; and from &lt;code&gt;modules&lt;/code&gt; to &lt;code&gt;es&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the distributed build now looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/
  index.d.ts
  maybe.d.ts
  result.d.ts
  unit.d.ts
  utils.d.ts
  dist/
    cjs/
      index.js
      maybe.js
      result.js
      unit.js
      utils.js
    es/
      index.js
      maybe.js
      result.js
      unit.js
      utils.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll just need to completely remove the &lt;code&gt;&amp;quot;paths&amp;quot;&lt;/code&gt; mapping for True Myth from your &lt;code&gt;tsconfig.json&lt;/code&gt; and, if you’ve done anything unusual with it, update your bundler configuration to point to the new build location, i.e. &lt;code&gt;dist/commonjs/src&lt;/code&gt; should now just be &lt;code&gt;dist/cjs&lt;/code&gt;. Bundlers which respect the &lt;code&gt;modules&lt;/code&gt; key in &lt;code&gt;package.json&lt;/code&gt; will pick it up automatically, as will Ember &lt;abbr&gt;CLI&lt;/abbr&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="removing-flow-types" class="level3"&gt;
&lt;h3&gt;Removing Flow types&lt;/h3&gt;
&lt;p&gt;To my knowledge, no one is actually using the Flow types for the library. When I first started on it, my collaborator &lt;a href="https://github.com/bmakuh"&gt;Ben Makuh&lt;/a&gt; &lt;em&gt;was&lt;/em&gt; using Flow, but he ended up migrating to TypeScript in the intervening time, and there are no consumers I know of. I was always relatively unsure of their correctness, &lt;em&gt;and&lt;/em&gt; I don’t have a good way to validate their correctness, &lt;em&gt;and&lt;/em&gt; maintaining them involved doing manual work on every release to update the types by hand.&lt;/p&gt;
&lt;p&gt;If you &lt;em&gt;do&lt;/em&gt; use True Myth with Flow, and you’re missing the types, please let me know. I just can’t maintain them myself at this point!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And that’s it! We’ve been using True Myth in production at Olo for quite some time, and it’s proved to be a really valuable tool. Give it a spin and let me know how these latest versions work for you!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’ve made some changes under the hood to take advantage of this as well, so the library should be faster. Probably &lt;em&gt;trivially&lt;/em&gt; faster, but my philosophy around library code is very much &lt;em&gt;be as fast as you can&lt;/em&gt;; it’s a way of considering the people using your code—not just the developers, but the end users.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="functional programming"></category><category term="libraries"></category><category term="software development"></category><category term="open source software"></category><category term="versioning"></category><category term="True Myth"></category></entry><entry><title>Aesthetics and Programming Languages</title><link href="http://www.chriskrycho.com/2018/aesthetics-and-programming-languages.html" rel="alternate"></link><published>2018-05-13T11:00:00-04:00</published><updated>2018-05-13T11:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-13:/2018/aesthetics-and-programming-languages.html</id><summary type="html">Rust isn’t exactly prettier than C♯, but its aesthetics don’t drive me up the wall the same way. Why not?
</summary><content type="html">&lt;p&gt;My distaste for the aesthetics of C&lt;sup&gt;♯&lt;/sup&gt; are fairly well known to people I talk to about programming languages—perhaps equally as well known as my love of Rust. So much so that both are running jokes among some of my colleagues and friends. My hypersensitivity to aesthetics both in general and also specifically in programming languages and work environment is &lt;em&gt;also&lt;/em&gt; so well-known as to be a gag.&lt;/p&gt;
&lt;p&gt;But I was writing a bunch of Rust this weekend, and looking at it and thinking about it and wondering why it is that C&lt;sup&gt;♯&lt;/sup&gt; drives me so up the wall aesthetically and experientially, while Rust doesn’t. On the surface, they don’t actually look all that different.&lt;/p&gt;
&lt;p&gt;Here’s &lt;em&gt;roughly&lt;/em&gt; equivalent code in each:&lt;/p&gt;
&lt;pre class="cs"&gt;&lt;code&gt;public class Person {
    public string Name { get; set; } = &amp;quot;Chris&amp;quot;;

    public void greet() {
        Console.WriteLine($&amp;quot;Hello, {Name}&amp;quot;);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Person {
    name: String,
}

impl Person {
    pub fn new() -&amp;gt; Person {
        Person { name: String::from(&amp;quot;Chris&amp;quot;) }
    }

    pub fn greet(&amp;amp;self) {
        println!(&amp;quot;Hello, {}&amp;quot;, self.name);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you start tossing in generics and lifetimes, Rust can actually end up looking a &lt;em&gt;lot&lt;/em&gt; messier than C&lt;sup&gt;♯&lt;/sup&gt;.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;impl&amp;lt;&amp;#39;a, &amp;#39;b, T, U&amp;gt; SomeTrait&amp;lt;&amp;#39;a, U&amp;gt; for SomeType&amp;lt;&amp;#39;b, U&amp;gt;
where
    T: SomeOtherTrait + YetAnotherTrait,
    U: OhWowSoManyTraits
{
    fn some_trait_method(&amp;amp;self) {
        // ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing about that is what I would call aesthetically beautiful in a general sense! There’s a &lt;em&gt;lot&lt;/em&gt; of syntax.&lt;/p&gt;
&lt;p&gt;What I’ve concluded so far, though, is that my difference in feelings comes down to the way that syntax maps back to the underlying semantics, and my feelings about those underlying semantics. The basic language design approach C&lt;sup&gt;♯&lt;/sup&gt; takes—i.e. everything is a class; mutation is both encouraged and implicit; don’t bother with value types—drives me batty. I don’t love the syntax, not least because it ends up being &lt;em&gt;so&lt;/em&gt; verbose and noisy (you can express the same things in F&lt;sup&gt;♯&lt;/sup&gt; much more briefly)—but also because I actively dislike the programming models it encourages (I don’t like the C&lt;sup&gt;♯&lt;/sup&gt; programming model when I see in in F&lt;sup&gt;♯&lt;/sup&gt; either!).&lt;/p&gt;
&lt;p&gt;Rust, by contrast, matches the way I &lt;em&gt;do&lt;/em&gt; and &lt;em&gt;want to&lt;/em&gt; think about the world. Mutability is allowed but neither actively encouraged nor actively discouraged; more to the point it’s &lt;em&gt;explicit&lt;/em&gt;. Insofar as “shared mutable state is the root of all evil,” Rust has two legs up on C&lt;sup&gt;♯&lt;/sup&gt;: it (a) doesn’t &lt;em&gt;allow&lt;/em&gt; shared mutable state and (b) makes explicit where mutation &lt;em&gt;is&lt;/em&gt; happening. It also separates data from behavior. It also has real value types. It also has sum types and pattern matching. In both cases, a lot of the syntactical noise is inessential, a holdover from the legacy of C; but in Rust’s case the way it maps onto a &lt;em&gt;programming model&lt;/em&gt; that is more like OCaml than like C decreases the pain I feel from that noise.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;could&lt;/em&gt; be taken to validate the idea that syntax doesn’t matter, that the underlying semantics are everything, but that’s not the case. It’s not that I &lt;em&gt;love&lt;/em&gt; Rust’s syntax. It’s that, although I dislike it at times, it doesn’t rise to the level of frustration I feel in C&lt;sup&gt;♯&lt;/sup&gt; because it’s not coupled to a programming model that I loathe. The syntax matters; it’s just not the &lt;em&gt;only&lt;/em&gt; thing that matters.&lt;/p&gt;
&lt;p&gt;An interesting thing to consider: what Rust would look like in a world where it embraced its OCaml roots. (I don’t think Rust should have done this; spending its complexity budget on ideas instead of syntax was the right choice. But it’s still interesting.) The simplest level of translation might look something (very) roughly like this:&lt;/p&gt;
&lt;pre class="haskell"&gt;&lt;code&gt;impl &amp;#39;a &amp;#39;b T U SomeTrait &amp;#39;a T for SomeType &amp;#39;b U
  where T : SomeOtherTrait + YetAnotherTrait

  some_trait_method :: &amp;amp;self -&amp;gt; void
  some_trait_method self =
    -- ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is obviously still a lot of syntax, but it’s all basically necessary given the things Rust is trying to express with lifetimes, ownership, etc.—and I did this off the top of my head with literally &lt;em&gt;no&lt;/em&gt; consideration other than “what’s the most direct translation into roughly Haskell-ish syntax I can write?” It makes me genuinely curious where a language that aimed for Rust’s same kinds of guarantees but actively embracing the ML/Haskell family’s syntax might end up. I have a guess that I’d like it even better than I do Rust.&lt;/p&gt;
</content><category term="csharp"></category><category term="rust"></category><category term="programming languages"></category></entry><entry><title>#EmberJS2018, Part 1</title><link href="http://www.chriskrycho.com/2018/emberjs2018-part-1.html" rel="alternate"></link><published>2018-05-11T09:30:00-04:00</published><updated>2018-05-11T20:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-11:/2018/emberjs2018-part-1.html</id><summary type="html">We don’t need more new features this year. We need to ship the things we already have in progress.</summary><content type="html">&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Docs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-3.html"&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;section id="finishing-what-weve-started" class="level2"&gt;
&lt;h2&gt;Finishing What We’ve Started&lt;/h2&gt;
&lt;p&gt;What I want, more than any new feature anyone could come up with, is for this to be the year Ember.js commits to &lt;em&gt;finishing what we have started&lt;/em&gt;. The last few years have seen the Ember team do a lot of really important exploratory work, including projects like &lt;a href="https://glimmerjs.com"&gt;Glimmer.js&lt;/a&gt;; and we have landed some of the initiatives we have started. But I think it’s fair to say that focus has not been our strong suit. It’s time for a year of &lt;em&gt;shipping&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We need to land all the things we have in flight, and as much as possible avoid the temptation (much though I feel it myself!) to go haring off after interesting new ideas. As such, literally everything I list below is an effort &lt;em&gt;already in progress&lt;/em&gt;. It’s just a matter of making concerted efforts as a community to land them.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And that way of putting it is important: we have to make concerted efforts &lt;em&gt;as a community&lt;/em&gt; to land these things. Very, very few people are paid to work on Ember.js full time—far too few to accomplish all of this! If these things matter to you and your company, find a way to carve out time for it. Even if it’s just a few hours a week, even if it’s “just” (and there’s no “just” about these!) helping out with triage of open issues or answering questions in Slack or Discourse or Stack Overflow, even if it doesn’t &lt;em&gt;feel&lt;/em&gt; like a lot… it adds up.&lt;/p&gt;
&lt;p&gt;To be very clear, before I go any further: none of this is a knock on everything that the Ember core team and community have done in the last couple years. A lot of things that have landed along the way—dropping in the Glimmer rendering engine midway through the 2.x series, landing ES5 getters just weeks ago in Ember 3.1, and so on—are genuinely great! &lt;em&gt;All&lt;/em&gt; that I mean is, a year where we land and polish everything would make everything that much more awesome (and make Ember that much more competitive a choice in the client-side framework world).&lt;/p&gt;
&lt;p&gt;So: what do we need to ship this year?&lt;/p&gt;
&lt;section id="land-glimmer-components-in-ember.js-proper" class="level3"&gt;
&lt;h3&gt;Land Glimmer &lt;code&gt;&amp;lt;Component&amp;gt;&lt;/code&gt;s in Ember.js proper&lt;/h3&gt;
&lt;p&gt;We’ve taken the first steps toward this already via a number of &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;s that were written late last year and merged since. We need to finish the implementation for these. That means getting the &lt;a href="https://github.com/emberjs/ember.js/issues/16301"&gt;Glimmer Components in Ember&lt;/a&gt; quest across the finish line.&lt;/p&gt;
&lt;p&gt;The whole story here will make Ember &lt;em&gt;feel&lt;/em&gt; much more modern in a variety of ways, as well as enabling some great performance and programming model wins: Immutable component arguments! Auto-tracked class properties! &lt;code&gt;&amp;lt;AngleBracketComponent&amp;gt;&lt;/code&gt; invocation! Clear semantic distinctions between arguments and local context! So many good things. We just need to land it! &lt;a href="https://github.com/emberjs/ember.js/issues/16301"&gt;The quest&lt;/a&gt; needs to be moving forward, not stagnant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Show up and volunteer to go after pieces of the quest. There are people willing to mentor you through the work that needs to be done!&lt;/li&gt;
&lt;li&gt;Test it as it lands! You don’t have to commit to &lt;em&gt;shipping&lt;/em&gt; things in your app to &lt;em&gt;test&lt;/em&gt; them in your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="land-a-lot-of-ember-cli-efforts" class="level3"&gt;
&lt;h3&gt;Land a &lt;em&gt;lot&lt;/em&gt; of Ember CLI efforts&lt;/h3&gt;
&lt;p&gt;There are a great many Ember CLI efforts in flight. Every last one of them should be on stable and in use before the end of the year.&lt;/p&gt;
&lt;section id="module-unification" class="level4"&gt;
&lt;h4&gt;Module Unification&lt;/h4&gt;
&lt;p&gt;The &lt;a href="https://github.com/dgeb/rfcs/blob/module-unification/text/0000-module-unification.md"&gt;Module Unification &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;&lt;/a&gt; was opened in May 2016 and merged October 2016. There has been a lot of progress made, but we need to &lt;em&gt;ship it&lt;/em&gt;—from where I stand, it’d be nice if it landed less than 2 years after we approved it! And we’re &lt;a href="https://github.com/emberjs/ember.js/issues/16373"&gt;getting pretty close&lt;/a&gt;; you can actually use the Module Unification blueprint in an Ember application today. Some stuff doesn’t work &lt;em&gt;quite&lt;/em&gt; right yet, but it’s getting close.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; try it out! Spin up new apps with the module unification blueprint flag, and try running the migrator codemod, and report back on what breaks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="broccoli-1.0" class="level4"&gt;
&lt;h4&gt;Broccoli 1.0&lt;/h4&gt;
&lt;p&gt;We’re &lt;em&gt;super&lt;/em&gt; close on this one—Oli Griffiths has done some heroic work on this since EmberConf—but we need to finish it. Ember CLI, for historical reasons, has been using a fork of Broccoli.js for quite some time. This divergence has caused all manner of trouble, including compatibility issues between Broccoli plugins and an inability to take advantage of the best things that have landed in Broccoli since the fork happened.&lt;/p&gt;
&lt;p&gt;Perhaps the single most important example of that is that Broccoli 1.0 supports the use of the system &lt;code&gt;tmp&lt;/code&gt; directory. That single change will improve the performance of Ember CLI &lt;em&gt;dramatically&lt;/em&gt;, especially on Windows. It will also flat-out eliminate a number of bugs and odd behaviors that appear when trying to integrate Ember CLI with other file watching tools (e.g. TypeScript’s &lt;code&gt;--watch&lt;/code&gt; invocation).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; once the Ember CLI team says it’s ready for testing, test your app and addons with it! Make sure that everything works as it should—specifically, that you’re not making any assumptions that depend on either the forked &lt;abbr&gt;API&lt;/abbr&gt; or the location of the &lt;code&gt;tmp&lt;/code&gt; directory used for intermediate build steps.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-new-packager-setup-with-tree-shaking-and-app-splitting" class="level4"&gt;
&lt;h4&gt;The new &lt;code&gt;Packager&lt;/code&gt; setup, with tree-shaking and app-splitting&lt;/h4&gt;
&lt;p&gt;One of the current major pain points with Ember’s build pipeline is that it’s hard to extend, and not really documented at all. (I’ll have a &lt;em&gt;lot&lt;/em&gt; more to say on the question of documentation in the next post!) However, work is in progress to change that, too!&lt;/p&gt;
&lt;p&gt;The accepted-and-actively-being-worked-on &lt;a href="https://github.com/ember-cli/rfcs/blob/master/active/0051-packaging.md"&gt;Packaging Ember CLI &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt;&lt;/a&gt; aims to fix both of these. Quoting from it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The current application build process merges and concatenates input broccoli trees. This behaviour is not well documented and is a tribal knowledge. While the simplicity of this approach is nice, it doesn’t allow for extension. We can refactor our build process and provide more flexibility when desired.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few of the things we can expect to be possible once that effort lands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tree-shaking – we can lean on Rollup.js to get &lt;em&gt;only&lt;/em&gt; the code we actually need, cutting shipped file size dramatically&lt;/li&gt;
&lt;li&gt;app-splitting – lots of different strategies to explore, including route-based or “section”-based, etc.&lt;/li&gt;
&lt;li&gt;static-build-asset-splitting – no reason to cache-bust your &lt;em&gt;dependencies&lt;/em&gt; every time the app releases!&lt;/li&gt;
&lt;li&gt;distinct app builds – you could ship one build of your app for browsers which support ES Modules and one for browsers which don’t (heeeeey, IE11) – letting you minimize the payload size for the ones that do&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you know Ember CLI internals: pop into #-dev-ember-cli and ask how you can help land the features&lt;/li&gt;
&lt;li&gt;If you don’t know Ember CLI internals: also pop into #-dev-ember-cli, but ask instead how you can &lt;em&gt;test&lt;/em&gt; the changes&lt;/li&gt;
&lt;li&gt;Help document those internals (see the next post in this series)&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="install-your-way-to-ember" class="level3"&gt;
&lt;h3&gt;Install-your-way-to-Ember&lt;/h3&gt;
&lt;p&gt;We need to finish splitting apart the Ember source from its current state of still being fairly monolith and get it turned into a true set of packages. The new Modules API which landed last year was a huge step toward this and made the experience on the developer side &lt;em&gt;look&lt;/em&gt; like this should be possible—but that’s still a shim around the actual non-modularized Ember core code. The process of splitting it apart &lt;em&gt;is happening&lt;/em&gt;, but we need to finish it.&lt;/p&gt;
&lt;p&gt;The promise here is huge: Ember will be able to be the kind of thing you can progressively add to your existing applications and slowly convert them, rather than something that comes along all as a large bundle. It’s technically possible to do this today, but you cannot drop in &lt;em&gt;just the view layer&lt;/em&gt;, for example, and that’s a huge value for people who want to try out the programming model or add it for just one feature in an existing application.&lt;/p&gt;
&lt;p&gt;Making it possible for people to install Glimmer components, then the service layer, then the router, and so on as they need it will make adoption easier for people who are curious about the framework. But it will also be a huge boon to those of us already using Ember and wanting to migrate existing applications (often a tangled mix of server-side rendering and massive jQuery spaghetti files!) to Ember progressively. I’ve had multiple scenarios come up at my own job in just the last month where this would have been hugely useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; make it known that you’re willing to help work on breaking apart Ember into its constituent pieces, and as that effort lands (hopefully over the rest of this year!) test it in your own apps and addons, and find the pain points in the install-your-way-to-the-framework process.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="make-typescript-great-everywhere" class="level3"&gt;
&lt;h3&gt;Make TypeScript &lt;em&gt;great&lt;/em&gt; everywhere&lt;/h3&gt;
&lt;p&gt;This one is near and dear to my heart… and it also really falls in no small part to me and the rest of the group working on ember-cli-typescript and type definitions for the Ember ecosystem!&lt;/p&gt;
&lt;p&gt;There are two big wins we can land this year:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Built-in support in Ember.js itself.&lt;/li&gt;
&lt;li&gt;Solid type definitions for the rest of the Ember.js ecosystem&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you don’t like TypeScript, don’t panic! The upshot here will actually be a better experience for &lt;em&gt;all&lt;/em&gt; users of Ember.js.&lt;/p&gt;
&lt;section id="built-in-support-in-ember.js-itself" class="level4"&gt;
&lt;h4&gt;1. Built-in support in Ember.js itself&lt;/h4&gt;
&lt;p&gt;One of my goals for this summer&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; is to finish an &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; making TypeScript a first-class citizen of the Ember.js ecosystem. To clarify what this will and won’t entail (assuming it’s accepted, assuming I ever manage to finish writing it!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ember will &lt;em&gt;always&lt;/em&gt; be JS-first, and it will &lt;em&gt;never&lt;/em&gt; require type metadata reflected to runtime, unlike e.g. Angular. No one will ever have a &lt;em&gt;worse&lt;/em&gt; experience because they prefer JS to TS. The idea will be to make TypeScript an &lt;em&gt;equally&lt;/em&gt; good experience, and to include it for consideration when thinking about design choices for new features.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember users, both JS and TS, will get the &lt;em&gt;benefits&lt;/em&gt; of having good types available right out of the box: many editors and IDEs can use TypeScript type definitions to enable better docs, autocompletion, etc.—and we may even be able to leverage it for &lt;a href="https://twitter.com/__dfreeman/status/994410180661170177"&gt;better validation of Handlebars templates&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll have (because we’ll have to have!) a story on what we support in terms of backwards compatibility and SemVer for TypeScript and Ember and the type definitions. Necessarily, it has been the Wild West for the first year of concentrated effort here, trying to get our type definitions from “barely exist and not useful” to “full coverage and 99% right.” But as TypeScript becomes more widely used, we have to have a stability story, and we very soon will.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s also ongoing work to convert Ember’s own internals to TypeScript, and landing that will help guarantee that the type definitions for Ember are actually &lt;em&gt;correct&lt;/em&gt;, which in turn will make the experience for everyone better. (Bad type definitions are worse than &lt;em&gt;no&lt;/em&gt; type definitions!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; engage in the &lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process once we get it started, and if you are up for it show up to help convert the Ember internals to TypeScript as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solid-type-definitions-for-the-rest-of-the-ember.js-ecosystem" class="level4"&gt;
&lt;h4&gt;2. Solid type definitions for the rest of the Ember.js ecosystem&lt;/h4&gt;
&lt;p&gt;Closely related to making TypeScript a first-class citizen for Ember.js itself is getting the pieces in place for the rest of the ecosystem as well. That means we need type definitions for addons—a &lt;em&gt;lot&lt;/em&gt; of them! The ember-cli-typescript team will (hopefully late this month or in early June) be launching a quest issue to get type definitions for the whole Ember ecosystem in place—by helping convert addons to TS if their authors desire it, or by adding type definitions to the addons if they’re up for it, or by getting them up on DefinitelyTyped if they’re totally disinterested. (And, as I’ll note again in that quest issue, it’s totally fine for people &lt;em&gt;not&lt;/em&gt; to be interested: there &lt;em&gt;is&lt;/em&gt; a maintenance burden there!) The goal, again, is that when you’re using &lt;em&gt;any&lt;/em&gt; part of the Ember ecosystem it’ll be easy to get all the benefits of TypeScript—and indeed that in many cases you’ll get a fair number of those benefits as a JS user.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How you can help:&lt;/strong&gt; participate in the quest issue once it’s live! We’ll help mentor you through the process of converting addons to TypeScript, writing type definitions and getting them well-validated, and so on!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That’s a lot to do. More than enough all by itself, and a lot of moving parts. As such, I’ll reiterate what I said at the start: we don’t need new features this year. &lt;strong&gt;It’s time for a year of &lt;em&gt;shipping&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;To put it in the terms the Rust community used for their similar push at the end of 2017, and which we have often used to describe the ongoing efforts in Rust to land the “Rust 2018 edition”: this is an “impl period”—a play on the Rust &lt;code&gt;impl&lt;/code&gt; keyword, used to describe the &lt;em&gt;implementation&lt;/em&gt; of the behavior associated with a given data type. You can think of this as the same: it’s the implementation of the good ideas we have.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Confession: it was a goal for the spring but I found myself utterly exhausted after EmberConf… and had a full month with &lt;em&gt;another&lt;/em&gt; major talk given for internal purposes afterwards. I’m worn out.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="typescript"></category><category term="emberjs2018"></category></entry><entry><title>“Cultural Marxism” and “Evangelicalism”</title><link href="http://www.chriskrycho.com/2018/cultural-marxism-and-evangelicalism.html" rel="alternate"></link><published>2018-05-10T07:30:00-04:00</published><updated>2018-05-10T07:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-10:/2018/cultural-marxism-and-evangelicalism.html</id><summary type="html">Would Gramsci or Bebbington recognize your use of the terms?
</summary><content type="html">&lt;p&gt;Alan Jacobs &lt;a href="https://blog.ayjay.org/just-for-the-record/" title="just for the record"&gt;posted this yesterday&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are no ideas, no beliefs, no positions that reliably correspond to the phrase “cultural Marxism.” It is a phrase whose use is purely emotive and without denotative value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It occurred to me that the same thing is now equally true of “evangelicalism”: both “cultural marxism” and “evangelicalism” are terms that did have specific content at one point—but, by dint of their cooptation as overly-broad descriptors used primarily in the culture wars, both have been emptied of all of that meaning and therefore utility.&lt;/p&gt;
&lt;p&gt;(I’ll grant you an exception if you demonstrate that you’re actually talking in terms Gramsci or Bebbington respectively would recognize. But not otherwise.)&lt;/p&gt;
</content><category term="evangelicalism"></category><category term="culture"></category></entry><entry><title>Vacation as Helpful Reminder</title><link href="http://www.chriskrycho.com/2018/vacation-as-helpful-reminder.html" rel="alternate"></link><published>2018-05-09T21:00:00-04:00</published><updated>2018-05-09T21:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-09:/2018/vacation-as-helpful-reminder.html</id><summary type="html">&lt;p&gt;One very helpful reminder provided by taking time off: I am not &lt;em&gt;indispensable&lt;/em&gt; to my team; I am &lt;em&gt;valuable&lt;/em&gt; to my team. Those are not the same thing.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;One very helpful reminder provided by taking time off: I am not &lt;em&gt;indispensable&lt;/em&gt; to my team; I am &lt;em&gt;valuable&lt;/em&gt; to my team. Those are not the same thing.&lt;/p&gt;
</content><category term="work"></category></entry><entry><title>On Tweeting (Instead of Writing)</title><link href="http://www.chriskrycho.com/2018/on-tweeting-instead-of-writing.html" rel="alternate"></link><published>2018-05-03T07:30:00-04:00</published><updated>2018-05-03T07:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-03:/2018/on-tweeting-instead-of-writing.html</id><summary type="html">I spent half an hour on Twitter this morning, and tried to engage in some “conversations” there. I wish I hadn’t.
</summary><content type="html">&lt;p&gt;I ended up spending about half an hour on Twitter this morning, a fair bit of it writing out tweets in response to things I’d bumped into. This is not a thing I do often, especially anymore. (There was a time, back in the days of App.net, when I spent a &lt;em&gt;lot&lt;/em&gt; of time conversing in a Twitter-like context.) And as I was thinking on it afterwards, I realized why I don’t often do it anymore: I come away from it dissatisfied. I’d have been &lt;em&gt;far&lt;/em&gt; happier working on the blog post I had started before opening Twitter (for something related to that post).&lt;/p&gt;
&lt;p&gt;Twitter is an interesting medium, but I consistently find that if I attempt to have conversations on Twitter—especially about important topics—I come away frustrated with my inability to say clearly what I mean, and concerned by the very real possibility of being misunderstood by someone who has too little of the context.&lt;/p&gt;
&lt;p&gt;Because Twitter is like standing in the middle of the largest party on earth and &lt;span style="font-variant: small-caps; font-style: italic; font-weight: bold;"&gt;shouting at the top of your lungs&lt;/span&gt; to the person next to you. What you’re saying might make total sense in the context of that specific conversation, and if you could explain the context would make sense to the other people in the room, and yet be open to wild and massive misinterpretation or misunderstanding. Worse, because you are &lt;span style="font-variant: small-caps; font-style: italic; font-weight: bold;"&gt;shouting at the top of your lungs&lt;/span&gt; (not to mention limited in the weirdest way to 280-character blurbs strung together into something only vaguely resembling coherence), it’s difficult to communicate well even to the person you’re talking to.&lt;/p&gt;
&lt;p&gt;I wrote early this year that we should all &lt;a href="https://www.chriskrycho.com/2018/tweet-less-blog-more.html"&gt;tweet less and blog more&lt;/a&gt; and I was reminded forcefully of that. Tweetstorms are worse than blog posts. The fact that more people are apt to interact with them is a &lt;em&gt;downside&lt;/em&gt;, not an &lt;em&gt;upside&lt;/em&gt;, because people are apt to interact with your least articulate, least coherent, least contextualized version of an idea, and they’re encouraged by the medium to respond to it with snappy comebacks.&lt;/p&gt;
&lt;p&gt;I’m not quite at the point where I want to just get off of Twitter entirely—but I’m not far from it either. I have no longer any desire to &lt;em&gt;converse&lt;/em&gt; there, and find decreasing profit in reading anything there but links to interesting essays or blog posts. I’m seriously considering using it as a write-only medium and just piping the users with the highest signal of interesting links &lt;a href="https://feedbin.com/blog/2018/01/11/feedbin-is-the-best-way-to-read-twitter/" title="“Feedbin is the Best Way to Read Twitter”"&gt;right into my &lt;abbr&gt;RSS&lt;/abbr&gt; feed&lt;/a&gt; and having done with it.&lt;/p&gt;
</content><category term="twitter"></category><category term="social media"></category><category term="writing"></category><category term="rss"></category></entry><entry><title>Career Trajectory</title><link href="http://www.chriskrycho.com/2018/career-trajectory.html" rel="alternate"></link><published>2018-05-02T07:00:00-04:00</published><updated>2018-05-02T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-02:/2018/career-trajectory.html</id><summary type="html">I've been thinking a bit, for the last year or so, about my career trajectory. Where do I want to go, and what do I want to do, over the next 5–10 years?</summary><content type="html">&lt;p&gt;I’ve been thinking a bit, for the last year or so, about my &lt;em&gt;career trajectory&lt;/em&gt;. Where do I want to go, and what do I want to do, over the next 5–10 years?&lt;/p&gt;
&lt;p&gt;For the first seven years or so of my working life, I was just learning everything I could in software, following my interests but without much of a conscious plan, and making sure I put food on the table for my family. And I think that was absolutely the right tack to take! I &lt;em&gt;did&lt;/em&gt; learn a ton, across a relatively wide swath of the industry. I have worked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as a cog in megacorporation with over 100,000 employees, writing C targeting a real-time operating system;&lt;/li&gt;
&lt;li&gt;as the sole dedicated software developer in a company where I was the 12th employee, maintaining decades-old Fortran and C and C++ and writing a fair bit of Python in a scientific computing and physics modeling context;&lt;/li&gt;
&lt;li&gt;as a subcontractor for a small consultancy doing PHP and jQuery and (both My- and Postgre)SQL;&lt;/li&gt;
&lt;li&gt;as a solo consultant on projects ranging from WordPress setups to building a small but non-trivial application front-to-back in JavaScript;&lt;/li&gt;
&lt;li&gt;and, most lately, at a VC-funded startup in the very-tricky scale-up phase, writing JavaScript, TypeScript, and a smidge of C&lt;sup&gt;♯&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, I’ve seen nearly every part of the stack to some degree—from writing a lex/yacc parser spike for a one-off assembly language to building rich browser client applications—and I’ve seen a lot of the kinds of companies that exist in our industry. I’ve also seen (and created!) a pretty remarkable amount of tech debt.&lt;/p&gt;
&lt;p&gt;All of which means that, at 30 (almost 31!) and about a year from the end of my first decade in this industry, I’m starting to have a pretty good sense of the things I like, the things I don’t, and some of the directions I might like to go in the future.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; It actually feels a little odd, precisely &lt;em&gt;because&lt;/em&gt; I just went where my interests and reasonably good opportunities appeared.&lt;/p&gt;
&lt;p&gt;But it’s also important. I know better now than I did a decade ago the things that bring me joy and the places where I’m best equipped to contribute effectively to a team. (I am of course also far better equipped to contribute effectively to a team than I was when I started!) I find that I care enormously about what to build as well as how to build it—my instincts and interests seem to be roughly 25% product person, 25% mentor and teacher, and 50% individual contributor, with a particular interest in building enabling tools for others.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; I have no idea where that will take me in the future, and I’m working closely with my (really excellent) manager at Olo to find ways to both use and develop those effectively where I am.&lt;/p&gt;
&lt;p&gt;There are two upshots to all of this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;If you’re a young developer (or, &lt;em&gt;probably&lt;/em&gt;, early on in almost any field), getting as varied—but not shallow!—experience you can in the early years is incredibly valuable. That goes double if you’re coming in from a “non-traditional” background as I did, because it’s a great way to get exposed practically to a lot of the different parts of software and to computer science ideas you won’t if you stay in just one spot. That’s obviously a hard luxury to come by in some ways, but if you &lt;em&gt;can&lt;/em&gt; manage it, it pays huge dividends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m happy to be starting to have a sense of &lt;em&gt;direction&lt;/em&gt; and &lt;em&gt;trajectory&lt;/em&gt;. I’m in the early stages of that, though; I’m curious to see what I sort out in conversation with Jaimie and my church community and others I trust, as well as my leadership at Olo, over the next year.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;To be clear to any fellow &lt;a href="https://www.olo.com"&gt;Olo&lt;/a&gt;-ers who might read this: I’m not planning to go anywhere soon. This isn’t &lt;em&gt;that&lt;/em&gt; kind of post.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Hello, &lt;a href="https://newrustacean.com"&gt;New Rustacean&lt;/a&gt; and &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt;…&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="work"></category><category term="software development"></category></entry><entry><title>A Humanist Frame</title><link href="http://www.chriskrycho.com/2018/a-humanist-frame.html" rel="alternate"></link><published>2018-05-01T07:00:00-04:00</published><updated>2018-05-01T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-05-01:/2018/a-humanist-frame.html</id><summary type="html">A few thoughts this morning on technologies, community, and the need for a positive (as well as a negative) vision of technology, cities, and indeed liberty—taking the latest issue of Michael Sacasas' newsletter The Convivial Society as a jumping off point.
</summary><content type="html">&lt;p&gt;A few thoughts this morning on technologies, community, and the need for a positive (as well as a negative) vision of technology, cities, and indeed liberty—taking &lt;a href="https://tinyletter.com/lmsacasas/letters/the-convivial-society-no-4-community" title="No. 4: Community"&gt;the latest issue&lt;/a&gt; of Michael Sacasas’ newsletter &lt;a href="https://tinyletter.com/lmsacasas/archive"&gt;The Convivial Society&lt;/a&gt; as a jumping off point.&lt;/p&gt;
&lt;aside&gt;
I don’t expect to link quite so often to the same writer, so don’t worry: this isn’t about to become a secondary feed for Sacasas’ writing. I do commend the newsletter, and especially this issue of it, to you. This essay, which I quote in brief, does something I hope to be able to do in a piece of writing someday: it &lt;em&gt;hangs together&lt;/em&gt; marvelously. There are standout paragraphs, but each one connects to those before and after it, and the essay is—in the best way—not excerpt-able. You should read the whole thing. If you have to choose, read that instead of this (seriously).
&lt;/aside&gt;
&lt;p&gt;Early in the newsletter, Sacasas offers this note on technological visionaries stretching back to the telegraph (at least):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It seems that none of these visionaries ever took into consideration the possibility that the moral frailties of human nature would only be amplified by their new technologies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He shortly thereafter suggests why that vision proved so alluring—the too-readily amplified frailties of human nature notwithstanding:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The rise of communication technologies from the mid-19th century through today has roughly coincided with the dissolution and degradation of the traditional communities, broken and often cruel though they may have been, that provided individuals with a relatively integrated experience of place and self. In 1953, the sociologist Robert Nisbett could write of the “quest for community” as the “dominant social tendency of the twentieth century.” Framing a new technology as a source of community, in other words, trades on an unfulfilled desire for community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What strikes me as most interesting here is that Sacasas notes, even if only as an aside, one of the most important things that most critics of our current techno/cultural milieu seem entirely content to skip over: that the traditional communities &lt;em&gt;were&lt;/em&gt; “broken and often cruel.” One of the reasons that the social revolutions of the last 150 years have had such force is precisely this: that the traditional communities so casually valorized today (though not by Sacasas himself) may have helped people have “an integrated experience of place and self”—but that experience was, often as not, one of &lt;em&gt;abuse&lt;/em&gt;: of ethnic minorities, of women, of anyone outside the gentry…&lt;/p&gt;
&lt;p&gt;Sacasas’ description—“broken and often cruel”—is more right than is usually granted in these discussions. If we want to escape the shackles of atomistic individualism, we had best be thinking of something other than the glorious past, because the past was not glorious.&lt;/p&gt;
&lt;p&gt;Third, and closely related to the above considerations: Sacasas closes the newsletter with a quote from Willa Cather’s &lt;em&gt;O Pioneers!&lt;/em&gt;, adding his own emphasis. I’ll reproduce the quotation in full here as he gave it (so: emphasis his) and then comment below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“You see,” he went on calmly, “measured by your standards here, I’m a failure. I couldn’t buy even one of your cornfields. I’ve enjoyed a great many things, but I’ve got nothing to show for it all.”&lt;/p&gt;
&lt;p&gt;“But you show for it yourself, Carl. I’d rather have had your freedom than my land.”&lt;/p&gt;
&lt;p&gt;Carl shook his head mournfully. “&lt;strong&gt;Freedom so often means that one isn’t needed anywhere.&lt;/strong&gt; Here you are an individual, you have a background of your own, you would be missed. But off there in the cities there are thousands of rolling stones like me. We are all alike; we have no ties, we know nobody, we own nothing. When one of us dies, they scarcely know where to bury him. Our landlady and the delicatessen man are our mourners, and we leave nothing behind us but a frock-coat and a fiddle, or an easel, or a typewriter, or whatever tool we got our living by. All we have ever managed to do is to pay our rent, the exorbitant rent that one has to pay for a few square feet of space near the heart of things. We have no house, no place, no people of our own. We live in the streets, in the parks, in the theaters. We sit in restaurants and concert halls and look about at the hundreds of our own kind and shudder.”&lt;/p&gt;
&lt;p&gt;Alexandra was silent. She sat looking at the silver spot the moon made on the surface of the pond down in the pasture. He knew that she understood what he meant. At last she said slowly, “And yet I would rather have Emil grow up like that than like his two brothers. We pay a high rent, too, though we pay differently. We grow hard and heavy here. We don’t move lightly and easily as you do, and our minds get stiff. If the world were no wider than my cornfields, if there were not something beside this, I wouldn’t feel that it was much worth while to work. No, I would rather have Emil like you than like them. I felt that as soon as you came.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sacasas—with many others who are rightly critical of the social situation we have made for ourselves here in late modernity, including many of my friends over at &lt;a href="https://mereorthodoxy.com/book-review-liberalism-failed-patrick-deneen/" title="Example: Jake Meador&amp;#39;s sympathetic review of Deneen&amp;#39;s Why Liberalism Failed"&gt;Mere Orthodoxy&lt;/a&gt;—calls out the ways that our unrestrained freedom has come at a great cost to us. These critics are right to do so. But the bit that caught my attention as &lt;em&gt;equally&lt;/em&gt; worthy of notice in the section from Cather is Alexandra’s response (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We pay a high rent, too, though we pay differently. We grow hard and heavy here. We don’t move lightly and easily as you do, and our minds get stiff. If the world were no wider than my cornfields, if there were not something beside this, I wouldn’t feel that it was much worth while to work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is something in this exchange of the tension between agrarianism and urbanism that seems to come up every time Wendell Berry is mentioned. It is true that cities (and late modernity!) often offer a kind of freedom that itself is slavery. But it is also true that the slavery of freedom is not the only kind of slavery.&lt;/p&gt;
&lt;p&gt;It remains one of my chief concerns that few who &lt;em&gt;are&lt;/em&gt; taking seriously the problems we have made for ourselves in modernity seem interested in finding solutions that work &lt;em&gt;in cities&lt;/em&gt;. It is one thing to have a healthy suspicion of the kind of city-centrism and techno-centrism and indeed techno-fundamentalism that is largely the order of the day. It is something else entirely, however, to fail to imagine either city or technological milieu as &lt;em&gt;possibly good&lt;/em&gt;. (To be clear, this does not seem to be the tack that Sacasas is taking; and it is not so much that someone like my friend Jake Meador is &lt;em&gt;hostile&lt;/em&gt; to cities as that his own sympathies run more to rural life.) This is, I think, part of what &lt;a href="http://stephencarradini.com"&gt;Stephen Carradini&lt;/a&gt; has been getting at in his own more optimistic view in especially our &lt;a href="https://winningslowly.org/6.04/" title="6.04: Move Slowly and Fix Things"&gt;most recent Winning Slowly episode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We must reject techno-utopianism; we must repent of our worship of technique. But we &lt;em&gt;must not&lt;/em&gt; make the usual conservative mistake and stop with the mere rejection of something bad. &lt;a href="http://bib.ly/luke11.24-26" title="Luke 11:24–26"&gt;That tends not to go so well.&lt;/a&gt; Instead, we need to consciously develop a frame that situates technology as properly subordinate to the humane, and which sets cities and farms and small towns and moon colonies not in opposition to each other but as complements.&lt;/p&gt;
</content><category term="ethics"></category><category term="community"></category></entry><entry><title>The Cost of Google as Memory Prosthesis</title><link href="http://www.chriskrycho.com/2018/the-cost-of-google-as-memory-prosthesis.html" rel="alternate"></link><published>2018-04-30T07:00:00-04:00</published><updated>2018-04-30T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-04-30:/2018/the-cost-of-google-as-memory-prosthesis.html</id><summary type="html">I’ve had a bunch of thoughts about thinking and memory on my mind over the last decade, and have never really spent a lot of time writing them down. Jaimie has gotten to hear most of them, for good or ill. But Sacasas covers a *lot* of the most important pieces of it in the pieces linked in this post!
</summary><content type="html">&lt;p&gt;This is less a blog post in the normal sense and more a bunch of links to old posts by L. M. Sacasas. (If you’re not subscribed to his blog, &lt;a href="https://thefrailestthing.com"&gt;The Frailest Thing&lt;/a&gt;, you should be. &lt;a href="https://thefrailestthing.com/feed/"&gt;Here’s the RSS feed&lt;/a&gt;; you can just copy and paste that link into your feed reader. You do &lt;a href="http://text-patterns.thenewatlantis.com/2017/02/a-further-word-of-exhortation-rss.html" title="Alan Jacobs – a further word of exhortation: RSS"&gt;use RSS, right?&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I’ve had a bunch of thoughts about thinking and memory on my mind over the last decade, and have never really spent a lot of time writing them down. Jaimie has gotten to hear most of them, for good or ill. But Sacasas covers a &lt;em&gt;lot&lt;/em&gt; of the most important pieces of it in &lt;a href="https://thefrailestthing.com/2011/09/15/dont-offload-your-memory-quite-yet-cognitive-science-memory-and-education/"&gt;this post&lt;/a&gt; and others linked below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The problem is that we tend to conceive of thinking analogously to how we imagine a computer works and we abstract processes from data. We treat “critical thinking” as a process that can be taught independently of any specific data or information. On the contrary, according to Willingham, the findings of cognitive science suggest that “[c]ritical thinking processes are tied to background knowledge” and “we must ensure that students acquire background knowledge parallel with practicing critical thinking skills.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the chief ways I feel the bitter sting of &lt;a href="https://www.theatlantic.com/magazine/archive/2008/07/is-google-making-us-stupid/306868/" title="Nick Carr: “Is Google Making Us Stupid?”"&gt;“the shallows”&lt;/a&gt; is in precisely this: that I &lt;em&gt;have&lt;/em&gt; too often let Google do the work my memory should. But memory and connection and those startling leaps of insight that come from them are not substitutable by a search engine. Thinking happens as much in the background of the rest of our lives as it does on demand; and &lt;em&gt;good&lt;/em&gt; answers to questions come as we put questions &lt;em&gt;to ourselves&lt;/em&gt;, rather than to a database, even one powered by sophisticated sets of derivatives (a.k.a. “machine learning”).&lt;/p&gt;
&lt;p&gt;Databases are potentially very useful tools. But their utility is specific, and we should circumscribe our uses of them, and especially our reliance on them, accordingly.&lt;/p&gt;
&lt;p&gt;So… read Sacasas on memory!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thefrailestthing.com/2011/09/15/dont-offload-your-memory-quite-yet-cognitive-science-memory-and-education/"&gt; Don’t Offload Your Memory Quite Yet: Cognitive Science, Memory, and Education &lt;/a&gt; (the post quoted above)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thefrailestthing.com/2011/07/15/offloaded-memory-and-its-discontents-or-why-life-isnt-a-game-of-jeopardy/"&gt;Offloaded Memory and Its Discontents (or, Why Life Isn’t a Game of Jeopardy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thefrailestthing.com/2011/03/04/the-connecting-is-the-thinking-memory-and-creativity/"&gt;‘The Connecting Is the Thinking’: Memory and Creativity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thefrailestthing.com/2011/01/04/order-memory-and-history/"&gt;Order, Memory, and History&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if it doesn’t go without saying… follow the links in those; there’s a lot of good material there.&lt;/p&gt;
</content></entry><entry><title>Disciplining</title><link href="http://www.chriskrycho.com/2018/disciplining.html" rel="alternate"></link><published>2018-04-18T06:35:00-04:00</published><updated>2018-04-18T06:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-04-18:/2018/disciplining.html</id><summary type="html">I’ve been thinking a lot recently about how we discipline our children. Nothing new, just working hard at practicing what we already think. We’ve been “in the trenches” with our three-year-old a bit, because, well… she’s three! Being three is hard! You have an absurd amount you’re learning, and sometimes it breaks your brain! And so being the parent of a three-year-old is also hard.
</summary><content type="html">&lt;p&gt;I’ve been thinking a lot recently about how we discipline our children. Nothing &lt;em&gt;new&lt;/em&gt;, just working hard at practicing what we already think. We’ve been “in the trenches” with our three-year-old a bit, because, well… she’s three! Being three is hard! You have an absurd amount you’re learning, and sometimes it breaks your brain! And so being the parent of a three-year-old is &lt;em&gt;also&lt;/em&gt; hard.&lt;/p&gt;
&lt;p&gt;For the last several days, I’ve been working very hard to help Kate listen and obey. That way of putting it is intentional and important.&lt;/p&gt;
&lt;p&gt;In my observation, the default tendency in conservative Christian circles is to respond to disobedience and willfulness with direct consequences, &lt;em&gt;stat&lt;/em&gt;. There is usually a good motivation behind this, too. We recognize that learning to listen and obey is good and necessary! We don’t want to make the mistake of letting our kids go un-disciplined and so untrained in things they need to be trained in. That said, the extremely common notion that our kids should be immediately given a &lt;em&gt;consequence&lt;/em&gt; of some sort if they don’t “obey the first time, right away, with a happy heart” seems to me profoundly misguided—more than that, profoundly out of step with the way God “parents” his people in Scripture.&lt;/p&gt;
&lt;p&gt;I’ve often remarked to Jaimie as we’ve considered parenting that if we actually look closely at God’s treatment of his people as our model, it doesn’t look &lt;em&gt;anything&lt;/em&gt; like the “obey immediately or receive a consequence” model. To the contrary.&lt;/p&gt;
&lt;p&gt;Let’s review: God saves Israel from slavery and makes a covenant with them. The terms of that covenant are such that if they violate it, God is within his rights in the terms of the covenant to send them into exile—to remove them from the land he gave them. And in the &lt;em&gt;first generation&lt;/em&gt;, they flagrantly disobey and violate the terms of the covenant. So, game over, right? Off to exile you go! Well… no. God warns, and then disciplines (in the context of national-level consequences!) mildly, and quickly restores when his people cry for help. Over and over again, for 500–700 years, or somewhere between 15 and 25 generations. And many parts of his law they seem &lt;em&gt;never&lt;/em&gt; to have kept—the Jubilees, for example. God’s patience is astounding. He is, as Exodus 34 puts it, &lt;em&gt;slow to anger and abounding in covenant love&lt;/em&gt;. This isn’t a lack of discipline. But it is extraordinary patience and grace, amazing time devoted to teaching the people how to walk with him even as they got it wrong again and again.&lt;/p&gt;
&lt;p&gt;If I’m going to parent in a way that points my kids toward God, that helps them genuinely trust Christ, then my parenting ought to be shaped by all of that. I ought to be slow to anger and abounding in love. I ought to be patient and gracious. I ought to aim not merely to either get the desired behavior or immediately mete out a consequence, but to teach my kids &lt;em&gt;how&lt;/em&gt; to do what they should.&lt;/p&gt;
&lt;p&gt;So, for the past few days, I have been working (again! This is not new; we just forget) to help our three-year-old listen and obey. When she does not listen, I get her attention again and remind her that she needs to listen and obey—not least because it’s sometimes very important that she do so! (If we’re outside and near a street and she starts to wander into the road…) And if she still does not listen and obey, I will get down on my knees right in front of her, and look her right in the eyes on her own level, and make her repeat after me exactly what I’ve said. And if she &lt;em&gt;still&lt;/em&gt; doesn’t listen, yes, I will give her a consequence for that, to help her learn: that sin has consequences, and so that listening and obeying &lt;em&gt;feel&lt;/em&gt; important to her. But when she does listen—even if it takes all that repetition!—we celebrate with her and give her a high five or a hug or both. Again: so that she learns that doing well is &lt;em&gt;good&lt;/em&gt; and that there is a reward for doing well.&lt;/p&gt;
&lt;p&gt;That act of getting down on my knees and helping her obey is good for me, too. It’s a concrete action that reminds me: this is a little &lt;em&gt;person&lt;/em&gt;, made in the image of God, who is struggling to keep his commands. She is just like me. More: I can be in that moment a little picture to her, to myself, and to my family of God the Son, who came down to &lt;em&gt;our&lt;/em&gt; level in a way that far outstrips a father getting down on his knees. I cannot save my three-year-old from her sin and her death; I can only point her to the one who does. But that I &lt;em&gt;can&lt;/em&gt; do. I can remind her, not only with my words (important though they are!) but also with what I do with my body, of the one who loved us enough to bear with us along the way and to bear in himself the cost of our failings.&lt;/p&gt;
</content><category term="family"></category></entry><entry><title>On Steam (Specifically, Running Out of It)</title><link href="http://www.chriskrycho.com/2018/on-steam-specifically-running-out-of-it.html" rel="alternate"></link><published>2018-04-05T07:00:00-04:00</published><updated>2018-10-11T08:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-04-05:/2018/on-steam-specifically-running-out-of-it.html</id><summary type="html">I find myself this morning almost unable to write at all, and quite unable to write what I was planning to be writing today. I’m all out of steam.
</summary><content type="html">&lt;p&gt;I find myself this morning almost unable to write at all, and quite unable to write what I was &lt;em&gt;planning&lt;/em&gt; to be writing today. (I’ve been steadily pushing forward on &lt;a href="https://github.com/typed-ember/ember-typings/issues/14"&gt;a big “quest”-style issue for an open source software project I help maintain&lt;/a&gt;, and that’s how I planned to spend my writing time today.) But I’m feeling quite keenly the need of some time away from that project and indeed from a lot of the things that have had me burning the candle at both ends.&lt;/p&gt;
&lt;p&gt;I’ve noted before that I &lt;a href="http://www.chriskrycho.com/2018/intentional-cyclicality.html"&gt;go in cycles&lt;/a&gt;; one thing that I’ve also started to notice is that those cycles, unsurprisingly, include points where I’m just &lt;em&gt;done&lt;/em&gt;. I’m all out of steam. And I seem to have hit one of those just this week.&lt;/p&gt;
&lt;p&gt;It makes sense: since last October, as a family we’ve moved across the country; lived with my parents for three months, during which time we learned that my dad had brain cancer and helped him and my mom through the surgery, recovery, and early parts of chemo and radiation); then moved into a new house; and joined a new church.&lt;/p&gt;
&lt;p&gt;On top of that I’ve personally continued working on &lt;a href="https://newrustacean.com"&gt;New Rustacean&lt;/a&gt; and &lt;a href="https://winningslowly.org"&gt;Winning Slowly&lt;/a&gt;, helped ship the most important release of &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt; in the project’s history, taught a workshop on TypeScript at EmberConf, and helped kick off one of the most important front-end development projects in Olo’s history.&lt;/p&gt;
&lt;p&gt;Of &lt;em&gt;course&lt;/em&gt; I’m tired. Of &lt;em&gt;course&lt;/em&gt; I feel like I’m just out of steam.&lt;/p&gt;
&lt;p&gt;The trick, for the moment, is that there are some things I really feel I should carry to some specific points &lt;em&gt;before&lt;/em&gt; I take a week or two off. Getting that quest issue that I was going to be writing this morning done, and a related &lt;a href="https://github.com/emberjs/rfcs"&gt;Ember.js RFC&lt;/a&gt; on the relationship of TypeScript and Ember.js, and getting the first of our beta releases for this project at Olo out the door… all of those are things that really just &lt;em&gt;need&lt;/em&gt; to happen before I take that time off. After I get through those, though, I think I’m taking a week or so off. Maybe time it with Memorial Day to make it a full 10 days or something.&lt;/p&gt;
&lt;p&gt;And in the meantime, I do things like write little blog posts thinking about “running out of steam” not because it’s all that important for the world to know, but because it’s a way of keeping &lt;em&gt;some&lt;/em&gt; degree of forward momentum, continuing to maintain my &lt;a href="http://www.chriskrycho.com/2017/momentum.html"&gt;daily writing habit&lt;/a&gt;, and generally doing all the little things that make it possible for me to actually get across the finish line on those projects.&lt;/p&gt;
&lt;p&gt;Because—weird though it may seem in some ways—even when I’m tired like it, I know through long experience that the way I actually get across those finish lines is by keeping up my forward motion. It’s very much like the feeling in the last 5k of a half marathon. (A half marathon is two five-milers and a 5k, and thinking about it that way is the way to run it effectively.)&lt;/p&gt;
&lt;p&gt;Everything hurts. You don’t feel like you have anything left. But in fact, if you’ve done the right things up to that point, you &lt;em&gt;do&lt;/em&gt; have enough left. The way to finish well is not only to keep putting one foot in front of the other, but also to push a little harder, and a little harder, and a little harder, until you hit the finish line. You have to watch out, of course, and not hurt yourself. That’s the trick with mental fatigue, too. Burnout is a real thing. But, as with running, if you’ve built up your mental muscles well and built up the reserves of &lt;em&gt;experience&lt;/em&gt; that you need, you know the difference. You know when you need to stop early for a day and go read a novel. You know when to push through. You know when to take a day off of the quest issue and write a quirky, and not-all-that-coherent, blog post about the experience of fatigue and thinking about pushing on. And you know that you still need to finish.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit (October 11, 2018):&lt;/strong&gt; I’ve added my &lt;a href="https://www.chriskrycho.com/burnout/"&gt;#burnout&lt;/a&gt; tag to this post retroactively because I now recognize much of what I wrote here as some of the earlier symptoms of what I didn’t concretely identify until &lt;a href="https://www.chriskrycho.com/2018/some-mild-burnout.html"&gt;a bit later&lt;/a&gt;.&lt;/p&gt;
</content><category term="productivity"></category><category term="writing"></category><category term="open-source software"></category><category term="burnout"></category></entry><entry><title>Exploring 4 Languages: Integrity and Consistency</title><link href="http://www.chriskrycho.com/2018/exploring-4-languages-integrity-and-consistency.html" rel="alternate"></link><published>2018-03-24T22:00:00-04:00</published><updated>2018-03-24T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-03-24:/2018/exploring-4-languages-integrity-and-consistency.html</id><summary type="html">Using the type systems of Rust, Elm, F♯, and ReasonML to not only model a domain but to make sure we keep our promises.
</summary><content type="html">&lt;p&gt;In chapter 6, Wlaschin turns to one of the most important aspects of “domain modeling”: keeping it consistent. It’s all well and good to set up a domain model, but if you don’t have a way to make sure that model is reliable everywhere you use it, well… you’ve done a lot of extra work and you’re not going to see a lot of results for all that effort! But as Wlaschin points out, we can actually use the type systems, and the types we wrote up in the previous chapter, to help us enforce the business &lt;em&gt;rules&lt;/em&gt; for our domain (as well as the business &lt;em&gt;shapes&lt;/em&gt; in the domain).&lt;/p&gt;
&lt;p&gt;An important note: you can see the latest version of this code (along with history indicating some of my travails in getting there!) in &lt;a href="https://github.com/chriskrycho/dmmf"&gt;this public repository on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;section id="a-simple-example-widgetcode" class="level2"&gt;
&lt;h2&gt;A simple example: &lt;code&gt;WidgetCode&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We’ll start with one of the simpler examples: validating that a &lt;code&gt;WidgetCode&lt;/code&gt; is legitimate. A &lt;code&gt;WidgetCode&lt;/code&gt;, in this domain, is valid if, and &lt;em&gt;only&lt;/em&gt; if, it has a &lt;code&gt;W&lt;/code&gt; followed by four digits.&lt;/p&gt;
&lt;p&gt;The basic tack we’ll take, in all four languages, is to leverage the way the types work to make it so we have to use a function to create a valid instance of a &lt;code&gt;WidgetCode&lt;/code&gt;. That’s a bit of extra work (though especially in the functional-first languages, it ends up not being a &lt;em&gt;lot&lt;/em&gt; of extra work) but it lets us use &lt;code&gt;Result&lt;/code&gt; types to handle invalid data up front.&lt;/p&gt;
&lt;p&gt;The downside is that we can’t just get directly at the value inside our wrapper types using basic pattern matching. Instead, we need to be provide a function for “unwrapping” it. Tradeoffs!&lt;/p&gt;
&lt;p&gt;We’ll go at this using the most appropriate tool from each language, but in every case we’ll end up with a &lt;code&gt;create&lt;/code&gt; function that takes a string and returns a &lt;code&gt;Result&lt;/code&gt; with the successful option being a &lt;code&gt;WidgetCode&lt;/code&gt; and the error option being a string describing the error; and a &lt;code&gt;value&lt;/code&gt; function to unwrap a valid code. Throughout, I also assume an essentially-identical implementation of a related &lt;code&gt;GizmoCode&lt;/code&gt; type; I pull both in to show how they end up being used side by side.&lt;/p&gt;
&lt;section id="rust" class="level3"&gt;
&lt;h3&gt;Rust&lt;/h3&gt;
&lt;p&gt;We are using a tuple struct to wrap the string value here. Since there is no &lt;code&gt;pub&lt;/code&gt; modifier in the wrapped &lt;code&gt;String&lt;/code&gt;, it’s opaque from the perspective of the caller—and this is exactly what we want. We’ll pull in &lt;a href="https://docs.rs/regex/0.2.10/regex/"&gt;the &lt;code&gt;Regex&lt;/code&gt; crate&lt;/a&gt; and validate the code passed to us on creation.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use regex::Regex;

pub struct WidgetCode(String);

impl WidgetCode {
    pub fn create(code: &amp;amp;str) -&amp;gt; Result&amp;lt;WidgetCode, String&amp;gt; {
        let re = Regex::new(r&amp;quot;W\d{4}&amp;quot;).expect(r&amp;quot;W\d{4} is a valid regex&amp;quot;);
        if re.is_match(code) {
            Ok(WidgetCode(String::from(code)))
        } else {
            Err(String::from(
                &amp;quot;`WidgetCode` must begin with a &amp;#39;W&amp;#39; and be followed by 4 digits&amp;quot;,
            ))
        }
    }

    pub fn value(&amp;amp;self) -&amp;gt; &amp;amp;str {
        &amp;amp;self.0
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is fairly idiomatic Rust: we’re &lt;em&gt;borrowing&lt;/em&gt; a &lt;em&gt;reference&lt;/em&gt; to the code as a “string slice”, and creating a new, wrapped &lt;code&gt;String&lt;/code&gt; instance to wrap up the code &lt;em&gt;or&lt;/em&gt; return a new &lt;code&gt;String&lt;/code&gt; as an error. When we get the value out, we return a reference to the string,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; with &lt;code&gt;&amp;amp;self.0&lt;/code&gt;: &lt;code&gt;&amp;amp;&lt;/code&gt; to indicate a reference, &lt;code&gt;.0&lt;/code&gt; to indicate the first item of a tuple. Note as well that the final &lt;code&gt;if&lt;/code&gt; block here is an expression. There’s no semicolon terminating it, and this whole &lt;code&gt;if&lt;/code&gt; block ends up being the resulting value of the function.&lt;/p&gt;
&lt;p&gt;One other point of interest here is that the creation of the regex &lt;em&gt;itself&lt;/em&gt; is checked by the compiler for us! If we pass an invalid regular expression, this simply won’t compile.&lt;/p&gt;
&lt;p&gt;This could also live in its own module, &lt;code&gt;ordering/widget_code.rs&lt;/code&gt;, and in fact that’s how I would normally do this (and have in the repository where I’m working): every one of these small types would get its own module file within the containing &lt;code&gt;Ordering&lt;/code&gt; module. It’s not &lt;em&gt;necessary&lt;/em&gt;, but as the domain model grows, it becomes increasingly &lt;em&gt;convenient&lt;/em&gt; in that you always know where to find things.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then we can import it and use it like this in &lt;code&gt;ordering/mod.rs&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;mod widget_code;
mod gizmo_code;

use widget_code::WidgetCode;
use gizmo_code::GizmoCode;

pub enum ProductCode {
    Widget(WidgetCode),
    Gizmo(GizmoCode),
}

fn demo_it() {
    let valid = WidgetCode::create(&amp;quot;W1234&amp;quot;);
    let invalid = WidgetCode::create(&amp;quot;wat&amp;quot;);

    let unwrapped = match valid {
        Ok(ref code) =&amp;gt; code.value(),
        Err(_) =&amp;gt; &amp;quot;&amp;quot;,
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that in Rust, the &lt;code&gt;mod.rs&lt;/code&gt; file declares all child modules. If you had a &lt;code&gt;widget_code.rs&lt;/code&gt; on the file system but no &lt;code&gt;mod widget_code;&lt;/code&gt;, Rust would just ignore the declaration entirely. Then Rust also requires us to &lt;code&gt;use widget_code;&lt;/code&gt; to access its contents. The distinction between declaring and using a given module makes some sense: by the time all is said and done with this exercise, we won’t be doing much of anything in this &lt;code&gt;Ordering&lt;/code&gt; module; it’ll exist primarily as a grouping construct for all the &lt;em&gt;other&lt;/em&gt; modules.&lt;/p&gt;
&lt;p&gt;In this case, we go ahead and import the &lt;code&gt;WidgetCode&lt;/code&gt; type from the module. We only have the one type there, with no standalone functions: everything is attached to the type via the &lt;code&gt;impl&lt;/code&gt; block; so we can just call everything directly off of the type. This ends up feeling &lt;em&gt;kind of&lt;/em&gt; like the way we’d do things in a traditional OOP language, but also &lt;em&gt;really not&lt;/em&gt;, because we still have a separation between the data type and the implementation of functionality attached to it. It’s not obvious &lt;em&gt;here&lt;/em&gt;, but we could write &lt;code&gt;impl WidgetCode&lt;/code&gt; in some &lt;em&gt;other&lt;/em&gt; module in the crate, and as long as there’s no conflict between the implementations, it’s fine! And then we could call whatever function we defined in &lt;em&gt;that&lt;/em&gt; block “on” &lt;code&gt;WidgetCode&lt;/code&gt;. This is on the one hand &lt;em&gt;totally&lt;/em&gt; unlike what we’ll see in the other languages, and on the other hand &lt;em&gt;weirdly analogous&lt;/em&gt; to them.&lt;/p&gt;
&lt;p&gt;I’m going to pass over why we need &lt;code&gt;ref code&lt;/code&gt; here, as it gets into details of Rust’s model of ownership and reference borrowing &lt;em&gt;and&lt;/em&gt; it’s going to be unneeded because of improvements to Rust’s compiler fairly soon. The one thing to note here is that we get nice memory/allocation behavior, i.e. we’re not doing a bunch of separate heap string allocations here. This is one of the big upsides to Rust in general! It’s not quite as pretty as what we’ll see below, but the performance wins are awesome.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="elm" class="level3"&gt;
&lt;h3&gt;Elm&lt;/h3&gt;
&lt;p&gt;Elm introduces us to a pattern we’ll see in each of the more traditional “functional” languages: the use of &lt;em&gt;modules&lt;/em&gt; for this kind of structure. First the code, then some comments on it:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- src/ordering/WidgetCode.elm
module Ordering.WidgetCode exposing (WidgetCode, create, value)

import Regex exposing (contains, regex)


type WidgetCode
    = WidgetCode String


create : String -&amp;gt; Result String WidgetCode
create code =
    if contains (regex &amp;quot;W\\d{4}&amp;quot;) code then
        Ok (WidgetCode code)
    else
        Err &amp;quot;`WidgetCode` must begin with a &amp;#39;W&amp;#39; and be followed by 4 digits&amp;quot;


value : WidgetCode -&amp;gt; String
value (WidgetCode code) =
    code&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm’s module system lets you choose exactly what to expose. In this case, we’re only exporting the type itself along the &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; functions—but, importantly, &lt;em&gt;not&lt;/em&gt; the normal type constructors for the type.&lt;/p&gt;
&lt;p&gt;You can import the things exposed both as a module and as individual items. Assume we implemented &lt;code&gt;GizmoCode&lt;/code&gt; the same way. We’d import and use them in &lt;code&gt;Ordering.elm&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- Ordering.elm
import Ordering.WidgetCode as WidgetCode exposing (WidgetCode)
import Ordering.GizmoCode as GizmoCode exposing (GizmoCode)

type ProductCode
    = Widget WidgetCode
    | Gizmo GizmoCode
    
valid =
    WidgetCode.create &amp;quot;W1234&amp;quot;


invalid =
    WidgetCode.create &amp;quot;wat&amp;quot;


unwrapped =
    case valid of
        Result.Ok code -&amp;gt;
            WidgetCode.value (code)

        Result.Err _ -&amp;gt;
            &amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with Rust, we can’t construct the type without using the provided function. As I’ve written the imports, you’d create a &lt;code&gt;WidgetCode&lt;/code&gt; by writing &lt;code&gt;WidgetCode.create &amp;quot;W1234&amp;quot;&lt;/code&gt;. You could also import it directly, but that would have its own problems once you had the &lt;code&gt;create&lt;/code&gt; function imported for &lt;code&gt;GizmoCode&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;Finally, notice the way we aliased the module name here with &lt;code&gt;as&lt;/code&gt; on the import: we don’t have to write out the fully qualified path this way. And there’s no conflict between the aliased module name and the type name – they live in their own namespaces (as it should be!). Importing the type name distinctly is handy because it means we don’t have to write the body of the union type out as &lt;code&gt;Widget WidgetCode.WidgetCode&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="f" class="level3"&gt;
&lt;h3&gt;F&lt;sup&gt;♯&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;The F&lt;sup&gt;♯&lt;/sup&gt; code looks a &lt;em&gt;lot&lt;/em&gt; like the Elm code. The main differences here have to do with their module systems.&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;namespace Ordering

type WidgetCode = private WidgetCode of string
module WidgetCode =
    let create code =
        if Regex.IsMatch(code, @&amp;quot;W\d{4}&amp;quot;) then
            Ok (WidgetCode code)
        else
            Error &amp;quot;`WidgetCode` must begin with a &amp;#39;W&amp;#39; and be followed by 4 digits&amp;quot;

    let value (WidgetCode code) = code&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we declare that we’re in the &lt;code&gt;namespace Ordering&lt;/code&gt;. Everything here will be publicly visible to everything &lt;em&gt;else&lt;/em&gt; in the &lt;code&gt;namespace Ordering&lt;/code&gt;. We could also make this a &lt;code&gt;module&lt;/code&gt;, and in that case we’d need to explicitly open it in other modules. Because it’s part of the base namespace we’re using for &lt;code&gt;Ordering&lt;/code&gt;, though, we get it for “free”. There’s a downside to this, though. More on that below.&lt;/p&gt;
&lt;p&gt;Also notice that this means that we have yet one more “namespace” for names to live in: &lt;code&gt;namespace&lt;/code&gt; names are different from &lt;code&gt;module&lt;/code&gt; are different from type names! So here we declare a top-level &lt;code&gt;module Ordering&lt;/code&gt; here so that we can actually write code that &lt;em&gt;does something&lt;/em&gt; in the file – &lt;code&gt;namespace&lt;/code&gt;s can only contain type definitions (including &lt;code&gt;module&lt;/code&gt; definitions).&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;namespace Ordering

type ProductCode =
    | Widget of WidgetCode
    | Gizmo of GizmoCode

module DemoIt =
    let valid = WidgetCode.create &amp;quot;W1234&amp;quot;
    let invalid = WidgetCode.create &amp;quot;wat&amp;quot;
    
    let unwrapped =
        match valid with
        | Ok(code) -&amp;gt; WidgetCode.value code
        | Error(_) -&amp;gt; &amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The things to notice here as particularly different from the others:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;We don’t have to explicitly import the module names, because we used the same namespace (&lt;code&gt;Ordering&lt;/code&gt;) to group them. We could also have done &lt;code&gt;namespace Ordering.WidgetCode&lt;/code&gt; and &lt;code&gt;open Ordering.WidgetCode&lt;/code&gt;; that might actually make more or less sense in the context. I &lt;em&gt;think&lt;/em&gt; this is probably more idiomatic, however, which is why I picked it.&lt;/li&gt;
&lt;li&gt;Since we’re keeping the rest of the containing module in the same namespace, we &lt;em&gt;do&lt;/em&gt; have to declare &lt;code&gt;module DemoIt&lt;/code&gt; for functionality – not just types – to live in. This is true for both &lt;code&gt;Ordering.fs&lt;/code&gt; and &lt;code&gt;WidgetCode.fs&lt;/code&gt; and so on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This way of structuring things works really well, but it has one major downside compared to Elm and Rust: where any given name comes from is &lt;em&gt;not&lt;/em&gt; obvious from any given text file. Using modules instead of namespaces and using more fully qualified names &lt;em&gt;could&lt;/em&gt; help here, but the reality is simply that F&lt;sup&gt;♯&lt;/sup&gt; (like C&lt;sup&gt;♯&lt;/sup&gt;) basically leaves you out to dry here. My take is that this is basically what happens when you design a language &lt;em&gt;assuming&lt;/em&gt; IDE-like tooling. But especially when looking at e.g. GitHub diff views, or just browsing source code in general, I strongly prefer the way Elm and Rust generally lead you to do explicit imports or fully qualified paths. (Both have an escape hatch: Rust’s &lt;code&gt;use path::to::module::*;&lt;/code&gt; and Elm’s &lt;code&gt;import Path.To.Module exposing (..)&lt;/code&gt;, but both are actively discouraged as bad practice in &lt;em&gt;most&lt;/em&gt; situations.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="reason" class="level3"&gt;
&lt;h3&gt;Reason&lt;/h3&gt;
&lt;p&gt;Interestingly, Reason &lt;em&gt;looks&lt;/em&gt; most like Rust but &lt;em&gt;behaves&lt;/em&gt; most like F&lt;sup&gt;♯&lt;/sup&gt;. The biggest difference is that I need a separate &lt;em&gt;interface file&lt;/em&gt; for Reason to get the privacy benefits that I’m getting in all the other languages.&lt;/p&gt;
&lt;p&gt;We put the definition file at &lt;code&gt;ordering/Ordering_WidgetCode.rei&lt;/code&gt;. (I’ll comment on the long name in a moment.)&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;type gizmoCode = pri | GizmoCode(string);

let create: string =&amp;gt; Js.Result.t(widgetCode, string);

let value: widgetCode =&amp;gt; string;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that module definition in place, we can separately supply the implementation, in &lt;code&gt;ordering/Ordering_WidgetCode.re&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;type widgetCode =
  | WidgetCode(string);

let create = code =&amp;gt; {
  let isMatch =
    Js.Re.fromString(&amp;quot;W\\d{4}&amp;quot;) |&amp;gt; Js.Re.exec(code) |&amp;gt; Js.Option.isSome;
  if (isMatch) {
    Js.Result.Ok(WidgetCode(code));
  } else {
    Js.Result.Error(
      &amp;quot;`WidgetCode` must begin with a &amp;#39;W&amp;#39; and be followed by 4 digits&amp;quot;
    );
  };
};

let value = (WidgetCode(code)) =&amp;gt; code;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you could do the same thing with an interface file for F&lt;sup&gt;♯&lt;/sup&gt;. We’re also doing something that’s similar in principle to the use of private types in in F&lt;sup&gt;♯&lt;/sup&gt;, but unlike in F&lt;sup&gt;♯&lt;/sup&gt; we &lt;em&gt;have&lt;/em&gt; to use the module interface to make it work as far as I can tell. The &lt;em&gt;interface&lt;/em&gt; can declare the type private, but in the actual implementation, the type has to be non-private to be constructable. (If I’m wrong, please send me a note to let me know! But that’s what I gathered from reading OCaml docs, as well as from command line error messages as I played around.) Also, the fact that Reason has landed on the keyword &lt;code&gt;pri&lt;/code&gt; instead of OCaml and F&lt;sup&gt;♯&lt;/sup&gt;’s much saner &lt;code&gt;private&lt;/code&gt; is super weird.&lt;/p&gt;
&lt;p&gt;The interface file just defines the types, and has the &lt;code&gt;.rei&lt;/code&gt; extension. &lt;code&gt;type widgetCode&lt;/code&gt; here is an &lt;em&gt;abstract&lt;/em&gt; type, which provides no information about what it contains. Note the function types are provided as well. Here I’m using specifically the &lt;code&gt;Js.Result&lt;/code&gt; type; there is also a &lt;code&gt;Result&lt;/code&gt; type in at least one of the OCaml standard libraries. This is one of the more complicated things about Reason compared to the others: there are… &lt;em&gt;several&lt;/em&gt; standard libraries to choose from, which will or won’t work differently depending on what compile target you’re picking.&lt;/p&gt;
&lt;p&gt;In any case, once we have both the module and the implementation defined, we can use it like this in &lt;code&gt;ordering.re&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;module WidgetCode = Ordering_WidgetCode;

module GizmoCode = Ordering_GizmoCode;

open WidgetCode;

open GizmoCode;

type productCode =
  | Widget(widgetCode)
  | Gizmo(gizmoCode);

let valid = WidgetCode.create(&amp;quot;W1234&amp;quot;);

let invalid = WidgetCode.create(&amp;quot;wat&amp;quot;);

let unwrapped =
  switch valid {
  | Js.Result.Ok(code) =&amp;gt; WidgetCode.value(code)
  | Js.Result.Error(_) =&amp;gt; &amp;quot;&amp;quot;
  };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We do this mapping from &lt;code&gt;Ordering_WidgetCode&lt;/code&gt; to &lt;code&gt;WidgetCode&lt;/code&gt; here because OCaml and therefore Reason has only a single global namespace for its module names as defined by the file system. You can nest modules, but only &lt;em&gt;within&lt;/em&gt; files. The workaround is, well… &lt;code&gt;Ordering_&lt;/code&gt; and remapping the name as we have here. This lets you access the nested modules as &lt;code&gt;Ordering.WidgetCode&lt;/code&gt; and so on elsewhere.&lt;/p&gt;
&lt;p&gt;Then we &lt;code&gt;open WidgetCode&lt;/code&gt; etc. so that we can write &lt;code&gt;widgetCode&lt;/code&gt; instead of &lt;code&gt;WidgetCode.widgetCode&lt;/code&gt; in the &lt;code&gt;productCode&lt;/code&gt; definition. This is basically the same effect we get from just being in the same &lt;code&gt;namespace&lt;/code&gt; in F&lt;sup&gt;♯&lt;/sup&gt; (which, again, we could rewrite exactly this way), or from the kinds of imports we discussed above for Rust and Elm.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="numeric-validation-unitquantity" class="level2"&gt;
&lt;h2&gt;Numeric validation: &lt;code&gt;UnitQuantity&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;So far, the showing tilts &lt;em&gt;heavily&lt;/em&gt; in F&lt;sup&gt;♯&lt;/sup&gt;’s and Elm’s favor in terms of expressiveness and elegance. However, there’s a lot of variation depending on exactly what you’re doing. If, for example, you want to validate a &lt;em&gt;range&lt;/em&gt;, well… then Rust actually has a pretty good approach! Once again, you’ll note that these all have a lot in common; the difference mostly comes down to the degree of syntactical noise required to express the same basic thing.&lt;/p&gt;
&lt;p&gt;In this section, I’m not really going to spend a lot of time discussing the details and differences; I’m just leaving it here to show an interesting example where the languages’ design decisions end up have slightly different ergonomic tradeoffs.&lt;/p&gt;
&lt;section id="rust-1" class="level3"&gt;
&lt;h3&gt;Rust&lt;/h3&gt;
&lt;pre class="rust"&gt;&lt;code&gt;// ordering/unit_quantity.rs
pub struct UnitQuantity(u32);

impl UnitQuantity {
    pub fn create(qty: u32) -&amp;gt; Result&amp;lt;UnitQuantity, String&amp;gt; {
        match qty {
            0 =&amp;gt; Err(String::from(&amp;quot;`UnitQuantity` cannot be less than 1&amp;quot;)),
            1...1000 =&amp;gt; Ok(UnitQuantity(qty)),
            _ =&amp;gt; Err(String::from(&amp;quot;`UnitQuantity` cannot be greater than 1000&amp;quot;)),
        }
    }

    pub fn value(&amp;amp;self) -&amp;gt; u32 {
        self.0
    }

    pub fn minimum() -&amp;gt; UnitQuantity {
        UnitQuantity(1)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="elm-1" class="level3"&gt;
&lt;h3&gt;Elm&lt;/h3&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- ordering/UnitQuantity.elm
module Ordering.UnitQuantity exposing (UnitQuantity, create, value)


type UnitQuantity
    = UnitQuantity Int


create : Int -&amp;gt; Result String UnitQuantity
create qty =
    if qty &amp;lt; 1 then
        Err &amp;quot;`UnitQuantity` cannot be less than 1&amp;quot;
    else if qty &amp;gt; 1000 then
        Err &amp;quot;`UnitQuantity` cannot be greater than 1000&amp;quot;
    else
        Ok (UnitQuantity qty)


value : UnitQuantity -&amp;gt; Int
value (UnitQuantity qty) =
    qty

    
minimum : UnitQuantity
minimum = UnitQuantity 1&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="f-1" class="level3"&gt;
&lt;h3&gt;F&lt;sup&gt;♯&lt;/sup&gt;&lt;/h3&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;// ordering/UnitQuantity.fs
namespace Ordering

type UnitQuantity = private UnitQuantity of uint32
module UnitQuantity =
    let create qty =
        if qty &amp;lt; 1u then
            Error &amp;quot;`UnitQuantity` cannot be less than 1&amp;quot;
        else if qty &amp;gt; 1000u then
            Error &amp;quot;`UnitQuantity` cannot be greater than 1000&amp;quot;
        else
            Ok (UnitQuantity qty)

    let value (UnitQuantity qty) = qty
    
    let minimum = UnitQuantity 1&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="reason-1" class="level3"&gt;
&lt;h3&gt;Reason&lt;/h3&gt;
&lt;pre class="reason"&gt;&lt;code&gt;/* ordering/Ordering_UnitQuantity.rei */
type unitQuantity = pri | UnitQuantity(int);

let create: int =&amp;gt; Js.Result.t(unitQuantity, string);

let value: unitQuantity =&amp;gt; int;

let minimum: unitQuantity;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="reason"&gt;&lt;code&gt;/* ordering/Ordering_UnitQuantity.re */

type unitQuantity =
  | UnitQuantity(int);

let create = qty =&amp;gt;
  if (qty &amp;lt; 1) {
    Js.Result.Error(&amp;quot;`UnitQuantity` cannot be less than 1&amp;quot;);
  } else if (qty &amp;gt; 1000) {
    Js.Result.Error(&amp;quot;`UnitQuantity` cannot be greater than 1000&amp;quot;);
  } else {
    Js.Result.Ok(UnitQuantity(qty));
  };

let value = (UnitQuantity(qty)) =&amp;gt; qty;

let minimum = UnitQuantity(1);&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="aside-on-documentation" class="level2"&gt;
&lt;h2&gt;Aside: On Documentation&lt;/h2&gt;
&lt;p&gt;One thing that became &lt;em&gt;extremely&lt;/em&gt; clear in the course of working all of this out is that the documentation stories for these languages are in vastly, &lt;em&gt;vastly&lt;/em&gt; different places.&lt;/p&gt;
&lt;p&gt;Figuring out how to write this private &lt;code&gt;create&lt;/code&gt;/&lt;code&gt;value&lt;/code&gt; approach was &lt;em&gt;very&lt;/em&gt; straightforward in Rust, because it’s literally just right there in how &lt;code&gt;impl&lt;/code&gt; blocks and the &lt;code&gt;pub&lt;/code&gt; keyword work: things default to private, including the contents of a struct, and you &lt;em&gt;always&lt;/em&gt; define the related functionality with &lt;code&gt;pub fn&lt;/code&gt; declarations in the related &lt;code&gt;impl&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;Elm and F&lt;sup&gt;♯&lt;/sup&gt; were both slightly harder, in that I had to poke around a bit to figure out the right way to do it. But not &lt;em&gt;that&lt;/em&gt; much harder. Both use module-level isolation to accomplish this; the main difference there was that F&lt;sup&gt;♯&lt;/sup&gt; just lets you do it inline and Elm explicitly ties modules to files.&lt;/p&gt;
&lt;p&gt;Reason… was very, &lt;em&gt;very&lt;/em&gt; difficult to get sorted out. This is just a function of the state of the ecosystem. Reason is &lt;em&gt;distinct syntax&lt;/em&gt; for OCaml, but it also leans on BuckleScript. That means that if you want to figure out how to do anything, you probably need to search in the docs for all of those, and if your answer turns out to come from OCaml then you have to figure out how to translate it back into Reason and BuckleScript! Ultimately, I was able to figure it out and get the project layout to how you see it in the repository, but… it took a lot more digging than with any of the other projects!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;As with our &lt;a href="http://www.chriskrycho.com/2018/exploring-4-languages-starting-to-model-the-domain.html"&gt;previous foray&lt;/a&gt;, we can see a ton of similarities across these languages. All lean heavily on pattern-matching for dealing with different scenarios; all let us make use of a &lt;code&gt;Result&lt;/code&gt; type for handling success or failure; all make heavy use of expression-bodied-ness; and all supply &lt;em&gt;some&lt;/em&gt; way to make types constructable only in safe/controlled ways.&lt;/p&gt;
&lt;p&gt;For Rust, that’s a matter of leaving the internals of a &lt;code&gt;struct&lt;/code&gt; private and making &lt;code&gt;pub fn&lt;/code&gt; helpers to do the construction and value retrieval. For Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason, that’s a matter of having the normal type &lt;em&gt;constructors&lt;/em&gt; be private while exposing the types themselves normally. They do that in different ways (F&lt;sup&gt;♯&lt;/sup&gt;’s &lt;code&gt;private type&lt;/code&gt;, Elm’s &lt;code&gt;exposing&lt;/code&gt;, and Reason’s &lt;code&gt;pri&lt;/code&gt; annotation on the type variant in a module interface file), but the effect is essentially identical, and functionally equivalent to what we see in Rust.&lt;/p&gt;
&lt;p&gt;The main differences we see across Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason have to do with the nature of the various module systems. In a lot of ways, Reason’s is the least capable &lt;em&gt;for this specific purpose&lt;/em&gt;, because it’s directly tied to OCaml’s module system, which substantially predates any of the others. (I say “in a lot of ways” because OCaml’s modules are surprisingly capable; they end up being their own kind of types and you can do some crazy things with them, all of which I’d like to actually come to understand… eventually.) Rust’s module system, meanwhile, has a lot of similarities to Elm’s in particular, but because we actually carry functions along with the types they &lt;code&gt;impl&lt;/code&gt; (though they get defined separately, with all the power that entails), we have a bit less boilerplate we need to write just to get at the specific functions in play.&lt;/p&gt;
&lt;p&gt;Next time (probably only a couple of weeks away because we’re working through the book at work in a book club!), I’ll be looking at Chapter 7: Modeling Workflows as Pipelines. I suspect this will be a place where the true functional orientation of Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason will much more sharply differentiate them from the sometimes-functionalish-but-not-actually-functional way we write things in Rust.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This reference will live and be valid as long as the underlying &lt;code&gt;WidgetCode&lt;/code&gt; is. We could also return a &lt;code&gt;String&lt;/code&gt; if we wanted that value to live independently of the &lt;code&gt;WidgetCode&lt;/code&gt; instance backing it.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Putting it in its own module, whether in a separate &lt;em&gt;does&lt;/em&gt; have implications for privacy, though we don’t much care about them in this case. Rust lets us set the privacy on &lt;a href="https://doc.rust-lang.org/1.24.1/reference/visibility-and-privacy.html"&gt;a whole spectrum&lt;/a&gt;, from “visible everywhere” to “only visible in this specific module.”&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="rust"></category><category term="elm"></category><category term="fsharp"></category><category term="reasonml"></category><category term="domain-driven design"></category><category term="four-languages"></category></entry><entry><title>Handling “The Liberal Order” Correctly</title><link href="http://www.chriskrycho.com/2018/handling-the-liberal-order-correctly.html" rel="alternate"></link><published>2018-03-19T20:50:00-04:00</published><updated>2018-03-19T20:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-03-19:/2018/handling-the-liberal-order-correctly.html</id><summary type="html">&lt;p&gt;An example of handling &lt;a href="http://www.chriskrycho.com/2018/stop-saying-what-capitalism-does.html"&gt;“the liberal order”&lt;/a&gt; &lt;em&gt;correctly&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The modern liberal order abets technology’s formative power to the degree that it disavows any strong claims about ethics and human flourishing. It is in the space of that disavowal that technology as an implicit anthropology and an implicit politics takes …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;An example of handling &lt;a href="http://www.chriskrycho.com/2018/stop-saying-what-capitalism-does.html"&gt;“the liberal order”&lt;/a&gt; &lt;em&gt;correctly&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The modern liberal order abets technology’s formative power to the degree that it disavows any strong claims about ethics and human flourishing. It is in the space of that disavowal that technology as an implicit anthropology and an implicit politics takes root and expands, framing and conditioning any subsequent efforts to subject it to ethical critique. Our understanding of the human is already conditioned by our technological milieu. Fundamental to this tacit anthropology, or account of the human, is the infinite malleability of human nature. Malleable humanity is a precondition to the unfettered expansion of technology. (This is why transhumanism is the proper eschatology of our technological order. Ultimately, humanity must adapt and conform, even if it means the loss of humanity as we have known it. As explicit ideology, this may still seem like a fringe position; as implicit practice, however, it is widely adopted.)&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>How I Write a Talk</title><link href="http://www.chriskrycho.com/2018/how-i-write-a-talk.html" rel="alternate"></link><published>2018-03-16T20:00:00-04:00</published><updated>2018-03-16T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-03-16:/2018/how-i-write-a-talk.html</id><summary type="html">Giving a good talk is mostly a matter of writing a good talk and crafting a coherent presentation of that material (with or without slides or other helpers). In this post, I’m going to briefly walk through how *I* prepare talks. This process may not work for you at all; sometimes I read other people’s talk preparation strategies and laugh because they’re so wildly different from mine. But this way there’s one more strategy documented out there.
</summary><content type="html">&lt;p&gt;Giving a good talk is mostly a matter of &lt;em&gt;writing&lt;/em&gt; a good talk and crafting a coherent presentation of that material (with or without slides or other helpers). In this post, I’m going to briefly walk through how &lt;em&gt;I&lt;/em&gt; prepare talks. This process may not work for you at &lt;em&gt;all&lt;/em&gt;; sometimes I read &lt;a href="TODO:%20Chris%20Coyier/CSS%20Tricks"&gt;other people’s talk preparation strategies&lt;/a&gt; and laugh because they’re so wildly different from mine. But this way there’s one more strategy documented out there.&lt;/p&gt;
&lt;p&gt;The strategy is the one I’ve developed over the past few years as I’ve given a couple conference talks and a bunch more weekly tech talks at Olo.&lt;/p&gt;
&lt;p&gt;While my own approach here has a couple details that are technical, the vast majority of it is applicable to any kind of talk. In fact, a &lt;em&gt;lot&lt;/em&gt; of this is essentially identical to certain phases of my preparation for preaching a sermon or teaching a theology class at church.&lt;/p&gt;
&lt;section id="brainstorm-on-paper." class="level2"&gt;
&lt;h2&gt;1. Brainstorm on paper.&lt;/h2&gt;
&lt;p&gt;I start by writing out a bunch of different approaches I might want to use for the talk with pen and paper. Usually I grab the &lt;a href="https://us.moleskine.com/en/"&gt;Moleskine&lt;/a&gt; I dedicate to writing ideas&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and &lt;a href="https://www.jetpens.com/Pilot-Juice-Up-Gel-Pen-0.4-mm-Blue-Black/pd/18166"&gt;my favorite pen&lt;/a&gt; and put away everything electronic. Here I’m not worried about structure or organization at all. I just jot down the things I want to cover, what the motivating idea and main takeaway is, and any secondary points I want the audience of the talk to come away with.&lt;/p&gt;
&lt;p&gt;Sometimes this is broadly obvious because I already know how to come at the talk. Sometimes it takes multiple passes to get right. And when I skip this step, things go wrong regardless. I almost gave a &lt;em&gt;really&lt;/em&gt; terrible version of an important internal tech talk at Olo a month ago because I hadn’t take the time to do this, and ultimately had to push back when I delivered it by a bunch as a result!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="write-a-high-level-outline-and-map-out-the-overall-timing." class="level2"&gt;
&lt;h2&gt;2. Write a high-level outline and map out the overall timing.&lt;/h2&gt;
&lt;p&gt;Once I have a good idea the way I want to tackle the subject, I write an outline—again, in my Moleskin with a pen. Once I map out the overall sections of the talk, one or two or &lt;em&gt;very&lt;/em&gt; rarely three layers deep, I go through and write out how long I think each section should be. This is often the first point I have to start cutting material, because I can look at a list of eight sub-bullet points allocated to a 10-minute block and realize: &lt;em&gt;no, I’m probably not actually going to get through that.&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/emberconf-notes.jpg" title="EmberConf notes" alt="Planning and transferring notes for EmberConf" /&gt;&lt;figcaption&gt;Planning and transferring notes for EmberConf&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="draft-the-talk-writing-it-out-long-form." class="level2"&gt;
&lt;h2&gt;3. Draft the talk, writing it out long-form.&lt;/h2&gt;
&lt;p&gt;This is the longest part of the process, but it works wonders for me.&lt;/p&gt;
&lt;p&gt;I start by copying the outline from my paper notebook into a &lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;-friendly writing environment.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; I turn each bullet point in the original outline into a heading. Then I expand the outline dramatically, from those high-level sections to slide-level sections: one sub-heading per slide. At this point I also add “breaks” between all the headings, which is how &lt;a href="https://revealjs.com/"&gt;the web-based slides tool I use&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next up I script the talk in detail. I know some people just throw down bullet points here; that’s not how I work. I write out a word-by-word script for what to say. Each of those headings/slides gets anything from a sentence to a few paragraphs. As I’m doing this, I keep an eye on the word count: courtesy of having done a fair number of talks this way, and having done a &lt;em&gt;lot&lt;/em&gt; of &lt;a href="http://www.newrustacean.com"&gt;podcasting&lt;/a&gt; this way, I have a pretty good feel for what a given number of words will come out to in terms of talk time.&lt;/p&gt;
&lt;p&gt;This is also the phase where I extract bullet points, notes about images to insert, code samples, etc. Sometimes I’ll pause to write out an example in detail while working on the script; other times I’ll just leave myself a note that looks like &lt;code&gt;TODO: add Doctor Who &amp;quot;Oh yes!&amp;quot; GIF here&lt;/code&gt;. &lt;a href="http://i0.kym-cdn.com/photos/images/original/000/507/438/eeb.gif"&gt;For reference: &lt;em&gt;this&lt;/em&gt; GIF.&lt;/a&gt; The script goes behind a simple textual marker (customizable in the tool I use; usually just &lt;code&gt;Note:&lt;/code&gt;) so that it doesn’t show up on the slide and instead is displayed as speaker notes.&lt;/p&gt;
&lt;p&gt;The important thing for me is that writing out the talk this way lets me know what materials actually go on what slides, and it also cements the content into my mind. Once it’s written, I don’t actually try to memorize it, and I don’t read from it while delivering the talk. The act of creating it this way makes the flow of the slides flow coherently. I end up with a map to what I actually intend to say in the form of the slides themselves—so they guide me and the audience together through the content in a coherent way.&lt;/p&gt;
&lt;p&gt;Once I have this full script written out, I’ll go back over it as a revision pass.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="do-a-dry-run-and-edit-the-talk." class="level2"&gt;
&lt;h2&gt;4. Do a dry-run and edit the talk.&lt;/h2&gt;
&lt;p&gt;I now do at least one dry run for every conference-type talk—by myself in front of the computer if necessary, but preferably in front of at least a small audience. A dry run has two big upsides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I figure out whether I’m going to hit your time or not. I take this really seriously, because I think it’s incredibly rude to both the audience and (if you’re not going last) the next speaker to go over. So if I need to trim, I figure that out by doing a dry run (and probably not any other way). Even with all my practice prepping spoken materials, I still have to tweak and trim for length quite regularly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I get to have a feedback cycle with the actual process of presenting the material—from yourself if nothing else, but possibly also from the audience if I have one.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ve only gotten to do a dry run with an audience twice (for my Rust Belt Rust talk and for the EmberConf workshop I just gave), but it has been incredibly helpful both times. Having people give you feedback on what you’ve just presented can be slightly intimidating, but it’s way better to learn that the flow was off in an important way &lt;em&gt;before&lt;/em&gt; you give a talk than &lt;em&gt;during&lt;/em&gt; or &lt;em&gt;after&lt;/em&gt; the presentation.&lt;/p&gt;
&lt;p&gt;I write down the feedback I get in a dry run, or I take notes if I’m doing it by myself, and then I use those to update the script and slides I prepared in step 3 to resolve any issues I ran into. That often means cutting material; in the case of my EmberConf workshop it also meant completely restructuring part of the talk—moving the order of material around a &lt;em&gt;lot&lt;/em&gt;. That was a lot of work, but it was also incredibly important and valuable.&lt;/p&gt;
&lt;p&gt;To see this in practice, you can see the whole final content of my EmberConf 2018 workshop &lt;a href="https://raw.githubusercontent.com/chriskrycho/emberconf-slides/master/talk.md"&gt;here&lt;/a&gt;—you can see it’s just plain text and some special markup for certain slide transitions.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="repeat-step-4-until-im-happy-with-it-or-im-out-of-time." class="level2"&gt;
&lt;h2&gt;5. Repeat Step 4 until I’m happy with it or I’m out of time.&lt;/h2&gt;
&lt;p&gt;Let’s be honest: it’s usually the latter, and in many ways that’s actually a good thing. A talk can be polished &lt;em&gt;ad infinitum&lt;/em&gt; and it’s not actually helpful to polish forever. At some point the return on investment is so small relative to the time cost (which is high!) that you should just stop and give the talk.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;or occasionally a white, narrow-ruled legal pad&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Right now that’s usually &lt;a href="TODO"&gt;Ulysses&lt;/a&gt;, but there are things that bother me about every such writing app I’ve ever tried—and yes, before you suggest it, that does include Emacs and Vim, along with VS Code and other programming text editors, as well as the usual plain-text writing environment apps like Ulysses.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="talks"></category></entry><entry><title>Stop Saying “What Capitalism Does”</title><link href="http://www.chriskrycho.com/2018/stop-saying-what-capitalism-does.html" rel="alternate"></link><published>2018-03-09T07:00:00-05:00</published><updated>2018-03-09T07:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-03-09:/2018/stop-saying-what-capitalism-does.html</id><summary type="html">“What capitalism does,” or “what liberalism does,” or “what postmodernism does,” or “what fundamentalism does”: the phrase should die an unmourned death. It does us all a great disservice, not for what it says but for what it leaves unsaid and the ways it misleads us.</summary><content type="html">&lt;p&gt;“What capitalism does,” or “what liberalism does,” or “what postmodernism does,” or “what fundamentalism does”: the phrase should die an unmourned death. It does us all a great disservice, not for what it says but for what it leaves unsaid and the ways it misleads us.&lt;/p&gt;
&lt;p&gt;I most recently ran into the &lt;em&gt;capitalism&lt;/em&gt; variant of the phrase in the influential 1995 essay “The Californian Ideology,” by Richard Barbrook and Andy Cameron. The text is littered with the phrase; if you took the essay at face value you would conclude that at least in the minds of Barbrook and Cameron capitalism had transformed from a system and structure into a demon, possessing and directing the culture they dislike.&lt;/p&gt;
&lt;p&gt;I am not opposed to &lt;a href="http://blogs.mereorthodoxy.com/matthewloftus/2017/04/27/new-gods-old-demons/" title="Matthew Loftus: “New Gods, Old Demons”"&gt;such readings of the world&lt;/a&gt; in principle; I think they may even &lt;a href="http://text-patterns.thenewatlantis.com/2017/04/principalities-powers-and-technical-boy.html" title="Alan Jacobs: “principalities, powers, and the technical boy”"&gt;get certain important things right&lt;/a&gt; that we too often overlook in our “disenchanted” modernity. If people want to talk of Capitalism and Marxism and Media and Liberalism and Technologism and The Beltway and The Kremlin and so on as capital-P Powers—if people want to think about the ways in which there may be real spiritual realities at work behind some of the things we take for granted—well, as the millennials say, &lt;em&gt;I am so here for that&lt;/em&gt;.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But that is not how Barbrook and Cameron meant it. Nor is it how most people mean the phrase when they toss it around.&lt;/p&gt;
&lt;p&gt;What they mean, instead, is something like this: &lt;em&gt;People act differently in different systems and structures; the system and structure of capitalism [or liberalism or fundamentalism or…] leads people to act in [this way that I think is bad].&lt;/em&gt; It is, in other words, shorthand for an idea most of us can get behind.&lt;/p&gt;
&lt;p&gt;That idea is important, too: people &lt;em&gt;do&lt;/em&gt; act differently in different systems and structures. What’s more, when a given structure is pervasive, it can be difficult to resist or reject, or even to consider that it should be resisted or rejected. This idea is so important that &lt;a href="http://stephencarradini.com"&gt;Stephen Carradini&lt;/a&gt; and I dedicated all of &lt;a href="https://www.winningslowly.org/season-5.html"&gt;Winning Slowly Season 5: Structure and Agency&lt;/a&gt; to the ins and outs of systems and structures, good and bad alike; the limits of individual action in the face of systemic pressure; and the ways we ought to leverage good systems and dismantle bad systems.&lt;/p&gt;
&lt;p&gt;But. As much as this shorthand captures something important, it also &lt;em&gt;obscures&lt;/em&gt; something important: it is &lt;em&gt;people&lt;/em&gt; who act differently under those different structures, and &lt;em&gt;people&lt;/em&gt; who set up systems in the first place and maintain them afterward. This is not to dismiss the tendency of systems to perpetuate themselves, or to ignore the reality of systems which harm everyone in them and go on existing anyway. (Self interest is complicated.) Rather, it is to remind us &lt;em&gt;how&lt;/em&gt; systems come to be (people created them because they seemed in some way good to them), &lt;em&gt;what&lt;/em&gt; they are made of (people continuing to do what seems in some way good to them), and &lt;em&gt;why&lt;/em&gt; they are hard to dismantle (because many people’s self-interest is aligned with maintaining existing institutions).&lt;/p&gt;
&lt;p&gt;It is possible to think and act as if individual agency is all that matters, and this is fallacious. People &lt;em&gt;do&lt;/em&gt; act differently in different systems and structures, for good and for ill. Capitalism, as a system and structure, serves as an environment in which enormous gains in productivity have been possible; but it also serves an environment where people reduce others (and themselves) to their productivity. “Liberalism,” as a system and structure, serves as an environment where many important gains in human liberties have grown up; but it also serves as an environment where the good of liberty has at times grown cancerous and indeed metastasized until the will of the individual is dangerously (and nonsensically) totalized. Contrast how people live and think and act in capitalist or liberal contexts with feudal or tribal contexts (to pick just two of the many contrasts we could) and you will see very, very different things. Systems matter; we cannot erase their impact on the individual.&lt;/p&gt;
&lt;p&gt;But it is also possible to talk and act as if the structure, the system, is &lt;em&gt;all&lt;/em&gt;. This is the mistake the shorthand “what capitalism does” leads us to. Flip the emphasis in the previous paragraph: the environments of capitalism and liberalism matter, but &lt;em&gt;people&lt;/em&gt; continue to act in those environments. More than that, people continue to transform the structures and systems they inhabit, often in startling ways. Half a century ago, it would have been laughable to suggest that &lt;a href="https://www.apple.com" title="Apple"&gt;the most profitable corporation in the world&lt;/a&gt; would also be among those most assiduously pursuing environmental responsibility and stewardship. People’s continuous pressure, as well as the ascent to not only economic but also cultural leadership of people who care about this has changed capitalism in a good way. Social pressure on businesses has plenty of downsides, too, in our internet-rage-storm era; and there is much to critique about the ways that business leaders have come to dominate culture.&lt;/p&gt;
&lt;p&gt;The point, though, is that systems and structures are more malleable than the shorthand credits them, and so we would do well to remember the limitations of the shorthand and indeed largely to abandon it unless we are often in the habit of qualifying it. It is too sloppy. Throw it out!&lt;/p&gt;
&lt;p&gt;Or if not that (shorthands &lt;em&gt;are&lt;/em&gt; useful after all) then clarify often. Talk instead about structures, and systems, and people’s ability to change them—indeed to throw them out. Speak less often of “what capitalism does” and more often of what capitalism makes easy and what it makes hard, what avenues living in liberalism opens up and what it blinds us to, what virtues and what vices fundamentalism might inculcate.&lt;/p&gt;
&lt;p&gt;(And if you want to have a conversation about Powers, have at it.)&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, I am a millennial by age cohort. I mock these generational divides and characterizations because I think them mostly meaningless blather.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="ethics"></category><category term="technology"></category></entry><entry><title>Intentional Cyclicality</title><link href="http://www.chriskrycho.com/2018/intentional-cyclicality.html" rel="alternate"></link><published>2018-03-06T07:00:00-05:00</published><updated>2018-03-06T07:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-03-06:/2018/intentional-cyclicality.html</id><summary type="html">The kinds of cycles I often into naturally are not bad things—but I might be better served by letting my other goals and aims directly inform how much I blog (rather than its being mere incidental fallout).
</summary><content type="html">&lt;p&gt;If you look closely at my written output on this site (and indeed on all the previous incarnations of it), you’ll notice a sort of trend: repeating &lt;a href="http://www.chriskrycho.com/2014/three-month-cycles.html" title="Three Month Cycles. Or something thereabouts."&gt;cycles&lt;/a&gt; of substantial output, usually focused in a particular direction, followed by a period of silence and then, when I start back up, usually a different topic at the fore.&lt;/p&gt;
&lt;p&gt;Over the last year, for example, you can see phases of emphasis on TypeScript and on art, phases where I wrote on a mix including productivity and on programming languages and type theory. But you can also see gaps. Nothing at all appeared here between August and November last year.&lt;/p&gt;
&lt;p&gt;This morning, I was reading &lt;a href="http://ayjay.org"&gt;Alan Jacobs&lt;/a&gt; at his &lt;a href="http://text-patterns.thenewatlantis.com/"&gt;Text Patterns&lt;/a&gt; blog (&lt;a href="http://text-patterns.thenewatlantis.com/2018/03/rewriting-ancient-history.html" title="Rewriting Ancient History"&gt;this post&lt;/a&gt;, if you’re curious), and thinking on his &lt;a href="http://text-patterns.thenewatlantis.com/2018/03/back-in-saddle.html" title="Back in the Saddle"&gt;“I’m back!”&lt;/a&gt; post from a few days ago. Since I started reading Jacobs a few years ago, I’ve watched him go through a number of cycles: he’ll simply say “I have other things I need to do now; I have no idea if I’ll pick this specific site back up, but if I do it won’t be for a good long while!” and &lt;a href="http://text-patterns.thenewatlantis.com/2017/09/pinboard.html" title="Redirecting to Pinboard"&gt;be on his way&lt;/a&gt;. The site will sit dormant for the better part of a year. And then: “I’m back!” (I doubt Jacobs will ever stop blogging; he seems to find it a fruitful medium &lt;a href="TODO"&gt;for many of the same reasons I do&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The thought that caught my attention today is what Jacobs got up to in the meantime. My breaks tend to be forced on me by simply running out of steam or getting distracted by &lt;a href="https://true-myth.js.org/" title="True Myth"&gt;other projects&lt;/a&gt;. Jacobs… writes whole books ranging from the &lt;a href="TODO" title="How to Think: A Guide for the Perplexed"&gt;popular (and important!)&lt;/a&gt; to the &lt;a href="TODO" title="The Year of Our Lord 1943: TODO"&gt;academic (and important!)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As to why that caught my attention so: I also read &lt;a href="http://stephaniehurlburt.com/"&gt;Stephanie Hurlburt&lt;/a&gt;, and &lt;a href="http://stephaniehurlburt.com/blog/2018/3/6/what-is-fulfillment" title="What is Fulfillment?"&gt;her most recent post&lt;/a&gt; had me thinking on plans and goals and hopes.&lt;/p&gt;
&lt;p&gt;I’ve been thinking for a while now about how I accomplish both my day-to-day goals and my longer-term aims. Some of the things I want to do are, like Hurlburt’s bigger goals listed near the end of that post, in the 5–10-year category! Accomplishing some of those kinds of things requires focus, discipline, and time. All of which together suggest the importance of recognizing that the kinds of cycles I have fallen into naturally are not bad things, but that I might be better served by letting my other goals and aims &lt;em&gt;directly&lt;/em&gt; inform how much I blog (rather than its being mere incidental fallout).&lt;/p&gt;
&lt;p&gt;More on this later. For now I have a &lt;a href="https://emberconf.com/speakers.html#chris-krycho" title="EmberConf: TypeScript Up Your Ember.js App!"&gt;conference workshop&lt;/a&gt; to finish preparing for and three New Rustacean episodes planned for the month.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;(Yes. I did that on purpose.)&lt;/p&gt;
</content><category term="writing"></category></entry><entry><title>A Forgotten Blog Post Idea</title><link href="http://www.chriskrycho.com/2018/a-forgotten-blog-post-idea.html" rel="alternate"></link><published>2018-02-25T16:00:00-05:00</published><updated>2018-02-25T16:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-25:/2018/a-forgotten-blog-post-idea.html</id><summary type="html">One of the most frustrating things as a writer is when you have a good idea and then *forget it*. This has happened to me before. So in trade, here are the couple paragraphs of notes (on one particular failing I see among my fellow conservatives) from the last time this happened to me.
</summary><content type="html">&lt;p&gt;One of the most frustrating things as a writer is when you have a good idea and then &lt;em&gt;forget it&lt;/em&gt;. I had a thought this morning, and it was solid. But I was not in a spot where I could write it down (whether in a notebook or in &lt;a href="http://www.bear-writer.com"&gt;Bear&lt;/a&gt;). The frustration I feel at this is hard to express, but here I am trying.&lt;/p&gt;
&lt;p&gt;It is such a frustrating experience that I &lt;em&gt;keenly&lt;/em&gt; remember the experience happening to me once before—back in 2016, for a post I have not yet finished writing because I continually find it &lt;em&gt;beyond&lt;/em&gt; me. And since I cannot remember today’s good idea, and haven’t finished the last good idea, I’ll just share the notes I wrote down back in March 2016 about that idea in hopes that either I will actually run with them sooner rather than later, or that the act of putting it out there in this brief form will be enough to allow me to let it go:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;American conservatives point to previous eras as if our nation were less sinful, less blemished then. It was not. It was wretched in different ways—but no less wicked than now. Centuries of slavery, and of Jim Crow, &lt;em&gt;are not lesser sins than today’s sexual ills.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Conservatives have too often elided these essential questions: Whose “better” past? And in what sense “better”? It may have been less sexually perverse, but how is that “better” when it entailed at the same time massive oppression of whole groups of people—especially because that oppression was so often at the hands of people claiming the name of Christ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is a great deal to unpack there, and I continue to find it more than I am really &lt;em&gt;able&lt;/em&gt; to unpack.&lt;/p&gt;
</content><category term="writing"></category><category term="ethics"></category><category term="politics"></category></entry><entry><title>A Strange Little Thought</title><link href="http://www.chriskrycho.com/2018/a-strange-little-thought.html" rel="alternate"></link><published>2018-02-23T07:15:00-05:00</published><updated>2018-02-23T07:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-23:/2018/a-strange-little-thought.html</id><summary type="html">I was, for some reason, thinking about the movie _Groundhog Day_ this morning… and it led me to wonder: What would I think of yesterday’s choices if I had to live today over and over again?
</summary><content type="html">&lt;p&gt;I was, for some reason, thinking about the movie &lt;em&gt;Groundhog Day&lt;/em&gt; this morning, and thinking about what it would be like to be caught in a temporal loop of that sort. Plenty of interesting things have been said about the movie (which is &lt;em&gt;very&lt;/em&gt; good), but one I’ve not considered before is the extent to which the day Bill Murray’s character lives (and lives and lives and lives) is a product of choices he made the day before.&lt;/p&gt;
&lt;p&gt;The loudest (though least important) of these earlier choices in the film is the alarm clock which wakes Murray’s character every day. He starts the day on the same radio station to the same vapid announcements because of choices he is powerless to affect in any way throughout the film: whatever he had done the night before.&lt;/p&gt;
&lt;p&gt;The quieter (but much more important) versions of that are that the people in the town are who they are, and Murray’s own character is who and what he is, because of choices now out of all of their hands. The past is fixed to us, and in very real ways, we are who we are and live the lives we live now because of things we have already done (and things others have already done) and which we cannot change. That goes for it all: good, bad, and indifferent. And so the other side of the coin is that the choices we make &lt;em&gt;today&lt;/em&gt; similarly mark our courses for the future.&lt;/p&gt;
&lt;p&gt;Nothing particularly profound or novel in any of that, of course. It was just something that was made a bit more striking in thinking about the predicament of a man caught in a time loop, living the exact same day over and over and therefore more particularly confronted with the choices that had led him to that specific day. &lt;em&gt;What&lt;/em&gt;, I wonder, &lt;em&gt;would I think of yesterday’s choices if I had to live today over and over again?&lt;/em&gt; And likewise: &lt;em&gt;What of tomorrow and the choices I make today?&lt;/em&gt;—even just at that simplest level of setting an alarm.&lt;/p&gt;
&lt;p&gt;Just a strange little thought to start the day.&lt;/p&gt;
</content><category term="ethics"></category><category term="film"></category></entry><entry><title>Against Doing What Comes Naturally.</title><link href="http://www.chriskrycho.com/2018/against-doing-what-comes-naturally.html" rel="alternate"></link><published>2018-02-22T07:00:00-05:00</published><updated>2018-02-22T07:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-22:/2018/against-doing-what-comes-naturally.html</id><summary type="html">Twice, recently, I have found myself needing to start over—essentially from scratch—on something I had written. One was a tech talk for work, another my [promised](http://www.chriskrycho.com/2017/2017-in-review-my-goals.html "2017 In Review: My Goals") post on how we chose a new church after we moved across the country. Both pieces suffered from an overabundance of combativeness. Or: I was kind of a jerk in the first drafts.…
</summary><content type="html">&lt;p&gt;Twice, recently, I have found myself needing to start over—essentially from scratch—on something I had written. One was a tech talk for work, another my &lt;a href="http://www.chriskrycho.com/2017/2017-in-review-my-goals.html" title="2017 In Review: My Goals"&gt;promised&lt;/a&gt; post on how we chose a new church after we moved across the country.&lt;/p&gt;
&lt;p&gt;Both pieces suffered from an overabundance of combativeness. Or: I was kind of a jerk in the first drafts.&lt;/p&gt;
&lt;p&gt;Thinking about them this morning, I noted that in both cases my tendency was to write in a posture that mixed defensiveness with hostility to an existing structure. In both cases, that hostility might actually be well-deserved—but there are times and places for everything, including polemic, and the more I (separately) chewed on both of these pieces, the more I realized that I didn’t want to have an argument. In these cases, at least, I don’t want to &lt;em&gt;punch&lt;/em&gt; the views I disagree with, so much as gently nudge them out of the way while showing a more excellent way.&lt;/p&gt;
&lt;p&gt;This runs up against one of my deepest-seated tendencies. I am passionate about teaching, about showing a better way, about correcting and fixing ills in the world. I also find a good argument wonderfully sharpening to the way I think—tracing out differences, finding the weaknesses in my own views and either tightening them up or abandoning them as appropriate, understanding other views more clearly… Those are good passions in many ways, but like all good passions they can go awry very easily. In my case, they can lead me to treat &lt;em&gt;everything&lt;/em&gt; like an argument, and to go after everything that seems amiss to me with the same kind of knock-it-down-with-a-battering-ram approach.&lt;/p&gt;
&lt;p&gt;In the last fifteen years, I have been learning &lt;em&gt;not&lt;/em&gt; to verbally hammer at problems (whether in person or in writing). I have slowly learned to listen carefully and try to understand why someone holds the view they do, even when I still think their view is wrong. I have seen firsthand that people’s surface statements and their deepest-held beliefs alike often derive from experiences that are &lt;em&gt;not&lt;/em&gt; obvious on the surface. Their struggles are not necessarily apparent. Their histories certainly are not.&lt;/p&gt;
&lt;p&gt;I have also slowly learned that a nudge here and a nudge there can often be both more effective and—more importantly—&lt;em&gt;kinder&lt;/em&gt; than trying to shove people where I think they ought to be. Even when I’m right about where they ought to be! And my judgments of such things, I have also too-slowly learned, are far less than perfect—which should temper the vigor with which I sally forth to do battle for those judgments.&lt;/p&gt;
&lt;p&gt;Make no mistake: there are times for rebuke. There are times to say, “This view you hold [about software development, or Christianity, or financial practices, or whatever else]? It’s &lt;em&gt;dead wrong&lt;/em&gt;.” But not all the time. Even though it’s what’s “natural” for me, even though it’s what feels right sometimes.&lt;/p&gt;
&lt;p&gt;Sometimes, we have to fight our strongest instincts. No matter how natural something feels, it can be &lt;em&gt;wrong&lt;/em&gt;. That is certainly so for me when I get combative about something I’m passionate about. It’s the right response… &lt;em&gt;occasionally&lt;/em&gt;. Nearly all of the time, I need to be quieter, gentler, more patient, more understanding, and less interested in winning a fight.&lt;/p&gt;
</content><category term="ethics"></category><category term="writing"></category></entry><entry><title>Good Work Takes Time</title><link href="http://www.chriskrycho.com/2018/good-work-takes-time.html" rel="alternate"></link><published>2018-02-17T18:00:00-05:00</published><updated>2018-02-17T18:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-17:/2018/good-work-takes-time.html</id><summary type="html">It’s obvious enough when you say it aloud, of course, but it bears reiterating, and often: Good work takes time, and most of the time and effort behind good projects remains forever invisible.
</summary><content type="html">&lt;p&gt;It’s obvious enough when you say it aloud, of course, but it bears reiterating, and often: &lt;em&gt;Good work takes time, and most of the time and effort behind good projects remains forever invisible.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of the things I did in 2017 that I’m most proud of (and which I get &lt;em&gt;enormous&lt;/em&gt; utility from every day at work) is building &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth&lt;/a&gt;, a library implementing &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; types in TypeScript.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;Note: if you’re about to tune out because this sounds technical, don’t. You can understand everything important in this post without understanding a thing about TypeScript or these particular types.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;There’s nothing &lt;em&gt;particularly&lt;/em&gt; special about that library compared to any of the others in the space which already do the same thing. It makes its own &lt;a href="https://github.com/chriskrycho/true-myth/blob/master/README.md#why-not" title="Comparisons with Folktale and Sanctuary"&gt;design tradeoffs&lt;/a&gt;, which are slightly &lt;em&gt;different&lt;/em&gt; from others, and it has what I think are &lt;a href="https://true-myth.js.org"&gt;best-in-class docs&lt;/a&gt;, but mostly it’s comparable to the others. Still, it’s &lt;em&gt;good&lt;/em&gt;, and it fits that particular niche in terms of design tradeoffs pretty well in my view.&lt;/p&gt;
&lt;p&gt;If you just saw the public work on that, you’d have first heard of it &lt;em&gt;at the earliest&lt;/em&gt; when I pushed the first commit to GitHub on September 21, 2017. But the roots go much, much further back.&lt;/p&gt;
&lt;p&gt;For one thing, I just found a related bit of work dating all the way back to January 10, 2017: an early attempt to see if I could directly reimplement Rust’s Result and Option types in TypeScript, in the early days of my adoption of TypeScript.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; That initial spike didn’t work—and I mean that literally; I didn’t yet have enough of a handle on TypeScript’s type system to get it to actually compile! But it was the first of &lt;em&gt;multiple&lt;/em&gt; (mostly very brief) swings I took at it over the course of the year. The culmination of those repeated stabs at the problem was True Myth, with its polish, test coverage, and very considered design tradeoffs.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But none of that would have happened without the better part of a year of experimenting along the way.&lt;/p&gt;
&lt;p&gt;What’s more: even that January spike wasn’t the real start of True Myth. I have code in our codebase (code we’re finally mostly done replacing with True Myth!) that was an early attempt to capture these same basic ideas in plain-old JavaScript—code that dates to March 2016!&lt;/p&gt;
&lt;p&gt;So: do not be discouraged when your own work seems to take a long time, or when you see others produce what seem to be fully-formed projects all in a rush. Always, our best work stands on a foundation—of ideas simmering over time, of previous attempts that got partway, of previous outright &lt;em&gt;failures&lt;/em&gt;—and all of that is “underground,” out of sight.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Somewhat amusingly to me in retrospect, I’d switched from Flow to TypeScript on our codebase at Olo as my final act of 2016.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I remain convinced that we hit a &lt;em&gt;really&lt;/em&gt; sweet spot with the design here: it works well as idiomatic JavaScript &lt;em&gt;and&lt;/em&gt; supports nice functional idioms and I think it just feels nice to use &lt;em&gt;in JavaScript&lt;/em&gt;—not just as a port of ideas from Haskell, Scala, etc.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="writing"></category><category term="ethics"></category></entry><entry><title>Agent of Change</title><link href="http://www.chriskrycho.com/2018/agent-of-change.html" rel="alternate"></link><published>2018-02-16T06:30:00-05:00</published><updated>2018-02-16T06:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-16:/2018/agent-of-change.html</id><summary type="html">Sometimes you just need “popcorn”—and Sharon Lee and Steve Miller’s first novel is exactly that. (Just… pardon the frequent POV switches.)</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I keep my book review ratings simple—they’re either &lt;em&gt;required&lt;/em&gt;, &lt;em&gt;recommended&lt;/em&gt;, &lt;em&gt;recommended with qualifications&lt;/em&gt;, or &lt;em&gt;not recommended&lt;/em&gt;. If you want the TL;DR, this is it:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended:&lt;/strong&gt; Sometimes you just need “popcorn”—and Sharon Lee and Steve Miller’s first novel is exactly that. (Just… pardon the frequent POV switches.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;At my friend &lt;a href="http://stephencarradini.com"&gt;Stephen&lt;/a&gt;’s recommendation (“a surprisingly fun sci-fi adventure romp. Lots of romantic tension, surprisingly chaste (and pretty satisfying) payoff [with] some of the coolest, most interesting protagonist aliens I’ve read about in a long time”) I picked up Sharon Lee and Steve Miller’s &lt;em&gt;Agent of Change&lt;/em&gt;,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and I quite enjoyed it.&lt;/p&gt;
&lt;p&gt;Sometimes, in the midst of hammering away at work and dealing with the tumult of moving into a new house, it’s nice to grab the literary equivalent of a bag of chips or a bowl of popcorn. This is that. There was nothing in this book that was anything like as interesting or engaging as sci-fi &lt;a href="http://www.chriskrycho.com/2017/icehenge.html" title="Icehenge (review on this site)"&gt;can be&lt;/a&gt;—but it was, in Stephen’s words, an &lt;em&gt;adventure romp&lt;/em&gt;, and that was perfect. The characters are fun, well-drawn if never particularly surprising. The plot is essentially an escape story (and in more ways than it first appears).&lt;/p&gt;
&lt;p&gt;The only real &lt;em&gt;problem&lt;/em&gt; on display with the book is that it completely disregards anything like modern conventions around point-of-view. A paragraph break is sufficient for a total change of internal perspective. This drove me crazy the entire book.&lt;/p&gt;
&lt;p&gt;Might I read another entry in this universe, the next time I’m looking for merely a romp? Indeed I might.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;&lt;em&gt;Agent of Change&lt;/em&gt; is the first book in their Liaden series. It’s also listed as anything &lt;em&gt;but&lt;/em&gt; the first book, because republication and branding have dropped it at its chronological position in their larger universe… but book &lt;em&gt;nine&lt;/em&gt; it is not, whatever Amazon tells you.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="book reviews"></category><category term="science fiction"></category></entry><entry><title>Announcing ember-cli-typescript 1.1.0</title><link href="http://www.chriskrycho.com/2018/announcing-ember-cli-typescript-110.html" rel="alternate"></link><published>2018-02-12T07:00:00-05:00</published><updated>2018-02-12T07:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-12:/2018/announcing-ember-cli-typescript-110.html</id><summary type="html">Now with generators, support for addons, and incremental compilation! A lot has changed in the last six months, and we’re ready to kick the ecosystem into high gear!</summary><content type="html">&lt;p&gt;I’m delighted to announce the release of &lt;a href="https://github.com/typed-ember/ember-cli-typescript/releases/tag/v1.1.0"&gt;ember-cli-typescript 1.1.0&lt;/a&gt;. This first minor release since 1.0 includes the following shiny and awesome new features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#generators"&gt;Generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#developing-addons"&gt;Support for developing addons in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#incremental-compilation"&gt;Incremental compilation (a.k.a. fast rebuilds in &lt;code&gt;ember serve&lt;/code&gt; mode)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="generators" class="level2"&gt;
&lt;h2&gt;Generators&lt;/h2&gt;
&lt;p&gt;We’ve now added support for generating &lt;em&gt;all&lt;/em&gt; standard Ember items as TypeScript files instead of JavaScript files. So now when you run &lt;code&gt;ember generate component user-profile&lt;/code&gt; for example, you’ll get &lt;code&gt;user-profile.ts&lt;/code&gt;, &lt;code&gt;user-profile-test.ts&lt;/code&gt;, and &lt;code&gt;user-profile.hbs&lt;/code&gt;. For most files, this is just a nicety—just two files you don’t have to rename!—but in the case of services, controllers, and Ember Data models, adapters, and serializers it will actually make a really big difference in your experience of using TypeScript in your app or addon.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those generators are &lt;em&gt;mostly&lt;/em&gt; identical with ones in Ember and Ember Data, just with &lt;code&gt;.ts&lt;/code&gt; instead of &lt;code&gt;.js&lt;/code&gt; for the extension. The only changes we have made are: (a) we’ve tweaked them to use classes where possible, and (b) we have customized the controller, service, and Ember Data model, adapter, and serializer generators so you get the most mileage out of TypeScript for the least effort we can manage today. So when you do &lt;code&gt;ember generate service session&lt;/code&gt;, this is what you’ll see:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;

export default class Session extends Service.extend({
  // anything which *must* be merged on the prototype
}) {
  // normal class definition
}

// DO NOT DELETE: this is how TypeScript knows how to look up your services.
declare module &amp;quot;ember&amp;quot; {
  interface ServiceRegistry {
    session: Session;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Courtesy of these generators, you can now write &lt;em&gt;almost&lt;/em&gt; exactly what you’d write in vanilla Ember and get full support for autocompletion of properties and methods on the &lt;code&gt;Session&lt;/code&gt; service, as well as type-checking for how you use those. Service and controller injections just require you to explicitly name the service or controller being injected:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { inject as service } from &amp;quot;@ember/service&amp;quot;;

export default class UserProfile extends Component {
  session = service(&amp;quot;session&amp;quot;);
  // note the string ^ naming the service explicitly
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, for example, if your &lt;code&gt;session&lt;/code&gt; service had a &lt;code&gt;login&lt;/code&gt; method on it:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;
import RSVP from &amp;quot;rsvp&amp;quot;;

export default class Session extends Service {
  login(email: string, password: string): RSVP.Promise&amp;lt;string&amp;gt; {
    // some API call to log in
  }
}

// DO NOT DELETE: this is how TypeScript knows how to look up your services.
declare module &amp;quot;ember&amp;quot; {
  interface ServiceRegistry {
    session: Session;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then anywhere you injected and used it, you’ll get auto-complete suggestions and type checking:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/ts-autocomplete.png" alt="autocompletion" /&gt;&lt;figcaption&gt;autocompletion&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/ts-type-checking.png" alt="type-checking" /&gt;&lt;figcaption&gt;type-checking&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(You’ll see the same kinds of things in other editors, from Vim to IntelliJ IDEA. Visual Studio Code is just my current editor of choice.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="addon-development" class="level2"&gt;
&lt;h2&gt;Addon development&lt;/h2&gt;
&lt;p&gt;As &lt;a href="http://www.chriskrycho.com/2017/announcing-ember-cli-typescript-100.html#the-roadmap"&gt;promised with the 1.0 release&lt;/a&gt;, 1.1 (though arriving much later than I hoped it would) includes support for developing addons with TypeScript.&lt;/p&gt;
&lt;p&gt;Strictly speaking, of course, you could &lt;em&gt;always&lt;/em&gt; develop addons using TypeScript, but there were two problems with it: (1) dependency management and (2) manual work required to deal with the dependency management problems.&lt;/p&gt;
&lt;section id="dependency-management" class="level3"&gt;
&lt;h3&gt;1. Dependency management&lt;/h3&gt;
&lt;p&gt;In the normal Ember CLI workflow, TypeScript had to be a &lt;code&gt;dependency&lt;/code&gt;—not a &lt;code&gt;devDependency&lt;/code&gt;—of the addon, because the normal pattern with Ember CLI is to ship the uncompiled files and have the consumer compile them all together at build time.&lt;/p&gt;
&lt;p&gt;This makes a certain amount of sense for Babel given the Ember community’s shared reliance on Babel: it’s just assumed to be part of every app build. In that case, it gives consumers control over their compilation target. If an app only needs to target evergreen browsers, it can do that and ship a smaller payload, because an addon won’t have pre-compiled in things like generator support, etc.&lt;/p&gt;
&lt;p&gt;In the case of TypeScript, however, this makes a lot less sense: many (probably &lt;em&gt;most&lt;/em&gt;) consumers of addons written in TypeScript will still be normal JavaScript consumers. We did not want to burden normal consumers with a TypeScript compile step. We &lt;em&gt;also&lt;/em&gt; didn’t want to burden any consumers with the reality that TypeScript is a &lt;em&gt;large&lt;/em&gt; install. TypeScript 2.6.2 is 32MB on disk for me. Even with some degree of deduplication by npm or yarn, if addons used a variety of versions of TypeScript for development—as they surely would!—the install cost for consumers would quickly spiral into a nasty spot. And again: that’s bad enough for someone who &lt;em&gt;wants&lt;/em&gt; to use TypeScript in their app; it’s far worse for someone who just wants to consume the compiled JavaScript.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="manual-workarounds" class="level3"&gt;
&lt;h3&gt;2. Manual workarounds&lt;/h3&gt;
&lt;p&gt;You could work around all of that by building the JavaScript (and TypeScript definitions) yourself. But as part of that, you had to do all the work of making sure both the JavaScript files and the type definitions you generated ended up in the right place for distribution and consumption. That was always possible, but it was also always going to be a lot of work. In practice, as far as I know, &lt;em&gt;no one has done this&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solution" class="level3"&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;We now support TypeScript as a &lt;code&gt;devDependency&lt;/code&gt; and also manage the work of generating JavaScript and type definitions for you. All you have to do is install ember-cli-typescript into an addon, and then when you do your build step, we’ll automatically do the work (on prepublish) of generating TypeScript &lt;code&gt;.d.ts&lt;/code&gt; files and JavaScript source for you.&lt;/p&gt;
&lt;p&gt;Consumers of your addon, therefore, will (a) not know or care that the addon is written in TypeScript if they just want to consume it as normal JavaScript&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; or (b) will get the benefits of your having written the library in TypeScript without paying the penalty of having to have multiple versions of the TypeScript compiler downloaded to their own app.&lt;/p&gt;
&lt;p&gt;One important caveat: we do &lt;em&gt;not&lt;/em&gt; support TypeScript in an addon’s &lt;code&gt;app&lt;/code&gt; directory. However, for most addons, we don’t think this should be a problem. It’s rare for addons to put actual implementation in the &lt;code&gt;app&lt;/code&gt; directory; instead it has simply become conventional for the &lt;code&gt;app&lt;/code&gt; directory simply to have re-exports for convenient access to the functionality supplied by the addon.&lt;/p&gt;
&lt;p&gt;Also note that you can supply type definitions for your addon &lt;em&gt;without&lt;/em&gt; developing the addon itself in TypeScript.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; You do &lt;em&gt;not&lt;/em&gt; need ember-cli-typescript installed for that. You only need the addon if you actually want to take advantage of the opportunities TypeScript affords for developing your own addon.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="incremental-compilation" class="level2"&gt;
&lt;h2&gt;Incremental compilation&lt;/h2&gt;
&lt;p&gt;Last but not least, we’ve managed—mostly through the hard work of both Dan Freeman (&lt;a href="https://github.com/dfreeman"&gt;@dfreeman&lt;/a&gt;) and Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;—to get support for TypeScript’s &lt;code&gt;--watch&lt;/code&gt; mode integrated.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; What this means in practice is: &lt;em&gt;way&lt;/em&gt; faster iteration as you work.&lt;/p&gt;
&lt;p&gt;Previously, every time you triggered &lt;em&gt;any&lt;/em&gt; change in your app (even if it didn’t involve any TypeScript files at all), the TypeScript compiler would recompile &lt;em&gt;all&lt;/em&gt; the TypeScript files in your application. We didn’t initially have a good way to make TypeScript and Broccoli (and therefore Ember CLI) communicate clearly about what had changed. Now, courtesy of Dan and Derek’s hard work (and my cheerleading, testing, and fixing a few corner pieces along the way), we do! So when you change a &lt;code&gt;.hbs&lt;/code&gt; file or a &lt;code&gt;.js&lt;/code&gt; file… the TypeScript compiler won’t do anything. And when you change a TypeScript file, the TypeScript compiler will &lt;em&gt;only&lt;/em&gt; recompile that file.&lt;/p&gt;
&lt;p&gt;On my own app (~35,000 lines of TypeScript across ~700 files), that’s the difference between rebuilds involving TypeScript taking 15–20 seconds and their taking 1–2 seconds. Literally an order of magnitude faster! Over the course of a day of development, that saves a &lt;em&gt;huge&lt;/em&gt; amount of time.&lt;/p&gt;
&lt;p&gt;The way we did it also solved an incredibly annoying problem we had in the previous pass: &lt;em&gt;any&lt;/em&gt; change to your app was triggering &lt;code&gt;tsc&lt;/code&gt; to rebuild the entire TypeScript tree of your app, even if you didn’t so much as look at &lt;code&gt;.ts&lt;/code&gt; file. This was particularly annoying when combined with the long rebuild times: change a CSS file and wait for your TypeScript files to rebuild? Ugh. But not anymore!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="credit-and-thanks" class="level2"&gt;
&lt;h2&gt;Credit and Thanks&lt;/h2&gt;
&lt;p&gt;Massive credit goes to Dan Freeman (&lt;a href="https://github.com/dfreeman"&gt;@dfreeman&lt;/a&gt;) and Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;), who did most of the heavy lifting on the internals for this release, and together unlocked both incremental compilation and addon support. Derek also did the lion’s share of the work on writing the types for Ember and Ember Data.&lt;/p&gt;
&lt;p&gt;Thanks to Maarten Veenstra (&lt;a href="https://github.com/maerten"&gt;@maerten&lt;/a&gt;) for the original inspiration (and a spike last summer) for using a type registry, and to Mike North (&lt;a href="https://github.com/maerten"&gt;@mike-north&lt;/a&gt;) for some discussion and planning around the idea late in 2017. I may have implemented them, but the ideas came from the community!&lt;/p&gt;
&lt;p&gt;Thanks to Frank Tan (&lt;a href="https://github.com/tansongyang"&gt;@tansongyang&lt;/a&gt;) for doing a lot of the work on porting the generators from the Ember and Ember Data repositories to ember-cli-typescript, as well as converting them to TypeScript and to use the new formats. He also contributed the type definitions for the new (&lt;a href="https://github.com/emberjs/rfcs/pull/232/"&gt;RFC #232&lt;/a&gt;) QUnit testing API.&lt;/p&gt;
&lt;p&gt;Thanks to everyone who contributed to ember-cli-typescript or the Ember typings in any way since we released 1.0.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ember-cli-typescript contributors (note that I intentionally include here everyone who opened issues on the repository: that is &lt;em&gt;not&lt;/em&gt; a small thing and has helped us immensely):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bryan Crotaz (&lt;a href="https://github.com/BryanCrotaz"&gt;@BryanCrotaz&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Daniel Gratzl (&lt;a href="https://github.com/danielgratzl"&gt;@danielgratzl&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guangda Zhang (&lt;a href="https://github.com/inkless"&gt;@inkless&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/guangda-prosperworks"&gt;@guangda-prosperworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Krati Ahuja (&lt;a href="https://github.com/kratiahuja"&gt;@kratiahuja&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Martin Feckie (&lt;a href="https://github.com/mfeckie"&gt;@mfeckie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Nikos Katsikanis (&lt;a href="https://github.com/QuantumInformation"&gt;@QuantumInformation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Per Lundberg (&lt;a href="https://github.com/perlun"&gt;@perlun&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Prabhakar Poudel (&lt;a href="https://github.com/prabhakar-poudel"&gt;@Prabhakar-Poudel&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ryan LaBouve (&lt;a href="https://github.com/ryanlabouve"&gt;@ryanlabouve&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Simon Ihmig (&lt;a href="https://github.com/simonihmig"&gt;@simonihmig&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Theron Cross (&lt;a href="https://github.com/theroncross"&gt;@theroncross&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Thomas Gossman (&lt;a href="https://github.com/gossi"&gt;@gossi&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Vince Cipriani (&lt;a href="https://github.com/vcipriani"&gt;@vcipriani&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember typings contributors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adnan Chowdhury (&lt;a href="https://github.com/bttf"&gt;@bttf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Frank Tan (&lt;a href="https://github.com/tansongyang"&gt;@tansongyang&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Guangda Zhang (&lt;a href="https://github.com/inkless"&gt;@inkless&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ignacio Bona Piedrabuena (&lt;a href="https://github.com/igbopie"&gt;@igbopie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Leonard Thieu &lt;a href="https://github.com/leonard-thieu"&gt;@leonard-thieu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logan Tegman &lt;a href="https://github.com/ltegman"&gt;@ltegman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Martin Feckie (&lt;a href="https://github.com/mfeckie"&gt;@mfeckie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Mike North (&lt;a href="https://github.com/maerten"&gt;@mike-north&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Nathan Jacobson (&lt;a href="https://github.com/natecj"&gt;@natecj&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Per Lundberg (&lt;a href="https://github.com/perlun"&gt;@perlun&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Robin Ward (&lt;a href="https://github.com/eviltrout"&gt;@eviltrout&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to Rob Jackson (&lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt;) and Tobias Bieniek (&lt;a href="https://github.com/Turbo87"&gt;@Turbo87&lt;/a&gt; on GitHub, @tbieniek in the Ember Slack) for answering tons of questions and putting up with regular pestering about Ember CLI.&lt;/p&gt;
&lt;p&gt;And last but not least, thanks to everyone who’s popped into #topic-typescript on the Ember Community Slack with questions, comments, problem reports, and the occasional word of encouragement. It really does help.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For details on how this all works, see &lt;a href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;TypeScript and Ember.js Update: Part 4&lt;/a&gt;, where I discuss these changes in detail.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;although they may actually get some benefits in a number of modern editors, since e.g. VS Code and the JetBrains IDEs will leverage types if they exist!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;More on that in a post to be released in the next couple weeks—one I promised &lt;em&gt;long&lt;/em&gt; ago, but which we’re now in a place to actually do: a plan and a roadmap for typing the whole Ember ecosystem!&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;And of course, right as we finally landed our support for it, by hacking around the &lt;code&gt;--watch&lt;/code&gt; invocation in a lot of really weird ways, Microsoft shipped API-level support for it. We hope to switch to using that under the hood, but that shouldn’t make any difference at all to you as a consumer of the addon, except that if/when we land it at some point, you’ll just have a nicer experience.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="typescript"></category><category term="javascript"></category><category term="typing-your-ember"></category></entry><entry><title>A Meander</title><link href="http://www.chriskrycho.com/2018/a-meander.html" rel="alternate"></link><published>2018-02-09T07:00:00-05:00</published><updated>2018-02-09T07:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-09:/2018/a-meander.html</id><summary type="html">Because some days you want to write, but don’t have anything particularly focused or coherent to say. So: open-source software, Twitter and blogging, word vomit, and reading widely and deeply.
</summary><content type="html">&lt;p&gt;This is a meander. I have a bunch of mostly-unformed thoughts, and I want to write, and the two come out here, together, in the next few minutes before I start my workday proper (because I stayed up late last night working on open source software and got up late accordingly, and so have a great deal less of &lt;a href="http://www.chriskrycho.com/2017/knowing-your-rhythms.html" title="“Knowing Your Rhythms”"&gt;my normally-allocated writing time&lt;/a&gt; available today).&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="section" class="level2"&gt;
&lt;h2&gt;1.&lt;/h2&gt;
&lt;p&gt;Open-source software is a very strange place, and the dynamics of it favor those of us who already have well-paying jobs and lots of flexibility in our schedule.&lt;/p&gt;
&lt;p&gt;This isn’t &lt;em&gt;necessarily&lt;/em&gt; a bad thing. It means that anyone who wants to use open-source contribution as a gauge of someone’s fitness to work is making a pretty foolish decision, though: they’re inherently cutting off a whole sector—dare I say it, a whole &lt;em&gt;class&lt;/em&gt;—of people who simply do not (and, barring being given a pretty surprising break, will never) have that kind of stability and flexibility.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="section-1" class="level2"&gt;
&lt;h2&gt;2.&lt;/h2&gt;
&lt;p&gt;Twitter is really, &lt;em&gt;really&lt;/em&gt; bad for meaningful discussion. I follow both &lt;a href="https://mobile.twitter.com/noahpinion"&gt;Noah Smith (@noahpinion)&lt;/a&gt; and &lt;a href="https://mobile.twitter.com/lymanstoneky"&gt;Lyman Stone (@lymanstoneky)&lt;/a&gt;, and they’re both extremely interesting follows, and they’re both clearly &lt;em&gt;really&lt;/em&gt; smart and &lt;em&gt;really&lt;/em&gt; well-informed, and in their off-Twitter writing they both do a good job of fairly representing others’ views and interacting with them.&lt;/p&gt;
&lt;p&gt;On Twitter, their arguments are a disaster.&lt;/p&gt;
&lt;p&gt;This is not specific to Smith and Stone. This is Twitter in one pair of interlocutors.&lt;/p&gt;
&lt;p&gt;Seriously: stop tweeting and start blogging again, if you have an &lt;em&gt;argument&lt;/em&gt; to make rather than just a pithy, one-off observation or a link to share.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="section-2" class="level2"&gt;
&lt;h2&gt;3.&lt;/h2&gt;
&lt;p&gt;You can get a surprising amount of writing done in 5 minutes, if you’re willing to just word-vomit. (This whole post, start to finish, took me 12 minutes.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="section-3" class="level2"&gt;
&lt;h2&gt;4.&lt;/h2&gt;
&lt;p&gt;I need to read more poetry; more rich, good fiction; more rich, good nonfiction. I’ve read a lot of nonfiction in the last five years, but I wouldn’t call most of it &lt;em&gt;rich&lt;/em&gt;. Most of it—most of my seminary reading, that is—was &lt;em&gt;just okay&lt;/em&gt;; very little of it engaged deeply with thought critical of its own perspective. (Major exceptions: David Koyzis’ really excellent &lt;em&gt;Political Visions and Illusions&lt;/em&gt;, Alvin Plantinga’s &lt;em&gt;Where the Conflict Really Lies&lt;/em&gt;, and of course St. Athanasius’ &lt;em&gt;On the Incarnation&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;But I find that my own writing is far sharper, clearer, and better when I’m drawing &lt;em&gt;widely&lt;/em&gt; and from &lt;em&gt;deep wells&lt;/em&gt;. Widely, because I find that too much time in the same spot overly narrows my focus, whether that is apologetics or programming languages. From deep wells because, frankly, there is too much out there which warrants nothing more than a skim &lt;em&gt;at most&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And that is all!&lt;/p&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="open-source software"></category><category term="ethics"></category><category term="reading"></category><category term="literature"></category></entry><entry><title>TypeScript and Ember.js Update, Part 4</title><link href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html" rel="alternate"></link><published>2018-02-08T07:30:00-05:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-02-08:/2018/typing-your-ember-update-part-4.html</id><summary type="html">Using Ember Data effectively, and migrating to new (better, easier!) approaches for service and controller lookup while we’re at it.</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the previous posts in this series, I introduced the big picture of how the story around TypeScript and Ember.js has improved over the last several months, walked through some important background on class properties, and dug deep on computed properties, actions, and mixins.&lt;/p&gt;
&lt;p&gt;In today’s post, we’ll look at how to write Ember Data models so they work correctly throughout your codebase, and see some improvements to how we can do &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; injections even from a few weeks ago.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s the outline of this update sequence:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Overview, normal Ember objects, component arguments, and injections.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Computed properties, actions, mixins, and class methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;&lt;strong&gt;Using Ember Data, and service and controller injections improvements.&lt;/strong&gt; (this post)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="ember-data" class="level2"&gt;
&lt;h2&gt;Ember Data&lt;/h2&gt;
&lt;p&gt;There remains one significant challenges to using Ember Data effectively with TypeScript today: Ember Data, for reasons I haven’t yet dug into myself, does not play nicely with ES6 classes. However, we &lt;em&gt;need&lt;/em&gt; named class exports for the sake of being able to use them as types elsewhere in our programs. The hack to work around this is much the same as anywhere else we need named exports but have to get things back into the prototype:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can still define other items of the class normally, but attributes have to be prototypally bound or &lt;em&gt;you will have problems&lt;/em&gt;. Note that this only applies (as far as I can tell) to Ember Data &lt;code&gt;Model&lt;/code&gt;s specifically—&lt;code&gt;Adapter&lt;/code&gt; and &lt;code&gt;Serializer&lt;/code&gt; classes work just fine.&lt;/p&gt;
&lt;p&gt;The other problem we’ve historically had was dealing with lookups—the situation was similar to that I described in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Part 3&lt;/a&gt; for service injection. However, as of &lt;em&gt;this week&lt;/em&gt;, we’re landing a solution that means you can drop the type coercions and just do a lookup like you would normally, and it will Just Work™️.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Keep your eyes open for the ember-cli-typescript 1.1 release in the next couple days!&lt;/p&gt;
&lt;p&gt;Once this release of both ember-cli-typescript and the updated typings land, when you generate an Ember Data model by doing &lt;code&gt;ember generate model person firstName:string lastName:string&lt;/code&gt;, it will look like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {
  // normal class body definition here
}

// DO NOT DELETE: this is how TypeScript knows how to look up your models.
declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That module and interface declaration at the bottom &lt;em&gt;merges&lt;/em&gt; the declaration for this model with the declarations for all the other models. You’ll see the same basic pattern for &lt;code&gt;DS.Adapter&lt;/code&gt; and &lt;code&gt;DS.Serializer&lt;/code&gt; instances. The result is that &lt;em&gt;using&lt;/em&gt; a model will now look like this. In addition to the &lt;code&gt;Person&lt;/code&gt; model definition just above, our adapter might be like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Adapter {
  update(changes: { firstName?: string; lastName?: string }) {
    fetch(&amp;quot;the-url-to-change-it&amp;quot;, {
      method: &amp;quot;POST&amp;quot;,
      body: JSON.stringify(changes)
    });
  }
}

declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then putting the pieces together, our component definition will just look like this:&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;*&lt;strong&gt;Note:&lt;/strong&gt; please see the &lt;a href="https://www.chriskrycho.com/2018/ember-ts-class-properties.html"&gt;update about class properties published mid-2018&lt;/a&gt;. The examples below are incorrect in several important ways.&lt;/p&gt;
&lt;/aside&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { inject as service } from &amp;quot;@ember/service&amp;quot;;

export default class PersonCard extends Component {
  id: string | number;

  store = service(&amp;quot;store&amp;quot;);
  model = this.store.findRecord(&amp;quot;person&amp;quot;, this.id);

  actions = {
    savePerson(changes: { firstName?: string; lastName?: string }) {
      this.store.adapterFor(&amp;quot;person&amp;quot;).update(changes);
    }
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The type of &lt;code&gt;model&lt;/code&gt; here is now &lt;code&gt;Person &amp;amp; DS.PromiseObject&amp;lt;Person&amp;gt;&lt;/code&gt; (which is actually what Ember Data returns for these kinds of things!), and the &lt;code&gt;this.store.adapterFor&lt;/code&gt; actually correctly returns the &lt;code&gt;Person&lt;/code&gt; adapter as well, so the call to its &lt;code&gt;update&lt;/code&gt; method type-checks as well (including guaranteeing that the arguments to it are correct). That also means you’ll get autocompletion for those, including for their types, if you’re using an editor configured for it. And, happily for everyone, if you mistype a string (&lt;code&gt;preson&lt;/code&gt; instead of &lt;code&gt;person&lt;/code&gt;, for example), you’ll get a compile-time error!&lt;/p&gt;
&lt;p&gt;Notice as well that the service injection is much cleaner than it was in earlier examples in the series. That’s because we made the same “registry”-type changes—as I suggested we might back in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Part 1&lt;/a&gt;!—for controller and service injections. Before, for this kind of thing:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;export default class PersonCard extends Component {
  store: Computed&amp;lt;DS.Store&amp;gt; = service();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;export default class PersonCard extends Component {
  store = service(&amp;quot;store&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s not &lt;em&gt;quite&lt;/em&gt; as minimalist as what you get in vanilla Ember (where the name of the property is used to do the lookup at runtime), but it’s pretty close, and a huge improvement! Not least since it’s &lt;em&gt;exactly&lt;/em&gt; as type-checked, and therefore as friendly to autocomplete/IntelliSense/etc. as it was before.&lt;/p&gt;
&lt;section id="migrating-existing-items" class="level3"&gt;
&lt;h3&gt;Migrating existing items&lt;/h3&gt;
&lt;p&gt;Your path forward for using the new approach is straightforward and fairly mechanical:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Add the module-and-interface declaration for each Ember Data &lt;code&gt;Model&lt;/code&gt;, &lt;code&gt;Adapter&lt;/code&gt;, and &lt;code&gt;Serializer&lt;/code&gt;; and also each Ember &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; you have defined.&lt;/li&gt;
&lt;li&gt;Remove any type coercions you’ve written out already for these.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="add-declaration" class="level4"&gt;
&lt;h4&gt;1. Add declaration&lt;/h4&gt;
&lt;section id="ds.model" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;DS.Model&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Model.extend({
  firstName: DS.attr(&amp;quot;string&amp;quot;),
  lastName: DS.attr(&amp;quot;string&amp;quot;)
}) {}

declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ds.adapter" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;DS.Adapter&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Adapter {
  // customization
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Adapter {
  // customization
}

declare module &amp;quot;ember-data&amp;quot; {
  interface AdapterRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ds.serializer" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;DS.Serializer&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Serializer {
  // customization
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import DS from &amp;quot;ember-data&amp;quot;;

export default class Person extends DS.Serializer {
  // customization
}

declare module &amp;quot;ember-data&amp;quot; {
  interface SerializerRegistry {
    person: Person;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="service" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;Service&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;

export default class ExternalLogging extends Service {
  // implementation
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Service from &amp;quot;@ember/service&amp;quot;;

export default class ExternalLogging extends Service {
  // implementation
}

declare module &amp;quot;ember&amp;quot; {
  interface ServiceRegistry {
    &amp;quot;external-logging&amp;quot;: ExternalLogging;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="controller" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;Controller&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Controller from &amp;quot;@ember/controller&amp;quot;;

export default class Profile extends Controller {
  // implementation
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Controller from &amp;quot;@ember/controller&amp;quot;;

export default class Profile extends Controller {
  // implementation
}

declare module &amp;quot;@ember/controller&amp;quot; {
  interface ControllerRegistry {
    profile: Profile;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you &lt;em&gt;don’t&lt;/em&gt; do add the type registry declarations, you’ll just get back:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;compiler errors&lt;/em&gt; for any use of a string key in your service and controller lookups&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; (the top-level classes we inherit from) instead of the specific class you created if you use the no-argument version of the &lt;code&gt;inject&lt;/code&gt; helpers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;compiler errors&lt;/em&gt; for &lt;code&gt;DS.Model&lt;/code&gt;, &lt;code&gt;DS.Adapter&lt;/code&gt;, and &lt;code&gt;DS.Serializer&lt;/code&gt; lookups (since they always have a string key)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re looking to allow your existing code to all just continue working while you &lt;em&gt;slowly&lt;/em&gt; migrate to TypeScript, you can add this as a fallback somewhere in your own project (adapted to whichever of the registries you need):&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;declare module &amp;quot;ember-data&amp;quot; {
  interface ModelRegistry {
    [key: string]: DS.Model;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will lose you the type-checking if you type a key that doesn’t exist, but it means that models you haven’t yet added the type definition for won’t throw compile errors. (We’ve made this opt-in because otherwise you’d never be able to get that type-checking for using an invalid key.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="remove-any-existing-coercions" class="level4"&gt;
&lt;h4&gt;2. Remove any existing coercions&lt;/h4&gt;
&lt;p&gt;Now that we have the necessary updates to be able to do these lookups automatically in the compiler, we need to remove any existing type coercions.&lt;/p&gt;
&lt;section id="service-and-controller" class="level5"&gt;
&lt;h5&gt;&lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This change is really straightforward (and actually just simplifies things a lot!) for &lt;code&gt;Service&lt;/code&gt; and &lt;code&gt;Controller&lt;/code&gt; injections.&lt;/p&gt;
&lt;pre class="diff"&gt;&lt;code&gt;  import Component from &amp;#39;@ember/component&amp;#39;;
  import { inject as service } from &amp;#39;@ember/service&amp;#39;;
- import Computed from &amp;#39;@ember/object/computed&amp;#39;;
-
- import ExternalLogging from &amp;#39;my-app/services/external-logging&amp;#39;;

  export default class UserProfile extends Component {
-   externalLogging: Computed&amp;lt;ExternalLogging&amp;gt; = service();
+   externalLogging = service(&amp;#39;external-logging&amp;#39;);
    // other implementation
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="ember-data-1" class="level5"&gt;
&lt;h5&gt;Ember Data&lt;/h5&gt;
&lt;p&gt;This looks &lt;em&gt;slightly&lt;/em&gt; different for the Ember Data side.&lt;/p&gt;
&lt;p&gt;If you’ve been using the type coercion forms we shipped as a stopgap, like this—&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;const person = this.store.findRecord&amp;lt;Person&amp;gt;(&amp;quot;person&amp;quot;, 123);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;—you’ll need to drop the type coercion on &lt;code&gt;findRecord&amp;lt;Person&amp;gt;&lt;/code&gt;, which will give you a type error:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[ts] Type ‘Person’ does not satisfy the constraint ‘string’.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is because, behind the scenes, &lt;code&gt;findRecord&lt;/code&gt; still takes a type parameter, but it’s now a string—the name of the model you’re looking up—&lt;em&gt;not&lt;/em&gt; the model itself. As such, you should &lt;em&gt;never&lt;/em&gt; supply that type parameter yourself; it’s taken care of automatically. As a result, your invocation should just be:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;const person = this.store.findRecord(&amp;quot;person&amp;quot;, 123);&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-full-type-of-lookups" class="level3"&gt;
&lt;h3&gt;The full type of lookups&lt;/h3&gt;
&lt;p&gt;One last note on Ember Data: calls like &lt;code&gt;findRecord('person', 123)&lt;/code&gt; actually return the type &lt;code&gt;Person &amp;amp; DS.PromiseObject&amp;lt;Person&amp;gt;&lt;/code&gt; – i.e., a type that acts like both the model and a promise wrapping the model. This is, to be sure, &lt;em&gt;weird&lt;/em&gt;, but it’s the reality, so that’s what our types give you.&lt;/p&gt;
&lt;p&gt;If you find yourself needing to write out that type locally for some reason—e.g. because part of your app deals explicitly with the result of a lookup—you may find it convenient to define a global type alias like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;type Loaded&amp;lt;T&amp;gt; = T &amp;amp; DS.PromiseObject&amp;lt;T&amp;gt;;
const person: Loaded&amp;lt;Person&amp;gt; = this.store.findRecord(&amp;quot;person&amp;quot;, 123);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given the new support for getting that type automatically, you shouldn’t &lt;em&gt;normally&lt;/em&gt; need that, but it’s convenient if or when you &lt;em&gt;do&lt;/em&gt; need it. For example, if a component is passed the result of a &lt;code&gt;Person&lt;/code&gt; lookup and needs to be able to treat it as a promise &lt;em&gt;or&lt;/em&gt; the model, you could write it like this:&lt;/p&gt;
&lt;pre class="ts"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;

export default class PersonDisplay extends Component {
  model: Loaded&amp;lt;Person&amp;gt;; // instead of just `model: Person`
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="preview-mirage" class="level3"&gt;
&lt;h3&gt;Preview: Mirage&lt;/h3&gt;
&lt;p&gt;As it turns out, Ember CLI Mirage’s approach is a lot like Ember Data’s (although it’s actually a lot more dynamic!), so I have a very similar approach working in our codebase for doing lookups with Mirage’s database. Sometime in February or March, we hope to get that completed and upstreamed into Mirage itself, so that you can get these exact same benefits when using Mirage to write your tests.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that’s pretty much a wrap on Ember Data! The &lt;em&gt;next&lt;/em&gt; post you can expect in this series will be a break from nitty-gritty “how to use TS in Ember” posts for a very exciting, closely related announcement—probably tomorrow or Monday! The post after that will be a deep dive into (mostly the limitations of!) writing types for mixins and proxies.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re curious about the mechanics, we’re basically setting up a “type registry” which maps the string keys to the correct model, so that the type of e.g. &lt;code&gt;store.createRecord('some-model', { ... })&lt;/code&gt; will do a lookup in an interface which defines a mapping from model name, i.e. &lt;code&gt;some-model&lt;/code&gt; here, to the model type, e.g. &lt;code&gt;export default class SomeModel extends DS.Model.extend({ ... }) {}&lt;/code&gt;. I’ll write up a full blog post on the mechanics of that sometime soon.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>Prayer Apps and Evaluating Technology</title><link href="http://www.chriskrycho.com/2018/prayer-apps-and-evaluating-technology.html" rel="alternate"></link><published>2018-01-26T07:30:00-05:00</published><updated>2018-01-26T07:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-26:/2018/prayer-apps-and-evaluating-technology.html</id><summary type="html">I use apps for lots of things. But something about the thought of using one for my prayer life in particular made me pause and think about what it means to offload everything to an app.
</summary><content type="html">&lt;p&gt;I use technology a &lt;em&gt;lot&lt;/em&gt; to get after the goals I care about in my life. But over the last few years I’ve been thinking about, and I’m increasingly concerned about, the ways that we are shaped by our use of technology. We could generalize this discussion to all sorts of things, and I’m sure I will (though I’m also pretty sure you’d just be better off reading &lt;a href="https://thefrailestthing.com" title="The Frailest Thing"&gt;L. M. Sacasas&lt;/a&gt;, whom I’ve linked in this connection before). But for today, I want to just zoom in and think about this question specifically in the context of technologies we employ in the context of the Christian faith. (If you’re not a Christian, I suspect much of what I have to say here will still ring true, so don’t run off just yet.)&lt;/p&gt;
&lt;p&gt;I’ve been using apps to manage my list of tasks to get through for a long time: first &lt;a href="https://todoist.com"&gt;Todoist&lt;/a&gt;, then &lt;a href="https://www.omnigroup.com/omnifocus"&gt;OmniFocus&lt;/a&gt;, and now &lt;a href="https://culturedcode.com/things/"&gt;Things&lt;/a&gt;. So as I’ve been wanting to develop more rigor around my prayer life, and in particular to make sure I pray for certain people and the &lt;em&gt;very&lt;/em&gt; difficult circumstances they’re currently facing, it was natural to go looking for an app to manage that. And although “There’s an app for that” is no longer an Apple marketing campaign, is truer than ever it was when it &lt;em&gt;was&lt;/em&gt; an Apple marketing campaign. So there are a lot of prayer apps on the App Store.&lt;/p&gt;
&lt;p&gt;I snagged an app both my wife and another woman I really respect have found helpful as a tool for &lt;em&gt;their&lt;/em&gt; prayer lives. And it’s been sitting there unused for a month. I launched the app once. I’ve had an item in Things for that whole time to populate it. But I haven’t.&lt;/p&gt;
&lt;p&gt;The whole time the app has been sitting there on my homescreen, I’ve been stuck on this question: &lt;em&gt;How does this tool form me?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And this is the broader question that’s nagged at me for quite some time. How are we shaped and formed by our use of, and indeed our &lt;em&gt;dependence on&lt;/em&gt;, the tools we employ to remember things, to form habits, etc.? What happens if the tool goes away? Nick Carr has written fairly extensively&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; about the effects on concentration and memory; but those merely point to a broader concern: what kind of people do we wish to form ourselves to be? And are our tools helping or hurting us in that aim? For our tools &lt;em&gt;do&lt;/em&gt; form us, no less than we form them.&lt;/p&gt;
&lt;p&gt;It’s not really about this (or any particular) prayer app. And I certainly don’t think it’s &lt;em&gt;inherently wrong&lt;/em&gt; to use a prayer app, or anything of the sort. But it nags at me. Will I truly learn to be disciplined about prayer, or will I simply learn to be further hooked on alerts from my pocket supercomputer? If I end up praying faithfully for people, but also end up more distracted, more reliant on this little slab of metal and glass, less engaged with my family, what is the net on that? It is, at a minimum, not a clear &lt;em&gt;win&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Of course, none of these concerns are specific to prayer apps. I have been using a digital Bible for most of a decade now. I use a pomodoro timer to help my maintain my discipline and concentration throughout my work. I use &lt;a href="http://www.bear-writer.com"&gt;Bear&lt;/a&gt; for keeping a log of what I’ve done for work every day,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and for jotting down writing ideas. This very post started out that way.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/bear-blog-idea.png" title="Bear app" alt="The note in Bear that was the germination of this blog post" /&gt;&lt;figcaption&gt;The note in Bear that was the germination of this blog post&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Using a digital notes app is not the same as disciplining myself to remember things. But the same concerns apply, of course, to &lt;em&gt;all&lt;/em&gt; aids we employ. Using a digital notes app is not identical to using a physical notebook as a place for jotting down ideas—but they’re more similar to each other than they are to &lt;em&gt;not using a tool at all&lt;/em&gt;. Both have a cost in effective, &lt;em&gt;active&lt;/em&gt; memory of those ideas. On the other hand, they also have the benefit of helping us remember more ideas, and more clearly, than we would otherwise, and also of freeing us to think on and remember &lt;em&gt;other&lt;/em&gt; things.&lt;/p&gt;
&lt;p&gt;This also points to another of the fundamental challenges in evaluating the tools we use. We’re accustomed to thinking of many things—these days, mostly computers and computerized things—as technological and other things as sort of “natural” and “untechnological.” But of course, literally everything we do is unnatural and technological in many ways—too many to count; but for a start consider that clothing is not &lt;em&gt;natural&lt;/em&gt;; it is a technology! So are books. So are forks and cups and plates. So are journals, and pencils, and pens. And those technologies all shape and form us, too.&lt;/p&gt;
&lt;p&gt;Scribbling notes in a paper journal day after day will change your body and your mind; you will have calluses from holding the pen, and will know that your ideas are found in that journal. The loss of a journal filled with sketches of ideas might become a horrifying thought, because in writing down one’s ideas, one intentionally lets the paper do the work that one’s memory might have done otherwise. &lt;em&gt;Many&lt;/em&gt; of those things—though by no means all—are just the same whether using a digital journal or a paper one.&lt;/p&gt;
&lt;p&gt;At least in my own experience, some of the important differences include the way it feels mentally to think with a pen vs. to think with a keyboard. (I use the phrase “think with” here to emphasize what it is we’re doing either way: using the tool to help us think as well as to remember.) That difference is, so far as I can tell in considering my own thinking, not just one of &lt;em&gt;feel&lt;/em&gt;, either: I write different things, in different ways, with pen and paper than I do with a keyboard. I’m a much better poet with pen and paper, for example.&lt;/p&gt;
&lt;p&gt;But those differences do not void the core they share: they are memory-replacements.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Not for nothing have people worried about the effects of new technologies on memory for millennia. And it is worth note: those who thought the advent of each kind of new information technology would come with costs were not wrong. Literate cultures seem inevitably to lose the power of oral recall. Members of illiterate cultures can often accomplish feats of memory that astound members of literate cultures, because they do not have books to offload their stories and histories to. The only way to keep them—and we value stories, so we &lt;em&gt;always&lt;/em&gt; find a way to keep them—is to commit them to memory, and deeply. The tradeoff with books is real. The tradeoff with a physical journal is real. The tradeoff with the internet is real.&lt;/p&gt;
&lt;p&gt;The question is not &lt;em&gt;whether&lt;/em&gt; but &lt;em&gt;how&lt;/em&gt; we will be formed by the technologies we employ—at least, unless you plan to go back to living naked, surviving off of whatever you can manage to collect with your bare hands and eat raw (fire, too, is technology, after all).&lt;/p&gt;
&lt;p&gt;To narrow it further: the question is which specific shapings we find needful in our specific contexts. Perhaps, if there is a problem, it is not with a prayer app individually, or a todo app individually, or a notes app individually, but with offloading &lt;em&gt;all&lt;/em&gt; of our mental tasks to a smartphone. No harm done in using a prayer app; but maybe write your to-do list on paper; and perhaps find something, anything at all, to simply &lt;em&gt;remember&lt;/em&gt; to do every day.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;&lt;a href="http://www.roughtype.com/?p=8248"&gt;Here&lt;/a&gt;, on the smartphone, is just one of many times and places; his book &lt;em&gt;The Shallows&lt;/em&gt; is perhaps the best-known and longest treatment of it.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;For my own purposes; Olo doesn’t ask anything of the sort from me; but it helps me see what I actually get done over the course of a year, and that’s pretty neat.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="ethics"></category></entry><entry><title>TypeScript and Ember.js Update, Part 3</title><link href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html" rel="alternate"></link><published>2018-01-25T07:00:00-05:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-25:/2018/typing-your-ember-update-part-3.html</id><summary type="html">Now that we know a bit more about how computed properties work, we’ll talk about computed properties, actions, and mixins on the Ember.js side, along with the normal class methods.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you’re following along with this &lt;em&gt;as I publish it&lt;/em&gt; in late January 2018, please go back and read the end of &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Part 2&lt;/a&gt;, which I updated substantially yesterday evening to include more material I missed in the first version of that post, but which belonged there and not here.&lt;/p&gt;
&lt;p&gt;In the previous posts in this series, I introduced the big picture of how the story around TypeScript and Ember.js has improved over the last several months and walked through some important background on class properties. In this post, I’ll build on that foundation to look closely at computed properties, actions, and mixins.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s the outline of this update sequence:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Overview, normal Ember objects, component arguments, and injections.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;&lt;strong&gt;Computed properties, actions, mixins, and class methods (this post).&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Using Ember Data, and service and controller injections improvements.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="a-detailed-example-contd.-computed-properties-mixins-actions-and-class-methods" class="level2"&gt;
&lt;h2&gt;A detailed example (cont’d.) – computed properties, mixins, actions, and class methods&lt;/h2&gt;
&lt;aside&gt;
&lt;p&gt;*&lt;strong&gt;Note:&lt;/strong&gt; please see the &lt;a href="https://www.chriskrycho.com/2018/ember-ts-class-properties.html"&gt;update about class properties published mid-2018&lt;/a&gt;. The example below and in the following posts is incorrect in several important ways.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Let’s start by recalling the example Component we’re working through:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import Computed from &amp;#39;@ember/object/computed&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;section id="computed-properties" class="level3"&gt;
&lt;h3&gt;Computed properties&lt;/h3&gt;
&lt;p&gt;We already covered component arguments and injections as well as basic class properties and the exceptions to normal class-property ways of doing things, in Parts &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;1&lt;/a&gt; and &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;2&lt;/a&gt;. With that background out of the way, we can now turn to computed properties. I’m including the component arguments in this code sample because they’re referenced in the computed property. Assume &lt;code&gt;Person&lt;/code&gt; is a pretty “person” representation, with a &lt;code&gt;firstName&lt;/code&gt; and a &lt;code&gt;lastName&lt;/code&gt;and maybe a few other properties.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;section id="computed-properties-1" class="level4"&gt;
&lt;h4&gt;&lt;code&gt;computed&lt;/code&gt; properties&lt;/h4&gt;
&lt;p&gt;When using a computed property in the brave new world of ES6 classes, we normally just assign them as instance properties. As mentioned in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;the previous post&lt;/a&gt;, and in line with my comments above, this has some important tradeoffs around performance. If you need the absolute &lt;em&gt;best&lt;/em&gt; performance, you can continue to install them on the prototype by doing this instead:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component.extend({
  fromModel: computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  ),
}) {
  // other properties
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whichever way you do it, TypeScript will correctly infer the type of the computed property in question (here &lt;code&gt;fromModel&lt;/code&gt;) as long as you explicitly annotate the return type of the callback passed to &lt;code&gt;computed&lt;/code&gt;. Accordingly, in this case, the type of &lt;code&gt;fromModel&lt;/code&gt; is &lt;code&gt;ComputedProperty&amp;lt;string&amp;gt;&lt;/code&gt;. The fact that it’s a &lt;code&gt;ComputedProperty&lt;/code&gt; means if you try to treat it as a plain string, without using &lt;code&gt;Ember.get&lt;/code&gt; to unwrap it, TypeScript will complain at you.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// type checking error:
this.fromModel.length;

// type checking valid:
this.get(&amp;#39;fromModel&amp;#39;).length;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other really important thing to note here is the use of &lt;code&gt;this: MyComputed&lt;/code&gt;. By doing this, we’re telling TypeScript explicitly that the type of &lt;code&gt;this&lt;/code&gt; in this particular function is the class context. We have to do this here, because we don’t have any way to tell the &lt;code&gt;computed&lt;/code&gt; helper itself that the function inside it will be bound to the &lt;code&gt;this&lt;/code&gt; context of the containing class. Put another way: we don’t have any &lt;em&gt;other&lt;/em&gt; way to tell TypeScript that one of the things &lt;code&gt;computed&lt;/code&gt; does is bind &lt;code&gt;this&lt;/code&gt; appropriately to the function passed into it; but gladly we do have &lt;em&gt;this&lt;/em&gt; way—otherwise we’d be out of luck entirely! (You’ll see the same thing below when we look at actions). The boilerplate is a bit annoying, admittedly—but it at least makes it type-check.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="computed-property-macros" class="level4"&gt;
&lt;h4&gt;Computed property macros&lt;/h4&gt;
&lt;p&gt;Beyond &lt;code&gt;computed&lt;/code&gt;, there are a lot of other computed property tools we use all the time. Some of them can (and therefore &lt;em&gt;do&lt;/em&gt;) infer the type of the resulting computed property correctly. But there are a bunch of idiomatic things that TypeScript does not and cannot validate – a number of the computed property macros are in this bucket, because they tend to be used for nested keys, and as noted above, TypeScript does not and &lt;em&gt;cannot&lt;/em&gt; validate nested keys like that.&lt;/p&gt;
&lt;p&gt;We have a representative of each of these scenarios:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the case of &lt;code&gt;isLoggedIn&lt;/code&gt;, the &lt;code&gt;bool&lt;/code&gt; helper only ever returns a boolean, so the type of &lt;code&gt;isLoggedIn&lt;/code&gt; is &lt;code&gt;ComputedProperty&amp;lt;boolean&amp;gt;&lt;/code&gt;. In the case of &lt;code&gt;savedUser&lt;/code&gt;, since TypeScript can’t figure out what the nested key means, we have to specify it explicitly, using &lt;code&gt;Computed&amp;lt;Person&amp;gt;&lt;/code&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; In these cases, you have to do the work yourself to check that the type you specify is the &lt;em&gt;correct&lt;/em&gt; type. If you write down the wrong type here, TypeScript will believe you (it doesn’t have any other good option!) and you’ll be back to things blowing up unexpectedly at runtime.&lt;/p&gt;
&lt;p&gt;The typings supply the concrete (non-&lt;code&gt;any&lt;/code&gt;) return type for: &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt;, &lt;code&gt;gt&lt;/code&gt;, &lt;code&gt;gte&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt;, &lt;code&gt;lte&lt;/code&gt;, &lt;code&gt;match&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;notEmpty&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="on-nested-keys" class="level4"&gt;
&lt;h4&gt;On nested keys&lt;/h4&gt;
&lt;p&gt;As noted above, TypeScript cannot do a lookup for any place using nested keys—which means that &lt;code&gt;this.get('some.nested.key')&lt;/code&gt; won’t type-check, sadly. This is an inherent limitation of the type system as it stands today, and for any future I can foresee. The problem is this: what exactly &lt;em&gt;is&lt;/em&gt; &lt;code&gt;'some.nested.key'&lt;/code&gt;? It &lt;em&gt;could&lt;/em&gt; be what we use it for in the usual scenario in Ember, of course: a string representing a lookup on a property of a property of a property of whatever &lt;code&gt;this&lt;/code&gt; is. But it could equally well be a key named &lt;code&gt;'some.nested.key'&lt;/code&gt;. This is perfectly valid JavaScript, after all:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;const foo = {
  [&amp;#39;some.nested.key&amp;#39;]: &amp;#39;Well, this is weird, but it works&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TypeScript does not today and presumably &lt;em&gt;never will&lt;/em&gt; be able to do that lookup. The workaround is to do one of two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;If you &lt;em&gt;know&lt;/em&gt; you have a valid parent, you can do the (catastrophically ugly, but functional) nested &lt;code&gt;Ember.get&lt;/code&gt; that now litters our codebase:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import { get } from &amp;#39;@ember/object&amp;#39;;
const value = get(get(get(anObject, &amp;#39;some&amp;#39;), &amp;#39;nested&amp;#39;), &amp;#39;key&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, it’s a nightmare. But… it type-checks, and it works well &lt;em&gt;enough&lt;/em&gt; in the interim until we get a decorators-based solution that lets us leverage &lt;a href="https://github.com/emberjs/rfcs/pull/281"&gt;RFC #281&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;// @ts-ignore&lt;/code&gt; to simply ignore the type-unsafety of the lookup. This approach is preferable when you don’t know if any of the keys might be missing. If, for example, either &lt;code&gt;some&lt;/code&gt; or &lt;code&gt;nested&lt;/code&gt; were &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, the lookup example above in (1) would fail.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import { get } from &amp;#39;@ember/object&amp;#39;;
// @ts-ignore -- deep lookup with possibly missing parents
const value = get(anObject, &amp;#39;some.nested.key&amp;#39;);&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="actions" class="level3"&gt;
&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;What about actions? As usual, these just become class instance properties in the current scheme.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with computed properties, we need the &lt;code&gt;this&lt;/code&gt; type declaration to tell TypeScript that this method is going to be automatically bound to the class instance. Otherwise, TypeScript thinks the &lt;code&gt;this&lt;/code&gt; here is the &lt;code&gt;actions&lt;/code&gt; hash, rather than the &lt;code&gt;MyComponent&lt;/code&gt; class.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happily, that’s really all there is to it for actions: they’re quite straightforward other than needing the &lt;code&gt;this&lt;/code&gt; type specification.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="types-in-.extend...-blocks" class="level3"&gt;
&lt;h3&gt;Types in &lt;code&gt;.extend({...})&lt;/code&gt; blocks&lt;/h3&gt;
&lt;p&gt;By and large, you can get away with using the same &lt;code&gt;this: MyComponent&lt;/code&gt; trick when hacking around prototypal extension problems, or performance problems, by putting computed properties in a &lt;code&gt;.extend({...}&lt;/code&gt; block. However, you &lt;em&gt;will&lt;/em&gt; sometimes see a type error indicating that the class is referenced in its own definition expression. In that case, you may need to judiciously apply &lt;code&gt;any&lt;/code&gt;, if you can’t make it work by using normal class properties.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="constructor-and-class-methods" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;constructor&lt;/code&gt; and class methods&lt;/h3&gt;
&lt;p&gt;ES6 class constructors and class methods both work as you’d expect, though as we’ll see you’ll need an extra bit of boilerplate for methods, at least for now.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample): void {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the most part, you can just switch to using normal ES6 class constructors instead of the Ember &lt;code&gt;init&lt;/code&gt; method. You can, if you so desire, also move existing &lt;code&gt;init&lt;/code&gt; functions passed to a &lt;code&gt;.extends({ ...})&lt;/code&gt; hash to class methods, and they’ll work once you change &lt;code&gt;this._super(...arguments)&lt;/code&gt; to &lt;code&gt;super.init(...arguments)&lt;/code&gt;. It’s worth pausing to understand the relationship between &lt;code&gt;init&lt;/code&gt; and prototypal &lt;code&gt;init&lt;/code&gt; and the &lt;code&gt;constructor&lt;/code&gt;. An &lt;code&gt;init&lt;/code&gt; in the &lt;code&gt;.extends()&lt;/code&gt; hash runs first, then an &lt;code&gt;init&lt;/code&gt; method on the class, then the normal &lt;code&gt;constructor&lt;/code&gt;.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that you do not need to (and cannot) annotate the &lt;code&gt;constructor&lt;/code&gt; with &lt;code&gt;this: MyComponent&lt;/code&gt;. Depending on the class you’re building, you may &lt;em&gt;occasionally&lt;/em&gt; have type-checking problems that come up as a result of this. I’ve only ever seen that happen when using computed properties while defining a proxy,&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; but it does come up. In that case, you can fall back to using &lt;code&gt;init&lt;/code&gt; as a method, and set &lt;code&gt;this: MyComponent&lt;/code&gt; on &lt;em&gt;it&lt;/em&gt;, and things will generally fall out as working correctly at that point. When it comes up, this seems to be just a limitation of what &lt;code&gt;this&lt;/code&gt; is understood to be in a &lt;code&gt;constructor&lt;/code&gt; given Ember’s rather more-complex-than-normal-classes view of what a given item being constructed is.&lt;/p&gt;
&lt;p&gt;Other class methods do also need the &lt;code&gt;this&lt;/code&gt; type specified if they touch computed properties. (Normal property access is fine without it.) That’s because the lookups for &lt;code&gt;ComputedProperty&lt;/code&gt; instances (using &lt;code&gt;Ember.get&lt;/code&gt; or &lt;code&gt;Ember.set&lt;/code&gt;) need to know what &lt;code&gt;this&lt;/code&gt; is where they should do the lookup, and the full &lt;code&gt;this&lt;/code&gt; context isn’t inferred correctly at present. You can either write that on every invocation of &lt;code&gt;get&lt;/code&gt;and &lt;code&gt;set&lt;/code&gt;, like &lt;code&gt;(this as MyComponent).get(...)&lt;/code&gt;, or you can do it once at the start of the method. Again, a bit boiler-platey, but it gets the job done and once you’re used to it it’s minimal hassle.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One last note, which I didn’t include in the example: if you have a function (usually an action) passed into the component, you can define it most simply by just using &lt;code&gt;onSomeAction: Function;&lt;/code&gt; in the class definition, right with other class arguments. However, it’s usually most helpful to define what the type should actually &lt;em&gt;be&lt;/em&gt;, for your own sanity check if nothing else. As with e.g. &lt;code&gt;model&lt;/code&gt; in this example, we don’t actually have a good way to type-check that what is passed is correct. We can, however, at least verify in the constructor that the caller passed in a function using &lt;a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Fdebug/methods/assert?anchor=assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;, just as with other arguments.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So that’s a wrap on components (and controllers, which behave much the same way).&lt;/p&gt;
&lt;p&gt;In the next post, I’ll look at the elephant in the room: Ember Data (and closely related concern Ember CLI Mirage). While you &lt;em&gt;can&lt;/em&gt; make Ember Data stuff largely work today, it’s still a ways from &lt;em&gt;Just Works™️&lt;/em&gt;, sadly, but we’ll cover how to work around the missing pieces—we’ve gotten there in our own codebase, so you can, too!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;As mentioned in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Part 2&lt;/a&gt;, this problem doesn’t go away until we get decorators, unless you’re putting them on the prototype via &lt;code&gt;.extends()&lt;/code&gt;—but see below for the problems with &lt;em&gt;that&lt;/em&gt;. The short version is, we need decorators for this to actually be &lt;em&gt;nice&lt;/em&gt;. Once we get decorators, we will be able to combine them with the work done for &lt;a href="https://github.com/emberjs/rfcs/pull/281"&gt;RFC #281&lt;/a&gt; and normal lookup will just work:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;@computed(&amp;#39;model.firstName&amp;#39;)
get fromModel() {
  return `My name is ${this.model.firstName};`;
}&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’ve used &lt;code&gt;Computed&amp;lt;Person&amp;gt;&lt;/code&gt; and similar throughout here because it’s the most clear while still being reasonably concise. The actual type name in Ember’s own code is &lt;code&gt;ComputedProperty&lt;/code&gt;, but &lt;code&gt;ComputedProperty&amp;lt;Person&amp;gt;&lt;/code&gt; is &lt;em&gt;long&lt;/em&gt;, and it wouldn’t have added any real clarity here. In my own codebase, we use &lt;code&gt;CP&lt;/code&gt; (for “&lt;strong&gt;C&lt;/strong&gt;omputed &lt;strong&gt;P&lt;/strong&gt;roperty”) for the sake of brevity—so here that would just be &lt;code&gt;CP&amp;lt;Person&amp;gt;&lt;/code&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;In the future, this problem will hopefully be solved neatly by decorators:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  @action
  addToCollection(value: string) {
    const current = this.get(&amp;#39;aCollection&amp;#39;);
    this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For today, however, specifying a &lt;code&gt;this&lt;/code&gt; type is where it’s at.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;You can see this for yourself in &lt;a href="https://ember-twiddle.com/36844717dcc50d734139368edf2e87da"&gt;this Ember Twiddle&lt;/a&gt;—just open your developer tools and note the sequence.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Proxies, along with details of mixins, are a subject I’m leaving aside for Part 5, otherwise known as the “wow, this stuff is really weird to type” entry in the series.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Not &lt;em&gt;no&lt;/em&gt; hassle, though, and I look forward to a future where we can drop it, as Ember moves more and more toward modern JavaScript ways of solving these same problems!&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>TypeScript and Ember.js Update, Part 2</title><link href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html" rel="alternate"></link><published>2018-01-24T07:00:00-05:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-24:/2018/typing-your-ember-update-part-2.html</id><summary type="html">For years, you've been using Ember Object and .extend()—but the rules are different with classes.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the previous post in this series, I introduced the big picture of how the story around TypeScript and Ember.js has improved over the last several months. In this post, I’ll be pausing from TypeScript-specific to take a look at how things work with &lt;em&gt;class properties&lt;/em&gt;, since they have some big implications for how we work, which then have ripple effects on computed properties, actions, etc.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s the outline of this update sequence:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;Overview, normal Ember objects, component arguments, and injections.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;&lt;strong&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world (this post).&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Computed properties, actions, mixins, and class methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Using Ember Data, and service and controller injections improvements.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="a-detailed-example-contd.-class-properties" class="level2"&gt;
&lt;h2&gt;A detailed example (cont’d.) – class properties&lt;/h2&gt;
&lt;aside&gt;
&lt;p&gt;*&lt;strong&gt;Note:&lt;/strong&gt; please see the &lt;a href="https://www.chriskrycho.com/2018/ember-ts-class-properties.html"&gt;update about class properties published mid-2018&lt;/a&gt;. The example below and in the following posts is incorrect in several important ways.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Let’s start by recalling the example Component we’re working through:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;
import Computed from &amp;#39;@ember/object/computed&amp;#39;;
import { inject as service } from &amp;#39;@ember/service&amp;#39;;
import { assert } from &amp;#39;@ember/debug&amp;#39;;
import { isNone } from &amp;#39;@ember/utils&amp;#39;;

import Session from &amp;#39;my-app/services/session&amp;#39;;
import Person from &amp;#39;my-app/models/person&amp;#39;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(
    &amp;#39;model.firstName&amp;#39;,
    function(this: AnExample): string {
      return `My name is ${get(this.model, &amp;#39;firstName&amp;#39;)};`;
    }
  );

  aComputed = computed(&amp;#39;aString&amp;#39;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;#39;session.user&amp;#39;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;#39;session.user&amp;#39;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;#39;aCollection&amp;#39;);
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;#39;aCollection&amp;#39;).includes(&amp;#39;ahoy&amp;#39;)) {
      this.set(&amp;#39;aCollection&amp;#39;, current.concat(&amp;#39;ahoy&amp;#39;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Throughout, you’ll note that we’re using &lt;em&gt;assignment&lt;/em&gt; to create these class properties—a big change from the key/value setup in the old &lt;code&gt;.extends({ ... })&lt;/code&gt; model:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Class properties like this are &lt;em&gt;instance properties&lt;/em&gt;. These are compiled to, because they are &lt;em&gt;equivalent to&lt;/em&gt;, assigning a property in the constructor. That is, these two ways of writing class property initialization are equivalent—&lt;/p&gt;
&lt;p&gt;At the property definition site:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // snip...

  // -- Class properties -- //
  aString = &amp;#39;this is fine&amp;#39;;
  aCollection: string[] = [];

  // snip..

  constructor() {
    super();
    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  // snip...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the constructor:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // snip...

  // -- Class properties -- //
  aString: string;
  aCollection: string[];

  constructor() {
    super();

    this.aString = &amp;#39;this is fine&amp;#39;;
    this.aCollection = [];

    assert(&amp;#39;`model` is required&amp;#39;, !isNone(this.model));

    this.includeAhoy();
  }

  // snip...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see why the first one is preferable: if you don’t need any input to the component to set the value, you can simply set the definition inline where the property is declared.&lt;/p&gt;
&lt;p&gt;However, this is &lt;em&gt;quite&lt;/em&gt; unlike using &lt;code&gt;.extend&lt;/code&gt;, which installs the property on the prototype. Three very important differences from what you’re used to fall out of this, and &lt;em&gt;none of them are specific to TypeScript.&lt;/em&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section id="default-values" class="level3"&gt;
&lt;h3&gt;1. Default values&lt;/h3&gt;
&lt;p&gt;Since class property setup runs during the constructor, if you want the caller to be able to override it, you &lt;em&gt;must&lt;/em&gt; give it an explicit fallback that references what’s passed into the function. Something like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;class AnyClass {
  aDefaultProp = this.aDefaultProp || 0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, translated back into the constructor form:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;class AnyClass {
  constructor() {
    this.aDefaultProp = this.aDefaultProp || 0;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, you can see that if something has &lt;em&gt;already set&lt;/em&gt; the &lt;code&gt;aDefaultProp&lt;/code&gt; value (before the class constructor is called), we’ll use that value; otherwise, we’ll use the default. You can think of this as being something like default arguments to a function. In our codebase, we have started using &lt;a href="https://lodash.com/docs/4.17.4#defaultTo"&gt;&lt;code&gt;_.defaultTo&lt;/code&gt;&lt;/a&gt;, which works quite nicely. In the old world of declaring props with their values in the &lt;code&gt;.extends({ ... })&lt;/code&gt; hash, we got this behavior “for free”—but without a lot of other benefits of classes, so not &lt;em&gt;actually&lt;/em&gt; for free.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="no-more-shared-state" class="level3"&gt;
&lt;h3&gt;2. No more shared state&lt;/h3&gt;
&lt;p&gt;Because these are instance properties, &lt;em&gt;not&lt;/em&gt; assigned on the prototype, you do not have to worry about the problem—&lt;a href="https://dockyard.com/blog/2014/04/17/ember-object-self-troll"&gt;well-known among experienced Ember.js developers, but prone to bite people new to the framework&lt;/a&gt;—where you assign an array or object in the &lt;code&gt;.extend()&lt;/code&gt; method and then find that it’s shared between instances.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default Component.extend({
  anArray: [],  // &amp;lt;- this *will* be shared between instances
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ve long had to handle this by setting up those properties in our &lt;code&gt;init()&lt;/code&gt; method instead, so that they are created during object instantiation, rather than on the prototype. This problem goes away entirely with classes, including in TypeScript.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component {
  anArray = [];  // &amp;lt;- this will *not* be shared between instances
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note that here, we don’t have a type for the array, so it’s of type &lt;code&gt;any[]&lt;/code&gt;; we &lt;em&gt;always&lt;/em&gt; need type annotations for empty arrays if we want them to be a “narrower,” or more specific, type than that.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="performance-changes" class="level3"&gt;
&lt;h3&gt;3. Performance changes&lt;/h3&gt;
&lt;p&gt;The flip-side of this is that the only way we currently have to create computed property instances (until decorators stabilize) is &lt;em&gt;also&lt;/em&gt; as instance, not prototype, properties. I’ll look at computed properties (and their types) in more detail in the next post, so here mostly just note how the computed is set up on the class: by assignment, &lt;em&gt;not&lt;/em&gt; as a prototypal property.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component {
  aString = &amp;#39;Hello, there!&amp;#39;;

  itsLength = computed(&amp;#39;aString&amp;#39;, function(this: MyComponent): number {
    return this.aString.length;
  });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;does&lt;/em&gt; have a performance cost, which will be negligible in the ordinary case but pretty nasty if you’re rendering hundreds to thousands of these items onto the page. You can use this workaround for these as well as for any other properties which need to be prototypal (more on &lt;em&gt;that&lt;/em&gt; in the next post as well):&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class MyComponent extends Component.extend({
  itsLength: computed(&amp;#39;aString&amp;#39;, function(this: MyComponent): number {
      return this.aString.length;
    }
  );
}) {
  aString = &amp;#39;Hello, there!&amp;#39;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;looks&lt;/em&gt; really weird, but it works exactly as you’d expect.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="class-property-variants" class="level2"&gt;
&lt;h2&gt;Class property variants&lt;/h2&gt;
&lt;p&gt;There are two times when things will look different from basic class properties. Both have to do with setting up the prototype to work the way other parts of the Ember object ecosystem expect.&lt;/p&gt;
&lt;section id="variant-1-prototypalmerged-properties" class="level3"&gt;
&lt;h3&gt;Variant 1: Prototypal/merged properties&lt;/h3&gt;
&lt;p&gt;The first is when you’re using properties that need to be merged with properties in the prototype chain, e.g. &lt;code&gt;attributeBindings&lt;/code&gt; or &lt;code&gt;classNameBindings&lt;/code&gt;, or which (because of details of how components are constructed) have to be set on the prototype rather than as instance properties, e.g. &lt;code&gt;tagClass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For those, we can just leverage &lt;code&gt;.extend&lt;/code&gt; in conjunction with classes:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;

export default class MyListItem extends Component.extend({
  tagName: &amp;#39;li&amp;#39;,
  classNameBindings: [&amp;#39;itemClass&amp;#39;]
}) {
  itemClass = &amp;#39;this-be-a-list&amp;#39;;

  // etc.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is also how you’ll &lt;em&gt;use&lt;/em&gt; mixins (on defining them, see below):&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import MyMixin from &amp;#39;my-app/mixins/my-mixin&amp;#39;;

export default class AnExample extends Component.extend(MyMixin) {
  // the rest of the definition.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, however—and this is very important—that you cannot &lt;code&gt;.extend&lt;/code&gt; an existing &lt;code&gt;class&lt;/code&gt; implementation. As a result, deep inheritance hierarchies &lt;em&gt;may&lt;/em&gt; make transitioning to classes in Ember painful. Most importantly: they may work &lt;em&gt;some&lt;/em&gt; of the time in &lt;em&gt;some&lt;/em&gt; ways, but will break when you least expect. So don’t do that! (This isn’t a TypeScript limitation; it’s a limitation of classes in Ember today.)&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="variant-2-mixins" class="level3"&gt;
&lt;h3&gt;Variant 2: Mixins&lt;/h3&gt;
&lt;p&gt;The other time you’ll have to take a different tack—and this falls directly out of the need for prototypal merging—is with &lt;code&gt;Mixin&lt;/code&gt;s, which don’t yet work properly with classes. Worse, it’s difficult (if not impossible) to get rigorous type-checking internally in &lt;code&gt;Mixin&lt;/code&gt; definitions, because you cannot define them as classes: you &lt;em&gt;have&lt;/em&gt; to use the old style throughout, because mixins are created with &lt;code&gt;.create()&lt;/code&gt;, not &lt;code&gt;.extend()&lt;/code&gt;.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;Note that if you’re writing &lt;em&gt;new&lt;/em&gt; code in Ember.js—using TypeScript or not—I strongly encourage you to simply avoid using mixins at all. Instead, use services (or, occasionally, inheritance). This will require you to change how you write some of your code, but in my experience that change will make your codebase much easier to understand, and therefore much easier to maintain.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;I’ll have a lot more to say about these in part 5 of this series, including a detailed example of how to carefully type-annotate one and use it in another class. For now, suffice it to say that you’ll still need to incorporate &lt;code&gt;Mixin&lt;/code&gt;s via &lt;code&gt;.extend()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import MyMixin from &amp;#39;my-app/mixins/my-mixin&amp;#39;;

export default class SomeNewComponent extends Component.extend(MyMixin) {
  // normal class properties
}&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Those are the &lt;em&gt;biggest&lt;/em&gt; differences from &lt;code&gt;Ember.Object&lt;/code&gt; that you need to be aware of when working with class properties in Ember.js today, at least in my experience working with them day to day. These are not the only differences with &lt;em&gt;classes&lt;/em&gt;, though, especially when dealing with TypeScript, so in my next entry we’ll take a look at how classes work (and work well!) with most things in Ember.js and TypeScript together.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;You can use this same feature on classes using Babel, with the &lt;a href="https://babeljs.io/docs/plugins/transform-class-properties/"&gt;class properties transform&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Even when &lt;a href="https://github.com/emberjs/rfcs/pull/281"&gt;Ember.js RFC #281&lt;/a&gt; lands, this problem will not go away, at least under the current implementation, since &lt;a href="https://github.com/emberjs/rfcs/pull/281#issuecomment-360023258"&gt;&lt;em&gt;these&lt;/em&gt; will &lt;em&gt;not&lt;/em&gt; be transformed into getters on the prototype&lt;/a&gt;. We are waiting for decorators to solve this problem completely.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;In the future, we’ll (hopefully and presumably 🤞🏼) have an escape hatch for those merged or prototypally-set properties via decorators. That’ll look something like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { className, tagName } from &amp;#39;ember-decorators/component&amp;#39;;

@tagName(&amp;quot;li&amp;quot;)
export default class MyListItem extends Component {
  @className itemClass = &amp;#39;this-be-a-list&amp;#39;;

  @action
  sendAMessage(contents: string): void {

  }
  // etc.
}&lt;/code&gt;&lt;/pre&gt;
&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>TypeScript and Ember.js Update, Part 1</title><link href="http://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html" rel="alternate"></link><published>2018-01-22T07:10:00-05:00</published><updated>2018-07-10T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-22:/2018/typing-your-ember-update-part-1.html</id><summary type="html">A bunch has changed for the better in the TypeScript/Ember.js story over the last six months. Here’s an overview of the changes and a look at normal Ember objects, "arguments" to components (and controllers), and service (or controller) injections.</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Back in July 2017, I wrote &lt;a href="https://www.chriskrycho.com/2017/typing-your-ember-part-3.html"&gt;a post&lt;/a&gt; on how to using TypeScript in your Ember.js apps. At the time, we were still busy working on getting the typings more solid for Ember itself, and &lt;code&gt;class&lt;/code&gt; syntax for Ember was apparently a long way away.&lt;/p&gt;
&lt;p&gt;Things have gotten quite a bit better since then, so I thought I’d update that post with recommendations for using TypeScript in an app &lt;em&gt;now&lt;/em&gt; with the updated typings, as well as with another six months of experience using TypeScript in our app at Olo (~20k lines of code in the app and another ~15k in tests).&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;If you’re interested in all of this and would like to learn more in person, I’m &lt;a href="http://emberconf.com/speakers.html#chris-krycho"&gt;leading a workshop on it at EmberConf 2018&lt;/a&gt;—I’d love to see you there!&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;Here’s how I expect this update series to go:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-1.html"&gt;&lt;strong&gt;Overview, normal Ember objects, component arguments, and injections (this post).&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;Class properties—some notes on how things differ from the &lt;code&gt;Ember.Object&lt;/code&gt; world.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-3.html"&gt;Computed properties, actions, mixins, and class methods.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Using Ember Data, and service and controller injections improvements.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mixins and proxies; or: the really hard-to-type-check bits.&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="normal-ember-objects" class="level2"&gt;
&lt;h2&gt;Normal Ember objects&lt;/h2&gt;
&lt;p&gt;For normal Ember objects, things now &lt;em&gt;mostly&lt;/em&gt; just work if you’re using class-based syntax, with a single (though very important) qualification I’ll get to in a minute. And you can use the class-based syntax &lt;em&gt;today&lt;/em&gt; in Ember.js—all the way back to 1.13, as it turns out. If you want to learn more, you can read &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0240-es-classes.md"&gt;this RFC&lt;/a&gt; or &lt;a href="https://medium.com/build-addepar/es-classes-in-ember-js-63e948e9d78e"&gt;this blog post&lt;/a&gt;, both by &lt;a href="https://github.com/pzuraq"&gt;@pzuraq (Chris Garrett)&lt;/a&gt;, who did most of the legwork to research this and flesh out the constraints, and who has also been doing a lot of work on &lt;a href="https://ember-decorators.github.io/ember-decorators/docs/index.html"&gt;Ember Decorators&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Accordingly, I’m assuming the use of ES6 &lt;code&gt;class&lt;/code&gt; syntax throughout. The big reason for this is that things mostly just &lt;em&gt;don’t work&lt;/em&gt; without it. And we’ll see (in a later post) some hacks to deal with places where parts of Ember’s ecosystem don’t yet support classes properly. In general, however, if you see an error like &lt;code&gt;&amp;quot;Cannot use 'new' with an expression whose type lacks a call or construct signature.&amp;quot;&lt;/code&gt;, the reason is almost certainly that you’ve done &lt;code&gt;export default Component.extend({...})&lt;/code&gt; rather than creating a class.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-detailed-example" class="level2"&gt;
&lt;h2&gt;A detailed example&lt;/h2&gt;
&lt;p&gt;That means that every new bit of code I write today in our app looks roughly like this, with only the obvious modifications for services, routes, and controllers—I picked components because they’re far and away the most common things in our applications.&lt;/p&gt;
&lt;p&gt;In order to explain all this clearly, I’m going to start by showing a whole component written in the new style. Then, over the rest of this post and the next post, I’ll zoom in on and explain specific parts of it.&lt;/p&gt;
&lt;aside&gt;
&lt;p&gt;*&lt;strong&gt;Note:&lt;/strong&gt; please see the &lt;a href="https://www.chriskrycho.com/2018/ember-ts-class-properties.html"&gt;update about class properties published mid-2018&lt;/a&gt;. The example below and in the following posts is incorrect in several important ways.&lt;/p&gt;
&lt;/aside&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { computed, get } from &amp;quot;@ember/object&amp;quot;;
import Computed from &amp;quot;@ember/object/computed&amp;quot;;
import { inject as service } from &amp;quot;@ember/service&amp;quot;;
import { assert } from &amp;quot;@ember/debug&amp;quot;;
import { isNone } from &amp;quot;@ember/utils&amp;quot;;

import Session from &amp;quot;my-app/services/session&amp;quot;;
import Person from &amp;quot;my-app/models/person&amp;quot;;

export default class AnExample extends Component {
  // -- Component arguments -- //
  model: Person; // required
  modifier?: string; // optional, thus the `?`

  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();

  // -- Class properties -- //
  aString = &amp;quot;this is fine&amp;quot;;
  aCollection: string[] = [];

  // -- Computed properties -- //
  // TS correctly infers computed property types when the callback has a
  // return type annotation.
  fromModel = computed(&amp;quot;model.firstName&amp;quot;, function(this: AnExample): string {
    return `My name is ${get(this.model, &amp;quot;firstName&amp;quot;)};`;
  });

  aComputed = computed(&amp;quot;aString&amp;quot;, function(this: AnExample): number {
    return this.lookAString.length;
  });

  isLoggedIn = bool(&amp;quot;session.user&amp;quot;);
  savedUser: Computed&amp;lt;Person&amp;gt; = alias(&amp;quot;session.user&amp;quot;);

  actions = {
    addToCollection(this: AnExample, value: string) {
      const current = this.get(&amp;quot;aCollection&amp;quot;);
      this.set(&amp;quot;aCollection&amp;quot;, current.concat(value));
    }
  };

  constructor() {
    super();
    assert(&amp;quot;`model` is required&amp;quot;, !isNone(this.model));

    this.includeAhoy();
  }

  includeAhoy(this: AnExample) {
    if (!this.get(&amp;quot;aCollection&amp;quot;).includes(&amp;quot;ahoy&amp;quot;)) {
      this.set(&amp;quot;aCollection&amp;quot;, current.concat(&amp;quot;ahoy&amp;quot;));
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;section id="component-arguments" class="level3"&gt;
&lt;h3&gt;Component arguments&lt;/h3&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // Component arguments
  model: Person;      // required
  modifier?: string;  // optional, thus the `?`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I always put these first so that the “interface” of the object is clear and obvious. You can do the same thing on a controller instance; in that case you would export a &lt;code&gt;Model&lt;/code&gt; from the corresponding &lt;code&gt;Route&lt;/code&gt; class and import it into the &lt;code&gt;Controller&lt;/code&gt;. It’s a bit of boilerplate, to be sure, but it lets you communicate your interface clearly to consumers of the &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An important note about these kind of arguments: you do &lt;em&gt;not&lt;/em&gt; have to do &lt;code&gt;this.get(...)&lt;/code&gt; (or, if you prefer, &lt;code&gt;get(this, ...)&lt;/code&gt;) to access the properties themselves: they’re class instance properties. You can simply access them as normal properties: &lt;code&gt;this.model&lt;/code&gt;, &lt;code&gt;this.modifier&lt;/code&gt;, etc. That even goes for referencing them as computed properties, as we’ll see below.&lt;/p&gt;
&lt;p&gt;For optional arguments, you use the &lt;code&gt;?&lt;/code&gt; operator to indicate they may be &lt;code&gt;undefined&lt;/code&gt;. To get the &lt;em&gt;most&lt;/em&gt; mileage out of this, you’ll want to enable &lt;code&gt;strictNullChecks&lt;/code&gt; in the compiler options.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; However, note that we don’t currently have any way to validate component argument invocation.[^ts-templates] The way I’ve been doing this is using Ember’s debug &lt;a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Fdebug/methods/assert?anchor=assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; in the constructor:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;assert(&amp;quot;`model` is required&amp;quot;, !isNone(this.model));&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;quot;@ember/component&amp;quot;;
import { Maybe } from &amp;quot;true-myth&amp;quot;;

export default class MyComponent extends Component {
  optionalArg?: string;
  optionalProperty = Maybe.of(this.optionalArg);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then if you invoke the property without the argument, it’ll construct a &lt;code&gt;Nothing&lt;/code&gt;; if you invoke it with the argument, it’ll be &lt;code&gt;Just&lt;/code&gt; with the value. [^ts-templates]: A few of us have batted around some ideas for how to solve that particular problem, but &lt;em&gt;if&lt;/em&gt; we manage those, it’ll probably be way, way later in 2018.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit, January 24, 2018:&lt;/strong&gt; Starting in TypeScript 2.7, you can enable a flag, &lt;code&gt;--strictPropertyInitialization&lt;/code&gt;, which requires that all declared, non-optional properties on a class be initialized in the constructor or with a class property assignment. (There’s more on class property assignment in &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-2.html"&gt;part 2&lt;/a&gt; of this series.) If you do that, all &lt;em&gt;arguments&lt;/em&gt; to a component should be defined with the &lt;em&gt;definite assignment assertion modifier&lt;/em&gt;, a &lt;code&gt;!&lt;/code&gt; after the name of the property, as on &lt;code&gt;model&lt;/code&gt; here:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;export default class AnExample extends Component {
  // Component arguments
  model!: Person;     // required
  modifier?: string;  // optional, thus the `?`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should still combine that with use of &lt;a href="https://emberjs.com/api/ember/2.18/classes/@ember%2Fdebug/methods/assert?anchor=assert"&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; so that any misses in template invocation will get caught in your tests.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="injections" class="level3"&gt;
&lt;h3&gt;Injections&lt;/h3&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // -- Injections -- //
  session: Computed&amp;lt;Session&amp;gt; = service();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, the most important thing to note is the required type annotation. In principle, we could work around this by requiring you to explicitly name the service and using a “type registry” to look up what the service type is – more on that below in my discussion of using Ember Data – but I’m not yet persuaded that’s better than just writing the appropriate type annotation. Either way, there’s some duplication. 🤔 We (everyone working in the &lt;a href="https://github.com/typed-ember"&gt;typed-ember&lt;/a&gt; project) would welcome feedback here, because the one thing we &lt;em&gt;can’t&lt;/em&gt; do is get the proper type &lt;em&gt;without&lt;/em&gt; one or the other of these.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit, February 5, 2018:&lt;/strong&gt; see &lt;a href="https://www.chriskrycho.com/2018/typing-your-ember-update-part-4.html"&gt;Part 4&lt;/a&gt; for some updates to this—I actually went ahead and built and implemented that approach, and everything is much nicer now.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;  // the current approach -- requires importing `Session` so you can define it
  // on the property here
  session: Computed&amp;lt;Session&amp;gt; = service();

  // the alternative approach I&amp;#39;ve considered -- requires writing boilerplate
  // elsewhere, similar to what you&amp;#39;ll see below in the Ember Data section
  session = service(&amp;#39;session&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One other thing to notice here is that because TypeScript is a &lt;em&gt;structural&lt;/em&gt; type system, it doesn’t matter if what is injected is the actual &lt;code&gt;Session&lt;/code&gt; service; it just needs to be something that &lt;em&gt;matches the shape&lt;/em&gt; of the service – so your normal behavior around dependency injection, etc. is all still as expected.&lt;/p&gt;
&lt;p&gt;That’s enough for one post, I think. In the next entry, we’ll pick up with how you handle class properties, including computed properties, and then talk about mixins as well. In the post after that, we’ll look at Ember Data and some related concerns.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This isn’t my preferred way of handling optional types; &lt;a href="https://true-myth.js.org"&gt;a &lt;code&gt;Maybe&lt;/code&gt; type&lt;/a&gt; is. And you can, if you like, use &lt;code&gt;Maybe&lt;/code&gt; here:&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="TypeScript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>Exploring 4 Languages: Starting to Model the Domain</title><link href="http://www.chriskrycho.com/2018/exploring-4-languages-starting-to-model-the-domain.html" rel="alternate"></link><published>2018-01-14T09:00:00-05:00</published><updated>2018-01-14T09:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-14:/2018/exploring-4-languages-starting-to-model-the-domain.html</id><summary type="html">Using the type systems of Rust, Elm, F♯, and ReasonML to encode the elements of a domain model—and starting to get some idea how the languages are like and unlike each other.</summary><content type="html">&lt;p&gt;In the first three chapters of &lt;em&gt;Domain Modeling Made Functional&lt;/em&gt;, Wlaschin walks through the creation of a “domain model” for an order-taking system. (It’s well worth reading the book just for a bunch of the lessons in that section—I found them quite helpful!) Then, after spending a chapter introducing F&lt;sup&gt;♯&lt;/sup&gt;’s type system, he introduces the ways you can &lt;em&gt;use&lt;/em&gt; those type mechanics to express the domain. In today’s post, I’ll show the idiomatic implementations of these types in each of Rust, Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and ReasonML.&lt;/p&gt;
&lt;section id="simple-values" class="level2"&gt;
&lt;h2&gt;Simple values&lt;/h2&gt;
&lt;p&gt;Simple wrapper types let you take simple types like strings, numbers, etc. and use types to represent part of the business domain you’re dealing with—the basic idea being that a Customer ID may be a number, but it’s not interchangeable with &lt;em&gt;other&lt;/em&gt; numbers such as Order IDs.&lt;/p&gt;
&lt;p&gt;Here’s the most ergonomic and effective (and automatically-formatted in line with the language standards, where applicable!) way to do that in each of the languages:&lt;/p&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct CustomerId(i32);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;type CustomerId
    = CustomerId Int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt;:&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;type CustomerId = CustomerId of int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ReasonML:&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;type customerId =
  | CustomerId(int);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how similar these all are! The Rust implementation is the &lt;em&gt;most&lt;/em&gt; distinctive, though you can do it with the same kind of union type as the others. Here’s how that would look:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;enum CustomerId {
  CustomerId(i32),
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For performance reasons, you might also choose to implement the F&lt;sup&gt;♯&lt;/sup&gt; type as a struct:&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;&amp;lt;Struct&amp;gt;
type CustomerId = CustomerId of int&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="complex-data" class="level2"&gt;
&lt;h2&gt;Complex data&lt;/h2&gt;
&lt;p&gt;Wlaschin then moves on to showing how to model more complex data structures: types that “and” or “or” together other data. We “and” data together using record or struct types, and “or” data together using “union” or “enum” types. (Assume we’ve defined &lt;code&gt;CustomerInfo&lt;/code&gt;, &lt;code&gt;ShippingAddress&lt;/code&gt;, etc. types for all of these.)&lt;/p&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;// &amp;quot;and&amp;quot;
struct Order {
    customer_info: CustomerInfo,
    shipping_address: ShippingAddress,
    billing_address: BillingAddress,
    order_lines: Vec&amp;lt;OrderLine&amp;gt;,
    billing_amount: BillingAmount,
}

// &amp;quot;or&amp;quot;
enum ProductCode {
    Widget(WidgetCode),
    Gizmo(GizmoCode),
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- &amp;quot;and&amp;quot;
type alias Order =
    { customerInfo : CustomerInfo
    , shippingAddress : ShippingAddress
    , billingAddress : BillingAddress
    , orderLines : List OrderLine
    , billingAmount : BillingAmount
    }

-- &amp;quot;or&amp;quot;
type ProductCode
    = Widget WidgetCode
    | Gizmo GizmoCode&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt;:&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;// &amp;quot;and&amp;quot;
type Order = {
    CustomerInfo : CustomerInfo
    ShippingAddress : ShippingAddress
    BillingAddress : BillingAddress
    OrderLines : OrderLine list
    AmountToBill: BillingAmount
}

// &amp;quot;or&amp;quot;
type ProductCode =
    | Widget of WidgetCode
    | Gizmo of GizmoCode&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ReasonML—note that since we’re assuming we’ve already defined the other types here, you can write this without duplicating the name and type declaration, just like you can with JavaScript object properties.&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;/* &amp;quot;and&amp;quot; */
type order = {
  customerInfo,
  shippingAddress,
  billingAddress,
  orderLine,
  billingAmount
};

/* &amp;quot;or&amp;quot; */
type productCode =
  | Widget(widgetCode)
  | Gizmo(gizmoCode);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An interesting aside: unless you planned to reuse these types, you wouldn’t usually write these as standalone types with this many wrapper types in it in Rust in particular (even if the compiler would often recognize that it could squash them down for you).&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Instead, you’d normally write &lt;em&gt;only&lt;/em&gt; the base enum type to start, and refactor out the &lt;code&gt;struct&lt;/code&gt; wrapper later only if you found you needed it elsewhere:&lt;/p&gt;
&lt;pre class="diff"&gt;&lt;code&gt;enum ProductCode {
-    Widget(WidgetCode),
+    Widget(String),
-    Gizmo(GizmoCode),
+    Gizmo(String),
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That said: given how the book is tackling things, and the fact that you might want to &lt;em&gt;validate&lt;/em&gt; these types… having them as these low-cost wrappers is probably worth it. (In fact, having read a bit further than I’ve managed to write out yet, I can guarantee it.)&lt;/p&gt;
&lt;p&gt;We work through the rest of the basic types this way. But what about the types where we don’t yet have a good idea how we want to handle them?&lt;/p&gt;
&lt;p&gt;Each of these languages gives us an out (or more than one) for how to say “I don’t know what to put here yet.”&lt;/p&gt;
&lt;p&gt;Rust (which does not have a built-in &lt;code&gt;Never&lt;/code&gt; type… yet; see below):&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;// Make an empty enum (which you by definition cannot construct)
enum Never {}

// Use it throughout where we don&amp;#39;t know the type yet. It will fail to compile
// anywhere we try to *use* this, because you can&amp;#39;t construct it.
type OrderId = Never;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm (which has a built-in &lt;code&gt;Never&lt;/code&gt; type):&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;-- It will fail to compile anywhere we try to *use* this, because you cannot
-- construct `Never`.
type alias OrderId =
    Never&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt; (which &lt;em&gt;sort&lt;/em&gt; of does):&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;// Make a convenience type for the `exn`/`System.Exception` type
type Undefined = exn

type OrderId = Undefined&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reason (which also &lt;em&gt;sort&lt;/em&gt; of does—identically with F&lt;sup&gt;♯&lt;/sup&gt;):&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;/* Make a convenience type for the `exn`/`System.Exception` type */
type undefined = exn;

/*
  Use it throughout where we don&amp;#39;t know the type yet. It will compile, but fail
  to run anywhere we try to *use* this.
 */
type orderId = undefined;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For both F&lt;sup&gt;♯&lt;/sup&gt; and Reason, that’s following Wlaschin’s example. The main reason to do that is to make explicit that we’re not actually wanting an &lt;em&gt;exception&lt;/em&gt; type in our domain model, but just something we haven’t &lt;em&gt;yet&lt;/em&gt; defined. Anywhere we attempted to use it, we’d have to handle it like, well… an exception, instead of an actual type.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;type OrderId = !;&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="workflows-and-functions" class="level2"&gt;
&lt;h2&gt;Workflows and functions&lt;/h2&gt;
&lt;p&gt;Once we have the basic types themselves in place, we need to write down the ways we transform between them. In a functional style, we’re not going to implement instance methods—though as we’ll see in the next post, what we do in Rust will have &lt;em&gt;some&lt;/em&gt; similarities to class methods—we’re going to implement standalone functions which take types and return other types.&lt;/p&gt;
&lt;p&gt;Again, you’ll note that despite the common lineage, there is a fair amount of variation here. (Note that we’d also have defined the &lt;code&gt;UnvalidatedOrder&lt;/code&gt;, &lt;code&gt;ValidationError&lt;/code&gt;, and &lt;code&gt;ValidatedOrder&lt;/code&gt; types for all of this; I’m mostly interested in showing &lt;em&gt;new&lt;/em&gt; differences here.)&lt;/p&gt;
&lt;p&gt;Rust (using the &lt;a href="https://github.com/alexcrichton/futures-rs"&gt;Futures&lt;/a&gt; library to represent eventual computation):&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;type ValidationResponse&amp;lt;T&amp;gt; = Future&amp;lt;Item = T, Error = ValidationError&amp;gt;;

fn validate_order(unvalidated: UnvalidatedOrder) -&amp;gt; Box&amp;lt;ValidationResponse&amp;lt;ValidatedOrder&amp;gt;&amp;gt; {
    unimplemented!()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm (using the built-in &lt;code&gt;Task&lt;/code&gt; type for eventual computation; &lt;code&gt;Task&lt;/code&gt;s encapsulate both eventuality and the possibility of failure):&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;type ValidationResponse a
    = Task (List ValidationError) a

type alias ValidateOrder =
    UnvalidatedOrder -&amp;gt; ValidationResponse ValidatedOrder&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt; (using the built-in &lt;code&gt;Async&lt;/code&gt; type for eventual computation):&lt;/p&gt;
&lt;pre class="fsharp"&gt;&lt;code&gt;type ValidationResponse&amp;lt;&amp;#39;a&amp;gt; = Async&amp;lt;Result&amp;lt;&amp;#39;a,ValidationError list&amp;gt;&amp;gt;

type ValidateOrder =
    UnvalidatedOrder -&amp;gt; ValidationResponse&amp;lt;ValidatedOrder&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reason (using the built-in JavaScript-specific &lt;code&gt;Js.Promise&lt;/code&gt; type—which is exactly what it sounds like—for eventual computation):&lt;/p&gt;
&lt;pre class="reason"&gt;&lt;code&gt;type validationResponse(&amp;#39;a) = Js.Promise.t(Js.Result.t(&amp;#39;a, list(validationError)));

type validateOrder = unvalidatedOrder =&amp;gt; validationResponse(validatedOrder);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again Rust is much &lt;em&gt;more&lt;/em&gt; different here from the others than they are from each other. The biggest difference between Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason is how they handle generics and type parameters.&lt;/p&gt;
&lt;p&gt;You’ll note that in Elm, they just follow the name of the wrapping type. This is a kind of syntactic symmetry: the way you &lt;em&gt;name&lt;/em&gt; a generic type like this is the same basic way you &lt;em&gt;construct&lt;/em&gt; it. It’s quite elegant. And as it turns out, the same is true of Reason; it’s just that its authors have chosen to follow OCaml and use parentheses for them instead of following Haskell with spaces—a reasonable choice, given Reason is surface syntax for OCaml and not Haskell.&lt;/p&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt; uses angle brackets, I strongly suspect, because that’s what C&lt;sup&gt;#&lt;/sup&gt; uses for generics, and keeping them syntactically aligned in things like this is very helpful. Rust similarly uses angle brackets for similarity with other languages which have similar surface syntax—especially C++ (with its templates).&lt;/p&gt;
&lt;p&gt;The way you &lt;em&gt;name&lt;/em&gt; generic parameters differs between the languages as well. Elm, following Haskell, uses lowercase letters to name its generics (usually called &lt;em&gt;type parameters&lt;/em&gt; in Elm). F&lt;sup&gt;#&lt;/sup&gt; and Reason both (unsurprisingly) follow OCaml in using lowercase letters preceded by an apostrophe to name generics—in F&lt;sup&gt;#&lt;/sup&gt;, &lt;code&gt;TypeGenericOver&amp;lt;'a&amp;gt;&lt;/code&gt;; in Reason, &lt;code&gt;typeGenericOver('a)&lt;/code&gt;. Rust follows the convention from languages like C++, Java, and C&lt;sup&gt;#&lt;/sup&gt; and uses capital letters, &lt;code&gt;TypeGenericOver&amp;lt;T&amp;gt;&lt;/code&gt;. The use of specific letters is conventional, not mandated by the language (unlike the casing). The ML family usually starts with &lt;code&gt;a&lt;/code&gt; and moves through the alphabet; Rust and the languages it follows usually start with &lt;code&gt;T&lt;/code&gt; (for &lt;em&gt;type&lt;/em&gt;) and moves forward through the alphabet. (Sometimes you’ll also see different letters where it’s obviously a better fit for what’s contained.)&lt;/p&gt;
&lt;p&gt;These languages also vary in the syntax for constructing a &lt;em&gt;list&lt;/em&gt; of things. In F&lt;sup&gt;#&lt;/sup&gt; has convenience syntax for a few built-ins (the most common being the &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt; types), allowing you to write them &lt;em&gt;either&lt;/em&gt; as e.g. &lt;code&gt;List&amp;lt;ConcreteType&amp;gt;&lt;/code&gt; or &lt;code&gt;ConcreteType list&lt;/code&gt; (as here in the example). Elm, Reason, and Rust all just use the standard syntax for generic types—&lt;code&gt;List a&lt;/code&gt;, &lt;code&gt;list('a)&lt;/code&gt;, and &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;Finally, you’ll also note that we haven’t written out a &lt;em&gt;type&lt;/em&gt; declaration here for Rust; we’ve actually written out a stub of a function, with the &lt;a href="https://doc.rust-lang.org/std/macro.unimplemented.html"&gt;&lt;code&gt;unimplemented!()&lt;/code&gt;&lt;/a&gt; &lt;a href="https://doc.rust-lang.org/1.17.0/reference/macros-by-example.html"&gt;macro&lt;/a&gt;. If you invoke this function, you’ll get a clear crash with an explanation of which function isn’t implemented.&lt;/p&gt;
&lt;p&gt;Now, Rust also &lt;em&gt;does&lt;/em&gt; let us write out the type of these functions as type aliases if we want:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;type ValidateOrder =
    Fn(UnvalidatedOrder) -&amp;gt; Box&amp;lt;ValidationResponse&amp;lt;ValidatedOrder&amp;gt;&amp;gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You just don’t use these very often in idiomatic Rust; it’s much more conventional to simply write out what I did above. However, the one time you &lt;em&gt;might&lt;/em&gt; use a type alias like this is when you’re defining the type of a closure and you don’t want to write it inline. This is a pretty sharp difference between Rust and the other languages on display here, and it goes to the difference in their approaches.&lt;/p&gt;
&lt;p&gt;Rust is &lt;em&gt;not&lt;/em&gt; a functional-first language in the way that each of the others are, though it certainly draws heavily on ideas from functional programming throughout and makes quite a few affordances for a functional style. Instead, it’s a programming language first and foremost interested in combining the most screaming performance possible with true safety, and leaning on ideas from the ML family (among others!) as part of achieving that.&lt;/p&gt;
&lt;p&gt;Among other things, this is why you don’t have currying or partial application in Rust: those essentially &lt;em&gt;require&lt;/em&gt; you to have invisible heap-allocation to be ergonomic. We &lt;em&gt;don’t&lt;/em&gt; have that in Rust, as we do in Elm, Reason, and F&lt;sup&gt;♯&lt;/sup&gt;. If we want to pass around a function, we have to explicitly wrap it in a pointer to hand it around if we construct it in another function. (I won’t go into more of the details of this here; I’ve covered it some &lt;a href="http://www.newrustacean.com/show_notes/e004/index.html"&gt;on New Rustacean&lt;/a&gt; and some &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;in my Rust and Swift comparison&lt;/a&gt; a couple years ago.)&lt;/p&gt;
&lt;p&gt;That same underlying focus on performance and explicitness is the reason we have &lt;code&gt;Box&amp;lt;ValidationResponse&amp;lt;ValidatedOrder&amp;gt;&amp;gt;&lt;/code&gt; in the Rust case: we’re explicitly returning a &lt;em&gt;pointer&lt;/em&gt; to the type here. In Elm, F&lt;sup&gt;♯&lt;/sup&gt;, and Reason, that’s &lt;em&gt;always&lt;/em&gt; the case. But in Rust, you can and often do return stack-allocated data and rely on “move” semantics to copy or alias it properly under the hood.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So: lots of similarities here at first blush. The biggest differences that show up at this point are purely syntactical, other than some mildly sharper differences with Rust because of its focus on performance. The fact that these languages share a common lineage means it’s not hard to read any of them if you’re familiar with the others, and it’s actually quite easy to switch between them at the levels of both syntax and semantics.&lt;/p&gt;
&lt;p&gt;As usual, when dealing with languages in a relatively similar family, it’s &lt;em&gt;most&lt;/em&gt; difficult to learn the &lt;em&gt;library&lt;/em&gt; differences. The most obvious example of that here is Reason’s &lt;code&gt;Js.Promise&lt;/code&gt;, Elm’s &lt;code&gt;Task&lt;/code&gt;, F&lt;sup&gt;♯&lt;/sup&gt;’s &lt;code&gt;Async&lt;/code&gt;, and Rust’s &lt;code&gt;Future&lt;/code&gt; types: each of those has their own quirks, their own associated helper functions or methods, and their own ways of handling the same basic patterns.&lt;/p&gt;
&lt;p&gt;Still, if you have played with any one of these, you could pretty easily pick up one of the others. It’s sort of like switching between Python and Ruby: there are some real differences there, but the similarities are greater than the differences. Indeed, if anything, these languages are &lt;em&gt;more&lt;/em&gt; similar than those.&lt;/p&gt;
&lt;p&gt;Next time I’ll dig into Wlaschin’s chapter on &lt;em&gt;validating&lt;/em&gt; the domain model, and here some of the not-just-syntax-level differences in the languages will start to become more apparent.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I can’t speak to what’s idiomatic this way in any of the non-Rust languages, because I just haven’t used them enough yet.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="rust"></category><category term="elm"></category><category term="fsharp"></category><category term="reasonml"></category><category term="domain-driven design"></category><category term="four-languages"></category></entry><entry><title>Getting the Right Things Done</title><link href="http://www.chriskrycho.com/2018/getting-the-right-things-done.html" rel="alternate"></link><published>2018-01-10T19:30:00-05:00</published><updated>2018-01-10T19:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-10:/2018/getting-the-right-things-done.html</id><summary type="html">“Productivity” as such is not the point. The point is faithfully doing the right things, and doing them for love of God and love of neighbors.</summary><content type="html">&lt;p&gt;Americans overrate &lt;em&gt;productivity&lt;/em&gt;. We emphasize it at the expense of nearly everything else. That goes for the most individual evaluations to the structures and decisions of megacorporations. Our goal is to extract every last bit of &lt;em&gt;work&lt;/em&gt; from ourselves we can. And this is, in a word, &lt;em&gt;bad&lt;/em&gt;. It is bad not because work is bad, but because it is a good thing become the &lt;em&gt;only&lt;/em&gt; thing. (This is the usual way humans mess things up: we take good things and make them ultimate, when nothing we make or do can bear that weight.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;So given all of that, why do I &lt;a href="http://www.chriskrycho.com/productivity/" title="Posts tagged “Productivity”"&gt;think and write so much about productivity&lt;/a&gt;? Put plainly, because I think the goods of creation and production are still worth pursuing, and I want to steward my time well accordingly. I want to create the things I am passionate about—from blog posts like this to &lt;a href="http://www.newrustacean.com" title="New Rustacean"&gt;podcast&lt;/a&gt; &lt;a href="http://www.winningslowly.org" title="Winning Slowly"&gt;episodes&lt;/a&gt; to &lt;a href="https://olo.com" title="Olo – online ordering for restaurants"&gt;the web apps I build&lt;/a&gt; and &lt;a href="https://github.com/typed-ember/ember-cli-typescript" title="Ember CLI TypeScript"&gt;the supporting tools&lt;/a&gt; &lt;a href="https://github.com/chriskrycho/true-myth" title="True Myth"&gt;I work on&lt;/a&gt;—without that overwhelming the other things in my day. I think about productivity the way I do, in other words, because I want to be productive without productivity becoming an idol.&lt;/p&gt;
&lt;p&gt;Put more directly: my efforts on the many projects I care about &lt;em&gt;cannot&lt;/em&gt; come at the expense of loving my family well, serving my church, spending meaningful amounts and kinds of time with friends, and so on. There are many goods in this life we are responsible to pursue. That’s not the usual way we think about good things in life either: we tend to think about good things as things we &lt;em&gt;get&lt;/em&gt; to pursue, if we have time after our other less-good responsibilities. But I think that’s a misshapen view of the kinds of things I’m talking about here. Worship, family life, work, creative expression, service, teaching: these are all goods we are &lt;em&gt;called to&lt;/em&gt; (to various degrees, given the qualifiers of gifting and circumstances).&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We therefore ought to think of them in terms of faithfulness. Do we do each of them to the best of our abilities, making good use of our time and abilities?&lt;/p&gt;
&lt;p&gt;For me, that consideration plays itself out in a variety of ways. One making sure that when I am working, I am working &lt;em&gt;hard&lt;/em&gt;—&lt;a href="https://www.esv.org/Colossians+3+23/" title="Colossians 3:23"&gt;doing my work well, honoring God in the doing&lt;/a&gt;.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; &lt;a href="http://www.chriskrycho.com/2017/log-all-the-things.html" title="Log All the Things!"&gt;Pomodoro&lt;/a&gt; is a tool to that end. It, being a tool, can also be put to other, worse ends, of course: it could very well become a means to obsession with work! But my goal with it is simply to steward my time and attention well, in part so that I may have attention to pay—for attention is indeed &lt;a href="http://iasc-culture.org/THR/channels/Infernal_Machine/2015/04/79-theses-on-technology-the-spectrum-of-attention/" title="79 Theses on Technology: The Spectrum of Attention"&gt;something&lt;/a&gt; &lt;a href="http://iasc-culture.org/THR/channels/Infernal_Machine/2015/03/79-theses-on-technology-on-attention/" title="79 Theses on Technology: On Attention"&gt;we&lt;/a&gt; &lt;a href="http://iasc-culture.org/THR/channels/Infernal_Machine/2015/04/79-theses-on-technology-jacobs-responds-to-wellmon/" title="79 Theses on Technology: Jacobs Responds to Wellmon"&gt;pay&lt;/a&gt;—in other, &lt;a href="https://thefrailestthing.com/2011/03/22/dont-worry-be-idle/" title="Don’t Worry, Be Idle"&gt;less “productive”&lt;/a&gt; but no less deeply important ways.&lt;/p&gt;
&lt;p&gt;Similarly, setting aside this hour for writing every morning enables me to &lt;em&gt;think&lt;/em&gt; more and better in the ways I need to for the sake of faithful stewardship of my own God-given gifts and desires, and (no less importantly) for the sake of using those gifts and desires for the good of my community.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; If I am unable to so much as muster a coherent thought because I’ve waited to do my writing until a time of day when I simply cannot think in that manner, then I am unable to use this combination of desire and ability for the glory of God and the good of my neighbors. But if I, aware of &lt;a href="http://www.chriskrycho.com/2017/knowing-your-rhythms.html" title="Knowing Your Rhythms"&gt;my bodily and intellectual rhythms&lt;/a&gt;, allocate an hour in the morning to write and an hour of lower concentration for e.g. taking a run in the silence of the empty winter fields near here, then I am able to both be productive when I ought to, and idle when I ought to.&lt;/p&gt;
&lt;p&gt;“Productivity,” then, as I conceive it &lt;em&gt;whenever&lt;/em&gt; I write about it here, is not an ultimate end. Having (and making good use of!) a to-do list, for example, is not about maximizing the number of things I can do in a given week. It is about carrying out my many vocations well, and not failing to do the things I ought. Your set of vocations looks different from mine. The set of things you ought not fail to do is different accordingly. And the tools you employ may be different: for reasons of phase of life, temperament, abilities, and so on.&lt;/p&gt;
&lt;p&gt;“Productivity” as such is not the point. The point is faithfully doing the &lt;em&gt;right&lt;/em&gt; things, and doing them for love of God and love of neighbors.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Cf. Augustine, _Confessions_, Book 1, paragraph 1.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;The order of this list is important, though it is perhaps also misleading: worship undergirds and shapes the others.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;That passage was addressed to people in legal slavery (albeit a slavery very different in kind from the chattel slavery of the American South). I’m not here going to dig more deeply into the hermeneutics of applying it to someone doing labor in a market economy; suffice it to say I think that if a first century slave should work hard so as to honor God in his or her work, so ought we.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Our desires and aims are not for ourselves. They’re meant to be gifts to those around us; used rightly, they can be.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="productivity"></category></entry><entry><title>Tweet less. Blog more.</title><link href="http://www.chriskrycho.com/2018/tweet-less-blog-more.html" rel="alternate"></link><published>2018-01-02T06:45:00-05:00</published><updated>2018-01-02T06:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-02:/2018/tweet-less-blog-more.html</id><summary type="html">A game plan for how I plan to (and maybe how you can!) write a lot more blog posts this year.
</summary><content type="html">&lt;p&gt;The other day, I &lt;a href="https://twitter.com/chriskrycho/status/947607650484740098"&gt;tweeted&lt;/a&gt;:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suggested 2018 resolution:&lt;/p&gt;
&lt;p&gt;⚡️ Tweet less. Blog more. ⚡️&lt;/p&gt;
&lt;p&gt;It’ll make all of our discourse better and richer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post, I’m going to trace out how I plan to do that, in hopes that it’ll help others write (and &lt;a href="https://twitter.com/mgattozzi/status/947694285004201984"&gt;finish&lt;/a&gt;!) more blog posts—short posts, long posts, and everything in between. In another post (probably tomorrow or Thursday), I’ll explain &lt;em&gt;why&lt;/em&gt; I think this is so important.&lt;/p&gt;
&lt;p&gt;The game plan:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tweet less.&lt;/strong&gt; If you’re tempted to string together more than two or &lt;em&gt;at most&lt;/em&gt; three tweets… you have a blog post. Seriously! At 280 characters, if you assume a word is roughly 5 characters on average, and toss in spaces and punctuation, you’ve got 40–45 words in a tweet. Three of those is 120–130 words. Five tweets is 200–225 words.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write down your ideas.&lt;/strong&gt; I have a &lt;code&gt;#writing/ideas&lt;/code&gt; tag in &lt;a href="https://itunes.apple.com/us/app/bear/id1016366447?mt=8" title="Bear by Shiny Frog on the App Store"&gt;Bear&lt;/a&gt;, and new ideas I have just get thrown in there. When I have a day where I don’t have some &lt;em&gt;other&lt;/em&gt; specific idea to tackle, I browse through that list and grab something that seems interesting. As an example: my &lt;a href="http://www.chriskrycho.com/2017/chrome-is-not-the-standard.html"&gt;“Chrome is Not the Standard”&lt;/a&gt; post had just been sitting in there for a couple months when I finally got around to writing it up a few weeks ago.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be okay with being brief.&lt;/strong&gt; I’m a wordy guy, but I think many people feel the need to write &lt;em&gt;much longer&lt;/em&gt; material now than they did in the early days of blogging, precisely &lt;em&gt;because&lt;/em&gt; Twitter exists. It’s as if the existence of a microblogging platform makes us feel like a 200-word post doesn’t justify its own existence. I don’t believe that: &lt;a href="http://www.chriskrycho.com/2017/momentum.html" title="Momentum"&gt;I write short posts sometimes!&lt;/a&gt; And some of &lt;a href="http://blog.ayjay.org"&gt;my&lt;/a&gt; &lt;a href="https://ethanmarcotte.com/wrote/"&gt;favorite&lt;/a&gt; &lt;a href="https://css-tricks.com/many-ways-learn/"&gt;bloggers&lt;/a&gt; regularly do likewise.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be okay taking a while to finish.&lt;/strong&gt; Sometimes a piece can take a few weeks (or months!) to gel. That’s okay. Keep at it. Take some of your allocated writing time and keep plugging. That’s how I finally finished &lt;a href="https://mereorthodoxy.com/faithful-extension-question-human-origins/" title="“Faithful Extension and the Question of Human Origins”"&gt;this book review&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;But finish things.&lt;/strong&gt; That means: get them to a spot where you’re ready to post them (even if they’re not perfect [because they never are!]) or eventually just throw them away. Both are allowed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Block out some time for it!&lt;/strong&gt; The main reason for my flurry of posts of late is that &lt;a href="http://www.chriskrycho.com/2017/knowing-your-rhythms.html" title="Knowing Your Rhythms"&gt;I started writing every day before 7am&lt;/a&gt;. And that’s a habit I’m keeping! It helps. Some days it’ll be &lt;a href="http://www.newrustacean.com"&gt;New Rustacean&lt;/a&gt; scripts. Some days it’ll be &lt;a href="http://www.chriskrycho.com/four-languages/"&gt;technical writing&lt;/a&gt;. Some days it’ll be &lt;a href="http://www.chriskrycho.com/2017/star-wars-the-internet-and-me.html" title="Star Wars, the Internet, and Me"&gt;reflections on _Star Wars_&lt;/a&gt;. But blocking out the time means &lt;em&gt;writing will happen&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The irony, I know!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;This post itself is under five hundred words!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="productivity"></category></entry><entry><title>Exploring 4 Languages: Project Setup</title><link href="http://www.chriskrycho.com/2018/exploring-4-languages-project-setup.html" rel="alternate"></link><published>2018-01-01T13:00:00-05:00</published><updated>2018-01-01T13:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2018-01-01:/2018/exploring-4-languages-project-setup.html</id><summary type="html">Getting Rust, Elm, F♯, and ReasonML installed; their editor plugins configured; and the project ready for implementing the exercises in Scott Wlaschin’s Domain Modeling Made Functional.</summary><content type="html">&lt;p&gt;In this post, I’m just going to briefly talk through the steps I needed to do to set up each of the languages and my editor setup for them. Gladly, it was pretty simple. At the end, I’ll offer a note on my thoughts on the setup processes. (Note that this isn’t “How to do this for anyone ever”—it’s “how I did it, with some notes where it might be relevant to you.”)&lt;/p&gt;
&lt;p&gt;For context, I’m running macOS and using &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt; as my editor. Whenever I say “Install the VS Code extension,” you can do it either by opening the extension side panel and searching for &lt;code&gt;&amp;lt;Extension Name&amp;gt;&lt;/code&gt;, or by typing &lt;code&gt;ext install &amp;lt;extension label&amp;gt;&lt;/code&gt;—I’ll write it like &lt;code&gt;&amp;lt;Extension Name&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;extension label&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The source code as of what I’m describing in this post is &lt;a href="https://github.com/chriskrycho/dmmf/tree/project-setup"&gt;at the &lt;code&gt;project-setup&lt;/code&gt; tag&lt;/a&gt; in &lt;a href="https://github.com/chriskrycho/dmmf/"&gt;the repo&lt;/a&gt;.&lt;/p&gt;
&lt;section id="rust" class="level2"&gt;
&lt;h2&gt;Rust&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language installation:&lt;/strong&gt; Install &lt;a href="https://rustup.rs"&gt;&lt;em&gt;rustup&lt;/em&gt;&lt;/a&gt;: &lt;code&gt;curl https://sh.rustup.rs -sSf | sh&lt;/code&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editor setup:&lt;/strong&gt; Installed the VS Code extension: &lt;code&gt;Rust (rls)&lt;/code&gt;/&lt;code&gt;rust&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project setup:&lt;/strong&gt; In the root of &lt;a href="https://github.com/chriskrycho/dmmf"&gt;my repo&lt;/a&gt;, I ran &lt;code&gt;cargo new rust&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="elm" class="level2"&gt;
&lt;h2&gt;Elm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language installation&lt;/strong&gt;: There are installers, but I just did &lt;code&gt;npm i -g elm&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editor setup:&lt;/strong&gt; Installed the VS Code Elm extension: &lt;code&gt;Elm&lt;/code&gt;/&lt;code&gt;elm&lt;/code&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project setup:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Install the &lt;code&gt;create-elm-app&lt;/code&gt; tool: &lt;code&gt;npm i -g create-elm-app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the root of the project, I ran &lt;code&gt;create-elm-app elm&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="f" class="level2"&gt;
&lt;h2&gt;F&lt;sup&gt;♯&lt;/sup&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language installation&lt;/strong&gt;: Install &lt;a href="http://www.mono-project.com"&gt;mono&lt;/a&gt;: &lt;code&gt;brew install mono&lt;/code&gt; (note installation instructions &lt;a href="option-5-install-f-with-mono-via-homebrew-64-bit"&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editor setup:&lt;/strong&gt; Install the VS Code Ionide extension: &lt;code&gt;Ionide-fsharp&lt;/code&gt;/&lt;code&gt;ionide-fsharp&lt;/code&gt;. It’ll automatically install the associated Paket and FAKE extensions from the Ionide project as well, and those will install Paket and FAKE during installation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project setup:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In the root of the repo, I created the &lt;code&gt;fsharp&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Then I opened a VS Code instance to to that directory, opened the command palette, and ran &lt;code&gt;F#: New Project&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;I chose &lt;code&gt;console&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I left the directory blank&lt;/li&gt;
&lt;li&gt;I named the project &lt;code&gt;dmmf&lt;/code&gt; (for &lt;em&gt;D&lt;/em&gt;omain &lt;em&gt;M&lt;/em&gt;odeling &lt;em&gt;M&lt;/em&gt;ade &lt;em&gt;F&lt;/em&gt;unctional).&lt;/li&gt;
&lt;li&gt;Since F&lt;sup&gt;♯&lt;/sup&gt; (like C&lt;sup&gt;♯&lt;/sup&gt;) prefers PascalCase names, I renamed the generated module &lt;code&gt;DMMF&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="reasonml" class="level2"&gt;
&lt;h2&gt;ReasonML&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Language installation&lt;/strong&gt;: Following the setup instructions &lt;a href="https://reasonml.github.io/guide/javascript/quickstart"&gt;here&lt;/a&gt;, I ran &lt;code&gt;npm install -g bs-platform&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editor setup:&lt;/strong&gt; following &lt;a href="https://reasonml.github.io/guide/editor-tools/global-installation"&gt;the official instructions&lt;/a&gt;—
&lt;ul&gt;
&lt;li&gt;I ran &lt;code&gt;npm install -g https://github.com/reasonml/reason-cli/archive/3.0.4-bin-darwin.tar.gz&lt;/code&gt; to install the dependencies for the editor configuration.&lt;/li&gt;
&lt;li&gt;I installed the VS Code extension: &lt;code&gt;Reason&lt;/code&gt;/&lt;code&gt;reasonml&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project setup:&lt;/strong&gt; In the root of the repo, I ran &lt;code&gt;bsb -init reason -theme basic-reason&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="comments-on-the-setup-processes" class="level2"&gt;
&lt;h2&gt;Comments on the setup processes&lt;/h2&gt;
&lt;p&gt;Most of the languages have &lt;em&gt;fairly&lt;/em&gt; straightforward processes to get up and running with a good-to-excellent tooling experience.&lt;/p&gt;
&lt;p&gt;The best of them is Rust, which is &lt;em&gt;extremely&lt;/em&gt; easy to get up and running with.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Elm is roughly in the middle—it’s less straightforward than Rust in that &lt;code&gt;create-elm-app&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; an officially supported approach, unlike &lt;code&gt;rustup&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt;, so you’re going to have a much less awesome experience if you don’t know about it.&lt;/p&gt;
&lt;p&gt;Reason and F&lt;sup&gt;♯&lt;/sup&gt; both have slightly larger negatives.&lt;/p&gt;
&lt;p&gt;Reason requires you to &lt;code&gt;npm install&lt;/code&gt; a large, gzipped file with multiple dependencies all bundled, instead of having a dedicated installer &lt;em&gt;a la&lt;/em&gt; &lt;code&gt;rustup&lt;/code&gt;. It also has the possibility for a not-so-great first-run experience in the editor, which &lt;a href="https://github.com/facebook/reason/issues/1729"&gt;I discovered&lt;/a&gt; all too quickly.&lt;/p&gt;
&lt;p&gt;F&lt;sup&gt;♯&lt;/sup&gt; essentially requires you to use an editor extension to get the language setup with &lt;a href="https://fsprojects.github.io/Paket/"&gt;Paket&lt;/a&gt;, which is a &lt;em&gt;much&lt;/em&gt; better choice of package manager than the default .NET package manager NuGet. Command line tools exist and are improving rapidly, and you &lt;em&gt;can&lt;/em&gt; &lt;a href="https://fsprojects.github.io/Paket/paket-and-dotnet-cli.html"&gt;get them working&lt;/a&gt;… but it’s harder than it needs to be. And that project setup wizard is &lt;em&gt;fine&lt;/em&gt;, but it’s a lot noisier than just doing &lt;code&gt;create-elm-app&lt;/code&gt; or especially &lt;code&gt;cargo new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In any case, though, I have them all up and running now! More soon!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re uncomfortable with running that script, there are &lt;a href="https://www.rust-lang.org/en-US/other-installers.html"&gt;other options&lt;/a&gt; as well.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Note that the VS Code extension is &lt;em&gt;not&lt;/em&gt; the best experience out there for Elm: the Atom extensions (&lt;a href="https://atom.io/packages/language-elm"&gt;language-elm&lt;/a&gt; and &lt;a href="https://atom.io/packages/elmjutsu"&gt;elmjutsu&lt;/a&gt;) are. I stuck with VS Code because it’s &lt;em&gt;good enough&lt;/em&gt; and, more importantly, the Code extensions are arguably best in class for the &lt;em&gt;other&lt;/em&gt; languages… and it’s what I use every day.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I’m not just saying that because I’m a Rust fanboy, either! If Rust were hard to use, I’d be complaining &lt;em&gt;louder&lt;/em&gt; because of my enthusiasm for the language.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="rust"></category><category term="elm"></category><category term="fsharp"></category><category term="reasonml"></category><category term="domain-driven design"></category><category term="four-languages"></category></entry><entry><title>Exploring 4 Languages</title><link href="http://www.chriskrycho.com/2017/exploring-4-languages.html" rel="alternate"></link><published>2017-12-31T20:20:00-05:00</published><updated>2017-12-31T20:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-31:/2017/exploring-4-languages.html</id><summary type="html">I’m going to implement the exercises from Domain Modeling Made Functional in Rust, Elm, ReasonML, and F♯… because I think it'll be an interesting learning experience and a lot of fun!</summary><content type="html">&lt;p&gt;Today, as I hit the first of the implementation chapters in &lt;a href="https://pragprog.com/book/swdddf/domain-modeling-made-functional"&gt;&lt;em&gt;Domain Modeling Made Functional&lt;/em&gt;&lt;/a&gt;, I started thinking about how I wanted to implement it. As I’ve noted &lt;a href="https://twitter.com/chriskrycho/status/934170826718429184"&gt;elsewhere&lt;/a&gt; in the past, very little of the book is &lt;em&gt;truly&lt;/em&gt; specific to F&lt;sup&gt;♯&lt;/sup&gt;, though that’s the language Wlaschin uses in the book—and Wlaschin himself &lt;a href="https://twitter.com/ScottWlaschin/status/934177554331848705"&gt;agrees&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks! Yes, it’s true that you could easily use #ElmLang, #RustLang, #Scala, or especially #OCaml to work through the book. I use hardly any F# specific features.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So… I decided to try something a little bit bonkers. I’m going to implement these exercises in &lt;em&gt;four different languages&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fsharp.org"&gt;F&lt;sup&gt;♯&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reasonml.github.io"&gt;ReasonML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These languages are all related: they’re descended from &lt;a href="http://smlnj.org/sml.html"&gt;Standard ML&lt;/a&gt;. ReasonML and F&lt;sup&gt;♯&lt;/sup&gt; are like siblings: Reason is merely a custom syntax for OCaml; F&lt;sup&gt;♯&lt;/sup&gt; is (originally) an implementation of OCaml on .NET (though the two languages have diverged since F&lt;sup&gt;♯&lt;/sup&gt; came into existence). Elm and Rust are cousins of each other and of Reason and F&lt;sup&gt;♯&lt;/sup&gt;, though they’re both drawing on other languages besides OCaml as well. I also have some familiarity with Rust, Elm, and F&lt;sup&gt;♯&lt;/sup&gt; already, and have read the docs for Reason a couple times. So this is a &lt;em&gt;bit&lt;/em&gt; less crazy than it might otherwise be.&lt;/p&gt;
&lt;p&gt;Why, though? Mostly because I think it’ll be interesting to compare the implementations of the domain model from the book side by side. It’ll look just a bit different in each language, and I expect to learn a bit more of the &lt;em&gt;feel&lt;/em&gt; of each language by doing this. (That side by side comparison is something I’ve &lt;a href="http://www.chriskrycho.com/rust-and-swift.html" title="Series: Rust and Swift"&gt;done before&lt;/a&gt; and &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-v.html" title="Part V: The value (and challenge) of learning languages in parallel."&gt;found very profitable&lt;/a&gt;.) I’ll also turn it into blog posts, which hopefully will be interesting to others!&lt;/p&gt;
&lt;p&gt;More to come, and soon.&lt;/p&gt;
</content><category term="functional programming"></category><category term="rust"></category><category term="elm"></category><category term="fsharp"></category><category term="reasonml"></category><category term="domain-driven design"></category><category term="four-languages"></category></entry><entry><title>Types are Small</title><link href="http://www.chriskrycho.com/2017/types-are-small.html" rel="alternate"></link><published>2017-12-29T14:00:00-05:00</published><updated>2017-12-29T14:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-29:/2017/types-are-small.html</id><summary type="html">A really fabulous quote from Scott Wlaschin's book Domain Modeling Made Functional crystallized an important point for me: types (in typed functional programming) are small.
</summary><content type="html">&lt;p&gt;I’ve been reading through &lt;a href="https://fsharpforfunandprofit.com" title="F♯ for Fun and Profit"&gt;Scott Wlaschin&lt;/a&gt;’s really excellent book &lt;a href="https://pragprog.com/book/swdddf/domain-modeling-made-functional"&gt;&lt;em&gt;Domain Modeling Made Functional&lt;/em&gt;&lt;/a&gt; and this quote (from his chapter introducing the idea of &lt;em&gt;types&lt;/em&gt; in &lt;em&gt;typed functional programming&lt;/em&gt;) crystallized something for me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A type in functional programming is not the same as a class in object-oriented programming. It is much simpler. In fact, a type is just the name given to the set of possible values that can be used as inputs or outputs of a function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A lot of times when I’m trying to explain how I use types in a typed functional programming style, this is a serious point of confusion—both for the Java or C♯ OOP programmer and for the programmers coming from dynamic languages. When people think of “types” they tend to think of &lt;em&gt;classes and interfaces and methods, oh my!&lt;/em&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One is the big heavy class. The other is a nice little LEGO block. The difference is &lt;em&gt;huge&lt;/em&gt; in my day to day experience, but I’ve never been able to express it so clearly as Wlaschin’s quote.&lt;/p&gt;
&lt;p&gt;I suspect that when I’m talking to most people coming from dynamically typed languages &lt;em&gt;or&lt;/em&gt; from the standard OOP languages, they hear “Write three interfaces and six classes” when I say “using types to help me with my program.” But what I mean is “Write three tiny little shapes, and then one more that shows how they snap together in a slightly bigger one.” Types aren’t big heavy things. They’re just the shapes I want to flow through my program, written down like documentation for later… that gets checked for me to make sure it stays up to date, and lets me know if I missed something in my description of the shape of the data, or tried to do something I didn’t mean to before.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; write a language like F♯ or TypeScript or Elm like you would C♯, but it’s generally not going to be an especially &lt;em&gt;happy&lt;/em&gt; experience (and it’ll be less happy the more “purely functional,” &lt;em&gt;a la&lt;/em&gt; Elm, you go). But you don’t have to! Types are just tiny little descriptions of the shapes you plan to deal with in a particular spot—more concise and more dependable than writing a JSDoc or something like that.&lt;/p&gt;
&lt;p&gt;Types are small. You can build big things with them, but &lt;em&gt;types are small&lt;/em&gt;.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;In fact, nearly every “I’m just not into types” or even “I think types are worse for most things” talks I’ve seen—including &lt;a href="https://www.youtube.com/watch?v=2V1FtfBDsLU"&gt;this recent and popular one by Rich Hickey&lt;/a&gt;—tend to conflate &lt;em&gt;all&lt;/em&gt; type systems together. But the experience of writing TypeScript is &lt;em&gt;very&lt;/em&gt; different from the experience of writing C♯. (You’ll note that in that talk, for example, Hickey freely jumps back and forth between Java-style types and Haskell-style types when it suits his purposes, and he entirely skips past the structural type systems currently having something of a heyday.) In many cases, I &lt;em&gt;suspect&lt;/em&gt; this is simply a lack of deep experience with the whole variety of type systems out there (though I’d not attribute that to any specific individual).&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="functional programming"></category><category term="software development"></category></entry><entry><title>2017 in Review: Looking Forward</title><link href="http://www.chriskrycho.com/2017/2017-in-review-looking-forward.html" rel="alternate"></link><published>2017-12-26T09:35:00-05:00</published><updated>2017-12-26T09:35:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-26:/2017/2017-in-review-looking-forward.html</id><summary type="html">Making goals for myself for the year ahead—with a good mix of standing aims, primary goals, and flexible goals; and appropriate priority given to each of those.
</summary><content type="html">&lt;p&gt;As I do every year, I’ve been making some goals for myself for 2018. I’m breaking these down into three big categories this year, having learned from the experience of summarizing my goals for last year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Standing aims&lt;/strong&gt;: things that I can’t exactly check off as &lt;em&gt;done&lt;/em&gt;, but which are extremely important to me.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Goals&lt;/strong&gt;: things I &lt;em&gt;can&lt;/em&gt; mark as done.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Primary:&lt;/strong&gt; the most important of my goals—the ones I’ll count myself as having failed in some way if I don’t accomplish them over the course of the year (barring &lt;em&gt;major&lt;/em&gt; unforeseen goings-on, which are, well… impossible to foresee).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: other goals, which I’d &lt;em&gt;like&lt;/em&gt; to get to, but which it won’t bother me if I don’t get to them.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="standing-aims" class="level2"&gt;
&lt;h2&gt;Standing aims&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Integrate well into our new church—including finding specific ways and places to serve regularly, joining a small group, and making some good friends.&lt;/li&gt;
&lt;li&gt;Spend more, better, and more consistent time with my family.&lt;/li&gt;
&lt;li&gt;Work hard at Olo.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="goals" class="level2"&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;section id="primary" class="level3"&gt;
&lt;h3&gt;Primary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Podcasting:
&lt;ul&gt;
&lt;li&gt;Ship a minimum of 3 episodes of New Rustacean per month January—October.&lt;/li&gt;
&lt;li&gt;Publish Winning Slowly Season 6.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Writing:
&lt;ul&gt;
&lt;li&gt;Publish at least 4 medium-length (2,000–3,500 words) at Mere Orthodoxy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Software:
&lt;ul&gt;
&lt;li&gt;Get ember-cli-typescript “finished”—i.e. with full support for addons and fast incremental builds.&lt;/li&gt;
&lt;li&gt;Ship a &lt;a href="https://alistapart.com/article/responsive-web-design"&gt;responsive&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/Apps/Progressive"&gt;progressive&lt;/a&gt; version of a major application I work on.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Read, or finish reading, the following books:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Resurrection and Moral Order&lt;/em&gt;, Oliver O’Donovan (started in 2017)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Theology and the Mirror of Scripture&lt;/em&gt;, Kevin Vanhoozer and Daniel Treier (started in 2017)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How Buildings Learn&lt;/em&gt;, Stewart Brand (started in 2017)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;City of God&lt;/em&gt;, Augustine&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Technological Society&lt;/em&gt;, Jacques Ellul&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Meaning of the City&lt;/em&gt;, Jacques Ellul&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Ethics of Freedom&lt;/em&gt;, Jacques Ellul&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Blasphemy: A Radical Critique of our Technological Culture&lt;/em&gt;, Ivan Illich&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fitness:
&lt;ul&gt;
&lt;li&gt;Run a half marathon.&lt;/li&gt;
&lt;li&gt;Finish the &lt;a href="http://www.childrenscoloradofoundation.org/courage-classic/"&gt;Courage Classic&lt;/a&gt; with my dad.&lt;/li&gt;
&lt;li&gt;Get back to my target/healthiest weight.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="flexible" class="level3"&gt;
&lt;h3&gt;Flexible&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Publish one essay at a larger publication (for money, if possible!).&lt;/li&gt;
&lt;li&gt;Archive static versions of the prior versions of my website.&lt;/li&gt;
&lt;li&gt;Improve the page load performance of this site (e.g. with progressive font-loading).&lt;/li&gt;
&lt;li&gt;Make meaningful progress on &lt;a href="https://github.com/chriskrycho/lightning-rs"&gt;Lightning&lt;/a&gt; November–December.&lt;/li&gt;
&lt;li&gt;Lead a book club at Olo.&lt;/li&gt;
&lt;li&gt;Get up to 20 consecutive pull-ups and 100 consecutive push-ups.&lt;/li&gt;
&lt;li&gt;Print hard copies of at least one year of my website archive.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;That seems like &lt;em&gt;plenty&lt;/em&gt; to go after this year. One thing that isn’t apparent here is that a fair bit of this is aimed at goals that extend past this year. There are things I want to do in the first half of my thirties if possible, of which some of these are a part. I don’t have those kinds of things written down (and when I write them down, I probably won’t publish them here!) but as I come into the broad swath of life that is just “adulthood”—not &lt;em&gt;young&lt;/em&gt; adulthood or &lt;em&gt;old age&lt;/em&gt;—I am increasingly mindful of the kinds of things I want to do that take more than a single year to accomplish. Some of these move the needle substantially in that direction, so hopefully I’ll get there!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="productivity"></category><category term="writing"></category><category term="family"></category><category term="fitness"></category><category term="podcasting"></category><category term="software development"></category><category term="2017-review"></category></entry><entry><title>I Want JSON Decoders</title><link href="http://www.chriskrycho.com/2017/i-want-json-decoders.html" rel="alternate"></link><published>2017-12-25T19:20:00-05:00</published><updated>2017-12-25T19:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-25:/2017/i-want-json-decoders.html</id><summary type="html">Parsing JavaScript well is a solved problem in lots of contexts. But it's time for JavaScript to take a page from Elm.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;This post was originally published at &lt;a href="https://www.dailydrip.com/blog/i-want-json-decoders.html"&gt;DailyDrip.com&lt;/a&gt;. They’re doing really great work over there, so I encourage you to check out their content and consider subscribing!&lt;/i&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;The other day, I got a report about the Ember.js app I’m working on: when a customer applied a coupon in the basket, they’d see an indication that the coupon was applied, but the basket total would still display as if it hadn’t been updated. Orders were &lt;em&gt;placed&lt;/em&gt; correctly, but they wouldn’t render right. I dug around for a bit, and then discovered that it was one of the (many) places where &lt;code&gt;undefined&lt;/code&gt; was biting us.&lt;/p&gt;
&lt;p&gt;How did this happen? It turned out it was a perfect storm: a confusingly-designed &lt;abbr&gt;API&lt;/abbr&gt; combined with a reasonable (but in this case, very unhelpful) assumption in our data layer. When the total on a given basket dropped to zero, our &lt;abbr&gt;API&lt;/abbr&gt; simply didn’t send back a value on the payload at all. Instead of &lt;code&gt;{ total: 0, ... }&lt;/code&gt;, there was just, well, &lt;code&gt;{ ... }&lt;/code&gt; – no &lt;code&gt;total&lt;/code&gt; field at all. Meanwhile, our data layer was designed to let a server send back only the fields which &lt;em&gt;required&lt;/em&gt; updating. That way, you can send back partial records to indicate only what has changed, instead of having to send back the whole of what might be a very large record, or a very large collection of records.&lt;/p&gt;
&lt;p&gt;The combination was terrible, though: because the server didn’t send back the &lt;code&gt;total&lt;/code&gt; field at all when it dropped to &lt;code&gt;0&lt;/code&gt;, the client never updated the total it displayed to the user: as far as it was concerned, the server was saying “no change here!”&lt;/p&gt;
&lt;p&gt;The first and most obvious solution here, of course, is the one we implemented: we had the &lt;abbr&gt;API&lt;/abbr&gt; always send back a value, even if that value was &lt;code&gt;0&lt;/code&gt;. But it seems like there should be a better way.&lt;/p&gt;
&lt;p&gt;Lots of languages have fairly nice facilities for parsing JavaScript. Several languages even have tools for automatically constructing local, strongly-typed data structures from the structure of a &lt;abbr&gt;JSON&lt;/abbr&gt; response on an &lt;abbr&gt;API&lt;/abbr&gt;. F♯’s &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/"&gt;type providers&lt;/a&gt; are like this and &lt;em&gt;really fancy&lt;/em&gt; in the way they’ll automatically derive the type for you so you don’t even have to write it out as you would in everything from Haskell to C#. But for the most part in JavaScript, you have at most a way to map data to a local record in your data store – certainly none of those type safe guarantees. In TypeScript, you can write the types you receive out carefully – though, as I discovered in this case, probably not carefully &lt;em&gt;enough&lt;/em&gt; unless you model &lt;em&gt;everything&lt;/em&gt; as an optional field, and then you’re back to checking for &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; everywhere, and &lt;em&gt;why isn’t this already a solved problem?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And it turns out, it &lt;em&gt;is&lt;/em&gt; a solved problem – or at least, it is in Elm, &lt;a href="https://guide.elm-lang.org/interop/json.html"&gt;via&lt;/a&gt; those &lt;a href="https://guide.elm-lang.org/interop/json.html"&gt;&lt;abbr&gt;JSON&lt;/abbr&gt; Decoders&lt;/a&gt;. I don’t get to write Elm at work right now (or any time in the foreseeable future) – but if I can’t write Elm, I can at least try to steal a bunch of its great ideas and push them back into my TypeScript.&lt;/p&gt;
&lt;p&gt;So… what exactly are &lt;abbr&gt;JSON&lt;/abbr&gt; Decoders and how would they have solved this problem? (And why, if you’re already familiar a little with Elm and possibly feeling frustrated with decoding, are they actually worth it?)&lt;/p&gt;
&lt;p&gt;A &lt;abbr&gt;JSON&lt;/abbr&gt; Decoder is just a way of guaranteeing that once you’re inside the boundary of your program, you &lt;em&gt;always&lt;/em&gt; have a valid instance of the data type you’ve decoded it into, &lt;em&gt;or&lt;/em&gt; an error which tells you why you &lt;em&gt;don’t&lt;/em&gt; have a valid instance of the data. They’re composable, so you can stack them together and take smaller decoders to build bigger ones, so if you have a complex &lt;abbr&gt;JSON&lt;/abbr&gt; structure, you can define repeated substructures in it, or decoders for dissimilar sibling items in it, and use them to put together a grand decoder for your whole final structure. The decoders use the &lt;a href="http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Result"&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; type, and they hand back either &lt;code&gt;Ok&lt;/code&gt; with the decoded value or &lt;code&gt;Err&lt;/code&gt; with the reason for the failure – and if &lt;em&gt;any&lt;/em&gt; piece of a decoded type doesn’t match with what you’ve specified, you’ll end up with an &lt;code&gt;Err&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, initially that might sound like a recipe for disaster – &lt;abbr&gt;JSON&lt;/abbr&gt; payloads can be formed in weird ways all the time! – but in fact it encourages you to think through the various ways your payloads can be formed and to account for them. &lt;em&gt;Sometimes&lt;/em&gt;, if the payload doesn’t have what you expect, that really does mean something is wrong either in your request or in the server-side implementation. In that case, getting an &lt;code&gt;Err&lt;/code&gt; is &lt;em&gt;exactly&lt;/em&gt; what you want. Other times, the server might be perfectly legitimate in sending back a variety of shapes in its response, and your responsibility is to decide how to decode it to make sense in your app. Remember, the problem I had was that I received a payload which didn’t have the data. With Elm’s decoders, I would have had three choices:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I could have treated this as an error, and passed that along to be dealt with in some way.&lt;/li&gt;
&lt;li&gt;I could have normalized it as a 0-value payload.&lt;/li&gt;
&lt;li&gt;I could have treated it &lt;em&gt;explicitly&lt;/em&gt; as a no-op, maintaining whatever previous state I had in the data store, i.e. the implicit behavior of my actual data store.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What I &lt;em&gt;couldn’t&lt;/em&gt; do, though, is do any one of those &lt;em&gt;accidentally&lt;/em&gt;. I could still support incomplete payloads (via option 3), but I’d be explicitly opting into that, and there would be an obvious place where that was the case. This would be particularly helpful in a scenario where I wasn’t also in charge of the &lt;abbr&gt;API&lt;/abbr&gt;: if I couldn’t just go change it so the &lt;abbr&gt;API&lt;/abbr&gt; itself had a more sensible behavior, I could enforce whichever desired behavior on my own end. More than that, with something modeled on the Elm &lt;abbr&gt;JSON&lt;/abbr&gt; Decoders, I would &lt;em&gt;have&lt;/em&gt; to: there would be no implicit consumption of raw &lt;abbr&gt;JSON&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;The first time I played with the Elm &lt;abbr&gt;JSON&lt;/abbr&gt; Decoder approach, I thought it was a lot of work. I was used to just doing &lt;code&gt;JSON.parse()&lt;/code&gt; in JS or &lt;code&gt;json.loads()&lt;/code&gt; in Python. Now I needed to define a whole series of decode steps explicitly for every field in a response? Good grief! But it grew on me. More than that, I now actively miss it in my apps; I’d have been really happy not to have to spend a morning hunting down this particular bug.&lt;/p&gt;
&lt;p&gt;Sometimes that explicitness can seem like quite a lot of boilerplate, and indeed it is: there’s a reason the Elm &lt;a href="https://github.com/NoRedInk/elm-decode-pipeline"&gt;elm-decode-pipeline&lt;/a&gt; project exists. But even given the &lt;em&gt;initial&lt;/em&gt; nicety of something like F♯ type providers, I think the Elm approach has a slight edge in the long-term for &lt;em&gt;maintainability&lt;/em&gt; specifically. It’s one thing to be able to just get to work right away and have a type definition you know to conform to a given &lt;abbr&gt;API&lt;/abbr&gt; response. It’s something else entirely to be able to &lt;em&gt;know&lt;/em&gt; that you’ve accounted for all the varieties of responses you might get (and without throwing an exception for failed &lt;abbr&gt;JSON&lt;/abbr&gt; decoding at that!).&lt;/p&gt;
&lt;p&gt;Given all of this, I’ve started mentally teasing out what such a &lt;abbr&gt;JSON&lt;/abbr&gt; decoding library for Ember.js might look like in TypeScript. It’s a long way off, but it’s the kind of thing that I &lt;em&gt;really&lt;/em&gt; want to experiment with, and that I think would make for a big win for the maintainability of our apps. Keep your eyes peeled, because I suspect this is another thing JS will steal from Elm, and that’s &lt;em&gt;great&lt;/em&gt; in my book.&lt;/p&gt;
</content><category term="JavaScript"></category><category term="Elm"></category><category term="TypeScript"></category><category term="web development"></category><category term="software development"></category></entry><entry><title>2017 in Review: My Goals</title><link href="http://www.chriskrycho.com/2017/2017-in-review-my-goals.html" rel="alternate"></link><published>2017-12-24T17:50:00-05:00</published><updated>2017-12-24T17:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-24:/2017/2017-in-review-my-goals.html</id><summary type="html">Thinking about how this year went and what I accomplished, and how I would like the next year to go and what I would like to accomplish then, has become an important part of my life. There is much value in taking stock and making plans—as long as you hold those plans loosely.
</summary><content type="html">&lt;p&gt;As has been my habit for a few years now, I’m taking some time to reflect on the year as it comes to a close. Thinking about how this year went and what I accomplished, and how I would like the next year to go and what I would like to accomplish &lt;em&gt;then&lt;/em&gt;, has become an important part of my life. There is value in taking stock and making plans—as long as you hold those plans loosely. And this particular set of reflections majors on holding plans loosely.&lt;/p&gt;
&lt;p&gt;The best place to start seems to be with a review of my goals for 2017, set out &lt;a href="http://www.chriskrycho.com/2017/2016-review-6.html" title="2016 in Review, Part 6: Plans for 2017"&gt;here&lt;/a&gt;. In a post later this week, I’ll write up some thoughts on what I hope to accomplish in 2018—though, as you’ll see, there are some hints of that here.&lt;/p&gt;
&lt;p&gt;One other note: there are many things going on in our lives that don’t end up in these reflections—because these reflections (as I conceive them at present, at least) are about the kind of public-facing things I did this year. A blog is not a journal, even if there are some analogies between the two.&lt;/p&gt;
&lt;section id="major-goals" class="level2"&gt;
&lt;h2&gt;Major goals&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Graduate seminary.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Done!&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start="2" type="1"&gt;
&lt;li&gt;Spend good time with my family.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;This isn’t really a thing you can ever call &lt;em&gt;done&lt;/em&gt; in a real sense; there’s always more to do. But we did it well this year, and better than any previous year. I’m looking forward to building on the foundation we laid this year as we move into 2018.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start="3" type="1"&gt;
&lt;li&gt;Love our church well.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have much the same to say here as I do about family time. I’ll add that we did move across country and join a new church (and a new denomination!), and I expect to write at much greater length about the convictions which drove the &lt;em&gt;way&lt;/em&gt; we landed on our new congregation after moving across the country.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start="4" type="1"&gt;
&lt;li&gt;Work hard for Olo.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I shipped a &lt;em&gt;massive&lt;/em&gt; amount of code this year, including making some pretty significant architectural contributions for the main app I work on—laying the foundation for it to transition from being a &lt;em&gt;mobile&lt;/em&gt; web application to being a &lt;em&gt;responsive, progressive&lt;/em&gt; web application in 2018. I also built &lt;a href="https://true-myth.js.org"&gt;True Myth&lt;/a&gt; and made some pretty substantial progress on &lt;a href="http://www.chriskrycho.com/typing-your-ember/" title="Typing Your Ember"&gt;TypeScript in Ember.js&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start="5" type="1"&gt;
&lt;li&gt;Save money for a house.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Done!&lt;/strong&gt; And, to our surprise relative to the beginning of the year, we’re moving in less than a month from now!&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start="6" type="1"&gt;
&lt;li&gt;Replace &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; with &lt;a href="https://github.com/chriskrycho/lightning-rs"&gt;Lightning&lt;/a&gt; for this site.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not done.&lt;/strong&gt; I basically ended up putting Lightning on hold entirely this year. New Rustacean and all of the things we had to do around moving just left me with insufficient time to make any sustained progress on it.&lt;/p&gt;
&lt;section id="minor-goals" class="level3"&gt;
&lt;h3&gt;Minor goals&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;publish two episodes of New Rustacean every month (of various formats—not all the full-length teaching-a-subject type)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;On average… done.&lt;/strong&gt; But only on average. I put out a &lt;em&gt;lot&lt;/em&gt; more episodes in November and December than any other month, courtesy of the &lt;a href="http://www.newrustacean.com/show_notes/interview/rbr_2017/index.html"&gt;micro-interviews&lt;/a&gt; I conducted at &lt;a href="https://rust-belt-rust.com"&gt;Rust Belt Rust&lt;/a&gt;. The rest of the year, I did publish quite a few episodes, but not nearly as many as I would have liked – more like an average of 1–1.5 each month.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;publish 16–20 episodes of Winning Slowly&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Very much &lt;em&gt;not&lt;/em&gt; done.&lt;/strong&gt; Winning Slowly did not go &lt;em&gt;at all&lt;/em&gt; the way we thought this year. Our ambitions were… ambitious, given we were both planning to finish graduate degrees and knew that &lt;em&gt;at least&lt;/em&gt; Stephen and possibly &lt;em&gt;both of us&lt;/em&gt; would be moving across the country. Total episodes published this year: 4.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;complete a full-length sprint triathlon&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;run a &lt;a href="http://cityofoaksmarathon.com" title="City of Oaks Marathon"&gt;marathon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not done.&lt;/strong&gt; The spring ended up busier and, most importantly, more unpredictable schedule-wise than I hoped, and than allowed for sufficiently regular exercise as to be ready for a triathlon in the summer. And our move across the country both eliminated the final six weeks of training I would have needed for the marathon, and also left us 1,800 miles away from the marathon.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;be able to do 15 consecutive pull-ups and 100 consecutive push-ups&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not sure!&lt;/strong&gt; I haven’t done a max set in a few months. I &lt;em&gt;have&lt;/em&gt; been doing a bunch of push-ups and pull-ups since arriving in Colorado, so… maybe. I’ll edit this in a couple days after I do a max set!&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lose ten pounds and get back down to my target weight&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Sadly, not done.&lt;/strong&gt; I have not yet gotten a good handle on what &lt;em&gt;specific&lt;/em&gt; dietary changes I’ll need to make to accomplish this goal, but the ones I tried this year didn’t do the trick. I’ll try something new in 2018.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;document all the undocumented features in Rust, and get the Rust reference all the way up to date (&lt;a href="https://github.com/rust-lang/rust/issues/38643"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not done:&lt;/strong&gt; I made a fair bit of progress at the beginning of the year, but this is a &lt;em&gt;mammoth&lt;/em&gt; task. That said, it’s on my radar to try to help drive it forward (hopefully with community involvement) in 2018—it would be great for a complete and accurate reference to be part of the Rust 2019 epoch.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;finish a couple side projects (and bring in the associated money!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Done.&lt;/strong&gt; In particular, I fixed the last couple bugs and tightened things down in the implementation of &lt;a href="https://holybible.com"&gt;HolyBible.com&lt;/a&gt;. While there’s a lot—oh is there a lot!—I would do differently now (3 years after I finished the base implementation of the app), I’m really delighted that in the last six months I’ve had exactly zero bug reports.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;teach in our small group at least a half dozen times&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not done, &lt;em&gt;but&lt;/em&gt;…&lt;/strong&gt; this was an intentional choice as we started into the year, because there were a couple other guys who it was more helpful to have in that role for their &lt;em&gt;own&lt;/em&gt; training. I’ve taught a lot over the years, and both of those guys are going to be actively in church-planting roles in the next year or so.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;write at least one long essay for Mere Orthodoxy&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Done.&lt;/strong&gt; I published &lt;a href="https://mereorthodoxy.com/rhythms-family-worship/" title="The Rhythms of Family Worship"&gt;one essay on our family worship&lt;/a&gt; and another (just last week), &lt;a href="https://mereorthodoxy.com/faithful-extension-question-human-origins/" title="Faithful Extension and the Question of Human Origins"&gt;a book review essay&lt;/a&gt; on William T. Cavanaugh and James K. A. Smith’s _Evolution and the Fall_.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;publish the scripts and transcripts of New Rustacean as an ebook&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not done.&lt;/strong&gt; I &lt;em&gt;do&lt;/em&gt; expect to tackle this in 2018, but it just ended up not being a high priority in 2017.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;publish hard copies of the archives of my blog, in a way that mirrors the style of the site at the time it was written&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not done.&lt;/strong&gt; Same as with the New Rustacean ebook.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fully archive the Blogger and WordPress versions of this blog as static HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Started, but incomplete.&lt;/strong&gt; I pulled those archives down for the Blogger site, but have yet to do some systematic cleanup on the &lt;abbr&gt;HTML&lt;/abbr&gt;. (This &lt;em&gt;might&lt;/em&gt; actually happen by the end of the year, depending on what all I do on my week off, but as of the time I’m drafting this, it’s not done.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;move all the sites I host (mine and others) out of shared hosting and into a server I manage (probably Digital Ocean or Linode)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not done.&lt;/strong&gt; I did get a Linode server configured, on which I’m running our family blog (&lt;a href="https://krycho.com"&gt;krycho.com&lt;/a&gt;), and which I should pretty easily be able to use for other non-static sites going forward. Though, as I’ve thought about it over the last year and change: it’s likely I’ll split it up into a small handful, with one consisting of a kind of “shared hosting” for the various friends’ WordPress blogs I host; and one consisting of my own and my family’s sites.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="in-summary" class="level3"&gt;
&lt;h3&gt;In summary&lt;/h3&gt;
&lt;p&gt;This year didn’t really go as we thought it would. A lot of that came down to finding a house plan we loved and could build on a lot that we equally loved—it shifted financial and temporal priorities alike. Add in some pretty serious family health issues in my extended family, and, well, no surprise some of my plans and goals didn’t pan out. That’s how it goes! The point of making these kinds of goals, for me, isn’t so much that I accomplish everything on my list as it is taking time to orient myself and to choose what I will and won’t &lt;em&gt;focus&lt;/em&gt; on in the year ahead. And in 2017, I did focus on many of the things on this list. Some of them ended up more important than expected; others less. Interestingly and importantly, though, almost nothing I really spent my time focusing on &lt;em&gt;wasn’t&lt;/em&gt; on the list. And that’s why I keep doing this year after year!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;750m swim, 20km (12mi) ride, 5km (3.1mi) run&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="productivity"></category><category term="writing"></category><category term="family"></category><category term="fitness"></category><category term="podcasting"></category><category term="software development"></category><category term="2017-review"></category></entry><entry><title>Momentum</title><link href="http://www.chriskrycho.com/2017/momentum.html" rel="alternate"></link><published>2017-12-22T19:35:00-05:00</published><updated>2017-12-22T19:35:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-22:/2017/momentum.html</id><summary type="html">“Productivity” often looks like this: just a bit at a time, day after day; and doing a little even when you don’t really feel like it, just so you keep some forward motion going.
</summary><content type="html">&lt;p&gt;I’m now about two weeks into my new routine of writing every morning. In that time, I’ve managed to (finally!) publish a &lt;a href="https://mereorthodoxy.com/faithful-extension-question-human-origins/" title="Faithful Extension and the Question of Human Origins: Cavanaugh and Smith’s Evolution and the Fall"&gt;book review&lt;/a&gt; I had been planning to tackle (and had abortively started more than once) for months; I have written almost as many words as I have the whole rest of the year; and I published &lt;a href="http://www.chriskrycho.com/2017/chrome-is-not-the-standard.html" title="Chrome is not the Standard"&gt;one post&lt;/a&gt; that apparently &lt;a href="https://news.ycombinator.com/item?id=15980653"&gt;struck a nerve&lt;/a&gt;. One thing that has become obvious is that &lt;a href="http://www.chriskrycho.com/2017/knowing-your-rhythms.html"&gt;my initial surmise&lt;/a&gt; was correct: the early morning &lt;em&gt;is&lt;/em&gt; the best time for me to be writing, and I get a lot of mileage out of taking anywhere from 30 to 90 minutes to get at it.&lt;/p&gt;
&lt;p&gt;This little post is a reflection not just on that upside, though, but on rolling with the punches. It’s now 7:30pm, and I didn’t write at &lt;em&gt;all&lt;/em&gt; this morning… because I didn’t sleep much last night. My little sister and her husband are in town with their 7-year-old and 3-week-old… and the 3-week-old, one room over from us, slept about the way 3-week-old babies tend to. Add in a 3:45am call from my wife and kids who had to &lt;a href="http://www.kwtx.com/content/news/Fire-forces-evacuation-at-Dallas-Love-Field-465891633.html"&gt;evacuate the airport for a fire alarm&lt;/a&gt; where they were trying to fly home from visiting family, and the need then to drive up to the airport to get them, and my normal writing block simply didn’t exist. So here I am some 13 hours later, trying to just write a &lt;em&gt;little&lt;/em&gt; bit today anyway, because even after just these couple weeks I have come to value getting out some words every day. After I finish this little post, I’ll see if I can knock out another section of the New Rustacean episode I’m drafting for early January, too.&lt;/p&gt;
&lt;p&gt;“Productivity” often looks like this: just a bit at a time, day after day; and doing a little even when you don’t really feel like it, just so you keep some forward motion going. Here’s to a lot of keeping-up-that-momentum in the year ahead.&lt;/p&gt;
</content><category term="productivity"></category><category term="writing"></category></entry><entry><title>Chrome is Not the Standard</title><link href="http://www.chriskrycho.com/2017/chrome-is-not-the-standard.html" rel="alternate"></link><published>2017-12-21T07:10:00-05:00</published><updated>2017-12-21T07:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-21:/2017/chrome-is-not-the-standard.html</id><summary type="html">No single browser vendor represents ”the future of the web.” Each ships in line with its own business priorities. And that's a good thing.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;This got an enormous amount of play around the web, and as a result people have ended up translating it to other languages. If you have a translation, I’ll be happy to link it here!&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://softdroid.net/chrome-ne-yavlyaetsya-standartom"&gt;Russian&lt;/a&gt;, translated by Vlad Brown (&lt;a href="http://softdroid.net" class="uri"&gt;http://softdroid.net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://getdrawings.com/uz-chrome-standart-emas"&gt;Uzbek&lt;/a&gt;, translated by Alisher&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;section id="the-post" class="level2"&gt;
&lt;h2&gt;The post&lt;/h2&gt;
&lt;p&gt;Over the past few years, I’ve increasingly seen articles with headlines that run something like, “New Feature Coming To the Web”—followed by content which described how Chrome had implemented an experimental new feature. “You’ll be able to use this soon!” has been the promise.&lt;/p&gt;
&lt;p&gt;The reality is a bit more complicated. Sometimes, ideas the Chrome team pioneers make their way out to the rest of the browsers and become tools we can all use. Sometimes… they get shelved because none of the other browsers decide to implement them.&lt;/p&gt;
&lt;p&gt;Many times, when this latter tack happens, developers grouse about the other browser makers who are “holding the web back.” But there is a fundamental problem in this way of looking at things: &lt;em&gt;Chrome isn’t the standard.&lt;/em&gt; The fact that Chrome proposes something, and even the fact that a bunch of developers like it, does not a standard make. Nor does it impose an obligation to other browsers to prioritize it, or even to ship it.&lt;/p&gt;
&lt;p&gt;As web developers, it can be easy to become focused on interesting new features for the platform we work on. That’s no different than the excitement Android and iOS developers have when Google and Apple release new SDKs for developing on their platforms. It’s healthy to be excited about possible new features, things that might make our jobs easier or enable us to do things we couldn’t do before.&lt;/p&gt;
&lt;p&gt;But there &lt;em&gt;is&lt;/em&gt; an important difference between those platforms and the web. Those platforms are the domain of a single vendor. The web is a shared platform. This is its unique benefit, and its unique cost. It uniquely allows us to write software that can actually run, and run reasonably well, &lt;em&gt;everywhere&lt;/em&gt;. But it also means that a minimum of four companies—the major browser vendors—get a say in whether a feature is a &lt;em&gt;feature&lt;/em&gt; or whether it’s just an interesting idea one of the teams had.&lt;/p&gt;
&lt;p&gt;Let’s get concrete about an example that’s been extremely high-profile for the last couple years—and, to be clear, one I think is a &lt;em&gt;good&lt;/em&gt; idea from Google: &lt;a href="https://developers.google.com/web/progressive-web-apps/" title="Google’s PWA page"&gt;progressive web apps&lt;/a&gt; (hereafter &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;). They have been pitched by Google and other supporters as an unambiguous win for the user experience of complex web applications. And, as a web developer myself, I’m actually inclined to agree with that assessment! However, I have fairly regularly seen people getting angry at especially Apple for not prioritizing support for &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;s in (especially iOS) Safari—Apple is, in this view, “holding back the future of the web.”&lt;/p&gt;
&lt;p&gt;Well… no. For any given idea Google pitches, Apple may or may not be sold on Google’s vision of the web, or they may even think it’s a good idea but not &lt;em&gt;more&lt;/em&gt; important than other things they’re working on.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And this is what it &lt;em&gt;means&lt;/em&gt; to be part of the web platform. No single company gets to dominate the others in terms of setting the agenda for the web. Not Firefox, with its development and advocacy of &lt;a href="http://webassembly.org/"&gt;WebAssembly&lt;/a&gt;, dear to my heart though that is. Not Microsoft and the IE/Edge team, with its proposal of the CSS grid spec in &lt;em&gt;2011&lt;/em&gt;, sad though I am that it languished for as long as it did. Not Apple, with its pitch for &lt;a href="https://webkit.org/blog/7846/concurrent-javascript-it-can-work/" title="“Concurrent JavaScript: it can work!”"&gt;concurrent JavaScript&lt;/a&gt;. And not—however good its developer relations team is—Chrome, with any of the many ideas it’s constantly trying out, including &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;s.&lt;/p&gt;
&lt;p&gt;It’s also worth recognizing how these decisions aren’t, in almost any case, unalloyed pushes for “the future of the web.” They reflect &lt;em&gt;business&lt;/em&gt; priorities, just like any other technical prioritization. Google cares about &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt;s because Google makes its money from the web and wants people to spend more of their time on the web. Apple cares about things like the battery life implications and the sheer speed of its iOS JavaScript engine because it makes money from hardware and it wants people to be happy with their iPhones and iPads.&lt;/p&gt;
&lt;p&gt;Does any one of those browser’s commitments map cleanly to &lt;em&gt;all&lt;/em&gt; users’ (or even all &lt;em&gt;developers’&lt;/em&gt;) priorities? Of course not! This is and always has been the beauty of a competitive browser landscape. I’m a web developer who wants &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt; support everywhere—so I want Apple supporting it. But I’m also a smartphone user who wants those applications to &lt;em&gt;scream&lt;/em&gt; on my device—not to crawl, like they do on Chrome on Android, which is still years behind iOS in performance. As an end user, not just a developer, it matters to me that running Safari on my laptop instead of Chrome can dramatically increase my battery life.&lt;/p&gt;
&lt;p&gt;These are tradeoffs, plain and simple. Chrome ships new features fast, but they’re not always stable and they often have performance costs. Safari ships new features on a much slower cadence, but they’re usually solid and always perform incredibly well. These are both engineering and business tradeoffs, and the companies behind the browsers are making because of their own business and engineering priorities. Don’t valorize any of the browser vendors, and don’t act as if &lt;em&gt;any&lt;/em&gt; of them is the standard, or a reliable predictor of the future. Instead, value what each brings to the table, but also value the interplay &lt;em&gt;at&lt;/em&gt; the table, and the ways each of these vendors pushes the others and challenges the others’ assumptions of what is most important. That’s what makes the web so great, even when it makes things move more slowly. Sometimes—often, even!—moving more slowly not in the &lt;em&gt;experimental&lt;/em&gt; phase but in the &lt;em&gt;finalizing&lt;/em&gt; phase makes for a much better outcome overall.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;In this case, it seems to have been the latter, since yesterday’s release of Safari Tech Preview enabled Service Workers, one of the major pieces of the &lt;abbr title='Progressive Web App'&gt;PWA&lt;/abbr&gt; push.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="web development"></category></entry><entry><title>Vexing Ironies</title><link href="http://www.chriskrycho.com/2017/vexing-ironies.html" rel="alternate"></link><published>2017-12-17T20:50:00-05:00</published><updated>2017-12-17T20:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-17:/2017/vexing-ironies.html</id><summary type="html">One of the most vexing problems in thinking and responding well to problems of ethics in information technology specifically is the way that so much of thinking and responding about information technology takes place within the context of, well, information technology. Two examples of that challenge caught my attention this evening, ironies I noticed in reading the very same article.
</summary><content type="html">&lt;p&gt;One of the most vexing problems in thinking and responding well to problems of ethics in &lt;em&gt;information technology&lt;/em&gt; specifically is the way that so much of thinking and responding about information technology takes place within the context of, well, information technology. Two examples of that challenge caught my attention this evening, ironies I noticed in reading the very same article.&lt;/p&gt;
&lt;p&gt;In &lt;a href="http://www.roughtype.com/?p=8248"&gt;“How smartphones hijack our minds”&lt;/a&gt;, Nick Carr explores much of the evidence for ways that use of smartphones can have seriously negative effects on our thinking in ways that are both pernicious (because we usually do not notice them consciously) and pervasive (in that they happen simply by dint of the &lt;em&gt;presence&lt;/em&gt; of the devices). It’s a good article, and I commend it you as a helpful summary of a lot of the most current research on attention, smartphones, and the like; you should read it and think about how you use your phone.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But the first irony was that I read that article… on my smartphone. As indeed I read &lt;em&gt;many&lt;/em&gt; of Nick Carr’s articles. There’s something more than a little odd about considering the use of a smartphone by way of reading an article on a smartphone. But in a very real sense, there’s almost no way I &lt;em&gt;could&lt;/em&gt; have read Carr’s article otherwise.&lt;/p&gt;
&lt;p&gt;And accordingly, the second irony is that, although Carr, who has staked out a position as a popular-level writer tackling issues of how modern information technology affects us, &lt;a href="https://t.alibris.com/The-Shallows-What-the-Internet-Is-Doing-to-Our-Brains-Nicholas-Carr/book/11882057" title="The Shallows"&gt;certainly &lt;em&gt;is&lt;/em&gt; published in hard copy&lt;/a&gt;, everything of his I’ve ever read has been in digital form. Indeed, although his books are important in their own ways, I think it’s fair to say that &lt;em&gt;most&lt;/em&gt; people’s interaction with his ideas, including his critiques of the ways we use and indeed rely on the internet, have all happened via and only because of the internet.&lt;/p&gt;
&lt;p&gt;I’m not entirely sure what to make of these observations. I don’t fault Carr for publishing a blog, exactly; and though I am increasingly chastened about my own at-times-unwise use of a smartphone, I don’t fault myself for having an RSS reader there. (Better than that a Twitter app, to be sure!) But there is something at a minimum &lt;em&gt;odd&lt;/em&gt; and perhaps even something &lt;em&gt;off&lt;/em&gt; about the ways that we tend to use the very tools we are critiquing as the medium for advancing our critiques. We implicate ourselves.&lt;/p&gt;
&lt;p&gt;But what is the alternative? On the one hand Carr’s message—which is important!—has likely been heard and even internalized by a far broader audience because he has transmitted it digitally than it would have been had he conscientiously limited it to books (and perhaps print media articles). The efficacy of the medium for distribution is the internet’s greatest strength. Likewise, I would never have run into Carr’s writing in the first place apart from articles in my RSS feed which linked it; and I do a great deal of my RSS feed reading on my iPhone and iPad, both of which are much better &lt;em&gt;reading&lt;/em&gt; environments than a laptop or a desktop computer. Indeed, much of what I find most helpful in my reading on technology and ethics I find my way to via articles in my RSS feed, and I often items for reading later by simply tapping a an interesting-looking link in an article I’m reading in that RSS feed.&lt;/p&gt;
&lt;p&gt;What do we make of this tension, these ironies? Especially when our concerns begin to rise to the level not merely of prudential judgments (though that level alone is perhaps sufficient reason to do more than we let ourselves) but deep ethical worries—do we abandon the smartphone altogether, cease blogging for fear of how it only contributes to the Google-ified and Facebook-ified age we live in?&lt;/p&gt;
&lt;p&gt;I don’t know.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;One of my concerns in my &lt;a href="http://www.chriskrycho.com/2017/why-do-i-need-a-research-tool.html"&gt;ongoing project&lt;/a&gt; is to prompt people around me—friends and family, but perhaps also blog readers!—to consider how our use of technology &lt;em&gt;forms&lt;/em&gt; us. More on that in a future post.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="ethics"></category></entry><entry><title>Star Wars, The Internet, and Me</title><link href="http://www.chriskrycho.com/2017/star-wars-the-internet-and-me.html" rel="alternate"></link><published>2017-12-14T07:05:00-05:00</published><updated>2017-12-14T07:05:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-14:/2017/star-wars-the-internet-and-me.html</id><summary type="html">I learned self-discipline in no small part by taking a break from Star Wars books. I grew up in the prequel era. I spent a decade learning how to be a good citizen of the internet via Star Wars fan forums. If you spoil &lt;cite&gt;The Last Jedi&lt;/cite&gt;, I will be angry at you forever.
</summary><content type="html">&lt;p&gt;A friend and I were talking a few days about an interesting quirk we both share: spoilers are one thing; spoilers for &lt;em&gt;Star Wars&lt;/em&gt; are something else entirely—something &lt;em&gt;profoundly wrong&lt;/em&gt;. On the one hand, of course, this is silly: spoilers are spoilers; the sentiment is a reflection of our deeper emotional attachment to the Star Wars universe. But it got me thinking.&lt;/p&gt;
&lt;p&gt;My own journey with Star Wars has been long and winding. When I was a kid, I &lt;em&gt;loved&lt;/em&gt; the movies and books—beyond a reasonable enjoyment. I obsessed. For a time it filled all my spare hours.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; (And I was homeschooled and smart, so that was a lot of hours.) It eventually became so bad, when I was in sixth grade, that my parents counseled me that I needed to do &lt;em&gt;something&lt;/em&gt; to change, because it was consuming way too much of my time. I took six months off, and came back able to enjoy the universe—movies, books (and more books!), comics, etc.—without it dominating my mental life as it had before that.&lt;/p&gt;
&lt;p&gt;I kept reading books and comics through high school and college. Somewhere in late middle school I found fan forums for the LucasArts video games (&lt;a href="https://web.archive.org/web/20020523141043/http://www.lucasforums.com:80/" title="Internet Archive link"&gt;“LucasForums”, now defunct&lt;/a&gt;) and got my first taste of online interaction—I “took my first step into a larger world,” you might say—discussing the details of the Expanded Universe in one board, and discussing and arguing ethics, religion, and philosophy in another. (Yes, on a Star Wars video game forum. You can’t make people &lt;em&gt;not&lt;/em&gt; talk about those things; the best you can do is keep them segregated from the nominal topic of discussion in a forum. And people want to talk about those subjects with friends, people they have other common interests with.)&lt;/p&gt;
&lt;p&gt;Midway through high school—during prime Star Wars fandom time in the late prequel era—I found my way to &lt;a href="http://boards.theforce.net"&gt;boards.theforce.net (“The Jedi Council Forums”)&lt;/a&gt;, and if the LucasForums had been my introduction to the online world, boards.theforce.net is where I “grew up” online in many ways. Over much of the next decade, I was an active participant in all sorts of things on those forums—from fan fiction-writing and contests, to extended debates on the merits of certain ongoing storylines in the books that made up the Expanded Universe, to the kinds of little controversies that embroil fan communities everywhere over this author’s choices and that author’s body of work and so on. Eventually, late in college, I spent over a year as one of the moderators of the Expanded Universe (strictly speaking, the &lt;em&gt;non-video-games&lt;/em&gt; part) forum there.&lt;/p&gt;
&lt;p&gt;And then I got married, and I told Jaimie that for our sake I was done with moderating at the end of my senior year in college. Moderating an internet forum &lt;em&gt;well&lt;/em&gt; is an enormous amount of work. It’s a kind of community-building and it entails all the kinds of difficult work that entails. The fact that it’s online makes it more and not less difficult, in many ways. In the year I was there, we dealt with the gamut: ordinary forum things like overly aggressive arguers and trolls, and less ordinary things like helping a user who seemed to deal with &lt;a href="https://en.m.wikipedia.org/wiki/Borderline_personality_disorder"&gt;borderline personality disorder&lt;/a&gt; manage her behavior and be a productive member of the community. I learned an enormous amount there, and much of what I do in online communities &lt;em&gt;today&lt;/em&gt; remains deeply influenced by the lessons I learned then.&lt;/p&gt;
&lt;p&gt;It’s not really a surprise, then, that I have a visceral reaction to Star Wars spoilers in a way that I don’t for, say, the next Marvel Cinematic Universe movie. If I get totally spoiled about how &lt;em&gt;Avengers: Infinity War&lt;/em&gt; plays out before I go see it, well… okay. It’ll be mildly annoying. Something about the ways that I invested in Star Wars and the ways my encounters with it at a broader cultural level were so important to my formation make it matter a lot more to me.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There’s an important question, of course, whether that kind of formation was &lt;em&gt;good&lt;/em&gt; for me. Parts of it quite obviously wasn’t. My parents were right to encourage me to take a real and serious break when I was 12. But more than that, they were wise to take the tack of challenging me to think carefully about how to deal with it, rather than simply mandating a particular response themselves. Had they mandated it—which would have been the easier course, I’m sure!—it likely would have backfired and left me resentful of them and unmoved on the actual issue, for one. For another, learning to discipline myself and recognize and head off unhealthy obsessions was itself an important part of my spiritual, intellectual, and emotional formation. Dealing with a relatively benign obsession, and learning to deal with it in a helpful and thoughtful way, was &lt;em&gt;very&lt;/em&gt; good for me.&lt;/p&gt;
&lt;p&gt;Likewise, my participation in those forums had its risks, even if they were much lower than some of the moral panics of the time suggested. (Predators, it turned out, may have been lurking in chat rooms &lt;em&gt;somewhere&lt;/em&gt;, but many corners of the internet were pretty safe.) The bigger risks to me were risks of time-wasting and getting sucked into pointless or meaningless arguments. But because the forums I ended up in were well-run, they ended up instead being a training ground for how to conduct discourse online in a civil way—to disagree, even deeply (and even, sometimes, about silly things) without resorting to insults and attacks, to argue the merits instead of the quality of the person making an argument. It also afforded me opportunities to make mistakes talking about things that &lt;em&gt;didn’t&lt;/em&gt; matter, rather than primarily about things that did. If I annoyed someone with my view of Jacen Solo in The New Jedi Order, well… okay, better that than mishandling the gospel or misrepresenting Scripture’s teaching on something. Along those same lines, I had opportunities to lead online in a safe environment where most of what I was dealing wasn’t that serious, and I had lots of help including from many people much older than me to deal with the more serious things.&lt;/p&gt;
&lt;p&gt;Last but not least, because I knew deeply and well the shape of what was, in many ways, internet discourse at its best, I also was well-primed to recognize two things.&lt;/p&gt;
&lt;p&gt;The first is when things &lt;em&gt;don’t&lt;/em&gt; look like that. I spent a year or so in college on conservative political news sites and comment threads, and while the mid-2000s were the heyday of &lt;em&gt;blogs&lt;/em&gt; and &lt;em&gt;commenting&lt;/em&gt;—in some really wonderful ways that I miss—even then much of what was floating around in political forums was the kind of toxic rhetoric that has become mainstream since.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; I jumped out of those communities because I was able to recognize, precisely because of my experience with The Jedi Council Forums, that this was &lt;em&gt;not&lt;/em&gt; a model of good discussion on the internet.&lt;/p&gt;
&lt;p&gt;The second is the way internet discourse and friendship are simultaneously delightful and very limited. There were people I very much enjoyed getting to know over the years, and a few I considered friends. But the limitations of those relationships were obvious (much, I imagine, as the limitations of friendships conducted solely through letter-writing in ages past was). Text is a delightful medium, and it affords certain things that face-to-face interaction doesn’t, especially time for precision and accuracy in communication. But it takes away as well as gives: your wording &lt;em&gt;must&lt;/em&gt; be so precise, because otherwise it far more easily risks misunderstanding. Language must often be more conciliatory in text than it would in person to achieve the same effect, for the simple reason that there is no such thing as tone. And ten thousand emojis are not worth one real, sympathetic smile across a room for expressing, “I disagree with you, but I mean no harm in my disagreement.” The internet affords many opportunities to connect with people we would otherwise never meet, but it does not and cannot &lt;em&gt;substitute&lt;/em&gt; for the kinds of friendships we have in person.&lt;/p&gt;
&lt;p&gt;This latter insight was in many ways the first, foundational layer for much of my thinking on the goods and ills offered by the internet since—thinking that has come out especially in &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;, and increasingly also is finding a home in &lt;a href="http://www.chriskrycho.com/2017/why-do-i-need-a-research-tool.html"&gt;the reading and research projects&lt;/a&gt; I mentioned here earlier in the week. It also continues to inform the way I think about many other relationships I have &lt;em&gt;now&lt;/em&gt; online. Though I am part of a number of several really delightful online communities, I never allow those relationships to become my substitutes for doing the work of building friendships with people face to face. And I also take the opportunity, whenever I can, to add face-to-face components to those relationships! One of my closest friends now is someone I met via a group of Christian developers I’m part of online—but he’s also someone I’ve spent many hours with in person now, and it was those hours in person that dramatically changed the character of our friendship. Similarly, another of my best friends is someone I get to talk to mostly only via chat now—but we had years of face-to-face relationship as foundation to stand on.&lt;/p&gt;
&lt;p&gt;So the net of it all is good, I think. I’m grateful for the ways Star Wars has been a part, and an important part, of my life. (So don’t spoiler &lt;em&gt;The Last Jedi&lt;/em&gt; for me!)&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Or at least, those in which I wasn’t re-reading &lt;em&gt;The Lord of the Rings&lt;/em&gt; yet again. I was a nerdy kid.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;If I had grown up having a parallel experience with Marvel comics instead of Star Wars, the experience might well be flipped—though since the MCU is largely adaptations of, if often &lt;em&gt;very free&lt;/em&gt; adaptations of, existing comics work, it would likely play out in rather different ways.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;My experience was with “conservative” sites, but you could see many of the same phenomena on the left then as well.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="Star Wars"></category><category term="the internet"></category><category term="friendship"></category></entry><entry><title>A Little Status Update</title><link href="http://www.chriskrycho.com/2017/a-little-status-update.html" rel="alternate"></link><published>2017-12-13T18:45:00-05:00</published><updated>2017-12-13T18:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-13:/2017/a-little-status-update.html</id><summary type="html">&lt;p&gt;Just a little status update: I’m a few days into &lt;a href="http://www.chriskrycho.com/2017/knowing-your-rhythms.html"&gt;my new routine&lt;/a&gt; of blocking out the time before 7am for writing projects—and so far it’s &lt;em&gt;amazing&lt;/em&gt;. I’ve been able to make progress on a writing project&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; that has stymied me for months and months …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a little status update: I’m a few days into &lt;a href="http://www.chriskrycho.com/2017/knowing-your-rhythms.html"&gt;my new routine&lt;/a&gt; of blocking out the time before 7am for writing projects—and so far it’s &lt;em&gt;amazing&lt;/em&gt;. I’ve been able to make progress on a writing project&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; that has stymied me for months and months. Yesterday and today alike I wrote 600–700 words in roughly an hour (and words I’m relatively happy with, at that). All my previous efforts at this had come to about 600 words in total, largely in outline form, and when I’d taken a stab at it other than that I’d eventually given up and thrown away anything I’d written.&lt;/p&gt;
&lt;p&gt;This is a pleasant change.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.chriskrycho.com/2017/knowing-your-rhythms.html"&gt;Knowing your rhythms&lt;/a&gt; is useful, it turns out; even more useful is taking advantage of them to actually get things done!&lt;/p&gt;
&lt;p&gt;The other thing I’m noticing (as I write at about 6:45pm, in one of those “just okay” spans I mentioned in that post) is that my mind is ticking along again in what I’ve historically called “writing mode.” The idea of sitting down and knocking out a few hundred words of (admittedly self-indulgent) blogging has not seemed relaxing or fun in quite some time. But that’s changing a bit as I stretch those muscles again. I’ve drawn the analogy often enough in the past, but I’ll repeat it once more: writing is very much like exercising. The act of simply &lt;em&gt;doing&lt;/em&gt; it day over day helps reopen pathways in the mind (like running down paths in the woods, perhaps?) and every day you do it makes the next day easier than it otherwise would have been.&lt;/p&gt;
&lt;p&gt;So now: off to work on a New Rustacean episode script, because the juices are flowing.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;a review of William Cavanaugh and James K. A. Smith’s &lt;em&gt;Evolution and the Fall&lt;/em&gt;, if you’re curious&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="productivity"></category></entry><entry><title>Knowing Your Rhythms</title><link href="http://www.chriskrycho.com/2017/knowing-your-rhythms.html" rel="alternate"></link><published>2017-12-11T06:50:00-05:00</published><updated>2017-12-11T06:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-11:/2017/knowing-your-rhythms.html</id><summary type="html">&lt;p&gt;For the last few years, it’s been &lt;em&gt;very&lt;/em&gt; apparent to me that I think most clearly and do my best work early in the morning and late at night. Between 6am and 10am, and from roughly 8pm to midnight, I am at my most alert and most mentally capable …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the last few years, it’s been &lt;em&gt;very&lt;/em&gt; apparent to me that I think most clearly and do my best work early in the morning and late at night. Between 6am and 10am, and from roughly 8pm to midnight, I am at my most alert and most mentally capable. By contrast, 10am to 1pm is &lt;em&gt;okay&lt;/em&gt;, and 1pm to 4pm is &lt;em&gt;terrible&lt;/em&gt; and 4pm to 8pm is back to &lt;em&gt;okay&lt;/em&gt;. I can get things done in that span, but it’s very difficult especially to do things like writing.&lt;/p&gt;
&lt;p&gt;I also can’t get by on only 6 hours of sleep, so a lot of my best time isn’t available to me one way or the other. In general that means that if I want to write or otherwise do really creative work, I have limited options. Since, as &lt;a href="http://www.chriskrycho.com/2017/why-do-i-need-a-research-tool.html" title="Why Do I Need a Research Tool?"&gt;I noted yesterday&lt;/a&gt;, I’m aiming to be doing a fair bit of research and writing over the next few years, I need at least &lt;em&gt;some&lt;/em&gt; of that time. That goes for the thinking-and-writing-intensive work of preparing for New Rustacean episodes, too.&lt;/p&gt;
&lt;p&gt;While my job allows me considerable flexibility, I can’t just take &lt;em&gt;all&lt;/em&gt; of the time for side projects, whether those research projects, or working on New Rustacean. Too: my evening concentration ability is much lower than my morning concentration ability, because I’m also the dad of two small children, and between finishing working in the late afternoon and getting them to bed around 7:30–8:00pm, I am much drained mentally. (Kids are awesome, but they can be exhausting!)&lt;/p&gt;
&lt;p&gt;So I’m going to try something: every day starting this week and running through the end of the month (whether I’m working or not), the time before 7am is &lt;em&gt;mine&lt;/em&gt;. After making breakfast for me and my wife, and reading my Bible for some time, I’m going to use that time to work on reading and research, blogging and longer-form writing, New Rustacean prep, and the like. If, by the end of this month, I evaluate that it’s going well (I rather suspect it will be), I’ll formalize that as something to keep doing in the next year. (Accordingly, I’ll report back on how it has gone so far in my usual end-of-year writeup!)&lt;/p&gt;
&lt;p&gt;This morning, at least, it already feels like something of a win to have gotten some words out here at the start of the day, and I feel far more &lt;em&gt;able&lt;/em&gt; to write now than I normally do after a full work day during that mid-to-late afternoon mental slump!&lt;/p&gt;
</content><category term="productivity"></category></entry><entry><title>Why Do I Need A Research Tool?</title><link href="http://www.chriskrycho.com/2017/why-do-i-need-a-research-tool.html" rel="alternate"></link><published>2017-12-10T19:35:00-05:00</published><updated>2017-12-10T19:35:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-10:/2017/why-do-i-need-a-research-tool.html</id><summary type="html">You can often get by on just your memory when all you're doing is chatting or blogging. But when you want to say something substantive… research tools are really helpful.
</summary><content type="html">&lt;p&gt;For a bit of follow-up on &lt;a href="http://www.chriskrycho.com/2017/how-do-you-manage-your-research-notes.html" title="How Do You Manage Your Research Notes"&gt;this morning’s post&lt;/a&gt;—&lt;/p&gt;
&lt;p&gt;It struck me that there’s a really important thing implicit in the whole question that’s perhaps worth making explicit. That is: &lt;em&gt;it’s worth doing the work of capturing what you’re reading&lt;/em&gt;, at least when it’s relevant to something you’re &lt;em&gt;studying&lt;/em&gt;. This isn’t necessarily obvious, and especially if you have a good memory, you can often get by in shorter-form writing and day-to-day conversation by relying on your memory. It’ll get you &lt;em&gt;close enough&lt;/em&gt; that you can say, “Oh, so-and-so says this,” or even fall back to “I wish I could remember where I read this…”&lt;/p&gt;
&lt;p&gt;But when you want to do something a bit more substantive—say, a medium-length essay, or a detailed book review, much less a long-form essay or academic paper or (good grief!) a book—well, then you need a way of actually keeping track of what you’ve read and where you read it.&lt;/p&gt;
&lt;p&gt;I’m in the &lt;em&gt;very&lt;/em&gt; early reading phases for a research project I’d like to tackle over the next year (and possibly much longer): namely, developing at least for myself a more coherent &lt;em&gt;ethics of technology&lt;/em&gt;.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; And one thing I learned in one of my largest projects at Southeastern Seminary (a summary of a variety of theological systems as represented by reading thousands of pages of introductions to them and writing about 80,000 words of summary of those pages) was the importance of taking careful notes on what I read and then being able to reference and make use of those notes later.&lt;/p&gt;
&lt;p&gt;But that project also left me deeply, deeply frustrated, because nothing I tried actually satisfied me as a way of taking notes in a way I could reference later.&lt;/p&gt;
&lt;p&gt;Writing quotes out by hand is laborious, and it doubles the work you have to do with that reference when you need to incorporate it into a paper or essay later: you’re often enough going to end up typing it out either way. But on the other hand, writing down a quote inscribes something into your mind in a way that tapping on a keyboard doesn’t. (This is part of why I outline every talk, teaching session, and sermon I deliver by hand!)&lt;/p&gt;
&lt;p&gt;Similarly, while I’ve developed a system for marking up books in a way that’s reasonably unobtrusive but is easy to understand,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;finding&lt;/em&gt; that markup in the text of a book has its own issues. I’ve resorted to dog-earing pages with the most important quotes and ideas in the past, but found this dissatisfying. I know some people use colored page markers, and I need to try that as an approach (though it offends my aesthetic sensibilities as much or more than dog-earing in its own way!).&lt;/p&gt;
&lt;p&gt;And the inciting incident for this blog post: I was thinking as I read &lt;a href="https://www.theatlantic.com/technology/archive/2017/12/it-might-be-impossible-for-future-historians-to-understand-our-internet/547463/" title="&amp;quot;Future Historians Probably Won&amp;#39;t Understand Our Internet, and That&amp;#39;s Okay&amp;quot;"&gt;a helpful article by Alexis Madrigal at the Atlantic&lt;/a&gt; and then saved it to pinboard that it’s a lot of &lt;em&gt;work&lt;/em&gt; to do this kind of thing. But if you &lt;em&gt;don’t&lt;/em&gt; do it, you’re floundering around and hoping that your memory or &lt;a href="https://duckduckgo.com"&gt;DuckDuckGo&lt;/a&gt; or the combination of the two will get you back to where you need to be for some or another bit of research you’re doing… and good luck with that. In my experience, the more I’ve read on a topic, the harder it can be to remember &lt;em&gt;exactly&lt;/em&gt; where I read a particularly important idea.&lt;/p&gt;
&lt;p&gt;So that’s &lt;em&gt;why&lt;/em&gt; I’m curious about people’s research tools.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;You can see this as my following some of the same kinds of paths being worn down right now by writers and thinkers like &lt;a href="http://blog.ayjay.org"&gt;Alan Jacobs&lt;/a&gt; and &lt;a href="https://thefrailestthing.com/the-frailest-thing/"&gt;L. M. Sacasas&lt;/a&gt;, and it’s certainly not &lt;em&gt;new&lt;/em&gt; as a line of thinking for me—see a related post &lt;a href="http://www.chriskrycho.com/2017/theological-anthropology.html"&gt;here&lt;/a&gt;, for example.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I use brackets to mark off important quotes, the same way someone might use a highlighter, because I hate highlighted books myself. I’ll underline &lt;em&gt;especially&lt;/em&gt; important bits. I jot comments notes in the margins. I mark places where I disagree sufficiently strongly with an “x” and where I agree sufficiently strongly with a check mark or an exclamation point. Things that are essential items in the argument of the book—i.e. things which articulate or are central to argument for the thesis of the book—I’ll mark in the margins with a star. Nothing complicated!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category></entry><entry><title>How Do You Manage Your Research Notes?</title><link href="http://www.chriskrycho.com/2017/how-do-you-manage-your-research-notes.html" rel="alternate"></link><published>2017-12-10T10:25:00-05:00</published><updated>2017-12-10T10:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-12-10:/2017/how-do-you-manage-your-research-notes.html</id><summary type="html">I’m starting back in on serious reading and research… and I find the tools lacking. So: how in the world do you manage your research notes?</summary><content type="html">&lt;p&gt;I started thinking again today about how I want to tackle reading and writing and organizing my notes and the like. Scribbling things in journals is one good approach (though it can be hard to find things later), and organization is something of a problem—I’ve considered a notebook-per-subject approach, but the problem is that my interests are cross-disciplinary; and in any case, for &lt;em&gt;everyone&lt;/em&gt;, research often includes the unexpected insight from an apparently unrelated field. So segregating things off that way seems like the kind of thing that would ultimately still just end up frustrating me.&lt;/p&gt;
&lt;p&gt;Using tools like &lt;a href="https://pinboard.in/u:chriskrycho/" title="my Pinboard"&gt;pinboard&lt;/a&gt; is another approach. It’s a particularly valuable one for digital articles and the like, and it has the tag-like architecture I’ve come to think is most appropriate for organizing this kind of content. However, I haven’t yet upgraded to the full article archive mode it offers, and search-ability remains something of a bugbear for me as a result. (My lasting problem remains remembering &lt;em&gt;where&lt;/em&gt; I read something specific.)&lt;/p&gt;
&lt;p&gt;And bringing all the pieces together—notes scribbled in the margins of books and highlights or underlines in the same; thoughts jotted out at length in a paper journal; pinboard links; half-finished blog posts which helped me formulate ideas even if they never went anywhere—is its own task I have &lt;em&gt;no&lt;/em&gt; handle on. Four and a half years of graduate education &lt;em&gt;exacerbated&lt;/em&gt; the problem rather than suggesting solutions.&lt;/p&gt;
&lt;p&gt;So I’m curious to hear, especially from working scholars and writers out there—into whose company I’d like to slowly grow myself in the years ahead—how in the world do you manage your research notes?&lt;/p&gt;
</content><category term="writing"></category></entry><entry><title>The Value of Silence</title><link href="http://www.chriskrycho.com/2017/the-value-of-silence.html" rel="alternate"></link><published>2017-11-26T19:30:00-05:00</published><updated>2017-11-26T19:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-11-26:/2017/the-value-of-silence.html</id><summary type="html">&lt;p&gt;Over the past year or so, I’ve increasingly become persuaded of the importance of times of silence for clear thinking.&lt;/p&gt;
&lt;p&gt;While I’ve spent the last several years listening to podcasts in much of my walking and running time, I’ve started blocking out times in which I’m …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past year or so, I’ve increasingly become persuaded of the importance of times of silence for clear thinking.&lt;/p&gt;
&lt;p&gt;While I’ve spent the last several years listening to podcasts in much of my walking and running time, I’ve started blocking out times in which I’m &lt;em&gt;not&lt;/em&gt; listening to things that way—times dedicated either to just instrumental music, or simply to silence. This goes for more than those walks and runs. I’ve also been thinking about driving time, which I likewise once filled with thought, but which in recent years I have, again, filled with podcasts.&lt;/p&gt;
&lt;p&gt;I used to take &lt;em&gt;all&lt;/em&gt; my runs in silence. I often drove in silence or with only instrumental music. I moved away from that somewhat in my years in North Carolina, in part because I discovered a great many podcasts I enjoyed, and in part because it was a way of sustaining mental focus when I had run the same routes too many times. Soon, it bled into my pomodoro walks and into nearly all my drives as well.&lt;/p&gt;
&lt;p&gt;But much of my best thinking happened in those silences.&lt;/p&gt;
&lt;p&gt;I need that space for letting my mind tease out questions and issues I’m thinking on. So: while not eliminating podcasts, I have been intentionally carving out more and more time again for silence. Pomodoro walks, runs, drives. Times when I simply listen to interesting music and think.&lt;/p&gt;
&lt;p&gt;The need for silence goes beyond merely podcasts for me. I’ve continued to think about the role of Twitter in my life, the amount of time I spend looking at RSS feeds, and even my enjoyment of times in e.g. Slack communities I participate in. Twitter I have long limited strictly—it’s &lt;a href="http://blog.ayjay.org/joe-posnanski-wises-up/"&gt;an enormous and often unproductive time sink&lt;/a&gt;—but even RSS (which is much better for thought in nearly every way!) and healthy Slack communities can be &lt;em&gt;connecting&lt;/em&gt; in ways that actually &lt;a href="https://pinboard.in/u:ayjay/b:c7d2be58b366"&gt;inhibit deep thought&lt;/a&gt;. We need a degree of solitude and silence to think well.&lt;/p&gt;
&lt;p&gt;Thus, though each of those is often a good source of information, and I enjoy them, I am increasingly aware of the curious ways they interact with my ability to think clearly and deeply about things. And about the ways they shift the &lt;em&gt;arena&lt;/em&gt; of my thinking clearly and deeply about things. Pose me a question and I’m apt to answer it, but the way I answer it in a Slack chat is different from—and often worse than—the way I’d answer it if I took the time to write it up as a blog post, and that in turn different from how I would approach it if composing a medium-length essay.&lt;/p&gt;
&lt;p&gt;So I am sussing out where and how I want to draw those lines, where I want to &lt;a href="https://thefrailestthing.com/2017/11/18/the-ethics-of-technological-mediation/"&gt;pay my attention&lt;/a&gt;, because &lt;a href="http://iasc-culture.org/THR/channels/Infernal_Machine/2015/03/79-theses-on-technology-for-disputation/"&gt;attention is indeed something we pay&lt;/a&gt;. Fewer podcasts, less time in ephemeral media (even including blogging); more time in books and long essays and in writing itself as a means of coming to understanding. More time, indeed, scribbling notes in paper notebooks, for the ways that time spent thinking &lt;em&gt;and&lt;/em&gt; disconnected from the internet shapes us. More time, when I’m writing in a digital form, with the wifi off. And hopefully, as a result, more and better thinking.&lt;/p&gt;
</content><category term="writing"></category><category term="social media"></category></entry><entry><title>Becoming a Contributor</title><link href="http://www.chriskrycho.com/2017/becoming-a-contributor.html" rel="alternate"></link><published>2017-11-02T07:00:00-04:00</published><updated>2017-11-02T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-11-02:/2017/becoming-a-contributor.html</id><summary type="html">The prepared script for my talk at Rust Belt Rust 2017, given October 27, 2017 in Columbus, Ohio.</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;Here is the full text of the talk I gave at Rust Belt Rust, as it was prepared; headings correspond to individual slides. You can see the slides as they were presented &lt;a href="/talks/rust-belt-rust/"&gt;here&lt;/a&gt;. Note that I extemporize fairly freely when actually giving a talk, so this is &lt;em&gt;not&lt;/em&gt; a word-for-word equivalent of the talk as delivered, but the gist is the same!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;I’ll update this post with the video once it’s available!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/family.jpg" alt="family" /&gt;&lt;figcaption&gt;family&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Hello, everyone! It’s good to see all of you. We only have half an hour, and even if that’s ten to fifteen minutes longer than a normal New Rustacean episode, that’s still not much time, so let’s jump right in! Our theme is “Becoming a Contributor.” There are two prongs to this talk, two big ideas I hope you all walk away with.&lt;/p&gt;
&lt;section id="introduction-the-big-ideas" class="level3"&gt;
&lt;h3&gt;Introduction: The Big Ideas&lt;/h3&gt;
&lt;p&gt;The first thing I hope all of you take away is that &lt;strong&gt;there is no reason &lt;em&gt;you&lt;/em&gt; cannot contribute meaningfully&lt;/strong&gt; to the success of Rust – or indeed any open-source project you care about. Anyone can be a contributor. And not “even you” but perhaps “&lt;em&gt;especially&lt;/em&gt; you”. The fact that you’re an outsider, or new to programming, or new to systems programming: sometimes that makes you a &lt;em&gt;better&lt;/em&gt; contributor. Because you don’t necessarily share the biases of – you’re not wearing the same blinders that – someone who’s been writing systems-level code for 20 years have. So the first idea: &lt;strong&gt;you can contribute&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The second idea I hope you take away is &lt;strong&gt;just &lt;em&gt;how many&lt;/em&gt; ways there are to contribute meaningfully&lt;/strong&gt;. It has almost become a cliche in the Rust community to say “code isn’t the only thing that matters,” but I want to show you today just how true that is. And I want to make that point again more forcefully, because for all that we often say that, the idea that &lt;em&gt;shipping code&lt;/em&gt; is what really matters is the kind of pernicious lie that can come back and bite any of us. It certainly gets to me at times! But it’s a lie, and we’re going to see that in detail. That’s the second big idea: &lt;strong&gt;there are an &lt;em&gt;astounding&lt;/em&gt; number of ways you can contribute&lt;/strong&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction-why" class="level3"&gt;
&lt;h3&gt;Introduction: Why?&lt;/h3&gt;
&lt;p&gt;There are a lot of things to be passionate about in the world of software development. But at the end of the day, I care about software because I care about &lt;em&gt;people&lt;/em&gt;. To borrow a label from Scott Wlaschin – a developer I admire enormously, mostly working over in the F# community – I am a &lt;em&gt;humanist&lt;/em&gt;, not a &lt;em&gt;technologist&lt;/em&gt;. The technologies are interesting in themselves to a degree; but I mostly care about the ways that technologies can help us serve people more effectively. As software developers, that takes a lot of shapes. But today I want to zoom in on just these two ideas about open-source software:&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction-the-big-ideas-1" class="level3"&gt;
&lt;h3&gt;Introduction: The Big Ideas&lt;/h3&gt;
&lt;p&gt;So: why these two ideas? For one thing, because I think they are among the most applicable to everyone here. We have an enormous open-source focus. But for another, because they can also serve as windows into the ways we can – and should – think about software more generally. So: let’s talk about how you become a &lt;em&gt;contributor&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction-outline" class="level3"&gt;
&lt;h3&gt;Introduction: Outline&lt;/h3&gt;
&lt;p&gt;We’re going to take this on in the good old grammar-school fashion: &lt;em&gt;who&lt;/em&gt;, &lt;em&gt;what&lt;/em&gt;, &lt;em&gt;when&lt;/em&gt;, &lt;em&gt;where&lt;/em&gt;, &lt;em&gt;why&lt;/em&gt;, and &lt;em&gt;how&lt;/em&gt;. We’re not going to take them in that order though, and we might smash a few of them together.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Why bother contributing? &lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;Who is a contributor? &lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;What is a contribution? How can you contribute? &lt;!-- .element: class="fragment" data-fragment-index="3" --&gt;
&lt;ul&gt;
&lt;li&gt;…so many things they won’t fit on this slide. &lt;!-- .element: class="fragment" data-fragment-index="4" --&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When and where to contribute? &lt;!-- .element: class="fragment" data-fragment-index="5" --&gt;&lt;/li&gt;
&lt;li&gt;Conclusion &lt;!-- .element: class="fragment" data-fragment-index="6" --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="why-bother-contributing" class="level2"&gt;
&lt;h2&gt;Why bother contributing?&lt;/h2&gt;
&lt;p&gt;The first question we might be asking is: &lt;em&gt;why contribute at all&lt;/em&gt;? Why should you be interested in becoming a contributor? And the best answer I can offer is: because there is more work than hands to do it. Always. Every open-source maintainer can tell you the truth of this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor" class="level2"&gt;
&lt;h2&gt;Who is a contributor?&lt;/h2&gt;
&lt;p&gt;People define this differently, but I have a very simple definition: &lt;strong&gt;A contributor is &lt;em&gt;anyone&lt;/em&gt; who improves a project.&lt;/strong&gt;&lt;/p&gt;
&lt;section id="who-is-a-contributor-examples" class="level3"&gt;
&lt;h3&gt;Who is a contributor? Examples&lt;/h3&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;submit a patch to fix a typo &lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;add a small correction for a code sample in a project &lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;file an issue instead of just suffering through a problem in silence &lt;!-- .element: class="fragment" data-fragment-index="3" --&gt;&lt;/li&gt;
&lt;li&gt;everything else we’re going to talk about today &lt;!-- .element: class="fragment" data-fragment-index="4" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor-me" class="level3"&gt;
&lt;h3&gt;Who is a contributor? Me!&lt;/h3&gt;
&lt;p&gt;That might sound overblown, but it’s really not. I am literally standing on this stage in front of you today because I submitted some small typo and code sample improvements to “Rust by Example” a few years ago, and realized: I can make a difference in this community. And that gave me the motivation I needed to &lt;em&gt;keep&lt;/em&gt; contributing.&lt;/p&gt;
&lt;p&gt;&lt;img src="/talks/rust-belt-rust/img/first-commit.png" alt="my first Rust commit" /&gt;&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor-1" class="level3"&gt;
&lt;h3&gt;Who is a contributor?&lt;/h3&gt;
&lt;p&gt;I don’t imagine the story is all that different for &lt;em&gt;most&lt;/em&gt; people who are open-source contributors in this room. Something got them over the hump, and it was probably something small, insignificant-seeming at the time. They might be particularly skilled in this thing or that thing, but in fact a lot of them are in those roles just because they saw a need and stepped up to fill it. And then kept at it for a long time. But it made them a contributor. And that feeling – of helping build something bigger than you can build on your own – is a good one. I’d go so far as to say it’s part of what humans are &lt;em&gt;meant&lt;/em&gt; for. It’s part of us in a deep, deep way.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="who-is-a-contributor-2" class="level2"&gt;
&lt;h2&gt;Who is a contributor?&lt;/h2&gt;
&lt;p&gt;If you’re inclined to quibble with that definition, I challenge you to ask &lt;em&gt;why?&lt;/em&gt; I think, most often, it’s because we feel defensive about wanting to project our own particular kinds of contribution as the most important, or the most valuable. But I’m more of the mindset that, as I read recently, “anyone who would be first… must be last of all, and servant of all.” We should stop worrying about our own prestige and turf-marking, and start rejoicing in the many different ways people are able to make our projects better.&lt;/p&gt;
&lt;p&gt;There’s no magic that makes you qualified to be a contributor. There’s just a willingness to serve where you see a need.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-how-can-you-contribute" class="level2"&gt;
&lt;h2&gt;What &amp;amp; how can you contribute?&lt;/h2&gt;
&lt;p&gt;And that takes us into the “what” of all of this, the &lt;em&gt;how&lt;/em&gt;. (Yes, I’m combining those two). &lt;strong&gt;&lt;em&gt;What&lt;/em&gt; is a contribution? &lt;em&gt;How&lt;/em&gt; can you contribute?&lt;/strong&gt; Turns out, this is a &lt;em&gt;long&lt;/em&gt; list.&lt;/p&gt;
&lt;section id="what-how-code" class="level3"&gt;
&lt;h3&gt;What &amp;amp; how: code&lt;/h3&gt;
&lt;p&gt;Let’s get this right out of the way up front, because it’s the most obvious: you can write code. You can fix bugs or help implement new features. You can do that even if you’re not an expert – especially in the Rust community. Many Rust projects have gone out of their way to mark issues as good-first-issues, or easy-to-tackle, or mentorship-available. Maybe it’s your first contribution to an open-source project: that’s okay. You can take a stab at it, and the fact that it might not be good &lt;em&gt;is okay&lt;/em&gt;. The whole point of these kinds of issues is that they give you a place where you can jump in safely.&lt;/p&gt;
&lt;p&gt;&lt;img src="/talks/rust-belt-rust/img/good-first-issue.png" alt="good first issue" /&gt; &lt;img src="/talks/rust-belt-rust/img/mentored.png" alt="mentored" /&gt; &lt;img src="/talks/rust-belt-rust/img/easy.png" alt="easy" /&gt;&lt;/p&gt;
&lt;p&gt;That goes equally for everything from the Rust compiler itself to many of the other projects in the ecosystem. Look at the repository, for example! And it’s not just this project. &lt;em&gt;Lots&lt;/em&gt; of projects in the Rust ecosystem are like this.&lt;/p&gt;
&lt;section id="what-how-code-were-kind-here" class="level4"&gt;
&lt;h4&gt;What &amp;amp; how: code – we’re kind here&lt;/h4&gt;
&lt;p&gt;And no one is going to swear at you or insult for making a mistake here. Not even if you’re working on something important, and not even if you’ve been doing it for a while. That is not. how. we. roll. here. &lt;em&gt;Everyone&lt;/em&gt; makes mistakes!&lt;/p&gt;
&lt;p&gt;Instead, we &lt;em&gt;want&lt;/em&gt; people to show up, knowing nothing: we’re happy to help. Remember: we want people to contribute! So: try opening a PR and let people help you learn how to do it well! In fact, if you haven’t ever opened a PR on a Rust project, find one that looks interesting to you and has an issue tagged that way, and submit a PR before the weekend is out! You can do it!&lt;/p&gt;
&lt;p&gt;&lt;img src="/talks/rust-belt-rust/img/good-first-issue.png" alt="good first issue" /&gt; &lt;img src="/talks/rust-belt-rust/img/mentored.png" alt="mentored" /&gt; &lt;img src="/talks/rust-belt-rust/img/easy.png" alt="easy" /&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-how-code-a-caveat" class="level4"&gt;
&lt;h4&gt;What &amp;amp; how: code – a caveat&lt;/h4&gt;
&lt;p&gt;But code is not the only thing that makes you a contributor. I put it up front because I think it’s worth doing – but I also wanted to get it out of the way. In every software community, it’s easy to &lt;em&gt;over&lt;/em&gt;-value the code. That might sound crazy, given that it’s open-source &lt;em&gt;software&lt;/em&gt;, but the reality is that no one fails to value the code. We &lt;em&gt;do&lt;/em&gt; often fail to value all the other things that make an open-source software project actually useful. It’s certainly true that there’s no project without the code. But it’s also the case that there’s no &lt;em&gt;useful&lt;/em&gt; software without a lot of other things besides the code, and we often undervalue those.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="filing-bugs" class="level3"&gt;
&lt;h3&gt;Filing bugs&lt;/h3&gt;
&lt;p&gt;So let’s take one step away from code, and talk about what is probably the single &lt;em&gt;easiest&lt;/em&gt; way anyone can contribute. &lt;em&gt;File issues.&lt;/em&gt; If you’re using a binary and it doesn’t work, open a ticket. If you’re integrating a library and it seems like the API doesn’t do what it should, or if it seems like it’s missing some functionality… well, you can suffer in silence, or you can open a bug ticket! Many times, the author of the software &lt;em&gt;doesn’t know there’s a problem&lt;/em&gt;. The only way they can fix it is if they know about it!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/new-issue.png" alt="filing bugs" /&gt;&lt;figcaption&gt;filing bugs&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="docs" class="level3"&gt;
&lt;h3&gt;Docs&lt;/h3&gt;
&lt;p&gt;Perhaps the thing most of you will be most persuaded of the utility of is &lt;em&gt;documentation&lt;/em&gt;. All of us have faced the difficulty of trying to figure out how to integrate some poorly-documented (or undocumented!) library into our own codebase. That experience, in word, &lt;em&gt;sucks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So working on documentation is one of the highest-value areas you can contribute to any project. It’s also really hard, in a bunch of ways – harder, in some ways, than writing the code is!&lt;/p&gt;
&lt;section id="docs-who" class="level4"&gt;
&lt;h4&gt;Docs: who?&lt;/h4&gt;
&lt;p&gt;One kind of documentation is &lt;strong&gt;explanation of how things work under the hood&lt;/strong&gt;. The implementer is the most qualified there! That doesn’t mean they don’t still need help even with that, though! Some people are incredible implementors and terrible explainers; you can often do a great service by serving as an “interpreter” for them – taking their explanations and making the literary tweaks and cleanups and polish that they need.&lt;/p&gt;
&lt;p&gt;Another kind of documentation, though, developers and maintainers are often really poorly equipped to write, and that’s &lt;strong&gt;introductory documentation&lt;/strong&gt;. This is the problem of expertise: when you know exactly how something is &lt;em&gt;meant&lt;/em&gt; to work, and especially when you’re the one who implemented it, there are things that seem obvious to you which simply aren’t obvious to someone approaching it for the first time. And as hard as you try, you &lt;em&gt;can’t&lt;/em&gt; escape that entirely. You can imagine what it might be like not to know something, but there’s no substitute for actually not knowing something.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="docs-how" class="level4"&gt;
&lt;h4&gt;Docs – how?&lt;/h4&gt;
&lt;p&gt;What that means is that one of the most valuable things you can do as you learn a new library is &lt;em&gt;write down the things you don’t understand from the docs as you go&lt;/em&gt;. And when you figure them out, &lt;em&gt;write that down, too&lt;/em&gt;. If nothing else, writing up that experience – filing it as an issue on the bug tracker, or otherwise getting it in the hands of the maintainers – can help them make important changes to things like the order various concepts are introduced, or adding little notes to help people feel comfortable with not knowing something until it &lt;em&gt;can&lt;/em&gt; be introduced later, and other things like that. It can help them recognize and fill in gaps in their docs – things they simply assumed but which they didn’t realize they were assuming – and fill those in. At the most extreme, you might even help them realize that some parts of the docs need full rewrites… and the work you’ve done in writing things down might just be the foundation or the actual content of those new docs.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Write down the things you don’t understand from the docs as you go.&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;When you figure them out, write that down, too.&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;Then: file an issue or write a PR to improve it!&lt;!-- .element: class="fragment" data-fragment-index="3" --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="docs-varieties" class="level4"&gt;
&lt;h4&gt;Docs: varieties&lt;/h4&gt;
&lt;p&gt;So what kinds of things would we call &lt;em&gt;documentation&lt;/em&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API documentation&lt;!-- .element class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;READMEs&lt;!-- .element class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;li&gt;Tutorials&lt;!-- .element class="fragment" data-fragment-index="3" --&gt;&lt;/li&gt;
&lt;li&gt;Books&lt;!-- .element class="fragment" data-fragment-index="4" --&gt;&lt;/li&gt;
&lt;li&gt;The Rust Reference&lt;!-- .element class="fragment" data-fragment-index="5" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, books are a &lt;em&gt;huge&lt;/em&gt; undertaking, but they can genuinely serve as documentation. Especially for large projects. In fact, several of the most important pieces of “documentation” the Rust project itself has are books: “The Rust Programming Language”, “Rust by Example”, and “The Rustonomicon”. But there are also important but totally unofficial books like Daniel Keep’s “A Practical Intro to Macros in Rust 1.0” and “The Little Book of Rust Macros”, or Jorge Aparicio’s book on microcontrollers with Rust.&lt;/p&gt;
&lt;p&gt;The Rust Reference: This is a special category, and one that’s especially important to me. The Rust Reference is supposed to be an exhaustive guide to the language, and the value of that being complete and accurate is hard to overstate. It’s also wildly out of date today. I wrote an RFC last year that said, basically, “We need to actually document everything! That includes updating the Reference!” The trick is: it’s a huge undertaking, and while I and a few others made a good start on it earlier this year, that effort got bogged down by life, and it needs to be resuscitated. And it’s not just Rust which could use investment in that area. Other languages and frameworks have the same issue. It’s &lt;em&gt;really&lt;/em&gt; important that there be an answer other than “dive into the source and try to figure out what its intent is” – the more central the component is in the ecosystem, the more important that is.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="docs-translation" class="level4"&gt;
&lt;h4&gt;Docs: Translation&lt;/h4&gt;
&lt;p&gt;Another huge place you can contribute to documentation is &lt;em&gt;translation&lt;/em&gt;. For good or ill, English has become the sort of &lt;em&gt;primary&lt;/em&gt; language of programming, but that doesn’t mean we should treat it as the &lt;em&gt;only&lt;/em&gt; language, or as &lt;em&gt;more important&lt;/em&gt; than other languages. Translating documentation is amazing and very needed work, and it’s work that not everyone is really capable of! I’m fluent in English and… ancient Hebrew and ancient Greek. For some reason, there’s not much demand for technical writing in Greek from the era when Plato was alive. So I’m not much use at translation.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/translation.png" alt="translation" /&gt;&lt;figcaption&gt;translation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;But many of you out there &lt;em&gt;are&lt;/em&gt; multilingual, and could take docs written in English and convert them for, say, Czech-speaking developers. Perhaps just as importantly, you can go the &lt;em&gt;other&lt;/em&gt; direction, and help non-English-speaking maintainers reach a broader audience. Take an amazing project which only has documentation in Amharic (because its developers don’t feel comfortable enough in English to translate it themselves) and translate it to English: &lt;em&gt;use&lt;/em&gt; the fact that English &lt;em&gt;is&lt;/em&gt; the common language to increase the reach of non-Western developers!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="visual-design" class="level3"&gt;
&lt;h3&gt;Visual Design&lt;/h3&gt;
&lt;p&gt;One of the areas where you could move the ball down the field fastest in the Rust community is with &lt;strong&gt;&lt;em&gt;visual&lt;/em&gt; design&lt;/strong&gt;. (To be clear, the &lt;em&gt;language&lt;/em&gt; design is great!) But our websites could sometimes use some work.&lt;/p&gt;
&lt;section id="visual-design-its-not-just-us" class="level4"&gt;
&lt;h4&gt;Visual design: it’s not just us&lt;/h4&gt;
&lt;p&gt;Systems programming language types have historically &lt;em&gt;not&lt;/em&gt; spent a lot of time on the &lt;em&gt;presentation&lt;/em&gt; of their tools. In part this is just a matter of what these kinds of languages have been oriented towards: if you spend all day hacking on kernel code, you’re &lt;em&gt;likelier&lt;/em&gt; to be a person for whom user interface and visual design is less interesting than, say, optimizing memory performance or minimizing the number of cache misses a given approach has. But presentation &lt;em&gt;does&lt;/em&gt; matter, and it matters especially as we want to enable more and more people to be able to write this kind of code.&lt;/p&gt;
&lt;p&gt;Speaking frankly, though I’ve spent a large chunk of my career to date writing systems-level languages, I’ve found the way a lot of these tools are presented to be a huge turn-off, and at times a barrier even to getting them working for me locally. Perhaps the most egregious example of that was some of the “documentation” – I’m not sure I should even call it that! – for Fortran, when I was first getting started programming back in college. The presentation of the material was essentially hacker-ish in a &lt;em&gt;bad&lt;/em&gt; way: no CSS, no attention to organization of the material, no structure to help you find your way through it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="visual-design-how" class="level4"&gt;
&lt;h4&gt;Visual design: how&lt;/h4&gt;
&lt;p&gt;If you’re an expert or just a talented amateur, please pitch in&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/p&gt;
&lt;p&gt;You can help here even if you’re not especially comfortable with visual design or even if you’re outright bad at it if you’re willing to spend just a little time on it! For example, you can simply help a team adopt something like Bootstrap. Yes, it’ll look like many other open-source projects out there. But it won’t be horribly, catastrophically ugly and unreadable! Or you can do use one of these simple starter kits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://usewing.ml"&gt;Wing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://purecss.io"&gt;Pure.css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://getskeleton.coma"&gt;Skeleton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So don’t think that just because you aren’t a design expert means you can’t help here.&lt;/p&gt;
&lt;p&gt;Just as important as the &lt;em&gt;visual&lt;/em&gt; design is thinking about and actively designing the &lt;strong&gt;information hierarchy&lt;/strong&gt; of your content. What leads to what? Which pieces go together, and which pieces can be broken up into their own pages or sections within pages? Think about the content like an &lt;em&gt;outline&lt;/em&gt;. Many sites don’t have any such structure to them; they’re kind of haphazardly cobbled together. If you can help the maintainers with the &lt;em&gt;structure&lt;/em&gt; and &lt;em&gt;organization&lt;/em&gt; of their content, that can make an enormous differences as well.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="blogging" class="level3"&gt;
&lt;h3&gt;Blogging&lt;/h3&gt;
&lt;p&gt;One of the other big ways you can help a project may not even end up in the repository at all. You can &lt;em&gt;blog&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I know blogging can seem intimidating, for many of the same reasons that writing documentation can. Technical writing is hard, and it’s a completely different skill from programming. But it doesn’t have to be amazing; it just has to get the information out there – and you’ll get better as you practice.&lt;/p&gt;
&lt;section id="blogging-easy-mode" class="level4"&gt;
&lt;h4&gt;Blogging: “Easy Mode”&lt;/h4&gt;
&lt;p&gt;You can start on “easy mode”, too. I mentioned this earlier when talking about documentation, but “just write down what you’re learning” is an incredibly effective technique for generating content. If you look at a lot of the technical blogging I’ve done over the years, it has been nothing more complicated than “here is what I just learned.” And if you want a &lt;em&gt;superb&lt;/em&gt; example of this which is &lt;em&gt;very&lt;/em&gt; different from mine, take a look at the work that Julia Evans does on her blog! She regularly writes down, in an inimitable way, highly technical ideas she’s just learning. If you want someone to make arcane Linux command line tools seem amazing and approachable, her blog is your ticket.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just write down what you’re learning.&lt;br/&gt; —Me, just now&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="blogging-good-examples" class="level4"&gt;
&lt;h4&gt;Blogging: good examples&lt;/h4&gt;
&lt;p&gt;But even beyond “what I just learned,” blogging is a superb way for teaching in general. Over the course of this year, for example, Vaidehi Joshi has been writing what is essentially a friendly introduction to computer science on her blog on Medium. This is a totally different style of &lt;em&gt;content&lt;/em&gt; (as well as of presentation!) from the kind of “what I just learned” content that Julia Evans writes,but it’s also really effective, because she takes her knowledge and translates it into something others can pick up. That’s obviously more work than just writing down things you just learned, but it can also pay really high dividends as others are able to substantially deepen their knowledge.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="blogging-all-the-options" class="level4"&gt;
&lt;h4&gt;Blogging: all the options!&lt;/h4&gt;
&lt;p&gt;In blogging, as in documentation, there is a whole spectrum of basic teaching content you can contribute! And communities need the whole spectrum for simple introductions to extremely thorough, advanced tutorials.&lt;/p&gt;
&lt;p&gt;But blog posts can also be much more versatile than traditional documentation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;They can be one-offs, or series.&lt;/strong&gt; You can give a topic as much depth, or as little depth, as you &lt;em&gt;care about&lt;/em&gt; or &lt;em&gt;think it deserves&lt;/em&gt;. I wrote an 18-part series comparing Rust and Swift, and it could have been 30 parts if I hadn’t eventually gotten derailed. That’s not &lt;em&gt;documentation&lt;/em&gt;, but there’s a lot people can learn from those kinds of things.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can introduce a technology, or dig deep into how to use it, or how it’s built.&lt;/strong&gt; You’re not limited to just one particular tack when blogging. Is your interest in the specific implementation details of some corner of the compiler? Write about that! Is your interest in how a given Rust library solves a specific kind of problem you’ve run into with another library, or with a similar library in another language? Write about that! You get the idea.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can critique or highlight problems with specific pieces of the ecosystem!&lt;/strong&gt; A careful, well-articulated, critical blog post can do wonders for showing the problems with a given approach and can even sometimes help suggest the right solutions to those problems. I’ve repeatedly watched, for example, as people have blogged about their struggles getting their heads around the Tokio tooling; the result has been a &lt;em&gt;lot&lt;/em&gt; of work by the Tokio team to respond to those problems. The more thoughtful and careful you are in that kind of criticism, the better! Good criticism is &lt;em&gt;incredibly&lt;/em&gt; valuable. Because we all have blind spots, and someone else’s perspective can help jar us out of those.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can show how to &lt;em&gt;integrate&lt;/em&gt; different parts of the ecosystem.&lt;/strong&gt; For example, as part of the “Increasing Rust’s Reach” initiative, Ryan Blecher recently wrote up a detailed walk-through on how to use the Diesel ORM and the Rocket web framework together to build a small blogging engine. That’s &lt;em&gt;huge&lt;/em&gt;! It makes it that much easier for someone who’s just starting out with Rust, coming in from something like Python or Ruby, to dive in and get that intensely rewarding feeling of &lt;em&gt;having built something&lt;/em&gt; in a relatively small amount of time. That’s also helpful because (almost) no one is building something with &lt;em&gt;just&lt;/em&gt; Diesel, or just &lt;em&gt;any&lt;/em&gt; crate. A huge part of what every software developer does is about fitting together other pieces of software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They can invite feedback on your own projects.&lt;/strong&gt; Talk about what you’re doing, what your stumbling blocks are, what you don’t understand. People will often show up and help you with comments and clarifications!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that’s just scratching the surface. Blogs are incredibly versatile, and you should lean on that.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="audio-and-video" class="level3"&gt;
&lt;h3&gt;Audio and Video&lt;/h3&gt;
&lt;p&gt;Not just words! Noises and pictures, too!&lt;/p&gt;
&lt;section id="audio-podcasts" class="level4"&gt;
&lt;h4&gt;Audio: podcasts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Not everyone learns the same way.&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;Lots of people have commutes.&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="audio-but-there-are-already-podcasts" class="level4"&gt;
&lt;h4&gt;Audio: but there are already podcasts&lt;/h4&gt;
&lt;p&gt;Everything I’ve talked about so far has been in written form. But audio and video media can also be really helpful. Not everyone learns best by reading. And not everyone has tons of time to sit down and read a book every day. One of the reasons I started the New Rustacean podcast is that it gives people a way to get up to speed on the language while on a daily commute. But there’s still a &lt;em&gt;huge&lt;/em&gt; need for more audio and video content in this space!&lt;/p&gt;
&lt;p&gt;One podcast is not enough!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/newrustacean.png" alt="New Rustacean" /&gt;&lt;figcaption&gt;New Rustacean&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Two&lt;/em&gt; podcasts is not enough!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/rfe.png" alt="Request for Explanation" /&gt;&lt;figcaption&gt;Request for Explanation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Seriously, not even &lt;em&gt;three&lt;/em&gt; podcasts is enough!&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/talks/rust-belt-rust/img/rusty-spike.png" alt="Rusty Spike" /&gt;&lt;figcaption&gt;Rusty Spike&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So I’m laying down another challenge: there’s plenty of room for more, and more kinds, of audio content in this ecosystem.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="video" class="level4"&gt;
&lt;h4&gt;Video&lt;/h4&gt;
&lt;p&gt;Again: people have different learning styles!&lt;/p&gt;
&lt;p&gt;There’s also a huge opening for people to produce good video content. I’ve heard often from people that things like RailsCasts were essential in helping them learn the Ruby on Rails ecosystem. We &lt;em&gt;need&lt;/em&gt; video tutorials which might look kind of like that, or like the kinds of things I’m doing on the podcast. If you have any skill that way, and any interest in teaching, you should make Rust videos – there aren’t many out there.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="video-what" class="level4"&gt;
&lt;h4&gt;Video: what&lt;/h4&gt;
&lt;p&gt;There are lots of options here—not just live streaming!&lt;/p&gt;
&lt;p&gt;Another, totally different tack you can take with video is &lt;em&gt;live-streaming&lt;/em&gt;. Sean Griffin has done this at times, and I’ve actually done it just once, and it’s a ton of fun – and it can be incredibly illuminating for other people to see how you work and how you solve problems. You can also do like I did and live-pair on something. It’s a pain to set up, but it’s also a lot of fun.&lt;/p&gt;
&lt;p&gt;And no doubt there are more ideas you have—please just go do them!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="talk-to-people" class="level3"&gt;
&lt;h3&gt;Talk to people&lt;/h3&gt;
&lt;p&gt;Just talking with people matters. And there are lots of places to do it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IRC/Gitter/Slack/Discourse&lt;/li&gt;
&lt;li&gt;Meetups&lt;/li&gt;
&lt;li&gt;Conferences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also host or help with a local meet-up! For a lot of people, one of the major challenges of learning &lt;em&gt;any&lt;/em&gt; new piece of technology is that – even with IRC and Gitter and Slack and so on – you can feel isolated and alone. And people can help you solve problems in person, and make you feel supported in person, in ways that even a great community can’t really manage online. So &lt;em&gt;go&lt;/em&gt; to meet-ups, at a minimum. And help the organizers. And if there isn’t a meet-up in your community… you can start one! The #rust-community team has a ton of resources.&lt;/p&gt;
&lt;p&gt;Physicality matters. Presence matters. (We know this! We’re at a conference!)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="being-inviting" class="level3"&gt;
&lt;h3&gt;Being inviting&lt;/h3&gt;
&lt;p&gt;Last but not least in this list of &lt;em&gt;how&lt;/em&gt; to be a contributor, I want to take a minute and talk about “being a contributor” to those of you who’ve been contributors for a long time. Some of you have been shipping open-source software for years – some of you even for decades. Much of what I’ve said so far is old hat for you. Maybe not the design bits quite so much! But you’ve been doing this for a long time, and you’re not trying to get over the hump of making your first contribution. You have other things to contribute here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The most important thing you can do is practice &lt;strong&gt;welcome people.&lt;/strong&gt; The Rust community does this well, in general, but it’s something we need to keep in front of us as a goal as the community grows. It’s easy to get frustrated with newcomers as your project grows, demands on your time increase, and your work as a maintainer seems less like fun and more like a second job. But continuing to actively welcome newcomers in is &lt;em&gt;incredibly&lt;/em&gt; powerful. You can make it possible for people to go from zero to really making a difference. And remember: so once were you. None of us started out as magical wizards of Rust and open-source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second big thing you can do is &lt;strong&gt;mentoring.&lt;/strong&gt; As I mentioned, I’m now the maintainer of one of the core pieces necessary to make Ember.js and TypeScript play nicely together. But while I’ve done &lt;em&gt;some&lt;/em&gt; writing-of-code with that, a much larger part of my current and future work there is about helping other people learn TypeScript well enough to start using it in their apps and add-ons. But the flip-side of that is: even a fair bit of the code I &lt;em&gt;have&lt;/em&gt; written, I was able to write because someone more comfortable with some of the infrastructure mentored &lt;em&gt;me&lt;/em&gt; through its quirks and oddities.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="when-where-to-contribute" class="level2"&gt;
&lt;h2&gt;When &amp;amp; where to contribute&lt;/h2&gt;
&lt;p&gt;The last thing I want to touch on is &lt;em&gt;when and where&lt;/em&gt; to contribute. There are two things I’d suggest you should consider here:&lt;/p&gt;
&lt;section id="when-where-you" class="level3"&gt;
&lt;h3&gt;When &amp;amp; where: you&lt;/h3&gt;
&lt;p&gt;Where are &lt;em&gt;you&lt;/em&gt; in the process of becoming comfortable with contributing?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just getting started?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;Already comfortable?&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’ve never done any open-source work at all before, that’s different than if you’ve gotten pretty comfortable with it in a different ecosystem and are just figuring out where to make yourself useful in &lt;em&gt;this&lt;/em&gt; ecosystem.&lt;/p&gt;
&lt;section id="when-where-if-youre-just-getting-started" class="level4"&gt;
&lt;h4&gt;When &amp;amp; where: if you’re just getting started&lt;/h4&gt;
&lt;p&gt;If you’re just getting started, I’d pick a big project with lots of those “Help Wanted” and “Mentoring” and “Easy” tags on issues, and let the size of the project help you out. Those are projects that are &lt;em&gt;used to&lt;/em&gt; helping people make their first contributions. Crazy as it seems, something like Servo can actually be an &lt;em&gt;easier&lt;/em&gt; place to start out that a much smaller project. Sure, the technical lift is higher, but there are also a lot more people actively invested in your success there.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Look for these!&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/p&gt;
&lt;p class="fragment" data-fragment-index="1"&gt;
&lt;img src="/talks/rust-belt-rust/img/help-wanted.png" alt="help wanted" /&gt; &lt;img src="/talks/rust-belt-rust/img/easy.png" alt="help wanted" /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pick big projects!&lt;!-- .element: class="fragment" data-fragment-index="2" --&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="when-where-if-youre-experienced" class="level4"&gt;
&lt;h4&gt;When &amp;amp; where: if you’re experienced&lt;/h4&gt;
&lt;p&gt;On the other hand, if you’re already comfortable contributing and have some idea what you’re best at, you might look around and find smaller projects with fewer contributors which look interesting and &lt;em&gt;could use the help&lt;/em&gt;. Because again, there’s always more work to do than hands to do it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="when-where-project-lifecycles" class="level4"&gt;
&lt;h4&gt;When &amp;amp; where: project lifecycles&lt;/h4&gt;
&lt;p&gt;The second consideration dovetails nicely with that: &lt;strong&gt;where is a given project at in its life-cycle?&lt;/strong&gt; As enthusiastic as you might be about some project, if it’s a small project and it’s already in a “basically done” state, well… that’s probably a lot less useful a place to invest your time &lt;em&gt;if&lt;/em&gt; you’re focusing on code. On the other hand, it’s often the case that projects are “done” in terms of code, but desperately need help with documentation, their web site, etc. Big projects, or projects just starting out, are often better places to dig in if you’re really looking to flex your coding muscles (but both of them &lt;em&gt;also&lt;/em&gt; usually have huge needs in terms of all those non-code avenues we talked about).&lt;/p&gt;
&lt;p&gt;Where is a given project at in its life-cycle?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;small project, basically done?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;need docs?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;big project, a billion needs?&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;li&gt;etc.&lt;!-- .element: class="fragment" data-fragment-index="1" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Think about those, and then see if you can pick a project that’s a good fit for your current skillset and comfort level and jump in!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that’s a good place to wrap things up! I hope you’re feeling like &lt;em&gt;you can do this&lt;/em&gt;. Because you can. Open-source a project of your own and see where it goes. Write a blog post. Add some docs. Open a PR. Record a podcast. Make some videos. Start a meet up. Become a contributor! And remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anyone can contribute meaningfully.&lt;/li&gt;
&lt;li&gt;People can contribute in a stunning variety of ways.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="more-info" class="level2"&gt;
&lt;h2&gt;More info&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rust-lang.org/en-US/contribute.html" class="uri"&gt;https://www.rust-lang.org/en-US/contribute.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.rust-lang.org/2017/09/18-impl-future-for-rust.html" class="uri"&gt;https://blog.rust-lang.org/2017/09/18-impl-future-for-rust.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://internals.rust-lang.org/" class="uri"&gt;https://internals.rust-lang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#rust&lt;/code&gt;, &lt;code&gt;#rust-community&lt;/code&gt;, &lt;code&gt;#rust-internals&lt;/code&gt;, etc. on irc.mozilla.org&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
</content><category term="talks"></category><category term="software development"></category><category term="rust"></category><category term="open source software"></category></entry><entry><title>Announcing True Myth 1.0</title><link href="http://www.chriskrycho.com/2017/announcing-true-myth-10.html" rel="alternate"></link><published>2017-11-01T08:40:00-04:00</published><updated>2017-11-01T08:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-11-01:/2017/announcing-true-myth-10.html</id><summary type="html">&lt;p&gt;I’m pleased to announce the release of &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth 1.0&lt;/a&gt;! True Myth is a library I’ve been working on over the last month or so, for saner programming in JavaScript, with first-class support for TypeScript (and Flow).&lt;/p&gt;
&lt;p&gt;True Myth provides standard, type-safe wrappers and helper functions to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m pleased to announce the release of &lt;a href="https://github.com/chriskrycho/true-myth"&gt;True Myth 1.0&lt;/a&gt;! True Myth is a library I’ve been working on over the last month or so, for saner programming in JavaScript, with first-class support for TypeScript (and Flow).&lt;/p&gt;
&lt;p&gt;True Myth provides standard, type-safe wrappers and helper functions to help you with two &lt;em&gt;extremely&lt;/em&gt; common cases in programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not having a value—which it solves with a &lt;code&gt;Maybe&lt;/code&gt; type and associated helper functions and methods&lt;/li&gt;
&lt;li&gt;having a &lt;em&gt;result&lt;/em&gt; where you need to deal with either success or failure—which it solves with a &lt;code&gt;Result&lt;/code&gt; type and associated helper functions and methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could implement all of these yourself – it’s not hard! – but it’s much easier to just have one extremely well-tested library you can use everywhere to solve this problem once and for all.&lt;/p&gt;
&lt;p&gt;Even better to get one of these with no runtime overhead for using it other than the very small cost of some little container objects—which we get by leaning hard on the type systems in TypeScript or Flow!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;/strong&gt; If you’re familiar with &lt;a href="http://folktale.origamitower.com"&gt;Folktale&lt;/a&gt; or &lt;a href="https://sanctuary.js.org"&gt;Sanctuary&lt;/a&gt;, this has a lot in common with them—its main differences are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;True Myth has a much smaller API surface than they do&lt;/li&gt;
&lt;li&gt;True Myth aims to be much more approachable for people who aren’t already super familiar with functional programming concepts and jargon&lt;/li&gt;
&lt;li&gt;True Myth does &lt;em&gt;no&lt;/em&gt; runtime checking of your types, whereas both those libraries do by default—it relies on TypeScript or Flow instead&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I really like both of those libraries, though, so you might check them out as well!&lt;/p&gt;
&lt;section id="maybe" class="level2"&gt;
&lt;h2&gt;&lt;code&gt;Maybe&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes you don’t have a value. In JavaScript land, we usually represent that with either &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, and then trying to program defensively in the places we &lt;em&gt;think&lt;/em&gt; we might get &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; as arguments to our functions. For example, imagine an endpoint which returns a JSON payload shaped like this:&lt;/p&gt;
&lt;pre class="json"&gt;&lt;code&gt;{
  &amp;quot;hopefullyAString&amp;quot;: &amp;quot;Hello!&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But sometimes it might come over like this:&lt;/p&gt;
&lt;pre class="json"&gt;&lt;code&gt;{
  &amp;quot;hopefullyAString&amp;quot;: null
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or even like this:&lt;/p&gt;
&lt;pre class="json"&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assume we were doing something simple, like logging the length of whatever string was there or logging a default value if it was absent. In normal JavaScript we’d write something like this:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;function logThatValue(thePayload) {
  const length = !!thePayload.hopefullyAString
    ? thePayload.hopefullyAString.length
    : 0;
  
  console.log(length);
}

fetch(someUrl)
  .then(response =&amp;gt; response.json())
  .then(logThatValue);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This isn’t a big deal right here… but—and this &lt;em&gt;is&lt;/em&gt; a big deal—we have to remember to do this &lt;em&gt;everywhere&lt;/em&gt; we interact with this payload. &lt;code&gt;hopefullyAString&lt;/code&gt; can &lt;em&gt;always&lt;/em&gt; be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; everywhere we interact with it, anywhere in our program. 😬&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Maybe&lt;/code&gt; is our escape hatch. If, instead of just naively interacting with the payload, we do a &lt;em&gt;very small&lt;/em&gt; amount of work up front to normalize the data and use a &lt;code&gt;Maybe&lt;/code&gt; instead of passing around &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; values, we can operate safely on the data throughout our application. If we have something, we get an instance called &lt;code&gt;Just&lt;/code&gt;—as in, “What’s in this field? Just a string” or “Just the string ‘hello’”. If there’s nothing there, we have an instance called &lt;code&gt;Nothing&lt;/code&gt;. &lt;code&gt;Just&lt;/code&gt; is a wrapper type that holds the actual value in it. &lt;code&gt;Nothing&lt;/code&gt; is a wrapper type which has no value in it. But both of them are concrete types and you’ll never get an &lt;code&gt;undefined is not an object&lt;/code&gt; error when trying to use them!&lt;/p&gt;
&lt;p&gt;Both of them have all the same methods available on them, and the same static functions to work on them. And, importantly, you can do a bunch of neat things with a &lt;code&gt;Maybe&lt;/code&gt; instance without checking whether it’s a &lt;code&gt;Nothing&lt;/code&gt; or a &lt;code&gt;Just&lt;/code&gt;. For example, if you want to double a number if it’s present and do nothing if it isn’t, you can use the &lt;code&gt;Maybe.map&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;
const hereIsANumber = Maybe.just(12);          // Just(12)
const noNumberHere = Maybe.nothing&amp;lt;number&amp;gt;();  // Nothing

const double = (n: number) =&amp;gt; n * 2;
hereIsANumber.map(double);  // Just(24)
noNumberHere.map(double);   // Nothing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are &lt;a href="https://true-myth.js.org/modules/_maybe_.html"&gt;a &lt;em&gt;lot&lt;/em&gt;&lt;/a&gt; of those helper functions and methods! Just about any way you would need to interact with a &lt;code&gt;Maybe&lt;/code&gt; is there.&lt;/p&gt;
&lt;p&gt;So now that we have a little idea what &lt;code&gt;Maybe&lt;/code&gt; is for and how to use it, here’s that same example, but rewritten to normalize the payload using a &lt;code&gt;Maybe&lt;/code&gt; instance. We’re using TypeScript, so we will get a compiler error if we don’t handle any of these cases right—or if we try to use the value at &lt;code&gt;hopefullyAString&lt;/code&gt; directly after we’ve normalized it!&lt;/p&gt;
&lt;p&gt;(Note that &lt;code&gt;Maybe.of&lt;/code&gt; will construct either a &lt;code&gt;Maybe.Just&lt;/code&gt; if the string is present, or &lt;code&gt;Maybe.Nothing&lt;/code&gt; if the value supplied to it is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.)&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Maybe from &amp;#39;true-myth/maybe&amp;#39;;

type Payload = { hopefullyAString?: string };
type NormalizedPayload = { hopefullyAString: Maybe&amp;lt;string&amp;gt; };

function normalize(payload: Payload): NormalizedPayload {
  return {
    hopefullyAString: Maybe.of(payload.hopefullyAString)
  };
}

function logThatValue(payload: NormalizedPayload) {
  const length = payload.hopefullyAString.mapOr(0, s =&amp;gt; s.length);
  console.log(length);
}

fetch(someUrl)
  .then(response =&amp;gt; response.json())
  .then(normalize)
  .then(logThatValue);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you might be thinking, &lt;em&gt;Sure, but we could get the same effect by just supplying a default value when we deserialize the data.&lt;/em&gt; That’s true, you could! Here, for example, you could just normalize it to an empty string. And of course, if just supplying a default value at the API boundary is the right move, you can still do that. &lt;code&gt;Maybe&lt;/code&gt; is another tool in your toolbox, not something you’re &lt;em&gt;obligated&lt;/em&gt; to use everywhere you can.&lt;/p&gt;
&lt;p&gt;However, sometimes there isn’t a single correct default value to use at the API boundary. You might need to handle that missing data in a variety of ways throughout your application. For example, what if you need to treat “no value” distinctly from “there’s a value present, and it’s an empty string”? &lt;em&gt;That’s&lt;/em&gt; where &lt;code&gt;Maybe&lt;/code&gt; comes in handy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="result" class="level2"&gt;
&lt;h2&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Another common scenario we find ourselves in is dealing with operations which might fail. There are a couple patterns we often use to deal with this: &lt;em&gt;callbacks&lt;/em&gt; and &lt;em&gt;exceptions&lt;/em&gt;. There are major problems with both, especially around reusability and composability.&lt;/p&gt;
&lt;p&gt;The callback pattern (as in e.g. Node) encourages a style where literally every function starts with the exact same code:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;function getMeAValue(err, data) {
  if (err) {
    return handleErr(err);
  }
  
  // do whatever the *actual* point of the function is
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two major problems with this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It’s incredibly repetitive – the very opposite of “Don’t Repeat Yourself”. We wouldn’t do this with &lt;em&gt;anything&lt;/em&gt; else in our codebase!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It puts the error-handling right up front and &lt;em&gt;not in a good way.&lt;/em&gt; While we want to have a failure case in mind when designing the behavior of our functions, it’s not usually the &lt;em&gt;point&lt;/em&gt; of most functions – things like &lt;code&gt;handleErr&lt;/code&gt; in the above example being the exception and not the rule. The actual meat of the function is always after the error handling.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But if we’re not using some similar kind of callback pattern, we usually resort to exceptions. But exceptions are unpredictable: you can’t know whether a given function invocation is going to throw an exception until runtime as someone calling the function. No big deal if it’s a small application and one person wrote all the code, but with even a few thousand lines of code or two developers, it’s very easy to miss that. And then this happens:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// in one part of the codebase
function getMeAValue(url) {
  if (isMalformed(url)) {
    throw new Error(`The url `${url}` is malformed!`);
  }
  
  // do something else to load data from the URL
  return data;
}

function render(toRender) {
  // if toRender can&amp;#39;t generate valid HTML, throw Error(&amp;quot;invalid HTML&amp;quot;);
  // if it can, theRenderedHTML;
}

function setDom(html) {
  /* magic to render into DOM */
}

// somewhere else in the codebase -- throws an exception
const badUrl = &amp;#39;http:/www.google.com&amp;#39;;  // missing a slash
const response = getMeAValue(badUrl);  // throws here

// we never get here, but it could throw too
const htmlForPage = render(value);

// so we definitely can&amp;#39;t get here safely
setDom(htmlForPage);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice: there’s no way for the caller to know that the function will throw. Perhaps you’re very disciplined and write good docstrings for every function – &lt;em&gt;and&lt;/em&gt; moreover, perhaps everyone’s editor shows it to them &lt;em&gt;and&lt;/em&gt; they pay attention to that briefly-available popover. More likely, though, this exception throws at runtime and probably as a result of user-entered data – and then you’re chasing down the problem through error logs.&lt;/p&gt;
&lt;p&gt;More, if you &lt;em&gt;do&lt;/em&gt; want to account for the reality that any function anywhere in JavaScript might actually throw, you’re going to write something like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;try {
  const badUrl = &amp;#39;http:/www.google.com&amp;#39;;  // missing a slash
  const response = getMeAValue(badUrl);  // throws here
  
  // we never get here, but it could throw too
  const htmlForPage = render(value);
  
  // so we definitely can&amp;#39;t get here safely
  setDom(htmlForPage);
} catch (e) {
  handleErr(e);  // ends up here
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is like the Node example &lt;em&gt;but even worse&lt;/em&gt; for repetition!&lt;/p&gt;
&lt;p&gt;And TypeScript and Flow can’t help you here! They don’t have type signatures to say “This throws an exception!” (TypeScript’s &lt;code&gt;never&lt;/code&gt; might come to mind, but it might mean lots of things, not just exception-throwing.)&lt;/p&gt;
&lt;p&gt;Instead, we can use a &lt;code&gt;Result&lt;/code&gt; to get us a container type, much like &lt;code&gt;Maybe&lt;/code&gt;, to let us deal with this scenario. A &lt;code&gt;Result&lt;/code&gt; is either an &lt;code&gt;Ok&lt;/code&gt; wrapping around a value (like &lt;code&gt;Just&lt;/code&gt; does) or an &lt;code&gt;Err&lt;/code&gt; wrapping around some type defining what went wrong (&lt;em&gt;not&lt;/em&gt; like &lt;code&gt;Nothing&lt;/code&gt;, which has no contents). Both of them have the same sets of methods on them, and the same static functions which can operate on them.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Result from &amp;#39;true-myth/result&amp;#39;;

type Payload = {/* details of the payload...*/}

function getMeAValue(url: string): Result&amp;lt;Payload, string&amp;gt; {
  if (isMalformed(url)) {
    return Result.err(`The url &amp;#39;${url}&amp;#39; is malformed`);
  }
  
  // do something else to load data from the url
  return Result.ok(data);
}

function render(toRender: string): Result&amp;lt;HTMLElement, string&amp;gt; {
  // if toRender can&amp;#39;t generate valid HTML, return Err(&amp;quot;invalid HTML&amp;quot;);
  // if it can, return Ok(theRenderedHTML);
}

function setDom(html: HTMLElement) {
  
}

// somewhere else in the codebase -- no exception this time!
const badUrl = &amp;#39;http:/www.google.com&amp;#39;;  // missing a slash

// value = Err(The url &amp;#39;${http:/www.google.com}&amp;#39; is malformed)
const value = getMeAValue(badUrl);

// htmlForPage = the same error! or, if it was Ok, could be a different
// `Err` (because of how `andThen` works).
const htmlForPage = value.andThen(render);

// we can&amp;#39;t just invoke `setDom` because it doesn&amp;#39;t take a `Result`.
value.match({
  Ok: html =&amp;gt; setDom(html);
  Err: reason =&amp;gt; alert(`Something went seriously wrong here! ${reason}`);
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we have a &lt;code&gt;Result&lt;/code&gt; instance, we can perform tons of operations on whether it’s &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;, just as we could with &lt;code&gt;Maybe.Just&lt;/code&gt; and &lt;code&gt;Maybe.Nothing&lt;/code&gt;, until we &lt;em&gt;need&lt;/em&gt; the value. Maybe that’s right away. Maybe we don’t need it until somewhere else deep in our application! Either way, we can deal with it easily enough, and have type safety throughout!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Give it a spin!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yarn add true-myth&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install true-myth&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can even just &lt;code&gt;ember install true-myth&lt;/code&gt; and use it if you’re using Ember (in which case I encourage you to also use &lt;a href="https://github.com/typed-ember/ember-cli-typescript"&gt;ember-cli-typescript&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know what you think – if there’s stuff missing, &lt;a href="https://github.com/chriskrycho/true-myth"&gt;open issues&lt;/a&gt;! And if it’s just not to your taste, again, I encourage you to take a look at &lt;a href="http://folktale.origamitower.com"&gt;Folktale&lt;/a&gt; and &lt;a href="https://sanctuary.js.org"&gt;Sanctuary&lt;/a&gt;, which are both excellent and land in very different design spaces in many ways.&lt;/p&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="libraries"></category><category term="programming languages"></category><category term="typescript"></category><category term="functional programming"></category><category term="true myth"></category></entry><entry><title>Icehenge</title><link href="http://www.chriskrycho.com/2017/icehenge.html" rel="alternate"></link><published>2017-08-14T21:00:00-04:00</published><updated>2017-08-14T21:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-08-14:/2017/icehenge.html</id><summary type="html">Kim Stanley Robinson comes highly recommended, so in a moment of overwhelming need to read science fiction the other evening, I snagged a novel of his in ebook form, and read it over the weekend. I loved it.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I keep my book review ratings simple—they’re either &lt;em&gt;required&lt;/em&gt;, &lt;em&gt;recommended&lt;/em&gt;, &lt;em&gt;recommended with qualifications&lt;/em&gt;, or &lt;em&gt;not recommended&lt;/em&gt;. If you want the TL;DR, this is it:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended:&lt;/strong&gt; this is good sci-fi—the kind that makes you think while also being a bit of a page-turner.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Kim Stanley Robinson comes highly recommended, so in a moment of overwhelming need to read science fiction the other evening, I snagged a novel of his in ebook form, and read it over the weekend. I loved it.&lt;/p&gt;
&lt;p&gt;Do you remember being 6? I have only the barest glimmers of it. An image will come rushing back sometimes, of something I experienced then—a moment of delight, or horror, all at once, full of sensation and bright color and feeling. Or a smell will bring something from my teenage years back: cut grass makes me think of two-a-day practices for football, without fail. But the past is behind me in a way that is hard to describe, and which I have often thought about, but rarely so much as in the days I was reading (and in the days since finished reading) this little novel about the politics of Mars and a slowly-colonizing Solar System.&lt;/p&gt;
&lt;p&gt;Because &lt;em&gt;Icehenge&lt;/em&gt;, its name notwithstanding, really isn’t much at all about a massive Stonehenge-like construction, all of ice, on Pluto. It’s about memory, and what it would be like to live to 600 in a body that ages slowly but with a mind still incapable of holding on to the past, and the stories we tell to make sense of the world, and the hunger for truth, and the things that get in the way of the pure pursuit of the truth, and power, and loneliness, and what the past means and how we get at it in the present.&lt;/p&gt;
&lt;p&gt;I expect to be reading considerably more of KSR.&lt;/p&gt;
</content><category term="book reviews"></category><category term="science fiction"></category><category term="mars"></category></entry><entry><title>Beren and Lúthien</title><link href="http://www.chriskrycho.com/2017/beren-and-luthien.html" rel="alternate"></link><published>2017-08-09T18:00:00-04:00</published><updated>2017-08-09T18:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-08-09:/2017/beren-and-luthien.html</id><summary type="html">Recommended: Beren and Lúthien is a beautiful collection detailing the progression of what was perhaps J. R. R. Tolkien's personally most-treasured tale he wrote. 
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I keep my book review ratings simple—they’re either &lt;em&gt;required&lt;/em&gt;, &lt;em&gt;recommended&lt;/em&gt;, &lt;em&gt;recommended with qualifications&lt;/em&gt;, or &lt;em&gt;not recommended&lt;/em&gt;. If you want the TL;DR, this is it:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended:&lt;/strong&gt; This is a beautiful book—not, perhaps, for everyone, but truly delightful for its intended audience.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Beren and Lúthien&lt;/em&gt; is a beautiful collection detailing the progression of what was perhaps J. R. R. Tolkien’s personally most-treasured tale he wrote. This slim little volume was also likely the last of Tolkien’s works to be published by his now very-old son Christopher, who has made the history of his father’s literary creation his own latter life’s work. At 92, he is (as he notes in this volume’s foreword) unlikely to publish any more material. This was a good note to end on.&lt;/p&gt;
&lt;p&gt;But this is not a book I would hand to just anyone. As a picture of the development of one of the central tales in Tolkien’s legendarium, it is fascinating—though little of the material is new; much of it was presented already in the various histories Christopher Tolkien compiled over the past decades. For a casual reader of fantasy, or even a casual fan of Tolkien himself, it is unlikely to be interesting at all. But for those who love Tolkien’s work, and especially those who love this particular tale, this is a little treasure.&lt;/p&gt;
&lt;p&gt;The version of the tale in &lt;em&gt;The Silmarillion&lt;/em&gt; is quite beautiful in its own right—I read it aloud to Jaimie many years ago, on a night when the only thing that would calm baby Ellie was the combination of Jaimie holding her and the sound of my voice, and it made Jaimie weep. Tolkien could do that. But the version in which his elegant and lyrical tone finds its fullest expression (and the best version of the tale) is here, in &lt;em&gt;The Lay of Leithian&lt;/em&gt;. The love story in poetic form—sadly, unfinished—is utterly lovely. I couldn’t have been happier, in literary terms, than when I was reading its many lines of coupled verse.&lt;/p&gt;
</content><category term="book-reviews"></category></entry><entry><title>Announcing ember-cli-typescript 1.0.0</title><link href="http://www.chriskrycho.com/2017/announcing-ember-cli-typescript-100.html" rel="alternate"></link><published>2017-08-08T09:00:00-04:00</published><updated>2017-08-08T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-08-08:/2017/announcing-ember-cli-typescript-100.html</id><summary type="html">A stable foundation for building Ember.js apps with TypeScript, and a roadmap toward a flourishing, TypeScript-friendly ecosystem in the future!
</summary><content type="html">&lt;p&gt;I’m extremely pleased to announce the release of &lt;a href="https://github.com/typed-ember/ember-cli-typescript/releases/tag/v1.0.0"&gt;ember-cli-typescript 1.0.0&lt;/a&gt;! You can get it the same way you do &lt;em&gt;any&lt;/em&gt; Ember addon:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a detailed walkthrough of adding TypeScript to your projects, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-1.html"&gt;Typing Your Ember, Part 1: Set your Ember.js project up to use TypeScript.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-2.html"&gt;Typing Your Ember, Part 2: Adding TypeScript to an existing Ember.js project.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what are we shipping today, and what’s on the roadmap?&lt;/p&gt;
&lt;section id="whats-in-1.0" class="level2"&gt;
&lt;h2&gt;What’s In 1.0?&lt;/h2&gt;
&lt;p&gt;This release is intentionally relatively minimal: the goal here is provide stable foundation for building Ember.js applications with TypeScript in the toolchain. This means that in any app you can install the add-on and just start &lt;a href="http://www.chriskrycho.com/2017/typing-your-ember-part-3.html"&gt;progressively converting your app over to TypeScript&lt;/a&gt;. However, we don’t expect to change the way you &lt;em&gt;use&lt;/em&gt; the addon at all in the foreseeable future.&lt;/p&gt;
&lt;p&gt;I’ll give you fair warning that there is one &lt;em&gt;major&lt;/em&gt; challenge you will find as you work with ember-cli-typescript today: the lack of type definitions for most projects, and the limits of the existing type definitions for Ember.js itself. That’s not as bad as it sounds, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;See the &lt;a href="#the-roadmap"&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt; below—we’re working on that, and you can help!&lt;/li&gt;
&lt;li&gt;I’ve been using TypeScript successfully in the app I work on at my day job for the last nine months or so. While the lack of (good or any) typings has had its frustrations, &lt;a href="https://www.dailydrip.com/blog/domain-driven-design-and-typed-functional-programming-in-typescript"&gt;TypeScript has already added a &lt;em&gt;lot&lt;/em&gt; of value for us&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="the-roadmap" class="level2"&gt;
&lt;h2&gt;The Roadmap&lt;/h2&gt;
&lt;p&gt;We have a bunch of things we’re actively working on and which you can expect to land in the next few weeks to months.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-1-a-prepublish-build-process-for-addons"&gt;1.1: A prepublish build process for addons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#community-driven-work-on-typings"&gt;Community-driven work on typings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="a-prepublish-build-process-for-addons" class="level3"&gt;
&lt;h3&gt;1.1: A prepublish build process for addons&lt;/h3&gt;
&lt;p&gt;The major priority for the 1.1 release is an npm prepublication step to generate JavaScript and typing files from add-ons which are using TypeScript. Currently, addons have to take TypeScript as a full dependency, not a dev dependency, because they currently just ship the &lt;code&gt;.ts&lt;/code&gt; files up to npm and they have to be compiled in your app at build time.&lt;/p&gt;
&lt;p&gt;We really don’t want to make any app developer who is using your addon download either the TypeScript files or &lt;em&gt;especially&lt;/em&gt; the TypeScript compiler if we can avoid it. There are three reasons for this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;The fact that an add-on is developed in TypeScript really shouldn’t affect app developers. If they’re writing a plain-old JavaScript app, the fact that your addon is originally written in TypeScript is irrelevant to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript is &lt;em&gt;large&lt;/em&gt;. The v2.4 installation I have in the app I’m working on right now weights 26MB. If I were using four add-ons which required TypeScript, my install cost could easily go up by a hundred megabytes. That’s not always a huge deal on a corporate network, but even where people &lt;em&gt;do&lt;/em&gt; have good download speeds, it’s a hit to developer time. Every time someone has to reinstall all the dependencies, those 26MB have to come down again. If TypeScript becomes common, you might suddenly find yourself with addons using 2.4, 2.5, 2.6, etc.; it’s not hard to see that ballooning up the size of your installation in a really non-trivial way: 26MB × &lt;em&gt;n&lt;/em&gt; versions of TypeScript = &lt;em&gt;do not want&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The TypeScript compilation step takes time. Addons can do this &lt;em&gt;once&lt;/em&gt; and save every consuming app build time. This isn’t the end of the world, but anything we can do to keep build times lower is a real win for developer productivity.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Accordingly the plan is to automatically add a build step which runs the TypeScript compiler on your addon and generates plain-old-JavaScript and the corresponding type definition files (&lt;code&gt;.d.ts&lt;/code&gt;) prior to publishing to npm. That way, TypeScript can remain a dev dependency (rather than a full dependency) of each addon, and not be installed alongside the addon for consumers. Just-JavaScript consumers can just consume the normal JavaScript generated by the build. TypeScript consumers will get the full benefits of the types via the generated typing files.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;should&lt;/em&gt; hopefully land by late August or early September. Fingers crossed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="community-driven-work-on-typings" class="level3"&gt;
&lt;h3&gt;Community-driven work on typings&lt;/h3&gt;
&lt;p&gt;The process of getting type definitions in place for &lt;em&gt;all&lt;/em&gt; of Ember.js and its ecosystem is way, &lt;em&gt;way&lt;/em&gt; too big for any one person or even a small handful of people to manage alone. This is something we’re going to take on as a community.&lt;/p&gt;
&lt;section id="new-typings-for-ember.js-itself" class="level4"&gt;
&lt;h4&gt;New typings for Ember.js itself&lt;/h4&gt;
&lt;p&gt;We’re actively working on type definitions for Ember which will give us actually-useful-and-correct type checking for Ember’s custom object model. Today, if you use &lt;code&gt;Ember.get&lt;/code&gt; or &lt;code&gt;Ember.set&lt;/code&gt;, you get &lt;em&gt;no&lt;/em&gt; help from the type system. When we finish, those will be type-checked by the compiler and will error if you try to assign the wrong values!&lt;/p&gt;
&lt;p&gt;Importantly, the typings we’re shipping will be backwards compatible with the existing Ember API, but will also include support for the &lt;a href="https://github.com/emberjs/rfcs/pull/176"&gt;RFC #176 JavaScript Modules API&lt;/a&gt;. TypeScript’s module definition system will let us support both in parallel, and we will. Backwards compatibility and &lt;em&gt;stability without stagnation&lt;/em&gt; are things we value for this addon just as much as the rest of the Ember.js ecosystem does.&lt;/p&gt;
&lt;p&gt;This effort, led by Derek Wickern (&lt;a href="https://github.com/dwickern"&gt;@dwickern&lt;/a&gt;), is ongoing in the &lt;a href="https://github.com/typed-ember/ember-typings"&gt;typed-ember/ember-typings&lt;/a&gt; repository. (If you’re wondering why we’re not just doing it in the DefinitelyTyped repository, see below.) We probably won’t be able to get to 100% of everything the Ember Object model does—Ember’s custom object model is &lt;em&gt;incredibly&lt;/em&gt; sophisticated, and TypeScript actually &lt;a href="https://github.com/Microsoft/TypeScript/issues/16699"&gt;still can’t&lt;/a&gt; &lt;em&gt;totally&lt;/em&gt; express it—but Derek already has most of it working. This will be a &lt;em&gt;huge&lt;/em&gt; step forward.&lt;/p&gt;
&lt;p&gt;To be clear, we’re not forking the way you get types. We’ll upstream all of this work to DefinitelyTyped as soon as we have them working, but the DefinitelyTyped repo is &lt;em&gt;huge&lt;/em&gt; and very busy; it’s not a great place to do this kind of substantial rework of existing types. And we really don’t need to have all the &lt;em&gt;other&lt;/em&gt; type definitions DefinitelyTyped supplies in our way as we’re working, either. Having a separate repo gives us a place we can work on types, try them out as a community, etc. before creating PRs on DefinitelyTyped and publishing them officially.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="addon-typings" class="level4"&gt;
&lt;h4&gt;Addon typings&lt;/h4&gt;
&lt;p&gt;We need to get type definitions in place for the addons in the ecosystem! That way when you’re using, say, &lt;a href="https://github.com/simplabs/ember-test-selectors"&gt;ember-test-selectors&lt;/a&gt;, you’ll get an error if you try to use the functions it provides incorrectly. Right now, every addon out there is missing types entirely, so everything gets treated as taking the useless &lt;code&gt;any&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;In a week or so, I’ll have a blog post with a fleshed-out &lt;a href="https://github.com/typed-ember/ember-cli-typescript/issues/48"&gt;quest issue&lt;/a&gt; for tackling it in detail, but here’s the short version: we’re going to try to get type definitions for all the top addons in the ecosystem so that it’s &lt;em&gt;easy&lt;/em&gt; to use TypeScript in your Ember.js app. That blog post and quest issue will explain how to write good typings, and also how to contribute them to a project which may or may not be interested in using TypeScript itself.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="typing-your-ember"></category><category term="typescript"></category><category term="emberjs"></category></entry><entry><title>Typing Your Ember, Part 4</title><link href="http://www.chriskrycho.com/2017/typing-your-ember-part-4.html" rel="alternate"></link><published>2017-07-31T19:30:00-04:00</published><updated>2017-07-31T19:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-31:/2017/typing-your-ember-part-4.html</id><summary type="html">In the last post, I mentioned putting your business logic outside Ember's tools and treating it as plain-old TypeScript. Here's what that might look like.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-3"&gt;previous post&lt;/a&gt; in this series, I noted that one of the most effective current strategies for using TypeScript effectively in an Ember app is to push as much of your logic possible &lt;em&gt;out&lt;/em&gt; of the Ember layer and into plain-old-TypeScript. Unsurprisingly, people had some questions about how to do this, so here’s a brief example.&lt;/p&gt;
&lt;p&gt;As I suggested in that post, we now have a &lt;code&gt;lib&lt;/code&gt; directory in our app, and all new business logic for the app lives there instead of directly on e.g. an &lt;code&gt;Ember.Service&lt;/code&gt; instance. Our current directory structure looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app/
  adapters/
  components/
  config/
  controllers/
  helpers/
  initializers/
  instance-initializers
  lib/    &amp;lt;-- this is the one we care about
    billing/
    utilities/
      numeric.ts
  routes/
  serializers/
  services/
  templates/
  transforms
  app.ts
  router.ts
tests/
package.json
bower.json
// etc.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main thing to notice here is that &lt;code&gt;lib&lt;/code&gt; is just a directory in the app like any other, and its child directories likewise. This means that Ember &lt;abbr title="command line interface"&gt;CLI&lt;/abbr&gt; will resolve it just like normal, too—there’s no need to mess with the resolver or anything.&lt;/p&gt;
&lt;p&gt;Say we had a set of numeric utilities in that &lt;code&gt;numeric.ts&lt;/code&gt; file like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Make text out of numbers, like &amp;quot;1st&amp;quot;, &amp;quot;2nd&amp;quot;, &amp;quot;3rd&amp;quot;, etc.
export const withEnding = (val: number): string =&amp;gt; {
  // boring implementation details elided
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then using it in an Ember component might look like this (where &lt;code&gt;currentNumber&lt;/code&gt; is passed into the component):&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { get, set } from &amp;#39;@ember/object&amp;#39;;
import * as Num from &amp;#39;../lib/utilities/numeric&amp;#39;;

export default Component.extend({
  init() {
    const currentNumber = get(this, &amp;#39;currentNumber&amp;#39;);
    const displayNumber = Num.withEnding(currentNumber);
    set(this, &amp;#39;displayNumber&amp;#39;, displayNumber);
  },
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might wonder why we’d do this instead of using an &lt;code&gt;Ember.Service&lt;/code&gt;. In the above example, I could of course make &lt;code&gt;Num&lt;/code&gt; a service and inject it…&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { getProperties, set } from &amp;#39;@ember/object&amp;#39;;
import { inject } from &amp;#39;@ember/service&amp;#39;;

export default Component.extend({
  num: inject(),

  init() {
    const { currentNumber, num } =
      getProperties(this, &amp;#39;currentNumber&amp;#39;, &amp;#39;num&amp;#39;);

    const displayNumber = num.withEnding(currentNumber);
    set(this, &amp;#39;displayNumber&amp;#39;, displayNumber);
  },
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…but that doesn’t actually &lt;em&gt;gain&lt;/em&gt; me anything—the service here is just a way of exposing a function, after all—and it actually makes everything a bit more verbose. It also decreases the overall analyzability of this for things like tree-shaking: that module dependency is now something that Ember itself has to manage, instead of being statically analyzable at build time. Taking this approach also diminishes the reusability of any numeric helpers I put in there. If we couple them to an &lt;code&gt;Ember.Service&lt;/code&gt;, instead of using an ES6 module, they would stop being things we can easily reuse in non-Ember projects. Instead, by using modules, we leave ourselves the ability to easily extract those numeric helpers, and publish them for either internal or external consumption.&lt;/p&gt;
&lt;p&gt;Along those lines, we actually have a module to support &lt;abbr title="Block-Element-Modifier"&gt;&lt;a href="https://en.bem.info/methodology/quick-start/"&gt;BEM&lt;/a&gt;&lt;/abbr&gt; with Ember Components—and we plan to extract both the basic TypeScript library as well as a &lt;code&gt;BemComponent&lt;/code&gt; Ember-specific wrapper as open-source libraries in the near future. Besides the Ember addon, &lt;em&gt;anyone&lt;/em&gt; will be able to consume and use the underlying TypeScript library, whatever their framework or library of choice. Importantly, that includes us in our other codebases, which include lots of old jQuery and some new React, and might include some Glimmer.js in the future. Any or all of our utilities for these kinds of things become reusable if they’re just TypeScript.&lt;/p&gt;
&lt;p&gt;Pragmatically, it’s also just easier to do and get good help from TypeScript by going this way. It also means that unit-testing requires &lt;em&gt;no&lt;/em&gt; context from Ember whatsoever, which keeps those tests lighter and faster. Even though Ember’s unit tests are already super quick, when you have hundreds or thousands of unit tests, every little bit matters. It also, and probably even more importantly, means there are fewer places where you could mess things up when configuring tests—not that I have any experience messing up test configurations in Ember!&lt;/p&gt;
&lt;p&gt;One important thing to note is that this all works best with Ember—by far—when your &lt;code&gt;lib&lt;/code&gt; modules aren’t managing stateful objects, but rather defining data structures and functions which just transform those structures in some way. This approach is a great fit for us, because we’re increasingly writing a lot of our business and even &lt;abbr title="user interface"&gt;UI&lt;/abbr&gt; logic in terms of &lt;a href="http://www.chriskrycho.com/2016/what-is-functional-programming.html#pure-functions"&gt;pure functions&lt;/a&gt; which transform simple “record” types. That keeps each controller, route, component, or service doing relatively little work: they are responsible for getting and passing around data in the application, and for triggering actions—but they’re not responsible for &lt;em&gt;understanding&lt;/em&gt; or &lt;em&gt;manipulating&lt;/em&gt; that data. Meanwhile the module code doesn’t do &lt;em&gt;any&lt;/em&gt; stateful work; there’s no mutation—just boring, input-to-output functions.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; By contrast, if you’re dealing with stateful objects, you’re apt to end up running into places where you have lifecycle concerns, and that’s where Ember excels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In summary:&lt;/strong&gt; in this model, Ember handles all the lifecycle and view management, and is responsible for sending data in and out of the application. Plain old modules handle defining what the core internal data types are, and for manipulating, transforming, and creating data.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re wondering: we’re not using anything like Redux or Immutable.js yet, but both &lt;a href="https://github.com/ember-redux/ember-redux"&gt;ember-redux&lt;/a&gt; and &lt;a href="https://github.com/rtfeldman/seamless-immutable"&gt;seamless-immutable&lt;/a&gt; would be great fits for the way we’re building the app at this point, and it’s likely at least &lt;a href="https://github.com/ember-redux/ember-redux"&gt;ember-redux&lt;/a&gt; will become part of our stack in the relatively near future.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="typescript"></category><category term="typing-your-ember"></category></entry><entry><title>Typing Your Ember, Part 3</title><link href="http://www.chriskrycho.com/2017/typing-your-ember-part-3.html" rel="alternate"></link><published>2017-07-28T12:00:00-04:00</published><updated>2017-07-28T12:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-28:/2017/typing-your-ember-part-3.html</id><summary type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-1"&gt;first&lt;/a&gt; of this series, I described how to set up a brand new Ember.js app to use TypeScript. In the &lt;a href="/2017/typing-your-ember-part-2"&gt;second&lt;/a&gt; part, walked through adding TypeScript to an existing Ember.js app. In this part, I’m going to talk about using TypeScript effectively in a modern Ember.js app.&lt;/p&gt;
&lt;section id="heavy-lifting-so-so-results" class="level2"&gt;
&lt;h2&gt;Heavy lifting, so-so results&lt;/h2&gt;
&lt;p&gt;Let’s get this out of the way up front: right now, using types in anything which extends &lt;code&gt;Ember.Object&lt;/code&gt; is going to be a lot of work for a relatively low reward. &lt;code&gt;Ember.Object&lt;/code&gt; laid the foundation for the modern JavaScript class system (and thus the TypeScript class system), but it has a huge downside: it’s string keys and referennces all the way down. This kind of thing is just normal Ember code—and note all the string keys:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default Component.extend({
  someProperty: &amp;#39;with a string value&amp;#39;,
  someOther: computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty = get(this, &amp;#39;someProperty&amp;#39;);
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }),
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this comes out to—even with a lot of the very helpful changes made to TypeScript itself in the 2.x series to help support object models like this one—is a lot of work adding types inline, and having to be really, really careful that your types are &lt;em&gt;correct&lt;/em&gt;. If that property you’re &lt;code&gt;Ember.get&lt;/code&gt;-ing can ever be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, you’d better write the type as &lt;code&gt;string | void&lt;/code&gt; instead of just &lt;code&gt;string&lt;/code&gt;. For example: this code is written with the correct types:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default Component.extend({
  someProperty: &amp;#39;with a string value&amp;#39;,  // no type annotation
  someOther: computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty: string = get(this, &amp;#39;property&amp;#39;);
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }),
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note two important things about it, however:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;TypeScript does not (and, with the &lt;em&gt;current&lt;/em&gt; typings for Ember, cannot) figure out the type of &lt;code&gt;someProperty&lt;/code&gt; from this definition; &lt;code&gt;get&lt;/code&gt; currently just hands back &lt;code&gt;any&lt;/code&gt; as the type of these kinds of things. That type annotation is necessary for you to get any mileage out of TypeScript &lt;em&gt;at all&lt;/em&gt; in a computed property like this.&lt;/li&gt;
&lt;li&gt;If, anywhere in your code, you &lt;em&gt;set&lt;/em&gt; the value of &lt;code&gt;someProperty&lt;/code&gt;—including to &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, or to &lt;code&gt;{ some: 'object' }&lt;/code&gt;—this could fail.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately, this second point means that TypeScript actually &lt;em&gt;can’t&lt;/em&gt; guarantee this the way we’d like. There’s hope coming for this in the future in several ways—more on that in a moment—but for now, I’ll summarize this by saying TypeScript is really helpful &lt;em&gt;within&lt;/em&gt; a function, once you’ve correctly defined the types you’re using. That means that you have to continue to be &lt;em&gt;very&lt;/em&gt; careful in what you’re doing in the context of any &lt;code&gt;Ember.Object&lt;/code&gt; instance, including all the Ember types which descend from &lt;code&gt;Object&lt;/code&gt;, and therefore also any types &lt;em&gt;you&lt;/em&gt; define which extend those in turn.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="future-niceties" class="level2"&gt;
&lt;h2&gt;Future niceties&lt;/h2&gt;
&lt;p&gt;In the future, we’ll be able to get away from a lot of these difficulties by way of two changes coming down the line: Ember embracing ES6 classes to replace its current custom object system, and embracing decorators as a way of replacing the current approach to computed properties. Let’s take those in turn.&lt;/p&gt;
&lt;section id="class-syntax" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;class&lt;/code&gt; syntax&lt;/h3&gt;
&lt;p&gt;When Ember was birthed in the early 2010s (first as “SproutCore 2” and then “Amber.js” and finally “Ember.js”), the JavaScript world was a &lt;em&gt;remarkably&lt;/em&gt; different place. The current pace of change year to year is nothing short of astounding for any language, but doubly so for one that sat languishing for so long. When Ember came around, something like today’s &lt;code&gt;class&lt;/code&gt; syntax was unimaginable, and so essentially every framework had its own class system of some sort. Over the past few years, with the proposal and standardization of the &lt;code&gt;class&lt;/code&gt; syntax as nice sugar for JavaScript’s prototypal inheritance, the need for a custom object and inheritance model has essentially gone away entirely. However, Ember doesn’t do breaking changes to its API just because; we as a community and the core team in particular have chosen to place a high priority on backwards compatibility. So any adoption of ES6 classes had to work in such a way that we got it &lt;em&gt;without&lt;/em&gt; making everyone rewrite their code from scratch.&lt;/p&gt;
&lt;p&gt;All of this impacts our story with TypeScript because, well, TypeScript for a long time couldn’t even begin to handle this kind of complexity (it’s a lot for a static type system to be able to express, given how &lt;em&gt;very&lt;/em&gt; dynamic the types here can be). As of TS 2.3, it can express &lt;em&gt;most&lt;/em&gt; of this object model, which is great… but it’s forever out of step with the rest of the JS/TS ecosystem, which is not so great. ES6 classes are first-class items in TypeScript and the support for getting types right within them is much, &lt;em&gt;much&lt;/em&gt; stronger than the support for the mixin/extension style object model Ember currently uses. So moving over to ES6 classes will make it much easier for TS to do the work of telling you &lt;em&gt;you’re doing it wrong with that class&lt;/em&gt;—and most importantly, it’ll be able to do that automatically, without needing the incredibly hairy type definition files that we’re still trying to write to get Ember’s current model represented. It Will Just Work. That means less maintenance work and fewer places for bugs to creep in.&lt;/p&gt;
&lt;p&gt;Gladly, we’re getting there! Already today, in the most recent versions of Ember, you can write this, and it will work:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;

export default class MyComponent extends Component {
  theAnswer = 42;
  andTheQuestionIs =
    &amp;quot;What is the meaning of life, the universe, and everything?&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I say “it will work,” I mean you can then turn around and write this in your &lt;code&gt;my-component.hbs&lt;/code&gt; and it’ll be exactly what you would expect from the old &lt;code&gt;Ember.Component.extend()&lt;/code&gt; approach:&lt;/p&gt;
&lt;pre class="hbs"&gt;&lt;code&gt;{{andTheQuestionIs}} {{the Answer}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is one serious limitation of that today: you can’t do that with a class you need to extend &lt;em&gt;further&lt;/em&gt;. So if, for example, you do like we do and customize the application route rinstance and then reuse that in a couple places, you’ll still have to use the old syntax:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Route from &amp;#39;@ember/route&amp;#39;;

export default Route.extend({
  // your customizations...
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But everywhere you consume that, you can use the new declaration:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import ApplicationRoute from &amp;#39;my-app/routes/application&amp;#39;;

export default class JustSomeRoute extends ApplicationRoute {
  model() {
    // etc.
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s more work afoot here, too, to make it so that these restrictions can go away entirely… but those changes will undoubtedly be covered in considerable detail on &lt;a href="http://www.emberjs.com/blog/"&gt;the official Ember blog&lt;/a&gt; when they roll out.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="decorators" class="level3"&gt;
&lt;h3&gt;Decorators&lt;/h3&gt;
&lt;p&gt;Now, that’s all well and good, but it doesn’t necessarily help with this scenario:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed, get } from &amp;#39;@ember/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;is just a string&amp;#39;;

  someOtherProperty = computed(&amp;#39;someProperty&amp;#39;, function() {
    const someProperty = get(this, &amp;#39;someProperty&amp;#39;);
    return someProperty + &amp;#39; and now I have appended to it&amp;#39;;
  });
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re back in the same spot of having unreliable types there. And again: some really careful work writing type definitions to make sure that &lt;code&gt;computed&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; both play nicely together with the class definition would help somewhat, but… well, it’d be nice if the types could just be determined automatically by TypeScript. (Also, there’s an &lt;a href="https://github.com/Microsoft/TypeScript/issues/16699"&gt;open bug&lt;/a&gt; on the TypeScript repository for trying to deal with &lt;code&gt;computed&lt;/code&gt;; suffice it to say that computed as it currently stands is a sufficiently complicated thing that even with all the incredible type machinery TS 2.1, 2.2, and 2.3 have brought to bear on exactly these kinds of problems… it still can’t actually model &lt;code&gt;computed&lt;/code&gt; correctly.)&lt;/p&gt;
&lt;p&gt;For several years now, Rob Jackson has maintained [a small library] that let you write computed properties with decorators. Up till recently, those were incompatible with TypeScript, because they used to work in the context of object literals rather than classes—and TypeScript never supported that. However, as of about a month ago as I’m writing this, they’ve been updated and they &lt;em&gt;do&lt;/em&gt; work with ES6 classes. So, given the class syntax discussed above, you can now &lt;code&gt;ember install ember-decorators&lt;/code&gt; and then do this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed } from &amp;#39;ember-decorators/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;with a string value&amp;#39;;

  @computed(&amp;#39;someProperty&amp;#39;)
  someOther(someProperty: string) {
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we can provide a type on the parameter to &lt;code&gt;someOther&lt;/code&gt;, which at a minimum makes this enormously cleaner and less repetitive syntactically. More interestingly, however, we &lt;em&gt;should&lt;/em&gt; (though no one has done it just yet, to my knowledge) be able to write a type definition for &lt;code&gt;@computed&lt;/code&gt; such that TypeScript will already know that &lt;code&gt;someProperty&lt;/code&gt; here &lt;em&gt;is&lt;/em&gt; a string, because it’ll have the context of the class in which it’s operating. So that example will be even simpler:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;import Component from &amp;#39;@ember/component&amp;#39;;
import { computed } from &amp;#39;ember-decorators/object&amp;#39;;

export default class MyComponent extends Component {
  someProperty = &amp;#39;with a string value&amp;#39;;

  @computed(&amp;#39;someProperty&amp;#39;)
  someOther(someProperty) {
    return someProperty + &amp;#39; that you can append to&amp;#39;;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in that imagined, wonderful future world, if we tried to do something that isn’t a valid string operation—say, we tried &lt;code&gt;someProperty / 3&lt;/code&gt;—TypeScript would complain to us, loudly.&lt;/p&gt;
&lt;p&gt;Although this is still a future plan, rather than a present reality, it’s not &lt;em&gt;that&lt;/em&gt; far off. We just need someone to write that type definition for the decorators, and we’ll be off to the races wherever we’re using the new ES6 class approach instead of the existing &lt;code&gt;Ember.Object&lt;/code&gt; approach. So: &lt;em&gt;soon&lt;/em&gt;. I don’t know how soon, but soon.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="current-ameliorations" class="level2"&gt;
&lt;h2&gt;Current ameliorations&lt;/h2&gt;
&lt;p&gt;In the meantime, of course, many of us are maintaining large codebases. I just checked, and our app (between the app itself and the tests) has around 850 files and 34,000 lines of code. Even as those new abilities land, we’re not going to be converting all of them all at once. And we want to get some real mileage out of TypeScript in the meantime. One of the best ways I’ve found to do this is to take a step back and think about the pieces of the puzzle which Ember is solving for you, and which it &lt;em&gt;isn’t&lt;/em&gt;. That is, Ember is really concerned with managing application state and lifecycle, and with rendering the UI. And it’s &lt;em&gt;fabulous&lt;/em&gt; about those things. What it’s not particularly concerned with (and what it shouldn’t be) is the particulars of how your business logic is implemented. And there’s no particular reason, &lt;em&gt;especially&lt;/em&gt; if most of that business logic is implemented in terms of a bunch of pure, straightforward, input-to-output functions that operate on well-defined data types, for all of your business logic to live in &lt;code&gt;Ember.Object&lt;/code&gt;-descended classes.&lt;/p&gt;
&lt;p&gt;Instead, we have increasingly chosen to write our business logic in bog-standard TypeScript files. These days, our app has a &lt;code&gt;lib&lt;/code&gt; directory in it, with packages like &lt;code&gt;utilities&lt;/code&gt; for commonly used tools… but also like &lt;code&gt;billing&lt;/code&gt;, where we implement &lt;em&gt;all&lt;/em&gt; of our client-side billing business logic. The display logic goes in the &lt;code&gt;Ember.Controller&lt;/code&gt; and &lt;code&gt;Ember.Component&lt;/code&gt; classes, and the routing and state management goes in the &lt;code&gt;Ember.Route&lt;/code&gt; and &lt;code&gt;Ember.Data&lt;/code&gt; pieces as you’d expect. But none of the business logic lives there. That means that we’re entirely free of the aforementioned constraints for the majority of the time dealing with that data. If we do a good job making sure the data is good at the boundaries—route loads, for example, and when we send it back to the server—then we can effectively treat everything else as just boring old (new?) TypeScript.&lt;/p&gt;
&lt;p&gt;So far we’ve only taken that approach with about a quarter of our app, but it’s all the latest pieces of our app, and it has been incredibly effective. Even once we’re able to take advantage of all those shiny new features, we’re going to keep leaning heavily on this approach, because it lets Ember do what Ember is best at, and keeps us from coupling our business logic to the application state management or view rendering details.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that’s the state of things in Ember with TypeScript today. Your best bet for getting real mileage out of TypeScript today is to use the new class syntax support and decorators wherever you can within Ember-specific code, and then to write as much of your business logic outside the Ember system as possible. Gladly, all of that points you right at the future (in the case of syntax) and just good practice (in the case of separating out your business logic). So: not too shabby overall. It’s working well for us, and I hope it does for you as well!&lt;/p&gt;
&lt;p&gt;Next time: how we got here with the &lt;code&gt;ember-cli-typescript&lt;/code&gt; compiler, and where we hope to go from here!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note that here and throughout, I’m using the &lt;a href="https://github.com/emberjs/rfcs/blob/master/text/0176-javascript-module-api.md#addendum-1---table-of-module-names-and-exports-by-global"&gt;RFC #176 Module API&lt;/a&gt;, which you can use today via &lt;a href="https://github.com/ember-cli/babel-plugin-ember-modules-api-polyfill"&gt;this polyfill&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="typescript"></category><category term="typing-your-ember"></category></entry><entry><title>The Book of F♯</title><link href="http://www.chriskrycho.com/2017/the-book-of-f.html" rel="alternate"></link><published>2017-07-21T19:30:00-04:00</published><updated>2017-07-21T19:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-21:/2017/the-book-of-f.html</id><summary type="html">Recommended With Qualifications: This book is just okay, and at this point it’s a bit outdated—but if you're in its fairly narrow target audience, it’s a decent way to get up to speed on F♯.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I keep my book review ratings simple—they’re either &lt;em&gt;required&lt;/em&gt;, &lt;em&gt;recommended&lt;/em&gt;, &lt;em&gt;recommended with qualifications&lt;/em&gt;, or &lt;em&gt;not recommended&lt;/em&gt;. If you want the TL;DR, this is it:&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended With Qualifications:&lt;/strong&gt; This book is just okay, and at this point it’s a bit outdated—but if you’re in its fairly narrow target audience, it’s a decent way to get up to speed on F#.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;The Book of F♯: Breaking Free With Managed Functional Programming&lt;/em&gt; is a No Starch Press publication by Dave Fancher, published in 2014. I read it over the course of the last four or so months, just plugging away in my spare cycles. A couple qualifications on the short list of observations that follow:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;I don’t have any experience whatsoever writing production F♯ (though I have &lt;em&gt;read&lt;/em&gt; a fair bit of it). I am interested because it’s a functional programming language on the .NET stack—which isn’t my own personal favorite stack, but &lt;em&gt;is&lt;/em&gt; the stack at Olo. If we’re going to ship functional code on the server, it’ll be in F♯.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I am also not a C♯ developer. As such, I’m &lt;em&gt;explicitly&lt;/em&gt; not the audience of this book. As Fancher put it in the intro:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wrote this book for people like me: experienced .NET developers looking to break into functional programming while retaining the safety net of the tools and libraries they’re already using.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The net of that is that a lot of what frustrated me about the book is just a result of my not being the target audience.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Those qualifications aside, some assorted thoughts on the book:&lt;/p&gt;
&lt;p&gt;First, as the intro and my above qualification suggest: this is &lt;em&gt;really&lt;/em&gt; not interesting or useful as a general introduction to F♯. Throughout, it assumes a very high baseline of C♯ knowledge. In fact, the majority of the discussion of F♯, even in the section of the book which turns away from object oriented programming toward functional programming, focuses on comparing F♯ to C♯. This makes sense for the target audience, but this is &lt;em&gt;not&lt;/em&gt; the book for you if you’re not a C♯ developer.&lt;/p&gt;
&lt;p&gt;That said, if you &lt;em&gt;are&lt;/em&gt; a C♯ developer, this could be a useful resource as you’re spinning up. It also might be a useful book to work through with a group of C♯ developers who want to learn F♯. The comparisons &lt;em&gt;do&lt;/em&gt; generally work in F♯’s favor, even when doing exactly what you would be doing in the C♯, which makes it an easier “sell” in that regard.&lt;/p&gt;
&lt;p&gt;Along the same lines, the book is structured as a &lt;em&gt;very gradual&lt;/em&gt; introduction to functional programming ideas. Roughly the first half of the book emphasizes F♯’s object-oriented programming abilities, and only in the second half does Fancher turn to a functional style. Again, this is probably the right move given the audience, but it means the book spends a &lt;em&gt;lot&lt;/em&gt; of time on kinds of F♯ you won’t actually be writing very often once you’re going. Idiomatic F♯ isn’t object-oriented. But as a way of helping someone make the transition, it’s not a bad plan: object-oriented F♯ is briefer and nicer in many ways than the exact same code in C♯. It meant that the first half of the book was completely uninteresting to &lt;em&gt;me&lt;/em&gt;, though: I don’t want to write a line of object-oriented F♯.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of this had a pretty serious downside even for existing C♯ developers, though: the book often ends up seeming like it’s sort of apologizing for or defending F♯ against an expected audience of people asking “What’s wrong with C♯?” And even though there’s a real sense in which that’s true—that &lt;em&gt;is&lt;/em&gt; what a lot of the audience is asking, no doubt—it became quite annoying rhetorically.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; It’s also unnecessary: if someone is picking up a book on F♯, you can assume that they’re alredy at least a little interested in the language and what it might offer! Along those lines, I much prefer the tack taken in what I’ve seen of Scott Wlaschin’s upcoming &lt;em&gt;Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F♯&lt;/em&gt; (The Pragmatic Bookshelf, expected in fall 2017)—which shows not how to do the same things as in C♯, just more briefly; but how to solve the same problems much more effectively.&lt;/p&gt;
&lt;p&gt;Those problems aside, the book was… &lt;em&gt;fine&lt;/em&gt;. I wouldn’t call it scintillating reading, but this kind of technical writing, especially at this length, is really hard work. Credit to Fancher for managing an introduction to an entire programming language in a relatively approachable way, and credit to him and his editors for making sure it remains lucid throughout. Still: I’d love to see the bar for programming books be higher. We need more books which are genuinely engaging in the world of programming language texts. These things are &lt;em&gt;interesting&lt;/em&gt;; we don’t have to make them dry and dull! (And if you want a pretty good example of that: everything I’ve read of Edwin Brady’s &lt;em&gt;Type-Driven Development with Idris&lt;/em&gt; hits the mark.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A few other observations about the language itself from reading the book.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; reading this highlighted a lot of strange things about F♯, all of which ultimately come down to the ways F♯’s development has been driven by concerns for interoperability with C♯. Worse, there are a lot of places where the influence of C♯ casts this shadow &lt;em&gt;entirely unnecessarily&lt;/em&gt;. One particular expression of this which drove me crazy: F♯ far too often uses exceptions instead of &lt;code&gt;Option&lt;/code&gt;s. It’s &lt;a href="http://www.chriskrycho.com/2017/better-off-using-exceptions.html"&gt;one thing&lt;/a&gt; to make sure the language gracefully handle exceptions: you &lt;em&gt;will&lt;/em&gt; have them coming from outside contexts. It is another entirely to design core parts of the language to throw exceptions where it doesn’t have to.&lt;/p&gt;
&lt;p&gt;Perhaps the most prominent example is the &lt;code&gt;List.head&lt;/code&gt; function. Its type signature is &lt;code&gt;'T list -&amp;gt; 'T&lt;/code&gt;, where I would expect it to be &lt;code&gt;'T list -&amp;gt; 'T option&lt;/code&gt;. If you call &lt;code&gt;List.head&lt;/code&gt; on an empty list, you get an exception. It would make far more sense for it to return an &lt;code&gt;Option&lt;/code&gt; and just give you &lt;code&gt;None&lt;/code&gt; if there’s no item. Then you’re not worried about &lt;code&gt;try&lt;/code&gt; expressions and the type system will actually help you! This is one of the most valuable parts of having a type system like F♯’s! I really don’t understand a lot of these decisions, not least since this isn’t for interop with C♯ collections—these are for native F♯ collections.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second,&lt;/strong&gt; the use of things like computation expressions instead of type machinery has an interesting effect: it makes it simpler to read when you first encounter it, but harder to compose, build, etc.—and it’s more syntax to remember. Computation expressions just end up being a way to do “monadic” transformations, from what I can tell. But as I noted often in my discussion of &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;Rust and Swift&lt;/a&gt;, I profoundly prefer approaches that build on the same existing machinery—even in the surface syntax of the language—rather than constantly building new machinery. It makes it easier to deeply internalize new concepts and to &lt;em&gt;understand&lt;/em&gt; the language (rather than just being able to &lt;em&gt;use&lt;/em&gt;) the language. It also seems (from my admittedly limited vantage point) that computation expressions are as a result much less &lt;em&gt;composable&lt;/em&gt; than actual type machinery of the sort available in other languages (Haskell, Idris, etc.).&lt;/p&gt;
&lt;p&gt;Now, the tradeoff there is that adding those adds a lot of complexity both to the compiler and to the libraries people are apt to write; there’s a reason Elm has totally eschewed that kind of type machinery to date. But Elm has also refused to just add syntax around ideas like this the way F♯ has here, and it makes for a much cleaner and frankly &lt;em&gt;nicer&lt;/em&gt; language.&lt;/p&gt;
&lt;p&gt;And that brings me to my &lt;strong&gt;third and final&lt;/strong&gt; point: I’m really glad F♯ exists, and that it’s providing a pretty good experience of functional programming on the &lt;abbr title='Common Language Runtime'&gt;CLR&lt;/abbr&gt;. But—and I fully grant that a fair bit of this kind of thing is almost entirely subjective—it doesn’t &lt;em&gt;feel&lt;/em&gt; good in the same way that Elm or Rust do. There is something very difficult to nail down here, but I get a vsiceral experience of joy when writing some languages and not others. Again: that will vary person to person, but I think there are things that make it more or less likely. Things that make it more likely, at least for me, include everything from self-consistency and predictability at the semantic level to the way the code lays out and flows at the visual/syntactical level.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Sadly, F♯ just doesn’t hit the right notes&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; for me. I’ll be much, much happier to write it than C♯ at work… but I really just want Elm and Rust and Idris to come save the day.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I am of course writing a &lt;em&gt;lot&lt;/em&gt; of functional code in our JavaScript; JavaScript is a surprisingly good language for it.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It’s not that OOP is &lt;em&gt;bad&lt;/em&gt;, exactly; it’s just that what passes for OOP in languages like C♯, Java, and yes, F♯, is relatively low utility to me—and I think OOP ideas are much more interesting and useful when applied at a systems level, e.g. in an Actor system, than at the level of individual “actors” within the system. Compare Erlang/Elixir: functional components, organized in what is arguably an &lt;em&gt;incredibly&lt;/em&gt; object-oriented way.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;The temptation extends beyond this book; O’Reilly’s &lt;em&gt;Programming Rust&lt;/em&gt; (Jim Blandy and Jason Orendorff) reads as the same kind of defensive introduction to Rust for C++ developers.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;And yes, nerds, syntax &lt;em&gt;does&lt;/em&gt; matter. Try reading this sentence, nicely punctuated, and with spaces and capitalization. Now: tryreadingthissentencewithoutpunctuationorspacesorcapitalization. There may be a point after which it becomes less important, and a range of things which are equally good in an absolute sense, but it matters.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Pun not intended, but inevitable given the language names here.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="book-reviews"></category><category term="programming languages"></category><category term="fsharp"></category><category term="writing"></category><category term="pedagogy"></category></entry><entry><title>Thinking, Fast and Slow: A Review</title><link href="http://www.chriskrycho.com/2017/thinking-fast-and-slow-a-review.html" rel="alternate"></link><published>2017-07-11T20:30:00-04:00</published><updated>2017-07-11T20:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-11:/2017/thinking-fast-and-slow-a-review.html</id><summary type="html">Recommended: Kahneman is a talented writer, has a fascinating research history, and makes a good case; there's a lot to learn here, and the quibbles I have are just that: quibbles.
</summary><content type="html">&lt;p&gt;&lt;em&gt;I keep my book review ratings simple—they’re either &lt;em&gt;required&lt;/em&gt;, &lt;em&gt;recommended&lt;/em&gt;, &lt;em&gt;recommended with qualifications&lt;/em&gt;, or &lt;em&gt;not recommended&lt;/em&gt;. If you want the TL;DR, this is it:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommended:&lt;/strong&gt; Kahneman is a talented writer, has a fascinating research history, and makes a good case; there’s a lot to learn here, and the quibbles I have are just that: quibbles.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I’ve heard &lt;em&gt;very&lt;/em&gt; good things about Daniel Kahneman’s &lt;em&gt;Thinking, Fast and Slow&lt;/em&gt;, so when friends asked what they might get me for my birthday, it came to mind quickly. I didn’t spend long second-guessing the choice, and it’s not one I’ve regretted in the least (even though I have my differences with the book). That experience—an immediate choice, based on some degree of prior knowledge (but not &lt;em&gt;that&lt;/em&gt; much); followed by basic continuation along the same judgment without giving it much further thought—is itself representative of many of the themes of the book. How do we choose? What makes us decide the things we do, and why? How can we make better decisions? Why do we so often make irrational choices, and so quickly, over and against what we might choose if we slowed down to think through our decisions?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thinking, Fast and Slow&lt;/em&gt; takes up all of those questions and runs with them. Kahneman, a Nobel Prize winner in economics but himself a psychologist by training and decades of practice, produced here a popularization of decades of research on how people think. His basic thesis is that we have two systems of thought: One is quick to the point of immediacy and even functioning unconsciously, intuitionist or heuristic in nature, and extremely effective and reliable for &lt;em&gt;many&lt;/em&gt; situations—but because it is intuitionist or heuristic, also biased in certain predictable ways. The other is much slower, but capable of careful and rational consideration, not prone to the same kinds of mistakes as the first but also substantially more work to engage and itself readily enough misled by the judgments we make with that first system of thinking.&lt;/p&gt;
&lt;p&gt;In the first quarter or so of the book, Kahneman makes his case that these two systems actually do characterize human thought, at least in broad strokes. And it’s a good case that he makes. Many of the examples he cites I was readily enough able to see playing out in my own mind, whether in real-time or by reflecting on past decision-making and judgment-making instances. This is also the part of the book on the strongest research ground, from what I can tell as an outsider. On the whole, I came away convinced of that basic theme. Whatever other places I differ with him, and there are a few, I &lt;em&gt;do&lt;/em&gt; recommend the book for its first quarter at a minimum.&lt;/p&gt;
&lt;p&gt;The latter parts of the book shift into examinations of specific ways that those two systems-of-thinking actually play out in practice, and here the material, though still strong overall, was a great deal more arguable. Much of this draws heavily on studies in psychology—and some of those studies have since run into some really serious problems with reproducibility. So much so that Kahneman—himself a popularizer rather than a producer of those specific experiments—wrote an open letter to the community of researchers asking them to do the hard work of either reproducing their results or walking back their claims.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; As such, even if I agreed with Kahneman philosophically throughout (and I don’t; more on that in a moment), there would be some gaps in the final section of the book.&lt;/p&gt;
&lt;p&gt;Beyond some of these kinds of overall weaknesses, there’s also a downside to the rhetorical approach Kahneman takes. Throughout, he adopts an extremely conversational style, addressing the reader quite directly. As such, many of his claims take the form “You did &lt;em&gt;something&lt;/em&gt; when you encountered &lt;em&gt;some test&lt;/em&gt; in the text.” Many of these work and prove accurate… but quite a few of them don’t, too. The specifics will differ for everyone, of course, based on how well-trained they are at certain kinds of reasoning, their backgrounds, their ethical systems, and the like. But it happens, and it happened to me fairly often during the course of reading the book. One of the most striking examples was near the end, where Kahneman was trying to show that we often will assign different values to given things when evaluated independently than when evaluated side-by-side. He made there a claim about what the reader did or didn’t do in evaluating the needs of humans vs. evaluating the need for dolphins—specifically, that the specific valuation of humans over dolphins didn’t emerge until the two were compared more directly. But it &lt;em&gt;did&lt;/em&gt; for me; it was the first thought I had. I’ll grant his broader point, of course, and I don’t doubt that in many cases the studies he cites represent real tendencies. I can certainly think of &lt;em&gt;other&lt;/em&gt; scenarios where a similar kind of comparison might break down. But it’s an interesting place where the conversational style breaks down: you can only assert so much and get away with it. On the other hand, a book full of questions of the “Did you think &lt;em&gt;something&lt;/em&gt;?” sort would get old quickly. This is a hard line to walk, and on the whole I think the style worked—but it had that nagging weakness, which stuck out to me fairly frequently when reading the book.&lt;/p&gt;
&lt;p&gt;I also found, unsurprisingly, that Kahneman and I differ fairly strongly in our view of both ethics and human nature. On the whole, this didn’t directly impact my appreciation of the book. On occasion, however, his view of human nature diverged quite sharply from the Christian view. In particular, he left little room for the idea of our nature being &lt;em&gt;designed&lt;/em&gt; to have certain kinds of limitations about it and majored heavily on rationalism as &lt;em&gt;ideal&lt;/em&gt;. I don’t think strict rationalism &lt;em&gt;is&lt;/em&gt; in fact ideal, and whereas he contents himself with describing &lt;a href="http://www.claremont.org/crb/article/econs-and-humans/"&gt;Econs&lt;/a&gt; as an &lt;em&gt;incomplete&lt;/em&gt; view of how humans work (but one that he often refers to in rather aspirational ways), I would go much further: it would in fact be &lt;em&gt;wrong&lt;/em&gt; for humans to act as the purely “rational” agents of much standard economic theory, because that kind of rationalism is in fact merely a particular brand of utilitarianism. I’d go further still and say that utilitarianism is itself a kind of irrationality, and that one of the ways human nature continues to function as a divine image is in our deep-seated and nearly inescapable distinguishing between kinds of things that economists tell us are of &lt;em&gt;equal utility&lt;/em&gt;: for so they may be, but there is more to God’s green earth than the uses to which we may put it.&lt;/p&gt;
&lt;p&gt;But important though those differences are, they are also far afield of the thesis and even the majority emphasis of the book. Indeed, precisely because it does acknowledge so clearly the way humans actually work, the book can serve as a helpful entry-point for conversation about the limits of utilitarianism. If utility is not a perfect description of how humans do work, perhaps it also behooves us to consider if it’s a good description of how we &lt;em&gt;ought&lt;/em&gt; to work.&lt;/p&gt;
&lt;p&gt;More than that, the book as a whole is a genuinely good and insightful volume. Many of the kinds of biases and errors Kahneman point out are unarguably problems—and many of them contribute significantly to systematic issues in the world at large. Being more aware of how our ability to think clearly and rightly degrades when we are, say, tired and hungry, should make us think carefully about assigning a judge a long docket of cases to sentence: why should two men who committed the same crime get different punishments simply because one received his sentence in the morning when the judge was alert and fresh off her breakfast and coffee, and the other late in the morning when she was feeling hungry and drained? There are not easy solutions to these kinds of problems, but we cannot even begin to address them unless we know they exist in the first place. Similarly, at a personal level, knowing these things about ourselves can help us be aware of where we’re vulnerable to them and adjust accordingly—whether by aiming to increase our awareness of them situation-by-situation, or (better) by making careful choices when able to do so which we can then lean on in the situations where we have to make snap judgments.&lt;/p&gt;
&lt;p&gt;There’s a lot more to say about that latter point, not least on the topic of Christian formation, discipleship, and catechesis. But that’s for another post. Read at least the first section of &lt;em&gt;Thinking, Fast and Slow&lt;/em&gt;: you’ll profit from it, and you’ll enjoy it.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Hat tip to &lt;a href="https://srconstantin.wordpress.com/2017/06/27/in-defense-of-individualist-culture/"&gt;Sarah Constantin&lt;/a&gt; for bringing that letter to my attention. Her &lt;a href="https://srconstantin.wordpress.com"&gt;blog&lt;/a&gt; is well worth your time in general: you’ll learn from her even when you disagree with her, as I often do.)&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="books"></category><category term="book-reviews"></category></entry><entry><title>A Book List!</title><link href="http://www.chriskrycho.com/2017/a-book-list.html" rel="alternate"></link><published>2017-07-08T21:45:00-04:00</published><updated>2017-07-08T21:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-08:/2017/a-book-list.html</id><summary type="html">&lt;p&gt;I’ve just posted my in-progress &lt;a href="http://www.chriskrycho.com/2017-book-list.html"&gt;2017 Book List&lt;/a&gt;. I’ll update it with books as I finish them, and I’ll also update it with reviews (even of the “here’s a brief comment” variety) as I do them. This is something I’ve been thinking about doing for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve just posted my in-progress &lt;a href="http://www.chriskrycho.com/2017-book-list.html"&gt;2017 Book List&lt;/a&gt;. I’ll update it with books as I finish them, and I’ll also update it with reviews (even of the “here’s a brief comment” variety) as I do them. This is something I’ve been thinking about doing for my own sake for a while, and bumping into &lt;a href="http://tbrown.org/notes/2017/06/23/reading-and-sharing/"&gt;this post by Tim Brown&lt;/a&gt; reminded me how much I want to be sharing what I read with other people.&lt;/p&gt;
&lt;p&gt;Sometimes I get myself spun up on thinking that I need to be reviewing books with the best of them. In reality, I really just want to do like Tim says in that post (emphasis his):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I am reading and sharing ideas about what I have read, I feel like my best self. &lt;em&gt;I want more of that feeling.&lt;/em&gt;… I’m wondering if acknowledging what I read, along with a substantial visual (a book cover image?) and any highlights or notes, could feel just as good as having a physical book…. Maybe I could list my piles of books here on my website, and link them to blog post entries with highlights/notes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s it exactly. So I’m going ahead and doing the work: I’m going to keep that list up to date, and I’m going to try to write and share &lt;em&gt;something&lt;/em&gt; about every book I read for the rest of the year. It doesn’t have to be a lot—just a sentence or two will do in many cases. “I liked it” or “This had a lot of potential but didn’t quite measure up to it.” Something simple like &lt;a href="https://wynnnetherland.com/reviews/to-hell-and-back-europe-1914-1949/"&gt;what Wynn Netherland does&lt;/a&gt;, or something long and careful when it makes good sense.&lt;/p&gt;
&lt;p&gt;Maybe someday I’ll be able to write one of those killer reviews that ends up changing a whole conversation, or maybe I’ll just have a bunch of interesting notes I can look back on later and be able to see what I thought about a book when I’m curious a decade later. Either way, I think it’ll be a nice win.&lt;/p&gt;
&lt;p&gt;So: &lt;a href="http://www.chriskrycho.com/2017-book-list.html"&gt;book list&lt;/a&gt;.&lt;/p&gt;
</content><category term="reading"></category><category term="writing"></category></entry><entry><title>Log All the Things!</title><link href="http://www.chriskrycho.com/2017/log-all-the-things.html" rel="alternate"></link><published>2017-07-07T20:00:00-04:00</published><updated>2017-07-07T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-07:/2017/log-all-the-things.html</id><summary type="html">&lt;p&gt;For the past few weeks, I’ve tried adding something new to my existing &lt;a href="http://www.chriskrycho.com/2016/2016-review-5.html" title="Getting things done in 2016 and beyond"&gt;pomodoro routine&lt;/a&gt;: a daily and weekly summary of what I’ve done.&lt;/p&gt;
&lt;p&gt;Over the past few years, I’ve been a fairly steady practitioner of the habit of marking what I do in any given 25-minute …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the past few weeks, I’ve tried adding something new to my existing &lt;a href="http://www.chriskrycho.com/2016/2016-review-5.html" title="Getting things done in 2016 and beyond"&gt;pomodoro routine&lt;/a&gt;: a daily and weekly summary of what I’ve done.&lt;/p&gt;
&lt;p&gt;Over the past few years, I’ve been a fairly steady practitioner of the habit of marking what I do in any given 25-minute work cycle. However, I’ve felt of late that while I usually had a good sense of what my goals had been and whether I had accomplished them for any given small &lt;em&gt;part&lt;/em&gt; of the day, I didn’t have a clear sense of what I had done over the day as a whole—much less at the end of a whole week.&lt;/p&gt;
&lt;p&gt;So I just started summarizing it at the end of each day, or early the next day, and pulling those summaries into a single document at the end of the week. (If you’re curious, I’ve been doing all of this in &lt;a href="http://www.bear-writer.com/"&gt;Bear&lt;/a&gt;, which of course I use in its Markdown mode.) So on any given Friday, I can actually look at my week as a whole and have some concrete sense of what I’ve accomplished.&lt;/p&gt;
&lt;p&gt;I’ve only done this for the past three weeks, but I &lt;em&gt;really&lt;/em&gt; like it and I intend to keep it up.&lt;/p&gt;
&lt;p&gt;The main thing I need to figure out how to integrate into it is non-work tasks. And really, that goes for my life in general right now. I’m &lt;a href="http://www.chriskrycho.com/2017/on-decompression.html" title="On Decompression"&gt;still sorting through&lt;/a&gt; what it looks like to just be working a full-time job and having a few side projects. But I’d like to be able to look back at the end of each month and boil down those weekly summaries, and at the end of the year likewise with the months—and from the combination, actually know a bit more concretely what my year was like.&lt;/p&gt;
&lt;p&gt;We’ll see how it goes. I’m sure I’ll be back with more to say in this space soon enough.&lt;/p&gt;
</content><category term="productivity"></category><category term="pomodoro"></category></entry><entry><title>Farewell, Dropbox</title><link href="http://www.chriskrycho.com/2017/farewell-dropbox.html" rel="alternate"></link><published>2017-07-06T21:00:00-04:00</published><updated>2017-07-06T21:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-07-06:/2017/farewell-dropbox.html</id><summary type="html">&lt;p&gt;Over the last few years, I’ve grown increasingly annoyed with Dropbox. There have been a number of fairly high-profile misbehaviors on their part—most notably, &lt;a href="http://applehelpwriter.com/2016/07/28/revealing-dropboxs-dirty-little-security-hack/"&gt;this one&lt;/a&gt;—and then this past week, they started sending me notifications advertising Dropbox for Business.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/bad-dropbox.png" alt="Notification ads are the worst." /&gt;&lt;figcaption&gt;Notification ads are the worst.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, as I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the last few years, I’ve grown increasingly annoyed with Dropbox. There have been a number of fairly high-profile misbehaviors on their part—most notably, &lt;a href="http://applehelpwriter.com/2016/07/28/revealing-dropboxs-dirty-little-security-hack/"&gt;this one&lt;/a&gt;—and then this past week, they started sending me notifications advertising Dropbox for Business.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/bad-dropbox.png" alt="Notification ads are the worst." /&gt;&lt;figcaption&gt;Notification ads are the worst.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, as I was with Google a few years ago &lt;a href="http://www.chriskrycho.com/2014/goodbye-chrome.html" title="Goodbye, Chrome: You&amp;#39;re just too creepy now."&gt;when they pushed me over the edge&lt;/a&gt;—&lt;em&gt;also&lt;/em&gt; with notifications!—I’m out.&lt;/p&gt;
&lt;p&gt;I don’t mind Dropbox’s wanting to have a sustainable business. To the contrary: as I often note, I’m quite willing to pay for software I use, and I currently use a number of paid services where free alternatives exist because I’d rather do that than pay for ads.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I &lt;em&gt;do&lt;/em&gt; mind when a company—&lt;em&gt;any&lt;/em&gt; company—decides that building their business means mistreating their users and customers. And harassing me with notifications about a variant of their product I don’t care about certainly crosses that line. Combine that with the misbehavior &lt;em&gt;and&lt;/em&gt; the fact that Dropbox has a tendency to hammer my system for no apparent reason, and, well, I’m out.&lt;/p&gt;
&lt;section id="transition-plans" class="level2"&gt;
&lt;h2&gt;Transition Plans&lt;/h2&gt;
&lt;section id="file-syncing" class="level3"&gt;
&lt;h3&gt;File syncing&lt;/h3&gt;
&lt;p&gt;For basic storage and access to files across my devices, the shift will be pretty easy: I already have paid iCloud storage for backing up Photos (it’s far easier and comparably priced to all the other options, so that’s what we use). So everything I’ve &lt;em&gt;been&lt;/em&gt; doing with Dropbox I’ll be doing with iCloud Drive instead. And I have &lt;em&gt;way&lt;/em&gt; more overhead there with a 250GB plan that I do in my current 9GB of Dropbox storage.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="file-sharing" class="level3"&gt;
&lt;h3&gt;File sharing&lt;/h3&gt;
&lt;p&gt;For things where I need to share files with other people, I’ll be using &lt;a href="https://droplr.com"&gt;Droplr&lt;/a&gt;. If or when I find a need to share something for a longer period of time, more often, or with more people, I’ll think about the Pro plan, but for right now the free plan will &lt;em&gt;more&lt;/em&gt; than suffice for, say, sending an audio file to &lt;a href="http://independentclauses.com"&gt;Stephen&lt;/a&gt; for editing &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt; episodes. (Also, iOS 11’s Files app &lt;a href="https://www.imore.com/files-app" title="iOS 11&amp;#39;s Files app FAQ"&gt;will support&lt;/a&gt; this sharing workflow natively.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-writing-setup" class="level3"&gt;
&lt;h3&gt;My writing setup&lt;/h3&gt;
&lt;p&gt;Probably the &lt;em&gt;most&lt;/em&gt; vexing (or at least: vexing-seeming) change here will be to my writing workflow. For a long time, I’ve made an alias pointing from a folder in Dropbox on my main machine into the clone of the &lt;a href="https://github.com/chriskrycho/chriskrycho.com"&gt;Git repository&lt;/a&gt; on that machine where I manage my website.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; That has meant that I can edit the source version of a given post anywhere at any time, with any editor that has Dropbox integration. That was a winning combo for a long time, and it’s one thing I actually &lt;em&gt;can’t&lt;/em&gt; do with iCloud Drive. (I tried, and it sort of works, for a little while; but iCloud Drive doesn’t seem to expect this scenario. In its defense, it’s a weird setup.) I realized in thinking it through this evening, though: it doesn’t actually matter to me with the ways my workflow has shifted—and, perhaps just as importantly, with the way that the iOS ecosystem has shifted.&lt;/p&gt;
&lt;p&gt;For one thing, there are a &lt;em&gt;lot&lt;/em&gt; of options for directly editing files from Git repositories on iOS now. I don’t need to have it in Dropbox to be able to open it in any one of several &lt;em&gt;great&lt;/em&gt; iOS writing environments, whether to make a quick edit or to create a post from scratch. Both &lt;a href="https://workingcopyapp.com/"&gt;Working Copy&lt;/a&gt; and &lt;a href="https://git2go.com"&gt;Git2Go&lt;/a&gt; work &lt;em&gt;very&lt;/em&gt; well. But for another thing, I currently can’t &lt;em&gt;generate&lt;/em&gt; the site without logging into my home machine anyway.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; So if I need to make a tweak, well… &lt;a href="http://www.blink.sh"&gt;Blink.sh&lt;/a&gt; or &lt;a href="https://www.panic.com/prompt/"&gt;Prompt&lt;/a&gt; will let me log in remotely and do what I need to. And a little bit of Vim or Emacs will let me make any quick edits that way if I really feel I must.&lt;/p&gt;
&lt;p&gt;And one side effect of realizing &lt;em&gt;that&lt;/em&gt; is that I can easily enough just copy a file from iCloud storage to my site’s working directory after writing it in a writing folder in iCloud if I so desire. Sure, that’s a &lt;em&gt;little&lt;/em&gt; finicky, but for the most part I won’t really need to mess with it: I can just &lt;code&gt;git push&lt;/code&gt; from my iPad, &lt;code&gt;git pull&lt;/code&gt; on my iMac and be ready to do whatever I need.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-apps" class="level3"&gt;
&lt;h3&gt;Other apps&lt;/h3&gt;
&lt;p&gt;The last piece of the puzzle is the other “apps” that have made a home in my Dropbox. The reality, though, is that almost none of those actually matter to me. I don’t even look at the majority of that data, and other pieces of it —backups of GPS and heart-rate data from workouts, or copies of all my tweets from when I wanted to maintain a microblog on this site, for example—are really just needless at this point, as I have all of that data stored in &lt;em&gt;several&lt;/em&gt; cloud platforms (in the case of workout data) and/or don’t care about being able to retrieve it (in the case of tweets). I can happily just shut those things down and call it a day.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="in-conclusion" class="level2"&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;So that’s it: goodbye Dropbox; hello other tools. (This post written from an iPad, and stored in iCloud Drive before publishing.) It’s been a long, and mostly just-fine ride, but I’m getting off here.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Full disclosure here: I am &lt;em&gt;not&lt;/em&gt; a Dropbox paying customer—though that is the fault of their perhaps overly aggressive early customer acquisition strategy. I have never &lt;em&gt;needed&lt;/em&gt; to pay for Dropbox, even though I have many gigabytes stored in it, because I earned so much free storage for inviting other users early on.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/19305033/why-is-putting-git-repositories-inside-of-a-dropbox-folder-not-recommended"&gt;You don’t want a Git repo sitting inside your Dropbox folder&lt;/a&gt;, but a symlink like this works just fine: you don’t end up with the conflicts that can happen with a full repo in Dropbox.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I’m hoping to change that a bit in two ways in the future, by having the generator live on a not-my-home-machine server and by making Lighting much easier to just drop in and use than my finicky Pelican setup currently is. But that depends on actually making Lightning, you know, &lt;em&gt;work&lt;/em&gt;.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="workflow"></category></entry><entry><title>Set Up Mosh on macOS</title><link href="http://www.chriskrycho.com/2017/set-up-mosh-on-macos.html" rel="alternate"></link><published>2017-06-29T08:10:00-04:00</published><updated>2017-06-29T08:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-06-29:/2017/set-up-mosh-on-macos.html</id><summary type="html">&lt;p&gt;Last night I bumped back into &lt;a href="https://mosh.org"&gt;Mosh&lt;/a&gt; (by way of &lt;a href="https://medium.com/@searls/giving-the-ipad-a-full-time-job-3ae2440e1810"&gt;this post&lt;/a&gt;), and decided to give it a whirl – I had seen it before, and in fact had even installed it, but had never gotten around to giving it a try.&lt;/p&gt;
&lt;p&gt;If you’re not familiar with Mosh, it’s …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last night I bumped back into &lt;a href="https://mosh.org"&gt;Mosh&lt;/a&gt; (by way of &lt;a href="https://medium.com/@searls/giving-the-ipad-a-full-time-job-3ae2440e1810"&gt;this post&lt;/a&gt;), and decided to give it a whirl – I had seen it before, and in fact had even installed it, but had never gotten around to giving it a try.&lt;/p&gt;
&lt;p&gt;If you’re not familiar with Mosh, it’s like SSH: a remote (terminal) connection to another machine. Unlike SSH, though, a single session can survive disconnects: it sets up a small server on the host machine and will reestablish the connection if it drops. It also responds immediately when you’re typing, even if there’s serious lag to the other server – it just gives you a nice visual signal (underlining) to let you know the other side hasn’t received what you’ve typed. This seems pretty nice, so I thought I’d set it up on my iMac so I could hit it from my iPad.&lt;/p&gt;
&lt;p&gt;This isn’t complicated, but it also isn’t well-documented after the first step!&lt;/p&gt;
&lt;section id="steps" class="level2"&gt;
&lt;h2&gt;Steps&lt;/h2&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Install mosh.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;via the &lt;a href="https://mosh.org/#getting"&gt;binary&lt;/a&gt; on their site&lt;/li&gt;
&lt;li&gt;by running &lt;code&gt;brew install mosh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the install location for the server from your Terminal:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ which mosh-server&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure the firewall to allow the mosh server to install connections.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Open the &lt;strong&gt;Security and Privacy&lt;/strong&gt; pane of the &lt;strong&gt;System Preferences&lt;/strong&gt; app.&lt;/li&gt;
&lt;li&gt;Choose the &lt;strong&gt;Firewall&lt;/strong&gt; tab. Unlock it to make changes.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Firewall Options&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;On the pane that opens, click the &lt;strong&gt;+&lt;/strong&gt; button to add a new rule.&lt;/li&gt;
&lt;li&gt;Navigate to the location you got in step 2 above. (One easy way to do this: hit &lt;kbd&gt;⌘ Cmd&lt;/kbd&gt;&lt;kbd&gt;⇧ Shift&lt;/kbd&gt;&lt;kbd&gt;G&lt;/kbd&gt;, and paste in the output from the &lt;code&gt;which&lt;/code&gt; command.) Click &lt;strong&gt;Add&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Find “mosh-server” in the list, and set it to &lt;strong&gt;Allow incoming connections&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Hit &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Persuade macOS to reload its firewall rules. (This &lt;em&gt;may&lt;/em&gt; not be necessary, but it was for me.) You can do one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;restart your machine&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reload the normal rules manually:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ sudo pfctl -f /etc/pf.conf&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You may also need to open these ports on your router firewall. You should consider carefully whether you want a bunch of open ports sitting there or whether you want to just use a specific port and then always target that specific port by running mosh with the &lt;code&gt;-p&lt;/code&gt; option:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;$ mosh -p 60000 some-user@some-host.example.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you can connect locally but not remotely, this is probably what you need!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should be all you need!&lt;/p&gt;
&lt;/section&gt;
</content><category term="macos"></category><category term="sysadmin"></category></entry><entry><title>Write! app review</title><link href="http://www.chriskrycho.com/2017/write-app-review.html" rel="alternate"></link><published>2017-06-26T21:15:00-04:00</published><updated>2017-06-26T21:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-06-26:/2017/write-app-review.html</id><summary type="html">Write! app is a distraction-free text editor—solid enough, but entering a very crowded field, at least on macOS.</summary><content type="html">&lt;p&gt;As I’ve noted in the past, I’m always &lt;a href="http://www.chriskrycho.com/2016/ulysses-byword-and-just-right.html"&gt;on the lookout&lt;/a&gt; for top-notch writing environments. I was recently contacted by the team behind &lt;a href="https://writeapp.co"&gt;Write!&lt;/a&gt; and asked if I would take a look at and review their app, and I was happy to obliged. I tested the app out fairly thoroughly by doing what I normally do with my writing apps: putting together a blog post or the like. I’ve written this review from start to finish in it, across my two Mac machines. I promised the authors an unbiased review, so here we go!&lt;/p&gt;
&lt;section id="overview" class="level2"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Write!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; describes itself as a distraction-free text editor. It enters the market in an interesting way: the Mac offerings here are numerous, varied, and excellent. Offerings on Windows are fewer and further between, and in my experience of much lower quality. Distraction-free text editors outside the world of &lt;em&gt;programming&lt;/em&gt; text editors barely exist at all on Linux, as far as I can tell.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Write! is cross-platform, targeting all three of these. And that, as we’ll see, &lt;em&gt;is&lt;/em&gt; the story of this particular app—for good and for ill.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-good" class="level2"&gt;
&lt;h2&gt;The Good&lt;/h2&gt;
&lt;p&gt;First, the good: the app seems to perform relatively well. Text entry, even on a fairly large document, is smooth and quick. (I imported the text of &lt;a href="http://www.chriskrycho.com/2016/realism-and-antirealism.html"&gt;this ~7200-word paper&lt;/a&gt; to test it and it didn’t stutter a bit.) Especially given the time I’m going to spend on the not-so-good below, I want to take a moment to applaud the developers for getting that right. It’s one of the most important aspects of an app like this, and any number of apps I’ve used just fall down on large documents. Everything I’ve seen here makes it seem like Write! would handle much larger documents even than that paper with aplomb.&lt;/p&gt;
&lt;p&gt;The app’s main writing area looks fairly nice, and the distraction-free/full-screen mode gets out of the way readily enough. The cloud sync that comes with the app is quick and seems reliable. I’ve worked on this document across the two Macs I use, with no sync issues whatsoever. The writing area also has a (toggleable) overview of the document on the right, &lt;em&gt;a la&lt;/em&gt; Sublime Text. To the left is a toggleable outline view, which lets you drill down into the structure of your document if you have multiple heading levels. And within the writing area itself, you can expand and collapse sections demarcated by headings.&lt;/p&gt;
&lt;p&gt;In general, the experience of writing in the app is &lt;em&gt;nice&lt;/em&gt;. Not &lt;em&gt;amazing&lt;/em&gt;, but genuinely nice.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-just-okay" class="level2"&gt;
&lt;h2&gt;The Just Okay&lt;/h2&gt;
&lt;p&gt;There’s a bit of a delay before any open tabs are hidden in that fullscreen mode, but it’s otherwise fairly typical of most “distraction-free” writing environments in that regard. The colors chosen for the light and dark writing themes are fine, but not great. Much the same is true of the typography: it’s relatively pleasant, if bland. There are a number of built-in themes, but no apparent way to customize them to be more to your liking.&lt;/p&gt;
&lt;p&gt;The app also features built-in autocomplete—but I’m not really sure who the target audience is for auto-complete in this kind of environment. It’s not &lt;em&gt;bad&lt;/em&gt;, per se, to have it, but it doesn’t add a lot of value for &lt;em&gt;writing&lt;/em&gt; (as opposed to, say, programming), and I turned it off fairly quickly in the process of writing this review.&lt;/p&gt;
&lt;section id="publishing" class="level3"&gt;
&lt;h3&gt;Publishing&lt;/h3&gt;
&lt;p&gt;The app includes some “publishing” tools. Currently it supports writing to either Write’s own site, or to Medium. Medium publishing is nice—it’s certainly the hip tool &lt;em&gt;du jour&lt;/em&gt;—but you’re out of luck if you use WordPress, much less something like Ghost.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Publishing to Write! itself seems to be mostly a way of letting people see in-progress drafts. The links aren’t particularly friendly, and while they’d be easy enough to share to Facebook or Twitter or the like, they have serious downsides over any of the free blogging options out there for anything other than getting some early feedback—there’s no organizational or navigational structure available, and for that matter nothing that even ties it to your name! At a minimum, Write! should clarify what this is for.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="business-model" class="level3"&gt;
&lt;h3&gt;Business model&lt;/h3&gt;
&lt;p&gt;The business model here is a curious mix: they’re selling the app at $19.95 (USD), with a year included of their custom sync solution. That sync solution is one of the things they advertise most heavily, and while I can attest that it works well, adding another, bespoke sync solution to my life is &lt;em&gt;not&lt;/em&gt; on my list of things I’d like to do. It’s particularly an issue from where I stand because it doesn’t actually get me any benefits over a syncing solution using Dropbox or iCloud, both of which I’ve used extensively with other writing apps in the last few years, with no issues.&lt;/p&gt;
&lt;p&gt;Add onto that the fact that the sync and future updates become an annual purchase—&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting one year after purchase, Cloud access and maintenance updates are $4.95/yr.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;—and any of the myriad other editors look much better: they all just use a sync engine I &lt;em&gt;already&lt;/em&gt; use and like, and they &lt;em&gt;don’t&lt;/em&gt; have annual fees for a service I don’t care about.&lt;/p&gt;
&lt;p&gt;That goes double when you consider that I’ll often do different phases of drafting a given post in different editors, depending on the kind of content and what I’m doing with it. For example, I often use &lt;a href="https://caret.io"&gt;Caret&lt;/a&gt; for drafting technical blog posts, but at times I’ll switch over to using &lt;a href="https://www.sublimetext.com"&gt;Sublime Text&lt;/a&gt;, &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt;, or &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt; for working on the details of a given code snippet. If I’m using Write’s custom sync solution, my documents don’t exist in a normal folder on my machine, so they aren’t available for that kind of easy switching and editing. Double that &lt;em&gt;again&lt;/em&gt; because it also means I don’t have access to the content on my iPad—where I often use &lt;a href="https://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt;, &lt;a href="http://omz-software.com/editorial/"&gt;Editorial&lt;/a&gt;, &lt;a href="http://1writerapp.com"&gt;1Writer&lt;/a&gt;, or &lt;a href="https://bywordapp.com"&gt;Byword&lt;/a&gt; to work on posts when I’m away from my Mac. There are no upsides for &lt;em&gt;me&lt;/em&gt;, as far as I can tell, to using their sync system.&lt;/p&gt;
&lt;p&gt;I put this in the “just okay” section, however, because I can imagine that it &lt;em&gt;might&lt;/em&gt; be nice for someone who’s not already invested in an existing sync solution. Whether or not there are enough of those people out there to support the business model—I suspect not—is a separate question to whether it’s good or bad for users in a direct sense. Again: the custom sync system works well; I just don’t know whether it’s necessary (or worth the development time that had to be spent on it).&lt;/p&gt;
&lt;p&gt;As for the business model on the whole: I’m not at all opposed to paying for good apps on an ongoing basis. To the contrary, I actually &lt;em&gt;embrace&lt;/em&gt; it: as a software developer myself, I recognize that there are few (if any) other sustainable business models. However, the application needs to be pretty amazing to get me to buy it in the first place, still less to justify a recurring purchase.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-bad" class="level2"&gt;
&lt;h2&gt;The Bad&lt;/h2&gt;
&lt;p&gt;Sad to say, from my perspective—to be clear, as a long-time Mac user with &lt;a href="http://www.chriskrycho.com/2016/ulysses-byword-and-just-right.html"&gt;very high standards for my writing tools&lt;/a&gt;—this isn’t an amazing app. In fact, &lt;em&gt;on macOS&lt;/em&gt;, it’s actually a bad app in many ways.&lt;/p&gt;
&lt;section id="non-native-ui" class="level3"&gt;
&lt;h3&gt;Non-native UI&lt;/h3&gt;
&lt;p&gt;First, Write’s UI looks and behaves like a Windows app. It’s built on &lt;a href="https://www.qt.io"&gt;Qt&lt;/a&gt;, which does support native(-looking) widgets, but the developers chose not to use them – I assume in the interest of speed of development. If you’re on Windows, that’s fine. But this app will never look remotely native on macOS,&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; and given the plethora of other really high quality writing apps on macOS—some of them with their own publication options!—there’s just no reason why you would pick this over one of those at that most basic level.&lt;/p&gt;
&lt;p&gt;Two examples should illustrate how painfully non-native this app is visually. First, note the window action buttons in the upper right:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/write-app-review/draft.png" alt="not native windows" /&gt;&lt;figcaption&gt;not native windows&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These are Windows window action buttons; the normal Mac action buttons simply don’t exist! Similarly, there’s a slide-out menu that appears when you tap the hamburger in the top left:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/write-app-review/slide-out-menu.png" alt="slide out menu" /&gt;&lt;figcaption&gt;slide out menu&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is a reasonably nice, though not totally native-feeling, way of tackling the menu problem… on Windows. On Mac, it’s just duplicating the functionality of the normal menubar. And when I say duplicating, I mean it exactly: those menus are the same as the ones the app puts in the real menubar; there’s no reason for them to appear within the body of the app, other than that the app isn’t designed to work without them.&lt;/p&gt;
&lt;p&gt;Right-click behavior is strange: instead of the normal Mac (or even Windows!) menu, they’ve supplied their own, and it’s actually its own little modal window, not a menu at all:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/write-app-review/right-click-modal.png" title="right click modal" alt="right-click modal window" /&gt;&lt;figcaption&gt;right-click modal window&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I definitely see the utility of the little modal, but most other apps I’ve seen with similar approaches do it on highlighting some text. That way they can leave the normal right-click menu in place, which helps keep the user comfortable in their normal workflows. That’s going to be particularly annoying if you happen to make heavy use of macOS’s services menu—I don’t use it often, but when I want it, I &lt;em&gt;want&lt;/em&gt; it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="keyboard-shortcuts" class="level3"&gt;
&lt;h3&gt;Keyboard shortcuts&lt;/h3&gt;
&lt;p&gt;Similarly, a number of standard keyboard shortcuts don’t work the same way, or don’t work at all, in Write! as they do in native Mac apps. Navigation controls aren’t quite right: &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;→&lt;/kbd&gt; jumps to the start of the next word instead of the end of the current word; &lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;←&lt;/kbd&gt; doesn’t skip over punctuation; both stop on e.g. apostrophes in Write! (they skip over them natively). Other common shortcuts are bound to the wrong things: &lt;kbd&gt;Shift&lt;/kbd&gt;&lt;kbd&gt;⌥&lt;/kbd&gt;&lt;kbd&gt;-&lt;/kbd&gt;, for example, increases heading size instead of inserting an em dash. &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;Delete&lt;/kbd&gt; doesn’t do anything; neither do &lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;Space&lt;/kbd&gt;, (normally used for bringing up the special-character selector) or my beloved &lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt; (“kill to end of line”) or &lt;kbd&gt;^&lt;/kbd&gt;&lt;kbd&gt;T&lt;/kbd&gt; (&amp;quot;transpose characters around cursor) combos.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; I imagine the list is longer; that’s just what I noticed in the course of writing this review!&lt;/p&gt;
&lt;p&gt;Most egregiously, Write! steals the keyboard shortcut &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;`&lt;/kbd&gt;, normally used to switch between windows on macOS, to focus itself. Failing to implement and indeed overriding text input commands is one (very bad) thing; this is another kind of failure entirely. Apps should &lt;em&gt;never&lt;/em&gt; override core system behavior with their shortcuts! The fact that you can customize them doesn’t make this better; and the one time I &lt;em&gt;tried&lt;/em&gt; to customize it (to turn off stealing the switch-window shortcut) it ended up overriding the &lt;kbd&gt;A&lt;/kbd&gt; key’s behavior to create new documents instead of to, well, enter the letter “a”.&lt;/p&gt;
&lt;p&gt;A lot of apps get some of those more obscure ones wrong, sadly, but proper use of &lt;a href="https://developer.apple.com/documentation/coretext"&gt;Core Text&lt;/a&gt; is a &lt;em&gt;must&lt;/em&gt; for a native app in my book—and missing those super common ones is a big no-no. I simply won’t use an app long term that doesn’t do that, because I find the mismatch between the rest of the OS (and my muscle memory!) and what the apps do too frustrating.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="markdown-support" class="level3"&gt;
&lt;h3&gt;Markdown support&lt;/h3&gt;
&lt;p&gt;The app claims Markdown support, and it &lt;em&gt;sort of&lt;/em&gt; has it. But the goal is clearly to have a rich-text editing experience which can translate Markdown into whatever the underlying format is on the fly, and then export it back out when desired—&lt;em&gt;not&lt;/em&gt; to be a Markdown writing application. You can see direct evidence that this is their approach by writing in Markdown and e.g. creating italics with * characters. When you view the exported Markdown, it’ll be using _ characters instead. Other little things flag it up equally: Markdown items don’t get converted to their rich text implementations unless you add a space or some punctuation after typing them; if you go back and wrap words in link syntax, for example, or try to make it bold with a pair of *s, it won’t be converted at all. The export still works fine in that case,&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; but it certainly doesn’t come off well for the writing experience in the app, inconsistent as it is.&lt;/p&gt;
&lt;p&gt;It also doesn’t support Markdown itself fully or properly. Inline backtick characters (`) don’t generate inline code snippets. Instead, they generate standalone code blocks, as if using the usual four-space-indent or triple-backtick markers for code blocks in the actual Markdown spec and as supported in other apps. Nor can I find a way to insert hrules/divisions with triple-stars or triple-dashes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-nits" class="level3"&gt;
&lt;h3&gt;Other nits&lt;/h3&gt;
&lt;p&gt;There are a few other small but significant problems as well. One is related to the business model: you actually have to sign in to start using the app. Granted all my positive comments about subscriptions above, it’s still the case that needing to sign in to a &lt;em&gt;writing&lt;/em&gt; app (especially just to use the app for local documents!) is a non-starter for me. As with so many of the other negatives I noted, this is a compromise that I don’t need to make, because the other alternatives don’t force it on me.&lt;/p&gt;
&lt;p&gt;There are also a bunch of basically rough edges. Pasting with &lt;kbd&gt;⌘&lt;/kbd&gt;&lt;kbd&gt;V&lt;/kbd&gt; does indeed paste the text… and scrolls you to the top of the current document every time. A number of times, the selection of a given option failed: it simply wouldn’t stick. Other times, especially when selecting the default text theme, cursor selection seemed broken. I’m not sure whether those are problems with the Qt engine, the implementation, or some of both, but again: not a good look, especially in a crowded market. Right-clicking, beyond the problems mentioned above, also just wouldn’t work consistently. Sometimes I would right-click and the menu would close immediately so you couldn’t take any actions in it at all—probably a result of using a modal instead of a normal menu there. Regardless of the reason, it was frustrating.&lt;/p&gt;
&lt;p&gt;Last but not least, the app is unsigned, which means that it literally won’t open by default on macOS as of a few versions back. Users can certainly get around that, but they shouldn’t &lt;em&gt;have&lt;/em&gt; to: there’s no excuse for not signing a paid app for macOS (or Windows! But I’m not sure what its status is there) in 2017.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is an interesting approach for an editor. Trying to build a truly cross-platform app, and especially one that isn’t using web technologies like &lt;a href="https://electron.atom.io"&gt;Electron&lt;/a&gt;, is an admirable goal—in fact, it’s one that I may dare to tackle myself at some point. Cross-platform UI is also a very hard problem, and unfortunately this app makes clear just how difficult it is by falling down so often on really important details. In reality, the only way to do it well is to write all your core business logic in a way you can share and then supply actually-native user interfaces. Anything else will inevitably feel out of place at best.&lt;/p&gt;
&lt;p&gt;As a result, Write! is deeply compromised as a Mac app, to the extent that I simply cannot recommend it for Mac users. If you’re on a Mac, you should look instead at &lt;a href="https://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt;, &lt;a href="https://bywordapp.com"&gt;Byword&lt;/a&gt;, and &lt;a href="https://caret.io"&gt;Caret&lt;/a&gt;. All of them feel much more native, and though they have different strengths and weaknesses, they’re all native (or mostly-very-effectively native-acting, in Caret’s case) apps. That doesn’t mean Write! is &lt;em&gt;bad&lt;/em&gt;; it just means it’s not worth your time (a) if you’re on a Mac or (b) if you really care about standard Markdown behaviors.&lt;/p&gt;
&lt;p&gt;As noted, though, the developers got some important parts of this &lt;em&gt;very&lt;/em&gt; right: the app performs well, it looks decent on Windows, and their sync engine seems incredibly solid. Accordingly, if you’re on Windows, and don’t already have a particular commitment to Markdown proper, I might even cautiously recommend it—as a replacement for something like the old &lt;a href="https://www.microsoft.com/en-us/download/details.aspx?id=8621"&gt;LiveWriter&lt;/a&gt; app, for example. The biggest hesitation I’d have there is the business model—and, as noted above, I’m not opposed in principle to subscription models for good apps; but I’m not really sure what the value proposition here is.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, the app is named “Write!” – not “Write”. It’s not my favorite, not least because it means you have to type an exclamation point every time you write (!) it.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;There are many reasons for that, including things to do with many Linux users’ antipathy toward paid or non-open software, which makes it very difficult for not only developers but especially &lt;em&gt;designers&lt;/em&gt; to make a living. Never mind the incredibly small size of the audience by comparison.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;And who knows if Medium will still be around in five years? But that’s for another post another time.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Or Linux, but then what exactly &lt;em&gt;is&lt;/em&gt; native on Linux anyway? 😏 More seriously, this will look out of place on &lt;em&gt;any&lt;/em&gt; Linux desktop environment.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;These latter ones are sadly too often the case for cross-platform tech; I’ve filed issues on &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt; and &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt; in the past that way.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;I’ll actually give Write! one point over Ulysses here: Ulysses does some similar conversions under the hood to make the writing experience seem snazzier, and things which don’t get turned into their custom “text objects” can end up exported &lt;em&gt;very&lt;/em&gt; strangely.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="app reviews"></category><category term="writing"></category><category term="design"></category><category term="macOS"></category><category term="Windows"></category></entry><entry><title>“Collection-Last Auto-Curried Functions”</title><link href="http://www.chriskrycho.com/2017/collection-last-auto-curried-functions.html" rel="alternate"></link><published>2017-06-24T17:35:00-04:00</published><updated>2017-06-24T17:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-06-24:/2017/collection-last-auto-curried-functions.html</id><summary type="html">&lt;p&gt;I’ve been using &lt;a href="https://lodash.com"&gt;lodash&lt;/a&gt; for a while at work, and I love having it in our toolbox. But, as I increasingly embrace &lt;em&gt;composition of smaller functions&lt;/em&gt; as a helpful approach to building up the final version of an overall transformation of some piece of data, I’ve increasingly wanted …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve been using &lt;a href="https://lodash.com"&gt;lodash&lt;/a&gt; for a while at work, and I love having it in our toolbox. But, as I increasingly embrace &lt;em&gt;composition of smaller functions&lt;/em&gt; as a helpful approach to building up the final version of an overall transformation of some piece of data, I’ve increasingly wanted to be using &lt;a href="https://github.com/lodash/lodash/wiki/FP-Guide"&gt;lodash-fp&lt;/a&gt; instead—those “auto-curried… data-last methods” are &lt;em&gt;nice&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I could belabor the difference with words, but a code sample will do better. Here’s how I would write the same basic transformation in both Lodash and lodash-fp.&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;// Lodash
const breakfasts = [&amp;#39;pancakes&amp;#39;, &amp;#39;waffles&amp;#39;, &amp;#39;french toast&amp;#39;]

const uniqueLetters = _.flow([
  bs =&amp;gt; _.map(bs, words),
  _.flatten,
  bs =&amp;gt; _.map(bs, b =&amp;gt; split(b, &amp;#39;&amp;#39;)),
  _.flatten,
  _.uniq,
  ls =&amp;gt; _.sortBy(ls, id),
])

console.log(uniqueLetters(breakfasts))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That gets the job done, but wouldn’t it be nice if we didn’t have to have all those anonymous functions (lambdas) throughout?&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;// lodash-fp
const uniqueLettersFp = _.flow([
  _.map(words),
  _.flatten,
  _.map(split(&amp;#39;&amp;#39;)),
  _.flatten,
  _.uniq,
  _.sortBy(id),
])

const breakfasts = [&amp;#39;pancakes&amp;#39;, &amp;#39;waffles&amp;#39;, &amp;#39;french toast&amp;#39;]

console.log(uniqueLettersFp(breakfasts))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suddenly the intent is much clearer with the noise introduced by the lambdas gone. You get this because the lodash-fp functions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;auto-curried:&lt;/strong&gt; that is, even though &lt;code&gt;_.split&lt;/code&gt; takes the splitter and then a string, you can just write &lt;code&gt;_.split('')&lt;/code&gt; and get back a function which takes a string as an argument.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data-last:&lt;/strong&gt; because &lt;code&gt;_.split&lt;/code&gt; takes the string to split &lt;em&gt;last&lt;/em&gt;, it can be passed into an auto-curried function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need &lt;em&gt;both&lt;/em&gt; to get that nice clean call to &lt;code&gt;_.flow&lt;/code&gt;. But once you have both, it’s really, really hard ever to go back, because it’s so much nicer for building pipelines of functions.&lt;/p&gt;
&lt;p&gt;…I need to see if I can help &lt;a href="https://github.com/mike-north/ember-lodash/issues/21"&gt;do the work&lt;/a&gt; to make lodash-fp available in Ember.js.&lt;/p&gt;
</content><category term="javascript"></category><category term="functional programming"></category></entry><entry><title>On Decompression</title><link href="http://www.chriskrycho.com/2017/on-decompression.html" rel="alternate"></link><published>2017-06-10T10:00:00-04:00</published><updated>2017-06-10T10:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-06-10:/2017/on-decompression.html</id><summary type="html">I’ve been thinking about reading plans and books lists. And rest. And I'm taking a break from formal plans for the rest of this year, because I and our family need it.</summary><content type="html">&lt;p&gt;I’ve been thinking about reading plans and book lists. And about rest.&lt;/p&gt;
&lt;p&gt;Plans and lists may not sound like rest to you; that’s fine: they don’t to me, either. I’ve been eager to move back into the kinds of reading I’m actively interested in doing now that I’m done with my seminary degree. But one of the challenges is that I need—and I’m &lt;em&gt;very&lt;/em&gt; aware of this need—to decompress a bit.&lt;/p&gt;
&lt;p&gt;The last roughly 8 years have been &lt;em&gt;going&lt;/em&gt; fairly constantly. I began my first job after college the day after Jaimie and I got back from our honeymoon. For the next two years I worked full-time there &lt;em&gt;and&lt;/em&gt; taught myself web development and then did 8–10 hours a week of web development consulting on the side while she finished school. I kept up that pace for another year and a half after that other than a slight break just after Ellie was born, and then we moved to North Carolina for me to get an M. Div. from &lt;a href="http://www.sebts.edu"&gt;SEBTS&lt;/a&gt;. Since we moved here, I’ve always been working—anywhere from 20 to 60 hours a week, always in at least one class a semester and often as many as three. All along the way, I’ve also been reading and writing for myself: these things are relaxing for me. And for the sheer joy and need of a good outlet, I added podcasting along the way as a hobby.&lt;/p&gt;
&lt;p&gt;But the takeaway of all of that is that I’ve had to be &lt;em&gt;extremely&lt;/em&gt; structured and disciplined with my time. I have always had a detailed schedule and an idea of what I wanted or needed to be working on at any given time: from learning new things in software to writing blog posts, and from actually programming as a job to writing papers for seminary.&lt;/p&gt;
&lt;p&gt;It’s time to breathe a bit.&lt;/p&gt;
&lt;p&gt;I feel very keenly the need to &lt;em&gt;decompress&lt;/em&gt;. Not to stop doing things, but to add some slack to the schedule, to keep my number of hard external commitments low and to keep any self-imposed pressures low as well. That will let me recharge and avoid burnout, and it will give me lots of good time to just hang out with Jaimie and our little girls. We’ve made space for the family all the way through, but it has always been a matter of scheduling it and fitting it in. I’m looking forward to a season where it’s just normal for us to play and read and do life together. As I said: a kind of decompression, letting things stretch back out a bit and decreasing the tension of always being on a tight schedule.&lt;/p&gt;
&lt;p&gt;That means that until about January 2018, I am not making myself a &lt;em&gt;reading list&lt;/em&gt; in the way I want to in the future. Why do I even want that? Because I &lt;em&gt;need&lt;/em&gt; it. So the better question is: why do I think I need a reading list or a plan?&lt;/p&gt;
&lt;p&gt;I’m a voracious, multi-disciplinary reader, but this has two problems. One is I can be a bit like a squirrel: always seeing something shiny in that new subject &lt;em&gt;over there&lt;/em&gt;. The other is that I can get sucked incredibly deep into one genre so that I end up reading only theology or programming or the like for six months. Having a plan and a reading list will help me both dig deeply and in focused ways into the subjects on which I want to think (and write!) more, but it will also help me balance that with a good mix of other kinds of reading from other fields—something which is both broadly helpful and which inevitably &lt;a href="http://2012-2013.chriskrycho.com/art/and-the-stew-tastes-good/"&gt;produces a better mix of insights&lt;/a&gt; than just reading one subject in isolation does.&lt;/p&gt;
&lt;p&gt;But, for all the reasons outlined above: not now.&lt;/p&gt;
&lt;p&gt;I still have books I want to read over the rest of this year. The list right now looks like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fyodor Dostoevsky, &lt;em&gt;The Idiot&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Daniel Kahneman, &lt;em&gt;Thinking, Fast and Slow&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Oliver O’Donovan, &lt;em&gt;Resurrection and Moral Order&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Brandon Sanderson, the various sequels to &lt;em&gt;Alcatraz Versus the Evil Librarians&lt;/em&gt; (which I read and quite enjoyed last month)&lt;/li&gt;
&lt;li&gt;Charles Taylor, &lt;em&gt;A Secular Age&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;J. R. R. Tolkien, &lt;em&gt;Beren and Lúthien&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s a “list,” but it’s a list composed of exactly one kind of book: whatever I feel like reading. There are other books I’ve already started that aren’t on that list because while they’re important to me, they’re not decompressive at all: they feel like work, like pressure. And what I and my family need right now—especially in the midst of planning a cross-country move to be nearer our families in a new home!—is to relieve pressure, not add more.&lt;/p&gt;
&lt;p&gt;So now I’m going to go read one of those books on our porch. Whichever one I feel like. And then I’ll read whichever one I feel like &lt;em&gt;next&lt;/em&gt;. And if the list changes, that’s fine too.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Note: I cross-posted this to &lt;a href="http://krycho.com"&gt;our new family blog&lt;/a&gt;!&lt;/i&gt;&lt;/p&gt;
</content><category term="reading"></category><category term="writing"></category><category term="rest"></category></entry><entry><title>Typing Your Ember, Part 2</title><link href="http://www.chriskrycho.com/2017/typing-your-ember-part-2.html" rel="alternate"></link><published>2017-05-07T22:00:00-04:00</published><updated>2017-05-07T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-05-07:/2017/typing-your-ember-part-2.html</id><summary type="html">Adding TypeScript to your existing Ember.js app is easy!—here's how to do it, some of the current "gotchas," and a few tips to make the on-ramp a bit easier.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="/2017/typing-your-ember-part-1"&gt;first part&lt;/a&gt; of this series, I described how to set up a brand new Ember.js app to use TypeScript. In this part, I’m going to talk about starting to use TypeScript in the context of an existing Ember.js app.&lt;/p&gt;
&lt;p&gt;This is, in many ways, even simpler than setting up an app for the first time, because you already have almost everything you need. The steps here are exactly what you’re used to if you’re used to using the Ember CLI ecosystem:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;code&gt;ember-cli-typescript&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start using TypeScript wherever you want in your app.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It really is that simple, for the most part. There are a couple qualifications, and a couple tips, though.&lt;/p&gt;
&lt;p&gt;Let’s start with &lt;strong&gt;qualifications&lt;/strong&gt;. There are open, unresolved &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/"&gt;issues&lt;/a&gt; about using &lt;code&gt;ember-cli-typescript&lt;/code&gt; in your app in certain contexts. For example: &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/8"&gt;using it with &lt;code&gt;ember-browserify&lt;/code&gt;&lt;/a&gt;. While everything will &lt;em&gt;build&lt;/em&gt; correctly in that case (even if the TypeScript compiler complains about being unable to resolve some things, the Ember CLI build pipeline will still work as expected), your editor integration won’t. There are a bunch of corners like this we’re still hammering out; those are the main things we need to get resolved before we can call this a “1.0.” We have the &lt;em&gt;main&lt;/em&gt; stuff working, but, well… there’s more to do.&lt;/p&gt;
&lt;p&gt;Along those same lines, you should take a close look at the &lt;a href="https://github.com/emberwatch/ember-cli-typescript#not-yet-supported"&gt;&lt;strong&gt;Not yet supported&lt;/strong&gt;&lt;/a&gt; section of the README. There are parts of Ember’s programming model which TypeScript certainly &lt;em&gt;can&lt;/em&gt; support, but which we haven’t done the lifting to get the type declaration file to help with yet. (Looking for a place to pitch in and already comfortable doing some heavy lifting with some of TypeScript’s &lt;a href="http://www.typescriptlang.org/docs/handbook/mixins.html"&gt;most advanced type features&lt;/a&gt;? We could use the help.)&lt;/p&gt;
&lt;p&gt;One other thing to be aware of is that your &lt;code&gt;tsconfig.json&lt;/code&gt; settings will affect what kind of resolution your editor gives you. If you have &lt;code&gt;allowJs&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;, your editors will resolve JS modules. Otherwise, they’ll &lt;em&gt;only&lt;/em&gt; resolve TS modules. This can be incredibly annoying at times. However, this isn’t something we’ve nailed down in terms of what the default should be yet. (You can &lt;a href="https://github.com/emberwatch/ember-cli-typescript/issues/"&gt;come tell us&lt;/a&gt; on GitHub if you have thoughts or insights there!) And the fact that Microsoft has left this configurable is suggestive: different projects may have different preferences here.&lt;/p&gt;
&lt;p&gt;Now, for the &lt;strong&gt;tips&lt;/strong&gt;. Note that these are just a couple quick pointers; I’ll come back and talk about structuring your project and more sophisticated uses of TypeScript in the future.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don’t turn on &lt;code&gt;--strict&lt;/code&gt; or the corresponding individual flags on day 1. Unless you have an extremely unusual and disciplined Ember.js codebase, you’ll have an incredible set of errors to deal with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t set the &lt;code&gt;noEmitOnError&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;tsconfig.json&lt;/code&gt;, for much the same reason. Since the state of type declaration files for Ember is best described as &lt;em&gt;nascent&lt;/em&gt; at present, many of your files will have errors in them just from failed imports!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t try to convert everything at once. Just pick the next feature or bug you’re working on, and start with the files you’re touching for that bug. Rename it to &lt;code&gt;.ts&lt;/code&gt;, fix any major issues it flags up that you can—but stick as locally as possible. You’re apt to find a &lt;em&gt;lot&lt;/em&gt; of small bugs as you start migrating, and some of them are things which are apt to affect your whole system because they touch central data types. It’s okay. You can come back to those later. For today, you can just be explicit about the weirdnesses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As part of that: get comfortable—really, really comfortable—with &lt;a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types"&gt;union types&lt;/a&gt;. They’ll make it much easier to express the kind of code you’ve &lt;em&gt;actually&lt;/em&gt; written.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t worry about adding explicit types to &lt;em&gt;everything.&lt;/em&gt; In fact, depending on how comfortable you are already with typed languages, you should probably take a pretty different tack with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you’re just stepping into the world of typed programming languages, you might start adding types where they’re the &lt;em&gt;lowest risk&lt;/em&gt;: some place like your automated tests. That’ll help you start to see how to take advantage of them, while not impacting the way you write your app code until you have a better idea how best to employ the types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re already really comfortable with typed programming languages, you might employ types where they’re &lt;em&gt;most helpful:&lt;/em&gt; start with some types in the hairiest or trickiest spots of your app.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is plenty more I could say, but I think that’s a good start for now. I’ll have lots more to add in later posts about the details of how specifically to get the most mileage out of types within an Ember.js app today.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/2017/typing-your-ember-part-1"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Part 1 – Set your Ember.js project up to use TypeScript.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Also, I &lt;em&gt;strongly&lt;/em&gt; encourage you to write types in terms of unions of types rather than in terms of &lt;a href="http://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties"&gt;optional properties on types&lt;/a&gt;. That might be surprising; I’ll explain it in more detail in a future post.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="typescript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>On Public (Theological) Histories</title><link href="http://www.chriskrycho.com/2017/on-public-theological-histories.html" rel="alternate"></link><published>2017-05-07T21:15:00-04:00</published><updated>2017-05-07T21:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-05-07:/2017/on-public-theological-histories.html</id><summary type="html">It might behoove use to take down some of our old posts after a while, and also to print the things worth keeping from our digital publishing.</summary><content type="html">&lt;p&gt;Over the past decade—yes, a full decade, and more at this point—I have been blogging about theology. That means that at this point I have over a decade of theological thought “on record” as it were. You can look at things I wrote in 2006 and have some idea where I landed on many a theological issue, and for that matter in my slow maturation in my faith.&lt;/p&gt;
&lt;p&gt;I am increasingly unsure about the tradeoffs that go with this. Being able to trace someone’s theological and personal trajectory has its upsides, in the case of significant theological figures. But I am not a significant theological figure, and even to speculate that someday I might be seems hubristic in the extreme.&lt;/p&gt;
&lt;p&gt;Many of the things I have written have a great deal of standing in the eyes of Google and other search engines: they are old, have various links which point their way, and in several cases are one of only a few posts (or posts still up) on a given book. I feel—and feel the more keenly the further distant from their writing I get—the weight of responsibility for those words. They are public and they have some influence (even if small); if I mislead by leaving them online, that certainly outweighs whatever “benefit” I or someone else might find in their being online.&lt;/p&gt;
&lt;p&gt;I have written and talked before about the problems of link-rot, and those problems are real. But there is also this: link-rot is a problem for content of &lt;em&gt;significance&lt;/em&gt;, of &lt;em&gt;importance&lt;/em&gt;. Even granting that what is significant or important to one person may be very different from what is significant or important to another, much of what I have written online certainly is neither significant nor important. Would it be so bad a thing for some random ramble—&lt;a href="http://blog.chriskrycho.com/2007/01/dangerous-obsessions.html"&gt;this one&lt;/a&gt;, say, from a decade ago—to go away? No. It wouldn’t.&lt;/p&gt;
&lt;p&gt;Two things occur to me here:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, if things are worth saving, they are likely worth saving in a form that is not merely digital. &lt;a href="http://www.newyorker.com/magazine/2015/01/26/cobweb" title="&amp;quot;The Cobweb: Can the Internet be Archived? by Jill Lepore&amp;quot;"&gt;Excellent&lt;/a&gt; as the work of the &lt;a href="https://archive.org"&gt;Internet Archive&lt;/a&gt; is, and diligently as any individual may work at preserving their own content (as I have to date), things do break. If Blogger shuts down, I will have archives of my old site, but if in some horrible event my machine and all its backups &lt;em&gt;also&lt;/em&gt; failed… well, that content would be lost. Things truly worth keeping are probably worth keeping physically.&lt;/p&gt;
&lt;p&gt;This highlights another reality, though: when you start to consider what, exactly, you consider valuable enough to &lt;em&gt;print&lt;/em&gt;, you start to realize how little of value is on a website like my old blogs. That’s not to say they didn’t have value of all sorts when I originally wrote them—perhaps they did and perhaps they didn’t—but if, a decade on, you can’t see a reason to keep them around in hard copy, you might well wonder if there’s a reason to keep them around at all. More and more, I think the answer is probably &lt;em&gt;no&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, there is no reason to make this an all-or-nothing affair. There &lt;em&gt;are&lt;/em&gt; things in the murky depths of my web history I’d like to keep around—book reviews, mostly, but also perhaps a few other relatively high-traffic posts with which I still largely agree, or others with which I now disagree but which that is useful to me in some way. For example, I can readily enough think of times when it might actually be helpful to me at times to be able to point to two different posts from different times in my intellectual development and say: I was &lt;em&gt;wrong&lt;/em&gt; here and I now think &lt;em&gt;this&lt;/em&gt; instead.&lt;/p&gt;
&lt;p&gt;But what this points to is not the need for universal preservation, for holding on for dear life to everything I have published online. Rather, it suggests that &lt;em&gt;curation&lt;/em&gt; is valuable. Or, to use a word we might have used in an earlier time with a less haphazard and hyper-individualized approach to publishing: &lt;em&gt;editing&lt;/em&gt; is valuable. In this case, that editorial work might simply be my own culling and deciding what to keep and what not to. But the more material I generate, the more valuable I think that kind of trimming is. With it comes the work of figuring out to present that kind of “archival” material—what qualifiers to prepend to it, for example, and where on the site it should live, and how to make sure that links still work even if I move the actual content around on the site… in short, doing this well is a lot of work. But more and more I think: do that work, or shut it all down. There’s too much noise as it is.&lt;/p&gt;
&lt;p&gt;So then, as I have suggested before:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I need to print these things (if only for my own long-term curiosity). And then, as I have not suggested before: I need to throw some things away, as well.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Ironically, given the content of this post: perhaps only in a microblog post I am apt to delete entirely from my site in short order.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category></entry><entry><title>Theological Anthropology</title><link href="http://www.chriskrycho.com/2017/theological-anthropology.html" rel="alternate"></link><published>2017-05-06T10:50:00-04:00</published><updated>2017-05-06T10:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-05-06:/2017/theological-anthropology.html</id><summary type="html">We need to faithfully extend our doctrine of humanity—to think harder about Creation and Incarnation as our lenses into human nature as we confront “technologism” and “algorithmism” and the ways they distort our understanding of ourselves.</summary><content type="html">&lt;p&gt;A bit of context for this post: Off and on over the past year, and with some frequency since he picked up blogging again after Lent, Alan Jacobs has been tackling what he has variously called a “technological history of modernity” and the problems of the &lt;a href="http://text-patterns.thenewatlantis.com/2017/04/anthropocene-theology.html"&gt;“Anthropocene Era”&lt;/a&gt;, i.e. a world in which humanity so dominates the world we inhabit that we are physically remaking it, but in which we increasingly feel cut off from our humanity. (I’m eliding an enormous amount; you should really take a close look at the whole series of posts on &lt;a href="http://text-patterns.thenewatlantis.com"&gt;Text Patterns&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;A few posts recently have asked questions and thrown out some curious thoughts about the Biblical language of “powers and principalities” and how they might be at play in our world today, and those are certainly worthy of pushing harder into as we consider. (See also &lt;a href="http://blogs.mereorthodoxy.com/matthewloftus/2017/04/27/new-gods-old-demons/" title="New Gods and Old Demons"&gt;this post by Matthew Loftus&lt;/a&gt; in which he interacts with those ideas.) Needless to say, there is a lot of interesting stuff in play here, and I’m intrigued to see where Jacobs goes with it—even if, as I currently suspect, I don’t agree with his every conclusion. So you can take all of this as a sort of sideways introduction to Jacobs’ project (which is worth your time) and also to the kinds of things I may ramble on more from time to time here.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://text-patterns.thenewatlantis.com/2017/05/restocking-toolbox.html"&gt;Jacobs’ latest post&lt;/a&gt; returns to a broader question that seems to be underpinning his whole project, and which I would argue is one of the essential: how do we even &lt;em&gt;do&lt;/em&gt; this kind of theology? And how do we answer the particular questions of our age in a way that faithfully extends the foundation laid for us from the Apostles’ time till now?&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; From his &lt;a href="http://text-patterns.thenewatlantis.com/2017/04/anthropocene-theology.html"&gt;original post&lt;/a&gt; on the subject:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To this claim there may be the immediate response, especially from orthodox Christians, that theology need not be different in this age than in any other, for human nature does not change: it remains true now as it has been since the angels with their flaming swords were posted at the gates of Eden that we are made in the image of God and yet have defaced that image, and that what theologians call “the Christ event” — the incarnation, preaching, healing, death, resurrection, ascension, and ultimate return of the second person of the Trinity — is the means by which that image will be restored and the wounds we have inflicted on the Creation healed. And indeed all that does, I believe, remain true. Yet it does not follow from such foundational salvation history that “theology need not be different in this age than any other.”&lt;/p&gt;
&lt;p&gt;We may indeed believe in some universal human nature and nevertheless believe that certain frequencies on the human spectrum of possibility become more audible at times; indeed, the dominance of certain frequencies in one era can render others unheard, and only when that era passes and a new one replaces it may we realize that there were all along transmissions that we couldn’t hear because they were drowned out, overwhelmed. The moral and spiritual soundscape of the world is in constant flux, and calls forth, if we have ears to hear and a willingness to respond, new theological reflections that do not erase the truthfulness or even significance of former theological articulations but have a responsibility to add to them. In this sense at least there must be “development of doctrine.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This all seems exactly right to me. Our robust doctrine of the Trinity, for example, was a doctrine developed specifically in response to the pressures and challenges facing the church in a specific age. The philosophy and the cultural context of Athanasius meant that the church had to answer who and what Jesus Christ is in relation to the Father and the Holy Spirit, and the Spirit to the Father and the Son, and the Father to the Son and the Spirit, in a way that our own age does not &lt;em&gt;demand&lt;/em&gt; such answers. It is not that the question has ceased to be important, but changes in culture plus the Church’s (mostly) faithful exposition of those answers in the centuries since mean other questions are now at the fore. Moreover, the other questions which are coming to the fore may indeed be questions the Church has never had to confront, and especially on exactly the terms she confronts them today.&lt;/p&gt;
&lt;p&gt;And the challenge or question she confronts today, perhaps more than any other, is this: &lt;em&gt;What even &lt;em&gt;is&lt;/em&gt; a human?&lt;/em&gt; Put in a bit less “millennial” a way: the question of human nature—the ontology of the embodied, soulish, creaturely things we are—is the central question of our day. If you want to understand the last seventy-five years of cultural change in the West, you need to ask: “What do these people understand it to &lt;em&gt;mean&lt;/em&gt; to be human?” If you’re confused about how and why there has been such a radical shift in popularly-accepted views about human sexuality and gender, this is at least a significant part of the answer. The confusion about sex is a symptom of a much deeper confusion: about the very nature of &lt;em&gt;homo sapiens&lt;/em&gt;. Indeed, identity politics in general is symptomatic of deep confusion about human nature: how malleable it is or is not, and also what it means.&lt;/p&gt;
&lt;p&gt;I think on the whole Jacobs is right when he suggests that much of what theologians have offered here—perhaps especially theologically orthodox theologians—&lt;a href="http://text-patterns.thenewatlantis.com/2017/05/restocking-toolbox.html"&gt;is inadequate&lt;/a&gt; to the task:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…professional theologians have acquired in the course of their training a conceptual toolbox which they believe to contain the tools necessary to evaluate and critique cultural developments…. in my judgment the existing toolbox is inadequate; but it does not appear that way to the theologians.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To reiterate: the problem in Jacobs’ mind is not the theologians’ orthodox answers, but that we are in need of further development of the tradition and further application of the answers it provides. To return to the example I opened with: we desperately need a recovery and a &lt;em&gt;ressourcement&lt;/em&gt;, the (re)formulation of a thick and rich Nicene Christology. But we need that as a tool to answer different questions than the Fathers were answering, and so we need it as the foundation on which we build, rather than supposing that it provides already the answers we need &lt;em&gt;without&lt;/em&gt; further elaboration. We need to think about Incarnation as an answer not only to Gnosticism (which it still handily rebuts) but also to technologism and what I have started calling “algorithmism”: an unwavering faith that if we just have enough data and smart enough machine learning techniques, we will be able to solve all the problems of our humanity—not least our embodied state.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So it has analogies to that old Gnosticism, but there are also possibilities (or the appearance of possibilities) before us which the Fathers did not have to confront: the pursuit not in mystical but in technological terms of escape from the constraints of the body. And that pursuit is not merely the fever-dream of the &lt;a href="https://en.wikipedia.org/wiki/Technological_singularity"&gt;Singularity&lt;/a&gt;-seeking futurists. It is already the reality of a world of bodily modification, of at a minimum &lt;em&gt;confusions&lt;/em&gt; about racial and sexual categories (is &lt;a href="http://nymag.com/daily/intelligencer/2017/05/transracialism-article-controversy.html"&gt;“transracial” an invalid category but “transgender” a valid one&lt;/a&gt;? If so, why?). And the reason I think Jacobs’ project is important is that much even of the radical individualism, self-definition, and so on which so typifies our day is a result—more or less direct—of this shift in what is technologically &lt;em&gt;possible&lt;/em&gt;, and perhaps equally of what is &lt;em&gt;conceived&lt;/em&gt; as technologically possible.&lt;/p&gt;
&lt;p&gt;What we need in response is the combination of a more coherent understanding of technology&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; and undergirding and shaping it a more robust &lt;em&gt;theological anthropology&lt;/em&gt;.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; We need a thoroughly Christian account of human nature; and by that I mean a thoroughly &lt;em&gt;Christ-oriented&lt;/em&gt; account of human nature. The technological transcendentalists are not inventing something out of thin air. The desire to ascend to a sort of godhood runs deep in fallen human nature, but it is a perversion of the good and right desire to be like God in a way appropriate to our finitude. The theological work we need to be doing is not a sort of turning-away-from-God-toward-mere-anthropocentrism. Rather, it is turning to the inspired, image-making acts of Creation and Incarnation and asking how those answer the questions of our age, with the confidence that the answers we need are there in God’s making us in his image, and then taking on our image and imaging himself to us in our very midst.&lt;/p&gt;
&lt;p&gt;An aside: there are two modern thinkers, very different from each other, whom I think warrant careful consideration in approaching this project. One is a sort of necessary background: T. F. Torrance, whom I have only read on the Trinity, but whose works in general I have seen referenced in ways that make me think he’s going to be helpful across the board here. In general, Torrance is too little read by American theologians as far as I can tell. The other is the (orthodox) New Testament scholar whom I have seen take Jesus’ &lt;em&gt;humanity&lt;/em&gt; most seriously: N. T. Wright. A close reading of &lt;em&gt;Jesus and the Victory of God&lt;/em&gt; and its portrait of Jesus as a messiah whose humanity comes into view more clearly was enormously helpful in making me read the gospels again with some of this more clearly in view. I’m sure there are others as well; I rather suspect an encounter with O’Donovan would do me good, for example. But I also think there is a great deal of uncharted territory here, and a good deal of work to be done in a faithful development of our orthodoxy in a way that addresses &lt;em&gt;humanity&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Long enough for today. But more to come in spurts and drabs as I am able to read more and make more sense of these questions for myself.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’m borrowing the language of “faithful extension” here from William T. Cavanaugh and James K. A. Smith’s &lt;em&gt;Evolution and the Fall&lt;/em&gt;, which is an interesting work that tangentially but perhaps significantly relates to these same questions.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I could readily scare-quote “smart” and “machine learning” there; I think both of those words mislead in ways that mirror the kinds of mistakes Jacobs highlights in the same post I’m interacting with here. &lt;em&gt;Much&lt;/em&gt; more on that in the future.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;especially of technology as a technique of control and therefore a possible avenue either of right worship as we carry out our Creation task, or of idolatry as we seek not to steward the world but to dominate and distort it.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;A phrase Jacobs has also used in this off-and-on series over the last year, but which I have been using for quite some time: it is always a happy thing to find a term or phrase being adopted independently.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="technology"></category><category term="algorithism"></category><category term="alan jacobs"></category><category term="Christology"></category><category term="ressourcement"></category></entry><entry><title>Typing Your Ember, Part 1</title><link href="http://www.chriskrycho.com/2017/typing-your-ember-part-1.html" rel="alternate"></link><published>2017-05-05T00:10:00-04:00</published><updated>2017-05-05T00:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-05-05:/2017/typing-your-ember-part-1.html</id><summary type="html">In this first post in the series, we're going to keep things simple and easy: we're going to get an Ember.js app configured to use TypeScript. Later posts will cover some of the other details.
</summary><content type="html">&lt;p&gt;&lt;i class='series-overview'&gt;You write &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; apps. You think &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; would be helpful in building a more robust app as it increases in size or has more people working on it. But you have questions about how to make it work.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;This is the series for you! I’ll talk through everything: from the very basics of how to set up your Ember.js app to use TypeScript to how you can get the most out of TypeScript today—and I’ll be pretty clear about the current tradeoffs and limitations, too.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='series-overview'&gt;&lt;a href="/typing-your-ember.html"&gt;(See the rest of the series. →)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In this first post in the series, we’re going to keep things simple and easy: we’re going to get an Ember.js app configured to use TypeScript. Later posts will cover some of the other details.&lt;/p&gt;
&lt;p&gt;Because of the lovely &lt;a href="https://ember-cli.com"&gt;Ember CLI&lt;/a&gt; ecosystem, this is a pretty straightforward process. I’m going to start from &lt;em&gt;zero&lt;/em&gt; so that even if you’ve never written an Ember app before, you can get this up and running by following these instructions. These instructions have also been tested and confirmed to work across platforms—you can do this equally on Windows, macOS, or Linux.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Make sure you have Ember’s prerequisites installed. Get &lt;a href="https://nodejs.org/en/"&gt;Node&lt;/a&gt; for your platform. Optionally (but highly recommended) install &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt; to manage your Node packages.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the Ember command lines tools globally:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;yarn global add ember-cli&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;npm install --global ember-cli&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an Ember app.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember new my-ts-app --yarn&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Using the &lt;code&gt;--yarn&lt;/code&gt; flag will make it so your app uses &lt;a href="https://yarnpkg.com"&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/a&gt; and creates a &lt;code&gt;yarn.lock&lt;/code&gt; file instead of using &lt;code&gt;npm&lt;/code&gt; when it installs its dependencies.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now move to the root of the newly created app: this is where we’ll do everything else in the post.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;cd my-ts-app&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the &lt;a href="https://emberobserver.com/addons/ember-cli-typescript"&gt;&lt;em&gt;ember-cli-typescript&lt;/em&gt; add-on&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember install ember-cli-typescript&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate your first UI component.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember generate component some-input&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Rename the files it generated from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.ts&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app/components/some-input.js&lt;/code&gt; → &lt;code&gt;app/components/some-input.ts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tests/integration/components/some-input-test.js&lt;/code&gt; → &lt;code&gt;tests/integration/components/some-input-test.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Eventually, we’ll make it so that you get TypeScript for all newly generated components when using &lt;em&gt;ember-cli-typescript&lt;/em&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add some content to the files:&lt;/p&gt;
&lt;pre class="handlebars"&gt;&lt;code&gt;{{!-- some-input.hbs --}}
{{input value=theValue change=(mut theValue)}}
{{theValue}}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// some-input.ts
import Ember from &amp;#39;ember&amp;#39;;

export default Ember.Component.extend({
  theValue: &amp;#39;&amp;#39;,
});&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update your &lt;code&gt;application.hbs&lt;/code&gt; file to remove the default &lt;code&gt;{{welcome}}&lt;/code&gt; template and replace it with &lt;code&gt;{{some-input}}&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spin up the Ember application with Ember CLI’s development server:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ember serve&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll likely note some warnings: the TypeScript compiler won’t be able to find some of the modules imported in your files. I’ll have more to say about this in a future post. For now, suffice it to say: don’t worry, Ember CLI is still resolving and compiling your modules just fine.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Load the application by going to &lt;code&gt;localhost:4200&lt;/code&gt; in your browser. You should see a blank white screen with an input in it. Type in it, and see the input rendered to the page. Simple enough, but it’s using a TypeScript file compiled along the way!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s it: we’re done setting up an Ember.js app to use TypeScript! In the next post, I’ll talk a bit about strategies for migrating an existing app to TypeScript—not just the mechanics of it, but also where and how to start actually integrating types into your code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/2017/typing-your-ember-part-2"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Part 2 – Adding TypeScript to an existing Ember.js project.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I strongly prefer to use &lt;code&gt;yarn&lt;/code&gt; over &lt;code&gt;npm&lt;/code&gt; because &lt;code&gt;yarn&lt;/code&gt; installs are predictable and repeatable, and if there’s one thing I don’t need to spend time on when developing our Ember.js app at Olo, it’s chasing problems with transitive dependencies that are different in the build server than in my local development environment. Yarn’s lockfiles mean what ends up built on the server is &lt;em&gt;exactly&lt;/em&gt; what ended up built on my machine.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;But if you’re curious, here’s a preview: we really need more &lt;a href="http://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"&gt;type definitions&lt;/a&gt; for the Ember ecosystem. I’ll be covering &lt;em&gt;how&lt;/em&gt; we build those in much more detail in a future installment.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="typescript"></category><category term="emberjs"></category><category term="typing-your-ember"></category></entry><entry><title>Why Elm Instead of TypeScript?</title><link href="http://www.chriskrycho.com/2017/why-elm-instead-of-typescript.html" rel="alternate"></link><published>2017-04-23T17:20:00-04:00</published><updated>2017-04-23T17:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-04-23:/2017/why-elm-instead-of-typescript.html</id><summary type="html">&lt;p&gt;A few weeks ago, an acquaintance asked in a Slack channel we’re both in:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I ask a noob type Elm / JS question?&lt;/p&gt;
&lt;p&gt;Why Elm instead of Typescript? The dev stack and functional programming?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I responded as follows, with only light tweaks to clarify a couple things (and I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few weeks ago, an acquaintance asked in a Slack channel we’re both in:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I ask a noob type Elm / JS question?&lt;/p&gt;
&lt;p&gt;Why Elm instead of Typescript? The dev stack and functional programming?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I responded as follows, with only light tweaks to clarify a couple things (and I’ll be reusing some of this material as the basis of an internal tech talk I’m giving on the same subject at Olo in a few weeks):&lt;/p&gt;
&lt;p&gt;A couple things Elm gives you:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It’s not tied to JS directly, which means it’s free to just do what is the best fit for the language rather than needing to be able to express all the quirks and oddities of JS. That’s the single biggest thing I find all the time with TS (which I use every day and do quite like): as good as it is, and as both powerful and expressive as its type system is, at the end of the day it’s… still a superset of JavaScript, and that can mean some really nice things, but it also means a lot of &lt;em&gt;weird&lt;/em&gt; things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm’s type system is &lt;em&gt;sound&lt;/em&gt;; TypeScript’s is not. At a practical level, that means that if an Elm program type-checks (and thus compiles), you can be &lt;em&gt;sure&lt;/em&gt; – not mostly sure, 100% sure – that it is free of things like &lt;code&gt;undefined is not a function&lt;/code&gt;. TypeScript does not (and by design cannot) give you that guarantee. And when I say “by design,” I mean that its designers believed from the outset that soundness was in tension with developer productivity, so they intentionally left a number of “soundness holes” in the type system—there’s still a lot of opportunity for &lt;code&gt;undefined is not a function&lt;/code&gt;, sad to say. You can make it &lt;em&gt;less&lt;/em&gt; than in JS… but not none. (That’s even still true in the TypeScript 2.x series, though the various soundness flags they added in 2.0 and the &lt;code&gt;--strict&lt;/code&gt; option &lt;a href="https://blogs.msdn.microsoft.com/typescript/2017/04/10/announcing-typescript-2-3-rc/"&gt;coming in 2.3&lt;/a&gt; do get you closer.) In Elm, you can make it truly &lt;em&gt;none&lt;/em&gt;. It’s just a sort of known fact at this point that Elm codebases tend to &lt;em&gt;have zero runtime errors&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm’s language design is a huge win.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Elm is a &lt;em&gt;pure functional language&lt;/em&gt;. Because non-pure things are offloaded to the Elm runtime, every single function &lt;em&gt;you&lt;/em&gt; write is pure. Same input means the same output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elm supports first-class currying and partial application. This makes it much, much easier to do the kind of functional-building-block approach that is natural in FP and which is &lt;em&gt;attractive&lt;/em&gt; in (but a lot more work in) JS or TS. Example code to show what I mean—&lt;/p&gt;
&lt;p&gt;Javascript:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const add = (a, b) =&amp;gt; a + b;
const add2 = (c) =&amp;gt; add(2, c);
const five = add2(3);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Elm:&lt;/p&gt;
&lt;pre class="elm"&gt;&lt;code&gt;add a b = a + b
add2 = add 2
five = add2 3&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The combination of the above means that you can refactor and &lt;em&gt;always be sure you get everything&lt;/em&gt;, which is truly magical. And the compiler errors are the best in the world (and that’s no exaggeration).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The way I’d summarize it is to say that Elm makes it easy to do the right thing and hard or impossible to do the wrong thing. TypeScript makes it possible to do the right thing, and gives you a couple switches you can flip to make it harder to do the wrong things, but will ultimately let you do anything.&lt;/p&gt;
</content><category term="Elm"></category><category term="JavaScript"></category><category term="TypeScript"></category><category term="programming languages"></category><category term="functional programming"></category></entry><entry><title>Odd Bits and the Occasional Long-Form Essay</title><link href="http://www.chriskrycho.com/2017/odd-bits-and-the-occasional-long-form-essay.html" rel="alternate"></link><published>2017-04-02T15:30:00-04:00</published><updated>2017-04-02T15:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-04-02:/2017/odd-bits-and-the-occasional-long-form-essay.html</id><summary type="html">One of the things I'm considering carefully is what *theological blogging* will look like for me now, and in the years ahead. The problem is that I'm not particularly sure I want to be doing any of them quite like I was three to five years ago---and I'm *quite* sure I don't want to be doing it like I was ten years ago!</summary><content type="html">&lt;p&gt;In the midst of congratulating me on finishing up my M. Div. classwork a few weeks ago, an acquaintance noted—as a joke, but with more than a kernel of truth to it—that he was looking forward to &lt;em&gt;even more&lt;/em&gt; podcasting and more blogging from me, what with my freer schedule. I laughed and agreed: no doubt I will have a bit more time for both (though I don’t currently plan to add any more podcasts to the already long list).&lt;/p&gt;
&lt;p&gt;But one of the things I’m considering carefully is what &lt;em&gt;theological blogging&lt;/em&gt; will look like for me now, and in the years ahead. Most of the theological content on this site in the past four years has come directly out of my coursework. (Click into the &lt;a href="http://www.chriskrycho.com/theology/"&gt;Theology section&lt;/a&gt; of the site and see how many items are tagged &lt;a href="http://www.chriskrycho.com/sebts/"&gt;#sebts&lt;/a&gt;. It’s &lt;em&gt;most&lt;/em&gt; of them.) My theological writing before that (&lt;a href="http://2012-2013.chriskrycho.com/theology/"&gt;here&lt;/a&gt; and &lt;a href="http://blog.chriskrycho.com"&gt;here&lt;/a&gt;) was largely a mix of the &lt;em&gt;exploratory&lt;/em&gt;, the &lt;em&gt;explanatory&lt;/em&gt;, and the &lt;em&gt;response-to-current-events&lt;/em&gt; kinds of blogging.&lt;/p&gt;
&lt;p&gt;In the exploratory category, I was working out my thoughts on given topics in public. My &lt;a href="http://2012-2013.chriskrycho.com/theology/topics/devotions/"&gt;personal devotions&lt;/a&gt; posts back in 2013 fit well here: these were basically reflecting “out loud” on whatever I was studying in the Bible any given day. In the &lt;em&gt;explanatory&lt;/em&gt; category, I was laying out how I’d already come to think on a given topic, in the hopes it would be helpful to others. &lt;a href="http://2012-2013.chriskrycho.com/theology/will-of-god/"&gt;This post from 2013&lt;/a&gt; and &lt;a href="http://blog.chriskrycho.com/2010/11/debt-and-dogged-discipline.html"&gt;this post from 2010&lt;/a&gt; are both good examples of that. My &lt;a href="http://2012-2013.chriskrycho.com/theology/category/articles/reviews/"&gt;book reviews&lt;/a&gt; fit somewhere else in that mix, too—a bit of both of those, probably. And finally there were the (even then rather rare for me) &lt;a href="http://2012-2013.chriskrycho.com/theology/an-aspen-in-a-forest-of-pines/"&gt;responses to other articles&lt;/a&gt; out there. All of those are a good kind of blogging.&lt;/p&gt;
&lt;p&gt;The problem is that I’m not particularly sure I want to be doing any of them quite like I was three to five years ago—and I’m &lt;em&gt;quite&lt;/em&gt; sure I don’t want to be doing it like I was ten years ago!&lt;/p&gt;
&lt;p&gt;In the last few years, I’ve found my voice as a technical writer. I know that I can site down and work out even a fairly complicated subject in software in a voice that is approachable and engaging, and which people seem to enjoy reading. But at the same time, I’ve “lost” my voice as a theological writer, though &lt;em&gt;lost&lt;/em&gt; is the wrong word for it. It’s not so much that I couldn’t write the way I did a few years ago, but that I don’t want to. I’m glad for people doing that kind of casual blogging, and I still read a few of those blogs (mostly by friends). But I mostly quit reading &lt;a href="https://blogs.thegospelcoalition.org/justintaylor"&gt;Justin Taylor&lt;/a&gt; or &lt;a href="https://blogs.thegospelcoalition.org/kevindeyoung"&gt;Kevin DeYoung&lt;/a&gt; or &lt;a href="https://blogs.thegospelcoalition.org/thabitianyabwile/"&gt;Thabiti Anyabwile&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; or any of the others I read regularly a few years ago—they’re generally publishing good material, and I think they’re a gift to evangelicals. But very little of what they’re saying is particularly interesting to me at this point. They’re doing great topical work. I’m much more interested in looking at structural and systems-level questions, or at things which really can’t be addressed well in the 500–2,000-word range, but require a long essay at a minimum or even a book to tease out the nuances of. I was starting to feel that way a few years ago; and my experiences in seminary have (in ways that might not be exactly what you expect of a seminary experience&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;) sharpened that profoundly.&lt;/p&gt;
&lt;p&gt;I do want to &lt;em&gt;write&lt;/em&gt; on things theological, whether those be theology proper, or theological anthropology, or the ways those press out into ethics and culture and politics and family life and so on. But not so much in the regular-blogger-tackling-current-issues way. People are doing that, and doing it well. Go read &lt;a href="http://blogs.mereorthodoxy.com/matthewloftus/"&gt;Matthew Loftus&lt;/a&gt; or &lt;a href="http://blogs.mereorthodoxy.com/samuel/"&gt;Samuel James&lt;/a&gt; over at Mere O; read &lt;a href="http://text-patterns.thenewatlantis.com"&gt;Alan Jacobs&lt;/a&gt;—&lt;em&gt;please&lt;/em&gt; read Alan Jacobs—read anyone you find helpful along those lines. It just won’t be me. I’m far more interested in essays than in blog posts at this point in this space.&lt;/p&gt;
&lt;p&gt;As such, what I’m going to be doing here, I expect, will be more in the “thinking out loud about topics I’m chewing on” vein. Snippets, not long blog posts—but perhaps pieces of things on the way to being full-blown essays. I’m thinking hard about something I’m calling “algorithmism” (you can follow the bits I’m reading online on that subject &lt;a href="http://feeds.pinboard.in/rss/u:chriskrycho/t:algorithmism/"&gt;via Pinboard&lt;/a&gt;). Don’t expect regularity, and certainly don’t expect hot takes or even commentary on what is current. Odd bits and the occasional long-form essay are more likely to make appearances here.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;All of whom, amusingly enough, ended up at &lt;a href="https://www.thegospelcoalition.org"&gt;The Gospel Coalition&lt;/a&gt;. Another thing which has changed in the last five years is that indie bloggers are even &lt;em&gt;more&lt;/em&gt; rare; the move away from individual sites and toward blogging networks which was hitting when I started seminary has turned into a &lt;em&gt;de facto&lt;/em&gt; standard.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It’s &lt;em&gt;not&lt;/em&gt; because SEBTS was an incredibly academic school which turned me into an overly-academically-minded person. Perhaps I’ll write on that more in the future, but it’s totally ancillary to this post.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category></entry><entry><title>Functions, Objects, and Destructuring in JavaScript</title><link href="http://www.chriskrycho.com/2017/functions-objects-and-destructuring-in-javascript.html" rel="alternate"></link><published>2017-03-27T18:00:00-04:00</published><updated>2017-03-27T18:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-03-27:/2017/functions-objects-and-destructuring-in-javascript.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;A colleague just getting his feet wet with JavaScript, and coming from a background with much more C# than JavaScript, sent me a question on Slack the other day, and I realized the answer I’d written up was more generally helpful, so here you go!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I’m including the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;A colleague just getting his feet wet with JavaScript, and coming from a background with much more C# than JavaScript, sent me a question on Slack the other day, and I realized the answer I’d written up was more generally helpful, so here you go!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;I’m including the context of original question because I want to call out something really important: there are no dumb questions. When you’re just coming up to speed on &lt;em&gt;any&lt;/em&gt; technology, stuff is going to be confusing. That goes double when making the jump as far as between something like C# and something like modern JS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey this may be a really dumb question&lt;/p&gt;
&lt;p&gt;but I’m a JavaScript n00b, and I have no idea what’s going on here&lt;/p&gt;
&lt;p&gt;I’m not used to this syntax&lt;/p&gt;
&lt;p&gt;I have this program:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;function ab() {
   function fa() { console.log(&amp;quot;A&amp;quot;); };
   function fb() { console.log(&amp;quot;B&amp;quot;); };
   return {fa, fb};
};

let {fa, fb} = ab();

fa();
fb();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and it outputs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A
B&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(as expected)&lt;/p&gt;
&lt;p&gt;What I don’t understand is the syntax for the &lt;code&gt;let&lt;/code&gt; part (or maybe even the return from &lt;code&gt;ab()&lt;/code&gt;)&lt;/p&gt;
&lt;ol type="A"&gt;
&lt;li&gt;&lt;p&gt;What is &lt;code&gt;ab()&lt;/code&gt; actually returning? An object with 2 function pointers?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What can’t I do a &lt;code&gt;let {a, b} = ab()&lt;/code&gt; and then call &lt;code&gt;a()&lt;/code&gt; and &lt;code&gt;b()&lt;/code&gt;? I get syntax errors that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; aren’t defined&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;edit to show code that doesn’t work (definition of ab() remains the same):&lt;/em&gt;&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let {a, b} = ab();

a(); // will throw an error here
b();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don’t understand why the names for &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt; have to be the same across all scopes/closures (? am I using those terms correctly? JavaScript is an odd dance partner at times)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;First, your (A) is &lt;em&gt;basically&lt;/em&gt; correct, but the phrase “function pointers” is one you should banish from your mind entirely in this context. In JavaScript, functions are just items like any other. From the language’s perspective, there’s no difference between these things other than what you can do with them:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let foo = &amp;quot;a string&amp;quot;;
function quux(blah) { console.log(&amp;quot;blah is &amp;quot; + blah); }
let bar = quux;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; are just variables. (&lt;code&gt;quux&lt;/code&gt; is a variable, too, but it behaves a little differently; I’ll cover that in a minute.) They have different types, and therefore different things you can do on them. &lt;code&gt;foo&lt;/code&gt; has the &lt;code&gt;length&lt;/code&gt; property and a bunch of string-specific methods attached. &lt;code&gt;bar&lt;/code&gt; is callable. But both of them are just &lt;em&gt;things&lt;/em&gt; in the same way, and at the same level in the program.&lt;/p&gt;
&lt;p&gt;So in your original &lt;code&gt;function ab() { ... }&lt;/code&gt;, what you’re doing is declaring two functions, &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;, and returning them attached to an object.&lt;/p&gt;
&lt;p&gt;For various reasons which aren’t especially interesting, functions can have &lt;em&gt;names&lt;/em&gt;…&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;function fa() { ... }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and can be &lt;em&gt;assigned to other variables&lt;/em&gt;…&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let trulyISayToYou = function waffles() { console.log(&amp;quot;are so tasty&amp;quot;); };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and in fact you can define the functions &lt;em&gt;themselves&lt;/em&gt; anonymously, that is, without any name attached to the function declaration itself: combine those:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let lookMa = function() { console.log(&amp;quot;no function name!&amp;quot;); };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing &lt;code&gt;function ab() { ... }&lt;/code&gt; simultaneously &lt;em&gt;declares&lt;/em&gt; the function and &lt;em&gt;hoists&lt;/em&gt; it, that is, it makes it available in that entire scope, regardless of where it is defined. So you can do this, even though it’s kind of insane most of the time and you shouldn’t:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;quux();
function quux() { console.log(&amp;#39;SRSLY?&amp;#39;); }&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;Now, about returning &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt; from the function.&lt;/p&gt;
&lt;p&gt;First, note that you normally define objects in a long form, like so:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someObject = {
  a: true,
  b: &amp;#39;some string&amp;#39;
};

console.log(someObject.a);  // prints true
console.log(someObject.b);  // prints &amp;quot;some string&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, very, &lt;em&gt;very&lt;/em&gt; often, you find yourself doing something like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// do some work to define what `a` and `b` should be, then...
let someObject = {
  a: a,
  b: b
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this is such a common pattern, the 2015 version of JS introduced a “shorthand,” which lets you just write that last assignment like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someObject = {
  a,
  b
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course, for convenience we often write that on one line:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someObject = { a, b };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can combine that with the fact that you declared two items (functions, but again: that &lt;em&gt;really&lt;/em&gt; doesn’t matter, they could be anything) with the names &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;, and what you’re doing is returning an object containing those two items in it: &lt;code&gt;return {fa, fb}&lt;/code&gt; is equivalent to this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let theFunctions = {
  fa: fa,
  fb: fb, 
};
return theFunctions;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;What about the &lt;code&gt;let&lt;/code&gt; assignment?&lt;/p&gt;
&lt;p&gt;JS has three kinds of name bindings: &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt;. &lt;code&gt;var&lt;/code&gt; bindings act like &lt;code&gt;function&lt;/code&gt;: the names you use get “hoisted”. So:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;console.log(neverDefined);  // throws an error
console.log(definedLater);  // prints undefined
var definedLater = &amp;quot;what&amp;quot;;
console.log(definedLater);  // prints &amp;quot;what&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; behave much more like you’d expect: they’re only valid &lt;em&gt;after&lt;/em&gt; they’re defined, and they’re scoped to the blocks they appear in. (&lt;code&gt;var&lt;/code&gt; will escape things like &lt;code&gt;if&lt;/code&gt; blocks, too. It’s crazy-pants.) The difference between &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; is that they create &lt;em&gt;mutable&lt;/em&gt; or &lt;em&gt;immutable&lt;/em&gt; &lt;em&gt;bindings&lt;/em&gt; to a name.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;let a = true;&lt;/code&gt; is just creating a name, &lt;code&gt;a&lt;/code&gt;, and binding the value &lt;code&gt;true&lt;/code&gt; to it. Likewise, with &lt;code&gt;const b = false;&lt;/code&gt; it’s creating a name, &lt;code&gt;b&lt;/code&gt;, and binding the value &lt;code&gt;false&lt;/code&gt; to it. And those &lt;em&gt;won’t&lt;/em&gt; be hosted. Now, having done &lt;code&gt;let a = true;&lt;/code&gt; we could on the next line write &lt;code&gt;a = false;&lt;/code&gt; and that’s fine: &lt;code&gt;let&lt;/code&gt; bindings are mutable; they can change. We’ll get an error if we try to do &lt;code&gt;b = true;&lt;/code&gt; though, because &lt;code&gt;const&lt;/code&gt; bindings are &lt;em&gt;not&lt;/em&gt; mutable.&lt;/p&gt;
&lt;p&gt;One thing to beware of with that: things like objects and arrays, being reference types, are not themselves created as immutable when you use &lt;code&gt;const&lt;/code&gt;. Rather, the specific &lt;em&gt;instance&lt;/em&gt; is immutably bound to the name. So:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const foo = { a: true };
foo.b = &amp;#39;I can add properties!&amp;#39;;  // okay
delete foo.a;  // okay
foo = { c: &amp;quot;assign a new object&amp;quot; };  // will error&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can change the internals of the item bound to the name, but not assign a new item to the name. For value types (numbers, booleans, etc.), that makes them behave like &lt;em&gt;constants&lt;/em&gt; in other languages. You have to use something like &lt;code&gt;Object.freeze&lt;/code&gt; to get actually constant object types.&lt;/p&gt;
&lt;p&gt;That was a long digression to explain what you’re seeing in a general sense with &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Finally, let’s come back around and talk about that assignment and why you need the names &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As noted, &lt;code&gt;ab()&lt;/code&gt; returns an object with two items attached, &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;. (And again: functions are &lt;em&gt;just&lt;/em&gt; items in JS.) So you could also write that like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let theFunctions = ab();  // theFunctions is now the object returned
theFunctions.fa();  // and it has the `fa` item on it
theFunctions.fb();  // and the `fb` item, too&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, if your original &lt;code&gt;ab()&lt;/code&gt; function had returned other properties, they’d be accessible there, too, in just the same way (though they wouldn’t be callable if they weren’t functions).&lt;/p&gt;
&lt;p&gt;Again, this is a super common pattern: you want to immediately do something with the values returned on an object by some function, and you don’t necessarily want to type out the name of the object every time. So ES2015 introduced &lt;em&gt;destructuring&lt;/em&gt; to help with this problem. I’ll do it without the function in the way to show how it works at the simplest level first.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someObject = {
  foo: &amp;#39;what is a foo anyway&amp;#39;,
  bar: &amp;#39;hey, a place to drink *or* a thing to hit people with&amp;#39;,
  quux: &amp;#39;is this like a duck&amp;#39;
};

console.log(someObject.foo);  // etc.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if we wanted to get at &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;quux&lt;/code&gt;, we could always do that with &lt;code&gt;someObject.quux&lt;/code&gt; and so on. But, especially if we have some large object floating around, we often just want a couple properties from it—say, in this case, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;quux&lt;/code&gt;. We could do that like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let foo = someObject.foo;
let quux = someObject.quux;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course those new names &lt;em&gt;don’t&lt;/em&gt; have to match:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let whatever = someObject.foo;
let weLike = someObject.quux;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, because wanting to snag just a couple items off of objects like this is so common, the shorthand is available. In the case of the shorthand for &lt;em&gt;destructuring&lt;/em&gt;, just like the case of the shorthand for object creation, the names have to match: otherwise, it wouldn’t know what to match them with.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let { foo, quux } = someObject;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, going back to your original example: &lt;code&gt;ab()&lt;/code&gt; returns an object which has the items &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt; on it. You’re using the destructuring assignment there to get just &lt;code&gt;fa&lt;/code&gt; and &lt;code&gt;fb&lt;/code&gt;. There’s no reason they &lt;em&gt;have&lt;/em&gt; to be those names in the outer scope, other than that you’re using the destructuring assignment. You could also do this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let theFunctions = ab();
let oneOfThem = theFunctions.fa;
let theOtherOne = theFunctions.fb;
oneOfThem();  // does what fa() does
theOtherOne();  // does what fb() does&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; that covers everything your questions brought up; but please feel free to ask more!&lt;/p&gt;
&lt;p&gt;The most important thing to take away is that even though yes, those are pointers to functions under the hood, in JS that’s &lt;em&gt;absolutely&lt;/em&gt; no different than the fact that there are pointers to objects and arrays under the hood. Functions are just more items you can do things with. You can put them on objects, you can return them directly, you can take them as arguments, etc.&lt;/p&gt;
&lt;p&gt;Hopefully that’s helpful!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Bonus content: in ES2015 and later, you can also define anonymous functions like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;let someFunction = (someArg) =&amp;gt; { console.log(someArg); };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has some interesting side effects about the value of &lt;code&gt;this&lt;/code&gt; in the body of the function you declare… but that’s for another time.&lt;/p&gt;
</content><category term="javascript"></category></entry><entry><title>Pick the Right Tool for the Job</title><link href="http://www.chriskrycho.com/2017/pick-the-right-tool-for-the-job.html" rel="alternate"></link><published>2017-03-17T22:00:00-04:00</published><updated>2017-03-17T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-03-17:/2017/pick-the-right-tool-for-the-job.html</id><summary type="html">&lt;p&gt;Over the past few years, I’ve been experimenting with publishing microblog posts here on my website as the “canonical” source for them, inspired by some of Manton Reece’s &lt;a href="http://www.manton.org/2014/09/owning-the-microblog.html"&gt;early experiments&lt;/a&gt; that way. I have also spent a considerable amount of time trying to come up with a good …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past few years, I’ve been experimenting with publishing microblog posts here on my website as the “canonical” source for them, inspired by some of Manton Reece’s &lt;a href="http://www.manton.org/2014/09/owning-the-microblog.html"&gt;early experiments&lt;/a&gt; that way. I have also spent a considerable amount of time trying to come up with a good way to share links, and have been rather stymied by the limitations of the static site generator I use (&lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;): it does not support customizing the link target of RSS items.&lt;/p&gt;
&lt;p&gt;Both of these desires, combined with the breadth of my interests, have been motivating factors in my desire to &lt;a href="http://www.chriskrycho.com/lightning-rs/"&gt;build my own CMS/site generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But as of today, I think I am setting aside those two needs, at least for the present (though the underlying information architecture needs for my site are not thereby particularly diminished, so Lightning will still aim for roughly the same goals when i get back to it).&lt;/p&gt;
&lt;p&gt;My reasoning here is two-fold.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;The simple reality is that the vast majority of my microblogging has zero historical value. It is ephemeral; archiving it is essentially a useless gesture, a “because I can” or perhaps “the internet should be permanent” act of defiance. But in truth, if every one of my tweets vanished… it would not matter one whit. I have been considering this for some time, but it came home to me tonight while considering my second point:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have been experimenting with &lt;a href="https://pinboard.in"&gt;Pinboard&lt;/a&gt; as a bookmark management service over the past few weeks, spurred on by yet once more needing to dig out if an email from three years ago a particular post. (You can see my public bookmarks &lt;a href="https://pinboard.in/u:chriskrycho"&gt;here&lt;/a&gt;. It’s a work in progress as far as organization goes.) One lovely Pinboard feature (and there are &lt;a href="http://text-patterns.thenewatlantis.com/2016/07/happy-birthday-pinboard.html"&gt;many others,&lt;/a&gt; including &lt;a href="https://blog.pinboard.in/2016/07/pinboard_turns_seven/"&gt;having a simple, profitable business model&lt;/a&gt;! Yes, that &lt;em&gt;is&lt;/em&gt; a feature as far as I am concerned) is the option of public RSS feeds for publicly-bookmarked items by author, by tag, etc. This is actually what led me to Pinboard in the first place (thanks, &lt;a href="http://text-patterns.thenewatlantis.com/2011/05/pinboard.html"&gt;ayjay&lt;/a&gt;). My Pinboard RSS feed is &lt;a href="http://feeds.pinboard.in/rss/u:chriskrycho/" class="uri"&gt;http://feeds.pinboard.in/rss/u:chriskrycho/&lt;/a&gt;, and if you want to follow along and see what I think is worth reading with occasional comments… that’s where it will be.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the course of writing this post, I also remembered that last night, App.net shut down. I downloaded my archive a few weeks ago… I think. Honestly, I don’t recall, and the truth is that I haven’t looked at old posts there in years, though I amassed some 15,000 in the years I was active there. ADN was beautiful and wonderful. But even the very good conversations I had there are &lt;em&gt;past&lt;/em&gt; in much the same way a conversation when physically present with each other would be. We do not suppose we need audio/video recordings of conversations just in case we might want to search them later. I understand why someone might want to &lt;a href="http://www.manton.org/2017/03/app-net-archive.html"&gt;archive all of ADN&lt;/a&gt;. But I don’t feel that desire myself anymore.&lt;/p&gt;
&lt;p&gt;Archival has value. But its value is not ultimate, and its value is not universal.&lt;/p&gt;
&lt;p&gt;The somewhat-ephemeral things I care about archiving are, I find, &lt;em&gt;links&lt;/em&gt;—not random thoughts or comments or even conversations, but articles and posts I want to be able to come back to later, or quickly find to share with someone.&lt;/p&gt;
&lt;p&gt;So no more microblog posts here. If you want them, you can follow me on Twitter. (If I hear from enough people who would prefer to keep getting them via RSS, I will think about setting up some sort of automated RSS mirror of my stream.) But for my own part, I am content to let the ephemeral be ephemeral. And that is easier to countenance now that microblogging isn’t also a poor-man’s bookmarking tool for me.&lt;/p&gt;
&lt;p&gt;This takes me around to the meta point I had in mind when I started the post: use tools for what they’re good at and don’t try to force them into roles they’re not well-suited for. Twitter is good for ephemera, bad for permanence, decent for finding content I wouldn’t encounter via RSS, horrible for conversation or substantive commentary. Pinboard is great for bookmarking things, for sharing links via RSS, and for seeing what bookmarks others are sharing; but it is not at all “social” in the modern sense, with no facilities for discussion or interaction other than reading others’ links and copying them to your own board. Twotter for ephemera and trivial conversations. Pinboard for links. Blog for longer content.&lt;/p&gt;
</content><category term="writing"></category></entry><entry><title>Differences of Opinion</title><link href="http://www.chriskrycho.com/2017/differences-of-opinion.html" rel="alternate"></link><published>2017-03-12T08:05:00-04:00</published><updated>2017-03-12T08:05:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-03-12:/2017/differences-of-opinion.html</id><summary type="html">&lt;p&gt;I could not possibly agree more with &lt;a href="http://www.pyret.org/pyret-code/"&gt;this view of teaching software/CS&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are focused on introductory programming education at a high-school and collegiate level — what is often called “CS 1” and “CS 2” (roughly, the first year of college). Pyret is being actively used in everything from high-schools …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I could not possibly agree more with &lt;a href="http://www.pyret.org/pyret-code/"&gt;this view of teaching software/CS&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are focused on introductory programming education at a high-school and collegiate level — what is often called “CS 1” and “CS 2” (roughly, the first year of college). Pyret is being actively used in everything from high-schools to upper-level collegiate courses, giving us a tight feedback loop.&lt;/p&gt;
&lt;p&gt;Of course, even in that setting there are differences of opinion about what needs to be taught. Some believe inheritance is so important it should be taught early in the first semester. We utterly reject this belief (as someone once wisely said, “object-oriented programming does not scale down”: what is the point of teaching classes and inheritance when students have not yet done anything interesting enough to encapsulate or inherit from?). Some have gone so far as to start teaching with Turing Machines. Unsurprisingly, we reject this view as well.&lt;/p&gt;
&lt;p&gt;What we do not take a dogmatic stance on is exactly how early state and types should be introduced. Pyret has the usual stateful operations. We discussed this at some length, but eventually decided an introduction to programming must teach state. Pyret also has optional annotations, so different instructors can, depending on their preference, introduce types at different times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I’m &lt;em&gt;delighted&lt;/em&gt; to see work on languages like Dr. Racket and Pyret, and the more so because the teams behind both have been willing to set aside many of the dogmas of how CS has been taught and actually do &lt;em&gt;pedagogical research&lt;/em&gt;. Also: OOP is a useful tool, but I’m with them: treating inheritance as a first-semester concept is… nutty.&lt;/p&gt;
&lt;p&gt;The whole &lt;a href="http://www.pyret.org/pyret-code/"&gt;“Why Pyret?”&lt;/a&gt; page is worth reading if you have any interest in programming languages or teaching software development and computer science.&lt;/p&gt;
</content><category term="programming languages"></category><category term="software development"></category><category term="pedagogy"></category><category term="links"></category></entry><entry><title>Corraling My Coffee Habit</title><link href="http://www.chriskrycho.com/2017/corraling-my-coffee-habit.html" rel="alternate"></link><published>2017-02-23T20:10:00-05:00</published><updated>2017-02-23T20:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-02-23:/2017/corraling-my-coffee-habit.html</id><summary type="html">&lt;p&gt;Because we buy good coffee and good coffee is expensive, and because we’re trying very hard to save for a house, I’ve been thinking about how to corral that particular budget line.&lt;/p&gt;
&lt;p&gt;For a bit of context, we use &lt;a href="https://www.youneedabudget.com" title="You Need A Budget"&gt;&lt;abbr&gt;YNAB&lt;/abbr&gt;&lt;/a&gt;, and we have two ways we spend money …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Because we buy good coffee and good coffee is expensive, and because we’re trying very hard to save for a house, I’ve been thinking about how to corral that particular budget line.&lt;/p&gt;
&lt;p&gt;For a bit of context, we use &lt;a href="https://www.youneedabudget.com" title="You Need A Budget"&gt;&lt;abbr&gt;YNAB&lt;/abbr&gt;&lt;/a&gt;, and we have two ways we spend money on coffee: going out to coffee shops, and as groceries. Perhaps surprisingly, it has been the latter of those two which has been giving us trouble: that second cup of coffee every day—you know, for the pick-me-up in the early afternoon—adds up in a hurry, especially when you’re buying &lt;a href="https://counterculturecoffee.com/"&gt;Counter Culture&lt;/a&gt; or &lt;a href="https://bluebottlecoffee.com/"&gt;Blue Bottle&lt;/a&gt; or the like.&lt;/p&gt;
&lt;p&gt;So I decided this week to make one small tweak to our budgeting flow which should help stem this tide of coffee a bit. Namely: we now have an allocated amount of coffee per day, and if we go past that, a corresponding amount of money moves from our coffee shop budget into our grocery budget.&lt;/p&gt;
&lt;p&gt;Here’s how that works in practice. Our last bag of Counter Culture cost $17.61. I allot myself 8 ounces per day. On Tuesday, I drank an extra 6-ounce cup in the afternoon. The bag is 12 ounces of coffee beans, which is 340 grams. A 6-ounce cup, made the way I make it, uses 11 grams of beans. So then I did a little math: &lt;code&gt;(11 / 340) * 17.61 ~= 0.57&lt;/code&gt; – so I moved $0.57 from my coffee shop budget to my grocery budget. I did the same with the extra 4-ounce cup I had yesterday and the extra 2 ounces I had in my cup this morning.&lt;/p&gt;
&lt;p&gt;Is this budgeting done in excruciatingly minute detail? Yes. Is it helpful to me? Also yes. Do I recommend it? Not unless you’re in the same ballpark of obsessiveness as I am!&lt;/p&gt;
</content><category term="coffee"></category><category term="finances"></category></entry><entry><title>Dear Tech CEOs: Yes, That Is Your Culture.</title><link href="http://www.chriskrycho.com/2017/dear-tech-ceos-yes-that-is-your-culture.html" rel="alternate"></link><published>2017-02-21T17:00:00-05:00</published><updated>2017-02-21T17:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-02-21:/2017/dear-tech-ceos-yes-that-is-your-culture.html</id><summary type="html">&lt;p&gt;It is common, when stories break about horrible company cultures in —as &lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber"&gt;one did this week about Uber&lt;/a&gt;, and as &lt;a href="https://www.nytimes.com/2015/08/16/technology/inside-amazon-wrestling-big-ideas-in-a-bruising-workplace.html?_r=1"&gt;one did last year about Amazon&lt;/a&gt;—for the &lt;abbr&gt;CEO&lt;/abbr&gt;s to say things like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What she describes is abhorrent and against everything Uber stands for and believes in. (Uber &lt;abbr&gt;CEO …&lt;/abbr&gt;&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;It is common, when stories break about horrible company cultures in —as &lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber"&gt;one did this week about Uber&lt;/a&gt;, and as &lt;a href="https://www.nytimes.com/2015/08/16/technology/inside-amazon-wrestling-big-ideas-in-a-bruising-workplace.html?_r=1"&gt;one did last year about Amazon&lt;/a&gt;—for the &lt;abbr&gt;CEO&lt;/abbr&gt;s to say things like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What she describes is abhorrent and against everything Uber stands for and believes in. (Uber &lt;abbr&gt;CEO&lt;/abbr&gt; Travis Kalanick’s statement quoted at &lt;a href="http://www.recode.net/2017/2/19/14665076/ubers-travis-kalanick-susan-fowler-sexual-harassment-investigation"&gt;Recode&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The article doesn’t describe the Amazon I know or the caring Amazonians I work with every day. (Amazon &lt;abbr&gt;CEO&lt;/abbr&gt; Jeff Bezos’ statement quoted at &lt;a href="http://www.geekwire.com/2015/full-memo-jeff-bezos-responds-to-cutting-nyt-expose-says-tolerance-for-lack-of-empathy-needs-to-be-zero/"&gt;Geekwire&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem with this is simple. You can say all day that these events don’t represent your culture. But they &lt;em&gt;do&lt;/em&gt;. And if you’re not aware of it, that means you have two problems: the culture problem, and the fact that you’re so out of touch with what your company is actually like that you don’t know it has that culture problem.&lt;/p&gt;
&lt;p&gt;And you have one other, even bigger problem. If that’s the culture of the company you’ve built, it’s &lt;em&gt;your fault&lt;/em&gt;. You can’t foist it off on your underlings: you hired them. You can’t foist it off on the bureaucracy: you built it. You can’t foist it off on wrong priorities: you set those priorities. It’s on you.&lt;/p&gt;
</content><category term="ethics"></category></entry><entry><title>Better Off Using Exceptions?</title><link href="http://www.chriskrycho.com/2017/better-off-using-exceptions.html" rel="alternate"></link><published>2017-02-20T12:00:00-05:00</published><updated>2017-02-20T12:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-02-20:/2017/better-off-using-exceptions.html</id><summary type="html">&lt;p&gt;I saw this post on error-handling in F&lt;sup&gt;♯&lt;/sup&gt;, &lt;a href="https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/" title="You’re better off using Exceptions"&gt;“You’re better off using Exceptions”&lt;/a&gt; making the rounds on Twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception handling is an error management paradigm that has often been met with criticism. Such criticisms typically revolve around scoping considerations, exceptions-as-control-flow abuse or even the assertion that exceptions are really …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I saw this post on error-handling in F&lt;sup&gt;♯&lt;/sup&gt;, &lt;a href="https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/" title="You’re better off using Exceptions"&gt;“You’re better off using Exceptions”&lt;/a&gt; making the rounds on Twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception handling is an error management paradigm that has often been met with criticism. Such criticisms typically revolve around scoping considerations, exceptions-as-control-flow abuse or even the assertion that exceptions are really just a type safe version of goto. To an extent, these seem like valid concerns but it is not within the scope of this article to address those per se.&lt;/p&gt;
&lt;p&gt;Such concerns resonate particularly well within FP communities, often taken to the extreme: we should reject exceptions Show more…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I get the argument, and in the specific context of F&lt;sup&gt;♯&lt;/sup&gt;—especially given how much C&lt;sup&gt;♯&lt;/sup&gt;-interoperating and therefore exception-throwing-code-interoperating there is there—it’s reasonable.&lt;/p&gt;
&lt;p&gt;But it still makes me sad. (To be clear: exceptions were and are a big win over what you get in languages like C. I’ll take them any day over &lt;code&gt;goto&lt;/code&gt; or &lt;code&gt;segfault&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;You need to embrace exceptions in F&lt;sup&gt;♯&lt;/sup&gt; &lt;em&gt;because F&lt;sup&gt;♯&lt;/sup&gt; has exceptions&lt;/em&gt; and because &lt;em&gt;many of its libraries rely on exceptions&lt;/em&gt;. But my experience with Rust and other non-exception-using languages is that you &lt;em&gt;don’t&lt;/em&gt; need exceptions in the general case.&lt;/p&gt;
&lt;p&gt;The questions are: whether your language has good support for things like flat-mapping, and whether you’re willing to commit to letting the compiler help you with these problems.&lt;/p&gt;
&lt;p&gt;To be sure: there’s more work involved up front to deal with that. But that’s a tradeoff I’m &lt;em&gt;always&lt;/em&gt; willing to make. I’d rather have the compiler tell me if I’m failing to account for something than learn because I saw a runtime error report come up in &lt;a href="https://raygun.com"&gt;Raygun&lt;/a&gt;, especially because that tends to mean an error that affects the user in some way.&lt;/p&gt;
&lt;p&gt;Rust’s model gives you something like exceptions for truly unrecoverable errors, “panics.” A panic gives you all the context you’d get from an exception (one of the virtues of exceptions highlighted in that post), but you can only “catch” it at thread boundaries, and it otherwise just kills the program. Because it’s catastrophic, you only use it where you don’t have any way to recover in your immediate context. But where you can recover in your immediate context… using something like a highly descriptive enum (just as suggested at the end of &lt;a href="https://eiriktsarpalis.wordpress.com/2017/02/19/youre-better-off-using-exceptions/" title="You’re better off using Exceptions"&gt;that original post&lt;/a&gt;!) is a better option.&lt;/p&gt;
&lt;p&gt;It’s well-understood in my circles that you shouldn’t use exceptions for things you can recover from; you should use them for things you &lt;em&gt;can’t&lt;/em&gt; recover from. But in most languages which lean heavily on exceptions, you inevitably start using them for control flow. I say: if you can recover from an error… just recover from it! Account for recoverable errors as possible conditions in your program and carry on! If you can’t recover… don’t. Die and let some other part of your system kick things back off.&lt;/p&gt;
&lt;p&gt;In summary: yes, if you’re in F&lt;sup&gt;♯&lt;/sup&gt;, use exceptions. It &lt;em&gt;is&lt;/em&gt; the right thing to do in many cases (and you don’t have a choice in many others). But I’m hopeful for a future where we handle recoverable errors locally, and &lt;a href="http://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html"&gt;act like Erlang or Elixir otherwise&lt;/a&gt;.&lt;/p&gt;
</content><category term="fsharp"></category><category term="software development"></category><category term="rust"></category><category term="functional programming"></category></entry><entry><title>Where Do I File This?</title><link href="http://www.chriskrycho.com/2017/where-do-i-file-this.html" rel="alternate"></link><published>2017-02-19T11:00:00-05:00</published><updated>2017-02-19T11:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-02-19:/2017/where-do-i-file-this.html</id><summary type="html">&lt;p&gt;I want to write more. Blogging does me good. &lt;a href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html" title="A Few Theses on Blogging"&gt;I say this&lt;/a&gt; often, but I’m finally coming to a point where it might be a bit more doable. Finishing my M. Div. is giving me more time, and that’s &lt;em&gt;really&lt;/em&gt; wonderful. The trick now is deciding which of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I want to write more. Blogging does me good. &lt;a href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html" title="A Few Theses on Blogging"&gt;I say this&lt;/a&gt; often, but I’m finally coming to a point where it might be a bit more doable. Finishing my M. Div. is giving me more time, and that’s &lt;em&gt;really&lt;/em&gt; wonderful. The trick now is deciding which of the many things I want to do will get my attention. I can split my focus a thousand ways, or I can pick a few tasks and zero in on them and aim to be good at them.&lt;/p&gt;
&lt;p&gt;In the case of blogging, I have no doubt it’s something I want to continue. But I need to think about &lt;em&gt;how&lt;/em&gt; and &lt;em&gt;why&lt;/em&gt; I want to use it, and this relates closely to some of my goals for an information architecture-level restructuring of the site I want to do when I finish building &lt;a href="https://github.com/chriskrycho/lightning-rs"&gt;lightning-rs&lt;/a&gt;. &lt;em&gt;Blogging&lt;/em&gt;, at its best, isn’t long-form articles (though there is certainly room for those on my website as a whole), but &lt;a href="http://blogs.mereorthodoxy.com/samuel/2017/02/17/4-requests-young-evangelical-writers/" title="4 Requests to Young Evangelical Writers"&gt;short, cogent pieces which pack a punch and move on&lt;/a&gt;, or &lt;a href="http://text-patterns.thenewatlantis.com/2017/01/those-darn-millennials.html" title="those darn millennials?"&gt;thinking out loud&lt;/a&gt;. Even in my own experience, the best &lt;em&gt;blog posts&lt;/em&gt; I have written are quite different from the best &lt;em&gt;essays&lt;/em&gt; I have written. Embracing that seems like a helpful first step.&lt;/p&gt;
&lt;p&gt;I have more than a few large project-style blog posts I have not finished—most regrettably, at present, one about podcasting which I told a friend I was working on some weeks ago—in part because I have tried to treat them like blog posts &lt;em&gt;and&lt;/em&gt; essays or projects at the same time.&lt;/p&gt;
&lt;p&gt;What I think I’d like to end up with is &lt;em&gt;something&lt;/em&gt; like this, in terms of structure in the new site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Journal&lt;/strong&gt;—something like a &lt;a href="https://en.wikipedia.org/wiki/Commonplace_book"&gt;“commonplace journal”&lt;/a&gt;, but shared publicly. This would include several kinds of content:
&lt;ul&gt;
&lt;li&gt;blog posts—things like this little piece, of course, but also the &lt;em&gt;vast&lt;/em&gt; majority of the content I put on the site&lt;/li&gt;
&lt;li&gt;links to &lt;em&gt;other&lt;/em&gt; blog posts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Projects &lt;em&gt;&amp;amp;&lt;/em&gt; Series&lt;/strong&gt;—the home for more substantive chunks of content
&lt;ul&gt;
&lt;li&gt;long-running series like my &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;Rust and Swift&lt;/a&gt; posts, which are not particularly &lt;em&gt;bloggy&lt;/em&gt; (for lack of a better word)&lt;/li&gt;
&lt;li&gt;things like my &lt;a href="http://www.chriskrycho.com/2016/2016-review-intro.html"&gt;2016 in Review&lt;/a&gt; series&lt;/li&gt;
&lt;li&gt;some projects more like some of the things &lt;a href="http://craigmod.com"&gt;Craig Mod&lt;/a&gt; has done over the years: curated collections of materials that complement each other&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Articles&lt;/strong&gt;—call this aspirational; if or when I have things published in a more formal way, I’d like them to have a home on my website as well&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This structure has some challenges of its own, of course. Where does a poem go? Is it part of my “journal” or is it more of a one-off “project”? And within those, I shall want both overlapping “categories” as well as cross-cutting “subjects”: it is impossible to cleanly separate &lt;em&gt;all&lt;/em&gt; of my Tech and Theology writing from each other, yet having &lt;em&gt;some&lt;/em&gt; high-level categories grows increasingly important for navigating the site as its content grows. (This becomes a problem even just for me as I look for old posts to link them—much less for any &lt;em&gt;other&lt;/em&gt; reader of my site!)&lt;/p&gt;
&lt;p&gt;Part of the problem with all such taxonomies is that they are arbitrary and constrictive so far as they cannot overlap. Perhaps something goes in &lt;em&gt;both&lt;/em&gt; &lt;strong&gt;Projects&lt;/strong&gt; and &lt;strong&gt;Journal&lt;/strong&gt;—but then that makes it far harder for a user of the site to navigate. And here, as I hinted in my parenthetical above, there is another of these tensions: how I think of something and use it for organization of my materials is broadly orthogonal to the needs or interests of potential readers, and both of us use the site!&lt;/p&gt;
&lt;p&gt;Of course, these are problems for all sufficiently complex collections of data. It is equally as hard to manage these questions of organization for large, focused writing projects (like a thesis or a novel) as for a varied collection of materials like this site, though the details differ. It is much &lt;em&gt;harder&lt;/em&gt; when dealing with an operating system and its collection of myriad kinds of data. We muddle on with our self-imposed limitations, because the alternative tends to be chaos. Unconstrained tagging systems quickly devolve to madness.&lt;/p&gt;
&lt;p&gt;And this is not merely a digital problem: filing cabinets have the same constraints. Yet perhaps the apparent &lt;em&gt;freedom&lt;/em&gt; offered by the digital world exacerbates it; the sense that perhaps we could escape the constraint that a note can only go in one place—because it &lt;em&gt;can&lt;/em&gt; go in more than one virtual place—makes us reach for solutions which may only increase our frustration in the end. Perhaps just being forced to put something in a place (even if not a perfect one) is a good discipline. But perhaps not; perhaps that freedom is a gift if we use it wisely. I think there is room for further work here in any case.&lt;/p&gt;
&lt;p&gt;So: more to come as I continue to chew on these problems of information architecture and user interface. &lt;a href="https://twitter.com/chriskrycho"&gt;Links to others’ thoughts&lt;/a&gt; and &lt;a href="mailto:hello@chriskrycho.com?subject=Structuring%20content"&gt;more detailed comments of your own&lt;/a&gt; most welcome.&lt;/p&gt;
</content><category term="writing"></category></entry><entry><title>The Collect of the Day</title><link href="http://www.chriskrycho.com/2017/01-16-collect.html" rel="alternate"></link><published>2017-01-16T07:17:00-05:00</published><updated>2017-01-16T07:17:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-01-16:/2017/01-16-collect.html</id><summary type="html">&lt;blockquote&gt;
&lt;div class="line-block"&gt;Almighty God,&lt;br /&gt;
in Christ you make all things new:&lt;br /&gt;
transform the poverty of our nature by the riches of your grace,&lt;br /&gt;
and in the renewal of our lives&lt;br /&gt;
make known your heavenly glory;&lt;br /&gt;
through Jesus Christ your Son our Lord,&lt;br /&gt;
who is alive and reigns with you,&lt;br /&gt;
in the unity …&lt;/div&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;div class="line-block"&gt;Almighty God,&lt;br /&gt;
in Christ you make all things new:&lt;br /&gt;
transform the poverty of our nature by the riches of your grace,&lt;br /&gt;
and in the renewal of our lives&lt;br /&gt;
make known your heavenly glory;&lt;br /&gt;
through Jesus Christ your Son our Lord,&lt;br /&gt;
who is alive and reigns with you,&lt;br /&gt;
in the unity of the Holy Spirit,&lt;br /&gt;
one God, now and for ever.&lt;br /&gt;
Amen.&lt;/div&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category><category term="prayer"></category></entry><entry><title>On Blogging</title><link href="http://www.chriskrycho.com/2017/on-blogging.html" rel="alternate"></link><published>2017-01-04T23:25:00-05:00</published><updated>2017-01-04T23:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-01-04:/2017/on-blogging.html</id><summary type="html">A few thoughts on Medium, micro.blog, and the open web.</summary><content type="html">&lt;p&gt;My wife is out of town and I had coffee at our church small group tonight, so I’m wide awake and up late, thinking about &lt;em&gt;blogging&lt;/em&gt;. It’s been on my mind a lot lately. (And what follows is, appropriately, as you will see, blogging in the old style—which is to say: a bit rambly. I apologize. It’s the coffee.)&lt;/p&gt;
&lt;p&gt;A friend at our small group meeting tonight mentioned his intent to start blogging this year. He had a lot of good reasons for jumping in, and I strongly encouraged it. Blogging is not for everyone—we’ll get to that—but blogging is &lt;em&gt;good&lt;/em&gt;. This newish thing, writing-on-the-web-in-a-log, has been a part of my life for over a decade now. I wrote my first post on Xanga in the fall of 2005, and I have not gone more than a matter of weeks between posts since. It is not hyperbole to say I cannot imagine &lt;em&gt;not&lt;/em&gt; blogging at this point. (The sheer number of words I &lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html" title="So. many. words. I had no idea how many words."&gt;published last year&lt;/a&gt; should serve to drive home that point: even in a year which was full to the brim, I somehow ended up publishing almost 70,000 words.)&lt;/p&gt;
&lt;p&gt;And yet, blogging is not at all like it was in when I started in 2005. Both for good and for ill. The mid-2000s were in many ways the height of blogs’ power and reach. Individual sites still hosted all their own content; blogging networks were nascent; and the ability of small content providers to outdo the old guard was beginning to be felt at all levels. Bloggers made a difference in the 2004 election not &lt;em&gt;so&lt;/em&gt; different than the way Twitter shaped all sorts of politics in 2016.&lt;/p&gt;
&lt;p&gt;Twitter. That brings us to one of the things that has changed. Microblogging is new. And social media more generally has changed a great deal. Facebook was still the fledgling upstart nipping at MySpace’s heels when I published that first post on Xanga. Today, Facebook dominates the web, and Twitter—not even a product at all in 2005—has taken enormous chunks of the time and attention of the would-be writerly class (journalists especially).&lt;/p&gt;
&lt;p&gt;I first took my own blogging &lt;em&gt;seriously&lt;/em&gt; on &lt;a href="http://blog.chriskrycho.com"&gt;the Blogger site&lt;/a&gt; which first ran in parallel with and then displaced that Xanga. And Blogger, too, evokes a different time: when individuals setting up blogs was trendy, and when the competition between WordPress and Blogger could be called a competition. (Much-neglected Blogger trucks on still, but WordPress powers perhaps a quarter of the sites on the web.)&lt;/p&gt;
&lt;p&gt;But for all that, some things haven’t changed. Business plans still matter—and Ev Williams, founder of Blogger, Twitter, and Medium, still hasn’t figured out something truly sustainable. Attention-driven advertising of the same sort that powered Blogger then and now, and which powers Twitter and Facebook equally, continues to be a race toward the bottom. Sustainable publishing on the web is a mirage for all but a few, because &lt;a href="https://stratechery.com/2014/publishers-smiling-curve/"&gt;content is plentiful and distinguishing features few&lt;/a&gt;. The &lt;a href="http://daringfireball.net"&gt;Daring Fireball&lt;/a&gt;s of the world are notable, these days, not least for how few of them there are.&lt;/p&gt;
&lt;p&gt;In some ways, there is something real to mourn in the passing of the web of those early days when I started blogging. People &lt;em&gt;did&lt;/em&gt; own their own content (at least, to a far greater degree than now). Blogs linked to each other, using &lt;a href="https://en.support.wordpress.com/comments/pingbacks/"&gt;ping-backs&lt;/a&gt; to let sites know when they’d been linked. Comment sections flourished.&lt;/p&gt;
&lt;p&gt;But that era also required a level of technical knowledge that was simply too high a bar for most people. To be sure, anyone could set up a blog with enough grit, and WordPress and Blogger lowered the bar. But subscribing to another blog meant wrangling RSS and learning the arcana of managing Google Reader (which soon swallowed all competitors before its own too-delayed demise). Twitter’s “follow” button seems a revelation by comparison; it is no wonder at all that first Tumblr and then Medium embraced the idea of blogs-as-social-media, “following” and all. Being able not only to respond, and only if the author so allowed, but also to &lt;em&gt;initiate&lt;/em&gt; with anyone else on the service… the first time you @-mentioned someone well-known in your circles, and they responded—that was (and is) a heady thing.&lt;/p&gt;
&lt;p&gt;Centralization is often a function of convenience. Facebook and Twitter make it simple for you to “connect with” or “follow” whomever you like. No digging for RSS feeds, wondering if they have a non-standard symbol for it or hoping desperately that it’s at the root of the site + &lt;code&gt;feed.xml&lt;/code&gt;, or (if you really know the secrets of the web) that they set it up as a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag with a &lt;code&gt;rel='alternate'&lt;/code&gt; tag so it could just be discovered automatically by a smart-enough feed reader…&lt;/p&gt;
&lt;p&gt;You see? If you aren’t technical yourself, your eyes just glazed over in that paragraph, and that’s the point. The technical details make sense if you understand them. But understanding them is hard; and more to the point, they don’t matter for what people actually want to accomplish.&lt;/p&gt;
&lt;p&gt;This is the fundamental mistake of Manton Reece’s new &lt;a href="http://micro.blog"&gt;micro.blog&lt;/a&gt; project (which I like in principle, and whose goals &lt;a href="http://www.chriskrycho.com/micro/"&gt;I clearly share&lt;/a&gt;). People as a whole don’t even know there might be a reason to prefer the open web, where everyone owned their own content and there was no central clearing-house of information. Facebook offers real value to people: it shows them things they’re interested, and keeps them coming back precisely by tailoring its algorithm to make sure they don’t see too many things they &lt;em&gt;don’t&lt;/em&gt; want to see. (The polarization that helps foster may be dreadful, but it’s &lt;a href="https://stratechery.com/2016/fake-news/"&gt;very good business&lt;/a&gt;.) The same goes for Twitter, regardless of the structure of its timeline: people self-select into their lists of whom to follow. Manton’s project is a good one in many ways—but the problem it solves is a &lt;a href="http://www.winningslowly.org/5.03/"&gt;Winning Slowly&lt;/a&gt; kind of problem, and one that takes a lot of selling when the problem Facebook solves is obvious: &lt;em&gt;I want a new story and a picture of my cousin’s kid and a funny cat video.&lt;/em&gt; Decentralizing, whatever its benefits (and again: note well my &lt;em&gt;bona fides&lt;/em&gt; &lt;a href="https://github.com/chriskrycho/chriskrycho.com"&gt;here&lt;/a&gt;), makes those basic tasks &lt;em&gt;harder&lt;/em&gt;. I’ve followed what is now the micro.blog project from a distance for years now—and I’ve always had this one, nagging but oh-so-important question. &lt;em&gt;How does this solve a &lt;strong&gt;user&lt;/strong&gt; problem?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The answer, if there is one, is a decades-long play. It’s a hedge against technological oligarchy. But how do you get people to care? What’s the pitch? The technical problems are easy compared to that—and the technical problems &lt;em&gt;are not easy&lt;/em&gt;; they remain almost untouched in the last decade, and micro.blog has no intent to address some of the core issues. Real-time interaction is what makes Twitter Twitter; ping-backs aren’t even close. And that’s just Twitter; Facebook outstrips it by far.&lt;/p&gt;
&lt;p&gt;And Medium? Medium doesn’t know what it wants to be when it grows up (and it never has; the same as Twitter). As a second pass at Blogger, it has better aesthetics and something like a mission. Ev &lt;a href="https://blog.medium.com/renewing-mediums-focus-98f374a960be"&gt;writes&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So, we are shifting our resources and attention to defining a new model for writers and creators to be rewarded, based on the value they’re creating for people. And toward building a transformational product for curious humans who want to get smarter about the world every day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s a lovely-sounding sentiment. It’s also—for today, at least—contentless business blather. “Building a transformational product for curious humans who want to get smarter about the world every day” sounds great, but it doesn’t mean anything. Medium is a beautiful product without a reason to exist. (How often do you see a founder basically admit: &lt;em&gt;We have no idea what we’re doing here&lt;/em&gt;? But that’s roughly what Ev did.) That doesn’t mean it shouldn’t exist. It just means no one has thought of a &lt;em&gt;good&lt;/em&gt; reason for it to just yet.&lt;/p&gt;
&lt;p&gt;Medium as a centralized, social medium for longer-form writing is better than nothing. I’ll take Medium + Facebook + Google over just Facebook + Google any day. But is there something lost when every blog post looks the same, and when everyone is locked into one more centralized platform? Yes. Just as there is something &lt;em&gt;gained&lt;/em&gt; by people having a place to look. The questions are: whether the costs are indeed higher than the benefits; and even if so whether people can be persuaded of those costs when they all take a decade to appear, and Medium is really pleasant to scroll through &lt;em&gt;right now&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;By whatever quirk of temperament, I’m old-school about blogs. I’d love for the open web to win out over all the centralizers. That’s not going to happen: &lt;em&gt;centralization provides too much value to users&lt;/em&gt;. But we can hope the open web will flourish alongside centralized sources. And, far more importantly, we can work to that end.&lt;/p&gt;
&lt;p&gt;We can show people why it matters, and teach them how to own for themselves even the things you publish on Facebook. We can make philosophies like &lt;abbr title="Publish (on your) Own Site, Syndicate Everywhere"&gt;&lt;a href="https://indieweb.org/POSSE"&gt;POSSE&lt;/a&gt;&lt;/abbr&gt; easier to implement (because right now it’s just plain &lt;em&gt;hard&lt;/em&gt;). We can let Twitter be secondary and our own blogs primary as a way of setting an example. We can do the hard technical work of figuring out something like real-time, decentralized, better-than-ping-back commenting-and-threading-and-responding for all sorts of content on the web.&lt;/p&gt;
&lt;p&gt;But even solving those technical problems will require us to recognize that the bigger and more important problems are &lt;em&gt;human&lt;/em&gt; problems. It’s going to require distinguishing, for example, between &lt;a href="https://medium.com/matter/the-web-we-have-to-save-2eb1fe15a426"&gt;the web we have to save&lt;/a&gt; and &lt;a href="http://www.chriskrycho.com/2016/12-31-0817.html"&gt;mere ephemera&lt;/a&gt;. If there are goods of how-blogging-was-in-2008 that are worth keeping, what if anything do they have to do with whether the content of nearly any Twitter account is “owned” by the user who generated them? Will the user care, two decades from now? (Or two days?)&lt;/p&gt;
&lt;p&gt;Put another way, we need to care about the open web not in some general or abstract sense, and certainly not just on its technical merits, but instead—and quite specifically—as one means of serving other people. If we cannot express it in those terms, we show that we do not understand the real problems at all. It wouldn’t be the first time a bunch of technically-oriented nerds missed the boat.&lt;/p&gt;
</content><category term="writing"></category><category term="open web"></category></entry><entry><title>TypeScript keyof Follow-Up</title><link href="http://www.chriskrycho.com/2017/typescript-keyof-follow-up.html" rel="alternate"></link><published>2017-01-03T20:35:00-05:00</published><updated>2017-01-08T17:47:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-01-03:/2017/typescript-keyof-follow-up.html</id><summary type="html">&lt;p&gt;I recently wrote up some neat things you can do with &lt;a href="http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html"&gt;&lt;code&gt;keyof&lt;/code&gt; and mapped types&lt;/a&gt; in TypeScript 2.1. In playing further with those bits, I ran into some interesting variations on the approach I outlined there, so here we are.&lt;/p&gt;
&lt;p&gt;In the previous post, I concluded with an example …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently wrote up some neat things you can do with &lt;a href="http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html"&gt;&lt;code&gt;keyof&lt;/code&gt; and mapped types&lt;/a&gt; in TypeScript 2.1. In playing further with those bits, I ran into some interesting variations on the approach I outlined there, so here we are.&lt;/p&gt;
&lt;p&gt;In the previous post, I concluded with an example that looked like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type UnionKeyToValue&amp;lt;U extends string&amp;gt; = {
  [K in U]: K
};

type State
  = &amp;#39;Pending&amp;#39;
  | &amp;#39;Started&amp;#39;
  | &amp;#39;Completed&amp;#39;;

// Use `State` as the type parameter to `UnionKeyToValue`.
const STATE: UnionKeyToValue&amp;lt;State&amp;gt; = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That &lt;code&gt;UnionKeyToValue&amp;lt;State&amp;gt;&lt;/code&gt; type constraint requires us to fill out the &lt;code&gt;STATE&lt;/code&gt; object as expected. The whole point of this exercise was to give us the benefit of code completion with that STATE type so we could use it and not be worried about the kinds of typos that too-often bite us with stringly-typed arguments in JavaScript.&lt;/p&gt;
&lt;p&gt;It turns out we don’t &lt;em&gt;need&lt;/em&gt; that to get completion, though. All editors which use the TypeScript language service will give us the same degree of completion if we start typing a string and then trigger completion:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://f001.backblazeb2.com/file/chriskrycho-com/images/more-ts.gif" title="screen capture of string completion in VS Code" alt="string completion with TypeScript 2.1" /&gt;&lt;figcaption&gt;string completion with TypeScript 2.1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Granted that you have to know this is a string (though the JetBrains &lt;abbr title="integrated development environment"&gt;IDE&lt;/abbr&gt;s will actually go a step further and suggest the right thing &lt;em&gt;without&lt;/em&gt; needing the string key). But that’s roughly equivalent to knowing you need to import the object literal constant to get the completion that way. Six one, half dozen the other, I think.&lt;/p&gt;
&lt;p&gt;This makes it something of a wash with the original approach, as long as you’re dealing in a pure-TypeScript environment. The big advantage that the original approach still has, of course, is that it also plays nicely with a mixed TypeScript and JavaScript environment. If you’re just progressively adding TypeScript to an existing JavaScript codebase, that’s possibly reason enough to stick with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: an additional reason to prefer my original solution:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="en"&gt;
&lt;p lang="en" dir="ltr"&gt;
&lt;a href="https://twitter.com/chriskrycho"&gt;@chriskrycho&lt;/a&gt; &lt;a href="https://twitter.com/typescriptlang"&gt;@typescriptlang&lt;/a&gt; I think a benefit of your previous solution is that you can rename keys and all their usages.
&lt;/p&gt;
— Timm (@timmpreetz) &lt;a href="https://twitter.com/timmpreetz/status/816672215924097024"&gt;January 4, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
</content><category term="programming languages"></category><category term="software development"></category><category term="typescript"></category><category term="javascript"></category></entry><entry><title>The Prayers of the Church</title><link href="http://www.chriskrycho.com/2017/the-prayers-of-the-church.html" rel="alternate"></link><published>2017-01-03T06:08:00-05:00</published><updated>2017-01-03T06:08:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-01-03:/2017/the-prayers-of-the-church.html</id><summary type="html">&lt;p&gt;The prayers of the Church are a gift.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Almighty God,&lt;br /&gt;
who wonderfully created us in your own image&lt;br /&gt;
and yet more wonderfully restored us&lt;br /&gt;
through your Son Jesus Christ:&lt;br /&gt;
grant that, as he came to share in our humanity,&lt;br /&gt;
so we may share the life of his divinity;&lt;br /&gt;
who is …&lt;/div&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The prayers of the Church are a gift.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Almighty God,&lt;br /&gt;
who wonderfully created us in your own image&lt;br /&gt;
and yet more wonderfully restored us&lt;br /&gt;
through your Son Jesus Christ:&lt;br /&gt;
grant that, as he came to share in our humanity,&lt;br /&gt;
so we may share the life of his divinity;&lt;br /&gt;
who is alive and reigns with you,&lt;br /&gt;
in the unity of the Holy Spirit,&lt;br /&gt;
one God, now and for ever.&lt;br /&gt;
Amen.&lt;/div&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category><category term="prayer"></category></entry><entry><title>On ebooks (again)</title><link href="http://www.chriskrycho.com/2017/on-ebooks-again.html" rel="alternate"></link><published>2017-01-02T07:55:00-05:00</published><updated>2017-01-02T07:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-01-02:/2017/on-ebooks-again.html</id><summary type="html">&lt;p&gt;Yesterday, I &lt;a href="https://twitter.com/chriskrycho/status/815583525177004032"&gt;tweet-complained&lt;/a&gt; about Lifeway’s ebook policy; posted &lt;a href="http://www.chriskrycho.com/2017/01-01-1056.html"&gt;here&lt;/a&gt; on this site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record: &lt;a href="https://twitter.com/LifeWay"&gt;@LifeWay&lt;/a&gt; has the single most user-hostile ebook policy I’ve encountered anywhere. Shame on whoever made these decisions. &lt;a href="https://twitter.com/chriskrycho/status/815583525177004032"&gt;∞&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They &lt;a href="https://twitter.com/LifeWay/status/815665143388442624"&gt;invited feedback&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho"&gt;@chriskrycho&lt;/a&gt; We’re sorry you feel this way. Please DM us the specifics …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Yesterday, I &lt;a href="https://twitter.com/chriskrycho/status/815583525177004032"&gt;tweet-complained&lt;/a&gt; about Lifeway’s ebook policy; posted &lt;a href="http://www.chriskrycho.com/2017/01-01-1056.html"&gt;here&lt;/a&gt; on this site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record: &lt;a href="https://twitter.com/LifeWay"&gt;@LifeWay&lt;/a&gt; has the single most user-hostile ebook policy I’ve encountered anywhere. Shame on whoever made these decisions. &lt;a href="https://twitter.com/chriskrycho/status/815583525177004032"&gt;∞&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They &lt;a href="https://twitter.com/LifeWay/status/815665143388442624"&gt;invited feedback&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho"&gt;@chriskrycho&lt;/a&gt; We’re sorry you feel this way. Please DM us the specifics of your concern. We are always trying to improve. &lt;a href="https://twitter.com/LifeWay/status/815665143388442624"&gt;∞&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So they got it. But since the content of my response is not specific to Lifeway—I’ve seen the same kind of user/customer-hostile behavior in many places, albeit not to the same degree—I thought I’d repost it publicly:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Per your request, sending some info about ebooks. To be clear, I know whoever runs the social media account is &lt;em&gt;far&lt;/em&gt; removed from this kind of decision, and I don’t hold anyone but the corporate decision-makers remotely responsible.&lt;/p&gt;
&lt;p&gt;The current status on ebooks purchased at LifeWay is that you can read them only in the dedicated LifeWay app or in a web view (the latter of which is, frankly, terrible—both as a consumer of many such apps and as a web software developer).&lt;/p&gt;
&lt;p&gt;Experientially, this makes for a massively more frustrating experience for the user. There is no reason why a customer should not be able to read the book on her Kindle, his Kobo, her Dell PC, his Mac, etc. except the idea that it will somehow “prevent piracy” to do so.&lt;/p&gt;
&lt;p&gt;Empirically, however, these kinds of moves &lt;em&gt;do not&lt;/em&gt; prevent piracy. Any and all DRM methods can and will be cracked (and indeed have been).&lt;/p&gt;
&lt;p&gt;The net result, then, is a massive inconvenience to customers, with no actual increase in sales for the distributor.&lt;/p&gt;
&lt;p&gt;For some corroborating evidence in this direction, please see &lt;a href="http://www.tor.com/2013/04/29/tor-books-uk-drm-free-one-year-later/"&gt;here&lt;/a&gt;. Note especially this comment (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Protecting our author’s intellectual copyright will always be of a key concern to us and we have very stringent anti-piracy controls in place. But DRM-protected titles are still subject to piracy, and we believe a great majority of readers are just as against piracy as publishers are, understanding that piracy impacts on an author’s ability to earn an income from their creative work. &lt;strong&gt;&lt;em&gt;As it is, we’ve seen no discernible increase in piracy on any of our titles, despite them being DRM-free for nearly a year.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please respect your customers. Let us put the ebooks in whatever reading app or device we choose.&lt;/p&gt;
&lt;p&gt;And please also understand that until you do so, I will go out my way to warn people off of buying &lt;em&gt;any&lt;/em&gt; ebook from Lifeway, because the current approach is so consumer-hostile.&lt;/p&gt;
&lt;p&gt;Again, I understand entirely that the folks running social media have nothing to do with these policies; I hope you’re able to pass it along to those who can and do. Have a great 2017!&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="from-my-outbox"></category></entry><entry><title>2016 in Review, Part 6 of 6</title><link href="http://www.chriskrycho.com/2017/2016-review-6.html" rel="alternate"></link><published>2017-01-01T08:00:00-05:00</published><updated>2017-01-01T08:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2017-01-01:/2017/2016-review-6.html</id><summary type="html">Some big goals for 2017, and some smaller ones too.</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;I originally drafted a single, mammoth post reflecting on this whole year—but at more than 6,000 words, that seemed like a bit much. As such, I’ve broken it into a series of posts, to be published daily through the start of the new year. Hopefully they’re a bit more digestible that way!&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-intro.html"&gt;Introduction, or: a ridiculous year summarized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-1.html"&gt;Part 1: Running headfirst into a wall of pneumonia.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html"&gt;Part 2: So. many. words. I had no idea how many words.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-3.html"&gt;Part 3: Podcasting: Winning Slowly, New Rustacean, and more!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-4.html"&gt;Part 4: Writing software for Olo and for open source.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-5.html"&gt;Part 5: Getting things done in 2016 and beyond.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 6: Plans for 2017! (this post)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;In 2017, I really only have a few big goals:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Graduate seminary.&lt;/li&gt;
&lt;li&gt;Spend good time with my family.&lt;/li&gt;
&lt;li&gt;Love our church well.&lt;/li&gt;
&lt;li&gt;Work hard for Olo.&lt;/li&gt;
&lt;li&gt;Save money for a house.&lt;/li&gt;
&lt;li&gt;Replace &lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; with &lt;a href="https://github.com/chriskrycho/lightning-rs"&gt;Lightning&lt;/a&gt; for this site.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have a bunch of smaller goals, too, of course. That list includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;publish two episodes of New Rustacean every month (of various formats—not all the full-length teaching-a-subject type)&lt;/li&gt;
&lt;li&gt;publish 16–20 episodes of Winning Slowly&lt;/li&gt;
&lt;li&gt;complete a full-length sprint triathlon&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;run a &lt;a href="http://cityofoaksmarathon.com"&gt;marathon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;be able to do 15 consecutive pull-ups and 100 consecutive push-ups&lt;/li&gt;
&lt;li&gt;lose ten pounds and get back down to my target weight&lt;/li&gt;
&lt;li&gt;document all the undocumented features in Rust, and get the Rust reference all the way up to date (&lt;a href="https://github.com/rust-lang/rust/issues/38643"&gt;tracking issue&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;finish a couple side projects (and bring in the associated money!)&lt;/li&gt;
&lt;li&gt;teach in our small group at least a half dozen times&lt;/li&gt;
&lt;li&gt;write at least one long essay for Mere Orthodoxy&lt;/li&gt;
&lt;li&gt;publish the scripts and transcripts of New Rustacean as an ebook&lt;/li&gt;
&lt;li&gt;publish hard copies of the archives of my blog, in a way that mirrors the style of the site at the time it was written&lt;/li&gt;
&lt;li&gt;fully archive the Blogger and WordPress versions of this blog as static HTML&lt;/li&gt;
&lt;li&gt;move all the sites I host (mine and others) out of shared hosting and into a server I manage (probably Digital Ocean or Linode)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But basically all of those are flexible (and, if I’m honest, so is #6 in the first list—though it’s a &lt;em&gt;high&lt;/em&gt; priority as far as the flexible ones go).&lt;/p&gt;
&lt;p&gt;I have a pretty good handle on how I’m going to chase those things. The productivity patterns I’ve established over the last couple years are serving me well so far, and I expect them to continue to. After graduation, things will obviously look a little different, and I’m looking forward to that, too. Being able to take vacations where I’m not losing ground by not working on school projects? That sounds truly amazing.&lt;/p&gt;
&lt;p&gt;I’m also looking forward to digging into more books I want to read and making progress on writing I want to do in the realm of theology, philosophy, ethics, and so on. I’ve spent nearly all the mental energy I have available for those subjects on seminary work over the past several years (with varying degrees of value for that effort). Once again being able to focus my own external studies as I like will be very freeing, I think. I hope to find some ways to continue to work at something like an academic level, and—crazy though it sounds right &lt;em&gt;now&lt;/em&gt;—I do hope to get a Ph.D. in &lt;em&gt;something&lt;/em&gt; in a few decades. But I am looking forward to having a lot of years of reading and writing outside academia between now and then.&lt;/p&gt;
&lt;p&gt;All those goals are good, but ultimate I’m willing to just see what the year brings. I’d love to compose music again more regularly and at greater length. I’d love to write more fiction, and more (and better) poetry. But we’ll also be starting some schooling with Ellie, and dealing with the logistics of planning a move to Colorado sometime in late 2017 or the first half of 2018. We’ll be enjoying just not having nearly so much to do right after finishing seminary. It’s worth remembeirng to rest, and not do just jump into another season of being incredibly slammed by busyness. I plan to take some time to read novels and play video games, too. Those things are good for our souls in their own way.&lt;/p&gt;
&lt;p&gt;And come what may, I hope to glorify God in the midst of it. Rest, work, play, side projects, you name it—&lt;em&gt;soli deo gloria.&lt;/em&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;750m swim, 20km (12mi) ride, 5km (3.1mi) run&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="podcasting"></category><category term="software development"></category><category term="family"></category><category term="productivity"></category><category term="fitness"></category><category term="2016-in-review"></category></entry><entry><title>2016 in Review, Part 5 of 6</title><link href="http://www.chriskrycho.com/2016/2016-review-5.html" rel="alternate"></link><published>2016-12-31T09:30:00-05:00</published><updated>2016-12-31T09:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-31:/2016/2016-review-5.html</id><summary type="html">My strategy for productivity: less social media, careful use of my time, and embracing the "pomodoro technique".</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;I originally drafted a single, mammoth post reflecting on this whole year—but at more than 6,000 words, that seemed like a bit much. As such, I’ve broken it into a series of posts, to be published daily through the start of the new year. Hopefully they’re a bit more digestible that way!&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-intro.html"&gt;Introduction, or: a ridiculous year summarized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-1.html"&gt;Part 1: Or: a ridiculous year summarized!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html"&gt;Part 2: So. many. words. I had no idea how many words.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-3.html"&gt;Part 3: Podcasting: Winning Slowly, New Rustacean, and more!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-4.html"&gt;Part 4: Writing software for Olo and for open source.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 5: Getting things done in 2016 and beyond. (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/2016-review-6.html"&gt;Part 6: Plans for 2017!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;At a number of points over the last few years, I’ve tackled the question of productivity. I always have far more I &lt;em&gt;want&lt;/em&gt; to get done than I’m able to actually get to. A few of those posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2014/boosting-my-productivity.html" title="Boosting My Productivity"&gt;Boosting My Productivity&lt;/a&gt; (December, 2014)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/a-new-schedule.html" title="A New Schedule"&gt;A New Schedule: Trying to make better use of my time toward my goals&lt;/a&gt; (July 2016)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A common theme of all productivity plans, of course, is that one can get more focused on the details of the plan than on actually being productive! I’m happy to say, however, that this &lt;em&gt;wasn’t&lt;/em&gt; the case for me with these productivity approaches. First, I have never allowed myself to be slavish about them. If I need to do something different on a given day, I do something different. Second, I am generally able to remember that the point of the plan is &lt;em&gt;what I’m getting done&lt;/em&gt;. So with that in mind, some comments particularly on the plan I sketched out &lt;a href="http://www.chriskrycho.com/2016/a-new-schedule.html" title="A New Schedule"&gt;mid-year this year&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I fell off that wagon almost immediately. Readers who’ve stuck with me through these various updates will note that this ambitious plan preceded my disastrous 20-mile run and the ensuing bout of walking pneumonia by a matter of days. It took me until September to get back on the horse, so to speak, because even after I got over being sick, I was traveling—and nothing throws off my schedule like traveling! Happily, I got quite a bit done both during the conference trip I took and during the week I was in Colorado for my youngest sister’s wedding, but it wasn’t until after both of those that I was able to settle back into the routine I’d aimed for.&lt;/p&gt;
&lt;p&gt;The major themes of that post were a detailed plan for my days, cutting out a lot of my social media, and thinking about weekends. The detailed plan for my days I kept off and on. I never consistently managed to have the block of time-for-side-projects at the end of my days, and that increasingly meant those things cut into weekends (impacting that goal as well). As for social media, that’s largely been a success: I now rarely get on Facebook, and only check Twitter from time to time. Certainly neither is much of a timesink anymore. I do continue to make heavy use of Slack outside of work, but I’ve found a good balance there (and the main communities I’m a part of have gone through their own adjustments as we’ve &lt;em&gt;all&lt;/em&gt; found the need for this kind of focus and balance).&lt;/p&gt;
&lt;p&gt;So it wasn’t perfect, but I did find it a very useful approach overall. I fully expect to stick with something very like it in 2017. Hopefully I won’t be pulling as many 10–11 hour days as I was in the latter half of 2016—but regardless, building this new discipline around the overall structure of each day was very helpful.&lt;/p&gt;
&lt;p&gt;One &lt;em&gt;big&lt;/em&gt; part of my approach to productivity that I’m definitely going to keep is the “pomodoro” technique. I first mentioned this in the &lt;a href="http://www.chriskrycho.com/2014/boosting-my-productivity.html" title="Boosting My Productivity"&gt;first&lt;/a&gt; discussion I posted about this, but I’ve embraced it more and more. I work in 25-minute blocks, punctuated by 5-minute breaks. Nearly all of those 5-minute breaks entail walking, and as a result I get about 2–3 miles of walking in every day on top of my runs. That helps enormously with focus. This fall, I also embraced the &lt;em&gt;other&lt;/em&gt; half of the pomodoro technique: writing down goals and outcomes for each of those 25-minute blocks. Even more than the daily goals I discussed in the opening post of this series, this lower level of tracking has proved very helpful. It has given me a sense of what I have actually accomplished each day, and it has also helped me &lt;em&gt;focus&lt;/em&gt; as I’m trying to keep moving on various tasks each day. I highly recommend using the pomodoro approach (adapted as necessary to your particular circumstances, of course) as a tool for that kind of focus and productivity.&lt;/p&gt;
&lt;p&gt;I’d be remiss if I didn’t also note the following &lt;em&gt;very&lt;/em&gt; substantial factors in my productivity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;fitness/health:&lt;/strong&gt; if I’m active, I focus better. People say they don’t have time to exercise; I mean it when I say I don’t have time &lt;em&gt;not&lt;/em&gt; to. I keep it pretty simple: running, cycling, swimming, and body-weight strength stuff. But I do it basically every day. And we eat fairly healthily. Both of those are incredibly important.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;sleep:&lt;/strong&gt; no matter how busy I am, I don’t pull all-nighters or anything of the sort. I get a minimum of 6 and usually 7–7½ hours of sleep every night. Even when I’m tired from pulling week after week of 10-hour work days, I can keep going because I get enough sleep.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;no commute:&lt;/strong&gt; working remotely is awesome for a lot of reasons, but one of them is that I don’t lose the hour or three every day to the road/subway/etc. that many people I know do. That’s a &lt;em&gt;lot&lt;/em&gt; of time over the course of a year. 48 working weeks means if you commute for an hour total every day, that’s 240 hours a year—that’s 30 8-hour days worth of “getting things done”.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps at some point after I finish seminary I will expand the various things I do in productivity into a more complete series, but this gives you a good idea of what 2016 looked like, and what I expect 2017 to look like!&lt;/p&gt;
</content><category term="writing"></category><category term="podcasting"></category><category term="software development"></category><category term="family"></category><category term="productivity"></category><category term="fitness"></category><category term="2016-in-review"></category><category term="pomodoro"></category></entry><entry><title>2016 in Review, Part 4 of 6</title><link href="http://www.chriskrycho.com/2016/2016-review-4.html" rel="alternate"></link><published>2016-12-30T07:00:00-05:00</published><updated>2016-12-30T07:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-30:/2016/2016-review-4.html</id><summary type="html">Olo is great; I helped build (almost from scratch) a large mobile web application; I did some open-source software; it was a good year professionally.</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;I originally drafted a single, mammoth post reflecting on this whole year—but at more than 6,000 words, that seemed like a bit much. As such, I’ve broken it into a series of posts, to be published daily through the start of the new year. Hopefully they’re a bit more digestible that way!&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-intro.html"&gt;Introduction, or: a ridiculous year summarized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-1.html"&gt;Part 1: Running headfirst into a wall of pneumonia.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html"&gt;Part 2: So. many. words. I had no idea how many words.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-3.html"&gt;Part 3: Podcasting: Winning Slowly, New Rustacean, and more!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4: Writing software for Olo and for open source. (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-5.html"&gt;Part 5: Getting things done in 2016 and beyond.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/2016-review-6.html"&gt;Part 6: Plans for 2017!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;This year at Olo was a great year overall. I very much enjoy working with the people there, the tech stack is good and they’re paying me to do what I love, and if the product isn’t lighting my world on fire (online restaurant ordering is cool, but restaurants aren’t a passion of mine), that’s a tradeoff I can live with. Working with good people with a good tech stack on a product you find &lt;em&gt;fine&lt;/em&gt; rather than &lt;em&gt;amazing&lt;/em&gt; is actually pretty great. I’m grateful for previous jobs, but this one has superceded them in every possible way. I’m &lt;em&gt;glad&lt;/em&gt; to start work every day—and in truth, there have been more than a few days where I would have liked nothing more than to keep writing JavaScript rather than switching over to do some reading and writing for seminary. That bodes well for my future plans: post-seminary, I expect to bump from 30 to 40 hours a week with Olo&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and keep making our software as awesome as I can. And I expect to enjoy that!&lt;/p&gt;
&lt;p&gt;Speaking of numbers: GitHub reports that I contributed +29,463/−13,726 lines of code in our new mobile web ordering experience, which I helped build nearly from scratch this year. (That “negative” is stuff I rewrote or removed entirely by finding a better implementation.)&lt;/p&gt;
&lt;p&gt;Quite a bit of my &lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html"&gt;writing&lt;/a&gt; this year was technical, too: some ~33,000 of the words on my blog—fully a third of the things I published on this site apart from microblog posts and schoolwork—was about software. That included entries 11–18 of my &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;Rust and Swift&lt;/a&gt; series, but about 20,000 words were assorted discussions of JavaScript, Rust, podcasting, functional programming, etc. A fair bit of that content came out of things I worked on for Olo, either directly (as in the case of &lt;a href="http://www.chriskrycho.com/2016/what-is-functional-programming.html" title="What is Functional Programming? (And why should we care about it?)"&gt;this talk&lt;/a&gt;) or indirectly (as in the case of &lt;a href="http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html" title="keyof and Mapped Types in TypeScript 2.1"&gt;this discussion of TypeScript 2.1&lt;/a&gt;) That’s a good mix, and I hope to continue putting out material that’s useful to others as well as interesting to me. (I do get tweets now and again confirming that the content is helpful, and I &lt;em&gt;don’t&lt;/em&gt; run analytics on the site at all—so if you like something I write, please tell me. It’s encouraging. And that goes for &lt;em&gt;any&lt;/em&gt; author you read, as a rule.)&lt;/p&gt;
&lt;p&gt;Finally, I actually did a little bit of open-source contributing this year. Not as much as I’d like, but a little. And I also count New Rustacean as a pretty substantial contribution to the Rust community. The fact that it isn’t code doesn’t diminish what it’s doing. If you’re feeling like code is the only thing that &lt;em&gt;really&lt;/em&gt; counts, recognize that all the code in the world isn’t that useful without explanations of how to use it, helping people become interested in the first place, and so on. Speaking of non-code contributions, the open-source contribution I’m &lt;em&gt;most&lt;/em&gt; proud of is certainly the &lt;a href="https://github.com/rust-lang/rfcs/pull/1636"&gt;Rust RFC&lt;/a&gt; I wrote and which was recently accepted and merged. It proposed (and it is now the official policy of the Rust project) that no new features may be added to the (stable version of the) language or the standard library without first being documented. This is a big deal for the language, and it was also a big deal for me, in that it was another place where—despite being far too busy to write a lot of Rust code this year—I could make a real difference in a community I’m passionate about. And one of my goals for next year is a direct follow-on from that: &lt;a href="https://github.com/rust-lang/rust/issues/38643"&gt;actually implementing the requirement&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The other big thing going on for me in the software world is that I started work on &lt;a href="https://github.com/chriskrycho/lightning-rs"&gt;Lightning&lt;/a&gt;, a new static site generator in Rust. (There’s another such project, &lt;a href="http://cobalt-org.github.io"&gt;Cobalt&lt;/a&gt;, which is already usable.) I’ve been pushing up against the limits of &lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt;, my current generator, for a while. And I’ve looked around time and again, and never found a CMS or SSG that does everything my peculiar publishing needs require (&lt;em&gt;especially&lt;/em&gt; in a way that I like!). And my needs are indeed peculiar, though probably not wholly unique; for most people, any one of &lt;a href="https://staticsitegenerators.net"&gt;&lt;em&gt;many&lt;/em&gt; other site generators&lt;/a&gt; would work just fine. So I’m doing what I’ve been thinking about doing for years, and building my own. My immediate goals are mostly just to have something that is super speedy and which checks off all my needs from a CMS/site generator. My longer-term goals include getting some good foundational knowledge I’ll need for &lt;a href="http://www.chriskrycho.com/2016/ulysses-byword-and-just-right.html"&gt;my &lt;em&gt;next&lt;/em&gt; project&lt;/a&gt;. I’m a thousand lines in, and have some pieces working. I hope very much to move off of Pelican and onto Lightning (and get a freshened theme for this site) in 2017!&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, Olo has been incredibly generous and hired me as a full-time employee at 30-hours-a-week with pro-rated salary. Like I said: amazing company.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="podcasting"></category><category term="software development"></category><category term="family"></category><category term="productivity"></category><category term="fitness"></category><category term="2016-in-review"></category></entry><entry><title>2016 in Review, Part 3 of 6</title><link href="http://www.chriskrycho.com/2016/2016-review-3.html" rel="alternate"></link><published>2016-12-29T10:30:00-05:00</published><updated>2016-12-29T10:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-29:/2016/2016-review-3.html</id><summary type="html">On top of my 200,000 words of writing this year, I also published some 66 episodes and almost 20 hours of podcasting across four different shows.</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;I originally drafted a single, mammoth post reflecting on this whole year—but at more than 6,000 words, that seemed like a bit much. As such, I’ve broken it into a series of posts, to be published daily through the start of the new year. Hopefully they’re a bit more digestible that way!&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-intro.html"&gt;Introduction, or: a ridiculous year summarized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-1.html"&gt;Part 1: Running headfirst into a wall of pneumonia.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html"&gt;Part 2: So. many. words. I had no idea how many words.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: Podcasting: Winning Slowly, New Rustacean, and more! (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-4.html"&gt;Part 4: Writing software for Olo and for open source.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-5.html"&gt;Part 5: Getting things done in 2016 and beyond.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/2016-review-6.html"&gt;Part 6: Plans for 2017!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Beyond &lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html"&gt;the written word&lt;/a&gt;, the other “writing”-type work I had this year—some of it including &lt;em&gt;actual&lt;/em&gt; writing in the form of detailed scripts—was podcasting!&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: center;"&gt;Show&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Episodes&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Total time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;25&lt;/td&gt;
&lt;td style="text-align: center;"&gt;11h 40m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="http://www.newrustacean.com"&gt;New Rustacean&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;22&lt;/td&gt;
&lt;td style="text-align: center;"&gt;6h 46m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="http://runwith.chriskrycho.com"&gt;Run With Me&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;19&lt;/td&gt;
&lt;td style="text-align: center;"&gt;1h 1m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="http://www.sap-py.com"&gt;sap.py&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;1&lt;/td&gt;
&lt;td style="text-align: center;"&gt;12m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;strong&gt;67&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;strong&gt;19h 39m&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Again, several of those numbers surprised me a bit. For one thing, I had to put New Rustacean on hiatus starting in October courtesy of the crunch I ended up with from the &lt;em&gt;Rust vs. Swift&lt;/em&gt; project colliding with the other summer-and-fall commitments I had. For another Stephen and I paused Winning Slowly between Seasons 4 and 5 (as we usually do) and also have taken a mid-season pause on Season 5 because of end-of-semester crunches for both of us and then his wife having a baby a few weeks earlier than expected. Yet in spite of that, almost 20 hours of audio content this year! If I hit that again in 2017, I’ll be happy.&lt;/p&gt;
&lt;p&gt;Whether &lt;a href="http://www.sap-py.com"&gt;sap.py&lt;/a&gt; will be back, I have no idea. I love making the show with Jaimie, but it’s really up to her whether she wants to keep working on Python. Of late, she’s been working on &lt;a href="https://www.etsy.com/shop/PemberlyPrintables" title="Jaimie&amp;#39;s printable shop on Etsy"&gt;printable art&lt;/a&gt; instead, and that’s delightful in its own right. I’ve &lt;a href="http://runwith.chriskrycho.com/runs/14/"&gt;just&lt;/a&gt; gotten &lt;a href="http://runwith.chriskrycho.com"&gt;Run With Me&lt;/a&gt; going again in the past day; I got off track when my headphone microphone stopped working for a bit and never got back &lt;em&gt;on&lt;/em&gt; track when it started working again. I’m looking forward to once again talking about running while running.&lt;/p&gt;
&lt;p&gt;I expect to be publishing an even wider variety of kinds of episodes of New Rustacean in 2017. Listeners should get another couple of interviews, a lot more of the “here is a Rust concept in detail” episodes (at least one a month in general, I hope!), news episodes, undoubtedly a few bonus episodes, and a new “Crates You Should Know” format designed to highlight crates I’ve found useful in my own Rust work. I continue to find Rust a wonderful language, and I hear regularly that this is one of people’s favorite programming podcasts. I hope to keep it that way!&lt;/p&gt;
&lt;p&gt;We expect to wrap up &lt;a href="http://www.winningslowly.org/season-5.html" title="Winning Slowly Season 5: Structure and Agency"&gt;Season 5&lt;/a&gt; of &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt; mid-spring, and then begin recording Season 6 mid-to-late summer. All of that is pending how things go as Stephen finishes his dissertation and likely prepares to move across the country to take a job as a professor somewhere, of course. But that’s the plan—and yes, we already know the rough shape of Season 6, even this far out. We know the season topic, and have some basic ideas of where we want to go with it. As is usually the case with our “seasons” now, it will take ideas we’ve touched on here and there and turn them into a full-blown, months-long exploration of those ideas as applied to specific issues. Winning Slowly remains one of my very favorite projects, not least because there is (to our knowledge) nothing else out there doing quite the same thing. Tackling long-term trends in technology with a distinctively (though not always overtly) Christian perspective (but &lt;em&gt;not&lt;/em&gt; a reductionist one) is apparently our gap to fill. We’ll take it.&lt;/p&gt;
&lt;p&gt;Two other podcasting-related bits. First, I wrote a &lt;a href="https://mereorthodoxy.com/theses-on-podcasting/" title="32 Theses (and several more words) on Podcasting"&gt;~5,000-word piece for Mere Orthodoxy&lt;/a&gt; explaining how the medium works, what its constraints are, and what is involved in doing it well. If podcasting is interesting to you, I think the piece is well worth your time—precisely because of, and not in spite of, its length! Second, I gave a pair of guest lectures for Stephen at N.C. State University this fall, which are both available in the &lt;a href="http://www.winningslowly.org/season-bonus.html"&gt;bonus section&lt;/a&gt; on &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;. Those cover some of the same ground as the piece at Mere O, but they also talk a lot more about the details of finding a topic, an “authorial voice”, and an angle for your show.&lt;/p&gt;
</content><category term="writing"></category><category term="podcasting"></category><category term="software development"></category><category term="family"></category><category term="productivity"></category><category term="fitness"></category><category term="2016-in-review"></category></entry><entry><title>2016 in Review, Part 2 of 6</title><link href="http://www.chriskrycho.com/2016/2016-review-2.html" rel="alternate"></link><published>2016-12-28T07:00:00-05:00</published><updated>2016-12-28T07:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-28:/2016/2016-review-2.html</id><summary type="html">One of my goals for 2016 was to continue writing not only on this blog but in other outlets. I did a *lot* of writing this year, but relatively little of it is published. But here's a look at some of the numbers! (And they are large!)</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;I originally drafted a single, mammoth post reflecting on this whole year—but at more than 6,000 words, that seemed like a bit much. As such, I’ve broken it into a series of posts, to be published daily through the start of the new year. Hopefully they’re a bit more digestible that way!&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-intro.html"&gt;Introduction, or: a ridiculous year summarized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-1.html"&gt;Part 1: Running headfirst into a wall of pneumonia.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: So. many. words. I had no idea how many words. (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-3.html"&gt;Part 3: Podcasting: Winning Slowly, New Rustacean, and more!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-4.html"&gt;Part 4: Writing software for Olo and for open source.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-5.html"&gt;Part 5: Getting things done in 2016 and beyond.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/2016-review-6.html"&gt;Part 6: Plans for 2017!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;One of my goals for 2016 was to continue writing not only on this blog but in other outlets. I did a &lt;em&gt;lot&lt;/em&gt; of writing this year, but relatively little of it is published. But here’s a look at some of the numbers! Note that “This site” excludes republication of school papers, and that I don’t have an exact count for the school papers because I’ve already discarded a few of the shorter pieces, but their average length is well-known to me. More on the unpublished &lt;em&gt;Rust vs. Swift&lt;/em&gt; project below.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: center;"&gt;Category&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Words&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="http://www.chriskrycho.com/m-div/"&gt;School&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;~130,500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://mereorthodoxy.com/author/chris-krycho/"&gt;Mere Orthodoxy&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;~6000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;This site&lt;/td&gt;
&lt;td style="text-align: center;"&gt;~63,000&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;&lt;em&gt;Rust vs. Swift&lt;/em&gt; project&lt;/td&gt;
&lt;td style="text-align: center;"&gt;~9350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td style="text-align: center;"&gt;&lt;strong&gt;~207,850&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Of the writing for school, only a small fraction of it is &lt;a href="http://www.chriskrycho.com/m-div/"&gt;published here&lt;/a&gt;, unlike previous years. Roughly 75,000 words of that content is research notes I put together for an independent study I did—which was deeply profitable for me in terms of thinking through hermeneutical and theological systems, and which will hopefully be helpful for the professor for whom I prepared them, but which are not at all publishable. Another 10,000 of those words fit in a category charitably describable as “busy-work” and publishing them is &lt;em&gt;possible&lt;/em&gt; but would have no &lt;em&gt;value&lt;/em&gt;. The school-writing also includes the notes and manuscripts for my sermon-delivery class. You can find those sermons &lt;a href="http://www.chriskrycho.com/sermons/"&gt;on this site&lt;/a&gt; as well well, with audio, video, and the manuscripts available—but the notes are not worth publishing, as they’re entirely internal. Still: they’re words, I wrote them, and there are a lot of them.&lt;/p&gt;
&lt;p&gt;On the plus side, I wrote one of the papers I’m proudest of from my entire seminary career in the spring: &lt;a href="http://www.chriskrycho.com/2016/realism-and-antirealism.html"&gt;Realism and Antirealism—A key debate in the philosophy of science (with interesting implications for young-earth creationism)&lt;/a&gt;. I’m happy with it not least because I wrote it in a very compressed fashion because of some family health issues that hit at the end of that semester, and it still turned out extremely well because I had &lt;em&gt;planned&lt;/em&gt; it meticulously. Despite having only a single draft with one typo-level revision pass, it’s easily the best paper I’ve ever written. It turns out that doing a really careful outline helps when you’re working at this scale. I’ve not normally been a fan of outlining (and I’ve not normally found it helpful when I’ve tried it), but for any longer, more sustained argument, it’s absolutely necessary.&lt;/p&gt;
&lt;p&gt;Of the content on this site (excluding republication of school papers), an astounding ~14,000 of those words are in my “microblog” content. It’s amazing how much those little posts add up. That said, I’m surprised to see that I’ve put out as many &lt;em&gt;other&lt;/em&gt; words as I have this year on this site, and the total there is rather staggering. Writing on this site includes everything from &lt;a href="http://www.chriskrycho.com/2016/ask.html" title="Ask: a short story"&gt;fiction&lt;/a&gt; and &lt;a href="http://www.chriskrycho.com/2016/to-paint-god-as-a-man.html" title="To paint God as a man: an Advent poem"&gt;poetry&lt;/a&gt; to &lt;a href="http://www.chriskrycho.com/2016/a-simple-childrens-catechism.html"&gt;a simple children’s catechism&lt;/a&gt; to &lt;a href="http://www.chriskrycho.com/2016/what-is-functional-programming.html"&gt;an introduction to functional programming&lt;/a&gt;. I’m exceptionally pleased in retrospect to see how this came out, and I look forward to writing on equally varied terms in the year ahead.&lt;/p&gt;
&lt;p&gt;Some 13,000 of the words I wrote for this site were in my &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;Rust and Swift&lt;/a&gt; series, a project I’ve enjoyed enormously since starting it in 2015 and would like to get back to in 2017. It went on hold because I was offered, and accepted, a contract to write a 30–40 page report for O’Reilly comparing the two languages, which was intended to come out this fall. Unfortunately, somewhere along the way some wires got crossed and my pitch and what they wanted didn’t end up being the same. Once that became clear (at the beginning of October), they opted to drop the project. This was a huge disappointment to me: it was a small hit financially, but a big one time-wise, as I sunk a &lt;em&gt;lot&lt;/em&gt; of hours into it in what was an already-very-busy fall; the project was over ¾ done when it was dropped.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A few big lessons I learned from this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Don’t overcommit. Even if the project had gone through without issue, it would have been more on my plate than I could reasonably handle. The fact that it was canceled after having done a lot of the work meant it was also &lt;em&gt;financially&lt;/em&gt; frustrating, but I had overcommitted regardless. Won’t do that again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be &lt;em&gt;even more&lt;/em&gt; clear up-front about the terms and goals of a project. I don’t know how we ended up with the crossed wires we did, but it was extremely frustrating.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you can get an advance, get an advance. Just saying.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In general, I’m quite pleased with the &lt;em&gt;volume&lt;/em&gt; of my output in 2016 (who wouldn’t be, right?). I’d definitely like a lot more of that to be public-facing in 2017, even if it’s lower in overall volume. I hope to take the material from that canceled &lt;em&gt;Rust vs. Swift&lt;/em&gt; project, expand it slightly, and self-publish it. I also hope to put together at least one substantive essay for Mere Orthodoxy next year. And of course there will probably be thousands of words in this space, too—inevitably more than I even realize.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note as well that this excludes all the &lt;a href="https://github.com/chriskrycho/newrustacean.com/tree/589cd13225cde91f92bfca93f6679f2395d78886/docs"&gt;podcast scripts&lt;/a&gt; I wrote this year! Those would add well over 10,000 more words to this count.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, that number includes these posts!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;They wanted an analysis of when you’d choose each language; I pitched a comparison along similar lines to my blog series, looking at the language design choices as a view into software engineering tradeoffs. When the mismatch became clear, I pointed out that “when to choose Rust vs. Swift” is, generally speaking, a roughly two-sentence answer: “Choose Rust for cross-platform, high-performance/low-level code. Choose Swift if you’re writing apps on an Apple platform.” This was not, apparently, obvious to everyone else involved. In the words of the internet: &lt;span style="whitespace: nowrap"&gt;¯\_(ツ)_/¯&lt;/span&gt;&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="writing"></category><category term="podcasting"></category><category term="software development"></category><category term="family"></category><category term="productivity"></category><category term="fitness"></category><category term="2016-in-review"></category></entry><entry><title>2016 in Review, Part 1 of 6</title><link href="http://www.chriskrycho.com/2016/2016-review-1.html" rel="alternate"></link><published>2016-12-27T17:00:00-05:00</published><updated>2016-12-27T17:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-27:/2016/2016-review-1.html</id><summary type="html">Accidental 20-mile runs, walking pneumonia, gaining weight because of metabolic shifts, and other adventures in my "fitness" in 2016.</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;I originally drafted a single, mammoth post reflecting on this whole year—but at more than 6,000 words, that seemed like a bit much. As such, I’ve broken it into a series of posts, to be published daily through the start of the new year. Hopefully they’re a bit more digestible that way!&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-intro.html"&gt;Introduction, or: a ridiculous year summarized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 1: Running headfirst into a wall of pneumonia. (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html"&gt;Part 2: So. many. words. I had no idea how many words.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-3.html"&gt;Part 3: Podcasting: Winning Slowly, New Rustacean, and more!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-4.html"&gt;Part 4: Writing software for Olo and for open source.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-5.html"&gt;Part 5: Getting things done in 2016 and beyond.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/2016-review-6.html"&gt;Part 6: Plans for 2017!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Wait, hold on,&lt;/em&gt; you say. &lt;em&gt;Go back. How did you get walking pneumonia?&lt;/em&gt; This is a fun story, and it’s a huge part of what made the other parts of the latter half of 2016 go the way they did.&lt;/p&gt;
&lt;p&gt;I went for what I expected to be a 15–16 mile long run as part of training for the half-marathon I signed up for this year. The previous week &lt;a href="http://runwith.chriskrycho.com/runs/12/" title="Run summary on runwith.chriskrycho.com"&gt;I’d done a 14-mile run&lt;/a&gt;, so 15–16 would have been no problem. I was feeling &lt;em&gt;awesome&lt;/em&gt; on the run, so decided to extend it to 17. This was right at the edge of what makes good sense for a week-over-week increase in mileage; you generally want to stick with ~10% increases and max out at 20%; but 17 is right at that limit relative to 14. So I turned right to cut through another nearby town instead of left to head directly home when I was at roughly the 11-mile mark.&lt;/p&gt;
&lt;p&gt;Then, where I &lt;em&gt;did&lt;/em&gt; cut back toward home, I took a wrong turn out of a five-way intersection. (You can see on the north end of the map, in Youngsville, &lt;a href="https://www.strava.com/activities/644619792" title="Run overview on Strava"&gt;here&lt;/a&gt;). I realized this half a mile on, but figured there would be a spot to cut over. There is not. So I got back to where I had taken the wrong turn, filled up my water bottle and hit the bathroom, and made my way home. But at this point, I was already at ~15 miles, and ~4 miles from home. As I got back into our town, I decided: why not just go ahead and extend out to 20 miles?&lt;/p&gt;
&lt;p&gt;And the truth is, that extra three quarters of a mile probably didn’t matter a bit. 19.25 vs. 20 miles? Same difference in its effect on my immune system, which is to say: it completely crashed it. A 42% week over week increase in mileage is no joke. The little cold I picked up from my 2-year-old daughter turned into borderline bronchitis. Yay.&lt;/p&gt;
&lt;p&gt;What with a busy spring preceding—I had no idea how much busier I would be taking 2 classes and working 30 hours a week than I had been taking 3 classes and working 20 hours a week—I didn’t manage a triathlon. I had contented myself with the thought that I’d likely set another PR in my half marathon, but after weeks of recovery from walking pneumonia, that thought fell apart as well. I lost about a minute per mile in my pace, and my mileage was shot as well. I never got it back—not least because of a writing project which went south on me. I ended up being sick off and on all fall, and I’m only now getting my feet back under me. Sad to say, one of those times I got sick was the week of the half marathon I signed up for, and I’d been getting loud, clear signals from my body on previous runs that I was pushing too hard. So no race &lt;em&gt;at all&lt;/em&gt; this year. But better that than pushing and injuring myself.&lt;/p&gt;
&lt;p&gt;The year also saw a so-far unreversed weight gain that I find incredibly frustrating. In the first six months of 2016, I gained about ten pounds—despite keeping up the same basic activity level. I attribute this to a combination of factors: metabolic shifts in my late 20s, shifting back to doing almost purely running rather than a mix of running, swimming, and cycling, and the impact of acclimation to a workout load. I’m far from overweight, but I’m also slower and generally a bit flabbier as a result.&lt;/p&gt;
&lt;p&gt;Here’s hoping 2017 is &lt;em&gt;much&lt;/em&gt; better in all these regards! I plan to do a sprint-length triathlon and a full marathon. And I hope to lose those ten pounds again and get back to that healthier overall weight. That combo seems like the thing to do the year I turn thirty and graduate seminary.&lt;/p&gt;
</content><category term="writing"></category><category term="podcasting"></category><category term="software development"></category><category term="family"></category><category term="productivity"></category><category term="fitness"></category><category term="2016-in-review"></category></entry><entry><title>2016 in Review, Introduction</title><link href="http://www.chriskrycho.com/2016/2016-review-intro.html" rel="alternate"></link><published>2016-12-27T16:00:00-05:00</published><updated>2016-12-27T16:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-27:/2016/2016-review-intro.html</id><summary type="html">2016 was a long, difficult, strange, sometimes wonderful and sometimes dreadful year for me. It was one of the most professionally and scholastically enjoyable and rewarding years of my life, and also one of the most exhausting. As I often do at years-end, I am taking stock publicly of what went well, what went poorly, and what I might do different in a variety of categories!</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;I originally drafted a single, mammoth post reflecting on this whole year—but at more than 6,000 words, that seemed like a bit much. As such, I’ve broken it into a series of posts, to be published daily through the start of the new year. Hopefully they’re a bit more digestible that way! This first day, you’re getting two posts; the rest of the year, one (at least: in this series!).&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction, or: a ridiculous year summarized (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-1.html"&gt;Part 1: Running headfirst into a wall of pneumonia.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-2.html"&gt;Part 2: So. many. words. I had no idea how many words.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-3.html"&gt;Part 3: Podcasting: Winning Slowly, New Rustacean, and more!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-4.html"&gt;Part 4: Writing software for Olo and for open source.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/2016-review-5.html"&gt;Part 5: Getting things done in 2016 and beyond.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2017/2016-review-6.html"&gt;Part 6: Plans for 2017!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;2016 was a long, difficult, strange, sometimes wonderful and sometimes dreadful year for me. It was one of the most professionally and scholastically enjoyable and rewarding years of my life, and also one of the most exhausting. As I often do at years-end, I am taking stock publicly of what went well, what went poorly, and what I might do different in a variety of categories—here, mostly in terms of my public-facing endeavors. This year’s summing-up post will also (for, I think, the first time) include some numbers! But first, a few comments on the big picture.&lt;/p&gt;
&lt;p&gt;At the end of 2015, I &lt;a href="http://www.chriskrycho.com/2015/thoughts-on-2015-and-2016.html"&gt;offered a similar set of reflections&lt;/a&gt;. At the end of it, I laid out some plans for 2016:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am going to set a single goal in each of five major categories in my life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;spiritual:&lt;/strong&gt; everything in my walk with God, including my own personal devotions, my involvement in the life of the church, and my “ministry” actions in general&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;family:&lt;/strong&gt; both quantity and quality time spent with my wife and my quickly-growing-up little girls&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;personal:&lt;/strong&gt; podcasting, blogging, and writing for &lt;a href="http://mereorthodoxy.com/author/chris-krycho/"&gt;other outlets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;professional:&lt;/strong&gt; working in my new job and as a consultant, and carrying on toward the conclusion of my M. Div.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;health/fitness:&lt;/strong&gt; continuing to stay healthy, including eating well and continuing to stay fit by running and doing triathlon work&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Early in the year, I made the habit of writing these out formally on a day-by-day basis—and I did this off and on. If you were to look at my little (Moleskine-branded and delightful-to-me) daily planner, you’d see streaks of weeks where I noted specific tasks and whether I hit them or not, punctuated by weeks and months where I did nothing of the sort. I have always found it difficult to stick with these kinds of things, in part because I usually have a pretty good idea what I need to do on any given day without writing it down somewhere. (I use &lt;a href="https://www.omnigroup.com/omnifocus/" title="OmniFocus"&gt;other tools&lt;/a&gt; for tracking mid- and long-term deadlines for school.) In July, I started mashing this idea up with &lt;a href="http://bulletjournal.com" title="Bullet Journal site"&gt;bullet journaling&lt;/a&gt;, and I found that I (a) really like the system and (b) also didn’t stick with it consistently. A lot of that came down to the fact that I got thrown off—horribly—by getting a mild-but-still-utterly-debilitating case of walking pneumonia in July. (On which, more in a moment.)&lt;/p&gt;
&lt;p&gt;So much for last year’s ideas about &lt;em&gt;how&lt;/em&gt; I was going to hit those goals. How did I actually do at addressing them? The answer is: &lt;em&gt;okay&lt;/em&gt;. 2016 was not an amazing year. It was not a terrible year. But it had as many downs as ups.&lt;/p&gt;
&lt;p&gt;My own walk with God remains &lt;em&gt;steady&lt;/em&gt;. Nothing amazing to report here, but I’m more than okay with that. I will perhaps say more on this in another post, but the older I get the more convinced I am that emotional highs are a trap. Sentiment and true religion are &lt;em&gt;not&lt;/em&gt; the same thing; and Scripture calls us to &lt;em&gt;faithfulness&lt;/em&gt;, not &lt;em&gt;spiritual feelings&lt;/em&gt;. As such, in a year with this many bumps, I am glad to say that I had no horrible falls, and I read my Bible nearly every day and prayed every single day.&lt;/p&gt;
&lt;p&gt;Our family learned some Bible verses, and started working on the Heidelberg Catechism. We shared the gospel with people as we were able, and met faithfully with our church. We were not extraordinary, and we were far from flawless, but I think we did &lt;em&gt;well&lt;/em&gt;. I hope and pray in God’s grace we are able to continue in faithfully doing well in the years to come. Certainly if there is one thing I hope to do more of in 2017 it is spend time with my girls. I am not a huge “kid person,” but these years are precious and go by quickly; far better to spend more time with them and have a podcast episode or a writing project go out later (or not at all) than to miss these little years.&lt;/p&gt;
</content><category term="writing"></category><category term="podcasting"></category><category term="software development"></category><category term="family"></category><category term="productivity"></category><category term="fitness"></category><category term="2016-in-review"></category></entry><entry><title>To paint God as a man</title><link href="http://www.chriskrycho.com/2016/to-paint-god-as-a-man.html" rel="alternate"></link><published>2016-12-23T18:00:00-05:00</published><updated>2016-12-23T18:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-23:/2016/to-paint-god-as-a-man.html</id><summary type="html">&lt;div class="line-block"&gt;To paint God as a man&lt;br /&gt;
would be the height of arrogance&lt;br /&gt;
had he not first himself begun&lt;br /&gt;
with wailing, mortal brush&lt;br /&gt;
straight to stroke the universe’s bented lines&lt;/div&gt;
</summary><content type="html">&lt;div class="line-block"&gt;To paint God as a man&lt;br /&gt;
would be the height of arrogance&lt;br /&gt;
had he not first himself begun&lt;br /&gt;
with wailing, mortal brush&lt;br /&gt;
straight to stroke the universe’s bented lines&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>The Itch</title><link href="http://www.chriskrycho.com/2016/the-itch.html" rel="alternate"></link><published>2016-12-19T21:45:00-05:00</published><updated>2016-12-19T21:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-19:/2016/the-itch.html</id><summary type="html">Learning functional programming has been simultaneously wildly new and deeply familiar. It's the answer to questions I've been asking for most of a decade.
</summary><content type="html">&lt;p&gt;It took me until just a few weeks ago to put my finger on why typed functional programming, as a style and approach, has appealed to me so much as I started picking it up over the last year. For all its novelty, typed FP feels—over and over again—&lt;em&gt;familiar&lt;/em&gt;. Strange to say, but it’s true.&lt;/p&gt;
&lt;p&gt;This came home to me again when reading a &lt;a href="https://medium.com/@dtinth/what-is-a-functor-dcf510b098b6#.e887yz63p"&gt;short post on functors&lt;/a&gt;—i.e., &lt;em&gt;mappable&lt;/em&gt; types. I’ve written a lot of JavaScript in the last few years, and it has been a source of constant frustration to me that &lt;code&gt;Array&lt;/code&gt; implements the &lt;code&gt;map&lt;/code&gt; method, but &lt;code&gt;Object&lt;/code&gt; does not. Countless times, I have wanted to take an object shaped like &lt;code&gt;{ count: &amp;lt;number&amp;gt; }&lt;/code&gt; and transform that &lt;code&gt;count&lt;/code&gt;. I’m not alone in that. There’s a reason that libraries like &lt;a href="http://underscorejs.org"&gt;Underscore&lt;/a&gt;, &lt;a href="https://lodash.com"&gt;Lodash&lt;/a&gt;, and &lt;a href="http://ramdajs.com"&gt;Ramda&lt;/a&gt; all supply utilities to allow you to map over objects. There are also good reasons why it &lt;em&gt;isn’t&lt;/em&gt; implemented for on &lt;code&gt;Object.prototype&lt;/code&gt;: the reality is that coming up with a predictable &lt;em&gt;and&lt;/em&gt; useful API for &lt;em&gt;all&lt;/em&gt; &lt;code&gt;Object&lt;/code&gt; instances is difficult at best: Objects are used for everything from dictionaries to records and strange combinations of the two. But still: there’s something there.&lt;/p&gt;
&lt;p&gt;And reading this post on functors, it struck me what that “something” is: object types are, in principle, functors. Maybe it doesn’t make sense to have a single &lt;code&gt;map&lt;/code&gt; implementation for every &lt;code&gt;Object&lt;/code&gt; instance out there. But they’re perfectly mappable. I didn’t have a word for this before tonight, but now I do. Over and over again, this is my experience with functional programming.&lt;/p&gt;
&lt;p&gt;There’s this familiar feeling of frustration I’m slowly coming to recognize—a mental sensation which is a little like the intellectual equivalent of an itch in a spot you can’t quite reach. You’re reaching for an abstraction to express an idea, but you don’t even know that there &lt;em&gt;is&lt;/em&gt; an abstraction for it. You want to map over objects, and you don’t know why that seems so reasonable, but it does. And then someone explains functors to you. It scratches the itch.&lt;/p&gt;
&lt;p&gt;Another example. Since I started programming eight and a half years ago, I’ve worked seriously with Fortran, C, C++ PHP, Python, and JavaScript. In each of those languages (and especially in the C-descended languages), I have found myself reaching for enums or things like them as a way of trying to represent types and states in my system in a more comprehensive way. I figured out that you should &lt;a href="http://wiki.c2.com/?UseEnumsNotBooleans"&gt;use enums not booleans&lt;/a&gt; a long time before I found the advice on the internet. I was encoding error types as enum values instead of just using &lt;code&gt;int&lt;/code&gt;s almost as soon as I started, because it was obvious to me that &lt;code&gt;ErrorCode someFunction() { ... }&lt;/code&gt; was far more meaningful than &lt;code&gt;int someFunction() { ... }&lt;/code&gt; (even if the context of C meant that the latter often implied the former, and even if it was trivial to coerce one to the other).&lt;/p&gt;
&lt;p&gt;Then I read &lt;a href="https://gumroad.com/l/maybe-haskell/"&gt;&lt;em&gt;Maybe Haskell&lt;/em&gt;&lt;/a&gt;, a book I’ve mentioned often on this blog because it was so revelatory for me. This is what I had been reaching for all those years—and then some. Handing data around with the constraints? Yes, please! I had played with unions, enums, structs with enums inside them, anything to try to get some type-level clarity and guarantees about what my code was doing. Haskell showed me the way; and since then Rust and Elm and F# have reinforced it many times over. &lt;a href="https://guide.elm-lang.org/types/union_types.html"&gt;Tagged unions&lt;/a&gt; are a joy. They let me say what I mean—finally.&lt;/p&gt;
&lt;p&gt;I can still feel that itch. It’s shifted a little, but it’s still there: reaching for higher abstractions to let me tell the machine more clearly what I intend. Half a dozen times this year, I’ve realized: &lt;em&gt;Here&lt;/em&gt; is where dependent types would be useful. They’re far beyond me, but close enough now I can see. I’m sure a year from now, I’ll have find some tools to scratch &lt;em&gt;these&lt;/em&gt; itches, only to discover a few more.&lt;/p&gt;
</content><category term="software development"></category><category term="functional programming"></category><category term="Rust"></category><category term="JavaScript"></category></entry><entry><title>keyof and Mapped Types In TypeScript 2.1</title><link href="http://www.chriskrycho.com/2016/keyof-and-mapped-types-in-typescript-21.html" rel="alternate"></link><published>2016-12-17T23:25:00-05:00</published><updated>2016-12-18T09:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-17:/2016/keyof-and-mapped-types-in-typescript-21.html</id><summary type="html">&lt;p&gt;In the last few months, I’ve been playing with both &lt;a href="https://flowtype.org"&gt;Flow&lt;/a&gt; and &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; as tools for increasing the quality and reliability of the JavaScript I write at Olo. Both of these are syntax that sits on top of normal JavaScript to add type analysis—basically, a form of &lt;a href="https://en.wikipedia.org/wiki/Gradual_typing"&gt;gradual …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the last few months, I’ve been playing with both &lt;a href="https://flowtype.org"&gt;Flow&lt;/a&gt; and &lt;a href="http://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; as tools for increasing the quality and reliability of the JavaScript I write at Olo. Both of these are syntax that sits on top of normal JavaScript to add type analysis—basically, a form of &lt;a href="https://en.wikipedia.org/wiki/Gradual_typing"&gt;gradual typing&lt;/a&gt; for JS.&lt;/p&gt;
&lt;p&gt;Although TypeScript’s tooling has been better all along&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I initially preferred Flow’s type system quite a bit: it has historically been much more focused on &lt;a href="http://stackoverflow.com/questions/21437015/soundness-and-completeness-of-systems"&gt;soundness&lt;/a&gt;, especially around the &lt;em&gt;many&lt;/em&gt; problems caused by &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;, than TypeScript. And it had earlier support for &lt;a href="https://flowtype.org/docs/disjoint-unions.html"&gt;tagged unions&lt;/a&gt;, a tool I’ve come to find invaluable since picking them up from my time with Rust.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But the 2.0 and 2.1 releases of TypeScript have changed the game substantially, and it’s now a &lt;em&gt;very&lt;/em&gt; compelling language in its own right—not to mention a great tool for writing better JavaScript. So I thought I’d highlight how you can get a lot of the benefits you would get from the type systems of languages like Elm with some of those new TypeScript features: the &lt;em&gt;&lt;code&gt;keyof&lt;/code&gt; operator&lt;/em&gt; and &lt;em&gt;mapped types&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i&gt;Some readers may note that what I’m doing here is a &lt;em&gt;lot&lt;/em&gt; of wrangling to cajole TypeScript into giving me the kinds of things you get for free in an ML-descended language. Yep. The point is that you &lt;em&gt;can&lt;/em&gt; wrangle it into doing this.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="plain-old-javascript" class="level3"&gt;
&lt;h3&gt;Plain old JavaScript&lt;/h3&gt;
&lt;p&gt;Let’s say we want to write a little state machine in terms of a function to go from one state to the next, like this:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;function nextState(state) {
  switch(state) {
    case &amp;#39;Pending&amp;#39;: return &amp;#39;Started&amp;#39;;
    case &amp;#39;Started&amp;#39;: return &amp;#39;Completed&amp;#39;;
    case &amp;#39;Completed&amp;#39;: return &amp;#39;Completed&amp;#39;;
    default: throw new Error(`Bad state: ${state}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will work, and it’ll even throw an error if you hand it the wrong thing. But you’ll find out at runtime if you accidentally typed &lt;code&gt;nextState('Pednign')&lt;/code&gt; instead of &lt;code&gt;nextState('Pending')&lt;/code&gt;—something I’ve done more than once in the past. You’d have a similar problem if you’d accidentally written &lt;code&gt;case 'Strated'&lt;/code&gt; instead of &lt;code&gt;case 'Started'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are many contexts like this one in JavaScript—perhaps the most obvious being &lt;a href="http://redux.js.org/docs/basics/Actions.html"&gt;Redux actions&lt;/a&gt;, but I get a lot of mileage out of the pattern in Ember, as well. In these contexts, I find it’s convenient to define types that are kind of like pseudo-enums or pseudo-simple-unions, like so:&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;const STATE = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’ve defined an object this way, instead of using strings directly in functions that take it as an argument, like &lt;code&gt;nextState('Started')&lt;/code&gt;, you can use the object property: &lt;code&gt;nextState(STATE.Started)&lt;/code&gt;. You can rewrite the function body to use the object definition instead as well:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;function nextState(state) {
  switch(state) {
    case STATE.Pending: return STATE.Started;
    case STATE.Started: return STATE.Completed;
    case STATE.Completed: return STATE.Completed;
    default: throw new Error(`Bad state: ${state}`);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the object and its keys instead gets you something like a namespaced constant. As a result, you can get more help with things like code completion from your editor, along with warnings or errors from your linter if you make a typo. You’ll also get &lt;em&gt;slightly&lt;/em&gt; more meaningful error messages if you type the wrong thing. For example, if you type &lt;code&gt;STATE.Strated&lt;/code&gt; instead of &lt;code&gt;STATE.Started&lt;/code&gt;, any good editor will give you an error—especially if you’re using a linter. At Olo, we use &lt;a href="http://eslint.org"&gt;ESLint&lt;/a&gt;, and we have it &lt;a href="https://github.com/ember-cli/ember-cli-eslint/"&gt;set up&lt;/a&gt; so that this kind of typo/linter error fails our test suite (and we never merge changes that don’t pass our test suite!).&lt;/p&gt;
&lt;p&gt;This is about as good a setup as you can get in plain-old JavaScript. As long as you’re disciplined and always use the object, you get some real benefits from using this pattern. But you &lt;em&gt;always&lt;/em&gt; have to be disciplined. If someone who is unfamiliar with this pattern types &lt;code&gt;nextState('whifflebats')&lt;/code&gt; somewhere, well, we’re back to blowing up at runtime. Hopefully your test suite catches that.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="typescript-to-the-rescue" class="level3"&gt;
&lt;h3&gt;TypeScript to the rescue&lt;/h3&gt;
&lt;p&gt;TypeScript gives us the ability to &lt;em&gt;guarantee&lt;/em&gt; that the contract is met (that we’re not passing the wrong value in). As of the latest release, it also lets us guarantee the &lt;code&gt;STATES&lt;/code&gt; object to be set up the way we expect. And last but not least, we get some actual productivity boosts when writing the code, not just when debugging it.&lt;/p&gt;
&lt;p&gt;Let’s say we decided to constrain our &lt;code&gt;nextState&lt;/code&gt; function so that it had to both take and return some kind of &lt;code&gt;State&lt;/code&gt;, representing one of the states we defined above. We’ll leave a &lt;code&gt;TODO&lt;/code&gt; here indicating that we need to figure out how to write the type of &lt;code&gt;State&lt;/code&gt;, but the function definition would look like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// TODO: figure out how to define `State`
function nextState(state: State): State {
  // the same body...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TypeScript has had &lt;a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types"&gt;union types&lt;/a&gt; since the &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-4.html"&gt;1.4 release&lt;/a&gt; so they might seem like an obvious choice, and indeed we could write easily a type definition for the strings in &lt;code&gt;STATES&lt;/code&gt; as a union:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type State = &amp;#39;Pending&amp;#39; | &amp;#39;Started&amp;#39; | &amp;#39;Completed&amp;#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, you can’t write something like &lt;code&gt;State.Pending&lt;/code&gt; somewhere; you have to write the plain string &lt;code&gt;'Pending'&lt;/code&gt; instead. You still get some of the linting benefits you got with the approach outlined above via TypeScript’s actual type-checking, but you don’t get &lt;em&gt;any&lt;/em&gt; help with autocompletion. Can we get the benefits of both?&lt;/p&gt;
&lt;p&gt;Yes! (This would be a weird blog post if I just got this far and said, “Nope, sucks to be us; go use Elm instead.”)&lt;/p&gt;
&lt;p&gt;As of the 2.1 release, TypeScript lets you define types in terms of keys, so you can write a type like this:&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const STATE = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};

type StateFromKeys = keyof typeof STATE;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can use that type any place you need to constrain the type of a variable, or a return, or whatever:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const goodState: StateFromKeys = STATE.Pending;

// error: type &amp;#39;&amp;quot;Blah&amp;quot;&amp;#39; is not assignable to type &amp;#39;State&amp;#39;
const badState: StateFromKeys = &amp;#39;Blah&amp;#39;;

interface StateMachine {
  (state: StateFromKeys): StateFromKeys;
}

const nextState: StateMachine = (state) =&amp;gt; {
  // ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The upside to this is that now you can guarantee that anywhere you’re supposed to be passing one of those strings, you &lt;em&gt;are&lt;/em&gt; passing one of those strings. If you pass in &lt;code&gt;'Compelte'&lt;/code&gt;, you’ll get an actual error—just like if we had used the union definition above. At a minimum, that will be helpful feedback in your editor. Maximally, depending on how you have your project configured, it may not even generate any JavaScript output.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; So that’s a significant step forward beyond what we had even with the best linting rules in pure JavaScript.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="going-in-circles" class="level3"&gt;
&lt;h3&gt;Going in circles&lt;/h3&gt;
&lt;p&gt;But wait, we can do more! TypeScript 2.1 &lt;em&gt;also&lt;/em&gt; came with a neat ability to define “mapped types,” which map one object type to another. They have a few &lt;a href="http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html#mapped-types"&gt;interesting examples&lt;/a&gt; which are worth reading. What’s interesting to us here is that you can write a type like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type StateAsMap = {
  [K in keyof typeof STATE]: K
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course, you can simplify that using the type we defined above, since &lt;code&gt;StateFromKeys&lt;/code&gt; was just &lt;code&gt;keyof typeof STATE&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type StateAsMap = {
  [K in StateFromKeys]: K
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ve now defined an object type whose &lt;em&gt;key&lt;/em&gt; has to be one of the items in the &lt;code&gt;State&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;Now, by itself, this isn’t all that useful. Above, we defined that as the keys on the &lt;code&gt;STATE&lt;/code&gt; object, but if we tried to use that in conjunction with this new type definition, we’d just end up with a recursive type definition: &lt;code&gt;StateFromKeys&lt;/code&gt; defined as the keys of &lt;code&gt;STATE&lt;/code&gt;, &lt;code&gt;StateAsMap&lt;/code&gt; defined in terms of the elements of &lt;code&gt;StateFromKeys&lt;/code&gt;, and then &lt;code&gt;STATE&lt;/code&gt; defined as a &lt;code&gt;StateAsMap&lt;/code&gt;…&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const STATE: StateAsMap = {
  Pending: &amp;#39;Pending&amp;#39;,
  Active: &amp;#39;Active&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
}

type StateFromKeys = keyof typeof STATE;

type StateAsMap = {
  [K in StateFromKeys]: K
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You end up with multiple compiler errors here, because of the circular references. This approach won’t work. If we take a step back, though, we can work through this (and actually end up someplace better).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="join-forces" class="level3"&gt;
&lt;h3&gt;Join forces!&lt;/h3&gt;
&lt;p&gt;First, let’s start by defining the mapping generically. After all, the idea here was to be able to use this concept all over the place—e.g. for &lt;em&gt;any&lt;/em&gt; Redux action, not just one specific one. We don’t need this particular &lt;code&gt;State&lt;/code&gt;; we just need a constrained set of strings (or numbers) to be used as the key of an object:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type MapKeyAsValue&amp;lt;Key extends string&amp;gt; = {
  [K in Key]: K
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In principle, if we didn’t have to worry about the circular references, we could use that to constrain our definition of the original &lt;code&gt;STATE&lt;/code&gt; itself:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const STATE: MapKeyAsValue&amp;lt;State&amp;gt; = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So how to get around the problem of circular type definitions? Well, it turns out that the &lt;code&gt;K&lt;/code&gt; values in these &lt;code&gt;StateObjectKeyToValue&lt;/code&gt; and &lt;code&gt;StateUnionKeyToValue&lt;/code&gt; types are equivalent:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;// Approach 1, using an object
const STATE = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};

type StateFromKeys = keyof typeof STATE;
type StateObjectKeyToValue = {
  [K in StateFromKeys]: K  // &amp;lt;- K is just the keys!
};

// Approach 2, using unions
type StateUnion = &amp;#39;Pending&amp;#39; | &amp;#39;Started&amp;#39; | &amp;#39;Completed&amp;#39;;
type StateUnionKeyToValue = {
  [K in StateUnion]: K  // &amp;lt;- K is also just the keys!
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that, unlike the &lt;code&gt;StateObjectKeyToValue&lt;/code&gt; version, &lt;code&gt;StateUnionKeyToValue&lt;/code&gt; doesn’t make any reference to the &lt;code&gt;STATE&lt;/code&gt; object. So we can use &lt;code&gt;StateUnionKeyToValue&lt;/code&gt; to constrain &lt;code&gt;STATE&lt;/code&gt;, and then just use &lt;code&gt;StateUnion&lt;/code&gt; to constrain all the places we want to &lt;em&gt;use&lt;/em&gt; one of those states. Once we put it all together, that would look like this:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type StateUnion = &amp;#39;Pending&amp;#39; | &amp;#39;Started&amp;#39; | &amp;#39;Completed&amp;#39;;

type StateUnionKeyToValue = {
  [K in StateUnion]: K
};

const STATE: StateUnionKeyToValue = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By doing this, we get two benefits. First, &lt;code&gt;STATE&lt;/code&gt; now has to supply the key and value for &lt;em&gt;all&lt;/em&gt; the union’s variants. Second, we know that the key and value are the same, and that they map to the union’s variants. These two facts mean that we can be 100% sure that wherever we define something as requiring a &lt;code&gt;State&lt;/code&gt;, we can supply one of the items on &lt;code&gt;STATE&lt;/code&gt; and it will be guaranteed to be correct. If we change the &lt;code&gt;State&lt;/code&gt; union definition, everything else will need to be updated, too.&lt;/p&gt;
&lt;p&gt;Now we can make this generic, so it works for types besides just this one set of states—so that it’ll work for &lt;em&gt;any&lt;/em&gt; union type with string keys, in fact. (That string-key constraint is important because objects in TypeScript can currently only use strings or numbers as keys; whereas union types can be all sorts of things.) Apart from that constraint on the union, though, we can basically just substitute a generic type parameter &lt;code&gt;U&lt;/code&gt;, for “union,” where we had &lt;code&gt;StateUnion&lt;/code&gt; before.&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type UnionKeyToValue&amp;lt;U extends string&amp;gt; = {
  [K in U]: K
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then any object we say conforms to this type will take a union as its type parameter, and every key on the object must have exactly the same value as the key name:&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;type State = &amp;#39;Pending&amp;#39; | &amp;#39;Started&amp;#39; | &amp;#39;Completed&amp;#39;;

// Use `State` as the type parameter to `UnionKeyToValue`.
const STATE: UnionKeyToValue&amp;lt;State&amp;gt; = {
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If any of those don’t have &lt;em&gt;exactly&lt;/em&gt; the same value as the key name, you’ll get an error. So, each of the following value assignments would fail to compile, albeit for different reasons (top to bottom: capitalization, misspelling, and missing a letter).&lt;/p&gt;
&lt;pre class="typescript"&gt;&lt;code&gt;const BAD_STATE: UnionKeyToValue&amp;lt;State&amp;gt; = {
  Pending: &amp;#39;pending&amp;#39;,  // look ma, no capitals
  Started: &amp;#39;Strated&amp;#39;,  // St-rated = whuh?
  Completed: &amp;#39;Complete&amp;#39;,  // so tense
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll see a compiler error that looks something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;[ts]&lt;br /&gt;
Type ‘{ Pending: “pending”; Started: “Strated”; Completed: “Complete” }’ is not assignable to type ‘UnionKeyToValue&lt;State&gt;’.&lt;br /&gt;
  Types of property ‘Pending’ are incompatible.&lt;br /&gt;
    Type ‘“pending”’ is not assignable to type ‘“Pending”’.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since the key and the name don’t match, the compiler tells us we didn’t keep the constraint we defined on what these types should look like. Similarly, if you forget an item from the union, you’ll get an error. If you add an item that isn’t in the original union, you’ll get an error. Among other things, this means that you can be confident that if you add a value to the union, the rest of your code won’t compile until you include cases for it. You get all the power and utility of using union types, &lt;em&gt;and&lt;/em&gt; you get the utility of being able to use the object as a namespace of sorts.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And the TypeScript language service—which you can use from a &lt;em&gt;lot&lt;/em&gt; of editors, including VS Code, Atom, Sublime Text, and the JetBrains IDEs—will actually give you the correct completion when you start definition a type. So imagine we were defining some other union type elsewhere in our program to handle events. Now we can use the same &lt;code&gt;UnionKeyToValue&lt;/code&gt; type to construct this type, with immediate, &lt;em&gt;correct&lt;/em&gt; feedback from the TypeScript language service:&lt;/p&gt;
&lt;figure&gt;
&lt;video autoplay=autoplay muted=muted playsinline=playsinline loop=loop&gt;
&lt;source type='video/mp4' src='https://f001.backblazeb2.com/file/chriskrycho-com/images/completion.mp4'&gt;
&lt;/video&gt;
&lt;figcaption&gt;
TypeScript live code completion of the mapped type
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;By inverting our original approach of using &lt;code&gt;keyof&lt;/code&gt; (itself powerful and worth using in quite a few circumstances) and instead using the new mapped types, we get a &lt;em&gt;ton&lt;/em&gt; of mileage in terms of productivity when using these types—errors prevented, and speed of writing the code in the first place increased as well.&lt;/p&gt;
&lt;p&gt;Yes, it’s a little verbose and it does require duplicating the strings whenever you define one of these types.&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; But, and this is what I find most important: there is only one &lt;em&gt;source&lt;/em&gt; for those string keys, the union type, and it is definitive. If you change that central union type, everything else that references it, including the namespace-like object, will fail to compile until you make the same change there.&lt;/p&gt;
&lt;figure&gt;
&lt;video autoplay=autoplay muted=muted playsinline=playsinline loop=loop&gt;
&lt;source type='video/mp4' src='https://f001.backblazeb2.com/file/chriskrycho-com/images/change-union.mp4'&gt;
&lt;/video&gt;
&lt;figcaption&gt;
Updating a union
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So it’s a lot more work than it would be in, say, Elm. But it’s also a lot more guarantees than I’d get in plain-old-JavaScript, or even TypeScript two months ago.&lt;/p&gt;
&lt;p&gt;I’ll call that a win.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;it’s no surprise that Microsoft’s developer tooling is stronger than Facebook’s&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;along with all the other ML-descended languages I’ve played with, including Haskell, F&lt;sup&gt;♯&lt;/sup&gt;, PureScript, and Elm.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Aside: to be extra safe and prevent any confusion or mucking around, you should probably call &lt;code&gt;Object.freeze()&lt;/code&gt; on the object literal, too:&lt;/p&gt;
&lt;pre class="javascript"&gt;&lt;code&gt;const STATE = Object.freeze({
  Pending: &amp;#39;Pending&amp;#39;,
  Started: &amp;#39;Started&amp;#39;,
  Completed: &amp;#39;Completed&amp;#39;,
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both convention and linters make it unlikely you’ll modify something like this directly—but impossible is better than unlikely.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Flow has supported this feature for some time; you can write &lt;code&gt;$Keys&amp;lt;typeof STATE&amp;gt;&lt;/code&gt;—but the feature is entirely undocumented.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Set your &lt;code&gt;&amp;quot;compilerOptions&amp;quot;&lt;/code&gt; key in your &lt;code&gt;tsconfig.json&lt;/code&gt; to include &lt;code&gt;&amp;quot;noEmitOnError&amp;quot;: true,&lt;/code&gt;.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;For namespacing in a more general sense, you should use… &lt;a href="http://www.typescriptlang.org/docs/handbook/namespaces.html"&gt;namespaces&lt;/a&gt;.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;It would be great if we could get these benefits without the duplication—maybe someday we’ll have better support in JS or TS natively.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="javascript"></category><category term="typescript"></category><category term="software development"></category><category term="programming languages"></category></entry><entry><title>I am not a Grinch</title><link href="http://www.chriskrycho.com/2016/i-am-not-a-grinch.html" rel="alternate"></link><published>2016-12-10T08:43:00-05:00</published><updated>2016-12-10T08:43:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-12-10:/2016/i-am-not-a-grinch.html</id><summary type="html">&lt;div class="line-block"&gt;I’ll not begrudge you&lt;br /&gt;
your sentimentality&lt;br /&gt;
so leave me my joy&lt;/div&gt;
</summary><content type="html">&lt;div class="line-block"&gt;I’ll not begrudge you&lt;br /&gt;
your sentimentality&lt;br /&gt;
so leave me my joy&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>Tony Merida, sermon on November 20, 2016</title><link href="http://www.chriskrycho.com/2016/11-20-0930.html" rel="alternate"></link><published>2016-11-20T09:30:00-05:00</published><updated>2016-11-20T09:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-11-20:/2016/11-20-0930.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;If you’re waiting to get out of trouble to praise God, &lt;em&gt;you will never praise God&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;If you’re waiting to get out of trouble to praise God, &lt;em&gt;you will never praise God&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>Rust development using VS Code on OS X, debugging included</title><link href="http://www.chriskrycho.com/2016/rust-development-using-vs-code-on-os-x-debugging-included.html" rel="alternate"></link><published>2016-11-18T20:48:00-05:00</published><updated>2016-11-18T20:48:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-11-18:/2016/rust-development-using-vs-code-on-os-x-debugging-included.html</id><summary type="html">&lt;p&gt;&lt;a href="https://medium.com/@royalstream/rust-development-using-vs-code-on-os-x-debugging-included-bc10c9863777#.wgjbgie5a"&gt;Super handy guide for getting a debugging/IDE environment set up for Rust.&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="https://medium.com/@royalstream/rust-development-using-vs-code-on-os-x-debugging-included-bc10c9863777#.wgjbgie5a"&gt;Super handy guide for getting a debugging/IDE environment set up for Rust.&lt;/a&gt;&lt;/p&gt;
</content><category term="software development"></category><category term="rust"></category><category term="links"></category></entry><entry><title>Using Rust for ‘Scripting’</title><link href="http://www.chriskrycho.com/2016/using-rust-for-scripting.html" rel="alternate"></link><published>2016-11-14T22:00:00-05:00</published><updated>2016-11-15T09:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-11-14:/2016/using-rust-for-scripting.html</id><summary type="html">Why I might use Rust instead of Python, with walkthroughs for building a simple "script"-like program and a guide for cross-compiling Rust code to Windows from macOS.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;&lt;strong&gt;Edit&lt;/strong&gt;: fixed some typos, cleaned up implementation a bit based on feedback around the internet.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;A lightly edited version of this post was syndicated in &lt;a href="https://hackerbits.com/chris-krycho-using-rust-for-scripting/"&gt;Hacker Bits, Issue 13&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="i.-using-rust-instead-of-python" class="level2"&gt;
&lt;h2&gt;I. Using Rust Instead of Python&lt;/h2&gt;
&lt;p&gt;A friend asked me today about writing a little script to do a simple conversion of the names of some files in a nested set of directories. Everything with one file extension needed to get another file extension. After asking if it was the kind of thing where he had time to and/or wanted to learn how to do it himself (always important when someone has expressed that interest more generally), I said, “Why don’t I do this in Rust?”&lt;/p&gt;
&lt;p&gt;Now, given the description, you might think, &lt;i class=thought&gt;Wouldn’t it make more sense to do that in Python or Perl or even just a shell script?&lt;/i&gt; And the answer would be: it depends—on what the target operating system is, for example, and what the person’s current setup is. I knew, for example, that my friend is running Windows, which means he doesn’t have Python or Perl installed. I’m not a huge fan of either batch scripts or PowerShell (and I don’t know either of them all that well, either).&lt;/p&gt;
&lt;p&gt;I could have asked him to install Python. But, on reflection, I thought: &lt;i class=thought&gt;Why would I do that? I can write this in Rust.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Writing it in Rust means I can compile it and hand it to him, and he can run it. And that’s it. As wonderful as they are, the fact that languages like Python, Perl, Ruby, JavaScript, etc. require having the runtime bundled up with them makes just shipping a tool a lot harder—&lt;em&gt;especially&lt;/em&gt; on systems which aren’t a Unix derivative and don’t have them installed by default. (Yes, I know that &lt;em&gt;mostly&lt;/em&gt; means Windows, but it doesn’t &lt;em&gt;solely&lt;/em&gt; mean Windows. And, more importantly: the vast majority of the desktop-type computers in the world &lt;em&gt;still run Windows&lt;/em&gt;. So that’s a big reason all by itself.)&lt;/p&gt;
&lt;p&gt;So there’s the justification for shipping a compiled binary. Why Rust specifically? Well, because I’m a fanboy. (But I’m a fanboy because Rust often gives you roughly the feel of using a high-level language like Python, but lets you ship standalone binaries. The same is true of a variety of other languages, too, like Haskell; but Rust is the one I know and like right now.)&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;&lt;strong&gt;Edit the second:&lt;/strong&gt; this is getting a lot of views from Hacker News, and it’s worth note: I’m not actually advocating that everyone stop using shell scripts for this kind of thing. I’m simply noting that it’s &lt;em&gt;possible&lt;/em&gt; (and sometimes even &lt;em&gt;nice&lt;/em&gt;) to be able to do this kind of thing in Rust, cross-compile it, and just ship it. And hey, types are nice when you’re trying to do more sophisticated things than I’m doing here! Also, for those worried about running untrusted binaries: I handed my friend the code, and would happily teach him how to build it.&lt;/i&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ii.-building-a-simple-script" class="level2"&gt;
&lt;h2&gt;II. Building a Simple “Script”&lt;/h2&gt;
&lt;p&gt;Building a “script”-style tool in Rust is pretty easy, gladly. I’ll walk through exactly what I did to create this “script”-like tool for my friend. My goal here was to rename every file in a directory from &lt;code&gt;*.cha&lt;/code&gt; to &lt;code&gt;*.txt&lt;/code&gt;.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.rust-lang.org/en-US/downloads.html"&gt;Install Rust.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new binary:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;cargo new --bin rename-it&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the dependencies to the Cargo.toml file. I used the &lt;a href="https://doc.rust-lang.org/glob/glob/index.html"&gt;glob&lt;/a&gt; crate for finding all the &lt;code&gt;.cha&lt;/code&gt; files and the &lt;a href="https://clap.rs"&gt;clap&lt;/a&gt; crate for argument parsing.&lt;/p&gt;
&lt;pre class="toml"&gt;&lt;code&gt;[package]
name = &amp;quot;rename-it&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
authors = [&amp;quot;Chris Krycho &amp;lt;chris@chriskrycho.com&amp;gt;&amp;quot;]

[dependencies]
clap = &amp;quot;2.15.0&amp;quot;
glob = &amp;quot;0.2&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the actual implementation to the &lt;code&gt;main.rs&lt;/code&gt; file (iterating till you get it the way you want, of course).&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;extern crate clap;
extern crate glob;

use glob::glob;
use std::fs;

use clap::{Arg, App, AppSettings};


fn main() {
  let path_arg_name = &amp;quot;path&amp;quot;;
  let args = App::new(&amp;quot;cha-to-txt&amp;quot;)
    .about(&amp;quot;Rename .cha to .txt&amp;quot;)
    .setting(AppSettings::ArgRequiredElseHelp)
    .arg(Arg::with_name(path_arg_name)
      .help(&amp;quot;path to the top directory with .cha files&amp;quot;))
    .get_matches();

  let path = args.value_of(path_arg_name)
    .expect(&amp;quot;You didn&amp;#39;t supply a path&amp;quot;);
  let search = String::from(path) + &amp;quot;/**/*.cha&amp;quot;;
  let paths = glob(&amp;amp;search)
    .expect(&amp;quot;Could not find paths in glob&amp;quot;)
    .map(|p| p.expect(&amp;quot;Bad individual path in glob&amp;quot;));

  for path in paths {
    match fs::rename(&amp;amp;path, &amp;amp;path.with_extension(&amp;quot;txt&amp;quot;)) {
      Ok(_) =&amp;gt; (),
      Err(reason) =&amp;gt; panic!(&amp;quot;{}&amp;quot;, reason),
    };
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile it.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;cargo build --release&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the executable to hand to a friend.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my case, I actually added in the step of &lt;em&gt;recompiling&lt;/em&gt; it on Windows after doing all the development on macOS. This is one of the real pieces of magic with Rust: you can &lt;em&gt;easily&lt;/em&gt; write cross-platform code. The combination of Cargo and native-compiled-code makes it super easy to write this kind of thing—and, honestly, easier to do so in a cross-platform way than it would be with a traditional scripting language.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But what’s really delightful is that we can do better. I don’t even need to install Rust on Windows to compile a Rust binary for Windows.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="iii.-cross-compiling-to-windows-from-macos" class="level2"&gt;
&lt;h2&gt;III. Cross-Compiling to Windows from macOS&lt;/h2&gt;
&lt;p&gt;Once again, let’s do this step by step. Three notes: First, I got pretty much everything other than the first and last steps here from WindowsBunny on the &lt;a href="https://botbot.me/mozilla/rust/"&gt;#rust&lt;/a&gt; &lt;abbr&gt;IRC&lt;/abbr&gt; channel. (If you’ve never hopped into #rust, you should: it’s amazing.) Second, you’ll need a Windows installation to make this work, as you’ll need some libraries. (That’s a pain, but it’s a one-time pain.) Third, this is the setup for doing in on macOS Sierra; steps may look a little different on an earlier version of macOS or on Linux.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Install the Windows compilation target with &lt;code&gt;rustup&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;rustup target add x86_64-pc-windows-msvc&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the required linker (&lt;a href="http://lld.llvm.org"&gt;&lt;code&gt;lld&lt;/code&gt;&lt;/a&gt;) by way of installing the LLVM toolchain.&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;brew install llvm&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a symlink somewhere on your &lt;code&gt;PATH&lt;/code&gt; to the newly installed linker, specifically with the name &lt;code&gt;link.exe&lt;/code&gt;. I have &lt;code&gt;~/bin&lt;/code&gt; on my &lt;code&gt;PATH&lt;/code&gt; for just this kind of thing, so I can do that like so:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;ln -s /usr/local/opt/llvm/bin/lld-link ~/bin/link.exe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(We have to do this because the Rust compiler &lt;a href="https://github.com/rust-lang/rust/blob/master/src/librustc_trans/back/msvc/mod.rs#L300"&gt;specifically goes looking for &lt;code&gt;link.exe&lt;/code&gt; on non-Windows targets&lt;/a&gt;.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the target files for the Windows build to link against. Those are in these directories, where &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt; will be a number like &lt;code&gt;10586.0&lt;/code&gt; or similar (you should pick the highest one if there is more than one):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:\Program Files\Windows Kits\10\Lib\10.0.&amp;lt;something&amp;gt;\ucrt\x64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Program Files\Windows Kits\10\Lib\10.0.&amp;lt;something&amp;gt;\um\x64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\lib\amd64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that if you don’t already have &lt;abbr&gt;MSVC&lt;/abbr&gt; installed, you’ll need to install it. If you don’t have Visual Studio installed on a Windows machine &lt;em&gt;at all&lt;/em&gt;, you can do that by using the links &lt;a href="http://landinghub.visualstudio.com/visual-cpp-build-tools"&gt;here&lt;/a&gt;. Otherwise, on Windows, go to &lt;strong&gt;Add/Remove Programs&lt;/strong&gt; and opting to Modify the Visual Studio installation. There, you can choose to add the C++ tools to the installation.&lt;/p&gt;
&lt;p&gt;Note also that if you’re building for 32-bit Windows you’ll want to grab &lt;em&gt;those&lt;/em&gt; libraries instead of the 64-bit libraries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the &lt;code&gt;LIB&lt;/code&gt; environment variable to include those paths and build the program. Let’s say you put them in something like &lt;code&gt;/Users/chris/lib/windows&lt;/code&gt; (which is where I put mine). Your Cargo invocation will look like this:&lt;/p&gt;
&lt;pre class="sh"&gt;&lt;code&gt;env LIB=&amp;quot;/Users/chris/lib/windows/ucrt/x64/;/Users/chris/lib/windows/um/x64/;/Users/chris/lib/windows/VC_lib/amd64/&amp;quot; \
cargo build --release --target=x86_64-pc-windows-msvc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the final &lt;code&gt;/&lt;/code&gt; on each path and the enclosing quotation marks are all important!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the binary to hand to a friend, without ever having had to leave your Mac.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To be sure, there was a little extra work involved in getting cross-compilation set up. (This is the kind of thing I’d love to see further automated with &lt;code&gt;rustup&lt;/code&gt; in 2017!) But what we have at the end is pretty magical. Now we can just compile cross-platform code and hand it to our friends.&lt;/p&gt;
&lt;p&gt;Given that, I expect not to be using Python for these kinds of tools much going forward.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Again: you can do similar with Haskell or OCaml or a number of other languages. And those are great options; they are in &lt;em&gt;some&lt;/em&gt; ways easier than Rust—but Cargo is really magical for this.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="software development"></category><category term="programming languages"></category></entry><entry><title>What is Functional Programming?</title><link href="http://www.chriskrycho.com/2016/what-is-functional-programming.html" rel="alternate"></link><published>2016-11-11T22:30:00-05:00</published><updated>2016-11-14T07:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-11-11:/2016/what-is-functional-programming.html</id><summary type="html">Functional programming—though not a panacea—is a really great tool to have in our toolbelt. (And you don’t have to be a mathematician to use it.)
</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;The following is a script I wrote for a tech talk I gave on functional programming. The recording isn’t (and won’t be) publicly available; but a script is often easier to reference anyway!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class='editorial'&gt;&lt;strong&gt;Edit:&lt;/strong&gt; updated with corrected performance characterstics.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Hello, everyone. Today, we are going to talk about functional programming—asking what it is, and why we should care.&lt;/p&gt;
&lt;section id="clearing-the-table-functional-programmings-reputation" class="level2"&gt;
&lt;h2&gt;Clearing the Table: Functional Programming’s Reputation&lt;/h2&gt;
&lt;p&gt;Functional programming has something of a reputation: on the one hand, as incredible difficult, dense, full of mathematical jargon, applicable only to certain fields like machine learning or massive data analysis; on the other hand, as a kind of panacea that solves all of your problems. The reality, I think, is a little bit of both.&lt;/p&gt;
&lt;p&gt;The world of functional programming &lt;em&gt;does&lt;/em&gt; include a lot of jargon from the math world, and there are good reasons for that, but there is also a lot we could do to make it more approachable to people who don’t have a background in, say category. Category theory is useful, of course, and I think there are times when we might want to be able to draw on it. But gladly, functional programming doesn’t require you to know what an &lt;em&gt;applicative functor&lt;/em&gt; is to be able to use it. (And, gladly, there’s a lot of increasingly-solid teaching material out there about functional programming which &lt;em&gt;doesn’t&lt;/em&gt; lean on math concepts.)&lt;/p&gt;
&lt;p&gt;On the other side, functional programming does give us some real and serious benefits, and that’s what I’m going to spend the first third or so of this talk looking at. But of course, it’s still just a tool, and even though it is a very helpful and very powerful tool, it can’t keep us from writing bugs. Still, every tool we can add to our belt for writing correct software is a win.&lt;/p&gt;
&lt;p&gt;One more prefatory note before we get into the meat of this talk: unfamiliar terminology is not specific to functional programming. So, yes, when you see this list, it might seem a little out there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functor&lt;/li&gt;
&lt;li&gt;Applicative&lt;/li&gt;
&lt;li&gt;Monoid&lt;/li&gt;
&lt;li&gt;Monad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And in truth, a number of those could have better names. &lt;em&gt;But&lt;/em&gt; we have plenty of terminology we throw around in the world of imperative, object-oriented programming. To pick just one, obvious and easy example—what are the &lt;abbr&gt;SOLID&lt;/abbr&gt; principles?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single reponsibility&lt;/li&gt;
&lt;li&gt;Open/closed&lt;/li&gt;
&lt;li&gt;Liskov substitution&lt;/li&gt;
&lt;li&gt;Interface segregation&lt;/li&gt;
&lt;li&gt;Dependency inversion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may not remember what it felt like the first time you encountered &lt;abbr&gt;SOLID&lt;/abbr&gt;, but suffice it to say: “Liskov substitution principle” isn’t any more intuitive or obvious than “Monad”. You’re just familiar with one of them. The same is true of “applicative” and “Visitor pattern”. And so on. Granted, again: it would be nice for some of these things to have easier names, a &lt;em&gt;big&lt;/em&gt; part of the pain here is just unfamiliarity.&lt;/p&gt;
&lt;p&gt;So, with that out of the way, what &lt;em&gt;is&lt;/em&gt; functional programming?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-functional-programming" class="level2"&gt;
&lt;h2&gt;What is functional programming?&lt;/h2&gt;
&lt;p&gt;Functional programming is a style of programming that uses &lt;em&gt;pure functions&lt;/em&gt; and &lt;em&gt;immutable data&lt;/em&gt; for as many things as possible, and builds programs primarily out of &lt;em&gt;functions&lt;/em&gt; rather than other abstractions. I’ll define all of those terms in a moment, but first…&lt;/p&gt;
&lt;section id="why-do-we-care" class="level3"&gt;
&lt;h3&gt;Why do we care?&lt;/h3&gt;
&lt;p&gt;We care, frankly, because &lt;em&gt;we’re not that smart&lt;/em&gt;. Let’s think about some of the kinds of things we’re doing with, say, restaurant software: clients, with locations, building baskets, composed of products with options and modifiers, which have a set of rules for what combinations are allowed both of products and of their elements as making up a basket, which turn into orders, which have associated payment schemes (sometimes a lot of them), which generate data to send to a point-of-sale as well as summaries for the customer who ordered it, and so on. There are a &lt;em&gt;lot&lt;/em&gt; of moving pieces there. I’m sure a missed some non-trivial pieces, too. And if all of that is &lt;em&gt;stateful&lt;/em&gt;, that’s a lot of state to hold in your head.&lt;/p&gt;
&lt;p&gt;Let me be a bit provocative for a moment. Imagine you were reading a JavaScript module and it looked like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;var foo = 12;
var bar = &amp;#39;blah&amp;#39;;
var quux = { waffles: &amp;#39;always&amp;#39; };

export function doSomething() {
  foo = 42;
}

export function getSomething() {
  bar = quux;
  quux.waffles = &amp;#39;never&amp;#39;;
  return bar;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everyone watching would presumably say, “No that’s bad, don’t do that!” Why? Because there is &lt;em&gt;global state&lt;/em&gt; being changed by those functions, and there’s nothing about the functions which tells you what’s going on. Global variables are bad. Bad bad bad. We all know this. Why is it bad? Because you have no idea when you call &lt;code&gt;doSomething()&lt;/code&gt; or &lt;code&gt;getSomething()&lt;/code&gt; what kinds of side effects it might have. And if &lt;code&gt;doSomething()&lt;/code&gt; and &lt;code&gt;getSomething()&lt;/code&gt; affect the same data, then the order you call them in matters.&lt;/p&gt;
&lt;p&gt;In a previous job, I spent literally months chasing a bunch of bugs in a C codebase where all of the state was global. &lt;em&gt;We don’t do this anymore.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But really, what’s different about this?&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;class AThing {
  constructor() {
    this.foo = 12;
    this.bar = &amp;#39;blah&amp;#39;;
    this.quux = { waffles: &amp;#39;always&amp;#39; };
  }

  doSomething() {
    this.foo = 42;
  }

  getSomething() {
    this.bar = this.quux;
    this.quux.waffles = &amp;#39;never&amp;#39;;
    return this.bar;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have some “internal” data, just like we had in the module up above. And we have some public methods which change that state. In terms of these internals, it’s the same. There are differences in terms of having &lt;em&gt;instances&lt;/em&gt; and things like that, but in terms of understanding the behavior of the system—understanding the state involved—it’s the same. It’s global, mutable state. Now it’s not global like attaching something to the &lt;code&gt;window&lt;/code&gt; object in JavaScript, and that’s good, but still: at the module or class level, it’s just global mutable state, with no guarantees about how anything works. And this is normal—endemic, even—in object-oriented code. We encapsulate our state, but we have &lt;em&gt;tons&lt;/em&gt; of state, it’s all mutable, and as far as any given class method call is concerned, it’s all global to that class.&lt;/p&gt;
&lt;p&gt;You have no idea, when you call a given object method, what it might do. The fact that you call it with an &lt;code&gt;Int&lt;/code&gt; and get out a &lt;code&gt;String&lt;/code&gt; tells you almost nothing. For all you know, it’s triggering a &lt;abbr&gt;JSON-RPC&lt;/abbr&gt; call using the int as the &lt;abbr&gt;ID&lt;/abbr&gt; for the endpoint, which in turn triggers an operation, responds with another &lt;abbr&gt;ID&lt;/abbr&gt;, which you then use to query a database, and load a string from there, which you then set on some other member of the object instance, and then return. Should you write a method that does that? Probably not. But you can; nothing stops you.&lt;/p&gt;
&lt;p&gt;When you call a method, you have no idea what it will do. JavaScript, TypeScript, C&lt;sup&gt;♯&lt;/sup&gt;, it doesn’t matter. You have literally no idea. And that makes things &lt;em&gt;hard&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It often makes fixing bugs hard, because it means you have to figure out which particular &lt;em&gt;state&lt;/em&gt; caused the issue, and find a way to reproduce that state. Which usually means calling methods in a particular order.&lt;/li&gt;
&lt;li&gt;It makes testing hard. Again, it often entails calling methods in a particular order. It also means you often need mocks for all those outside-world things you’re trying to do.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functional programming is an out. An escape hatch. An acknowledgement, a recognition, that holding all of this in our heads is too much for us. No one is that smart. And our software, even at its best, is hard to hold in our heads, hard to make sure that our changes don’t break something seemingly unrelated, hard to see how the pieces fit together—hard, in a phrase you’ll often hear from functional programming fans, hard to reason about.&lt;/p&gt;
&lt;p&gt;So, how do we solve these problems? With functional programming!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-functional-programming-1" class="level3"&gt;
&lt;h3&gt;What &lt;em&gt;is&lt;/em&gt; functional programming?&lt;/h3&gt;
&lt;p&gt;Functional programming is basically combining four bigs ideas:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;First class functions&lt;/li&gt;
&lt;li&gt;Higher-order functions&lt;/li&gt;
&lt;li&gt;Pure functions&lt;/li&gt;
&lt;li&gt;Immutable data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The combination of these things leads us to a &lt;em&gt;very&lt;/em&gt; different style of programming than traditional &lt;abbr&gt;OOP&lt;/abbr&gt;. Let’s define them.&lt;/p&gt;
&lt;section id="first-class-functions-and-higher-order-functions" class="level4"&gt;
&lt;h4&gt;First class functions and higher-order functions&lt;/h4&gt;
&lt;p&gt;We’ll start by looking at the things that are probably most familiar to you if you’re a JavaScript developer (even if you haven’t necessarily heard the names): first-class functions and higher-order functions.&lt;/p&gt;
&lt;p&gt;When we talk about &lt;em&gt;first class functions,&lt;/em&gt; we mean that functions are just data—they’re first-class items in the language just like any other type. As such, a function is just another thing you can hand around as an argument to other functions. There’s no distinction between a function and a number or a string or some complex data structure. This is essential because, when you combine it with higher-order functions, it allows for incredible &lt;em&gt;simplicity&lt;/em&gt; and incredible &lt;em&gt;reusability&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Higher-order functions, in turn, are functions which take other functions as parameters or return them as their values. We’ll see this in detail in a worked example in a few, but for right now, let’s just use a really simple example that will be familiar to anyone who’s done much JavaScript: using &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we have a collection like an array and we want to transform every piece of data in it, we could of course do it with a for loop, and with iterable types we could use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;&lt;code&gt;for ... of&lt;/code&gt;&lt;/a&gt;. But with &lt;code&gt;map&lt;/code&gt;, we can just leave the implementation details of &lt;em&gt;how&lt;/em&gt; the items in the array are iterated through, and instead worry about what we want to change. We can do that because &lt;code&gt;map&lt;/code&gt; takes functions as arguments.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const initialValues = [1, 2, 3];
const doubledValues = initialValues.map(value =&amp;gt; value * 2);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We did it there with a function explicitly, but we could just as easily extract the function like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const double = value =&amp;gt; value * 2;
const initialValues = [1, 2, 3];
const doubledValues = initialValues.map(double);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is possible because &lt;em&gt;functions are just data&lt;/em&gt;—they’re first-class members of the language—and therefore &lt;em&gt;functions can be arguments or return values&lt;/em&gt;—the language supports higher-order functions.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pure-functions" class="level4"&gt;
&lt;h4&gt;Pure functions&lt;/h4&gt;
&lt;p&gt;What about &lt;em&gt;pure functions&lt;/em&gt;? Pure functions are functions with &lt;em&gt;no effects&lt;/em&gt;. The input directly translates to the output, every time. The examples we looked at just a moment ago with &lt;code&gt;map&lt;/code&gt; are all pure functions (and it’s a really weird antipattern to use effectful functions with &lt;code&gt;map&lt;/code&gt;! Don’t do that! Use &lt;code&gt;forEach&lt;/code&gt; if you must have an effect). Here are a few more super simple examples:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const add = (a, b) =&amp;gt; a + b;
const toString = (number) =&amp;gt; `The value is ${number}`;
const toLength = (list) =&amp;gt; list.length;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are some examples of straightforward functions which are &lt;em&gt;not&lt;/em&gt; pure:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const logDataFromEndpoint = (endpoint) =&amp;gt; {
  fetch(endpoint).then(response =&amp;gt; {
    console.log(response);
  });
};

let foo = 42;
const setFoo = (newValue) =&amp;gt; {
  foo = newValue;
};

const getFoo = () =&amp;gt; foo;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So a pure function is one whose output is &lt;em&gt;solely&lt;/em&gt; determined by its input That means no talking to a database, no making &lt;abbr&gt;API&lt;/abbr&gt; calls, no reading from or writing to disk.&lt;/p&gt;
&lt;p&gt;And of course, you can’t do anything meaningful with &lt;em&gt;just&lt;/em&gt; pure functions. We need user input, and we need to put the results of our computation somewhere. So the goal isn’t to write &lt;em&gt;only&lt;/em&gt; pure functions. It’s to write &lt;em&gt;mostly&lt;/em&gt; pure functions and to &lt;em&gt;isolate&lt;/em&gt; all impure functions.&lt;/p&gt;
&lt;p&gt;What this gets us is two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;A much smaller list of things to worry about when we’re looking at a given function.&lt;/li&gt;
&lt;li&gt;The ability to &lt;em&gt;compose&lt;/em&gt; functions together more easily.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have fewer things to keep in our heads when we look at any given pure function, because we don’t have to worry at all about whether something it touches has been changed by another function or not. We have inputs. We transform them into outputs. That’s it. Compare these two things in practice.&lt;/p&gt;
&lt;p&gt;Here’s a traditional &lt;abbr&gt;OOP&lt;/abbr&gt; approach:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;class Order {
  constructor() {
    this.subTotal = 0.0;
    this.taxRate = 0.01;
  }

  getTotal() {
    return this.subTotal * (1 + this.taxRate);
  }
}

const order = new Order();
order.subTotal = 42.00;

const total = order.getTotal();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the total is always dependent on what has happened in the object. If we write &lt;code&gt;order.subTotal = 43&lt;/code&gt;, &lt;code&gt;order.total&lt;/code&gt; will change. So if we want to test how &lt;code&gt;total&lt;/code&gt; behaves, or if there’s a bug in it, we need to make sure we’ve made all the appropriate transformations to the object ahead of time. That’s no big deal here; the &lt;code&gt;total&lt;/code&gt; getter is incredibly simple (and in fact, we’d normally just write it with a property getter). But still, we have to construct an order and make sure all the relevant properties are set to get the right value out of &lt;code&gt;getTotal()&lt;/code&gt;. Things outside the method call itself affect what we get back. We have no way to test &lt;code&gt;getTotal()&lt;/code&gt; by itself, and no way to debug it if there’s a bug without first doing some object setup.&lt;/p&gt;
&lt;p&gt;Now, here’s a functional approach.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const order = {
  subTotal: 42.0,
  taxRate: 0.01
}

const getTotal = (subTotal, taxRate) =&amp;gt; subTotal * (1 + taxRate);
const total = getTotal(order.subTotal, order.taxRate);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the object is &lt;em&gt;just data&lt;/em&gt;. It’s a &lt;em&gt;record&lt;/em&gt;. And the function just takes a couple of arguments. If there needed to be a more complicated transformation internally, we could do that just as easily. Note that it also decouples the structure of the data from the actual computation (though we could pass in a record as well if we had a good reason to).&lt;/p&gt;
&lt;p&gt;This makes it easily testable, for free. Want to make sure different tax rates get the correct output? Just… pass in a different tax rate. You don’t have to do any complicated work setting up an object instance first (which is especially important for more complex data types). It also makes it easier to chase down any bugs: the only thing you have to care about is that simple function body. There’s no other state to think about, because there’s no state at all here from the perspective of the function: just inputs and outputs.&lt;/p&gt;
&lt;p&gt;This has one other &lt;em&gt;really&lt;/em&gt; important consequence, which goes by the name &lt;strong&gt;referential transparency&lt;/strong&gt;. All that means is that anywhere you see a pure function, you can always substitute the value it produces, or vice versa. This is quite unlike the &lt;code&gt;Order::getTotal()&lt;/code&gt; method, where (a) it’s attached to an object instance and (b) it’s dependent on other things about that object. You can’t just substitute it in, or freely move it around, when you’re doing a refactor. &lt;em&gt;Maybe&lt;/em&gt; you can, but you’d better hope that all the other state is shuffled around with it correctly. Whereas, with the standalone &lt;code&gt;getTotal()&lt;/code&gt; function, all you need is its arguments, and you’ll always get the same thing back.&lt;/p&gt;
&lt;p&gt;This is just like math: if you say, &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt; = 5&lt;/span&gt; when solving an algebraic equation, you can put &lt;span class="math inline"&gt;5&lt;/span&gt; &lt;em&gt;anywhere you see &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;&lt;/em&gt;; or, if it’s useful for factoring the equation or something, you can just as easily put &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; anywhere you see &lt;span class="math inline"&gt;5&lt;/span&gt;. And in math, that’s true for &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; as well. When we use pure functions, it’s true for programming, too! That makes refactoring much easier.&lt;/p&gt;
&lt;p&gt;As we’ll see in the example I walk through in a minute, it also lets us &lt;em&gt;compose&lt;/em&gt; functions together far more easily. If all we have are inputs and outputs, then I can take the output from one function and use it as the input to the next.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="immutable-data" class="level4"&gt;
&lt;h4&gt;Immutable data&lt;/h4&gt;
&lt;p&gt;Complementing the use of mostly pure functions is to use &lt;em&gt;immutable data&lt;/em&gt;. Instead of having objects which we mutate, we create copies of the data as we transform it.&lt;/p&gt;
&lt;p&gt;You’re probably wondering how in the world this can work (and also how you avoid it being incredibly computationally expensive). For the most part, we can rely on two things: smart compilers and runtimes, and the fact that we often don’t need to reuse the &lt;em&gt;exact&lt;/em&gt; same data because we’re transforming it. However, as we’ll see below, in languages which don’t have native support for immutability, it can impose a performance penalty. Gladly, there are ways to work around this!&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="a-worked-example" class="level2"&gt;
&lt;h2&gt;A Worked Example&lt;/h2&gt;
&lt;p&gt;Let’s get down to a real example of these ideas. This is a ‘code kata’ I do every so often. In this particular kata, you get a list of burger orders which looks like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;[
  { condiments: [&amp;#39;ketchup&amp;#39;, &amp;#39;mustard&amp;#39;, &amp;#39;pickles&amp;#39;] },
  { condiments: [&amp;#39;tomatoes&amp;#39;] },
  { condiments: [&amp;#39;mustard&amp;#39;, &amp;#39;ketchup&amp;#39;] },
  // etc...
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’re supposed to take this list (of 10,000-some-odd burger variations!) and determine what the top ten most common orders (not just condiments, but orders) are. (The truth is, the list actually mostly looks like &lt;code&gt;condiments: ['ketchup']&lt;/code&gt; over and over again.) So as a preliminary, you can assume that the data is being loaded like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const getBurgers = () =&amp;gt;
  fetch(&amp;#39;http://files.example.com/burgers.json&amp;#39;)
    .then(request =&amp;gt; request.json());&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we’ll print our results (which will always end up in the same format) like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const descAndCountToOutput = descAndCount =&amp;gt; `${descAndCount[0]}: ${descAndCount[1]}`;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is actually a perfect case to demonstrate how functional programming ideas can help us solve a problem.&lt;/p&gt;
&lt;section id="imperative" class="level3"&gt;
&lt;h3&gt;Imperative&lt;/h3&gt;
&lt;p&gt;First, let’s look at what I think is a &lt;em&gt;relatively&lt;/em&gt; reasonable imperative approach. Our basic strategy will be:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Convert condiments to descriptions.
&lt;ol type="1"&gt;
&lt;li&gt;Convert the objects to just their lists of condiments.&lt;/li&gt;
&lt;li&gt;Sort those strings.&lt;/li&gt;
&lt;li&gt;Turn them into descriptions by joining them with a comma.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Build up a mapping from description to count.&lt;/li&gt;
&lt;li&gt;Sort that by count.&lt;/li&gt;
&lt;li&gt;Get the top 10.&lt;/li&gt;
&lt;li&gt;Print out the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="js"&gt;&lt;code&gt;getBurgers().then(burgers =&amp;gt; {
  let totals = {};

  // 2. Build up a mapping from description to count.
  for (let burger of burgers) {
    // 1. Convert condiments to descriptions.
    // 1.1. Convert the objects to just their lists of condiments.
    const condiments = burger.condiments;
    // 1.2. Sort those strings.
    condiments.sort();
    // 1.3. Turn them into descriptions by joining them with a comma.
    const description = condiments.join(&amp;#39;, &amp;#39;);

    // 2. Build up a mapping from description to count.
    const previousCount = totals[description];
    totals[description] = previousCount ? previousCount + 1 : 1;
  }

  // 3. Sort that by count.
  const sortableCondiments = Object.entries(totals);
  sortableCondiments.sort((a, b) =&amp;gt; b[1] - a[1]);
  // 4. Get the top 10.
  const topTen = sortableCondiments.slice(0, 10);
  // 5. Print out the results.
  for (let descAndCount of topTen) {
    console.log(descAndCountToOutput(descAndCount));
  }
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s pretty well-factored. But it’s pretty wrapped up on the specific details of this problem, and there’s basically nothing here I could reuse. It’s also relatively hard to test. There aren’t really a lot of pieces there we could break up into smaller functions if we wanted to figure out why something was broken. The way you’d end up fixing a bug here is probably by dropping &lt;code&gt;debugger&lt;/code&gt; or &lt;code&gt;console.log()&lt;/code&gt; statements in there to see what the values are at any given spot.&lt;/p&gt;
&lt;p&gt;And this is where functional programming really does give us a better way.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="functional" class="level3"&gt;
&lt;h3&gt;Functional&lt;/h3&gt;
&lt;p&gt;Instead of thinking about the specific details of &lt;em&gt;how&lt;/em&gt; to get from A to B, let’s think about what we start with and what we finish with, and see if we can build up a pipeline of transformations that will get us there.&lt;/p&gt;
&lt;p&gt;We start with a &lt;em&gt;list&lt;/em&gt; of &lt;em&gt;objects&lt;/em&gt; containing &lt;em&gt;arrays&lt;/em&gt; of &lt;em&gt;strings&lt;/em&gt;. We want to end up with a &lt;em&gt;list&lt;/em&gt; of the &lt;em&gt;distinct combinations&lt;/em&gt; and their &lt;em&gt;frequency&lt;/em&gt;. How can we do this? Well, the basic idea is the same as what we did above:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Convert condiments to descriptions.
&lt;ol type="1"&gt;
&lt;li&gt;Convert the objects to just their lists of condiments.&lt;/li&gt;
&lt;li&gt;Sort those strings.&lt;/li&gt;
&lt;li&gt;Turn them into descriptions by joining them with a comma.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Build up a mapping from description to count.&lt;/li&gt;
&lt;li&gt;Sort that by count.&lt;/li&gt;
&lt;li&gt;Get the top 10.&lt;/li&gt;
&lt;li&gt;Print out the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To someone acquainted with functional programming, that looks like a bunch of &lt;code&gt;map&lt;/code&gt;s, a &lt;code&gt;reduce&lt;/code&gt;, and some &lt;code&gt;sort&lt;/code&gt;s. And each of those using just simple, pure functions. Let’s see what that might look like. First, what are our transformations?&lt;/p&gt;
&lt;p&gt;The step 1 transformations are all quite straightforward:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// 1. Convert condiments to descriptions.
// 1.1. Convert the objects to just their lists of condiments.
const toCondiments = burger =&amp;gt; burger.condiments ? burger.condiments : [];
// 1.2. Sort those strings.
const toSortedCondiments = condiments =&amp;gt; condiments.concat().sort();
// 1.3. Turn them into descriptions by joining them with a comma.
const toDescriptions = condiments =&amp;gt; condiments.join(&amp;#39;, &amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 2 is a little more involved: it involves building up a new data structure (&lt;code&gt;totals&lt;/code&gt;) from an old one. This function is a &lt;em&gt;reducer&lt;/em&gt;: it will build up &lt;code&gt;totals&lt;/code&gt; by updating &lt;code&gt;totals&lt;/code&gt; with each &lt;code&gt;description&lt;/code&gt; from an array of them.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// 2. Build up a mapping from description to count.
const toTotals = (totals, description) =&amp;gt; {
  const previousCount = totals[description];
  const count = previousCount ? previousCount + 1 : 1;
  totals[description] = count;
  return totals;
};

// 3. Sort that by count.
const byCount = (a, b) =&amp;gt; b[1] - a[1];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll see how to get just 10 in a moment; for now, let’s also wrap up the output:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// 5. Print it out
const output = value =&amp;gt; { console.log(value); };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are our base building blocks, and we’ll re-use them in each of the approaches I cover below. Note that we’ve now taken those same basic steps from our imperative approach and turned them into standalone, testable functions. They’re small and single-purpose, which always helps. But more importantly, (with two exceptions we’ll talk about in a minute) all of those transformations are &lt;em&gt;pure functions&lt;/em&gt;, we know that we’ll get the same results every time we use them. If I want to make sure that burger condiments are converted correctly, I can test &lt;em&gt;just that function&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;describe(&amp;#39;toCondiments&amp;#39;, () =&amp;gt; {
  it(&amp;#39;returns an empty list when there is no `condiments`&amp;#39;, () =&amp;gt; {
    toCondiments({}).should.deepEqual([]);
  });

  it(&amp;#39;returns the list of condiments when it is passed&amp;#39;, () =&amp;gt; {
    const condiments = [&amp;#39;ketchup&amp;#39;, &amp;#39;mustard&amp;#39;];
    toCondiments({ condiments }).should.deepEqual(condiments);
  });
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a trivial example, of course, but it gets the point across: all we have to do to test this is pass in an object. It doesn’t depend on anything else. It doesn’t have &lt;em&gt;any knowledge&lt;/em&gt; of how we’re going to use it. It doesn’t know that it’s going to be used with data coming from an array. All it knows is that if you give it an object with a &lt;code&gt;condiments&lt;/code&gt; property, it’ll hand you back the array attached to that property.&lt;/p&gt;
&lt;p&gt;The result is that, with all of these functions, we don’t have to deal with mocks or stubs or anything like that to be testable. Input produces output. Pure functions are great for this. Now, some of you may be thinking, “That’s great, but what about &lt;abbr&gt;I/O&lt;/abbr&gt;, or databases, or any other time we actually interact with the world? What about talking to a point-of-sale?” I actually have some tentative thoughts about a future tech talk to look at how to do that in some detail, but for today, just remember that the goal is to write as many pure functions as possible, and to isolate the rest of your code from knowing about that. And of course, that’s best practice anyway! We’re just codifying it. We’ll see what that looks like in practice in just a minute.&lt;/p&gt;
&lt;p&gt;Now, while we’re on the topic of pure functions, some of you with quick eyes may have noticed that two of these little functions we laid out are actually &lt;em&gt;not&lt;/em&gt; pure: JavaScript’s &lt;code&gt;Array.sort&lt;/code&gt; method operates in-place, for performance reasons, and so does our &lt;code&gt;toTotals&lt;/code&gt; function. So a truly pure version of the sorting function looks like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const toSortedCondiments = condiments =&amp;gt; condiments.concat().sort();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we &lt;em&gt;could&lt;/em&gt; define the &lt;code&gt;toTotals&lt;/code&gt; to return a new object every time, like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const toTotals = (totals, description) =&amp;gt; {
  const previousCount = totals[description];
  const count = previousCount ? previousCount + 1 : 1;
  const update = { [description]: count };
  return Object.assign({}, totals, update);
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, given the amount of data we’re dealing with, that’s prohibitively expensive. We end up spending a &lt;em&gt;lot&lt;/em&gt; of time allocating objects and garbage-collecting them. As a result, it’s tens of thousands of times slower. Running it on my 4GHz iMac, the in-place version takes less than 40ms. Doing it the strictly pure way—returning copies every time—takes ~53s. And if you profile it, almost all of that time is spent in &lt;code&gt;assign&lt;/code&gt; (52.95s).&lt;/p&gt;
&lt;p&gt;This takes us to an important point, though: it’s actually not a particularly big deal to have this particular data changed in place, because we’re not going to do anything &lt;em&gt;else&lt;/em&gt; with it. And in fact, under the hood, this is exactly what pure functional languages do with these kinds of transformations—precisely because it’s perfectly safe to do so, because we’re the only ones who have access to this data. We’re generating a &lt;em&gt;new&lt;/em&gt; data structure from the data that we were originally handed, and the next function will make its own new data structure (whether a copy or something else).&lt;/p&gt;
&lt;p&gt;In other words, when we’re talking about a &lt;em&gt;pure function&lt;/em&gt;, we don’t really care about internal mutability (though of course, that can bite us if we’re not careful). We’re really concerned about &lt;em&gt;external&lt;/em&gt; mutability. As long as the same inputs get the same outputs every time, the rest of the world doesn’t have to care how we got that result.&lt;/p&gt;
&lt;p&gt;Now let’s see how we use these functions.&lt;/p&gt;
&lt;section id="pure-javascript" class="level4"&gt;
&lt;h4&gt;Pure JavaScript&lt;/h4&gt;
&lt;p&gt;First, here’s a pure-JavaScript approach, but a more functional one instead of an imperative one:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;getBurgers().then(burgers =&amp;gt; {
  const descriptionToCount = burgers
    .map(toCondiments)
    .map(toSortedCondiments)
    .map(toDescriptions)
    .reduce(toTotals, {})

  const entries = Object.entries(descriptionToCount);

  [...entries]
    .sort(byCount)
    .slice(0, 10)  // 4. Get the top 10.
    .map(descAndCountToOutput)
    .forEach(output);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, the good: our transformation is no longer all jumbled together. In fact, our code reads a lot like our original description did. Also, notice that we just have a bunch of functions operating on data: none of the functions used here have any knowledge about where the data comes from that they operate on.&lt;/p&gt;
&lt;p&gt;But then we also have a couple things that are a &lt;em&gt;little&lt;/em&gt; bit clunky. The main thing that sticks out is that sudden stop in the chain in the middle.&lt;/p&gt;
&lt;p&gt;When we’re dealing with the &lt;code&gt;Array&lt;/code&gt; type, everything is fine, but when we convert our data into a &lt;code&gt;Map&lt;/code&gt;, we no longer have that option, so we have to jump through some hoops to do the transformation back into the data type we need. We’re stuck if the object type doesn’t have the method we need. We’re kind of trying to mash together the imperative and functional styles, and it’s leaving us in a little bit of a weird spot.&lt;/p&gt;
&lt;p&gt;There’s another issue here, though, and it’s the way that using the method-style calling convention obscures something important. When we call &lt;em&gt;most&lt;/em&gt; of those methods, we’re doing something quite different from what most &lt;em&gt;methods&lt;/em&gt; do. A method normally is an operation on an object. These methods—most of them—are operations that return &lt;em&gt;new&lt;/em&gt; objects. So it’s nice from a syntax perspective, but if we’re not &lt;em&gt;already&lt;/em&gt; familiar with the behavior of a given method, it won’t be clear at all that we’re actually generating a bunch of totally new data by calling those methods.&lt;/p&gt;
&lt;p&gt;And… two of these methods (&lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;forEach&lt;/code&gt;) &lt;em&gt;are&lt;/em&gt; not doing that, but are modifying an array in place instead.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lodash" class="level4"&gt;
&lt;h4&gt;Lodash&lt;/h4&gt;
&lt;p&gt;The first step away from this problem is to use a tool like &lt;a href="https://lodash.com"&gt;Lodash&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// More functional, with _:
// We tweak how a few of these work slightly to play nicely.
const _toDescriptions = condiments =&amp;gt; _.join(condiments, &amp;#39;, &amp;#39;);
const _byCount = _.property(1);

getBurgers().then(burgers =&amp;gt; {
  const condiments = _.map(burgers, toCondiments);
  const sortedCondiments = _.map(condiments, toSortedCondiments);
  const descriptions = _.map(sortedCondiments, _toDescriptions);
  const totals = _.reduce(descriptions, toTotals, {});
  const totalPairs = _.toPairs(totals);
  const sortedPairs = _.sortBy(totalPairs, _byCount);
  const sortedPairsDescending = _.reverse(sortedPairs);
  const topTen = _.take(sortedPairsDescending, 10);
  const forOutput = _.map(topTen, descAndCountToOutput)
  _.forEach(forOutput, output);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But it seems like we lost something when we moved away from the object-oriented approach. Being able to chain things, so that each item worked with the previous item, was actually pretty nice. And needing all these intermediate variables is &lt;em&gt;not&lt;/em&gt; so nice.&lt;/p&gt;
&lt;p&gt;One way around this is to use Lodash’s &lt;code&gt;_.chain&lt;/code&gt; method. That would have let us write it like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;getBurgers().then(burgers =&amp;gt; {
  const foo = _.chain(burgers)
    .map(toCondiments)
    .map(toSortedCondiments)
    .map(_toDescriptions)
    .reduce(toTotals, {})
    .toPairs()
    .sortBy(_byCount)
    .reverse()
    .take(10)
    .map(descAndCountToOutput)
    .value()
    .forEach(output);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that &lt;em&gt;is&lt;/em&gt; a win. But it only works because JavaScript is &lt;em&gt;incredibly&lt;/em&gt; dynamic and lets us change the behavior of the underlying &lt;code&gt;Array&lt;/code&gt; type. (You’d have a much harder time doing that in Java or C&lt;sup&gt;♯&lt;/sup&gt;!)&lt;/p&gt;
&lt;p&gt;Perhaps just as importantly, it requires us to make sure that we do that &lt;code&gt;_.chain()&lt;/code&gt; call on on anything we want to tackle this way. So, can we get the benefits of this some &lt;em&gt;other&lt;/em&gt; way? Well, obviously the answer is &lt;em&gt;yes&lt;/em&gt; because I wouldn’t be asking otherwise.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="with-ramda." class="level4"&gt;
&lt;h4&gt;With Ramda.&lt;/h4&gt;
&lt;p&gt;But we can actually go a bit further, and end up in a spot where we don’t need to modify the object prototype at all. We can just do this with a series of standalone functions which don’t depend on being attached to &lt;em&gt;any&lt;/em&gt; object. If we use the &lt;a href="http://ramdajs.com"&gt;Ramda&lt;/a&gt; library,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; we can tackle this with nothing but functions.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const getTop10Burgers = R.pipe(
  R.map(R.prop(&amp;#39;condiments&amp;#39;)),
  R.map(R.sortBy(R.toString)),
  R.map(R.join(&amp;#39;, &amp;#39;)),
  R.reduce(toTotals, {}),
  R.toPairs,
  R.sortBy(R.prop(1)),  // will give us least to greatest
  R.reverse,
  R.take(10),
  R.map(descAndCountToOutput)
);

return getBurgers()
  .then(getTop10Burgers)
  .then(R.forEach(output));&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the difference between here and even where we started with Lodash: we’re no longer dependent on a specific piece of data being present. Instead, we’ve created a standalone function which can operate on that data, simply by “piping” together—that is, &lt;em&gt;composing&lt;/em&gt;—a bunch of other, smaller functions. The output from each one is used as the input for the next.&lt;/p&gt;
&lt;p&gt;One of the many small niceties that falls out of this is that we can refactor this just by pulling it apart into smaller acts of compositions.&lt;/p&gt;
&lt;p&gt;Here’s an example of how we might use that. We defined those simple transformations for the condiments as a set of three functions, which converted them from objects with &lt;code&gt;condiments&lt;/code&gt; elements, sorted them, and joined them into a string. Now, let’s build those into meaningful functions for each step:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// 1. Convert condiments to descriptions.
const burgerRecordsToDescriptions = R.pipe(
  R.map(R.prop(&amp;#39;condiments&amp;#39;)),
  R.map(R.sortBy(R.toString)),
  R.map(R.join(&amp;#39;, &amp;#39;)),
);

// 2. Build up a mapping from description to count.
const descriptionsToUniqueCounts = R.pipe(
  R.reduce(toTotals, {}),
  R.toPairs,
);

// 3. Sort that by count.
const uniqueCountsToSortedPairs = R.pipe(
  R.sortBy(R.prop(1)),
  R.reverse,
);

// For (4), to get the top 10, we&amp;#39;ll just use `R.take(10)`.
// We could also alias that, but it doesn&amp;#39;t gain us much.

// 5. Print it out
const sortedPairsToConsole = R.pipe(
  R.map(descAndCountToOutput),
  R.forEach(output)
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can put those together into another, top-level function to do &lt;em&gt;exactly&lt;/em&gt; our steps.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const getTop10Burgers = R.pipe(
  burgerRecordsToDescriptions,  // (1)
  descriptionsToUniqueCounts,   // (2)
  uniqueCountsToSortedPairs,    // (3)
  R.take(10)                    // (4)
);

getBurgers()
  .then(getTop10Burgers)
  .then(sortedPairsToConsole);  // (5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that, because each step is just composing together functions, “refactoring” is easy. And, to be sure, you have to be mindful about what comes in and out of each function. But that’s true in the imperative approach, too: you always have to keep track of the state of the object you’re building up, but there you’re doing it in the middle of a loop, so you’re keeping track of a lot &lt;em&gt;more&lt;/em&gt; state at any given time. Functions with simple inputs and outputs give us a more explicit way of specifying the structure and state of the data at any given time. That’s true even in JavaScript, but it goes double if we’re in a typed language like F&lt;sup&gt;♯&lt;/sup&gt;, Elm, etc., where we can specify those types for the function as a way of designing the flow of the program. (That’s such a helpful way of solving problems, in fact, that I may also do a talk on type-driven design in the future!)&lt;/p&gt;
&lt;p&gt;Note, as well, that we’ve now completely isolated our input and output from everything else. The middle there is a chain of pure functions, built out of other pure functions, which neither know nor care that the data came in from an &lt;abbr&gt;API&lt;/abbr&gt; call, or that we’re going to print it to the console when we finish.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So this takes us back around to that first question: why do we care? At the end of the day, is this really a win over the imperative style? Is the final version, using Ramda, really better than the pure-JavaScript mostly-functional version we used at first?&lt;/p&gt;
&lt;p&gt;Obviously, I think the answers there are yes. The Ramda version there at the end is &lt;em&gt;way&lt;/em&gt; better than the imperative version, and substantially better than even the first “functional” JavaScript versions we wrote.&lt;/p&gt;
&lt;p&gt;For me, at least, the big takeaway here is this: we just built a small but reasonable transformation of data out of a bunch of really small pieces. That has two big consequences—consequences we’ve talked about all along the way, but which you’ve now seen in practice:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Those pieces are easy to test. If something isn’t working, I can easily take those pieces apart and test them individually, or test the result of any combination of them. As a result, I can test any part of that pipe chain, and I can &lt;em&gt;fix&lt;/em&gt; pieces independent of each other. No part depends on being in the middle of a looper where transformations are done to other parts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because they’re small and do one simple things, I can recombine those pieces any way I like. And you see that in the Ramda examples in particular: most of what we’re doing in those examples is not even something we wrote ourselves. They’re also &lt;em&gt;really&lt;/em&gt; basic building blocks, available in basically every standard library.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One last thing: if you’re curious about performance… you should know that it does matter for data at scale. In my tests (which are admittedly extremely unscientific; unfortunately, I couldn’t get JSPerf running nicely with this particular set of variations), I found that the time it took to run these varied depending on the approach &lt;em&gt;and&lt;/em&gt; the library. With a ~10k-record data set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The imperative version, unsurprisingly, was the fastest, taking ~16–17ms.&lt;/li&gt;
&lt;li&gt;After that, the chained lodash version and the pure-&lt;abbr&gt;JS&lt;/abbr&gt; version were comparable, at ~32–36ms, or around twice as long to finish as the imperative version.&lt;/li&gt;
&lt;li&gt;The plain lodash version was consistently a &lt;em&gt;little&lt;/em&gt; slower yet, at ~38–43ms.&lt;/li&gt;
&lt;li&gt;Ramda is &lt;em&gt;slow&lt;/em&gt;: both variations consistently took over 90ms to finish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those differences added up on larger data sets: dealing with ~10,000,000 records, the times ranged from ~12s for the imperative version, to ~15s for the lodash and pure-&lt;abbr&gt;JS&lt;/abbr&gt; variants, to ~50s for the Ramda version.&lt;/p&gt;
&lt;p&gt;They were all pretty darn quick. Compilers, including JavaScript &lt;abbr&gt;JIT&lt;/abbr&gt;s, are incredibly smart. Mostly you can just trust them; come back and profile before you even &lt;em&gt;think&lt;/em&gt; about optimizing things. But you &lt;em&gt;should&lt;/em&gt; know the performance characteristics of different libraries and consider the implications of what the language does well and what it doesn’t. Ramda is likely slower because of the way it curries every function—something that works well in languages with native support for it, e.g. F&lt;sup&gt;♯&lt;/sup&gt; or Elm or Haskell, but imposes a penalty in languages which don’t… like JavaScript. That said, if you’re not in the habit of processing tens of thousands of records, you’re probably okay using any of them.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;or &lt;a href="https://github.com/lodash/lodash/wiki/FP-Guide"&gt;lodash-fp&lt;/a&gt;, but Ramda is a bit better documented and I just like it a little better&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="functional programming"></category><category term="javascript"></category></entry><entry><title>Why Everything is Broken</title><link href="http://www.chriskrycho.com/2016/why-everything-is-broken.html" rel="alternate"></link><published>2016-11-01T20:45:00-04:00</published><updated>2016-11-01T20:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-11-01:/2016/why-everything-is-broken.html</id><summary type="html">&lt;p&gt;It’s something of a joke among many of the software developers I know to wonder aloud how &lt;em&gt;anything&lt;/em&gt; works. We’re all very painfully aware of how hard it is to write correct code, of how hard it is to account for all the corner cases that will arise …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It’s something of a joke among many of the software developers I know to wonder aloud how &lt;em&gt;anything&lt;/em&gt; works. We’re all very painfully aware of how hard it is to write correct code, of how hard it is to account for all the corner cases that will arise, and of how hard it is to write user interfaces (of any sort) that make good sense to the user.&lt;/p&gt;
&lt;p&gt;And our assumptions are broken in weird ways, but we don’t even realize it. Our paradigms for computing are built on decisions made 40–50 years ago, and in many cases there is no &lt;em&gt;good&lt;/em&gt; reason to continue doing things that way in a vacuum. But we’re not in a vacuum, and we have incredible resources built on top of those existing paradigms, and rewriting everything form scratch in a saner way with the lessons we’ve learned in the intervening years seems impossible.&lt;/p&gt;
&lt;p&gt;All of this came home to me again this evening in one of those startlingly painful moments of realization at how ridiculous this stack of cards we’ve built really is.&lt;/p&gt;
&lt;p&gt;I was helping a colleague, a designer who’s been learning HTML and CSS, figure out why his page wasn’t displaying properly on GitHub Pages. The site was loading, and the image assets were loading, but the style sheets weren’t. In fairly short order, I pulled up the site, noticed that the paths were to &lt;code&gt;/css/style.css&lt;/code&gt;, glanced at the source and noted that the actual content was at &lt;code&gt;/CSS/style.css&lt;/code&gt;, and said: “Oh, you just need to make the case of these match!” I explained: the URL proper (everything up through &lt;code&gt;.com&lt;/code&gt; or whatever domain ending) is case-insensitive, but everything after that is case-sensitive.&lt;/p&gt;
&lt;p&gt;There are reasons for that, some historical and some having to do with the fact that you can just serve a web page directly from a server, so the paths on your file system map to the paths on the web. And if your file system is case-sensitive, then the URL has to respect that.&lt;/p&gt;
&lt;p&gt;That is, in a word, &lt;em&gt;dumb&lt;/em&gt;. Don’t get me wrong: again, I see the perfectly defensible technical reasons why that is so. But it’s a leaky abstraction. And when you look closely at them, nearly &lt;em&gt;all&lt;/em&gt; of our abstractions leak, and badly.&lt;/p&gt;
&lt;p&gt;The pain of that moment was realizing, that like so many other things in tech, this particular thing is still broken for two reasons:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It’s too hard or too painful to change it. (That’s a big one here; the web has a pretty firm commitment to absolute backwards compatibility forever, &lt;em&gt;modulo&lt;/em&gt; a few things like killing Flash.)&lt;/li&gt;
&lt;li&gt;We get used to it, and just come to accept the ten thousand papercuts as normal, and eventually even forget about them until something comes up again and &lt;em&gt;forces&lt;/em&gt; us to see them. Usually in the form of someone learning for the first time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can’t necessarily do a lot about (1). We don’t have infinite time or money, and reinventing everything really is impossible. We can do wacky experiments, and iterate toward better solutions that can gradually replace what was there originally.&lt;/p&gt;
&lt;p&gt;But (2) is the bigger one. We need to stop accepting the papercuts as just part of how things are—and especially, stop seeing our acclimation to them as a badge of honor to be earned—and start treating them as rough edges that ought to be sanded off over time wherever possible. Notice the things that trip up new learners, and if you can, &lt;em&gt;get rid of them&lt;/em&gt;. If you can’t get rid of them, make note so that you are sure to cover it when you’re helping someone in the future. And explain the &lt;em&gt;whys&lt;/em&gt; for those little edge cases: even worse than not knowing them, in some ways, is knowing them but not understanding them—having a bag of little tricks you can use but never being able to progress because you can’t see how they fit together.&lt;/p&gt;
&lt;p&gt;Making our tech better starts, in many ways, with recognizing the problems we have. It requires us not to accept (much less embrace or revel in) the status quo, and always to push ourselves to do better. So iterate like made to get away from (1) and to fix (2).&lt;/p&gt;
</content><category term="software development"></category></entry><entry><title>There Is No Second-Order Guilt</title><link href="http://www.chriskrycho.com/2016/there-is-no-second-order-guilt.html" rel="alternate"></link><published>2016-10-26T09:54:00-04:00</published><updated>2016-10-26T09:54:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-10-26:/2016/there-is-no-second-order-guilt.html</id><summary type="html">Link: “There is no such thing as second order guilt. This election, economic reasoning, and so many of our choices would be greatly simplified if more people were aware of this.”
</summary><content type="html">&lt;p&gt;&lt;a href="http://www.ethicsandculture.com/blog/2016/there-is-no-second-order-guilt"&gt;“There is no second-order guilt”&lt;/a&gt;—solid and helpful bit by Andrew “Spence” Spencer here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no such thing as second order guilt.&lt;/p&gt;
&lt;p&gt;This election, economic reasoning, and so many of our choices would be greatly simplified if more people were aware of this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://www.ethicsandculture.com/blog/2016/there-is-no-second-order-guilt"&gt;Read the whole thing.&lt;/a&gt;&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Rust vs. React Native—What?</title><link href="http://www.chriskrycho.com/2016/rust-vs-react-native-what.html" rel="alternate"></link><published>2016-10-07T08:20:00-04:00</published><updated>2016-10-07T08:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-10-07:/2016/rust-vs-react-native-what.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I was recently discussing some thoughts I’ve had on building a top-notch application experience in a Slack team I belong to, and noted that I believe that a Rust core with native UIs is a &lt;em&gt;massively&lt;/em&gt; winning strategy. A friend in the group responded that he thinks “React + JS …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I was recently discussing some thoughts I’ve had on building a top-notch application experience in a Slack team I belong to, and noted that I believe that a Rust core with native UIs is a &lt;em&gt;massively&lt;/em&gt; winning strategy. A friend in the group responded that he thinks “React + JS is eating the world right now” and that “Rust as awesome for if you want to write a JS vm, or something like that… or a compiler… anything involving lots of speed and stability.” What follows is my response, lightly edited to remove details specific to that friend and to add a few further thoughts.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s the thing: I don’t &lt;em&gt;care&lt;/em&gt; what’s eating the world today, for three reasons:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I just want to build the best stuff I can build, and native UIs are still massively better than React and even React Native&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; in innumerable ways. There are clear advantages to React Native + JavaScript, and times when you absolutely should take that approach. But there are also a lot of times and reasons why you shouldn’t. Heck, even if you just want killer performance &lt;em&gt;in browsers&lt;/em&gt;, our future includes things like Rust-to-WebAssembly, and that’s a good thing.&lt;/li&gt;
&lt;li&gt;What was eating the world five years ago? Ten? Is it still eating the world today? I don’t feel obliged to follow those trends (not least because, not being a consultancy, following those trends doesn’t buy me anything for the things I want to do; your tradeoffs and mine look way different).&lt;/li&gt;
&lt;li&gt;I’m actually getting really tired of just treating as acceptable or normative the performance characteristics of browsers. Browsers are awesome. But we can (and should) do a &lt;em&gt;lot&lt;/em&gt; better in terms of user experience, and I don’t see browsers catching up to what you can do with e.g. Cocoa (Touch). Sure, that doesn’t matter that much for building yet-another-storefront. (Again, there are different tradeoffs for every single app!) But why in the world are we in a spot now where one of the most popular text editors in the world is &lt;em&gt;slower&lt;/em&gt; than any text editor of five years ago? That’s not a &lt;em&gt;necessary&lt;/em&gt; decision, and you can (and should) go after the same degree of ease-of-extensibility that Atom has had—perhaps even using things like HTML and CSS for skinning!—while not tying yourself to the browser and its upsides and downsides for &lt;em&gt;everything&lt;/em&gt;. We have &lt;em&gt;incredibly&lt;/em&gt; powerful machines, and the user experience is often getting &lt;em&gt;slower&lt;/em&gt;. I’m looking for ways to change that.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again, JS+React&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; may be &lt;em&gt;exactly&lt;/em&gt; the right tradeoff for a lot of apps, and given what consultancies (like my friends’s!) are doing, I think doing that with ReactNative for apps is a &lt;em&gt;very&lt;/em&gt; good move. It makes good sense business-wise, and it makes good sense in terms of the apps you’re likely to be delivering. Don’t hear me for a second saying Rust is the best for &lt;em&gt;everything&lt;/em&gt;. I think it, or something like it, is a very good choice for &lt;em&gt;many&lt;/em&gt; things, though, and it shouldn’t be dismissed simply because it’s a very different world from doing Ruby or Elixir or JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class=editorial&gt;So much for my initial response. On reflection, I wanted to expand it a bit. So here’s another few hundred words!&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Beyond this, I think there’s a bit of a false dichotomy here: the idea that “lots of speed and stability” &lt;em&gt;aren’t&lt;/em&gt; values we should be seeking more aggressively for &lt;em&gt;all&lt;/em&gt; our apps. Fully granted that not every app needs the same &lt;em&gt;degree&lt;/em&gt; of each of those, and moreover that there are a lot of ways to get to those goals. Still: speed and stability are &lt;em&gt;core&lt;/em&gt; user experience values. I don’t really care how you get at those goals, whether it’s with Rust, or Elixir or Clojure, or, yes, React with TypeScript or &lt;a href="https://flowtype.org"&gt;Flow&lt;/a&gt;. I &lt;em&gt;do&lt;/em&gt; think that Rust is, for the moment at least, uniquely positioned to add real value in this space because it gives screaming performance but with so many niceties we’re used to when writing languages like Python or Ruby and so much of the power you get in languages like OCaml or F♯.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; But at the end of the day, I think &lt;em&gt;all&lt;/em&gt; apps should focus much more on speed and stability than they do today. We have supercomputers in our pockets, and we’re often shipping apps that are slower and more finicky.&lt;/p&gt;
&lt;p&gt;But I have this dream of a world where apps aren’t needlessly power-hungry or memory-intensive, where every swipe and or click or scroll results in buttery-smooth responses. We won’t get there by saying, “You know, Facebook is doing &lt;em&gt;x&lt;/em&gt; so that’s good enough for me.”&lt;/p&gt;
&lt;p&gt;Of course every developer, and any given product shop or consultancy, is going to have to make decisions about which stacks it invests in. If you’re primarily shipping web applications, investing in Elixir and React with React Native for your apps is a very sensible move. Most of your clients’ native apps may not &lt;em&gt;need&lt;/em&gt; the degree of polished performance you might get from writing their iOS app in Swift and their Android app in Kotlin and the core in Rust (or even C++). That tradeoff is a &lt;em&gt;tradeoff&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But let’s remember that there is real value there, and that some apps &lt;em&gt;do&lt;/em&gt; deserve that investment. We should evaluate the tradeoffs at every turn, and our core considerations should enduringly include &lt;em&gt;speed and stability&lt;/em&gt;. Don’t dismiss Rust (or Swift, or F♯) out of hand.&lt;/p&gt;
&lt;p&gt;Equally importantly, we need to stop assuming that just because something is eating the world today means it’s also the future. Betting big on Flash in the mid-2000s wasn’t a &lt;em&gt;bad&lt;/em&gt; move by a long shot. But its massive popularity then wasn’t a good predictor for its future. That goes double, frankly, for projects coming out of Facebook or Google or similar: big companies like that have the resources to drop everything and use a new language, or a new tool, as it suits them. If you don’t believe me, look at the actual open-source records of both of those companies! What’s hot today is far more relevant to a consultancy than to a product shop. And in both cases, choosing tech suitable for the job at hand is more important yet.&lt;/p&gt;
&lt;p&gt;My friend gets that, for what it’s worth. He’s making the right moves for his business as the owner of a consultancy. I just want him—and lots of other people—to see where languages like Rust and Swift and F♯ might be worth considering. And speed and stability matter in a lot of places besides just compilers and VMs.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’m aware that React-Native ultimately binds down to native widgets. It’s still not quite the same.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;or, frankly, Ember or whatever else; React is great, but it is also overhyped.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Swift too, and honestly for a lot of things Swift is an easier experience for not &lt;em&gt;that&lt;/em&gt; much less performance than Rust. But as of today you &lt;em&gt;can’t&lt;/em&gt; ship core functionality in Swift for Android or Windows.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="JavaScript"></category><category term="Rust"></category><category term="Swift"></category><category term="F Sharp"></category><category term="software development"></category></entry><entry><title>Winning Slowly 5.05: “Faint Not”</title><link href="http://www.chriskrycho.com/2016/winning-slowly-5-05-faint-not.html" rel="alternate"></link><published>2016-10-04T08:17:00-04:00</published><updated>2016-10-04T08:17:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-10-04:/2016/winning-slowly-5-05-faint-not.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.winningslowly.org/5.05/"&gt;This&lt;/a&gt; is one of the most important episodes Stephen Carradini and I have ever published. We go after civil forfeiture &lt;em&gt;hard&lt;/em&gt;. Give it a listen!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.winningslowly.org/5.05/"&gt;Winning Slowly 5.05: “Faint Not”&lt;/a&gt;—Negative / Invisible / Legal (Organized): civil forfeiture and entrenched legal evil&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://www.winningslowly.org/5.05/"&gt;This&lt;/a&gt; is one of the most important episodes Stephen Carradini and I have ever published. We go after civil forfeiture &lt;em&gt;hard&lt;/em&gt;. Give it a listen!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.winningslowly.org/5.05/"&gt;Winning Slowly 5.05: “Faint Not”&lt;/a&gt;—Negative / Invisible / Legal (Organized): civil forfeiture and entrenched legal evil&lt;/p&gt;
</content><category term="podcasting"></category><category term="my writing elsewhere"></category><category term="links"></category></entry><entry><title>“Abi’s Processional”</title><link href="http://www.chriskrycho.com/2016/abis-processional.html" rel="alternate"></link><published>2016-10-04T07:31:00-04:00</published><updated>2016-10-04T07:31:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-10-04:/2016/abis-processional.html</id><summary type="html">&lt;p&gt;I don’t often get to compose anymore, but every once in a while I still have opportunities. Here’s &lt;a href="https://soundcloud.com/chriskrycho/abis-processional"&gt;the processional I wrote for my little sister’s wedding&lt;/a&gt;—a trio for cello, oboe, and piano.&lt;/p&gt;
&lt;p&gt;(Unfortunately, almost no one heard this, because it started raining—outdoor wedding—and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I don’t often get to compose anymore, but every once in a while I still have opportunities. Here’s &lt;a href="https://soundcloud.com/chriskrycho/abis-processional"&gt;the processional I wrote for my little sister’s wedding&lt;/a&gt;—a trio for cello, oboe, and piano.&lt;/p&gt;
&lt;p&gt;(Unfortunately, almost no one heard this, because it started raining—outdoor wedding—and the sound guys didn’t know to turn up the volume.)&lt;/p&gt;
&lt;iframe title="Abi&amp;#39;s Processional" style="width: 100%; max-height: 6.556em; padding-top: 1em; padding-bottom: 1em;" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/285984308&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;
&lt;/iframe&gt;
</content><category term="music"></category><category term="composed music"></category><category term="links"></category></entry><entry><title>Constant Evaluation</title><link href="http://www.chriskrycho.com/2016/constant-evaluation.html" rel="alternate"></link><published>2016-09-13T07:10:00-04:00</published><updated>2016-09-13T07:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-09-13:/2016/constant-evaluation.html</id><summary type="html">&lt;p&gt;I’m reading John Frame’s &lt;em&gt;The Doctrine of the Christian Life&lt;/em&gt;, and find a great deal to commend in it, but also some real head-scratchers. The same page, for example (287), includes both of these quotes—&lt;/p&gt;
&lt;p&gt;On rejecting mere traditionalism:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This [Paul’s example of self-sacrifice for evangelism] means …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I’m reading John Frame’s &lt;em&gt;The Doctrine of the Christian Life&lt;/em&gt;, and find a great deal to commend in it, but also some real head-scratchers. The same page, for example (287), includes both of these quotes—&lt;/p&gt;
&lt;p&gt;On rejecting mere traditionalism:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This [Paul’s example of self-sacrifice for evangelism] means that in our evangelistic methodology, and indeed in our worship (for that also has an evangelistic element, [1 Corinthians] 14:24–25), our goal must not be to please ourselves, but to bend and stretch, toa ccept discomfort and the trauma of change, in order to speak the Christian faith to the contemporary world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On the Fathers:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We have had much more time to study Scripture than did the early church fathers like Clement and Justin Martyr. And in some ways, I think, contemporary orthodox Reformed theology has a far deeper and more precise understanding of the gospel than did the church fathers. I say this contrary to those evangelicals who are joining Eastern Orthodox churches in order to return to the supposedly more profound teachings of the early church fathers. Although the Fathers did wonderful work in their day, standing heroically for the faith amid terrible oppressions, their writings were confused on many important points, such as the Trinity and justification by faith. (287)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first quote is an &lt;em&gt;excellent&lt;/em&gt; summary of the Christian obligation to continually reapply the testimony of Scripture to the present. The book is full of these kinds of enormously helpful bits; I have written far more ✓ than ✗ marks—i.e., many more affirmations than rejections—in this text.&lt;/p&gt;
&lt;p&gt;But that second quote makes me want to bang my head against the desk. When Frame waves his hand at “the Fathers” and declares “their writings” “confused on… the Trinity and justification by faith,” I am left saying: &lt;em&gt;Which Fathers?&lt;/em&gt; and, even more importantly, &lt;em&gt;Frame, where do you think we &lt;em&gt;got&lt;/em&gt; our doctrine of the Trinity, if not the Fathers?&lt;/em&gt; To be sure, there is plenty of variation in quality and reliability of the Fathers. Origen is a brilliant, fascinating hot mess of a theologian, for example, while Irenaeus, Hillary, Augustine, Athanasius, and others are no less sure or reliable than any major Reformed author. Moreover: reading early Reformed writers makes it very clear that &lt;em&gt;they&lt;/em&gt; thought the Fathers broadly reliable and helpful!&lt;/p&gt;
&lt;p&gt;Every author has strengths and weaknesses. Even the most helpful require &lt;em&gt;constant&lt;/em&gt; evaluation.&lt;/p&gt;
</content><category term="classwork"></category><category term="SEBTS"></category><category term="M.Div."></category><category term="reading"></category></entry><entry><title>32 Theses (and several more words) on Podcasting</title><link href="http://www.chriskrycho.com/2016/32-theses-and-several-more-words-on-podcasting.html" rel="alternate"></link><published>2016-08-09T10:30:00-04:00</published><updated>2016-08-09T10:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-08-09:/2016/32-theses-and-several-more-words-on-podcasting.html</id><summary type="html">&lt;p&gt;A month ago, Alan Jacobs asked about quality conservative Christian podcasts. &lt;a href="https://mereorthodoxy.com/theses-on-podcasting/"&gt;Here’s&lt;/a&gt; a big part of why there are so few (at Mere Orthodoxy):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a Christian in the world of podcasting—I have both a “two dudes talking” show (Winning Slowly) and also a “one dude talking with …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A month ago, Alan Jacobs asked about quality conservative Christian podcasts. &lt;a href="https://mereorthodoxy.com/theses-on-podcasting/"&gt;Here’s&lt;/a&gt; a big part of why there are so few (at Mere Orthodoxy):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a Christian in the world of podcasting—I have both a “two dudes talking” show (Winning Slowly) and also a “one dude talking with maybe a brief musical intro and outro” show (New Rustacean)—I found much to agree with, but also much to clarify and a few things to disagree with…&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;First, a set of theses on podcasting as a medium. Some of these are obvious; none are intended to be tendentious. Some of them warrant further explanation—for which, see below….&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After which, &lt;a href="https://mereorthodoxy.com/theses-on-podcasting/"&gt;32 theses (and another ~3,000 words)&lt;/a&gt; on the constraints and challenges of podcasting as a medium.&lt;/p&gt;
&lt;p&gt;Aside: the format of this particular piece is heavily inspired by Jacobs’ own &lt;a href="http://iasc-culture.org/THR/channels/Infernal_Machine/2015/03/79-theses-on-technology-for-disputation/"&gt;“79 Theses on Technology. For Disputation.”&lt;/a&gt;&lt;/p&gt;
</content><category term="podcasting"></category><category term="my writing elsewhere"></category><category term="links"></category></entry><entry><title>Winning Slowly Season 5</title><link href="http://www.chriskrycho.com/2016/winning-slowly-season-5.html" rel="alternate"></link><published>2016-08-09T07:30:00-04:00</published><updated>2016-08-09T07:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-08-09:/2016/winning-slowly-season-5.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Up the ante&lt;/em&gt;, you say? Sure, we’ll tackle the small, easy problem of &lt;em&gt;systemic force and individual agency&lt;/em&gt; this season on &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.winningslowly.org/5.01/"&gt;&lt;strong&gt;5.01: A Ph.D.-Level Math Problem&lt;/strong&gt;&lt;/a&gt;—Structures and systems, agency and individuals: three axes (and a sub-axis) for thinking about the world we live …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Up the ante&lt;/em&gt;, you say? Sure, we’ll tackle the small, easy problem of &lt;em&gt;systemic force and individual agency&lt;/em&gt; this season on &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.winningslowly.org/5.01/"&gt;&lt;strong&gt;5.01: A Ph.D.-Level Math Problem&lt;/strong&gt;&lt;/a&gt;—Structures and systems, agency and individuals: three axes (and a sub-axis) for thinking about the world we live in.&lt;/p&gt;
&lt;p&gt;We introduce our system for thinking about the “structure/agency” or “systems and individuals” problem: how do the systems and structures of our lives shape us? How do we shape them? How free are we, and where are the places where more freedom is good, and the places where it might actually be bad? How do we confront the structural issues we face, or strengthen and preserve the good systems we do have in place?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://www.winningslowly.org/5.01/"&gt;Listen to the whole thing!&lt;/a&gt; And then &lt;a href="mailto:hello@winningslowly.org?subject=5.01:%20A%20Ph.D.-Level%20Math%20Problem"&gt;tell us&lt;/a&gt; what you think.&lt;/p&gt;
</content><category term="podcasting"></category><category term="links"></category></entry><entry><title>escape modernity</title><link href="http://www.chriskrycho.com/2016/escape-modernity.html" rel="alternate"></link><published>2016-07-27T08:56:00-04:00</published><updated>2016-07-27T08:56:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-07-27:/2016/escape-modernity.html</id><summary type="html">&lt;div class="line-block"&gt;struggle as i may&lt;br /&gt;
i cannot escape my&lt;br /&gt;
modernity&lt;br /&gt;
for even the attempt&lt;br /&gt;
is but another symptom&lt;/div&gt;
</summary><content type="html">&lt;div class="line-block"&gt;struggle as i may&lt;br /&gt;
i cannot escape my&lt;br /&gt;
modernity&lt;br /&gt;
for even the attempt&lt;br /&gt;
is but another symptom&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>Misreading Tolkien and Misreading Scripture: Responding to O’Keefe and Reno</title><link href="http://www.chriskrycho.com/2016/misreading-tolkien-and-misreading-scripture-responding-to-okeefe-and-reno.html" rel="alternate"></link><published>2016-07-25T10:00:00-04:00</published><updated>2016-07-25T10:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-07-25:/2016/misreading-tolkien-and-misreading-scripture-responding-to-okeefe-and-reno.html</id><summary type="html">&lt;p&gt;It turns out the fastest way to get me to write &lt;a href="https://mereorthodoxy.com/misreading-tolkien-hermeneutics-allegory-lord-rings/"&gt;1,700 words on hermeneutics&lt;/a&gt; is to misread Tolkien.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am reading John J. O’Keefe and R. R. Reno’s Sanctified Vision for the independent study on hermeneutics and theological method I am doing this summer. I have …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;It turns out the fastest way to get me to write &lt;a href="https://mereorthodoxy.com/misreading-tolkien-hermeneutics-allegory-lord-rings/"&gt;1,700 words on hermeneutics&lt;/a&gt; is to misread Tolkien.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am reading John J. O’Keefe and R. R. Reno’s Sanctified Vision for the independent study on hermeneutics and theological method I am doing this summer. I have found the book fairly helpful overall, and think the authors are right to commend the church Fathers as models for Biblical interpretation in many ways. The authors do good (albeit somewhat tendentious) work arguing for whole-Bible/“intensive reading” strategies and the validity of typology as part of theological method. When they come to allegory, though, their argument almost immediately goes off the rails with a deeply misguided interpretation of The Lord of the Rings….&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can read the rest &lt;a href="https://mereorthodoxy.com/misreading-tolkien-hermeneutics-allegory-lord-rings/"&gt;over at Mere Orthodoxy&lt;/a&gt;.&lt;/p&gt;
</content><category term="links"></category><category term="my writing elsewhere"></category></entry><entry><title>Rust and Swift (xviii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xviii.html" rel="alternate"></link><published>2016-07-24T15:10:00-04:00</published><updated>2016-07-24T15:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-07-24:/2016/rust-and-swift-xviii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="part-i-ownership-semantics-vs.reference-counting" class="level2"&gt;
&lt;h2&gt;Part I: Ownership Semantics vs. Reference Counting&lt;/h2&gt;
&lt;p&gt;Perhaps unsurprisingly, the Swift book follows on from its discussion of initialization with a discussion of deinitialization, and here the differences between Rust and Swift are substantial, but (as has so often been the case) so are the analogies.&lt;/p&gt;
&lt;p&gt;In Rust, memory is, by default, stack-allocated and -deallocated, but with a very impressive system for tracking the lifetime of that data and allowing its to be moved from one function to another. The Rust compiler tracks the &lt;em&gt;ownership&lt;/em&gt; of every given item in the program as it is passed from one function to another, allowing other parts of the program to “borrow” the data safely, until a given piece of data goes out of scope entirely. At that point, Rust runs its destructors automatically. As part of its system for managing memory safely, Rust also tracks where and when a program attempts to access any given piece of data (whether directly or via reference), and will refuse to compile if you try to reference data in a place where it has already gone out of scope and been cleaned up (“dropped,” in Rust-speak).&lt;/p&gt;
&lt;p&gt;If this was a bit fuzzy, don’t worry: there’s a lot to say here. It’s arguably the most distinctive feature of the language, and it’s also the main thing that tends to trip up newcomers to the language. If you’re interested in further material on the topic, my own most succinct treatment of it is in &lt;a href="http://www.newrustacean.com/show_notes/e002/index.html" title="e002: Something borrowed, something... moved?"&gt;an early episode&lt;/a&gt; of New Rustacean, my Rust developer podcast, and &lt;a href="https://doc.rust-lang.org/book/ownership.html"&gt;the official documentation&lt;/a&gt; is &lt;em&gt;very&lt;/em&gt; good. For now, suffice it to say: Rust does extremely rigorous &lt;em&gt;compile-time&lt;/em&gt; checks to let you do C or C++-style memory management, but with absolute guarantees that you won’t have e.g. use-after-free bugs, with a default to handling everything on the stack.&lt;/p&gt;
&lt;p&gt;It is of course impossible to handle &lt;em&gt;everything&lt;/em&gt; on the stack, so there are heap-allocated types (e.g. vectors, a dynamically sized array-like type), which are fundamentally reference (or pointer) types. But those follow the same basic rules: Rust tracks the &lt;em&gt;pointers&lt;/em&gt; throughout their uses, and when they go out of scope, Rust automatically tears down not only the pointer but also the data behind it. There are times, though, when you can’t comply with Rust’s normal rules for handling multiple-access to the same data. For those situations, it also supplies some “smart pointer” container types, &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;Arc&lt;/code&gt;, the &lt;em&gt;reference-counted&lt;/em&gt; (non-thread-safe) and &lt;em&gt;atomically reference-counted&lt;/em&gt; (thread-safe) types. Both types just wrap up a type that you intend to put on the heap with reference-counters, which increment and decrement as various pieces of a program get access to them. Note that, unlike the compiler-level, &lt;em&gt;compile-time&lt;/em&gt; checks mentioned earlier, these are &lt;em&gt;run-time&lt;/em&gt; counts and they therefore incur a small but real runtime performance penalty. (The distinctions between the two types have to do with how they guarantee their memory safety and what kinds of a guarantees are required for cross-thread safety, and they’re important for writing Rust but not so important for this comparison, so I’ll leave them aside.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In Swift, all class instances (which are pass-by-reference types) are tracked with &lt;em&gt;automatic reference counting&lt;/em&gt; and cleaned up automatically when there are no more references to them. Don’t confuse Rust’s “&lt;em&gt;atomically&lt;/em&gt; reference-counted” type with Swift’s “&lt;em&gt;automatically&lt;/em&gt; reference-counted” type. Unlike Rust’s behavior in having everything checked at compile-time, reference counting is a run-time check in Swift, just as it is with the &lt;code&gt;Rc&lt;/code&gt; and &lt;code&gt;Arc&lt;/code&gt; types in Rust.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; But it happens for all reference types all the time in Swift, not just when specified manually as in Rust. (Value types seem to be &lt;em&gt;always&lt;/em&gt; passed by value, though the compiler has some smarts about that so it doesn’t get insanely expensive.) It’s &lt;em&gt;automatic&lt;/em&gt; in that the compiler and runtime handle it “behind the scenes” from the developer’s perspective.&lt;/p&gt;
&lt;p&gt;Swift’s approach here isn’t quite the same as having a full-on garbage-collected runtime like you’d see in Java, C&lt;sup&gt;#&lt;/sup&gt;, Python, Ruby, JavaScript, etc. (and so doesn’t have the performance issues those often can). But it also isn’t like Rust’s default of having &lt;em&gt;no&lt;/em&gt; runtime cost. It’s somewhere in the middle, with a goal of very good performance but good developer ergonomics. I think it achieves that latter goal: for the most part, it means that you don’t have to think about memory allocation and deallocation explicitly. Certainly there are times when you have to think about how your program handles those issues, but neither is it right up in your face like it is in Rust,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; nor does it come with the costs of a heavier runtime (from startup, to GC pauses, to non-deterministic performance characteristics).&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To make it concrete, the following snippets do &lt;em&gt;basically&lt;/em&gt; the same thing—but note that the reference counting is explicit in Rust. We’ll start with Rust, doing it the normal way:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct WouldBeJedi {
    name: String,
    rank: u8,
    description: String,
}

impl WouldBeJedi {
    fn new(name: &amp;amp;str, rank: u8, description: &amp;amp;str) -&amp;gt; WouldBeJedi {
        WouldBeJedi {
            name: name.to_string(),
            rank: rank,
            description: description.to_string()
        }
    }
}

fn main() {
    let trainee = WouldBeJedi::new(
        &amp;quot;Zayne Carrick&amp;quot;, 1, &amp;quot;not very competent, but still a great hero&amp;quot;);

    // When calling the function, we pass it a reference, and it
    // &amp;quot;borrows&amp;quot; access to the data. But the validity of that access
    // is checked at compile time. `main()` keeps the &amp;quot;ownership&amp;quot;
    // of the data.
    describe(&amp;amp;trainee);

    // When `main` ends, nothing owns the data anymore, so
    // Rust cleans it up. If something were still borrowing the
    // data (say, if we&amp;#39;d passed a reference into another thread),
    // this would actually be a compile error, because references
    // have to be guaranteed to live as long as the thing they
    // point back to. Rust has tools for managing that, as well,
    // its &amp;quot;lifetimes&amp;quot;, but we can leave them aside for this example.
}

fn describe(trainee: &amp;amp;WouldBeJedi) {
    // Rust checks at compile time to make sure there are no
    // mutable &amp;quot;borrows&amp;quot; of the data, and therefore knows
    // that it is safe to reference the data here, because it can
    // be *sure* nothing will change it at the same time.

    // Under the covers, this macro will actually call a
    // function with the data we pass it, so Rust actually checks
    // the ownership and borrowing state here, too. Again, all
    // at compile time, and therefore with no runtime penalty.
    println!(&amp;quot;{} (rank {}) is {}.&amp;quot;,
             trainee.name,
             trainee.rank,
             trainee.description);

    // When we exit the function, Rust notes that it is no
    // longer &amp;quot;borrowing&amp;quot; the data.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here’s the Swift code—note as well that we use a &lt;code&gt;class&lt;/code&gt; not a &lt;code&gt;struct&lt;/code&gt; here:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class WouldBeJedi {
    let name: String
    let rank: UInt8
    let description: String

    init(name: String, rank: UInt8, description: String) {
        self.name = name
        self.rank = rank
        self.description = description
    }
}

func main() {
    let aTrainee = WouldBeJedi(
        name: &amp;quot;Zayne Carrick&amp;quot;,
        rank: 1,
        description: &amp;quot;not very competent, but a great hero&amp;quot;)

    // When calling the function, the reference count goes up
    // here, too, but it&amp;#39;s implicit, rather than explicit.
    describe(aTrainee)

    // The implicit reference count Swift maintains for `aTrainee`
    // will go from 1 to 0 here, and Swift will do its cleanup of the
    // object data.
}

func describe(_ trainee: WouldBeJedi) {
    // When we enter this function, Swift bumps the reference
    // count, from 1 to 2. Both `main` and `describe` now have a
    // reference to the data.

    // No need for the unwrapping or any of that; Swift handles it
    // all automatically... thus the name of the technology!
    print(&amp;quot;\(trainee.name) (rank \(trainee.rank)) is \(trainee.description).&amp;quot;)

    // When we exit the function, Swift bumps the reference count
    // back down to 1 automatically.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, here is the (much longer, because all the reference counting is done explicitly) reference-counted Rust version:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use std::rc::Rc;

pub struct WouldBeJedi {
    name: String,
    rank: u8,
    description: String,
}

fn main() {
    let trainee = WouldBeJedi {
        name: &amp;quot;Zayne Carrick&amp;quot;.to_string(),
        rank: 1,
        description: &amp;quot;not very competent, but a great hero&amp;quot;.to_string()
    };
    let wrapped_trainee = Rc::new(trainee);

    // Start by calling `clone()` to get a *reference* to the
    // trainee. This increases the reference count by one.
    let ref_trainee = wrapped_trainee.clone();
    // Then pass the reference to the `describe()` function.
    // Note that we *move* the reference to the function, so
    // once the function returns, the reference will go out
    // of scope, and the reference count will decrement.
    describe(ref_trainee);

    // When `main` ends, several things will happen in order:
    // 1. The reference count on the `wrapped_trainee` will
    //    go to zero. As a result, the `wrapped_trainee`
    //    pointer---the `Rc` type we created---will get
    //    cleaned up.
    // 2. Once `wrapped_trainee` has been cleaned up, Rust
    //    will notice that there are no more references
    //    anywhere to `trainee` and clean it up as well.
    //    (More on this below.)
}

fn describe(trainee: Rc&amp;lt;WouldBeJedi&amp;gt;) {
    // We now have a *reference* to the underlying data, and
    // therefore can freely access the underlying data.
    println!(&amp;quot;{} (rank {}) is {}.&amp;quot;,
             trainee.name,
             trainee.rank,
             trainee.description);


    // When we exit the function, Rust destroys this *owned*
    // clone of the reference, and that bumps the reference
    // count back down to 1 automatically.
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if we strip out all the explanatory comments and details, the &lt;em&gt;normal&lt;/em&gt; versions of the Rust and Swift code are pretty similar.&lt;/p&gt;
&lt;p&gt;Rust—&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct WouldBeJedi {
    name: String,
    rank: u8,
    description: String,
}

impl WouldBeJedi {
    fn new(name: &amp;amp;str, rank: u8, description: &amp;amp;str) -&amp;gt; WouldBeJedi {
        WouldBeJedi {
            name: name.to_string(),
            rank: rank,
            description: description.to_string()
        }
    }
}

fn main() {
    let trainee = WouldBeJedi::new(
        &amp;quot;Zayne Carrick&amp;quot;,
        1,
        &amp;quot;not very competent, but still a great hero&amp;quot;);

    describe(&amp;amp;trainee);
}

fn describe(trainee: &amp;amp;WouldBeJedi) {
    println!(&amp;quot;{} (rank {}) is {}.&amp;quot;,
             trainee.name,
             trainee.rank,
             trainee.description);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swift (as usual, is &lt;em&gt;slightly&lt;/em&gt; briefer than Rust)—&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class WouldBeJedi {
    let name: String
    let rank: UInt8
    let description: String

    init(name: String, rank: UInt8, description: String) {
        self.name = name
        self.rank = rank
        self.description = description
    }
}

func main() {
    let aTrainee = WouldBeJedi(
        name: &amp;quot;Zayne Carrick&amp;quot;,
        rank: 1,
        description: &amp;quot;not very competent, but a great hero&amp;quot;)

    describe(aTrainee)
}

func describe(_ trainee: WouldBeJedi) {
    print(&amp;quot;\(trainee.name) (rank \(trainee.rank)) is \(trainee.description).&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that in both of these implementations, all the actual cleanup of the memory is handled behind the scenes—this feels much more like writing Python than writing C, &lt;em&gt;especially&lt;/em&gt; for complex data types. Not least because this same kind of nice cleanup can happen for complex, heap-allocated types like dynamically-sized vectors/arrays, etc. Both languages just manage it automatically. (The same is true of modern C++, for the most part, but it has a more complicated story there because of its relationship with C, where &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; and friends run rampant and are quite necessary for writing a lot of kinds of code.) Most of the time, when you’re done using data, you just &lt;em&gt;stop using it&lt;/em&gt;, and both Rust and Swift will clean it up for you. The feel of using either language is fairly similar, though the underlying semantics are quite different.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="part-2-deconstructiondeinitialization" class="level2"&gt;
&lt;h2&gt;Part 2: Deconstruction/Deinitialization&lt;/h2&gt;
&lt;p&gt;Both Rust and Swift recognize that, the ordinary case notwithstanding, there are many times when you &lt;em&gt;do&lt;/em&gt; need to run some cleanup as part of tearing down an object. For example, if you had an open database connection attached to an object, you should return it to the collection pool before finishing tear-down of the object.&lt;/p&gt;
&lt;p&gt;In Rust, this is accomplished by implementing the &lt;code&gt;Drop&lt;/code&gt; trait and supplying the requisite &lt;code&gt;drop&lt;/code&gt; method. Imagine we had defined a &lt;code&gt;Jedi&lt;/code&gt; type, with a bunch of details about the Jedi’s lightsaber (including whether the Jedi even &lt;em&gt;has&lt;/em&gt; a lightsaber. We know from the &lt;em&gt;Star Wars&lt;/em&gt; movies that lightsabers turn off automatically when the Jedi dies, or even just drops it for that matter. We can implement &lt;em&gt;all&lt;/em&gt; of this in Rust using just the &lt;code&gt;Drop&lt;/code&gt; trait. Here’s a pretty full example.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; (Note that both of these implementations draw heavily on material I covered in &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;previous posts&lt;/a&gt;.)&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;#[derive(Debug)]
enum Color {
    Red,
    Blue,
    Green,
    Purple,
    Yellow
}

enum SaberState {
    On,
    Off,
}

struct Lightsaber {
    color: Color,
    blades: u8,
    state: SaberState
}

impl Lightsaber {
    pub fn new(color: Color, blades: u8) -&amp;gt; Lightsaber {
        if blades &amp;gt; 2 {
            panic!(&amp;quot;That&amp;#39;s just silly. Looking at you, Kylo.&amp;quot;);
        }

        Lightsaber { color: color, blades: blades, state: SaberState::Off }
    }

    pub fn on(&amp;amp;mut self) {
        self.state = SaberState::On;
    }

    pub fn off(&amp;amp;mut self) {
        self.state = SaberState::Off;
    }
}

struct WouldBeJedi {
    name: String,
    lightsaber: Option&amp;lt;Lightsaber&amp;gt;,
}

impl WouldBeJedi {
    pub fn new(name: &amp;amp;str, lightsaber: Option&amp;lt;Lightsaber&amp;gt;) -&amp;gt; WouldBeJedi {
        WouldBeJedi { name: name.to_string(), lightsaber: lightsaber }
    }

    pub fn describe(&amp;amp;self) {
        let lightsaber = match self.lightsaber {
            Some(ref saber) =&amp;gt;
                format!(&amp;quot;a {:?} lightsaber with {:} blades.&amp;quot;, saber.color, saber.blades),
            None =&amp;gt; &amp;quot;no lightsaber.&amp;quot;.to_string()
        };

        println!(&amp;quot;{} has {}&amp;quot;, self.name, lightsaber)
    }
}

// Here&amp;#39;s the actually important bit.
impl Drop for WouldBeJedi {
    fn drop(&amp;amp;mut self) {
        if let Some(ref mut lightsaber) = self.lightsaber {
            lightsaber.off();
        }
    }
}


fn main() {
    let saber = Lightsaber::new(Color::Yellow, 1);
    let a_jedi = WouldBeJedi::new(&amp;quot;Zayne Carrick&amp;quot;, Some(saber));
    a_jedi.describe();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do much the same in Swift, using its deinitializers, which are fairly analogous to (but much simpler than) &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvii.html"&gt;its initializers&lt;/a&gt;, and fulfill the same role as Rust’s &lt;code&gt;Drop&lt;/code&gt; trait and &lt;code&gt;drop()&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;enum Color {
    case red, blue, green, purple, yellow
}

enum SaberState {
    case on, off
}

struct Lightsaber {
    let color: Color
    let blades: UInt8
    var state: SaberState = .off

    init?(color: Color, blades: UInt8) {
        if blades &amp;gt; 2 {
            print(&amp;quot;That&amp;#39;s just silly. Looking at you, Kylo.&amp;quot;)
            return nil
        }

        self.color = color
        self.blades = blades
    }

    mutating func on() {
        state = .on
    }

    mutating func off() {
        state = .off
    }
}

class WouldBeJedi {
    let name: String
    var lightsaber: Lightsaber?

    init(name: String, lightsaber: Lightsaber?) {
        self.name = name
        self.lightsaber = lightsaber
    }

    deinit {
        self.lightsaber?.off()
    }

    func describe() {
        let saberDescription: String
        if let saber = self.lightsaber {
            saberDescription = &amp;quot;a \(saber.color) lightsaber with \(saber.blades) blades.&amp;quot;
        } else {
            saberDescription = &amp;quot;no lightsaber.&amp;quot;
        }

        print(&amp;quot;\(name) has \(saberDescription)&amp;quot;)
    }
}

func main() {
    let saber = Lightsaber(color: .yellow, blades: 1)
    let aJedi = WouldBeJedi(name: &amp;quot;Zayne Carrick&amp;quot;, lightsaber: saber)
    aJedi.describe();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a bit briefer, but that’s mostly down to Swift’s shorthand for optionals (the &lt;code&gt;?&lt;/code&gt; operator), which we’ll get to in a future post.&lt;/p&gt;
&lt;p&gt;Curiously, &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt; types &lt;em&gt;cannot&lt;/em&gt; have deinitializers in Swift. I expect this has something to do with their being value types rather than reference types, but the book offers no comment. (If a reader knows the answer, I’d welcome clarification.)&lt;/p&gt;
&lt;p&gt;Much as in the discussion of of initializers, the usual patterns with Rust and Swift’s approach come into play. Rust opts to build the pattern on the same basic language machinery (traits). Swift uses a bit of syntactical sugar dedicated to the purpose. It’s undeniable that the Swift is a bit briefer.&lt;/p&gt;
&lt;p&gt;However, there are a couple upsides to Rust’s approach. First, it is applicable on &lt;em&gt;all&lt;/em&gt; types, where Swift’s applies only to classes. Second, there is no additional syntax to remember. &lt;code&gt;Drop&lt;/code&gt; is just a trait like any other, and &lt;code&gt;drop&lt;/code&gt; a method like any other. Third, then, this means that you can run it explicitly elsewhere if you need to, and as a result you can define whatever kind of custom deconstruction behavior you might need. If we’d created &lt;code&gt;a_jedi&lt;/code&gt; above in Rust, we could simply write &lt;code&gt;a_jedi.drop()&lt;/code&gt; anywhere:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn prove_incompetent(a_jedi: WouldBeJedi) {
    // make some series of grievous mistakes which mean
    // you&amp;#39;re no longer able to be a Jedi and as such,
    // among other things, lose your lightsaber...
    a_jedi.drop();
    // other stuff
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or (going a bit more abstract) we could define a &lt;code&gt;daring_derring_do()&lt;/code&gt; method which called &lt;code&gt;drop()&lt;/code&gt; itself:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;impl WouldBeJedi {
    pub fn daring_derring_do(self) {
        // do some other operation, like freeing slaves from
        // a secret colony of slavers. But if it fails...
        self.drop();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, really, define &lt;em&gt;any&lt;/em&gt; behavior which culminated in a &lt;code&gt;drop()&lt;/code&gt; call. That’s extremely powerful, and it’s the upside that comes with its just being a trait whose behavior we have to define ourselves.&lt;/p&gt;
&lt;p&gt;That takes us back to one of the fundamental differences in design between the two languages. Rust goes out of its way to leave power in the hands of the user, at the cost of requiring the user to be a bit more explicit. Swift prioritizes brevity and productivity, but it gets there by taking some of the power out of the hands of the developer. Neither of these is wrong, &lt;em&gt;per se&lt;/em&gt;. They’re just aiming for (and in this case, I think, fairly successfully landing in) somewhat different spots on a spectrum of tradeoffs.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; More on initializers!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I did, however, cover them &lt;a href="http://www.newrustacean.com/show_notes/e015/index.html" title="e015: Not dumb pointers"&gt;quite recently&lt;/a&gt; on my podcast. Yes, this &lt;em&gt;is&lt;/em&gt; another shameless plug.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Mostly, anyway. I believe the Swift compiler also does some degree of static analysis similar to that done by Rust—though to a &lt;em&gt;much&lt;/em&gt; lesser extent and, speaking purely descriptively, much less rigorously (it just has different goals). Swift then uses that analysis to handle things at compile time rather than via reference counts if it’s able to determine that it can do so.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;We could, if we so desired, get this same basic behavior in Rust. We can easily imagine a world in which every type was automatically wrapped in &lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt;, and in fact, I’d be very interested to see just such a language—something which was only a thin layer over Rust, keeping all its semantics but wrapping some or all non-stack-allocated types in &lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt; as appropriate. (Something like &lt;a href="http://manishearth.github.io/blog/2015/09/01/designing-a-gc-in-rust/"&gt;this&lt;/a&gt;, but done behind the scenes rather than manually opted into.) You’d incur some performance coasts, but with the benefit that you’d have an &lt;em&gt;extremely&lt;/em&gt; ergonomic, practical, ML-descended language quite appropriate for slightly higher-level tasks, and without the radical shift required by switching to a lazily-evaluated, purely functional language like Haskell.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Notably, those tradeoffs are often entirely worth it, and high-performance VMs have astoundingly good characteristics in many ways. The JVM, the CLR, and all the JavaScript VMs have astonishingly excellent performance at this point.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;I &lt;em&gt;might&lt;/em&gt; have gotten slightly carried away in the details here. I’m just a little bit of a nerd.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>A New Schedule</title><link href="http://www.chriskrycho.com/2016/a-new-schedule.html" rel="alternate"></link><published>2016-07-16T22:10:00-04:00</published><updated>2016-07-18T11:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-07-16:/2016/a-new-schedule.html</id><summary type="html">&lt;p&gt;I tried something this week; we will see if it sticks. In the aim of being &lt;em&gt;much&lt;/em&gt; more productive with my time, and with the idea that I hit a minimum of 40 hours a week between school and work,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I made the following changes:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I embraced a weekly …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I tried something this week; we will see if it sticks. In the aim of being &lt;em&gt;much&lt;/em&gt; more productive with my time, and with the idea that I hit a minimum of 40 hours a week between school and work,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I made the following changes:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I embraced a weekly schedule, where each week day includes:
&lt;ul&gt;
&lt;li&gt;the time I get up, and a goal for how long it takes me to go from when my alarm goes off to when I have breakfast made for Jaimie and me&lt;/li&gt;
&lt;li&gt;half an hour of Bible reading and devotions&lt;/li&gt;
&lt;li&gt;five minutes to read the news&lt;/li&gt;
&lt;li&gt;five minutes to plan my day&lt;/li&gt;
&lt;li&gt;two hours of reading and writing for school&lt;/li&gt;
&lt;li&gt;six hours of software development work for Olo&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a specific workout in my self-designed training plan for the &lt;a href="http://cityofoaksmarathon.com"&gt;half marathon&lt;/a&gt; I am running this fall&lt;/li&gt;
&lt;li&gt;an hour dedicated to creative projects I am working on—I’ll fill this with things like writing blog posts, prepping New Rustacean episodes, recording and editing Winning Slowly, and working on building a modern iOS and macOS app&lt;/li&gt;
&lt;li&gt;roughly 90 minutes devoted entirely to spending time with my family, over dinner and afterward until our girls go to bed&lt;/li&gt;
&lt;li&gt;about two hours freely available—this varies enormously: it might include more of those creative endeavors, it might be just hanging out with Jaimie (watching &lt;em&gt;The Flash&lt;/em&gt; or something) for a few hours, it might be spending time with friends we have over for dinner and time afterward, etc.&lt;/li&gt;
&lt;li&gt;sleep 7–7.5 hours every single night—this is my sweet spot, so hitting it makes a big difference in being able to hit all those other marks throughout the day&lt;/li&gt;
&lt;li&gt;a lot of small spaces throughout the day during my &lt;a href="https://en.m.wikipedia.org/wiki/Pomodoro_Technique"&gt;pomodoro&lt;/a&gt; breaks which I use for other reading (especially news, RSS, etc.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I cut nearly all social media: Facebook, Twitter, Slack, and email all receive drastically lower amounts of time now.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Facebook:&lt;/strong&gt; I now check once a week. I may post news stories to it, but I am basically treating it as a “write-only” medium—posting content to it but not interacting there. (I find interactions there to have a &lt;em&gt;very&lt;/em&gt; low ratio of value to time spent.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Twitter:&lt;/strong&gt; I now check once a day, for no more than five minutes. It is incredibly easy to get sucked into reading my Twitter feed at great length, and far more difficult to conclude that using my time that way is remotely valuable for my goals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slack:&lt;/strong&gt; I now use in dedicated blocks of time. I get very good value out of Slack:
&lt;ul&gt;
&lt;li&gt;for professional use, as we use it to coordinate our work at Olo, and it’s very handy for quick interactions for a distributed team&lt;/li&gt;
&lt;li&gt;for side projects: Stephen and I use it to coordinate and plan for &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt;, and I also provide a fair bit of input and discussion for &lt;a href="https://mereorthodoxy.com"&gt;Mere Orthodoxy&lt;/a&gt;, as well as occasionally write there (you may see something of that sort this very week, in fact).&lt;/li&gt;
&lt;li&gt;for personal use, as a virtual water cooler with a bunch of other developers in one team, and with a group of Christians in tech in another, which is &lt;em&gt;very&lt;/em&gt; helpful for staying sane while working at home&lt;/li&gt;
&lt;/ul&gt;
All that notwithstanding, Slack can also be a huge time-sink and distraction, so I limit the blocks I use it, and try to be effective with that time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; I now have closed much of the day, and only check at intervals. Especially with the way we get automated emails for various kinds of error reporting, issue tracking, and so on at work, having my mail up all day is a quick path to constant interruption. (Further minimizing notifications from email will help even more on this.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I have &lt;em&gt;started&lt;/em&gt; thinking about how I want to treat my time on the weekends, as well: dedicated blocks of time with family, for side work I’m doing a little of, for those creative side projects, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There’s a lot there, and I’ve only been at it one week. So far, however, I like it, and it’s felt like something I can sustain effectively going forward. A few things will have to be tweaked a bit when I’m in class proper in the fall, not just doing an independent study. But the main routine is very good and very helpful so far, and I intend to stick with it.&lt;/p&gt;
&lt;p&gt;A few other other observation on the changes themselves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They &lt;em&gt;do&lt;/em&gt; require a lot of discipline to stick with over the course of the week.&lt;/li&gt;
&lt;li&gt;This was most helpful because I did take that planning time each day and set specific tasks I wanted to accomplish in that time.&lt;/li&gt;
&lt;li&gt;I didn’t quite pull it off all the way; some schedule surprises Thursday and Friday threw it off. I did still get done basically everything I wanted to this week, though!&lt;/li&gt;
&lt;li&gt;I also didn’t manage that full hour-long creative block every day. I managed about 30–45 minutes most days, because I found myself craving some non-thinking time right after wrapping up work. I’ll need to sort that out more as I go.&lt;/li&gt;
&lt;li&gt;I suspect that making this an actual habit will yield huge dividends over time, but it’s going to take a while to make it &lt;em&gt;stick&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="background" class="level2"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;So, &lt;em&gt;why&lt;/em&gt; did I do all of that?&lt;/p&gt;
&lt;p&gt;Over the past few months I have been feeling, increasingly keenly, the amount I have to get done (work, school, side projects like &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt; and &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt; and a few more simmering as well) and the amount of time I have to do it (no more than anyone else). I have also been feeling the effects of too much “multitasking,” which I increasingly recognize along with everyone else is impossible. If I am jumping back and forth between some kind of work (writing software, reading, or writing) and other activities like email, Slack, or Twitter, I simply do not get as much done. But I &lt;em&gt;want&lt;/em&gt; to.&lt;/p&gt;
&lt;p&gt;There is a trap of thinking that productivity is the most important thing in the world. It is very American. I understand the temptation, but I do not generally indulge it.&lt;/p&gt;
&lt;p&gt;However, I &lt;em&gt;do&lt;/em&gt; care about accomplishing the particular things I want to do, and doing those as well as being a good husband and dad and a faithful member of our church means using my time as effectively as I can. This is not a new concern for me, and &lt;a href="http://www.chriskrycho.com/2014/boosting-my-productivity.html"&gt;as such I have written about it before&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A lot of the things I wrote about before I still do, and they work well for me. I still use OmniFocus to manage my tasks; I still use the pomodoro approach for keeping my brain moving throughout a whole day, and I still refuse to use email as a task manager (though I’ve been less disciplined about hitting “Inbox Zero” than I’d like of late). However, I found in the past few months that, while good, those habits aren’t quite &lt;em&gt;enough&lt;/em&gt; for everything I have going. They are necessary but insufficient.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If I can manage more on the school front over the weekends, that’s a win, but this breakdown is usually enough to get done everthing I need to.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Olo is a &lt;em&gt;fantastic&lt;/em&gt; employer. Among many other things Olo does exceptionally well, they were willing to hire me as a salaried, full-time type employee with full benefits, but working 30 hours instead of 40 while I’m finishing my M. Div. I have pro-rated pay and vacation (though, pro-rated vacation just means I have the same amount of functional time off as everyone else does), but otherwise am just like every other employee in terms of health-care, training availability, laptop, etc. Olo is the best place I’ve ever worked, bar none, and by a &lt;em&gt;large&lt;/em&gt; margin.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="productivity"></category></entry><entry><title>Consistency in User Interfaces</title><link href="http://www.chriskrycho.com/2016/consistency-in-user-interfaces.html" rel="alternate"></link><published>2016-07-15T10:37:00-04:00</published><updated>2016-07-15T10:37:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-07-15:/2016/consistency-in-user-interfaces.html</id><summary type="html">&lt;p&gt;People sometimes ask what I mean when I say Git’s UI is maddeningly inconsistent. Here’s a concrete example: what are the commands to list tags, branches, and stashes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag --list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow that up by noticing the difference in meaning for the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;People sometimes ask what I mean when I say Git’s UI is maddeningly inconsistent. Here’s a concrete example: what are the commands to list tags, branches, and stashes?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag --list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow that up by noticing the difference in meaning for the &lt;code&gt;-v&lt;/code&gt; flag between the commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch -v&lt;/code&gt;: &lt;em&gt;verbose&lt;/em&gt; mode: list the hash with an abbreviated commit summary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -v&lt;/code&gt;: &lt;em&gt;verify&lt;/em&gt; a tag against its GPG signature&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list -v&lt;/code&gt;: no-op, completely ignored&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is &lt;em&gt;disastrously&lt;/em&gt; bad user interface design, and there is literally no reason for it except that the developers of Git, led by Linus Torvalds, don’t care about designing for end users. They hack in whatever commands seem to make the most sense right here and right now, and call it good—and then imply or directly state that anyone who has a problem with it is stupid or lazy.&lt;/p&gt;
&lt;p&gt;But users are neither stupid nor lazy, and it is not stupid or lazy to want a system to behave in a a consistent way. Imagine if the buttons on you car’s media dashboard (a plastic one where the labels stay the same) did different things depending on whether you were in &lt;em&gt;Drive&lt;/em&gt; or &lt;em&gt;Reverse&lt;/em&gt;. Or if the light switches in your house behaved differently if you were using your toaster than if you were vacuuming, “on” and “off” labels notwithstanding.&lt;/p&gt;
&lt;p&gt;Good user interface design is no less applicable to a command-line utility than to a pretty iOS app. Don’t let Linus Torvalds or anyone else tell you otherwise.&lt;/p&gt;
</content><category term="git"></category><category term="software development"></category></entry><entry><title>Bullet Journal: Getting Started</title><link href="http://www.chriskrycho.com/2016/bullet-journal-getting-started.html" rel="alternate"></link><published>2016-07-06T06:45:00-04:00</published><updated>2016-07-06T06:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-07-06:/2016/bullet-journal-getting-started.html</id><summary type="html">&lt;p&gt;&lt;a href="http://bulletjournal.com/get-started/"&gt;Color me intrigued.&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a href="http://bulletjournal.com/get-started/"&gt;Color me intrigued.&lt;/a&gt;&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Rust and Swift (xvii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xvii.html" rel="alternate"></link><published>2016-06-30T23:00:00-04:00</published><updated>2016-07-04T10:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-30:/2016/rust-and-swift-xvii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In the &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvi.html"&gt;last part&lt;/a&gt;, I talked through the first chunk of the Swift book’s material on initializers. But it’s a long section, and I definitely didn’t cover everything. (I also got a few bits incorrect, and thankfully got great feedback to tighten it up from Twitter, so if you read it right after I posted it, you might skim back through and find the places where I added “&lt;strong&gt;Edit:&lt;/strong&gt; …”)&lt;/p&gt;
&lt;p&gt;Picking up from where we left on, then. Swift has a number of further initializer types, some of which map rather directly to the way initializers work in Rust, and some of which have no &lt;em&gt;direct&lt;/em&gt; analog at all.&lt;/p&gt;
&lt;p&gt;In the first category are the memberwise initializers Swift supplies by default for &lt;em&gt;all&lt;/em&gt; types. The most basic &lt;code&gt;init&lt;/code&gt; method just uses the names of the members of any given &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; type in Swift (as in the previous section, I’m going to use the types the Swift book uses for simplicity):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Size {
    var height = 0.0, width = 0.0
}

someSize = Size(height: 1.0, width: 2.0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This actually looks almost exactly like the normal way we construct types in Rust, where the same basic pattern would look like this:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Size {
    height: f64,
    width: f64,
}

some_size = Size { height: 1.0, width: 2.0 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two big differences between the languages here. The first, and most immediately apparent, is syntactical: in this case, Rust doesn’t have a function-call syntax for creating instances, and Swift does. Swift’s syntax is similar to one of the several C++ constructor patterns, or especially to Python’s initializer calls (if we made a point to be explicit about the keyword arguments):&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;class Size:
    height = 0.0
    width = 0.0
    def __init__(height, width):
        self.height = height
        self.width = width

someSize = Size(height=1.0, width=2.0)  # unnecessarily explicit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second, and more significant, is that the default, memberwise initializer in in Swift is only available &lt;em&gt;if you have not defined any other initializers&lt;/em&gt;. This is very, &lt;em&gt;very&lt;/em&gt; different from Rust, where there’s not really any such thing as a dedicated initializer—just methods. If we defined &lt;code&gt;Size::new&lt;/code&gt; or &lt;code&gt;Size::default&lt;/code&gt; or &lt;code&gt;Size::any_other_funky_initializer&lt;/code&gt;, it wouldn’t make a whit of difference in our ability to define the type this way.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; However, and this is important: because Rust has field-level public vs. private considerations, we cannot always do memberwise initialization of any given &lt;code&gt;struct&lt;/code&gt; type there, either; it is just that the reasons are different. So:&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;mod Shapes {
    struct Rectangle {
        pub height: f64,
        pub width: f64,
        area: f64,
    }
}

fn main() {
    // This won&amp;#39;t work: we haven&amp;#39;t constructed `Size::area`, and as we noted
    // last time, you cannot partially initialize a struct.
    let some_size = Shapes::Size { height: 1.0, width: 2.0 };

    // But neither will this, because `area` isn&amp;#39;t public:
    let some_other_size = Shapes::Size { height: 1.0, width: 2.0, area: 2.0 };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swift lets you refer to &lt;em&gt;other&lt;/em&gt; initializers on the same type (reinforcing that &lt;code&gt;init()&lt;/code&gt; is basically a kind of method, albeit one with some special rules and some special sugar). You do that by calling &lt;code&gt;self.init()&lt;/code&gt;, and—very importantly—you can only call it from within another initializer. No funky reinitializations or anything like that. The net result is that if you have a couple different variations on ways you might initialize a type, you still get the benefit of reusability; you don’t have to reimplement the same initialization function over and over again. Do whatever &lt;em&gt;additional&lt;/em&gt; setup is required in any given instance, and then call a common base initializer.&lt;/p&gt;
&lt;p&gt;With Rust, again, we just have methods, so you &lt;em&gt;could&lt;/em&gt; of course call them wherever you like. However, those methods are distinguished as being type-level or instance-level methods by their signatures, rather than by keyword. If the first argument is (some variant on) &lt;code&gt;self&lt;/code&gt;, it’s an instance method, otherwise, a type-level method. This eliminates any potential confusion around the initializers:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Foo {
    pub a: i32
}

impl Foo {
    pub fn new(a: i32) -&amp;gt; Foo {
        Foo { a: a }
    }

    pub fn bar(&amp;amp;self) {
        // yes:
        let another_foo = Foo::new();
        // no (won&amp;#39;t even compile):
        // let self_foo = self.new();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can (of course!) build up a type through multiple layers of methods which are useful to compose an instance &lt;em&gt;together&lt;/em&gt;. This is what the &lt;a href="http://doc.rust-lang.org/stable/style/ownership/builders.html"&gt;&lt;em&gt;builder pattern&lt;/em&gt;&lt;/a&gt; is all about. There are definitely times when you want to be able to tweak how your initialization plays out, and being able to do that without just passing in some hairy set of options in a special data type is nice.&lt;/p&gt;
&lt;p&gt;One other important qualification on the Swift initializers: those default, memberwise constructors you get for free? You &lt;em&gt;only&lt;/em&gt; get them for free if you don’t define your own initializers. (The closest analogy to this in Rust is that you’ll have issues if you try to both &lt;code&gt;#[derive(Default)]&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;impl Default for Foo&lt;/code&gt;, since both will give you an implementation of &lt;code&gt;Foo::default()&lt;/code&gt;.) You can get around this in Swift by using an &lt;em&gt;extension&lt;/em&gt;. We’ll come back to that in a future post.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; You can also get around it by supplying a parameter-less, body-less initializer in addition to any other initializers you supply, so: &lt;code&gt;init() {}&lt;/code&gt;. (This, frankly, seems like a hack to me. It’s a &lt;em&gt;useful&lt;/em&gt; hack, given the other constraints, but these kinds of things pile up.) Similarly, you can just reimplement member-wise initializers yourself if you have a reason to (say, if you’ve implemented any &lt;em&gt;others&lt;/em&gt; and therefore the defaults no longer exist).&lt;/p&gt;
&lt;p&gt;Now things take a turn into Swift-only territory &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html"&gt;again&lt;/a&gt; as we look at initialization in the context of inheritance. (As mentioned last time: Rust will eventually get inheritance-like behavior, but it’s coming much later, and is not going to be &lt;em&gt;exactly&lt;/em&gt; like classical inheritance. Rust &lt;em&gt;strongly&lt;/em&gt; favors composition over inheritance, where Swift &lt;em&gt;lightly&lt;/em&gt; does but still supports the latter.)&lt;/p&gt;
&lt;p&gt;Swift has two kinds of initializers for class initializers. One, a &lt;em&gt;designated initializer&lt;/em&gt;, is required; a designated initializer must fully initialize every property on a class, and call the superclass initializer (assuming there is one). These can be inherited, but again: they are required.&lt;/p&gt;
&lt;p&gt;There are also &lt;em&gt;convenience initializers&lt;/em&gt;, which provide variant APIs for setting up any given class. These (by definition, given what we said a moment ago) &lt;em&gt;must&lt;/em&gt; call a designated initializer along the way. These could be useful in a lot of different scenarios: setting up variants on the class (as in our temperature examples from before), doing alternate setup depending on initial conditions, etc.&lt;/p&gt;
&lt;p&gt;The only difference between the two syntactically is that &lt;em&gt;convenience&lt;/em&gt; initializers get the &lt;code&gt;convenience&lt;/code&gt; keyword in front of the &lt;code&gt;init&lt;/code&gt; declaration, so:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class Foo {
    var bar : Int
    let quux: String
    // designated
    init(_ bar: Int, _ quux: String) {
        self.bar = bar
        self.quux = quux
    }

    // A convenience method which only takes the string.
    convenience init(_ quux: String) {
        self.init(0, quux)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Swift book gives a set of rules about how these delegated and convenience initializers must behave. The short version is that convenience initializers (eventually) have to call a delegated initializer from &lt;em&gt;their own&lt;/em&gt; class, and designated initializers have to call a designated initializer from the &lt;em&gt;superclass&lt;/em&gt;. This is an implementation detail, though: from the perspective of a &lt;em&gt;user&lt;/em&gt; of the class, it doesn’t matter which initializer is called.&lt;/p&gt;
&lt;p&gt;The other important bit about Swift &lt;em&gt;class&lt;/em&gt; initialization is that it is a two-phase process, which you might think of as “primary initialization” and “customization.” The primary initialization sets up the properties on a class &lt;em&gt;as defined by the class which introduced them&lt;/em&gt;. The following sample should illustrate how it plays out:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class Foo {
    let plainTruth = &amp;quot;Doug Adams was good at what he did.&amp;quot;
    let answer = 0

    init() {
        baz = answer / 2
    }
}

// Bar inherits from Foo
class Bar: Foo {
    let question = &amp;quot;What is the meaning of life, the universe, and everything?&amp;quot;
    let answer = 42

    init() {
        super.init()  // calls Foo.init()
    }

    convenience init(newQuestion question: String, newAnswer answer: Int) {
        self.question = question
        self.answer = answer
        self.init()  // calls own `init()`
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When building a &lt;code&gt;Bar&lt;/code&gt; via either the designated or convenience initializer, &lt;code&gt;plainTruth&lt;/code&gt; and &lt;code&gt;answer&lt;/code&gt; will be set up from &lt;code&gt;Foo&lt;/code&gt;, then &lt;code&gt;question&lt;/code&gt; will be set and &lt;code&gt;answer&lt;/code&gt; will be reassigned in &lt;code&gt;Bar&lt;/code&gt;. If the convenience initializer is used, then it will also override those new defaults with the arguments passed by the caller, before running the designated initializer, which will in turn call the superclass designated initializer. The machinery all makes good sense; I appreciate that there are no weird edge cases in the initialization &lt;em&gt;rules&lt;/em&gt; here. (There &lt;em&gt;are&lt;/em&gt; a bunch of special rules about which initializers get inherited; I’m just going to leave those aside at this point as they’re entirely irrelevant for a comparison between the languages. We’re already pretty far off into the weeds here.)&lt;/p&gt;
&lt;p&gt;Obviously, none of this remotely applies to Rust at all. Not having inheritance &lt;em&gt;does&lt;/em&gt; keep these things simpler (though of course it also means there’s a tool missing from your toolbox which you might miss). And of course, the rules around &lt;em&gt;method resolution&lt;/em&gt; are not totally trivial there, especially now that &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md"&gt;&lt;code&gt;impl&lt;/code&gt; specialization&lt;/a&gt; is making its way &lt;a href="https://github.com/rust-lang/rust/issues/31844"&gt;into the language&lt;/a&gt;. But those don’t strictly speaking, affect &lt;em&gt;initialization&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To account for the case that initialization can fail, Swift lets you definite &lt;em&gt;failable&lt;/em&gt; initializers, written like &lt;code&gt;init?()&lt;/code&gt;. Calling such an initializer produces an optional. You trigger the &lt;code&gt;nil&lt;/code&gt; valued optional state by writing &lt;code&gt;return nil&lt;/code&gt; at some point in the body of the initializer. Quoting from the Swift book, though, “Strictly speaking, initializers do not return a value…. Although you write &lt;code&gt;return nil&lt;/code&gt; tro trigger an initialization failure, you do not use the &lt;code&gt;return&lt;/code&gt; keyword to indicate initialization success.” These failable initializers get the same overall behavior and treatment as normal initializers in terms of delegating to other initializers within the same class, and inheriting them from superclasses.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;class Foo {
    let bar: Int
    init?(succeed: Bool) {
        if !succeed {
            return nil
        }

        bar = 42
    }
}

let foo = Foo(true)
print(&amp;quot;\(foo?.bar)&amp;quot;)  // 42
let quux = Foo(false)
Print(&amp;quot;\(foo?.bar)&amp;quot;)  // nil&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is another of the places where Swift’s choice to treat initialization as a special case, not just another kind of method, ends up having some weird side effects. If &lt;code&gt;init&lt;/code&gt; calls were &lt;em&gt;methods&lt;/em&gt;, they would always just be &lt;em&gt;returning the type&lt;/em&gt;. This is exactly what we see in Rust, of course. To be clear, there are reasons why the Swift team made that choice, and many of them we’ve already touched on incidentally; the long and short of it is that inheritance adds some wrinkles. These aren’t &lt;em&gt;constructors&lt;/em&gt;, they’re &lt;em&gt;initializers&lt;/em&gt;. The point, per the Swift book, is “to ensure that &lt;code&gt;self&lt;/code&gt; is fully and correctly initializer by the time that initialization ends.” If you’re familiar with Python, you can think of Swift initializers as being quite analogous to &lt;code&gt;__init__(self)&lt;/code&gt; methods, which similarly are responsible for &lt;em&gt;initialization&lt;/em&gt; but not &lt;em&gt;construction&lt;/em&gt;. When we build a type in Rust, by contrast, we’re doing something much more like calling Python &lt;code&gt;__new__(cls)&lt;/code&gt; methods, which &lt;em&gt;do&lt;/em&gt; construct the type.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Edit:&lt;/strong&gt; interestingly, I’m &lt;a href="https://twitter.com/austinzheng/status/749831726122217473"&gt;informed via Twitter&lt;/a&gt; that Swift initializers can also throw errors. (Thanks, Austin!) The Swift book doesn’t mention this because it hasn’t gotten to error-handling yet (and so, neither have we).&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can of course write failable constructors in Rust, too:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Foo {
    bar: i64,
};

impl Foo {
    pub fn optional_new(succeed: bool) -&amp;gt; Option&amp;lt;Foo&amp;gt; {
        if succeed { Some(Foo { bar: 0 }) }
        else { None }
    }
}

let foo = Foo::optional_new(true);
match foo {
    Some(f) =&amp;gt; println!(&amp;quot;{}&amp;quot;, f.bar),
    None =&amp;gt; println!(&amp;quot;None&amp;quot;),
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are conditions in both languages where you’d want to do this: places where an initialization &lt;em&gt;can&lt;/em&gt; fail, e.g. trying to open a file, or open a websocket, or anything where the type represents something that is not guaranteed to return a valid result. It makes sense then that in both cases, returning an &lt;em&gt;optional&lt;/em&gt; value is the outcome. Of course, Rust can equally well have an initializer return a &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Waffles {
    syrup: bool,
    butter: bool,
}

impl Waffles {
    fn properly(all_supplies: bool) -&amp;gt; Result&amp;lt;Waffles, String&amp;gt; {
        if all_supplies {
            Ok(Waffles { syrup: true, butter: true } )
        }
        else {
            let msg = &amp;quot;Who makes waffles this way???&amp;quot;;
            Err(msg.to_string())
        }
    }
}

let waffles = Waffles::properly(true);
match waffles {
    Ok(_) =&amp;gt; println!(&amp;quot;Got some waffles, yeah!&amp;quot;),
    Err(s) =&amp;gt; println!(&amp;quot;{:}&amp;quot;, s),
};&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;del&gt;This is simply not the kind of thing you can do in Swift, as far as I can tell. The upside to Swift’s approach is that there is one, standard path. The downside is that if you have a scenario where it makes sense to return an error—i.e., to indicate &lt;em&gt;why&lt;/em&gt; a class failed to initialize and not merely &lt;em&gt;that&lt;/em&gt; it failed—you’re going to have to jump through many more hoops.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/del&gt; &lt;em&gt;&lt;strong&gt;Edit:&lt;/strong&gt; See above; Swift &lt;em&gt;can&lt;/em&gt; do this. Moreover, the underlying semantics aren’t especially different from Rust’s. However, it does introduce &lt;em&gt;yet more&lt;/em&gt; syntax, rather than just being a normal return. But we’ll talk about that in more detail when we get to error-handling.&lt;/em&gt;&lt;a href="#fn4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; The downside for Rust is that there’s no shorthand; everything is explicit. The upside is the flexibility to do as makes the most sense in a given context, including defining whatever types you need and returning them as you see fit. If you need a type like &lt;code&gt;PartialSuccessPossible&amp;lt;C, P, E&amp;gt;&lt;/code&gt; where &lt;code&gt;C&lt;/code&gt; is a complete type, &lt;code&gt;P&lt;/code&gt; a partial type, and &lt;code&gt;E&lt;/code&gt; an error, you can do that. (I’m not saying that’s a good idea, for the record.) That in turn flows out of building even higher level language features on lower-level features and not introducing new syntax for the most part. Trade-offs!&lt;/p&gt;
&lt;p&gt;And with that, we’re done talking about initializers. This was a &lt;em&gt;huge&lt;/em&gt; topic—but it makes sense. If you don’t nail this down carefully, you’ll be in for a world of hurt later, and that goes whether you’re designing a language or just using it to build things.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvi.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Initialization: another area where Swift has a lot more going on than Rust.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[**Next: Deinitialization: ownership semantics and automatic reference counting][18]&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Also recall that in Rust, we would set the default values either by using the &lt;code&gt;#[derive(Default)]&lt;/code&gt; annotation or by implementing the &lt;code&gt;Default&lt;/code&gt; trait ourselves.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’m including a module because of a quirk around the public/private rules: within the same module, &lt;code&gt;area&lt;/code&gt; isn’t hidden and you can actually go ahead and initialize the object.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Depending on how you think about extensions, &lt;em&gt;either&lt;/em&gt; Rust doesn’t have anything quite like them… &lt;em&gt;or&lt;/em&gt; every type implementation is just an extension, because &lt;code&gt;impl&lt;/code&gt; allows you to extend &lt;em&gt;any&lt;/em&gt; data type in basically arbitrary ways (a few caveats of course). More on all of this when we get there.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Here’s a preview of what that would look like, though (fair warning, there’s a lot going on here we haven’t talked about!):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;enum Setup {
    case succeed
    case error
    case fail
}

enum BarSetupError: ErrorProtocol {
    case argh
}

class Bar {
    let blah: Int
    init?(setup: Setup) throws {
        switch setup {
        case .succeed:
            blah = 42
        case .error:
            throw BarSetupError.argh
        case .fail:
            return nil
        }
    }
}

do {
    let bar = try Bar(setup: .succeed)
    print(&amp;quot;\(bar!.blah)&amp;quot;)

    let baz = try Bar(setup: .fail)
    print(&amp;quot;\(baz?.blah)&amp;quot;)

    let quux = try Bar(setup: .error)
    print(&amp;quot;\(quux?.blah)&amp;quot;)
} catch BarSetupError.argh {
    print(&amp;quot;Oh teh noes!&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output from this would be &lt;code&gt;42&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt;, and &lt;code&gt;Oh teh noes!&lt;/code&gt;.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;&lt;del&gt;It’s conceivable this is actually possible, but nothing in &lt;em&gt;The Swift Programming Language&lt;/em&gt; even hints at it, if so.&lt;/del&gt; See above!&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>A Simple Children's Catechism</title><link href="http://www.chriskrycho.com/2016/a-simple-childrens-catechism.html" rel="alternate"></link><published>2016-06-21T20:45:00-04:00</published><updated>2016-06-21T20:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-21:/2016/a-simple-childrens-catechism.html</id><summary type="html">The simple catechism we use with our girls—there’s nothing original here except perhaps the specific form and order. But I hope someone finds it useful! The aim is deep answers that are easy for little kids to remember and to say.
</summary><content type="html">&lt;p&gt;I was talking with some family today about how we all approach catechizing our children, and it made me think: I should write up the simple catechism we use with our girls. The goal is to package the great truths of our faith in terms that little kids can &lt;em&gt;remember&lt;/em&gt; and that they can &lt;em&gt;say&lt;/em&gt;. There’s nothing original here except perhaps the specific form and order. But I hope someone finds it a little bit useful! If you’re curious about sources or reasons, see the footnotes, which in this post serve as commentary.&lt;/p&gt;
&lt;hr /&gt;
&lt;dl&gt;
&lt;dt&gt;Who made you?&lt;/dt&gt;
&lt;dd&gt;The Trinity!&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;
&lt;/dd&gt;
&lt;dt&gt;Who is the Trinity?&lt;/dt&gt;
&lt;dd&gt;God the Father, Jesus the Son, and the Holy Spirit.
&lt;/dd&gt;
&lt;dt&gt;And they are…&lt;/dt&gt;
&lt;dd&gt;…three persons, just one God, and no divisions.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;
&lt;/dd&gt;
&lt;dt&gt;Why did the Trinity make you? Why do you exist?&lt;/dt&gt;
&lt;dd&gt;To love God and be happy in him forever.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;
&lt;/dd&gt;
&lt;dt&gt;What is the most important rule?&lt;/dt&gt;
&lt;dd&gt;To love God with all your everything&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;—with your heart, and your mind, and all your everything.
&lt;/dd&gt;
&lt;dt&gt;What is the second most important rule?&lt;/dt&gt;
&lt;dd&gt;To love others as much as you love yourself.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;
&lt;/dd&gt;
&lt;dt&gt;What is the first rule that comes with a promise?&lt;/dt&gt;
&lt;dd&gt;To honor your father and mother.
&lt;/dd&gt;
&lt;dt&gt;And what is the promise that comes with it?&lt;/dt&gt;
&lt;dd&gt;It will go well with you and you’ll live a long time.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr /&gt;
&lt;p&gt;Beyond this, we started memorizing Genesis 1 with our oldest when she was three. We need to pick that back up (she’d memorized 12 verses!), but haven’t figured out what it looks like schedule-wise yet.&lt;/p&gt;
&lt;p&gt;I’d like to start adding some further explication of the gospel going forward as well—&lt;em&gt;how&lt;/em&gt; God has loved us. We talk about that on a regular basis, but including it in our catechism will be helpful (and I’ll just keep borrowing regularly from the existing catechisms).&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This might surprise you, as most children’s catechisms use “God” or “God made me” here. Our oldest child simply couldn’t remember that answer. But we sing “Doxology” every night before bed as well as doing our catechism, and one night I said to her, “God is the Father, Son, and Holy Ghost. That’s the Trinity,” and she said Trinity happily. So when I asked her “Who made you?” a moment later, I prompted her with “The Trinity” and… it stuck. So we ran with it; the questions which follow were a natural progression from there.&lt;/p&gt;
&lt;p&gt;I actually think this happy turn is a &lt;em&gt;profoundly&lt;/em&gt; good thing: the God we confess is, as Athanasius pointed out many centuries ago, not just some abstract God, not first and foremost the Creator. God is in eternally, internally, &lt;em&gt;triune&lt;/em&gt;. The gospel we proclaim is a Triune good news—the Father sending the Son who is empowered by the Spirit, so that through the Spirit’s applying the Son’s work to us we might be the adopted children of the Father, and so reconciled with God and (astounding thought) participating in the very life of the Trinity. &lt;em&gt;That&lt;/em&gt; is the good news.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;As our kids get older, we’ll elaborate on this. Eventually I’d love for us all to be able to say together the Nicene-Constantinoplan Creed, which carries this much further. But this gets the most important bits in place.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Borrowed fairly directly from the Westminster Shorter Catechism.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;I was riffing off of the word we usually translate &lt;em&gt;strength&lt;/em&gt; from the Hebrew. “All your everything” isn’t an amazing translation, but it gets the point across decently, and our oldest had an easier time with it than “strength.”&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Here, as with our paraphrase of the Shema, the point is to get the &lt;em&gt;point&lt;/em&gt; across. In both cases, we’ll switch to more usual wording as the kids grow up.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Again: getting at the gist of things. We’ll elaborate on this and start talking about how it fits in the context of salvific history as they keep growing. But Paul’s use in Ephesians 6:1–2 gives us good warrant for continuing to apply it to our own children, I think.&lt;/p&gt;
&lt;p&gt;Applying the promises to our own children is, I know, complicated for Baptists. I have… &lt;em&gt;thoughts&lt;/em&gt; on this. They will emerge at some point, probably after substantially more study, and &lt;em&gt;probably&lt;/em&gt; without my becoming Presbyterian.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="family"></category></entry><entry><title>Y Combinators, how do they even work?</title><link href="http://www.chriskrycho.com/2016/y-combinators-how-do-they-even-work.html" rel="alternate"></link><published>2016-06-19T09:20:00-04:00</published><updated>2016-06-19T09:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-19:/2016/y-combinators-how-do-they-even-work.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I was reading &lt;a href="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/"&gt;a post&lt;/a&gt; by &lt;a href="http://matt.might.net"&gt;Matt Might&lt;/a&gt;, a computer science professor at the University of Utah, about Y Combinators, and I was having a hard time tracking with some of it just by reading. The way I normally solve this problem is to write it out—and, optimally, to …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I was reading &lt;a href="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/"&gt;a post&lt;/a&gt; by &lt;a href="http://matt.might.net"&gt;Matt Might&lt;/a&gt;, a computer science professor at the University of Utah, about Y Combinators, and I was having a hard time tracking with some of it just by reading. The way I normally solve this problem is to write it out—and, optimally, to write it out in something roughly like &lt;a href="https://wiki.haskell.org/Literate_programming"&gt;Literate Haskell&lt;/a&gt; or &lt;a href="http://coffeescript.org/#literate"&gt;Literate CoffeeScript&lt;/a&gt;. That’s exactly what you’ll find below; this is basically &lt;em&gt;commentary&lt;/em&gt; on Might’s original post.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;A few other prefatory notes:&lt;/i&gt;&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;i class=editorial&gt;Since this is commentary, I’m not focusing on explaining combinators in general. For a very helpful explanation, though, both of what combinators are and why you’d ever want to use them, &lt;a href="http://programmers.stackexchange.com/a/117575"&gt;read this&lt;/a&gt;.&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=editorial&gt;The Y Combinator itself isn’t all that useful for ordinary programming. It &lt;em&gt;is&lt;/em&gt; really useful as a way of thinking about how programming &lt;em&gt;works&lt;/em&gt;, and that’s why I was reading about it and trying to figure out what was going on in Might’s original post.&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=editorial&gt;This didn’t actually all make sense to me until I also read Might’s post, &lt;a href="http://matt.might.net/articles/python-church-y-combinator/"&gt;“Equational derivations of the Y combinator and Church encodings in Python”&lt;/a&gt;. Which is a crazy post. But kind of fun. &lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Note for background (this was new to me today): &lt;span class="math inline"&gt;&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;v&lt;/em&gt;.&lt;em&gt;e&lt;/em&gt;&lt;/span&gt; is the function which maps v to e. In ECMAScript 2015 or later (hereafter just JS):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const λv_e = v =&amp;gt; e&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Y Combinator is a higher-order functional: it is a function which takes a functional/higher-order function. Quoting from Might:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Y combinator takes a functional as input, and it returns the (unique) fixed point of that functional as its output. A functional is a function that takes a function for its input. Therefore, the fixed point of a functional is going to be a function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And a “fixed point” is an input to a function equal to the &lt;em&gt;output&lt;/em&gt; of the function. (Not all functions have such.) A fixed point is where &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;) = &lt;em&gt;x&lt;/em&gt;&lt;/span&gt;. He uses the example &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;x&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; − 1&lt;/span&gt;, which has two solutions, two &lt;em&gt;fixed points&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;He starts out with the total recursion form—also known as the “crash all the things!” form—of the Y-combinator. (I’m using letters to denote the version of the combinator; this is Y-naive.)&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Yn = (F) =&amp;gt; F(Yn(F))  // all the recursing!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;“Crash all the things”… because of one pesky little detail: it calls itself immediately, and so recurses infinitely. Which is actually kind of a problem.&lt;/p&gt;
&lt;p&gt;Might then asks: What if we transformed this a bit? He notes that we can &lt;em&gt;transform&lt;/em&gt; with lambda calculus to expand what we’re doing, so:&lt;/p&gt;
&lt;figure&gt;
&lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;) = &lt;em&gt;F&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.(&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;))&lt;/span&gt;
&lt;/figure&gt;
&lt;p&gt;(I haven’t done this kind of thing since undergraduate math work I did for physics, but as I was thinking about it, it made sense. I’m used to trying to &lt;em&gt;remove&lt;/em&gt; extraneous variables when dealing with software, but in this case we’re using it as a tool for transforming the equation into a form that is &lt;em&gt;equivalent&lt;/em&gt; but &lt;em&gt;expressed differently&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;And &lt;span class="math inline"&gt;&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.(&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; is equivalent to the fixed point. It’s the function which takes &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; as an argument and results in &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;)(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;; but &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;)&lt;/span&gt; is just another argument, so this looks just like our original &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;) = &lt;em&gt;x&lt;/em&gt;&lt;/span&gt;, but with &lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt;(&lt;em&gt;F&lt;/em&gt;)&lt;/span&gt; substituted for &lt;span class="math inline"&gt;&lt;em&gt;f&lt;/em&gt;&lt;/span&gt;. Can we write this in JS?&lt;/p&gt;
&lt;p&gt;Here’s my implementation, using modern JS; note that it still recurses. (I’m calling this updated Y-transformed, so &lt;code&gt;Yt&lt;/code&gt;.)&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Yt = (F) =&amp;gt; F((x) =&amp;gt; Yt(F)(x))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;His version:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;function Y(F) { return F(function(x) { return Y(F)(x); }); }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mine and his are equivalent; here’s his version transformed to modern JS:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Y = (F) =&amp;gt; F((x) =&amp;gt; Y(F)(x))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Might then says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using another construct called the U combinator, we can eliminate the recursive call inside the Y combinator, which, with a couple more transformations gets us to:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hated it when profs (or books!) did this when I was in college, and it frustrates me here, too. I want to &lt;em&gt;see&lt;/em&gt; the transformation. I really wish Might didn’t skip how the U combinator works or what transformations he applies, because then he jumps to this form:&lt;/p&gt;
&lt;figure&gt;
&lt;span class="math inline"&gt;&lt;em&gt;Y&lt;/em&gt; = (&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;.&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;.&lt;em&gt;F&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.((&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;h&lt;/em&gt;))(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;)))(&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;.&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;.&lt;em&gt;F&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.((&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;h&lt;/em&gt;))(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;)))&lt;/span&gt;
&lt;/figure&gt;
&lt;p&gt;Writing this out in JS is going to be a real bear. More to the point, I don’t know how he got to it; now I need to go look up the U Combinator it seems.&lt;/p&gt;
&lt;p&gt;…which I’ve &lt;a href="http://www.ucombinator.org"&gt;now done&lt;/a&gt;. So:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the theory of programming languages, the U combinator, &lt;span class="math inline"&gt;&lt;em&gt;U&lt;/em&gt;&lt;/span&gt;, is the mathematical function that applies its argument to its argument; that is &lt;span class="math inline"&gt;&lt;em&gt;U&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;)&lt;/span&gt;, or equivalently, &lt;span class="math inline"&gt;&lt;em&gt;U&lt;/em&gt; = &lt;em&gt;λ&lt;/em&gt;&lt;em&gt;f&lt;/em&gt;.&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;That is, the U Combinator is the case where you apply a function to itself: &lt;span class="math inline"&gt;&lt;em&gt;U&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;) = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;)&lt;/span&gt;—you can see that in the result there, where the first expression is the same as the argument handed to it (and both are functions). It’s also there in the &lt;span class="math inline"&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;h&lt;/em&gt;)&lt;/span&gt; calls.&lt;/li&gt;
&lt;li&gt;The transformations are just transforming from a function-argument for to a lambda form, I think. The kind of thing where you go from &lt;code&gt;function a(b) { return c }&lt;/code&gt; to &lt;code&gt;var a = function(b) { return c }&lt;/code&gt; in JS. (Better, in &lt;em&gt;modern&lt;/em&gt; JS, to &lt;code&gt;const a = (b) =&amp;gt; c&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll return to that in a moment. First, writing up the JS. The innermost term is (repeated) &lt;span class="math inline"&gt;&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;.((&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;h&lt;/em&gt;))(&lt;em&gt;F&lt;/em&gt;))(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;, so we’ll start by writing this out.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const λ_inner = (x) =&amp;gt; (h(h)(F))(x)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need the definition of &lt;span class="math inline"&gt;&lt;em&gt;h&lt;/em&gt;&lt;/span&gt; next; this comes from further out, the transformation &lt;span class="math inline"&gt;&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;.&lt;em&gt;λ&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;.&lt;em&gt;F&lt;/em&gt;(&lt;em&gt;λ&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;em&gt;n&lt;/em&gt;&lt;em&gt;e&lt;/em&gt;&lt;em&gt;r&lt;/em&gt;)&lt;/span&gt; (where we’re substituting the &lt;code&gt;λ_inner&lt;/code&gt; we just wrote to make this a bit easier to get our heads around).&lt;/p&gt;
&lt;p&gt;Remembering that each “.” in the equation represents a mapping, i.e. a JS function call, we have this (writing it with function definitions starting new lines to clarify):&lt;/p&gt;
&lt;p&gt;Here’s what I came up with as a fairly direct translation into JS:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Y = (
  (h) =&amp;gt;
    (F) =&amp;gt; F((x) =&amp;gt; (h(h)(F))(x))  // substituting λ_inner from above
) (
  (h) =&amp;gt;
    (F) =&amp;gt; F((x) =&amp;gt; (h(h)(F))(x))  // substituting λ_inner from above
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;His (note that things are aligned as they are so that it’s clear which functions match up):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;var Y = function (F) {
 return (function (x) {
  return F(function (y) { return (x(x))(y);});
  })
        (function (x) {
  return F(function (y) { return (x(x))(y);});
  }) ;
} ;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;His transformed to modern JS:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Y = (F) =&amp;gt; (
  (x) =&amp;gt; F((y) =&amp;gt; x(x)(y))
) (
  (x) =&amp;gt; F((y) =&amp;gt; x(x)(y))
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;His and mine are not &lt;em&gt;quite&lt;/em&gt; the same (though I know they’re equivalent because they both work). I really wish he’d explained how he got &lt;em&gt;this&lt;/em&gt; substitution as well! More importantly, I wish he’d been consistent in his notation; changing variable names is… frustrating when you’re trying to follow someone’s work.&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;When I get stuck on something like &lt;em&gt;this&lt;/em&gt;, the way I figure it out is by writing out how the substitutions would work at each step. See below.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;In any case, now that we have the Y combinator, we can use it with &lt;code&gt;FactGen&lt;/code&gt;, a functional which, if you pass it the factorial function, passes back the factorial function. &lt;code&gt;FactGen&lt;/code&gt; itself isn’t recursive. But with the Y Combinator, it builds a function which is &lt;em&gt;not&lt;/em&gt; recursive; it doesn’t reference itself anywhere. It just needs the right kind of “factory”: a function which returns &lt;em&gt;another&lt;/em&gt; funtion which itself &lt;em&gt;is&lt;/em&gt; recursive. Here’s a standard recursive factorial implementation (identical to the one Might supplies, though modernized):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const FactGen =
  (fact) =&amp;gt;
    (n) =&amp;gt; n === 0 ? 1 : n * fact(n - 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You call that like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;Y(FactGen)(5)  // 120&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Y(FactGen)&lt;/code&gt; call gets back a function which then runs on whatever input you hand it (a fairly standard pattern with curried arguments), so you could also write it like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const factorial = Y(FactGen)
factorial(5)  // 120&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I’m still not sure how his and mine are equivalent.&lt;/p&gt;
&lt;p&gt;A note: wrapping things in &lt;code&gt;(...)&lt;/code&gt; in JS defines that wrapped content as a distinct &lt;em&gt;expression&lt;/em&gt;. As long as the type of a given expression is a function, it can be called with an argument. So &lt;code&gt;(function() {})()&lt;/code&gt; or &lt;code&gt;(() =&amp;gt; {})()&lt;/code&gt; takes a no-operation function and immediately executes it.&lt;/p&gt;
&lt;p&gt;So in his Y combinator, the substitution goes like this:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Y = (F) =&amp;gt; (  // F is FactGen
  // x is the identical function passed as argument below
  (x) =&amp;gt;
    // Run FactGen by taking the function below as its `fact`
    // argument.
    F(
      // `y` is the argument passed to the result of Y, e.g.
      // `fact(5)`. Recall that `x` is the function below; we
      // call it with itself. Calling x(x) will get the actual
      // factorial function returned by `FactGen`.
      (y) =&amp;gt; x(x)(y)
    )
// We close the *expression* which defines the outer function,
// and call it with this next expression as an argument.
) (
  // and x here is the same function, passed as argument
  (x) =&amp;gt;
    // Again, run `FactGen` with this function as its argument.
    F(
      // `y`, again, will be the integer. `x(x)` again will be
      // the actual factorial function.
      (y) =&amp;gt; x(x)(y)
    )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is pretty funky! But it works; the two anonymous functions call &lt;em&gt;each other&lt;/em&gt; rather than recursing directly.&lt;/p&gt;
&lt;p&gt;In mine, it goes like this, instead:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const Ymine = (
  // Where in Might&amp;#39;s example, the `x` function was where the
  // U Combinator was applied, here (because I followed the
  // original notation he gave) it&amp;#39;s `h`. So it&amp;#39;s `h` which is
  // the same function handed back and forth as argument
  // to itself.
  (h) =&amp;gt;
    // `h` takes a functional, which takes `FactGen` as its
    // parameter. This is similar to the outermost function in
    // Might&amp;#39;s version.
    (F) =&amp;gt;
      // As in Might&amp;#39;s version, we call `FactGen` here.
      F(
        // The form is *similar* but not identical to his,
        // because of the extra call structure. `h(h)(F)` is the
        // factorial function.
        //
        // Note that then he has `y` where I have `x`; my `x`
        // and his `y` are just the result of the computation
        // (in this case, the integer factorial).
        (x) =&amp;gt; (h(h)(F))(x))
) (
  // This is identical to the above; it&amp;#39;s using the U Combinator.
  (h) =&amp;gt; (F) =&amp;gt; F((x) =&amp;gt; (h(h)(F))(x))
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is how his simplification worked: instead of generating the factorial function each time, it generated it just the once and then &lt;em&gt;used&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;I still couldn’t &lt;em&gt;do&lt;/em&gt; the simplification he did myself. It’ll take more practice using and thinking about combinators and combinatorial logic before I get there, but that’s okay. That’s how learning works.&lt;/p&gt;
&lt;p&gt;And that’s enough playing with combinatorials for now. (Except that I’m kind of tempted to see if I can go implement the U or Y combinators—or both—in Rust.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class=editorial&gt;If you’re curious how I worked this out… I expanded the JS representations of the final forms (&lt;a href="//www.chriskrycho.com/extra/ycombinator.js"&gt;here’s the code&lt;/a&gt;) and then stepped through the result in my JavaScript dev tools, watching how the function calls worked and what the values of each intermediate value were. It’s fascinating, and well worth your time.&lt;/i&gt;&lt;/p&gt;
</content><category term="javascript"></category><category term="software development"></category><category term="programming languages"></category></entry><entry><title>Vectors and Iterator Access in Rust</title><link href="http://www.chriskrycho.com/2016/vectors-and-iterator-access-in-rust.html" rel="alternate"></link><published>2016-06-16T20:59:00-04:00</published><updated>2016-06-16T20:59:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-16:/2016/vectors-and-iterator-access-in-rust.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;In the midst of doing my reading and research for New Rustacean episode 15 (which will be out fairly soon after I post this), I bumped into this little tidbit. It doesn’t fit in the episode, so I thought I’d share it here.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;When you’re dealing with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;In the midst of doing my reading and research for New Rustacean episode 15 (which will be out fairly soon after I post this), I bumped into this little tidbit. It doesn’t fit in the episode, so I thought I’d share it here.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;When you’re dealing with vectors in Rust, a common misstep when working with them via iterators is to &lt;em&gt;move&lt;/em&gt; them when you only to &lt;em&gt;borrow&lt;/em&gt; them. If you write &lt;code&gt;for i in x&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is an iterator, you’ll &lt;em&gt;move&lt;/em&gt; the iterator into the looping construct. Instead, you should nearly always write &lt;code&gt;for i in &amp;amp;x&lt;/code&gt; to borrow a reference to the iterator, or &lt;code&gt;for i in &amp;amp;mut x&lt;/code&gt; if you need to get a mutable reference to it.&lt;/p&gt;
</content><category term="rust"></category></entry><entry><title>Testing Ember.js Mixins (and Helpers) With a Container</title><link href="http://www.chriskrycho.com/2016/testing-emberjs-mixins-with-a-container.html" rel="alternate"></link><published>2016-06-09T20:35:00-04:00</published><updated>2017-04-20T07:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-09:/2016/testing-emberjs-mixins-with-a-container.html</id><summary type="html">&lt;p&gt;&lt;i&gt;Updated to note that the same concerns apply to helpers. You can always see the full revision history of this item &lt;a href="https://github.com/chriskrycho/chriskrycho.com/commits/master/content/tech/ember-js-mixins-container.md"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Today I was working on an Ember.js &lt;a href="http://emberjs.com/api/classes/Ember.Mixin.html#content"&gt;mixin&lt;/a&gt; for the new mobile web application we’re shipping at Olo, and I ran into an interesting problem when …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i&gt;Updated to note that the same concerns apply to helpers. You can always see the full revision history of this item &lt;a href="https://github.com/chriskrycho/chriskrycho.com/commits/master/content/tech/ember-js-mixins-container.md"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Today I was working on an Ember.js &lt;a href="http://emberjs.com/api/classes/Ember.Mixin.html#content"&gt;mixin&lt;/a&gt; for the new mobile web application we’re shipping at Olo, and I ran into an interesting problem when trying to test it.&lt;/p&gt;
&lt;p&gt;When you’re testing mixins (or helpers), you’re generally not working with the normal Ember container.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In fact, the default test setup for mixins doesn’t have &lt;em&gt;any&lt;/em&gt; container in play. It just looks like this (assuming you ran &lt;code&gt;ember generate mixin bar&lt;/code&gt; in an app named &lt;code&gt;foo&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import BarMixin from &amp;#39;foo/mixins/bar&amp;#39;;
import { module, test } from &amp;#39;qunit&amp;#39;;

module(&amp;#39;Unit | Mixin | bar&amp;#39;);

// Replace this with your real tests.
test(&amp;#39;it works&amp;#39;, function(assert) {
  let BarObject = Ember.Object.extend(BarMixin);
  let subject = BarObject.create();
  assert.ok(subject);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note two things:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It uses the basic Qunit &lt;code&gt;module&lt;/code&gt; setup, not the ember-qunit &lt;code&gt;moduleFor&lt;/code&gt; setup.&lt;/li&gt;
&lt;li&gt;It assumes you’re generating a new object instance for every single test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of those assumptions are fine, &lt;em&gt;if you don’t need to interact with the container&lt;/em&gt;. In many cases, that’s perfectly reasonable—I’d go so far as to say that most mixins and helpers probably &lt;em&gt;shouldn’t&lt;/em&gt; have any dependency on the container.&lt;/p&gt;
&lt;p&gt;In the specific case I was working on, however, the point of the mixin was to abstract some common behavior which included all the interactions with a &lt;a href="https://guides.emberjs.com/v2.6.0/applications/services/"&gt;service&lt;/a&gt;. This meant making sure the dependency injection worked in the unit test. This in turn meant dealing with the container. So let’s see what was involved in that. (You can generalize this approach to any place in the Ember ecosystem where you need to test something which doesn’t normally have the container set up.)&lt;/p&gt;
&lt;p&gt;We start by switching from the basic &lt;code&gt;qunit&lt;/code&gt; helpers to using the &lt;code&gt;ember-qunit&lt;/code&gt; helpers.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;// Replace this...
import { module, test } from &amp;#39;qunit&amp;#39;;
module(&amp;#39;Unit | Mixin | bar&amp;#39;);

// with this:
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;
moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | Bar&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;moduleFor()&lt;/code&gt; helper has two things going for it—one of which we &lt;em&gt;need&lt;/em&gt;, and one of which isn’t strictly &lt;em&gt;necessary&lt;/em&gt;, but has some nice functionality. In any case, this will help when registering a container. Those two features:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It does support the use of the container. In fact, it’s declaring how this mixin relates to the container in the first argument to the helper function: &lt;code&gt;'mixin:foo'&lt;/code&gt; is the definition of the mixin for injection into the container.&lt;/li&gt;
&lt;li&gt;Any functions we define on the options argument we can pass to the &lt;code&gt;moduleFor()&lt;/code&gt; helper are available on the &lt;code&gt;this&lt;/code&gt; of the test.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, in the first version of this, I had set up a common &lt;code&gt;Ember.Object&lt;/code&gt; which had mixed in the &lt;code&gt;BarMixin&lt;/code&gt;, so:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;const BarObject = Ember.Object.extend(BarMixin);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, in each test, I created instances of this to use:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;test(&amp;#39;test some feature or another&amp;#39;, function(assert) {
  const subject = BarObject.create();
  // ...do stuff and test it with `assert.ok()`, etc.
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem was that any of those tests which required a container injection always failed. Assume we have a service named &lt;code&gt;quux&lt;/code&gt;, and that it’s injected into the mixin like this in &lt;code&gt;foo/app/mixins/bar.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;

export default Ember.Mixin.create({
  quux: Ember.inject.service()
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any test which actually tried to &lt;em&gt;use&lt;/em&gt; &lt;code&gt;quux&lt;/code&gt; would simply fail because of the missing container (even if you specified in the test setup that you needed the service):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test(&amp;#39;it uses quux somehow&amp;#39;, function(assert) {
  const subject = BarObject.create();
  const quux = subject.get(&amp;#39;quux&amp;#39;);  // throws Error
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifically, you will see &lt;code&gt;Attempting to lookup an injected property on an object without a container&lt;/code&gt; if you look in your console.&lt;/p&gt;
&lt;p&gt;Taking advantage of the two &lt;code&gt;ember-qunit&lt;/code&gt; features, though, we can handle all of this.&lt;/p&gt;
&lt;pre class="js"&gt;&lt;code&gt;import Ember from &amp;#39;ember&amp;#39;;
import { moduleFor, test } from &amp;#39;ember-qunit&amp;#39;;

const { getOwner } = Ember;

moduleFor(&amp;#39;mixin:bar&amp;#39;, &amp;#39;Unit | Mixin | bar&amp;#39;, {
  // The `needs` property in the options argument tells the test
  // framework that it needs to go find and instantiate the `quux`
  // service. (Note that if `quux` depends on other injected
  // services, you have to specify that here as well.)
  needs: [&amp;#39;service:quux&amp;#39;],

  // Again: any object we create in this options object will be
  // available on the `this` of every `test` function below. Here,
  // we want to get a &amp;quot;test subject&amp;quot; which is attached to the
  // Ember container, so that the container is available to the
  // test subject itself for retrieving the dependencies injected
  // into it (and defined above in `needs`).
  subject() {
    BarObject = Ember.Object.extend(BarMixin);

    // This whole thing works because, since we&amp;#39;re in a
    // `moduleFor()`, `this` has the relevant method we need to
    // attach items to the container: `register()`.
    this.register(&amp;#39;test-container:bar-object&amp;#39;, BarObject);

    // `Ember.getOwner` is the public API for getting the
    // container to do this kind of lookup. You can use it in lots
    // of places, including but not limited to tests. Note that
    // that because of how the dependency injection works, what we
    // get back from the lookup is not `BarObject`, but an
    // instance of `BarObject`. That means that we don&amp;#39;t need to
    // do `BarObject.create()` when we use this below; Ember
    // already did that for us.
    return getOwner(this).lookup(&amp;#39;test-container:bar-object&amp;#39;);
  }
});

test(&amp;#39;the mixin+service does what it should&amp;#39;, function(assert) {
  // We start by running the subject function defined above. We
  // now have an instance of an `Ember.Object` which has
  // `BarMixin` applied.
  const subject = this.subject();

  // Now, because we used a test helper that made the container
  // available, declared the dependencies of the mixin in `needs`,
  // and registered the object we&amp;#39;re dealing with here, we don&amp;#39;t
  // get an error anymore.
  const quux = subject.get(&amp;#39;quux&amp;#39;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in summary:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Use the &lt;code&gt;ember-qunit&lt;/code&gt; helpers if you need the container.&lt;/li&gt;
&lt;li&gt;Define whatever dependencies you have in &lt;code&gt;needs&lt;/code&gt;, just as you would in any other test.&lt;/li&gt;
&lt;li&gt;Register the mixin-derived object (whether &lt;code&gt;Ember.Object&lt;/code&gt;, &lt;code&gt;Ember.Route&lt;/code&gt;, &lt;code&gt;Ember.Component&lt;/code&gt;, or whatever else) in a method on the options argument for &lt;code&gt;moduleFor()&lt;/code&gt;. Use that to get an instance of the object and you’re off to the races!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One final consideration: while in this case it made good sense to use this approach and make the service injection available for the test, there’s a reason that the tests generated by Ember CLI don’t use &lt;code&gt;moduleFor()&lt;/code&gt; by default. It’s a quiet but clear signal that you should reevaluate whether this &lt;em&gt;is&lt;/em&gt; in fact the correct approach.&lt;/p&gt;
&lt;p&gt;In general, mixins are best used for self-contained units of functionality. If you &lt;em&gt;need&lt;/em&gt; dependency injection for them, it may mean that you should think about structuring things in a different way. Can all the functionality live on the service itself? Can all of it live in the mixin instead of requiring a service? Can the service calls be delegated to whatever type is using the mixin?&lt;/p&gt;
&lt;p&gt;But if not, and you &lt;em&gt;do&lt;/em&gt; need a mixin which injects a service, now you know how to do it!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; The documentation around testing mixins is relatively weak, and in general the testing docs are the weak bits in the Ember guides right now.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; After a conversation with &lt;a href="https://github.com/rwjblue"&gt;@rwjblue&lt;/a&gt; on the &lt;a href="https://ember-community-slackin.herokuapp.com"&gt;Ember Community Slack&lt;/a&gt;, though, I was able to get a handle on the issue, and here we are. Since it stumped me, I’m guessing I’m not the only one.&lt;/p&gt;
&lt;p&gt;When this happens, &lt;em&gt;write it up&lt;/em&gt;. I’ve been guilty of this too often in the past few months: learning something new that I couldn’t find anywhere online, and then leaving it stored in my own head. It doesn’t take a particularly long time to write a blog post like this, and if you’re stuck, chances are &lt;em&gt;very&lt;/em&gt; good someone else is too.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If you’re not familiar with the “container”, this is where all the various dependencies are registered, and where Ember looks them up to inject them when you use methods like &lt;code&gt;Ember.inject.service()&lt;/code&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Something I intend to help address in the next week or two via a pull request, so if you’re my Ember.js documentation team friend and you’re reading this… it’s coming. 😉&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="emberjs"></category><category term="javascript"></category><category term="software development"></category></entry><entry><title>Rust and Swift (xvi)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xvi.html" rel="alternate"></link><published>2016-06-07T23:30:00-04:00</published><updated>2016-06-09T12:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-07:/2016/rust-and-swift-xvi.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Thanks to ubsan, aatch, and niconii on the &lt;a href="https://client00.chat.mibbit.com/?server=irc.mozilla.org&amp;amp;channel=%23rust"&gt;#rust-lang IRC&lt;/a&gt; for a fascinating discussion of the current status of Rust’s initialization analysis, as well as some very interesting comments on what might be possible to do in the future. Everything actually interesting about Rust in this post comes from the conversation I had with them on the evening of March 13.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The rules various languages have around construction and destruction of objects are &lt;em&gt;extremely&lt;/em&gt; important for programmer safety and ergonomics. I think it’s fair to say that both Swift and rust are actively trying to avoid some of the mistakes made in e.g. C++ which poorly affect both its safety and its ease of use for developers, albeit it in some superficially different ways. Both languages also support defining how types are destroyed, which we’ll come back to in a future discussion.&lt;/p&gt;
&lt;p&gt;The basic aim both Rust and Swift have in this area seems to be the same: avoid &lt;em&gt;partially&lt;/em&gt; initialized objects. (You don’t want partially initialized objects. Ask Objective C developers.)&lt;/p&gt;
&lt;p&gt;Swift does this via its rules around &lt;em&gt;initializers&lt;/em&gt;. Rust does it by requiring that all the values of a type be initialized at its creation. So, for example, the following &lt;em&gt;looks&lt;/em&gt; like it should work, but it doesn’t. You can initialize the variable piecemeal, but you cannot &lt;em&gt;use&lt;/em&gt; it:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;#[derive(Debug)]  // to make it printable.
struct Foo {
    pub a: i32,
    pub b: f64,
}

fn main() {
    // This will compmile, but `foo` will be useless.
    let mut foo: Foo;
    foo.a = 14;
    foo.b = 42.0;

    // This would actually fail to compile. Surprising? A bit!
    // println!(&amp;quot;{:?}&amp;quot;, foo);

    // This will work, though, because it fully constructs the type.
    let foo2 = Foo { a: 14, b: 42.0 };
    println!(&amp;quot;{:?}&amp;quot;, foo);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(The reasons why this is so are fairly complicated. See the addendum at the end for a brief discussion.)&lt;/p&gt;
&lt;p&gt;In any case, this means that especially with more complex data types, providing standard constructor-style methods like &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; is conventional and helpful. (If the type has non-public members, it’s also strictly necessary.)&lt;/p&gt;
&lt;p&gt;Swift has a number of options for initializers, which correspond to things you in most cases can do in Rust, but in a very different way.&lt;/p&gt;
&lt;p&gt;First, Swift allows you to overload the &lt;code&gt;init&lt;/code&gt; method on a type, so that you can have different constructors for different starting conditions. (This is, to my recollection, the first time any kind of overloading has come up so far in the Swift book—but that could just be my memory failing me. Certainly I haven’t referenced it in any previous discussion, though.)&lt;/p&gt;
&lt;p&gt;The example offered by the Swift book is illuminating for the different approaches the languages take, so we’ll run with it. Here’s a class defining a Celsius type in Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Celsius {
    let temp: Double

    init(fromFahrenheit f: Double) {
       temp = 1.8 * (f - 32.0)
    }

    init(fromKelvin k: Double) {
        temp = k - 273.15
    }
}

// Create an instance each way
let freezing = Celsius(temp: 0)
let balmy = Celsius(fromFahrenheit: 75.0)
let absoluteZero = Celsius(fromKelvin: 0.0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the internal and external parameter names. This is a common idiom Swift keeps (albeit with some non-trivial modification, and with &lt;a href="%7B%3E%3E%20TODO:%20Swift%203%20naming%20changes%20%3C%3C%7D"&gt;more to come&lt;/a&gt;). More on this below; first, the same basic functionality in Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Celsius {
    temp: f64
}

impl Celsius {
    fn from_fahrenheit(f: f64) -&amp;gt; Celsius {
        Celsius { temp: 1.8 * (f - 32.0) }
    }

    fn from_kelvin(k: f64) -&amp;gt; Celsius {
        Celsius { temp: k - 273.15 }
    }
}

// Create an instance each way
let freezing = Celsius { temp: 0 };
let balmy = Celsius::from_fahrenheit(75.0);
let absoluteZero = Celsius::from_kelvin(0.0);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note that there might be other considerations in implementing such types, like using a &lt;code&gt;Temperature&lt;/code&gt; base &lt;code&gt;trait&lt;/code&gt; or &lt;code&gt;protocol&lt;/code&gt;, or employing type aliases, but those are for later entries!)&lt;/p&gt;
&lt;p&gt;You can see a point I made about Swift’s initializer syntax back in &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-x.html"&gt;part x&lt;/a&gt;: the way Rust reuses normal struct methods while Swift has the special initializers. Neither is clearly the “winner” here. Rust gets to use existing language machinery, simplifying our mental model a bit by not adding more syntax. On the other hand, the addition of initializer syntax lets Swift use a fairly familiar type construction syntax even for special initializer cases, and a leaves us with a bit less noise in the constructor method. Note, though, that initializers in Swift &lt;em&gt;are&lt;/em&gt; special syntax; they’re not just a special kind of method (as the absence of the &lt;code&gt;func&lt;/code&gt; keyword emphasizes)—unlike Rust, where initializers really are just normal struct or instance methods.&lt;/p&gt;
&lt;p&gt;The Swift book notes this distinction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In its simplest form, an initializer is like an instance method with no parameters, written using the &lt;code&gt;init&lt;/code&gt; keyword.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The new keyword is the thing I could do without. Perhaps it’s just years of writing Python, but I really prefer it when constructors for types are just sugar and you can therefore reimplement them yourself, provide custom variations, etc. as it suits you. Introducing syntax instead of just picking a standard function to call at object instantiation means you lose that. At the same time, and in Swift’s defense, I’ve only rarely wanted or needed to use those facilities in work in Python. It’s a pragmatic decision—and it makes sense as such; it’s just not where my preference lies. The cost is a bit higher than I’d prefer relative to the gain in convenience.&lt;/p&gt;
&lt;p&gt;Back to the initializers and the issue of overloading: the external parameter names (the &lt;em&gt;first&lt;/em&gt; parameter) is one of the main ways Swift tells apart the initializers. This is necessitated, of course, by the choice of a keyword for the initializer; Rust doesn’t have any &lt;em&gt;need&lt;/em&gt; for this, and since Rust doesn’t have overloading, it also &lt;em&gt;can’t&lt;/em&gt; do this. In Rust, different constructors/initializers will have different names, because they will simply be different methods.&lt;/p&gt;
&lt;p&gt;[&lt;i class='editorial'&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I’m leaving this here for posterity, but it’s incomplete. See below.&lt;/i&gt;] One other important thing falls out of this: the external parameter names are &lt;em&gt;required&lt;/em&gt; when initializing a type in Swift. Because those parameter names are used to tell apart the constructor, this is not just necessary for the compiler. It’s also an essential element of making the item readable for humans. Imagine if this were &lt;em&gt;not&lt;/em&gt; the case—look again at the &lt;code&gt;Celsius&lt;/code&gt; example:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Celsius {
    let temp: Double

    init(fromFahrenheit f: Double) {
       temp = 1.8 * (f - 32.0)
    }

    init(fromKelvin k: Double) {
        temp = k - 273.15
    }
}

// Create an instance each way
let freezing = Celsius(0)
let balmy = Celsius(75.0)  // our old fromFahrenheit example
let absoluteZero = Celsius(0.0)  // our old &amp;quot;fromKelvin example&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We as humans would have no idea what the constructors are supposed to do, and really at this point there would &lt;em&gt;necessarily&lt;/em&gt; just be one constructor unless the later options took elements of another &lt;em&gt;type&lt;/em&gt;. That would be fairly similar to how overloading works in C++, Java, or C&lt;sup&gt;♯&lt;/sup&gt;, and while method overloading in those langauges is very &lt;em&gt;powerful&lt;/em&gt;, it can also make it incredibly difficult to figure out exactly what method is being called. That includes when the constructor is being called. Take a look at the &lt;em&gt;long&lt;/em&gt; list of &lt;a href="https://msdn.microsoft.com/en-us/library/system.datetime(v=vs.110)"&gt;C&lt;sup&gt;♯&lt;/sup&gt; &lt;code&gt;DateTime&lt;/code&gt; constructors&lt;/a&gt;, for example: you have to either have this memorized, have the documentation open, or be able simply to infer from context what is going on.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Given&lt;/em&gt; the choice of a keyword to mark initializers, then, Swift’s rule about external parameter name usage wherever there is more than one initializer is quite sensible.&lt;/p&gt;
&lt;p&gt;[&lt;i class='editorial'&gt;&lt;strong&gt;Edit:&lt;/strong&gt; several readers, most notably including &lt;a href="https://twitter.com/jckarter/status/740763363626586112"&gt;Joe Groff&lt;/a&gt;, who works on Swift for Apple, pointed out that Swift &lt;em&gt;does&lt;/em&gt; support overloading, including in &lt;code&gt;init()&lt;/code&gt; calls, and uses types to distinguish them. Moreover, you can leave off the label for the parameter. My initial summary was simply incorrect. I think this is a function of my not having finished the chapter yet.&lt;/i&gt;]&lt;/p&gt;
&lt;p&gt;Second, both languages support supplying default values for a constructed type. Swift does this via default values defined at the site of the property definition itself, or simply set directly from within an initializer:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Kelvin {
    var temp: Double = 0.0  // zero kinetic energy!!!
    init () {
        temp = 305.0  // Change of plans: maybe just freezing is better
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you can not supply default values directly on a property, but you can define any number of custom constructors:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Kelvin {
    temp: f64,
}

impl Kelvin {
    fn abs_zero() -&amp;gt; Kelvin {
        Kelvin { temp: 0.0 }
    }

    fn freezing() -&amp;gt; Kelvin {
        Kelvin { temp: 305.0 }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could of course shorten each of those two one line, so:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn abs_zero() -&amp;gt; Kelvin { Kelvin { temp: 0.0 } }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Rust is definitely a little noisier, and that is the downside of this tack. The upside is that these are just functions like any other. This is, in short, &lt;em&gt;exactly&lt;/em&gt; the usual trade off we see in the languages.&lt;/p&gt;
&lt;p&gt;Rust also has the &lt;code&gt;Default&lt;/code&gt; trait and the &lt;code&gt;#[derive(default)]&lt;/code&gt; attribute for getting some basic defaults for a given value. You can either define a &lt;code&gt;Default&lt;/code&gt; implementation yourself, or let Rust automatically do so if the underlying types have &lt;code&gt;Default&lt;/code&gt; implemented:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Kelvin {
    temp: f64,
}

// Do it ourselves
impl Default for Kelvin {
    fn default() -&amp;gt; Kelvin {
        Kelvin { temp: 305.0 }
    }
}

// Let Rust do it for us: calling `Celsius::default()` will get us a default
// temp of 0.0, since that&amp;#39;s what `f64::default()` returns.
#[derive(default)]
struct Celsius {
    temp: f64,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn’t get you quite the same thing as Swift’s initializer values. It requires you to be slightly more explicit, but the tradeoff is that you also get a bit more control and flexibility.&lt;/p&gt;
&lt;p&gt;There’s actually a lot more to say about initializers—there are &lt;em&gt;many&lt;/em&gt; more pages in the Swift book about them—but this is already about 1,700 words long, and I’ve been slowly chipping away at it since March (!), so I’m going to split this chapter of the Swift book into multiple posts. More to come shortly!&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Inheritance: a Swiftian specialty (for now).&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/2016/rust-and-swift-xvii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; More on initializers!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;section id="addendum-no-late-initialization-in-rust" class="level2"&gt;
&lt;h2&gt;Addendum: No Late Initialization in Rust&lt;/h2&gt;
&lt;p&gt;Returning to the first Rust example—&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;#[derive(Debug)]  // to make it printable.
struct Foo {
    pub a: i32,
    pub b: f64,
}

fn main() {
    // This will compmile, but `foo` will be useless.
    let mut foo: Foo;
    foo.a = 14;
    foo.b = 42.0;

    // This would actually fail to compile. Surprising? A bit!
    // println!(&amp;quot;{:?}&amp;quot;, foo);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can’t do anything with that data for a few reasons (most of this discussion coming from ubsan, aatch, and niconii on the &lt;a href="https://client00.chat.mibbit.com/?server=irc.mozilla.org&amp;amp;channel=%23rust"&gt;#rust-lang IRC&lt;/a&gt; back in March):&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Rust lets you “move” data out of a struct on a per-field basis. (Rust’s concept of “ownership” and “borrowing” is something we haven’t discussed a lot so far in this series; my &lt;a href="http://www.newrustacean.com/show_notes/e002/index.html" title="New Rustacean e002: Something borrowed, something... moved?"&gt;podcast episode&lt;/a&gt; about it is probably a good starting point.) The main takeaway here is that you could return &lt;code&gt;foo.a&lt;/code&gt; distinctly from returning &lt;code&gt;foo&lt;/code&gt;, and doing so would hand that data over while running the &lt;code&gt;foo&lt;/code&gt; destructor mechanism. Likewise, you could pass &lt;code&gt;foo.b&lt;/code&gt; to the function created by the &lt;code&gt;println!&lt;/code&gt; macro&lt;/li&gt;
&lt;li&gt;Rust allows you to re-initialize moved variables. I haven’t dug enough to have an idea of what that would look like in practice.&lt;/li&gt;
&lt;li&gt;Rust treats uninitialized variables the same as moved-from variables. This seems to be closely related to reason #2. The same “I’m not sure how to elaborate” qualification applies here.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll see if I can add some further comments on (2) and (3) as I hit the later points in the Swift initialization chapter.&lt;/p&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Mornings like this</title><link href="http://www.chriskrycho.com/2016/mornings-like-this.html" rel="alternate"></link><published>2016-06-05T09:17:00-04:00</published><updated>2016-06-05T09:17:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-05:/2016/mornings-like-this.html</id><summary type="html">&lt;div class="line-block"&gt;Mornings like this—oh, mornings like this&lt;br /&gt;
I need the Word preached, and the Table&lt;br /&gt;
And (not least) the People of God&lt;br /&gt;
Mornings like this perhaps most of all&lt;br /&gt;
When I want nothing more than solitude&lt;br /&gt;
And to rest, to be all alone&lt;br /&gt;
Mornings like this: faithfulness proves out.&lt;/div&gt;
</summary><content type="html">&lt;div class="line-block"&gt;Mornings like this—oh, mornings like this&lt;br /&gt;
I need the Word preached, and the Table&lt;br /&gt;
And (not least) the People of God&lt;br /&gt;
Mornings like this perhaps most of all&lt;br /&gt;
When I want nothing more than solitude&lt;br /&gt;
And to rest, to be all alone&lt;br /&gt;
Mornings like this: faithfulness proves out.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>Rust and C++ function definitions</title><link href="http://www.chriskrycho.com/2016/03-1801.html" rel="alternate"></link><published>2016-06-03T18:01:00-04:00</published><updated>2016-06-07T23:16:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-06-03:/2016/03-1801.html</id><summary type="html">&lt;p&gt;I just put my finger on one of the (many) reasons Rust reads better than C++: the visual consistency of its function definitions. Compare—&lt;/p&gt;
&lt;p&gt;Rust has:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn foo() -&amp;gt; i32 { /* implementation */ }
fn bar() -&amp;gt; f32 { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C++ has:&lt;/p&gt;
&lt;pre class="cpp"&gt;&lt;code&gt;int foo() { /* implementation */ }
double bar() { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That consistency adds up over many lines of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just put my finger on one of the (many) reasons Rust reads better than C++: the visual consistency of its function definitions. Compare—&lt;/p&gt;
&lt;p&gt;Rust has:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn foo() -&amp;gt; i32 { /* implementation */ }
fn bar() -&amp;gt; f32 { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C++ has:&lt;/p&gt;
&lt;pre class="cpp"&gt;&lt;code&gt;int foo() { /* implementation */ }
double bar() { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That consistency adds up over many lines of code. There are many other such choices; the net effect is that Rust is &lt;em&gt;much&lt;/em&gt; more pleasant to read than C++.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Note: I’m aware that C++11 added the &lt;code&gt;auto foo() -&amp;gt; &amp;lt;type&amp;gt;&lt;/code&gt; syntax. But this actually &lt;em&gt;worsens&lt;/em&gt; the problem. A totally new codebase which uses that form exclusively (which may not always be possible, because the semantics aren’t the same) would have roughly the same visual consistency as Rust &lt;em&gt;in that particular category&lt;/em&gt;. (Plenty of others would still be a mess.) But the vast majority of C++ codebases are &lt;em&gt;not&lt;/em&gt; totally new. Adding the form means your codebase is more likely to look this this:&lt;/p&gt;
&lt;pre class="cpp"&gt;&lt;code&gt;int foo() { /* implementation */ }
auto quux() -&amp;gt; uint32_t { /* implementation */ }
double bar() { /* implementation */ }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is, for the record, &lt;em&gt;more&lt;/em&gt; visual inconsistency—not less!&lt;/p&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="cplusplus"></category></entry><entry><title>A brake on our enthusiasm</title><link href="http://www.chriskrycho.com/2016/a-brake-on-our-enthusiasm.html" rel="alternate"></link><published>2016-05-31T22:21:00-04:00</published><updated>2016-05-31T22:21:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-31:/2016/a-brake-on-our-enthusiasm.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;One of the reasons we do history… is because it acts as a brake… on our otherwise unbridled enthusiasm for our own ideas.&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;One of the reasons we do history… is because it acts as a brake… on our otherwise unbridled enthusiasm for our own ideas.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category><category term="history"></category></entry><entry><title>Ask</title><link href="http://www.chriskrycho.com/2016/ask.html" rel="alternate"></link><published>2016-05-31T21:18:00-04:00</published><updated>2016-05-31T21:18:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-31:/2016/ask.html</id><summary type="html">&lt;p&gt;&lt;i class='editorial'&gt;My wife and a few others regularly do a 30-minute writing challenge every Tuesday evening. This week, since I’m taking some time off, I got to participate! The prompt was: &lt;em&gt;Write a story about trees which whisper poems to those who know how to hear them. (It’s not …&lt;/em&gt;&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;My wife and a few others regularly do a 30-minute writing challenge every Tuesday evening. This week, since I’m taking some time off, I got to participate! The prompt was: &lt;em&gt;Write a story about trees which whisper poems to those who know how to hear them. (It’s not allowed to be scary.)&lt;/em&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Her first question was: “Who taught the trees to speak?”&lt;/p&gt;
&lt;p&gt;Her second, of course, was: “Any why only in such &lt;em&gt;awful&lt;/em&gt; poetry?”&lt;/p&gt;
&lt;p&gt;I didn’t always know about the whispers, and of course I didn’t believe old Dallet when he told me about it, and it took me six weeks to hear them for the first time myself—so I didn’t particularly expect Annyth to hear them immediately after I mentioned them to her. I probably should have. She’d always been a little odd. But whatever the reason, she just blinked those round not-quite-brown, not-quite-green eyes at me a few times, like some slightly startled owl caught out in daylight, and then giggled.&lt;/p&gt;
&lt;p&gt;For good reason: the spruces had just started in on a ridiculous ditty about nymphs—&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;They dance like dancers&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;and twirl like twirlers&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;and all the little nymphs&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;are sort of like curlers&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;but sans the ice&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;and add a dash of spice…&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;You get the idea. The &lt;em&gt;worst&lt;/em&gt; kinds of puns and rhymes, for hours on end. Annyth’s second question had good cause.&lt;/p&gt;
&lt;p&gt;Apparently, I’d gotten lost in my own mind again, listening to the rhymes, because she repeated her questions.&lt;/p&gt;
&lt;p&gt;“Who taught the trees to speak? Any why only in such &lt;em&gt;awful&lt;/em&gt; poetry?”&lt;/p&gt;
&lt;p&gt;I shrugged. “No one knows who taught them. Maybe they’ve always known.” She somehow managed to furrow her brows &lt;em&gt;and&lt;/em&gt; quirk them at me at the same time. “Okay, probably not, but Dallet said his grandfather taught him, and that &lt;em&gt;his&lt;/em&gt; great-uncle taught him, and so on back a thousand years, and either the first one forgot to tell anyone that he was the one responsible for it all, or everyone else—”&lt;/p&gt;
&lt;p&gt;“Heard this terrible poetry and decided to make sure his name didn’t live on at all?”&lt;/p&gt;
&lt;p&gt;I laughed. &amp;quot;Probably.&lt;/p&gt;
&lt;p&gt;The nymph poem had ended; now they were onto something about stream beds…&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;It runs, so cool, down through the bed&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;And even though, the stream, it has no head&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;It likes to lie down in its bed&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Until it comes to make us fed…&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;She turned away from the trees for a moment and looked at me. “Is it… &lt;em&gt;always&lt;/em&gt; this bad?”&lt;/p&gt;
&lt;p&gt;I shrugged again. “Not… &lt;em&gt;always&lt;/em&gt;.”&lt;/p&gt;
&lt;p&gt;Now her eyebrows were &lt;em&gt;raised&lt;/em&gt; and quirked.&lt;/p&gt;
&lt;p&gt;“I mean, sometimes it’s actually worse. When they start telling limericks… just stop up your ears. But every once in a while some tree or another will start up a sonnet and you’ll get those fourteen lines of decency.”&lt;/p&gt;
&lt;p&gt;She smirked. “A sonnet? Tree love poems?”&lt;/p&gt;
&lt;p&gt;I shrugged again. I seemed to be doing a lot of that today. “As far as tree love poems go, honestly, the sonnets are preferable. Sappy but not… weird.”&lt;/p&gt;
&lt;p&gt;Now the eyebrows went completely flat. “I don’t think I want to know.”&lt;/p&gt;
&lt;p&gt;“You don’t, but you probably will, soon enough. Now that you’ve heard them, you’ll never be able to &lt;em&gt;unhear&lt;/em&gt; them.”&lt;/p&gt;
&lt;p&gt;“What do you mean?” The eyebrows were climbing again. “Don’t they stop?”&lt;/p&gt;
&lt;p&gt;I smiled my &lt;em&gt;worried&lt;/em&gt; smile at her. “What, exactly, do you think you’re hearing?”&lt;/p&gt;
&lt;p&gt;The eyebrows furrowed for a moment again as she listened, then twitched and quivered a moment in what looked like consternation, then rose until I thought they would come entirely off the top of her head. “No. No no no no no.”&lt;/p&gt;
&lt;p&gt;I shrugged. Again. &lt;em&gt;Stop shrugging, idiot.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;“It’s the &lt;em&gt;wind&lt;/em&gt;?”&lt;/p&gt;
&lt;p&gt;I nodded, smiled my &lt;em&gt;sympathetic, just-one-side-of-my-mouth quirked&lt;/em&gt; smile at her. “And when was the last time you heard a day without a breeze?”&lt;/p&gt;
&lt;p&gt;Annyth shook her head. Her eyebrows were darting furiously this way and that. I don’t think I’ve ever seen such versatile eyebrows, truly. She started breathing a little faster. Her eyes were darting to match her eyebrows. “You mean to tell me that you thought it would be &lt;em&gt;nice&lt;/em&gt; to subject me to these awful, awful rhymes for the &lt;em&gt;rest of my life&lt;/em&gt;?”&lt;/p&gt;
&lt;p&gt;“I…”&lt;/p&gt;
&lt;p&gt;“That’s what you said, you…” she paused, listened for a moment:&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;like a jolly little man with no brain&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;he dances across the plain&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;and does a dance, a sprightly jig&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;as if he were a baboon grown over big&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;“You little man with no brain, you baboon grown over big!” The eyebrows were low and fierce.&lt;/p&gt;
&lt;p&gt;I… shrugged. &lt;em&gt;Again.&lt;/em&gt; What was it with the shrugs today?&lt;/p&gt;
&lt;p&gt;Annyth paused. “They weren’t &lt;em&gt;actually&lt;/em&gt; singing that about you, were they?” Now the eyebrows were in thinking posture: left furrowed more than right, right slightly quirked.&lt;/p&gt;
&lt;p&gt;I tried desperately to keep my shoulders from moving. No more shrugs. “I… honestly don’t know. I’ve never really paid attention to why the songs change.”&lt;/p&gt;
&lt;p&gt;Annyth stared at me like I were a complete dunce.&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;He does not see, he has no eyes&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Though stare out from his face they do&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;He listens to winds and hears but lies&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Though every day he hears the truth&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;My&lt;/em&gt; eyes went wide. &lt;em&gt;Her&lt;/em&gt; eyes went wide. We looked at the trees. I swallowed. “That was… just a coincidence, don’t you think?”&lt;/p&gt;
&lt;p&gt;The wind stopped.&lt;/p&gt;
&lt;p&gt;I shivered, looked at her. Her hazel owl eyes stared back wide.&lt;/p&gt;
&lt;p&gt;And then it whispered in the spruce trees.&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;Ask&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;We breathed. “Ask what?” Annyth whispered back.&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;Ten thousand years&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;Call and response: the oaks were answering the spruce trees with a low flutter to the whisper in the needles.&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;Just one question&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;Ignored, unheard&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;Why do you have ears&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;And we speak&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;And you listen not&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;Silence, again.&lt;/p&gt;
&lt;p&gt;I looked at Annyth, ran my tongue across my bottom teeth, shrugged (of course), and mouthed, “Ask?”&lt;/p&gt;
&lt;p&gt;She giggled. The sound startled in the silence, but still the trees stood waiting.&lt;/p&gt;
&lt;p&gt;I cleared my throat. “Ask what?”&lt;/p&gt;
&lt;p&gt;Silence.&lt;/p&gt;
&lt;p&gt;She rolled her eyes at me. “Who taught you to speak?”&lt;/p&gt;
&lt;p&gt;Silence.&lt;/p&gt;
&lt;p&gt;Then, like a whispered shout in the gathering dusk, spruce and oak in chorus:&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;God&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;That was new.&lt;/p&gt;
&lt;p&gt;She smiled at me. “When?”&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;At dawn&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;At beginning times&lt;/em&gt;&lt;br /&gt;
    &lt;em&gt;At start of age&lt;/em&gt;&lt;br /&gt;
       &lt;em&gt;At end of unseeing&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;Eyebrows wide, Annyth asked: “Why?”&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;Annyth’s eyes were bright with joy, and round; her eyebrows high again. I shrugged uncomprehending. “Don’t you hear?” she said. “We just keep asking. That’s what we do. Until we find the truth. We keep asking.”&lt;/p&gt;
&lt;div class="line-block"&gt;&lt;em&gt;Ask, ask, ask&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;The poetry ran on. But no more folly. Now it had &lt;em&gt;answers.&lt;/em&gt;&lt;/p&gt;
</content><category term="fiction"></category><category term="poetry"></category></entry><entry><title>Free Dynamic DNS for Remote Login via SSH</title><link href="http://www.chriskrycho.com/2016/free-dynamic-dns-for-remote-login-via-ssh.html" rel="alternate"></link><published>2016-05-31T20:10:00-04:00</published><updated>2016-05-31T20:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-31:/2016/free-dynamic-dns-for-remote-login-via-ssh.html</id><summary type="html">&lt;p&gt;I recently set up a hostname and mapped it to a dynamic IP address for my home machine so that I can log into it via SSH&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; from &lt;em&gt;anywhere&lt;/em&gt; without needing to know what the IP address is. This is handy because I need to do just that on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently set up a hostname and mapped it to a dynamic IP address for my home machine so that I can log into it via SSH&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; from &lt;em&gt;anywhere&lt;/em&gt; without needing to know what the IP address is. This is handy because I need to do just that on a semi-regularly basis: I’ll be out with my work laptop at a coffee shop, and need something that’s on my personal machine at home, for example.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A friend &lt;a href="https://twitter.com/toddheitmann/status/728222459413958656"&gt;asked&lt;/a&gt; me to describe it, so here I am. (Hi, Todd!) This was pretty straightforward for me, and it should be for you, too.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Pick one of the &lt;a href="https://duckduckgo.com/?q=free+dynamic+dns+providers&amp;amp;t=osx&amp;amp;ia=web"&gt;many&lt;/a&gt; free dynamic DNS providers. I picked &lt;a href="http://www.noip.com/free"&gt;No-IP&lt;/a&gt; after a very short bit of digging. In the future I may switch to a more full-featured solution, not least because I’m planning to separate out my DNS management from my hosting and my domain registrar later this year.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; For now, though, No-IP is good enough.
&lt;ul&gt;
&lt;li&gt;Register.&lt;/li&gt;
&lt;li&gt;Pick a domain name.&lt;/li&gt;
&lt;li&gt;Add your current IP address. (If you need to find out what it is, you can literally just ask the internet: &lt;a href="http://www.whatsmyip.org"&gt;whatsmyip.org&lt;/a&gt; will tell you.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Set up a local service to talk to the dynamic DNS provider, so that when your external IP address changes (and from time to time it will, if you’re not paying your ISP for a dedicated IP address). You can do this one of two ways:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;By installing a service on your main machine.&lt;/strong&gt; No-IP and other large providers all have downloads where you can just install an app on your machine that goes out and talks to the service and keeps the IP address up to date.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;By configuring your router.&lt;/strong&gt; This is the route I took, because the router I have&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; fully supports dynamic DNS services right out of the box.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; Look for something like &lt;em&gt;Dynamic DNS&lt;/em&gt; and follow the configuration instructions there to get it talking to your dynamic DNS service provider. Mine has a built-in list which included No-IP; I just added my username and password and the domain name I specified back in Step 1, checked an &lt;em&gt;Enable DDNS&lt;/em&gt; box, and connected.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it. Even if you’re not a huge networking geek (which, for all my nerdiness, I really am not), you can set it up. From that point forward, if you have &lt;em&gt;other&lt;/em&gt; things configured locally on your machine for network access (e.g. enabling SSH by toggling &lt;em&gt;Remote Login&lt;/em&gt; to &lt;em&gt;On&lt;/em&gt; in the &lt;strong&gt;Sharing&lt;/strong&gt; preferences pane on OS X), you can just use the new domain you configured instead of the IP address. If that domain was e.g. &amp;lt;chriskrycho.example.com&amp;gt;, you could just &lt;code&gt;ssh chris@chriskrycho.example.com&lt;/code&gt; and be off to the races.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;or &lt;a href="https://mosh.mit.edu"&gt;mosh&lt;/a&gt;, which I’m hoping to check out this week&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Or, when I was traveling and my Windows VM crashed while I was in the airport, and I was able to work from the VM on my home machine instead via SSH magic I’ll cover in a future blog post.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Having each of those in a separate place is nice: it means that if the others change, you only have to deal with &lt;em&gt;that&lt;/em&gt; set of concerns. For example, if you move hosting providers, you don’t &lt;em&gt;also&lt;/em&gt; have to migrate all your DNS settings—just tweak the couple that are relevant to the move.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;&lt;a href="https://www.noip.com/download"&gt;Here’s the download page&lt;/a&gt; for No-IP, for example.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;&lt;a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16833704177&amp;amp;nm_mc=AFC-C8Junction&amp;amp;cm_mmc=AFC-C8Junction-Skimlinks-_-na-_-na-_-na&amp;amp;cm_sp=&amp;amp;AID=10446076&amp;amp;PID=5431261&amp;amp;SID=skim45704X1167592X2be13284148d669370b61074c119afc2"&gt;this one&lt;/a&gt;, as &lt;a href="http://thewirecutter.com/reviews/best-wi-fi-router/"&gt;recommended&lt;/a&gt; by The Wirecutter&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;So will most open-source router firmwares, especially OpenWRT or DD-WRT, if they run on your router. I’ve done that in the past.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;This tiny post has a &lt;em&gt;hilarious&lt;/em&gt; number of footnotes. I noticed this early on, and instead of reworking it… I just ran with it.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>SpaceX: "First-stage landing | Onboard camera"</title><link href="http://www.chriskrycho.com/2016/spacex-first-stage-landing-onboard-camera.html" rel="alternate"></link><published>2016-05-28T20:58:00-04:00</published><updated>2016-05-28T20:58:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-28:/2016/spacex-first-stage-landing-onboard-camera.html</id><summary type="html">&lt;p&gt;OH WOW: &lt;a href="http://www.spacex.com"&gt;SpaceX&lt;/a&gt; first-stage landing footage… &lt;a href="https://youtu.be/4jEz03Z8azc"&gt;from the onboard camera&lt;/a&gt;. This is blow-your-mind incredible.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;OH WOW: &lt;a href="http://www.spacex.com"&gt;SpaceX&lt;/a&gt; first-stage landing footage… &lt;a href="https://youtu.be/4jEz03Z8azc"&gt;from the onboard camera&lt;/a&gt;. This is blow-your-mind incredible.&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Ben Thompson: "Peter Thiel, Comic Book Hero"</title><link href="http://www.chriskrycho.com/2016/ben-thompson-peter-thiel-comic-book-hero.html" rel="alternate"></link><published>2016-05-28T20:50:00-04:00</published><updated>2016-05-28T20:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-28:/2016/ben-thompson-peter-thiel-comic-book-hero.html</id><summary type="html">&lt;p&gt;I always appreciate Ben Thompson’s takes, but &lt;a href="https://stratechery.com/2016/peter-thiel-comic-book-hero/"&gt;this&lt;/a&gt;—on the Thiel/Gawker imbroglio—is one of his best posts ever.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I always appreciate Ben Thompson’s takes, but &lt;a href="https://stratechery.com/2016/peter-thiel-comic-book-hero/"&gt;this&lt;/a&gt;—on the Thiel/Gawker imbroglio—is one of his best posts ever.&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Ember.js: "Introducing Subteams"</title><link href="http://www.chriskrycho.com/2016/emberjs-introducing-subteams.html" rel="alternate"></link><published>2016-05-24T19:10:00-04:00</published><updated>2016-05-24T19:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-24:/2016/emberjs-introducing-subteams.html</id><summary type="html">&lt;p&gt;In which one tech I really like (&lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt;) steals a great idea from another tech I really like (&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;).&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In which one tech I really like (&lt;a href="http://emberjs.com"&gt;Ember.js&lt;/a&gt;) steals a great idea from another tech I really like (&lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;).&lt;/p&gt;
</content><category term="links"></category><category term="programming languages"></category><category term="emberjs"></category><category term="rust"></category></entry><entry><title>the clouds I miss</title><link href="http://www.chriskrycho.com/2016/the-clouds-i-miss.html" rel="alternate"></link><published>2016-05-20T15:00:00-04:00</published><updated>2016-05-20T15:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-20:/2016/the-clouds-i-miss.html</id><summary type="html">&lt;div class="line-block"&gt;Strange, but I find&lt;br /&gt;
    it is the clouds I miss&lt;br /&gt;
        from Colorado&lt;br /&gt;
    as much as the mountains&lt;br /&gt;
        off which they roll&lt;br /&gt;
    and thunder on a summer afternoon.&lt;/div&gt;
</summary><content type="html">&lt;div class="line-block"&gt;Strange, but I find&lt;br /&gt;
    it is the clouds I miss&lt;br /&gt;
        from Colorado&lt;br /&gt;
    as much as the mountains&lt;br /&gt;
        off which they roll&lt;br /&gt;
    and thunder on a summer afternoon.&lt;/div&gt;
</content><category term="poetry"></category><category term="travel"></category></entry><entry><title>Irreducible Complexity and Design Discourse</title><link href="http://www.chriskrycho.com/2016/irreducible-complexity-and-design-discourse.html" rel="alternate"></link><published>2016-05-17T22:22:00-04:00</published><updated>2016-05-17T22:22:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-17:/2016/irreducible-complexity-and-design-discourse.html</id><summary type="html">Even if Michael Behe's analysis fails as an inductive argument, there is good reason to think complex biological systems were &lt;em&gt;designed&lt;/em&gt;.
</summary><content type="html">&lt;p&gt;&lt;i class='editorial'&gt;Is the biological evidence for ‘irreducible complexity’ best understood in terms of a design argument or design discourse?&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Michael Behe has suggested that many structures found in biological systems are &lt;em&gt;irreducibly complex&lt;/em&gt;, that is, complex in such a way that they could not have arisen via indirect, chance development but bear clear evidence of having been designed. This evidence of design comes from the fact that these systems have a number of parts without which the mechanism in question simply does not function—not with degraded or partial function, but no function at all. He offers up several prominent examples of this phenomena, among them the human eye and the bacterial flagellum. With each, he shows how problematic a materialist evolutionary account for their development must be, charting six steps in “design space” which any such account must fulfill. Take the human eye: (1) Development begins with a light-sensitive spot. (2) All steps which finally result in a human eye occur via heritable genetic variation. (3) At no point does a designer intervene; all steps occur solely by random mutation. (4) Each step along the way must be either adaptive, conferring greater survivability and reproductive success on the organism, or at least not maladaptive, making the organism less likely to survive. (5) No step may be exceptionally improbable relative to the others in the sequence. (6) The final step in the sequence must be the actual, functioning human eye. Behe argues variously that such a naturalistic evolutionary path is either impossible or at least incredibly improbable for many biological systems. As such, he thinks he has evidence or proof that the systems did not develop (and perhaps could not have been developed) via purely naturalistic means.&lt;/p&gt;
&lt;p&gt;Several major lines of criticism have been advanced against Behe’s argument, notably by Paul Draper. Draper first notes that while Behe establishes a challenge for evolutionary explanations of these biological, he by no means proves them irreducibly complex. Asserting that they are is not &lt;em&gt;proving&lt;/em&gt; that they are. Second, and closely related, many evolutionary biologists deny that these systems, complex as they are, are &lt;em&gt;irreducibly&lt;/em&gt; complex. A number of potential explanations have been offered for how the systems Behe describes might have developed in a way that satisfies his criteria. Third, he notes that Behe struggles to define clearly what constitutes a “part” in such systems. But since a “part” is an integral element of his scheme of irreducible complexity, it seems a definition should be forthcoming. Finally, Draper suggests that there are evolutionary phenomena capable of explaining the phenomena Behe outlines. If an element S has a function F at time T, and later at time T ʹ develops into S ʹ, which at time Tʹʹ is integrated into a larger system Q which confers functionality Fʹ, then Sʹ is not an irreducibly complex part of Fʹ. It arose independently, even though it was incorporated into the later function Fʹ.&lt;/p&gt;
&lt;p&gt;A partial rejoinder to Draper is in order. Though he is right to note that Behe has not proven these structures to be irreducibly complex, neither have evolutionary biologists offered any actual path through the design space as hard evidence against Behe. Granted that it may not be possible for them to do so; still, telling a just-so story does not constitute a particularly strong claim. Moreover, that such a story can be told in no way makes it probable. This might defeat Behe’s stronger claim (irreducibly complex structures &lt;em&gt;cannot&lt;/em&gt; arise by purely natural evolutionary means), but not the weaker form (it is extremely &lt;em&gt;unlikely&lt;/em&gt; that irreducibly complex structures could arise by purely natural evolutionary means). Draper’s points do weaken Behe’s case, however.&lt;/p&gt;
&lt;p&gt;Alvin Plantinga offers two further criticisms. First, assume Behe is right and that these developments are extraordinarily improbable. So what? Many extraordinarily improbable things have happened. If humans &lt;em&gt;do&lt;/em&gt; inhabit a materialist universe in which no intelligent designer exists, then this extraordinarily improbable thing is precisely what happened. Second, and perhaps more serious—not only for Behe but for other Intelligent Design theorists, such as William Dembski—the prior probabilities of these outcomes are simply unknowable. One might devise some set of numbers in an attempt to represent the problem space, but such an attempt would always be fundamentally just guesswork.&lt;/p&gt;
&lt;p&gt;As an alternative option, Plantinga suggests that Behe’s approach be taken not as an inductive argument for these systems’ being designed, but as a sort of &lt;em&gt;design discourse&lt;/em&gt;. That is, Behe’s points are not something like an inference to the best explanation; rather, they are a normal, rational part of human cognition, and as such may be well-warranted even if a sustained argument for them cannot be mounted. Plantinga notes that many rational beliefs cannot be argued: the reliability of one’s senses, or memories, or the existence of other minds. The existence of other minds is particularly relevant, because when an explorer finds something and attributes design to it, that is just what she is doing: attributing the existence of some artifact to another mind. Such behavior is clearly rational in many situations: if astronauts on the moon discover a very large obsidian monolith, they are not obliged to chalk it up to some purely mechanistic and hitherto unknown lunar process. They immediately, and &lt;em&gt;rightly&lt;/em&gt; attribute it to another intelligence.&lt;/p&gt;
&lt;p&gt;Behe’s discussion seems to be just along these lines. When humans look at complex biological systems, they give every appearance of having been designed—and not only to the theists who would presumably have a bias in that direction. This appearance of design has led eminent atheists to offer up any number of comments explaining away that appearance, Sir Francis Crick and Richard Dawkins both famously among them. When atheist writers are wont to say things like “Biology is the study of things which appear to have been designed, but were not,” they strongly suggest that Plantinga’s reading of Behe may be on the right track.&lt;/p&gt;
&lt;p&gt;Beliefs formed basically are not, of course, unassailable. A person suffering from amnesia might come to distrust her memories. If someone is informed he is under the influence of a hallucinogen, he would have reason to doubt his observations of the world. Basic beliefs can be defeated by being undercut, or by being flat-out rebutted. In the case of a design discourse, for example, the belief could be totally rebutted if one could offer proof that natural, totally unguided evolution &lt;em&gt;had&lt;/em&gt; produced one of these biological systems. This, however, is impossible: science itself is incapable of showing that the evolutionary process was not directed by God. Even if the mutations that led to the development of the system were totally random, they could nonetheless have been planned by God in the creation of the whole universe from the beginning. Such a claim is therefore inherently metaphysical, and cannot be demonstrated empirically. It would be easier to undercut the design belief, by showing it both possible and not &lt;em&gt;profoundly&lt;/em&gt; unlikely that an evolutionary path could have given rise to the phenomena in question. If such a path could be shown, it would indeed serve to weaken one’s confidence in a design assessment. For one thing, though, such paths do seem to be rather improbable (even if the actual probabilities are not knowable). For another, even if such an undercutting defeater were granted entirely, it might not totally defeat the basic belief, because there can be &lt;em&gt;deflectors&lt;/em&gt; for such defeaters. If one has many other reasons (philosophical, empirical, experiential, and so on) to affirm Christianity, for example, then even a reasonable claim for the viability of some naturalist evolutionary path might not &lt;em&gt;defeat&lt;/em&gt; the design assessment—only weaken it.&lt;/p&gt;
&lt;p&gt;In short, Behe’s analysis &lt;em&gt;qua&lt;/em&gt; argument has a number of weaknesses. It may serve as one part of a broader inference toward theism, but on its own merits, it does seem to fall prey to some of the critiques Draper in particular offers—not least, because Behe advances a very strong claim about the irreducible complexity of the structures in question. It falls to him to defend that claim. But taking his analysis as exemplary of a basic, and therefore well-warranted, &lt;em&gt;recognition&lt;/em&gt; of design in biological systems seem rather more secure. Taking the two together may be the best of all. It may be possible to see and immediately recognize design, &lt;em&gt;and&lt;/em&gt; to reason inferentially about designed mechanisms, and for both to have a confirmatory status in one’s affirmation of Christian theism.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Fine Tuning</title><link href="http://www.chriskrycho.com/2016/fine-tuning.html" rel="alternate"></link><published>2016-05-17T22:21:00-04:00</published><updated>2016-05-17T22:21:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-17:/2016/fine-tuning.html</id><summary type="html">The universe gives every appearance of having been fine-tuned to support the existence of humans. Neither the so-called anthropic prinicple nor a many-worlds hypothesis provide good alternative explanations to Christian theism.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;What is the fine-tuning argument for God’s existence, what are two of the strongest objections to it, and how would you respond to those objections?&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The fine-tuning argument notes that human existence in the universe depends on a wide array of natural constants existing within very narrow ranges, and that it does not seem that those constants &lt;em&gt;necessarily&lt;/em&gt; had to be within those ranges, and infers from these two observations that the universe has been fine-tuned for the existence of human life. For example, the balance between the strong and weak nuclear forces is just such that matter forms, and not only matter but the wide variety of light and heavy elements found throughout the universe (not just something like hydrogen). The strength of the gravitational constant is just such that the universe neither inflated so rapidly that no stars could form, nor so slowly that it collapsed back in on itself under the influence of its own mass, during the Big Bang at its origin. The electromagnetic force is of just the right strength so that electrons are bound to their molecules, but not so tightly that they cannot be exchanged between particles, with all the extraordinary effects on exchange of energy that enables in a wide variety of systems.&lt;/p&gt;
&lt;p&gt;Many more examples could be multiplied; the point is that if any of these or many other factors were only very slightly different, the universe would not exist as we know it, and nothing remotely like human life could exist at all. Moreover, there seem to be very many (possibly infinite) other possible values for these constants. There is no apparent reason the gravitational field &lt;em&gt;could not&lt;/em&gt; be twice as strong or a third as strong as it is, for example. So the universe seems to have been designed—its basic “settings” fine-tuned—to be a place inhabitable by creatures like human beings.&lt;/p&gt;
&lt;p&gt;Two of the stronger and more common arguments advanced against the fine-tuning hypothesis are the anthropic principle, and the many worlds hypothesis. Proponents of the anthropic principle as an explanation of the fine-tuning note that the only way anyone &lt;em&gt;could&lt;/em&gt; exist to observe the universe is if it had these constants. Since people are here and do observe the universe, it is unsurprising that the universe has these constants. On the one hand, this seems patently obvious: of course the only kind of universe which could be observed by creatures like humans is one suitable for them to live in. On the other hand, it seems to miss the point entirely. If a firing squad of a dozen crack marksman line up to carry out an execution, all with live ammunition, all at close range, and after they all fire the person to be executed still lives, it does not serve as an explanation to him to say, “Well, obviously you could only be here to talk with us about this if you lived; if you had died you wouldn’t be here.” The improbability of surviving such an event demands explanation. So, too, the improbability of the one universe that exists having these properties demands explanation. After all, its existence does not &lt;em&gt;depend&lt;/em&gt; on the people observing it (not least since there were no people around to observe it for most of its very long history). These factors exist entirely independent of the observers, and as such the fine-tuning argument is well-warranted.&lt;/p&gt;
&lt;p&gt;A strong form of the argument might take into account the problems that come from observation selection effect. If one noted that all amoebas which have ever been observed were within an inch of a microscope, and then inferred that therefore all amoebas which &lt;em&gt;exist&lt;/em&gt; are within an inch of a microscope, this would be a bad observer selection inference. The limitations of the observation prejudice the availability of the data. Likewise, if one had a net which was capable of catching only ten-inch-long or larger fish, and inferred from catching only ten-inch-long or larger first that there were not smaller fish in the pond, the inference would be a bad one. However, the fine-tuning argument is not like this. Rather, it is more like an argument which says: (1) Offspring are usually fairly like their parents. (2) This fish is just over ten-inches long. (H3) The fish might have parents which are only one inch long each. (H4) The fish might have parents which are nine to eleven inches long. (5) Observation 2 is much more likely on H4 than on H3 given Observation 1. Therefore (6) this fish’s parents were probably nine to eleven inches long. This argument might be wrong, but it is nothing like the earlier, obviously silly examples. The fine-tuning argument is of the same basic form: (1) The physical constants of the universe could have had any of a very wide, possibly infinite array of values. (2) The universe’s physical constants are just such that life is possible. (H3) The universe was created by God. (H4) The universe arose by chance. (5) Observation 2 is much likelier on H3 than on H4 given Observation 1. Therefore, more probably the universe was created by God.&lt;/p&gt;
&lt;p&gt;Because of the severe problems with the argument from the anthropic principle, some atheists have instead advanced a many-worlds hypothesis. In this view, there are many universes—trillions, perhaps an infinite number. Universes constantly bubble into existence from the quantum foam, expanding with their own randomly chosen variations on the constants. Given such a plethora of universes, it is no longer improbable that a universe such as this one exists; in fact, its seems &lt;em&gt;very&lt;/em&gt; probable. There are several serious problems with this idea, however. The first is that while it may make more probable the existence of &lt;em&gt;some&lt;/em&gt; universe with a given set of constants, it does not make more probable the fine-tuning of any specific universe. The same basic problem faced by the anthropic principle explanation therefore still applies: out of all the universes out there, why is &lt;em&gt;this&lt;/em&gt; one well-tuned for existence? Turning the earlier example slightly: imagine that an execution would be stayed only if every die in a set of 20 20-sided dice came up with a one. If an execution &lt;em&gt;were&lt;/em&gt; stayed on that basis, the event would not be explained by the existence of many worlds such that it is likely that such a thing would happen in &lt;em&gt;some&lt;/em&gt; world. It would still seem (and be!) a miraculous survival. Second, and more seriously, the many-worlds hypothesis introduces an infinite regress, but of something which is not apparently &lt;em&gt;necessary&lt;/em&gt;: the universe. But if the problem is to be solved by introducing either infinite regress, or by treating something as necessary, the multiplication of worlds seems to radically reduce simplicity relative to the idea that God exists. Moreover, incidentally, on the Christian God’s existence it seems far more probable that universes would be fine-tuned for life even on the many-worlds hypothesis, for the Christian God is interested in knowing and being known by creatures; no such constraint is operative in a non-theistic many-worlds scenario.&lt;/p&gt;
&lt;p&gt;Neither of these arguments against the fine-tuning argument is very telling. Both are very nearly question-begging, in fact, and in each case it still looks far more likely that the universe is fine-tuned because someone wanted it to support life, than that it just happened that way by chance.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Classical Mechanics Doesn't Exclude Miracles</title><link href="http://www.chriskrycho.com/2016/classical-mechanics-doesnt-exclude-miracles.html" rel="alternate"></link><published>2016-05-17T22:20:00-04:00</published><updated>2016-05-17T22:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-17:/2016/classical-mechanics-doesnt-exclude-miracles.html</id><summary type="html">Some philosophers and theologians have supposed that classical mechanics excludes God's acting in the world specially (i.e. miracles). This is nonsense of the highest order.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;Does classic (Newtonian) physics constitute a defeater for belief in special divine action?&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;It is a common-place of some older philosophy of science and religion to suppose that the universe described by Newton’s laws of mechanics, Maxwell’s equations, and so on was a place of such regularity that there was no room for miracles. Because the laws posited deterministic systems in which the outcome of any given system could be known &lt;em&gt;exactly&lt;/em&gt;, given the total set of antecedent conditions, some philosophers took the system to be indicating that determinism was a fact of the universe. Divine intervention would then be ruled out: God interacting with the universe would break Newton’s laws of mechanics and Maxwell’s laws of electromagnetism, and scientific laws more generally. Antithetical though this stance might seem to be to the Christian faith, a number of prominent philosophers and theologians, including such high-profile figures as Mackie and Bultmann, have affirmed this premise and integrated it into their theologizing. They were willing to affirm the “C phenomena”—God’s &lt;em&gt;creating&lt;/em&gt;, &lt;em&gt;conserving&lt;/em&gt;, and &lt;em&gt;concurring&lt;/em&gt; work in the world—but not the “M phenomena” of &lt;em&gt;miracles&lt;/em&gt;, God intervening directly in the world.&lt;/p&gt;
&lt;p&gt;The first and most obvious problem with the idea that the scientific laws in question would be violated by a divine special intervention is that the laws themselves specify that they hold for closed systems. Newton’s laws of mechanics, for example, require conservation of mass and energy within a system—as long as, and only as long as, there is no external input into the system. If an external force does act on a system, then momentum (e.g.) is not conserved. Likewise, Maxwell’s formulations describe the behavior of electromagnetic fields in a closed system. God intervening, however, would by definition mean the system is &lt;em&gt;not&lt;/em&gt; closed. It is not that God would be violating the laws. Rather, the laws describe a different situation from the one in which God acts specially.&lt;/p&gt;
&lt;p&gt;Theologians such as Mackie and Bultmann who rejected miracles as “mythologizing” and out of bounds did not deny that God interacted with the world in any way, only that he did not interact &lt;em&gt;specially&lt;/em&gt; with it. Unfortunately, the arguments they raise against God’s acting specially in the world argue against God’s acting in the world at all. Their argument runs something like this: if the state of the world is known at time T, and these laws hold, then the state of the world at time T* can be known as well. But if God specially intervenes, if he engages in a miracle, then this is no longer so. That would be violating the laws, and so he does not (perhaps cannot, if he wishes to uphold his world) perform miracles. However, precisely the same is true of those “C-phenomena.” If God had not created the world, obviously the world would not exist and nothing would occur. If he does not conserve the world so it continues to exist, then no matter what was known about the state of the world at time T, nothing whatsoever can be said of it (even that it still exists) at time T*. If he does not continue to concur with the function of the world he has designed, so that the laws he designed remain in force, then chaos follows. Whatever was so at T is in no way related to what happens at time T* if God is not upholding the causal powers of everything in the universe. Miracles, then, are not &lt;em&gt;special&lt;/em&gt; in this way. Their specialness is in their distinction from the way God ordinarily conducts himself in the world.&lt;/p&gt;
&lt;p&gt;It might here by objected that this leaves the theist with no way to distinguish between miraculous and ordinary events: both are simply the outcome of God’s will. This is patently false. On this objection, no one could ever identify any rare event, nor claim that something had happened which had never happened before. Nor could science develop; it is precisely identifying outlying phenomena and ways things differ from human expectations and current predictions about the world which drives scientific exploration. If indeed God conserves and concurs with the universe in a pattern he ordained, then the times when he acts unusually—out of step with the normal—will look quite different.&lt;/p&gt;
&lt;p&gt;One further objection might be raised, about the inconsistency of God’s acting specially in the world at all. Why, the skeptic about miracles might ask, would God &lt;em&gt;need&lt;/em&gt; to act in the world in these ways—should he not be able to set everything up ahead of time so that things fall out without his intervention. This has an apparent simplicity in its favor. It seems, though, that it assumes a particular view of the desires of God—for a basically mechanical system in which he will never need to intervene. If instead God desires to be known by some of the creatures in his world, it seems the opposite is true. Establishing an orderly world will not only make it habitable for those creatures, and will not only allow them to flourish and succeed therein; it will allow him to reveal himself to them &lt;em&gt;by way of miracles&lt;/em&gt;. If the world were chaotic, no event would seem strange. If he never intervened, he would be difficult or impossible to know. Precisely because he creates an orderly world and both conserves it in being and concurs with the causal powers with which he initially endued it, the times when he &lt;em&gt;does&lt;/em&gt; act distinctively are revelatory.&lt;/p&gt;
&lt;p&gt;In light of all this, any discussion of God “breaking” or “violating” the laws of nature seems entirely wrong. The laws simply do not apply to those conditions. They describe what happens in the case when the world proceeds in the ordinary way, precisely because of God’s creating, conserving, and concurring with the world. But God is not constrained by them; the regularities exist because he desires them to! He is free to act in different ways when it suits his purpose.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Realism and Antirealism</title><link href="http://www.chriskrycho.com/2016/realism-and-antirealism.html" rel="alternate"></link><published>2016-05-16T23:55:00-04:00</published><updated>2016-06-06T07:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-16:/2016/realism-and-antirealism.html</id><summary type="html">Critical scientific realism, though it has serious challenges, is the best explanation of the success of science and model of scientific knowledge. Applying this to the question of creationism yields helpful insights into the debate.
</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;N.B. This copy of the paper has been lightly revised for grammar, spelling, etc. You can see the full revision history &lt;a href="https://github.com/chriskrycho/chriskrycho.com/commits/master/content/classwork/phi7650-paper.md"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="part-i-argument-for-realism" class="level1"&gt;
&lt;h1&gt;Part I: Argument for Realism&lt;/h1&gt;
&lt;section id="introduction-definition-constraints" class="level2"&gt;
&lt;h2&gt;1. Introduction, Definition, Constraints&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Because these facts… are so striking, because there was no reason &lt;em&gt;a priori&lt;/em&gt; to expect man to be able to achieve such cognitive feats, because no undertaking can guarantee success &lt;em&gt;of this particular sort&lt;/em&gt;, we are confronted with a genuine problem: why is science so successful?&lt;span class="citation" data-cites="laudan:beyond-realism"&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The success of science over the last four hundred years has produced a radical increase in effective prediction of natural phenomena across a wide array of domains. It has also yielded a striking ability to intervene successfully in the natural world in areas as diverse as biology and medicine on the one hand, and particle physics and the development of computing technology on the other. Yet, when scientists speak of electrons, quarks, dark matter, and so on—phenomena not directly accessible to ordinary human experience, but in many cases directly related to this empirical and technological success—it is an open question in philosophy of science whether such entities really exist, or are merely useful ways of solving problems and dealing with data. Scientific realism is the affirmation that the entities postulated by scientific theories actually do exist. This claim does not entail the success of all scientific theories, and is therefore not compromised by the failure and replacement of some scientific theories. Nor does it require that all theories be embraced equally firmly. It simply means the claims and practice of science do really, if only approximately, describe the world. This paper will argue that critical realism is the best explanation for science’s success, and that it correctly characterizes the relationship between scientific models and the world they describe.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="reasons-for-accepting-realism" class="level2"&gt;
&lt;h2&gt;2. Reasons for Accepting Realism&lt;/h2&gt;
&lt;section id="a.-analogical-reasoning" class="level3"&gt;
&lt;h3&gt;a. Analogical Reasoning&lt;/h3&gt;
&lt;p&gt;One of the most straightforward arguments in favor of scientific realism is the intuition toward realism in general. When a detective examines a murder scene, she tends to assume the hypothesized criminal actually exists. Further analysis may or may not bear out the initial hypothesis about who committed a crime—perhaps it was a psychotic killer escaped from a mental ward, not an acquaintance of the deceased—but her normal faculties reliably point toward real entities in the world. Moreover, the process of analysis generally leads an (honest) investigator toward an increasingly accurate mental picture of the perpetrator. Missteps may occur in the analysis, but are amenable to critical reassessment, so that even when the revision from the original hypothesis is substantial, the trend-line of the mental model is toward increasing accuracy. The basic picture was refined, not destroyed: the victim was not after all killed by a wizard from Alpha Centauri (and even that would be a malicious, person-like agent).&lt;/p&gt;
&lt;p&gt;Science, on a realist view, operates similarly. Initial hypotheses may prove to have more or less in common with the real world, and not only may but &lt;em&gt;must&lt;/em&gt; be subject to revision, even radical revision along the way. However, theories should be treated realistically, both ontologically (there really is something out there to know) and epistemically (science grants access to reality, albeit in approximate and limited fashion).&lt;/p&gt;
&lt;p&gt;The primary argument against this analogy toward scientific realism is the idea of in-principle unobservables.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The crime scene investigator has direct experience of things like criminals (other human persons, at least) as well as of the evidence itself. No one has direct experience of electrons. More than this, the postulates of quantum mechanics (are taken to) suggest that no one &lt;em&gt;can&lt;/em&gt; have such direct experience. Then, the antirealist argues, the scientific claim is at best unknowable: electrons may exist, but scientists have no way of knowing. They may observe a trail in a gas cloud, but whether the thing leaving the trail is really like an electron is unknowable.&lt;/p&gt;
&lt;p&gt;Any such attempt to distinguish in principle between observables and unobservables fails.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; First, antirealists use “unobservable” to mean anything not directly observable by human senses. However, declaring such objects in-principle unobservable is question-begging: the point under debate is just whether things detected indirectly are being observed or simply hypothesized. Antirealists must first establish such an in-principle distinction between indirect and direct observation. Realists note that indirect observation is rightly considered reliable in the realm of ordinary experience, and can rationally be extended analogically. It is reasonable to conclude that the wind is blowing from seeing its effects on trees even if sitting inside a closed room (with no direct experience of the wind). This would be so even for a person who had spent his entire life locked up inside and therefore had never had direct experiential access to wind or trees. Indirect observations still count as observations.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="b.-whole-cloth-reasoning" class="level3"&gt;
&lt;h3&gt;b. Whole-Cloth Reasoning&lt;/h3&gt;
&lt;p&gt;Moreover, human reasoning seems to be “whole cloth.” It is difficult (if not impossible) to find any particular line, even a blurry one, where this kind of inferential reasoning becomes suspect.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Granted that electrons are quite different from anything of which humans have direct experience, this is not finally telling against reasoning about them. Humans are quite capable of making the requisite fine distinctions required for analogical reasoning to be valid; indeed, scientific models of electrons expressly include both similarities to and sharp discontinuities with human experience.&lt;/p&gt;
&lt;p&gt;Second, a realist view rightly makes sense of the way “observability” lies along a spectrum. On one end are those phenomena which can be detected through (normal, healthy) human senses such as hearing or vision. Moving down toward the not-directly-observable spectrum, scientists use telescopes and microscopes to enhance their ability to observe things inaccessible to ordinary human sight because of distance and size respectively. In both cases, however, there is no clear line distinguishing “observable” from “unobservable”—only a spectrum of more- or less-&lt;em&gt;directly&lt;/em&gt;-observable phenomena. Insects may be observed with the unaided human eye, bacteria with optical microscopes, individual molecules of materials with electron microscopes. In each case, the same principle is at work in the observation: light bouncing off an object and being received.&lt;span class="citation" data-cites="maxwell:theoretical-entities"&gt;&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The anti-realist may object: the fact that the distinction between observables and unobservables is blurry does not mean it does not exist. As Samir Okasha notes, the line between “bald” and “hirsute” may be fuzzy (pun intended), but it is still possible to identify a bald man.&lt;span class="citation" data-cites="okasha:science-introduction"&gt;&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Even granting the in-principle distinction between “observable” and “unobservable,” however, the objection fails to establish the strong claim made by antirealists. It does not establish that the items in question are in fact unobservable (especially when confronted with the realist argument for indirect observation). Nor does it establish that scientists would be in principle incapable of correctly modeling unobservables. At most, it establishes that there &lt;em&gt;may&lt;/em&gt; be unobservable phenomena.&lt;span class="citation" data-cites="okasha:science-introduction"&gt;&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Thus, it is reasonable to suppose that though current models of astronomical behavior, or of quantum mechanics, or gravity, or any other only-indirectly-observable phenomena may be incomplete or partial, they nonetheless represent something &lt;em&gt;actual&lt;/em&gt;. There really is an electron leaving a trail in the gas chamber.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="c.-no-miracles" class="level3"&gt;
&lt;h3&gt;c. No Miracles&lt;/h3&gt;
&lt;p&gt;The substantial success of science in both predicting and providing coherent explanations for empirical phenomena, it seems &lt;em&gt;prima facie&lt;/em&gt; strange that the hypotheses in question would have nothing whatsoever to do with reality. It would be a miracle of sorts if a set of theories which do not directly rely on each other would all work effectively, and effectively &lt;em&gt;in conjunction&lt;/em&gt;, while not actually saying anything true about the world. These predictions are more than merely theoretically interesting; they have real-world application used every day: “laser technology is based on a theory about what happens when electrons in an atom go from higher to lower energy-states. And lasers work…”&lt;span class="citation" data-cites="okasha:science-introduction"&gt;&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; It seems reasonable that one reason scientific theories have been so successful is that they are approximately accurate, and increasingly so over time (if in fits and sometimes with false starts).&lt;span class="citation" data-cites="putnam:mathematics:1979 vanfraassen:scientific-image"&gt;&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Many critics think the evidence of change in adoption of given theories, and varying degrees of empirical success over time, is hard evidence against the notion that scientific theories generally do refer in this way. Similarly, some theories once held to be &lt;em&gt;true&lt;/em&gt; are now thought to be neither approximately true, nor even subsets of what is true. Larry Laudan, citing a number of changes in this vein, sniffs: “The realist’s claim that we should expect referring theories to be empirically successful is simply false.”&lt;span class="citation" data-cites="laudan:confutation"&gt;&lt;a href="#fn10" class="footnote-ref" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;First, the fact that science is an iterative and approximative process does not tell against the realism asserted. Any given theory may be substantially false. This does not mean all theories are &lt;em&gt;likely&lt;/em&gt; not to refer, only that realists must be critical, aware of the possibility of failure, and willing to hold their claims tentatively, especially at first. No scientist with a knowledge of the history of the discipline should think otherwise. Electrons might not exist; but at least for the present, there is good reason to treat them not only as useful but as real. The longer the predictions of the model are (not dis)confirmed by the evidence, the more reason scientists have for holding the conclusion confidently. Likewise, as other theories developed without direct reference provide further corroboration, it is increasingly rational to affirm a theory as true, as well as empirically useful.&lt;/p&gt;
&lt;p&gt;Second, even if Laudan’s point is granted, it does not disprove realism. It simply proves naïve realism false—naïve, even. True: empirical success does not guarantee the truthlikeness of a theory, and vice versa. It does not follow that there is &lt;em&gt;no&lt;/em&gt; correspondence between the two. Laudan insists that the truthlikeness of a given theory has zero bearing on its empirical fruitfulness, but it is at least possible that it is instead a contributory factor.&lt;a href="#fn11" class="footnote-ref" id="fnref11"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, what about later theories which do &lt;em&gt;not&lt;/em&gt; make special cases of the earlier theory? When Laudan, Kuhn, van Fraassen, and others examine e.g. the fluid and aether theories and compare them to the atomic theories now held by most physicists, they note that science has been empirically useful without being true in the past; the same may be true today. However, later views, currently held by realists to be accurate, can often explain the success of the earlier theory even without claiming it as a subset.&lt;span class="citation" data-cites="putnam:three-kinds-of-realism"&gt;&lt;a href="#fn12" class="footnote-ref" id="fnref12"&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The atomic theory lets scientists explain the appearance of the aether. Newton’s mechanics can be applied to show why Ptolemy’s epicycles worked, even though they were false. The later theory not only has greater empirical success; its explanatory power also includes the now disconfirmed theory—whether as a special case or not. To be sure, the idea that all science proceeds linearly and that every theory is this kind of empirical superset of the former is incorrect.&lt;a href="#fn13" class="footnote-ref" id="fnref13"&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt; Still, the fact that later theories &lt;em&gt;often&lt;/em&gt; can do so is further evidence that truthlikeness is a contributory factor in the success of scientific theories.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="alternatives-to-realism" class="level2"&gt;
&lt;h2&gt;3. Alternatives to Realism&lt;/h2&gt;
&lt;p&gt;The two broad categories of antirealism, rational and non-rational, both deny the rationality of believing science truly describes the world.&lt;a href="#fn14" class="footnote-ref" id="fnref14"&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt; Larry Laudan’s instrumentalism, Bas C. van Fraassen’s constructive empiricism, and J. P. Moreland’s eclectic approach are &lt;em&gt;rational&lt;/em&gt; antirealisms. They all affirm the rationality of the scientific enterprise and reject conceptual relativism.&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn15" class="footnote-ref" id="fnref15"&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Non-rational antirealisms such as a strong Kuhnian approach deny the rationality of science and affirm conceptual relativism. Each fails as a critique of or alternative to critical realism.&lt;/p&gt;
&lt;section id="a.-larry-laudans-instrumentalism" class="level3"&gt;
&lt;h3&gt;a. Larry Laudan’s Instrumentalism&lt;/h3&gt;
&lt;p&gt;Instrumentalism takes the effectiveness of science as indicating only its effectiveness in delivering more reliable predictions.&lt;span class="citation" data-cites="laudan:beyond-realism"&gt;&lt;a href="#fn16" class="footnote-ref" id="fnref16"&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Philosophers like Larry Laudan reject as both irrelevant and false the idea of “partial truth” or “verisimilitude” as incoherent: in a semantic model, statements are either true or false. This is partly fair: scientists claim their models have a semantic content corresponding approximately to the world. Yet the critique fails to account for the way scientists use the notion of “approximate-ness.” Models may be incomplete, yet yield correct results &lt;em&gt;when the approximation is appropriate&lt;/em&gt;. There are thus three important distinctions to be made. The first is between accuracy (how near the &lt;em&gt;actual&lt;/em&gt; value a given experiment is) and precision (the repeatability of a measurement). An archer who consistently shoots four inches to the right of the bullseye is precise but not accurate; one who is always within two inches of the target but all around it is accurate, but not precise. The second is between accuracy and the philosophical binary of truth. A scientific model might in the strict sense be “false”—that is, even its predictions are not empirically &lt;em&gt;true&lt;/em&gt;, only &lt;em&gt;close to correct&lt;/em&gt;, while the model may be more accurate than any previous model. An arrow is either within the bullseye or not, but there is more to scoring an archery contest—and more to evaluating the accuracy of scientific claims.&lt;/p&gt;
&lt;p&gt;The third distinction, and the most serious, is between models’ empirical content and their semantic content. A theory might be said to be “more true,” i.e. more &lt;em&gt;accurate&lt;/em&gt;, than any predecessor, if it is more consistent with the empirical data or capable of explaining a broader set of such data. However, the semantic claim is more likely to be binary. Either there are electrons, or there are not. If not, there may be nothing very much like electrons at all. Even so, this distinction is less sharp than Laudan supposes. Increasing approximation of reality is possible. Models may have more or less fidelity. A perfectly round globe may strictly be a false representation of the earth, which is slightly squashed due to its spin; but it is nearer correct than a piece of paper or a donut. The earth is much more like a sphere than a plane or a toroid. If reality is more like the Standard Model of quantum mechanics’ description of electrons and quarks than it is like a pre-atomic view of reality, the Standard Model is a better approximation to reality than the pre-atomic view. Voiding the distinction between accuracy and binary truth is simply a category mistake.&lt;/p&gt;
&lt;p&gt;Finally Laudan shows how the scientific methodologies developed over the past several hundred years work, but not &lt;em&gt;why&lt;/em&gt;—especially in cases quite different from his example of double-blind clinical studies.&lt;span class="citation" data-cites="laudan:beyond-realism"&gt;&lt;a href="#fn17" class="footnote-ref" id="fnref17"&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; In scenarios where technological control over the environment is at stake, science clearly has an edge on other methods (so his critique of relativism stands).&lt;span class="citation" data-cites="vanfraassen:scientific-image"&gt;&lt;a href="#fn18" class="footnote-ref" id="fnref18"&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; It is less clear why drug trials should be amenable to this sort of testing if the human body and drug interactions are not &lt;em&gt;more like&lt;/em&gt; the scientific models than the non-scientific models. It was precisely the belief in the accuracy of such models which gave rise to the instrumentally effective methodology! One might posit, then, that &lt;em&gt;realism itself&lt;/em&gt; is instrumentally useful in the pursuit of these technological gains. The problem, of course, is that such an epistemic stance is difficult to maintain at best. It is one thing (and not a very controversial one) to say that the scientific method is instrumentally effective. It is another to say that belief in scientific realism is instrumentally effective and false, because no one can sustain a belief they think false.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="b.-bas-c.-van-fraassen-and-constructive-empiricism" class="level3"&gt;
&lt;h3&gt;b. Bas C. van Fraassen and Constructive Empiricism&lt;/h3&gt;
&lt;p&gt;In Bas C. van Fraassen’s constructive empiricist model, science is (or at least should be) concerned solely with explaining the empirical data available to the human senses. Theories are useful but not true; they “do much besides answer the factual questions about regularities in the observable phenomena which, according to empiricism, are the scientist’s basic topic of concern.”&lt;span class="citation" data-cites="vanfraassen:scientific-image"&gt;&lt;a href="#fn19" class="footnote-ref" id="fnref19"&gt;&lt;sup&gt;19&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;At least three major problems confront van Fraassen’s view. One is van Fraassen’s prior commitment to materialist empiricism. He asserts, for example, that criteria such as mathematical elegance, simplicity, scope, completion, unification, and explanatory “provide reasons for using a theory… and &lt;em&gt;cannot&lt;/em&gt; rationally guide our epistemic attitudes and decisions.”&lt;span class="citation" data-cites="vanfraassen:scientific-image"&gt;&lt;a href="#fn20" class="footnote-ref" id="fnref20"&gt;&lt;sup&gt;20&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Why? Because he regards human observational powers as the sole grounds of knowledge. As such, he also rejects any critique of the limitations of “sense data” or problems with human perception as “armchair psychology” which can safely be ignored.&lt;span class="citation" data-cites="vanfraassen:scientific-image"&gt;&lt;a href="#fn21" class="footnote-ref" id="fnref21"&gt;&lt;sup&gt;21&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The &lt;em&gt;sole&lt;/em&gt; point of interest, for van Fraassen, is explaining those regularities in observable phenomena. As Grover Maxwell comments, though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Surely the main concerns of, say, a theoretical physicist involve such things as the actual properties and varieties of subatomic particles rather than mere predictions about where and how intense a certain spectral line will be.&lt;span class="citation" data-cites="maxwell:theoretical-entities"&gt;&lt;a href="#fn22" class="footnote-ref" id="fnref22"&gt;&lt;sup&gt;22&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Indeed, even in conducting their ordinary research, theoretical physicists and chemists are concerned with things they think actually exist. However much van Fraassen thinks science &lt;em&gt;should&lt;/em&gt; only concern itself with those regularities, realism seems basic to the scientific endeavor as actually practiced.&lt;a href="#fn23" class="footnote-ref" id="fnref23"&gt;&lt;sup&gt;23&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The second problem for van Fraassen is closely related to the first: “empirical adequacy” is a necessary but insufficient condition for the acceptance of a scientific theory. Scientists do (and must) embrace those other conditions for accepting theories as true, and rightly so. Nothing about using those criteria to decide between theories is irrational in the least apart from van Fraassen’s prior commitment to empiricism.&lt;/p&gt;
&lt;p&gt;Finally, van Fraassen simply reasserts the distinction between observable and unobservable entities. He begins with the idea of in-principle unobservability, but on encountering Maxwell’s argument from technological improvements, he moves the goalposts. He has in mind, he says, the limitations of human beings “&lt;em&gt;qua&lt;/em&gt; human beings;” technological aids actual or imaginable are irrelevant.&lt;span class="citation" data-cites="vanfraassen:scientific-image"&gt;&lt;a href="#fn24" class="footnote-ref" id="fnref24"&gt;&lt;sup&gt;24&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; As shown above, though, the lack of any such clear distinction is the major problem for the antirealist interested in maintaining this distinction.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="c.-morelands-selective-antirealism" class="level3"&gt;
&lt;h3&gt;c. Moreland’s Selective Antirealism&lt;/h3&gt;
&lt;p&gt;J. P. Moreland suggests an alternative from within a Christian epistemology and ontology. He fully grants a generally realist epistemology and affirms a correspondence view of truth. However, he also approves a cautiously eclectic approach to &lt;em&gt;scientific&lt;/em&gt; realism.&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn25" class="footnote-ref" id="fnref25"&gt;&lt;sup&gt;25&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; He offers two major criteria for adopting antirealist stances. The first is “in those cases where the phenomena described by that theory lie outside the appropriate domain of science, or the scientific aspect of some phenomenon is inappropriately taken to be the whole phenomenon itself.”&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn26" class="footnote-ref" id="fnref26"&gt;&lt;sup&gt;26&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; For example: scientific explanations of mind currently tend toward reductive physicalism. But if there are good reasons to suspect that the mind is not reducible to the brain (say: the whole history of dualist arguments), any scientific theory which purports to explain mind solely in terms of material function should be treated antirealistically—as instrumentally useful, but not &lt;em&gt;true&lt;/em&gt;. But a critically realist claim about physical-mental state correlation does not entail physicalism. Rather, the physicalist claim is not scientific but philosophical. This should certain chasten the materialists, but it is not proof against realism—not generally, and not even in the case of this specific theory. It is proof only against unwarranted extension from the claim.&lt;/p&gt;
&lt;p&gt;Moreland also argues that “an antirealist stances should be taken toward some scientific theory in those cases where a realist view conflicts with a rationally well-established conceptual problem for that theory but an antirealist view does not.”&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn27" class="footnote-ref" id="fnref27"&gt;&lt;sup&gt;27&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; He suggests that the logically problematic claims of some interpretations of quantum mechanics suggest a non-realist interpretation: “the indeterminacy in nature is due to the uncertainty of our knowledge of nature or our inability to measure nature and is not a feature of nature itself.”&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn28" class="footnote-ref" id="fnref28"&gt;&lt;sup&gt;28&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Similarly, if there are good philosophical reasons for rejecting infinite regress, one should be confident rejecting even an instrumentally-useful cosmological model of an infinite universe.&lt;/p&gt;
&lt;p&gt;In these latter examples, however, as well as in the further criteria he briefly mentions,&lt;a href="#fn29" class="footnote-ref" id="fnref29"&gt;&lt;sup&gt;29&lt;/sup&gt;&lt;/a&gt; Moreland lumps together two distinct phenomena under the same label of “anti-realism.” One is an in-principle denial that certain kinds of data are available to us; the other a denial that a &lt;em&gt;specific model&lt;/em&gt; comports with reality. One might think that all theories about electrons are permanently subject to antirealist critiques and that we can have no true knowledge of such allegedly unobservable entities. This is quite different from thinking that a given cosmological model is wrong. Both entail prior commitments, and the warrant in both cases arises outside science. They are nonetheless different kinds of claims: one about what is knowable, and one about what actually is. Even if Moreland’s criteria were granted, this is very different from van Fraassen’s empiricism or Laudan’s instrumentalism. Rejecting a given theory is quite different from rejecting the possibility of a theory being true.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="d.-non-rational-antirealism" class="level3"&gt;
&lt;h3&gt;d. Non-Rational Antirealism&lt;/h3&gt;
&lt;p&gt;The strongest form of Thomas Kuhn’s description of scientific history emphasizes that the theories on either side of a scientific revolution are totally incommensurable, actually operating in “different worlds.”&lt;span class="citation" data-cites="kuhn:revolutions:2012"&gt;&lt;a href="#fn30" class="footnote-ref" id="fnref30"&gt;&lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The shift away from Aristotelian is one where Galileo &lt;em&gt;saw differently&lt;/em&gt; than he had before.&lt;a href="#fn31" class="footnote-ref" id="fnref31"&gt;&lt;sup&gt;31&lt;/sup&gt;&lt;/a&gt; Kuhn’s protests that he understands the problem with the phrase notwithstanding, he regularly reverts to the idea that scientists before and after revolutions lived in different worlds.&lt;span class="citation" data-cites="kuhn:revolutions:2012"&gt;&lt;a href="#fn32" class="footnote-ref" id="fnref32"&gt;&lt;sup&gt;32&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; This cannot be right: even if the theories are distinct in important ways, and even if are not totally commensurable, there are certainly data on which they can agree. Even if what the planets were seen &lt;em&gt;as&lt;/em&gt; shifted between the Ptolemaic and the Keplerian eras, the basic observational data were agreeable to both, for example. Likewise, though mass has different semantic content in the Newtonian and Einsteinian conceptions, both agree on many of the empirical values—including problematic measurements which prompted to the transition between them.&lt;/p&gt;
&lt;p&gt;Taken as a chastening of overconfident or naïve realism Kuhn’s historical critique is to be appreciated. His view of scientific revolutions leads him (or at least many of his readers) further, though—to conclude that observation is so theory-laden that, though the objective world is “out there” to describe, humans have no true access to it. The data itself is always subject to the flux of another revolution. Such a view, whatever its attractions, is first of all suspect simply on the reality that scientific approaches &lt;em&gt;have&lt;/em&gt; accomplished goals (like predicting and controlling floods) which cut across scientific and non-scientific cultures.&lt;span class="citation" data-cites="laudan:beyond-realism"&gt;&lt;a href="#fn33" class="footnote-ref" id="fnref33"&gt;&lt;sup&gt;33&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Second, any such non-rational antirealism stands clearly opposed to the Biblical idea that truth is knowable and that both moral and empirical data may be true or not—that the final standard is not human knowledge but the God-created reality outside the human knower. Third, such a view is self-defeating, as it claims objective knowledge about scientific theories while purporting that no such objective knowledge is possible.&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn34" class="footnote-ref" id="fnref34"&gt;&lt;sup&gt;34&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion-the-best-option" class="level2"&gt;
&lt;h2&gt;4. Conclusion: The Best Option&lt;/h2&gt;
&lt;p&gt;Scientific realism, then, is the best option. It has its limitations, and specific theories may well not be finally accurate descriptions of reality. Phlogiston, after all, is not real; it may turn out that quarks are not either. But neither radical skepticism nor even hard agnosticism are therefore warranted. Rather, a critical realism which acknowledges the limitations and possibility for inaccuracy in any given model is far more appropriate. This model best accounts for both science’s instrumental effectiveness as a standalone discipline and its applicability to other disciplines. It best makes sense of the philosophical issues around epistemology and ontology. It best explains how scientific theories advance over time, not necessarily linearly but such that later models to tend to be capable of treating earlier models either as special cases or as comprehensible misunderstandings. Not least, it best comports with the Biblical view of truth and knowledge.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="part-ii-excursusrealism-and-creationism" class="level1"&gt;
&lt;h1&gt;Part II: Excursus—Realism and Creationism&lt;/h1&gt;
&lt;p&gt;Antirealism holds an undeniable appeal to many young-earth creationists. If science is meaningful only in a pragmatic sense, then the creationist may happily accept the utility of science for technological innovation, while still rejecting scientific claims about the age of the earth and common descent of living organisms without any serious conflict. As Moreland comments, “After all, if one does not assume that evolutionary theory is approximately true or objectively rational, then why bother to argue against it or to integrate Christian theological claims about the history of life with evolutionary theory?”&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn35" class="footnote-ref" id="fnref35"&gt;&lt;sup&gt;35&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The more traditional (and admittedly more straightforward) reading of the Genesis narrative may be maintained, and the propositions of secular science safely sidelined as merely useful models which say nothing about the actual world. More, the off-putting claim often associated with scientific realism, “that science or the scientific method represents the &lt;em&gt;only&lt;/em&gt; (or, more weakly, the &lt;em&gt;most&lt;/em&gt;) effective instrument for discovering truths about the world”&lt;span class="citation" data-cites="laudan:beyond-realism"&gt;&lt;a href="#fn36" class="footnote-ref" id="fnref36"&gt;&lt;sup&gt;36&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; may be safely rejected.&lt;/p&gt;
&lt;p&gt;This excursus aims to show that, whatever the appeals of an antirealist stance for young-earth creationism, such a view is deeply mistaken. First, as seen above in Part I, there are good reasons to embrace realism in general, and to reject the major alternatives on offer. Second, even if one embraces an eclectic stance, &lt;em&gt;a la&lt;/em&gt; J. P. Moreland, the relevant criteria do not apply to the creation-science debate specifically. Third, in order for the antirealist objection to prove useful in the creation-science debate, it must go far beyond those criteria anyway—it must treat nearly &lt;em&gt;all&lt;/em&gt; modern science antirealistically. It smuggles in a radical skepticism not especially congenial to Christian thought. It proves too much.&lt;/p&gt;
&lt;section id="the-argument-applied" class="level2"&gt;
&lt;h2&gt;1. The Argument Applied&lt;/h2&gt;
&lt;p&gt;The constructive empiricist program has severe problems for the Christian. As van Fraassen freely admits in the introduction to “The Scientific Image”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By empiricism I mean the philosophical position that experience is our source of information about the world, &lt;em&gt;and our only source.&lt;/em&gt;&lt;span class="citation" data-cites="vanfraassen:scientific-image"&gt;&lt;a href="#fn37" class="footnote-ref" id="fnref37"&gt;&lt;sup&gt;37&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The motivation for a constructive empiricist view of science, then, is expressly the defense of empiricism. But empiricism as a worldview is antithetical to Christianity. Grover Maxwell searingly points out the underlying philosophical commitment: “the conviction that there are very few ontologically legitimate kinds of entities, perhaps only one.”&lt;span class="citation" data-cites="maxwell:theoretical-entities"&gt;&lt;a href="#fn38" class="footnote-ref" id="fnref38"&gt;&lt;sup&gt;38&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Empiricism as an all-encompassing &lt;em&gt;gestalt&lt;/em&gt; must be distinguished from the employment of empirical methods within other paradigms, of course: the Christian believes that the God-given senses are broadly trustworthy as a means of acquiring knowledge. However, Christians do (and must) affirm that non-empirical sources of data provide real warrant for belief: particularly divine revelation. Constructive empiricism is plainly antithetical to Christian theism—and certainly no friend to a claim about the age of the earth driven entirely by special revelatory considerations!&lt;/p&gt;
&lt;p&gt;Thus, the two kinds of anti-realism regularly embraced by young-earth creationists are instrumentalism and J. P. Moreland’s eclectic antirealism. Instrumentalism is at least at first blush much more appealing an option for Christians than empiricism. It allows the believer to affirm that science produces enormously helpful insights for technological advancement and control of the world.&lt;a href="#fn39" class="footnote-ref" id="fnref39"&gt;&lt;sup&gt;39&lt;/sup&gt;&lt;/a&gt; Beyond the basic critiques of instrumentalism noted in Part I, however, there are further problems for the young-earth creationist considering instrumentalism as an “out.”&lt;/p&gt;
&lt;p&gt;For example, one might reject scientific approaches for measuring the age of fossils or the earth itself. Current isotope decay rates explain some observations, and are technologically applicable to e.g. managing nuclear reactors—but they are merely useful, not true. As such, they are certainly not applicable to the past. Therefore, any claims about their past behavior should thereby be ruled out of bounds. Granted that the past is strictly inaccessible to scientists, this should still give the young-earth antirealist some pause. Dating a manuscript or a particular piece of pottery is not terribly dissimilar to dating a fossil. Taking this stance equally rules out much of the archaeological support mustered for the antiquity of the Bible. For that matter, how can one know that paper did not transmute words in the past? Claiming that documents changed their meaning would seem patently silly, but there is no more and no less evidence for it than that isotope decay rates have changed. Historical investigation of any sort, but especially archaeology, depends on the accessibility of the past much as geology does. It is not at all clear that reasoning about the earth suddenly becomes out of bounds at some arbitrary point far enough back in the past, or that radiometric isotopes should be assumed to be reliable up to a given point but no further.&lt;/p&gt;
&lt;p&gt;Worse, while astronomy and geology seem at least partly to follows Laudan’s model of problem-solving—the practice of the disciplines results in more empirically-adequate explanations over time&lt;a href="#fn40" class="footnote-ref" id="fnref40"&gt;&lt;sup&gt;40&lt;/sup&gt;&lt;/a&gt;—his pragmatic approach asserts that science never approaches the truth whatsoever. Science solves empirical problems and helps humans accomplish certain technical tasks, but it reveals nothing of the world itself. Like van Fraassen’s constructive empiricism, it is thus contrary to the biblical view of the world.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="morelands-criteria" class="level2"&gt;
&lt;h2&gt;2. Moreland’s Criteria&lt;/h2&gt;
&lt;p&gt;Notably, many young-earth creationists such as Ken Ham take an explicitly realist stance toward science overall, arguing for something like the eclectic realism of J. P. Moreland, rather than a true instrumentalism or empiricism. This makes sense: it seems that one or more of J. P. Moreland’s criteria for eclectic antirealism might give warrant for taking an antirealist stance toward some of the relevant theories. However, even if Moreland is right that “We should not automatically assume that if science and theology conflict… the scientific theory should be read in realist terms and attacked accordingly,”&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn41" class="footnote-ref" id="fnref41"&gt;&lt;sup&gt;41&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; there remain two major problems with applying Moreland’s criteria in this way.&lt;/p&gt;
&lt;p&gt;First, even if Moreland’s criteria for skepticism are valid, they are not applicable to the majority of the data under consideration in creationist arguments about e.g. the age of the earth. His first criterion certainly does not apply: the investigation of questions like the age of the earth or the life-cycle of stars or even the relationship between various kinds of life on earth all seem to be well within the legitimate territory of scientific explanation. His second criterion, having “a rationally well-established conceptual problem for that theory [which] an antirealist view does not,”&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn42" class="footnote-ref" id="fnref42"&gt;&lt;sup&gt;42&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; seems more applicable. Surely a well-established history of young-earth exegesis counts as a “rationally well-established conceptual problem”? Indeed, this is the strongest argument in favor Moreland’s eclectic empiricism applied to the issue. But of course, interpretations of the early chapters of Genesis have varied widely throughout the history of the church. This suggests at the least that the problem is less well-established that its proponents might think or hope. Moreover, it is relatively straightforward to propose readings of the creation narratives which accord with both the rest of Scripture &lt;em&gt;and&lt;/em&gt; with science—far more straightforward than to propose entirely new, mutually compatible systems of physics, geology, biology, etc. The shoe seems to be on the other foot.&lt;/p&gt;
&lt;p&gt;What about Moreland’s other suggested criteria?&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn43" class="footnote-ref" id="fnref43"&gt;&lt;sup&gt;43&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Most of the fields are &lt;em&gt;not&lt;/em&gt; especially young.&lt;a href="#fn44" class="footnote-ref" id="fnref44"&gt;&lt;sup&gt;44&lt;/sup&gt;&lt;/a&gt; Few of them (especially the cornerstone fields of astronomy, geology, and particle physics) have experienced a large proportion of theory replacement over refinement of existing theories. None of the fields are in a period of Kuhnian crisis. One stronger contender is that “non rational, sociological factors account for much of the theory’s acceptance by the scientific community.”&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn45" class="footnote-ref" id="fnref45"&gt;&lt;sup&gt;45&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; This certainly looks to be the case in some ways, and it is fair to critique the scientific community on those terms. However, the same could equally be said of the young-earth creationist stance itself: it has at times been difficult even to get a job in conservative evangelical institutions while denying young-earth creationism.&lt;a href="#fn46" class="footnote-ref" id="fnref46"&gt;&lt;sup&gt;46&lt;/sup&gt;&lt;/a&gt; Moreover, although the critique stands for some of the fields, it is certainly not applicable to all of them; there is no particular sociological pressure on findings about isotope decay rates relevant to the discussion, for example. Finally, one might claim of evolutionary biology that “the main virtue… is its empirical adequacy, and its more metaphysical, theoretical aspects can be understood as unnecessary, excess baggage”&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn47" class="footnote-ref" id="fnref47"&gt;&lt;sup&gt;47&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;—but again, the same can hardly be said of isotope decay or stellar life-cycle theories, neither of which has particularly strong metaphysical implications here!&lt;/p&gt;
&lt;p&gt;The second, related problem—conflating two distinct phenomena into a single label of “antirealism”—was noted above but warrants further discussion.&lt;span class="citation" data-cites="moreland:science:1989"&gt;&lt;a href="#fn48" class="footnote-ref" id="fnref48"&gt;&lt;sup&gt;48&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Again: one (strict instrumentalism or van Fraassen’s constructive empiricism) is an in-principle denial that certain kinds of data are available to us; the other a denial that a specific model is correct. So for example, one might think that all theories about electrons are permanently subject to antirealist critiques and that we can have no true knowledge of such allegedly unobservable entities; we can never know whether our theories about these things are in fact &lt;em&gt;true&lt;/em&gt;. Regardless of whether this claim is correct, it is quite different from thinking that a given cosmological model is wrong, while another one is correct (and demonstrably so if certain key assumptions were to be revisited). Both of these entail prior philosophical commitments, and in both cases the warrant for critiquing the realist claim arises outside of science itself, e.g. from a commitment to empiricism, or from a specific reading of Scripture. But they are nonetheless different kinds of claims: one about what is knowable, and one about what actually is the case.&lt;/p&gt;
&lt;p&gt;One can of course imagine an antirealist critique of the former sort being levied against some cosmological model or another, but this is not what young-earth creationists who adopt an antirealist stance toward cosmology (Moreland included) seem to be proposing. Moreover, precisely because these are different kinds of claims, the kinds of warrant for skepticism that are in play for scientific knowledge about electrons or quarks are quite different both in principle and practice from the relevant factors for cosmology, geology, and so on.&lt;/p&gt;
&lt;p&gt;Taking an anti-realist stance toward these phenomena, then, requires a radical degree of skepticism—more radical than Moreland’s criteria warrant, and as it turns out with rather sharp consequences for other domains.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="severe-and-undesirable-consequences" class="level2"&gt;
&lt;h2&gt;3. Severe and Undesirable Consequences&lt;/h2&gt;
&lt;p&gt;It is not sufficient to grant a certain suspicion about unobserved or indirectly observed phenomena.&lt;a href="#fn49" class="footnote-ref" id="fnref49"&gt;&lt;sup&gt;49&lt;/sup&gt;&lt;/a&gt; Rather, the would-be &lt;em&gt;creationist&lt;/em&gt; antirealist must commit to rejecting the realist validity of some or all the claims of: nuclear physics, geology, and paleontology (with serious repercussions to archaeology); general relativity; evolutionary biology; and observational astronomy (with direct application to cosmology). The consequences are no less devastating for the Christian worldview than for the physicalist,&lt;a href="#fn50" class="footnote-ref" id="fnref50"&gt;&lt;sup&gt;50&lt;/sup&gt;&lt;/a&gt; albeit for different reasons.&lt;/p&gt;
&lt;p&gt;First of all, the no-miracles argument applies not only to the question of realism in general but also to the age of the earth and universe specifically. It is profoundly unlikely that one could derive an empirically adequate scientific model of something like fundamental particles without any correspondence to reality. It is at least as unlikely that findings from a variety of unrelated fields should all agree, while also all being totally wrong. Though some young-earth creationists chalk up this outcome to conspiratorial forces in the sciences (so Henry Morris) or to the presuppositions held by non-Christian scientists (so many disciples of Van Til), the claim both strains credulity and also—more to the point—is simply inaccurate both historically and in the present. The history of scientific estimates of the age of the earth is particularly illuminating; committed Christian Lord Kelvin’s early and foundational work already pointed to an age in the millions of years at a minimum. Likewise, many working Christian scientists today find the evidence for the antiquity of the earth and the universe quite reasonable, and they would be neither member of a Morrisian conspiracy nor, as regenerate believers, subject to precisely the same Van Tillian noetic defects as their non-Christian colleagues.&lt;/p&gt;
&lt;p&gt;Independent lines of evidence for the antiquity of the universe and the earth include: astronomical observation and theories of star formation; cosmological development models and the prediction and discovery of the Big Bang background radiation in line with those models; geological and paleontological observations and associated data from decay rates which derive from fundamental physics. Many of these lines of data arose independently but have since been found to confirm one another. For example, isotopic decay rates are both predicted by particle physics and well-verified, and provide an independent line of evidence for the age of the earth in line with the ways of estimating that age: from patterns of stratification, to tree ring samples, to similar measurements of the age of other objects in the solar system. Models built up from the plate-tectonic theory of geology corroborates paleontological evidence of geographic colocation of certain species in the past. Radiometric dating of the age of the earth also accords with analyses of the age of the universe based on current models of star life-cycles and the formation of heavy elements, which in turn accord with models of cosmological development. These astronomical observations and analyses depend on both general and special relativity as well. Moreover, the evidence for these individual claims appears quite defensible to many confessing evangelical Christians. That &lt;em&gt;all&lt;/em&gt; these independent lines of evidence, leaning on nearly every major area of physics, earth science, and biology should coincide at all—much less so neatly—while being entirely false is just the kind of miracle subject to the critique levied above.&lt;/p&gt;
&lt;p&gt;Moreover, this kind of strong antirealism leads to a radical skepticism that seems very out of keeping with Scriptural teaching on the role of nature. Surely passages such as Psalm 19 and Romans 1 indicate clearly that the world has a kind of revelatory content, which points to the nature of the one who created it. But imagine the young-earth creationist adopts an antirealist stance toward astronomical observation as a way of rejecting the apparent age of the universe. This requires asserting all of the following: No star has gone supernova before the last 10,000 years, and thus the heavy elements were all created “in situ” and are not, as currently believed, the product of supernovae. Indeed, any kind of apparent stellar life-cycle is an illusion (or at least: has never actually been experienced by any star). The evidence of background radiation is merely coincidence, and is in fact unrelated to the apparent expansion of the universe indicated by the red-shift of stars further from the earth. The apparent expansion of the universe is just that: apparent only; it has only ever been fractionally different than it is. Whatever the apparent evidence, the light seen is not in fact from the stars apparently observed: given the apparent distance to most stars, and the best models of how stars work, many of the stars in the night sky would have ceased to be visible, whether by exploding into supernovae or by burning down to white dwarfs, long before they were actually created. In other words, there is literally nothing true revealed by observing the stars—not even the brute fact of their existence.&lt;/p&gt;
&lt;p&gt;Much the same could be said for the other sciences. The earth shows apparent geological history including incredible catastrophes—ice ages, impacts from meteors, and so on—which in point of fact &lt;em&gt;never happened&lt;/em&gt;. This is far more radical than instrumentalism, and stronger even than van Fraassen’s empiricism. It even goes beyond the kinds of claims advanced by the conceptual relativists. There is no possible evidence which could countervail against it. It is sheer fideism.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;4. Conclusion&lt;/h2&gt;
&lt;p&gt;Antirealism, particularly of the instrumental or eclectic varieties, may seem appealing to Christians troubled by the claims advanced by modern science. Whether the concern is with a kind of materialist “scientism” which strongly asserts a monadic view of human consciousness, or the apparent contradictions between Scripture and claims about the age of the universe, treating science as useful but not necessarily &lt;em&gt;true&lt;/em&gt; seems a helpful escape-hatch. However, adopting such a stance brings along so many other, and such severe, problems that whatever gains appears in this area seem not to be worth the cost—especially if there are other means of reconciling a realist view of science with Scripture’s teaching. Note that this does not mean that young-earth creationism is wrong. There may be other good reasons, including scientific reasons, to think that the earth is young.&lt;a href="#fn51" class="footnote-ref" id="fnref51"&gt;&lt;sup&gt;51&lt;/sup&gt;&lt;/a&gt; Programs of research oriented this direction may be fully realist while not affirming the veracity of any particular model. The distinction between principled antirealism and the rejection of a given theory is helpful and important.&lt;/p&gt;
&lt;p&gt;Scientists at times maintain their views in the face of contrary evidence, or because of presuppositions they refuse to relinquish. But so may exegetes. If there is good reason to be a realist about science generally (and there is), and seemingly good evidence for the age of the earth (and there is), it behooves Christians at the least to hold their young-earth views tentatively. The strength of the claim that the earth is young, given all the evidence, warrants some humility.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="bibliography" class="level1 unnumbered"&gt;
&lt;h1&gt;Bibliography&lt;/h1&gt;
&lt;div id="refs" class="references"&gt;
&lt;div id="ref-diegues-lucena:laudan:2006"&gt;
&lt;p&gt;Diéguez-Lucena, Antonio. “Why Does Laudan’s Confutation of Convergent Realism Fail?” &lt;em&gt;Journal for General Philosophy of Science&lt;/em&gt; 37, no. 2 (2006): 393–403.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-vanfraassen:scientific-image"&gt;
&lt;p&gt;Fraassen, Bas C. van. &lt;em&gt;The Scientific Image&lt;/em&gt;. Clarendon Library of Logic and Philosophy. OUP Premium, 1980.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-kuhn:revolutions:2012"&gt;
&lt;p&gt;Kuhn, Thomas S. &lt;em&gt;The Structure of Scientific Revolutions&lt;/em&gt;. 50th Anniversary Edition. 1962. Reprint, The University of Chicago Press, 2012.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-laudan:confutation"&gt;
&lt;p&gt;Laudan, Larry. “A Confutation of Convergent Realism.” &lt;em&gt;Philosophy of Science&lt;/em&gt; 48, no. 1 (March 1981): 19–49.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-laudan:beyond-realism"&gt;
&lt;p&gt;———. “Explaining the Success of Science: Beyond Epistemic Realism and Relativism.” In &lt;em&gt;Science and Reality: Recent Work in the Philosophy of Science&lt;/em&gt;, edited by J. T. Cushing, C. F. Delaney, and G. Gutting, 83–105. Notre Dame: University of Notre Dame Press, 1984.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-maxwell:theoretical-entities"&gt;
&lt;p&gt;Maxwell, Grover. “The Ontological Status of Theoretical Entities.” In &lt;em&gt;Scientific Explanation, Space &amp;amp; Time&lt;/em&gt;, edited by Herbert Feigl and Grover Maxwell, III:3–27. Minnesota Studies in Philosophy of Science. University of Minnesota Press, 1962.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-moreland:science:1989"&gt;
&lt;p&gt;Moreland, J. P. &lt;em&gt;Christianity and the Nature of Science: A Philosophical Investigation&lt;/em&gt;. Grand Rapids, Michigan: Baker Book House, 1989.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-okasha:science-introduction"&gt;
&lt;p&gt;Okasha, Samir. &lt;em&gt;Philosophy of Science: A Very Short Introduction&lt;/em&gt;. Very Short Introductions. New York: Oxford University Press, 2002.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-putnam:mathematics:1979"&gt;
&lt;p&gt;Putnam, Hilary. “Mathematics, Matter and Method,” Second edition., 1:60–78. Philosophical Papers. Cambridge University Press, 1979.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-putnam:three-kinds-of-realism"&gt;
&lt;p&gt;———. “Three Kinds of Scientific Realism.” &lt;em&gt;Philosophical Quarterly&lt;/em&gt; 32, no. 128 (1982): 195–200.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-rosenberg:philosophy-of-science:2012"&gt;
&lt;p&gt;Rosenberg, Alex. &lt;em&gt;Philosophy of Science: A Contemporary Introduction&lt;/em&gt;. Edited by Paul K. Moser. Third edition. Routledge Contemporary Introductions to Philosophy. 2000. Reprint, New York: Routledge, 2012.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-torrance:reality-scientific-theology:1985"&gt;
&lt;p&gt;Torrance, Thomas F. &lt;em&gt;Reality and Scientific Theology&lt;/em&gt;. Edited by T. F. Torrance. Theology and Science at the Frontiers of Knowledge. Edinburgh: Scottish Academic Press, 1985.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Larry Laudan, “Explaining the Success of Science: Beyond Epistemic Realism and Relativism,” in &lt;em&gt;Science and Reality: Recent Work in the Philosophy of Science&lt;/em&gt;, ed. J. T. Cushing, C. F. Delaney, and G. Gutting (Notre Dame: University of Notre Dame Press, 1984), 89.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;See also the discussion of Bas C. van Fraassen’s constructive empiricism below.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;The following material is adapted from a short essay written for Dr. Welty’s PHI7650 midterm.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;The general problem of induction is left aside and the basic validity of inductive reasoning is assumed for the sake of argument; this is obviously contentious in its own right, and orthogonal to this issue. Perhaps all inferential reasoning is suspect, but if so that tells against empirical and instrumental accounts of science as well.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Grover Maxwell, “The Ontological Status of Theoretical Entities,” in &lt;em&gt;Scientific Explanation, Space &amp;amp; Time&lt;/em&gt;, ed. Herbert Feigl and Grover Maxwell, vol. III, Minnesota Studies in Philosophy of Science (University of Minnesota Press, 1962), 4–11.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;&lt;em&gt;Philosophy of Science: A Very Short Introduction&lt;/em&gt;, Very Short Introductions (New York: Oxford University Press, 2002), 69–70.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;Okasha, 70.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Okasha.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;So Hilary Putnam, “Mathematics, Matter and Method,” Second edition, vol. 1, Philosophical Papers (Cambridge University Press, 1979), 72–73; and &lt;em&gt;contra&lt;/em&gt; Bas C. van Fraassen, &lt;em&gt;The Scientific Image&lt;/em&gt;, Clarendon Library of Logic and Philosophy (OUP Premium, 1980), 39.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;Larry Laudan, “A Confutation of Convergent Realism,” &lt;em&gt;Philosophy of Science&lt;/em&gt; 48, no. 1 (March 1981): 24.&lt;a href="#fnref10" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn11"&gt;&lt;p&gt;See the discussion and analysis in pp. 398–399 of &lt;span class="citation" data-cites="diegues-lucena:laudan:2006"&gt;Antonio Diéguez-Lucena, “Why Does Laudan’s Confutation of Convergent Realism Fail?” &lt;em&gt;Journal for General Philosophy of Science&lt;/em&gt; 37, no. 2 (2006): 393–403&lt;/span&gt;.&lt;a href="#fnref11" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn12"&gt;&lt;p&gt;Cf. Hilary Putnam, “Three Kinds of Scientific Realism,” &lt;em&gt;Philosophical Quarterly&lt;/em&gt; 32, no. 128 (1982): 197–99.&lt;a href="#fnref12" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn13"&gt;&lt;p&gt;Kuhn’s discussion of Galileo’s measurements vs. those conducted today is enlightening (see &lt;span class="citation" data-cites="kuhn:revolutions:2012"&gt;&lt;em&gt;The Structure of Scientific Revolutions&lt;/em&gt;, 50th Anniversary Edition (1962; repr., The University of Chicago Press, 2012).&lt;/span&gt; 119ff). Note, however, that though Galileo’s measurements are not reproducible today, reasons may readily be adduced for the measurements he took from within the context of later theories—the accuracy of the measuring apparatus available to him, for example. Kuhn’s objection is weaker than he thinks.&lt;a href="#fnref13" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn14"&gt;&lt;p&gt;Categorization from &lt;span class="citation" data-cites="moreland:science:1989"&gt;J. P. Moreland, &lt;em&gt;Christianity and the Nature of Science: A Philosophical Investigation&lt;/em&gt; (Grand Rapids, Michigan: Baker Book House, 1989)&lt;/span&gt; 140–141. For a more detailed discussion of the strengths and weaknesses of these views, see &lt;span class="citation" data-cites="moreland:science:1989"&gt;Moreland&lt;/span&gt; ch. 5, though he is perhaps overly sympathetic to antirealist critiques (especially of theoretical physics), on which see below.&lt;a href="#fnref14" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn15"&gt;&lt;p&gt;Moreland, 194.&lt;a href="#fnref15" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn16"&gt;&lt;p&gt;Laudan, “Explaining the Success of Science,” 91.&lt;a href="#fnref16" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn17"&gt;&lt;p&gt;Laudan, 98–100.&lt;a href="#fnref17" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn18"&gt;&lt;p&gt;Cf. Fraassen, &lt;em&gt;The Scientific Image&lt;/em&gt;, 40.&lt;a href="#fnref18" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn19"&gt;&lt;p&gt;Fraassen, 70.&lt;a href="#fnref19" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn20"&gt;&lt;p&gt;Fraassen, 87.&lt;a href="#fnref20" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn21"&gt;&lt;p&gt;Fraassen, 72.&lt;a href="#fnref21" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn22"&gt;&lt;p&gt;“The Ontological Status of Theoretical Entities,” 19–20.&lt;a href="#fnref22" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn23"&gt;&lt;p&gt;On the idea of embracing realism instrumentally, see above in §2a, and cf. &lt;span class="citation" data-cites="rosenberg:philosophy-of-science:2012"&gt;Alex Rosenberg, &lt;em&gt;Philosophy of Science: A Contemporary Introduction&lt;/em&gt;, ed. Paul K. Moser, Third edition, Routledge Contemporary Introductions to Philosophy (2000; repr., New York: Routledge, 2012)&lt;/span&gt; 211-214.&lt;a href="#fnref23" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn24"&gt;&lt;p&gt;Fraassen, &lt;em&gt;The Scientific Image&lt;/em&gt;, 18.&lt;a href="#fnref24" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn25"&gt;&lt;p&gt;Moreland, &lt;em&gt;Christianity and the Nature of Science&lt;/em&gt;, 193–41.&lt;a href="#fnref25" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn26"&gt;&lt;p&gt;Moreland, 206.&lt;a href="#fnref26" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn27"&gt;&lt;p&gt;Moreland, 210.&lt;a href="#fnref27" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn28"&gt;&lt;p&gt;Moreland, 210.&lt;a href="#fnref28" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn29"&gt;&lt;p&gt;&lt;span class="citation" data-cites="moreland:science:1989"&gt;Moreland&lt;/span&gt; 211; and see discussion in Part II below.&lt;a href="#fnref29" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn30"&gt;&lt;p&gt;Kuhn, &lt;em&gt;The Structure of Scientific Revolutions&lt;/em&gt;, 111.&lt;a href="#fnref30" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn31"&gt;&lt;p&gt;&lt;span class="citation" data-cites="kuhn:revolutions:2012"&gt;Kuhn&lt;/span&gt; 119; see pp. 118–124 on this transition specifically and ch. 10 on paradigm-shifts more generally.&lt;a href="#fnref31" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn32"&gt;&lt;p&gt;E.g. his discussion of chemistry in Kuhn, 133.&lt;a href="#fnref32" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn33"&gt;&lt;p&gt;Laudan, “Explaining the Success of Science,” 94–95.&lt;a href="#fnref33" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn34"&gt;&lt;p&gt;So, rightly, Moreland, &lt;em&gt;Christianity and the Nature of Science&lt;/em&gt;, 201–2.&lt;a href="#fnref34" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn35"&gt;&lt;p&gt;Moreland, 142.&lt;a href="#fnref35" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn36"&gt;&lt;p&gt;Laudan, “Explaining the Success of Science,” 85.&lt;a href="#fnref36" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn37"&gt;&lt;p&gt;Fraassen, &lt;em&gt;The Scientific Image&lt;/em&gt;, 8, emphasis mine.&lt;a href="#fnref37" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn38"&gt;&lt;p&gt;Maxwell, “The Ontological Status of Theoretical Entities,” 27.&lt;a href="#fnref38" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn39"&gt;&lt;p&gt;In this author’s experience, instrumentalism is far more common among Christians trained in engineering than to those trained in the sciences—perhaps (and this is merely speculation) because the engineering disciplines &lt;em&gt;already&lt;/em&gt; instrumentalize science. Cf. &lt;span class="citation" data-cites="torrance:reality-scientific-theology:1985"&gt;Thomas F. Torrance, &lt;em&gt;Reality and Scientific Theology&lt;/em&gt;, ed. T. F. Torrance, Theology and Science at the Frontiers of Knowledge (Edinburgh: Scottish Academic Press, 1985)&lt;/span&gt; 22.&lt;a href="#fnref39" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn40"&gt;&lt;p&gt;Cf. &lt;span class="citation" data-cites="laudan:beyond-realism"&gt;Laudan, “Explaining the Success of Science.”&lt;/span&gt; Interestingly, Laudan’s view comports in this area with van Fraassen’s constructive empiricism.&lt;a href="#fnref40" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn41"&gt;&lt;p&gt;Moreland, &lt;em&gt;Christianity and the Nature of Science&lt;/em&gt;, 211.&lt;a href="#fnref41" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn42"&gt;&lt;p&gt;Moreland, 210.&lt;a href="#fnref42" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn43"&gt;&lt;p&gt;Moreland, 211.&lt;a href="#fnref43" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn44"&gt;&lt;p&gt;To be sure, there are related fields which are quite young and, in this author’s view, quite suspect, e.g. evolutionary psychology. But the field’s findings are irrelevant to the age of the earth, and thus to the question at hand.&lt;a href="#fnref44" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn45"&gt;&lt;p&gt;Moreland, 211.&lt;a href="#fnref45" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn46"&gt;&lt;p&gt;Nor is this limited to creationism; for much of the last century, many evangelical institutions demanded fealty to dispensationalism!&lt;a href="#fnref46" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn47"&gt;&lt;p&gt;Moreland, 211.&lt;a href="#fnref47" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn48"&gt;&lt;p&gt;Cf. Moreland, 206–11.&lt;a href="#fnref48" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn49"&gt;&lt;p&gt;&lt;em&gt;a la&lt;/em&gt; &lt;span class="citation" data-cites="moreland:science:1989"&gt;Moreland&lt;/span&gt; 210–211.&lt;a href="#fnref49" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn50"&gt;&lt;p&gt;See Part I § 2a and 2b above.&lt;a href="#fnref50" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn51"&gt;&lt;p&gt;This author tends to think the earth is as old as it appears, and that young-earth views hinge on hermeneutical and philosophical commitments which are unnecessary and incorrect—but this is beside the point.&lt;a href="#fnref51" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="SEBTS"></category><category term="M. Div."></category><category term="papers"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Full-On Question-Begging</title><link href="http://www.chriskrycho.com/2016/full-on-question-begging.html" rel="alternate"></link><published>2016-05-12T21:09:00-04:00</published><updated>2016-05-12T21:09:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/full-on-question-begging.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Scientific naturalism, as a worldview (not an instrumental technique applied in certain circumstances) is certainly question-begging. First, the claim that “the physical world is the only thing which exists” is fundamentally …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Scientific naturalism, as a worldview (not an instrumental technique applied in certain circumstances) is certainly question-begging. First, the claim that “the physical world is the only thing which exists” is fundamentally a philosophical and not a scientific claim. That is, if science is a broadly experimental approach to discovering truth about the physical world, it is incapable of determining whether a non-physical world exists, and it is not even asking—still less answering!—metaphysical questions about the nature of reality. The basic issues of epistemology, ontology, and ethics are themselves not subject to empirical analysis. Evidence from the natural world may certainly be useful and even helpful in considering these domains, but by definition cannot be finally determinative. For example: if the physical world is &lt;em&gt;not&lt;/em&gt; the only thing which exists, what sort of purely physical test could demonstrate that? Likewise, if humans have cognitive access to spiritual realities, because they are dualist and not purely physical beings, they might have genuine non-physical experiential knowledge. No ontological, epistemological, or teleological claim is finally resolvable through merely physical testing; claims in such areas are finally philosophical and theological.&lt;/p&gt;
&lt;p&gt;Second, the efficacy of science in the domain of explaining the physical world is in no sense evidence that it is a particularly effective way of describing &lt;em&gt;all things&lt;/em&gt;. This is akin to suggesting that because musical notation is particularly effective for representing notes to be played, it is the only form of notation required; all written words should immediately be discarded, as should all computer programs. That is, the utility of one form of description or program of study for a given domain does not make it immediately applicable to or indeed at all relevant for other domains. Even with the context of scientific efforts, this is obvious: different techniques are used in observational astronomy than in ecological analysis, and different methods of analysis in assessing the claims of theoretical physics than in analyzing data from a given paleontological dig.&lt;/p&gt;
&lt;p&gt;Third, and perhaps most importantly for current debates, the efficacy of science in describing the physical world provides no evidence whatsoever that the physical world is the only thing which exists. To suggest otherwise is simply to commit a basic logical fallacy. This is obvious if the premises and conclusion are laid out explicitly: The argument might be laid out so: “(P1) Science describes the physical world effectively. (P2) Science does not and cannot describe the non-physical world. (C) Therefore, the physical world is the only thing which exists.” But the conclusion clearly does not follow from the premises, even inductively. The argument might be modified into an inductive form: “(P1) Science describes the physical world effectively. (P2) Science has provided increased effectiveness in describing an ever-wider variety of phenomena over time. (P3) In so doing, science has found physical explanations of phenomena which at one time seemed intractable to such explanations. (C1) Therefore, science will at some point in the future find physical explanations for all phenomena. (C2) Therefore, there are no non-physical phenomena.” Even so strengthened, there are two major problems with the argument. First, C1 is an incredibly strong claim, and the purported evidence toward it in this form’s P3 is itself disputed. Moreover, even if C1 were granted, it would offer some evidence for C2 but &lt;em&gt;would not prove it&lt;/em&gt;. There still might be reason to think that physical phenomena and their corresponding explanations were expressions of the will of a wise divine being, for example. Moreover, while claims for non-physical purposes for or fundamental explanations of physical mechanisms might then be on shakier ground in virtue of being apparently less simple, the physicalist would need to make a (philosophical) argument for the apparent scientific virtue of simplicity! There is no escape from claims which are themselves not even capable of being tested empirically.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Empirical Equivalence, Real Semantic Difference</title><link href="http://www.chriskrycho.com/2016/empirical-equivalence-real-semantic-difference.html" rel="alternate"></link><published>2016-05-12T21:08:00-04:00</published><updated>2016-05-12T21:08:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/empirical-equivalence-real-semantic-difference.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;When two theories make contradictory claims, even were they to have empirically equivalent outcomes, the contradiction in their claims is not merely terminological or semantic. It is fairly easy to conceive …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;When two theories make contradictory claims, even were they to have empirically equivalent outcomes, the contradiction in their claims is not merely terminological or semantic. It is fairly easy to conceive of claims are &lt;em&gt;merely&lt;/em&gt; semantically different, but which have the same basic content: “That is a chair” and the Spanish equivalent “ésa es una silla” both have the same basic referents, and even intend broadly the same meaning. Their variance is terminological, by dint of being in two distinct languages. It is far more difficult to find two claims which are in opposition to each other, but their opposition is merely terminological.&lt;/p&gt;
&lt;p&gt;This is not just the case in science. To make a claim, scientific or otherwise, is to assert something about the world as it actually is. Thus, “The sky is blue” and “The sky is green but appears to us as blue because all our eyes are defective in a way we cannot measure” would have the same base empirical content, but make very different claims about the nature of human sight and the sky. This particular claim is trivially testable in some other way; but different claims in fundamental physics—empirically equivalent string theories, for example—might not be trivially testable, or testable at all: they might be empirically equivalent in principle as well as in practice. But the trivial example serves to highlight the reality that empirical equivalence does not entail semantic equality. The blueness or greenness of the sky is not merely a matter of human descriptions of things. Rather, even though they are meaningful only because of their semantics, their semantics carry force that is not merely different ways of saying the same thing: that is one of the basic necessities for language to function. If different semantics did not actually entail different claims, communication would be impossible. Less pragmatically, if one affirms that the referents in question are in some sense “out there” and not merely the contents of human speech or human sense data—that is, if one embraces a correspondence theory of truth and a basically, albeit critically, realist view of human knowledge including scientific knowledge—then the notion that two claims are merely terminological variants even though their semantics stand in contrast is clearly false.&lt;/p&gt;
&lt;p&gt;To take an example particularly appropriate to a science-and-religion course: it is quite conceivable that a disinterested god (quite different from the one we worship) and a pantheon of disinterested gods and a universe which came out purely by chance would all be empirically equivalent. Yet “there is one bored god out there” and “there is no god out there” and “there are many bored gods out there” are clearly and obviously not terminological variants of each other, even if there is no empirical way to tell them apart. A similar thing would hold of two string theories, one which postulated 12 and the other 28 hidden dimensions. Even if both yielded the same empirical predictions (which were verified) and were in-principle incapable of any further test, they would nonetheless be claims with semantic content about the nature of reality which is &lt;em&gt;not&lt;/em&gt; reducible merely to a terminological variant. The fact that the truth or falsity of a claim may not be knowable does not tell against its distinctive semantic content, only against its pragmatic utility. If one of the two string theories suggested above were true, it might not make any practical difference which one it was. After all, if the contents are permanently inaccessible to humans, and the theoretical consequences identical, then either may be used in the pursuit of other knowledge. However, by dint of the fact that they make distinct and countervailing claims to one another, at least one must be false. And truth is no small matter!&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Realism, Generality, and Precision—In Tension?</title><link href="http://www.chriskrycho.com/2016/realism-generality-and-precision-in-tension.html" rel="alternate"></link><published>2016-05-12T21:07:00-04:00</published><updated>2016-05-12T21:07:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/realism-generality-and-precision-in-tension.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The tension between realism, generality, and precision posited in biology is a function not of those constraints in general, but of the specific constraints on biology and other sciences dealing with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The tension between realism, generality, and precision posited in biology is a function not of those constraints in general, but of the specific constraints on biology and other sciences dealing with what is often described as having “emergent” phenomena. The closer the science is to physical first principles, the less these terms stand in contrast. For example, in chemistry, a realist description of the chemicals in question is actually &lt;em&gt;helpful&lt;/em&gt; in dealing precisely with the terms in question. The behavior of the chemicals at large scales can be modeled more effectively precisely because the underlying principles are relatively well understood and the phenomenon describable not merely as a representative abstraction but in terms corresponding to what seem to be the &lt;em&gt;actual&lt;/em&gt; characteristics of the system in view. The same is true of much of physics. For example, the idea of general relativity is (as its name suggests) extremely general, covering the behavior of all macroscopic systems at least; is sufficiently precise in its predictions to enable extraordinary feats of timekeeping and geolocation; and is understood by the majority of working physicists to be a &lt;em&gt;true&lt;/em&gt; and not merely a &lt;em&gt;useful&lt;/em&gt; description of how space-time behaves.&lt;/p&gt;
&lt;p&gt;The question arises then: assuming the claim is correct for biology, why is this so? The answer seems to be that biological systems are not subject (at least so far as they are understood so far) to be capable of reduction to the same kinds of general theorems as the more purely physical sciences. Though biological is concerned of physical subjects, those subjects seem not to merely the expression of mechanistic phenomena (though of course this point is debated by some physicalist philosophers and scientists). Rather, their behavior emerges atop the underlying physical system, and then diverges in unpredictable ways from individual subject to individual subject. As a result, descriptions of the trends that occur in a given &lt;em&gt;population&lt;/em&gt; may be general, but do not do justice to the behavior of any one member of that population, and so are not &lt;em&gt;precise&lt;/em&gt;. Thus, ecologies are functions of &lt;em&gt;aggregate&lt;/em&gt; behavior, but that aggregation is something like the “average American family”: it is a description of no individual element within the system, but of the combined output of the whole system. Moreover, under even trivially different conditions (a lightning strike occurring in one place rather than another, for example, and changing the behavior of the animals in that area), the specific outcome of the system might have been meaningfully different—even if still able to be modeled under the same general descriptions.&lt;/p&gt;
&lt;p&gt;Indeed, most effective general models of behavior in biological systems are neither realistic nor precise. Attempts to model the function of neurons are often precise, but intentionally non-realist and non-general, not least because in most organisms, neurons are non-generalizable: only the simplest creatures have non-differentiated neurons. But in each of these cases, these are functions of the kind of increasingly complex systems, which are not apparently describable purely in terms of their underlying components. The brain, for example, is composed not just of an extraordinarily large number of neurons, but of a great variety of kinds of neurons as well, and the neurons all have the same basic chemical makeup and the same basic genetic structure, but develop in different ways because of specific driving factors in their environment, signals from chemicals driven by other parts of the body, and so on. Any description of any part of this system will necessarily be subject to the constraints the biologist describes simply because there is no single underlying principle driving the system; rather, it is a complex system where each part informs the others. The same is true (and even more so) of systems made up of biological actors, such as communities and ecologies; it is unsurprisingly also a common feature of systems which include actors with agency (such as economics).&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Aristotle, Newton, and Progress</title><link href="http://www.chriskrycho.com/2016/aristotle-newton-and-progress.html" rel="alternate"></link><published>2016-05-12T21:06:00-04:00</published><updated>2016-05-12T21:06:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/aristotle-newton-and-progress.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Aristotle’s impetus theory provided an effective and predictively accurate (and indeed, &lt;em&gt;scientific&lt;/em&gt;) model of the behavior of objects in terrestrial contexts. Though it was later superseded by Newton’s model …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Aristotle’s impetus theory provided an effective and predictively accurate (and indeed, &lt;em&gt;scientific&lt;/em&gt;) model of the behavior of objects in terrestrial contexts. Though it was later superseded by Newton’s model, which had no impetuses at all, Aristotle’s method was a perfectly defensible model because it accounted for the &lt;em&gt;known&lt;/em&gt; phenomena well. The method worked because a number of constraints in the systems observed were not yet themselves understood. In a limited sense, Aristotle’s view could be construed as a &lt;em&gt;for-certain-conditions&lt;/em&gt; subset of Newton’s laws (though, strictly speaking, this is inaccurate). That is, in the conditions in which Aristotle made his observations, and failing to account for some of the phenomena for which Newton’s approach &lt;em&gt;did&lt;/em&gt; account, the impetus model for motion was valid.&lt;/p&gt;
&lt;p&gt;In systems where there is resistance—e.g., all terrestrial systems—objects do not remain in motion without some other object providing an impetus to them, and objects of different masses but the same basic size do not fall at the same rate. Newton’s revolution was not in denying this but in recognizing that the grounding assumptions were incorrect: terrestrial systems are a &lt;em&gt;subset&lt;/em&gt; of a broader possible systems. Because this is so, there exists a more general set of laws which govern the behavior of objects in both terrestrial and non-terrestrial systems. This in turn led to the recognition that Aristotle had made a false generalization from the observed (terrestrial) data: the idea that objects require impetuses to remain in motion was empirically sound, but incomplete. Thus, a feather and a similarly-weighted needle fall at different rates because their different densities and surface areas relative to their masses result in different degrees of resistance. A bowling ball eventually comes to rest because of the resistive forces it experiences due to friction. These are not the general case, but subsets of the broader laws Newton derived; but Aristotle’s formulation can readily be seen just as that subset, under certain conditions.&lt;/p&gt;
&lt;p&gt;This is not an unusual pattern in the history of science, and in fact is similarly applicable to Newton’s own system of mechanics, since superseded by both quantum mechanics and general relativity. As the constraints under which a given law operates become better-understood, it is sometimes possible (at least in the case of physical laws) to derive deeper generalizations about the systems in question, generalizations of which the currently-held set of laws are recognized to be a subset. Granted that at times, the new laws do not supersede but wholly replace the old model, and that both the Aristotle-Newton and Newton-Einstein/QM transitions contain some degree of this latter, it is still the case that newer theories ofttimes succeed because they demonstrate themselves capable of solving the same set of problems as the preceding theory, while also addressing many of the unresolved issues in it. So: Newton was able to derive more, and more accurate, predictions than was the Aristotelian model, and to provide more thorough explanations of the systems in question; and likewise Einstein than Newton. In both cases, however, the original model had the utility it did (and the empirical success it did) precisely because it was in some way a &lt;em&gt;for-certain-conditions&lt;/em&gt; subset of the more general theory.&lt;/p&gt;
&lt;p&gt;A rather more interesting contrast, then, is between theories where the earlier theory is not even construable as a for-certain-conditions subset of the later, as in the phlogiston theory of combustion, since replaced by an oxidizing view. The idea had substantial explanatory power and harmonized quite well with the data, but was ultimately overthrown by the alternative (and now current, albeit revised) view of oxidation. Such cases, unlike the Aristotelian-Newtonian or Newtonian-Einsteinian/quantum mechanical transitions, are much harder to reconcile with a progressive view of the development of scientific theory, or with realist accounts of scientific explanation.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Statistical Regularities and Explanation</title><link href="http://www.chriskrycho.com/2016/statistical-regularities-and-explanation.html" rel="alternate"></link><published>2016-05-12T21:04:00-04:00</published><updated>2016-05-12T21:04:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/statistical-regularities-and-explanation.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;It is easy to mistake &lt;em&gt;exactness&lt;/em&gt; for &lt;em&gt;explanatory power&lt;/em&gt; in the realm of explanation. Thus, it might be tempting to suppose that precise and consistent statistical regularities have greater explanatory power …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;It is easy to mistake &lt;em&gt;exactness&lt;/em&gt; for &lt;em&gt;explanatory power&lt;/em&gt; in the realm of explanation. Thus, it might be tempting to suppose that precise and consistent statistical regularities have greater explanatory power than inexact laws which have an attendant set of constraints and conditions specifying when and how they apply. However, the inverse is true.&lt;/p&gt;
&lt;p&gt;Statistical regularity has &lt;em&gt;no&lt;/em&gt; explanatory power. It has enormous utility, in that it allows effective prediction. However, it provides no insight into the reason why the regularity is captures occurs. Explanation is at core a matter of determining the reasons why something occurs, not simply observing &lt;em&gt;that&lt;/em&gt; it occurs. If on every first, second, and third Tuesday of the month for three hours early in the afternoon small black marks are rendered onto a mostly white LED display, and the range of marks is tightly bounded, and the marks are known to form meaningful words and sentences and even stories, and there can therefore be strong statistical confidence that &lt;em&gt;next&lt;/em&gt; Tuesday the same pattern will occur again, this does nothing to &lt;em&gt;explain&lt;/em&gt; the marks. What suffices as an explanation is a person using a typewriter to compose the draft of a novel on those Tuesdays when she has a babysitter for her children. This is certainly not even a &lt;em&gt;ceteris paribus&lt;/em&gt; law, and yet it has substantially greater explanatory power than does the statistical observation, regardless of the degree of statistical precision available.&lt;/p&gt;
&lt;p&gt;By contrast, even inexact laws subject to restrictions and limitations are capable of offering meaningful explanations, because they can offer insight into the causal mechanisms which drive the processes. Though such statements of causality are inherently circumscribed to a certain degree—the &lt;em&gt;ceteris paribus&lt;/em&gt; clauses are necessary—they retain the explanatory power that inheres in causal reasoning. It is both legitimate and explanatory to reason that “all other things being equal, Superman will win in a fistfight with Batman because he has superhuman strength and is functionally invincible to human weaponry.” Granted that all other things may &lt;em&gt;not&lt;/em&gt; be equal (as in the famous 1980s story from which recent cinema drew more or less inspiration) and that Batman may, if he has access to Kryptonite, bring about a different outcome, in no way diminishes the explanatory power of the original statement. In fact, it may strengthen it by suggesting what kinds of things must be equal for the statement to hold, and suggesting other kinds of causal factors in the system. Since the system that is the universe—even Batman and Superman’s universe—is very large, it is unsurprising that causal relations can only be described with these kinds of constraints. After all, only God could know the total set of forces acting on a system and therefore could deliver a non-&lt;em&gt;ceteris paribus&lt;/em&gt; statement of causal factors exhaustively.&lt;/p&gt;
&lt;p&gt;This does not mean that statistical regularity is useless for explanation. In fact, it is a powerful tool for reasoning about the state of the world as part of deriving &lt;em&gt;ceteris paribus&lt;/em&gt;-constrained causal statements. To derive such causal statements, one must (usually) first derive sufficient data on which to base an analysis at all. Thus, knowing that Superman has been completely invulnerable to all human weapons of whatever magnitude in the past, and that Batman is an ordinary human, is important in being able to state that Superman will win in an ordinary fistfight between the two. The statistical data drives an inference to the best &lt;em&gt;explanation&lt;/em&gt; that he is in fact invulnerable to ordinary human weapons (an explanation which we as outside readers know in fact to be true), and grounds the “all other things being equal” statement. If other factors are introduced, so that other things are &lt;em&gt;not&lt;/em&gt; equal, the inference from that statistical data set will still hold; but now other causal elements are in play and new statistical data would need to be gathered, for the sake of further reasoning &lt;em&gt;to explanation&lt;/em&gt;. The two go hand in hand, in other words.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Counterfactuals and Supervenience</title><link href="http://www.chriskrycho.com/2016/counterfactuals-and-supervenience.html" rel="alternate"></link><published>2016-05-12T21:03:00-04:00</published><updated>2016-05-12T21:03:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/counterfactuals-and-supervenience.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The natural sciences all claim to use the same basic model of knowledge, and claim to aim for the same kind of explanatory power: the &lt;em&gt;law&lt;/em&gt;. However, clearly the kinds of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The natural sciences all claim to use the same basic model of knowledge, and claim to aim for the same kind of explanatory power: the &lt;em&gt;law&lt;/em&gt;. However, clearly the kinds of laws which have such force in chemistry and especially physics are at least much less common in the other sciences; they may be entirely absent. Biology serves as a prime example of an unquestionably “hard” science in which laws are much harder to come by. Whereas physics includes both descriptive laws (&lt;em&gt;PV = nRT&lt;/em&gt;) and explanatory laws (general relativity), biology seems entirely limited to the former. That is, there are e.g. laws describing &lt;em&gt;how&lt;/em&gt; populations behave in an ecosystem, but there are no systematizing principles which are thought to offer the same degree of broad explanatory and predictive power as, say, the Standard Model of quantum mechanics. The closest example is a broadly Darwinian model of evolution, but even leaving aside questions about the accuracy of the model, it differs substantially from physical or chemical laws. It offers far less in the way of precise predictions, for one. For another, althought it serves as an explanation, the &lt;em&gt;kind&lt;/em&gt; of explanation it offers is distinct in that it does not seem to have the kind of (nomic) necessity possessed by physical laws: even if Darwinian evolution is the means by which life arose on the planet, it by no means requires that life arose &lt;em&gt;as it did&lt;/em&gt;; Certainly it is possible that life could have taken other forms even under the same selective pressures, given some other mutation—or have failed to succeed at all.&lt;/p&gt;
&lt;p&gt;Biological systems (and yet-higher-level systems like ecologists or economies) demonstrate phenomena that &lt;em&gt;supervene&lt;/em&gt; on the underlying physical realities. Unlike physics or chemistry, these phenomena seem, perhaps permanently, resistant to reductive and unifying explanations. This is precisely because of their lack of nomic or causal necessity: counterfactuals are easy to imagine in biology; much less economics. In the most abstract sciences—behavioral psychology, sociology, and economics, for example–it seems that human agency plays a major part in the actual outcomes in the world. Physicalist/materialist claims notwithstanding, it seems quite unlikely that such agency can be reduced to the &lt;em&gt;results&lt;/em&gt; of chemical and electrical activity in the brain.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Even at the level of microbes, however, the so-called “emergent behavior” of biological systems is not reducible to mere physical &lt;em&gt;properties&lt;/em&gt; as is the case in physics and chemistry.&lt;/p&gt;
&lt;p&gt;Again, counterfactuals play one significant part in this: biological systems could be other than what they are. But another significant factor is the purposive nature of organisms. Even the simplest living things&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; have a teleological bent. Even if they were not designed, they themselves carry out certain patterns of &lt;em&gt;directed&lt;/em&gt; behavior. They take in energy (eat). They reproduce. Even if this behavior is entirely deterministic, arising purely from the physical states of the organism, it remains irreducible to principles with broad explanatory force. “All living things consume from their environment for energy” is not an explanation; it is a description. &amp;quot;Objects’ motion as described by ‘gravity’ derives from the curvature of space-time’ is an explanation and not merely a description. Biological systems, still less conglomeration of such systems (especially those with minds!) both exist and behave in trivially counterfactuals ways, and therefore not only do not but probably &lt;em&gt;cannot&lt;/em&gt; have the kind of nomic necessity present in non-emergent systems. If such a system does exist, it must consist of properties well outside our current sphere of knowledge.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;That the physical state of the brain is closely related to and indeed affects mental state is unsurprising; that they would be the sole cause of mental states (and that there is no influence running the other direction) is a much stronger, and much less well-justified claim.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;and, arguably, strange edge cases and hangers-on like viruses or prions&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Science and Pseudo-Science</title><link href="http://www.chriskrycho.com/2016/science-and-pseudo-science.html" rel="alternate"></link><published>2016-05-12T21:01:00-04:00</published><updated>2016-05-12T21:01:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/science-and-pseudo-science.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Many differences do not admit of clear or hard distinctions. The difference between science and pseudo-science is just such a difference. There is a clear and intuitively obvious difference between astronomy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Many differences do not admit of clear or hard distinctions. The difference between science and pseudo-science is just such a difference. There is a clear and intuitively obvious difference between astronomy and astrology, between medical research and homeopathic remedies, between chemistry and alchemy. This is so even though it is difficult (if not impossible) to specify exactly what set of criteria are both necessary and sufficient to constitute one thing as a pseudo-science and another as actual science. This is not a difficulty specific to this differentiation; few categories are truly binary. Instead, humans normally and rationally distinguish between kinds of things on the basis of sets of criteria. So, as the well-known example from discussions of realism and anti-realism makes clear: humans can tell a bald man from a man with a full-head of hair, even though there is no single point at which one stops being hirsute and starts being bald. Likewise, we can recognize a sunny day from a cloudy day, even though there is a spectrum ranging from &lt;em&gt;not a cloud in the sky&lt;/em&gt; to &lt;em&gt;clouds so thick and dark it seems like twilight at midday&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the case of science and pseudo-science, there are a broad set of criteria which form a sort of diagnostic battery. Different (though overlapping) sets of tests are applicable in different fields. There is one set of discriminants between astronomy and astrology. There is another set between chemistry and alchemy, and another between pharmaceutical research and homeopathy. All share commonalities, but are not identical. For example, astronomy and astrology both rely on observation of the same celestial phenomena; pharmaceutical research and homeopathy both aim to treat physical ills by way of some external treatment.&lt;/p&gt;
&lt;p&gt;In the astronomy/astrology divide, the major distinction is &lt;em&gt;applicability&lt;/em&gt;. Astronomy applies the observed data to understanding the subject under observation: stars, galaxies, and so on. Astrology applies the observed data to &lt;em&gt;other&lt;/em&gt; subjects (namely human lives). The applicability of observations about stars to analysis of stars is straightforward and obvious. The applicability of those observations to predicting human affairs involves a substantial leap from the observation to a non-(physically-)associated subject. The latter is not logically inconceivable: even in a purely physical system of causation, it is possible that the stars’ positions were designed by some creative force to provide just such indicators. However, the claim advanced is much stronger relative to the relationship between the data and the purported effect; the applicability much less obvious; and (last but not least) the claim as usually advanced is &lt;em&gt;not&lt;/em&gt; physical but mystical. Again: this does not in and of itself mean astrology is not &lt;em&gt;true&lt;/em&gt;. It does mean that it advances claims that are both outside the means by which science is conducted (which, when prediction is involved, usually involve some degree of falsifiability), and also outside the normal &lt;em&gt;application&lt;/em&gt; of observations within science.&lt;/p&gt;
&lt;p&gt;The pharmaceutical research and homeopathy distinction shares some but not all of these difference-markers. There is certainly an element of repeatability and falsifiability in play, for one. (How effective this actually is, given recent studies in repeatability in pharmaceutical work especially but the sciences in general, is an important related question, but not ultimately final.) However, they do not share the applicability issue in the astronomy/astrology divide. The subject—sick humans—is the same. So is the treatment pattern. Nor is there generally an appeal to non-physical realities. The distinction here seems to be &lt;em&gt;only&lt;/em&gt; one of methodology and empiricism. The differences between chemistry and alchemy are of a similar nature. But other science/pseudo-science distinctions will look different.&lt;/p&gt;
&lt;p&gt;The problem, then, is not that it is &lt;em&gt;impossible&lt;/em&gt; to distinguish between science and pseudo-science, but that there are a broad set of criteria involved in making those distinctions, and the criteria are overlapping but not identical in different fields.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Corpuscularianism and Atomism</title><link href="http://www.chriskrycho.com/2016/corpuscularianism-and-atomism.html" rel="alternate"></link><published>2016-05-12T20:58:00-04:00</published><updated>2016-05-12T20:58:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/corpuscularianism-and-atomism.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;One possible point of difference between philosophy and science is the way they proceed toward answering questions and understanding the world. For example, “Corpuscularianism was mere philosophy. Atomism is science,” suggests …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The following was prepared as a one-page, single-spaced short response to a question from the readings for this class.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;One possible point of difference between philosophy and science is the way they proceed toward answering questions and understanding the world. For example, “Corpuscularianism was mere philosophy. Atomism is science,” suggests an important difference: between reasoning from first principles and reasoning from observed phenomena in the world. The idea is that the corpuscularian idea derived not from observations about the world external to the thinker, but from abstract reasoning about the world—that is, not from &lt;em&gt;data&lt;/em&gt; but from &lt;em&gt;first principles&lt;/em&gt;. This distinction, while initially appealing, has several problems.&lt;/p&gt;
&lt;p&gt;First, it simply does not square with the actual history of science. A number of significant advances have come from reasoning about the world. Einstein’s analyses, across all fields (including some related to atomistic views of the world) were famously the product of initial thought experiments &lt;em&gt;followed&lt;/em&gt; rather than &lt;em&gt;preceded&lt;/em&gt; by mathematical derivation and finally observational data. To be sure, there are many times when scientific understandings change because of data. But this is not the only way scientific interpretations shift. Rather, changes in epistemology, metaphysics, and other prior commitments may lead to substantial reinterpretations of the same data.&lt;/p&gt;
&lt;p&gt;Moreover, those reevaluations may themselves produce further scientific work. One thinks of the way quantum mechanics developed over the twentieth century—including the substantial resistance to it from those enamored of more classical and determinist models, Einstein among them; and the multiple interpretive schemes for dealing philosophically with the implications of quantum mechanics’ findings. These are themselves conditioned by the evidence—but do &lt;em&gt;and must&lt;/em&gt; supersede it in explanatory power and scope. The various interpretations of quantum mechanics are interpretations not only of the data but the world in which the data lives. A radical indeterminism view, an observer-affected data view, a hidden variable view, and so on all offer up points of view which inform the work done by the scientists themselves in an inherent feedback loop. Philosophy and science are not the same, but they are inextricable from each other; one’s prior commitments inevitably shape the answers one will find to some degree or another.&lt;/p&gt;
&lt;p&gt;As such, this view fails to deal with the way that those philosophical commitments drove scientific exploration. The belief in a corpuscularian was part and parcel of the discovery of atomism. That there were philosophical reasons for accepting the view prior to observational evidence for it actually serves to reinforce rather than undercut the view. Indeed, the phrasing of the proposition itself is suspect. “Mere” philosophizing, as noted above, necessarily underlies all scientific research programs. At the most basic level: a commitment to the existence of an external world to be interacted with and discovered, the reliability of experience as a kind of evidence, and the generalizability of data via induction and inference to the best explanation are all necessary for the practice of science.&lt;/p&gt;
&lt;p&gt;Moreover, if one entirely rejected in an &lt;em&gt;a priori&lt;/em&gt; sense that it was possible to discover anything not directly observable (say, because one rejected any sort of corpuscularianism, or because one was a strict anti-realist, or for any number of other reasons), one would simply not look for evidence in that direction. Whatever experiments revealed, an individual with those commitments would not go looking for atoms or evidence of them. The evidence might, over time, suggest a revision of the worldview, and this sort of empirical refutation of the paradigm is of course the point of the proposition. Unfortunately for the proposition, this is not a distinction between philosophy and science, but between unrelenting dogmatism and critical realism. Science may be deeply dogmatic, and philosophy may readily revise its conclusions in the face of new evidence. Such evidence may differ in kind: it might be a a logical proof rather than physical data, as Gödel’s incompleteness theorem forced a revision in logical positivism. It does not, however, lead to an in-principle difference in method.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>2016-05-12 13:01</title><link href="http://www.chriskrycho.com/2016/2016-05-12-1301.html" rel="alternate"></link><published>2016-05-12T13:01:00-04:00</published><updated>2016-05-12T13:01:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-05-12:/2016/2016-05-12-1301.html</id><summary type="html">&lt;p&gt;This bit from the &lt;a href="http://fishshell.com"&gt;fish&lt;/a&gt; &lt;a href="http://fishshell.com/docs/current/design.html#ortho"&gt;design document&lt;/a&gt; perfectly captures what git does wrong (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When designing a program, one should first think about how to make a intuitive and powerful program. Implementation issues should only be considered once a user interface has been designed.&lt;/p&gt;
&lt;p&gt;Rationale:&lt;/p&gt;
&lt;p&gt;This design rule is …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This bit from the &lt;a href="http://fishshell.com"&gt;fish&lt;/a&gt; &lt;a href="http://fishshell.com/docs/current/design.html#ortho"&gt;design document&lt;/a&gt; perfectly captures what git does wrong (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When designing a program, one should first think about how to make a intuitive and powerful program. Implementation issues should only be considered once a user interface has been designed.&lt;/p&gt;
&lt;p&gt;Rationale:&lt;/p&gt;
&lt;p&gt;This design rule is different than the others, since it describes how one should go about designing new features, not what the features should be. &lt;strong&gt;The problem with focusing on what can be done, and what is easy to do, is that too much of the implementation is exposed. This means that the user must know a great deal about the underlying system to be able to guess how the shell works, it also means that the language will often be rather low-level.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>Don't Be a Brand</title><link href="http://www.chriskrycho.com/2016/dont-be-a-brand.html" rel="alternate"></link><published>2016-04-26T20:50:00-04:00</published><updated>2016-04-26T20:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-04-26:/2016/dont-be-a-brand.html</id><summary type="html">&lt;p&gt;Don’t be a brand, pastor.&lt;/p&gt;
&lt;p&gt;It’s tempting. There are a thousand reasons why it looks like a good idea. Church marketing consultants tell you it’s good for your church’s profile at large, and indeed it might bring some attention to the things your church is doing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Don’t be a brand, pastor.&lt;/p&gt;
&lt;p&gt;It’s tempting. There are a thousand reasons why it looks like a good idea. Church marketing consultants tell you it’s good for your church’s profile at large, and indeed it might bring some attention to the things your church is doing. Leadership journals might tell you how you can use your gifts more effectively. You see other godly men with big platforms, doing great things for the kingdom. Their podcasts, conferences, churches, ministries all flourish, it seems, at least in part on the strength of their public personas.&lt;/p&gt;
&lt;p&gt;Don’t do it.&lt;/p&gt;
&lt;p&gt;Don’t promote your sermons every chance you get. Don’t retweet your people’s compliments. Don’t feel the need to highlight every blog post you write. Don’t make much of yourself.&lt;/p&gt;
&lt;p&gt;Don’t be a &lt;em&gt;brand&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Look: social media is a good thing. And I’m writing this from a blog which I’ve maintained in various forms for the better part of a decade now, on which I have posted a great deal of theological reflection. I have my student sermons posted here and elsewhere online. Just because of those realities, I know, even with the least of credentials in ministerial vocation, even with no “reach” to speak of, the temptation to promote my name. I know the temptation to make a brand out of “Chris Krycho.” I want people to listen to my sermons and think they’re good. I want them to be impressed with my voice, my delivery, my exegesis, and the way I point them to God. (Yes, even that last.) And this is all the &lt;em&gt;opposite&lt;/em&gt; of what faithful Christian ministry looks like.&lt;/p&gt;
&lt;p&gt;When I say, “Don’t be a brand,” I mean: don’t make the enlargement of your camp of followers a goal. Make it an &lt;em&gt;anti-goal&lt;/em&gt;, even. When you see people chasing your shadow, point them back to their own churches and their own pastors. Remind them that they live where God planted them, and it is &lt;em&gt;good&lt;/em&gt;. You are not their pastor for a reason.&lt;/p&gt;
&lt;p&gt;This temptation isn’t totally peculiar to pastors. But it is peculiarly dangerous.&lt;/p&gt;
&lt;p&gt;If I promote &lt;a href="//www.newrustacean.com"&gt;New Rustacean&lt;/a&gt;, and that comes to my credit to some degree, I can certainly take pride in it in all the wrong ways. I can hang my self-worth on it. (The reality: I’ve occasionally done just that with &lt;em&gt;all&lt;/em&gt; my public work online.) But even if I were, stupidly and sinfully, to make a brand out of myself with that—not just a public identity, but a marketable version of myself which ✨sparkles✨ with my glorious skill at talking about programming languages—at least I wouldn’t be doing it in the name of God. At least I wouldn’t be claiming to point to Christ while making a name for myself.&lt;/p&gt;
&lt;p&gt;Don’t become a brand no matter what: not even for the sake of being a well-known and well-liked programmer. But whatever you do, do not dare—not for a moment—to take your ministry and use it to draw attention to yourself. Remember (when you preach, when time you write, when you craft a song) that the call to self-exaltation endemic to fallen humanity is a necrotic rot. It will ruin you.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is a place for tweeting out your sermons, for sharing your blog posts on Facebook. You can publish a podcast on theology. You can use the tools of social media to use your gifts as public goods.&lt;/p&gt;
&lt;p&gt;But think hard about the &lt;em&gt;way&lt;/em&gt; you use these platforms, and about &lt;em&gt;how much&lt;/em&gt; you use them. Think about whether your sermon feed should be private. Think about whether you should share your blog posts publicly on Facebook, or only to your church’s private group. Think about your goals and motivations in making a podcast, and chasten your aims.&lt;/p&gt;
&lt;p&gt;Don’t go looking for a bigger platform and more attention. Serve your local church faithfully. God might give you a platform, and if so, use it judiciously (and say no to many things). And if no such platform comes, remember two things: First, God is good and loves you; a big stage might destroy you. Second, your local church is good, and you are called to love &lt;em&gt;those&lt;/em&gt; sheep, not the more numerous sheep in greener pastures elsewhere.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Yes, I’m going to share a link to this when I publish it in a few minutes. And yes, I do so with some trepidation, and a sense of irony.&lt;/p&gt;
&lt;p&gt;I make these choices carefully. I happily promote my podcasts: Winning Slowly and New Rustacean, and even Sap.py and Run With Me—but I do not tweet or post my sermons on Facebook. (And I need to turn off Vimeo’s automatic sharing.) I don’t publicize that RSS feed. It exists; family and friends who care to can subscribe. But I do not and &lt;em&gt;will not&lt;/em&gt; make a habit of pointing to those things. If others find them profitable, well and good; glory to God. But I will not be a brand.&lt;/p&gt;
&lt;p&gt;Use the tools; glorify Christ with them. But use them prudently.&lt;/p&gt;
</content></entry><entry><title>God is With Us</title><link href="http://www.chriskrycho.com/2016/god-is-with-us.html" rel="alternate"></link><published>2016-04-12T19:15:00-04:00</published><updated>2016-04-12T19:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-04-12:/2016/god-is-with-us.html</id><summary type="html">We love and obey God; God dwells with us.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The only constraints on this sermon were that it be between 15 and 25 minutes long, and be on a text from the Old Testament. Audio is recorded with &lt;a href="https://geo.itunes.apple.com/us/app/ferrite-recording-studio/id1018780185?mt=8&amp;amp;at=1001l4KM"&gt;Ferrite&lt;/a&gt;, using an &lt;a href="http://www.apple.com/iphone-se/"&gt;iPhone SE&lt;/a&gt; placed on the podium.&lt;/i&gt;&lt;/p&gt;
&lt;section id="audio" class="level3"&gt;
&lt;h3&gt;Audio&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.podtrac.com/pts/redirect.m4a/cdn.chriskrycho.com/sermons/2016-03-08.m4a"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;audio title="God Is With Us" controls="controls" preload="metadata" src="http://www.podtrac.com/pts/redirect.m4a/cdn.chriskrycho.com/sermons/2016-04-12.m4a" type="audio/m4a"&gt;
Sorry; your browser doesn’t support m4a files. Try downloading the file directly and playing it in iTunes or another media app.
&lt;/audio&gt;
&lt;/section&gt;
&lt;section id="video" class="level3"&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;div class="iframe-wrapper four-to-three"&gt;
&lt;iframe title="God Is With Us" src="https://player.vimeo.com/video/162628625" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href="https://vimeo.com/162628625"&gt;God Is With Us (John 14:15–31)&lt;/a&gt; from &lt;a href="https://vimeo.com/chriskrycho"&gt;Chris Krycho&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="god-is-with-us" class="level1"&gt;
&lt;h1&gt;God Is With Us&lt;/h1&gt;
&lt;section id="introduction" class="level2"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I was recently reading a long article on President Obama’s foreign policy, and something caught my attention as I was reading through the article. There’s a great scene where they’re sitting on a plane in another country, and people are waiting for the President to get off the plane, and the reporter tries to prod him that it might be time to leave, and the President just keeps talking. And what struck me was that &lt;em&gt;relationship&lt;/em&gt;, where he could prod the President that &lt;em&gt;maybe it’s time to leave.&lt;/em&gt; You don’t get that kind of relationship by standing up in the middle of a White House press conference and demanding up-close and personal access. You get it because the President initiates it and invites you to have it with him.&lt;/p&gt;
&lt;p&gt;There’s a fairly obvious analogy to our friendship with God here, and you may well have heard it before. But it rings true. And more than true, in this case: it’s as if the President came and said, “Hey, I’m going to make you a room in the White House. But in the meantime, I’m going to come live with &lt;em&gt;you&lt;/em&gt; and share everything I have with you.”&lt;/p&gt;
&lt;p&gt;As we read through the passage, look for two things, our two themes for this evening:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;We love and obey God&lt;/li&gt;
&lt;li&gt;God dwells with us&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again: &lt;em&gt;we love and obey God&lt;/em&gt; and &lt;em&gt;God dwells with us&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="body" class="level2"&gt;
&lt;h2&gt;Body&lt;/h2&gt;
&lt;p&gt;Read with me, starting in verse 15, and on down through verse 31:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you love me, you will keep my commandments. And I will ask the Father, and he will give you another Helper, to be with you forever, even the Spirit of truth, whom the world cannot receive, because it neither sees him nor knows him. You know him, for he dwells with you and will be in you.&lt;/p&gt;
&lt;p&gt;&amp;quot;I will not leave you as orphans; I will come to you. Yet a little while and the world will see me no more, but you will see me. Because I live, you also will live. In that day you will know that I am in my Father, and you in me, and I in you.&lt;/p&gt;
&lt;p&gt;Whoever has my commandments and keeps them, he it is who loves me. And he who loves me will be loved by my Father, and I will love him and manifest myself to him.&amp;quot; Judas (not Iscariot) said to him, “Lord, how is it that you will manifest yourself to us, and not to the world?” Jesus answered him, &amp;quot;If anyone loves me, he will keep my word, and my Father will love him, and we will come to him and make our home with him. Whoever does not love me does not keep my words. And the word that you hear is not mine but the Father’s who sent me.&lt;/p&gt;
&lt;p&gt;&amp;quot;These things I have spoken to you while I am still with you. But the Helper, the Holy Spirit, whom the Father will send in my name, he will teach you all things and bring to your remembrance all that I have said to you.&lt;/p&gt;
&lt;p&gt;Peace I leave with you; my peace I give to you. Not as the world gives do I give to you. Let not your hearts be troubled, neither let them be afraid. You heard me say to you, ‘I am going away, and I will come to you.’ If you loved me, you would have rejoiced, because I am going to the Father, for the Father is greater than I. And now I have told you before it takes place, so that when it does take place you may believe. I will no longer talk much with you, for the ruler of this world is coming. He has no claim on me, but I do as the Father has commanded me, so that the world may know that I love the Father. Rise, let us go from here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;section id="i.-we-love-and-obey-god" class="level3"&gt;
&lt;h3&gt;I. We love and obey God&lt;/h3&gt;
&lt;p&gt;Throughout this passage, we see those two themes: we love and obey God, and he dwells with us. And they always seem to come in that order.&lt;/p&gt;
&lt;p&gt;Look at verse 15:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you love me, you will keep my commandments. And I will ask the Father…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or verse 21:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whoever has my commandments and keeps them, he it is who loves me. And he who loves me will be loved by the Father…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or verse 23:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If anyone loves me, he will keep my word, and my Father will love him, and we will come to him, and make our home with him.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And by the same token:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whoever does not love me does not keep my words.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, our obedience doesn’t &lt;em&gt;bring about&lt;/em&gt; the Spirit filling us. Our obedience isn’t why God dwells with us. In fact, it’s Jesus’ obedience to the Father, going to die at the hands of the ruler of this world, down there in verse 30, and his resurrection, which we see in verses 18–20, which make fellowship with God possible.&lt;/p&gt;
&lt;p&gt;But clearly, our obedience matters. It’s constantly tied to God’s dwelling with us in this passage. Jesus opens with it because he was talking with people who &lt;em&gt;did&lt;/em&gt; love him. This is &lt;em&gt;comfort&lt;/em&gt; in the midst of what is about to be a very difficult trial. When they might feel left alone like orphans, and needed to known they were his, and he would come back to them.&lt;/p&gt;
&lt;p&gt;So why obedience? Because it is a sign of love. We see that at the end of the passage, in Jesus’ love for the Father and his obedience flowing out of that. And we can see it in our own lives, too. If my daughters are dishonoring their mom by disobeying her, there is something wrong with their love for her. Sometimes when we are talking to or disciplining our three-year-old, we tell her, “Hey, your loves have gotten out of order.” She is loving good things, but in the wrong proportions.&lt;/p&gt;
&lt;p&gt;And we all do that. When we &lt;em&gt;don’t&lt;/em&gt; obey God, when we don’t keep his commandments, it is precisely because we our loves are disordered or mis-ordered. We love things in the wrong way, or we have love them with the wrong priority. Above all, we love other things more than our Father. Not like Jesus.&lt;/p&gt;
&lt;p&gt;What does it look like when we &lt;em&gt;do&lt;/em&gt; love God?&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;For one, &lt;em&gt;knowing&lt;/em&gt; his words. You can’t keep them if you don’t know them!
&lt;ul&gt;
&lt;li&gt;Read the Bible&lt;/li&gt;
&lt;li&gt;Talk about what Jesus said with friends and family, just as part of the ordinary course of your day.&lt;/li&gt;
&lt;li&gt;Memorize Scripture, so it’s there in your mind as you go through life.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Practice daily obedience to his words—not just the flashy, exciting kind, but the ordinary ways we seek holiness.
&lt;ul&gt;
&lt;li&gt;Be kind to your neighbors.&lt;/li&gt;
&lt;li&gt;Go to church.&lt;/li&gt;
&lt;li&gt;Love your in-laws well.&lt;/li&gt;
&lt;li&gt;Tell others the good news of all that Jesus has done and will do.&lt;/li&gt;
&lt;li&gt;Help your kids with their homework even when you’d rather be reading, and don’t be grumpy at them.&lt;/li&gt;
&lt;li&gt;Deal with your children graciously, kindly, and patiently, even when disciplining them.&lt;/li&gt;
&lt;li&gt;Give generously to support the church and missions work.&lt;/li&gt;
&lt;li&gt;Give generously to those who are in need, period—to whomever asks.&lt;/li&gt;
&lt;li&gt;Forgive others when they do you wrong.&lt;/li&gt;
&lt;li&gt;Tell others of this great hope and joy!&lt;/li&gt;
&lt;li&gt;Live in community with other believers: be open to correction, and to encouragement—and give the same!&lt;/li&gt;
&lt;li&gt;Repent of your sins, both privately and publicly.&lt;/li&gt;
&lt;li&gt;Serve where there are needs.&lt;/li&gt;
&lt;li&gt;Turn the other cheek and bless those who curse you.&lt;/li&gt;
&lt;li&gt;Do your work whole-heartedly, for the sake of the God who dwells in you, and not for man!&lt;/li&gt;
&lt;li&gt;Be honest and truthful in your financial and professional dealings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And remember, that’s not a list of ways to get into God’s good graces. It’s a list of ways we respond because we are are already in God’s good graces. Those are things we do because we are confident we are loved. We show him our love by our joyful obedience.&lt;/p&gt;
&lt;p&gt;But in truth, we find that hard. We need help, dealing our disordered and our mis-ordered loves. We forget that we are loved. We forget that we’re not alone, orphans in a cold world.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ii.-god-dwells-with-us" class="level3"&gt;
&lt;h3&gt;II. God Dwells With Us&lt;/h3&gt;
&lt;p&gt;But we’re not. God dwells with us. That’s the hope, and the help, that we need. God dwells with us.&lt;/p&gt;
&lt;p&gt;Look at that question there in the middle: Judas (not Iscariot) asks, “Lord, how is it that you will manifest yourself to us, and not to the world?” That’s a good question. And what Jesus does here is take his first answer, and carry it even further out of the realm of what Judas understood then.&lt;/p&gt;
&lt;p&gt;Jesus opens this passage, having just told them how he is going to go away to the Father and prepare a place for them, and he says, “I will ask the Father, and he will give you another helper” (another advocate, or a friend-in-court, someone to carry you through the trial) “to be with you forever.” The disciples were where, I think, any of us would be in their shoes. &lt;em&gt;Jesus says he’s ‘going to his Father’? What does that mean? Are we going to be alone?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A few weeks ago, I traveled for work, and I ended up being gone for about a week and a half. I have two little girls, and one of them was about nineteen months old then, and she was a &lt;em&gt;wreck&lt;/em&gt; after that. For weeks, every time I went &lt;em&gt;near&lt;/em&gt; the door—if I so much as went to take out the trash, she would &lt;em&gt;lose&lt;/em&gt; it. She didn’t understand where I had gone, or why, or when I was going to come back. And she loves me. She didn’t want me to leave again. She wanted me to be with her.&lt;/p&gt;
&lt;p&gt;That’s where the disciples were. It makes sense. That’s why Jesus told them, “I’m not going to leave you as orphans. I will come to you.”&lt;/p&gt;
&lt;p&gt;But when Jesus explains &lt;em&gt;how&lt;/em&gt; he will come to them: “I will ask, and the Father will send you a Helper, and he will be with you. The world won’t see me, but I will show myself to &lt;em&gt;you&lt;/em&gt;,” you can see where Judas’ confusion comes from. Jesus’ answer, and really this whole passage, points us to &lt;em&gt;something&lt;/em&gt;…&lt;/p&gt;
&lt;p&gt;I can’t fully capture all this passage says. I have wrestled with it for &lt;em&gt;weeks&lt;/em&gt;, and there is just so much here. I can’t capture it. Look at verse 23: “If anyone loves me,” Jesus says, “he will keep my word, and my Father will love him, and we will come to him and make our home with him.”&lt;/p&gt;
&lt;p&gt;I can’t give you a summary, but maybe a window, looking at an ocean.&lt;/p&gt;
&lt;p&gt;God dwells with us.&lt;/p&gt;
&lt;p&gt;God… dwells… with us.&lt;/p&gt;
&lt;p&gt;I said “a window on an &lt;em&gt;ocean&lt;/em&gt;” because the depths here… More than an ocean, there is a &lt;em&gt;universe&lt;/em&gt; of depth here. There are depths here which we will never finish plumbing. We could, for eternity, dive deeper, and deeper into that reality. We &lt;em&gt;will&lt;/em&gt; for eternity dive deeper. But we will never exhaust its depths. We will never say, “Oh: that’s how deep the love of God goes; that’s where it stops.” And this mystery? There is more.&lt;/p&gt;
&lt;p&gt;God dwells with us.&lt;/p&gt;
&lt;p&gt;If you’re a believer, if you love God and keep his commands, this ocean is yours. And friend, listen: if you’re hearing this word and you &lt;em&gt;don’t&lt;/em&gt; yet love God—you’re &lt;em&gt;not&lt;/em&gt; keeping Jesus’ words—&lt;em&gt;this&lt;/em&gt; is what is freely offered to you: in Jesus’ first dwelling with us in the Incarnation; in his life, obeying the Fathers’ plan all the way through to his death on our behalf; in his resurrection; in his asking the Father to send the Spirit—salvation offered freely to you. The God who has always been, the God who exists in eternal love in the Trinity, wants to dwell with you. So turn from your rebellion against God, and love God—and know that you are loved by him!&lt;/p&gt;
&lt;p&gt;He promised them they would see him again (in verses 19–20), a pointer to the resurrection. But more than that, we see in his promise of peace, and even in his telling them ahead of time that he was leaving, preparation for the time when he would have ascended. Like now. We don’t see Jesus with these eyes.&lt;/p&gt;
&lt;p&gt;But we still need to know we’re not orphans. We still need peace, and not like the world gives it. We need God to be with us.&lt;/p&gt;
&lt;p&gt;Imagine there were a way I could tell my little girls, “I’m going away to do some work for you, but even while I’m gone, I will come to you.” Isn’t that what Jesus does here? “I’m going to my Father to prepare a place for you” but now, to your distress about that: “the Father and I will come to you.”&lt;/p&gt;
&lt;p&gt;How? “I will ask the Father,” Jesus says in verse 16, “and he will give you another Helper, to be with you forever, the spirit of Truth… he dwells with you, and will be in you.”&lt;/p&gt;
&lt;p&gt;The Spirit of the living God: his breath; our helper, our advocate and friend-in-court; our teacher, who will remind us of everything Jesus said to us, who inspired these Scriptures and now applies them to us; the peace that we need.&lt;/p&gt;
&lt;p&gt;Because Jesus didn’t go away and leave them orphans. He didn’t leave &lt;em&gt;us&lt;/em&gt; orphans.&lt;/p&gt;
&lt;p&gt;God dwells with us, because his Spirit is with us and in us. And just as the Father and the Son are one (as we see both earlier in this chapter, and again here in verses 20 and 24) the Spirit is one with the Father and the Son. They act together, but it’s more than that. The way Jesus talks in this passage: “We will come to him, and make our home with him”; or the way Paul talks in Ephesians: “You are being built together into a dwelling place for God by the Spirit”. Where the Spirit is, the Father and the Son are, too.&lt;/p&gt;
&lt;p&gt;So when the Father does as the Son asks, and sends us the Spirit to dwell with us, he is giving us &lt;em&gt;himself&lt;/em&gt;. We have access in one Spirit to the Father. When someday we are glorified, and heaven has come down to earth, and the dwelling place of God is physically with man, when we can see the risen Lord with our own eyes—&lt;/p&gt;
&lt;p&gt;The Spirit will still dwell with us. He is with us &lt;em&gt;forever&lt;/em&gt;. He is our union with God. Jesus is in the Father, and we are in him, and he is in us—through the &lt;em&gt;Spirit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We somehow—again, depths beyond us—we participate, through the Spirit, in the life of God.&lt;/p&gt;
&lt;p&gt;He, mystery of mysteries, he wants to dwell with us.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusionexhortation" class="level2"&gt;
&lt;h2&gt;Conclusion/Exhortation&lt;/h2&gt;
&lt;p&gt;As we close tonight, three things to take away.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reflect.&lt;/strong&gt; John wants us to reflect on this mystery: God has made us his &lt;em&gt;home&lt;/em&gt;. God dwells with us.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Obey.&lt;/strong&gt; If we love him, we’re going to obey Jesus’ words. So remember that as we go out from here. Keep his word—not to persuade God to love you, but because he &lt;em&gt;already does&lt;/em&gt; love you, because he &lt;em&gt;already&lt;/em&gt; dwells with you, because you and I together are &lt;em&gt;his temple&lt;/em&gt; and &lt;em&gt;his tabernacle&lt;/em&gt;. So keep his word. Demonstrate (like you would to a friend or a child or a spouse, but so much more) that you &lt;em&gt;love&lt;/em&gt; him.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Peace.&lt;/strong&gt; As we go out from here, we might think to say, “God be with you!” But perhaps better, in light of this passage, to say, “God &lt;em&gt;is&lt;/em&gt; with you. Go in peace.”&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="sermons"></category><category term="SEBTS"></category><category term="M. Div."></category></entry><entry><title>Run With Me!</title><link href="http://www.chriskrycho.com/2016/run-with-me.html" rel="alternate"></link><published>2016-04-11T21:35:00-04:00</published><updated>2016-04-11T21:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-04-11:/2016/run-with-me.html</id><summary type="html">&lt;p&gt;I may have gone mad with power or something, but I launched another podcast today! Crazy, I know.&lt;/p&gt;
&lt;p&gt;It’s both more and less crazy than it might sound, though. More, because of what the podcast is, and less, because of what the podcast is. So what is it?&lt;/p&gt;
&lt;p&gt;&lt;a href="//runwith.chriskrycho.com"&gt;&lt;em&gt;Run …&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I may have gone mad with power or something, but I launched another podcast today! Crazy, I know.&lt;/p&gt;
&lt;p&gt;It’s both more and less crazy than it might sound, though. More, because of what the podcast is, and less, because of what the podcast is. So what is it?&lt;/p&gt;
&lt;p&gt;&lt;a href="//runwith.chriskrycho.com"&gt;&lt;em&gt;Run With Me&lt;/em&gt;&lt;/a&gt; is a microcast, with 3–5-minute long episodes &lt;em&gt;about&lt;/em&gt; running, recorded &lt;em&gt;while&lt;/em&gt; running.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/runwith/cover-web.jpg" title="_Run With Me_ cover art" alt="Run With Me" /&gt;&lt;figcaption&gt;&lt;em&gt;Run With Me&lt;/em&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I allow myself an absolute maximum of ten minutes to edit and publish the episodes. (So far, I’ve never needed more than about &lt;em&gt;three&lt;/em&gt; minutes.) So, for anyone worried that I’m unnecessarily or unwisely adding something more to my already-full plate: don’t be. Apart from spending some of my relaxation time this weekend building the site, the only time I’ll spend on this will be time I would already be spending running or cooling down after a run.&lt;/p&gt;
&lt;p&gt;So far (two episodes in!) it’s a ton of fun. I’ve enjoyed the process of recording it, and it’s nice to be able to talk about running confident that whoever listens is actually interested. (As I explain further on the show, that interest in not boring my audience is part of why I’m doing this, rather than just talking to people I know.)&lt;/p&gt;
&lt;p&gt;If you have any interest in running, and especially if you like listening to podcasts while you run, I think you’ll enjoy this. I’d love it if you subscribed!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://itunes.apple.com/us/podcast/run-with-me/id1102273878?mt=2"&gt;&lt;i class="fa fa-fw fa-music"&gt;&lt;/i&gt; iTunes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://overcast.fm/p418939-N58r18"&gt;&lt;i class="fa fa-fw fa-play-circle"&gt;&lt;/i&gt; Overcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pca.st/5toh"&gt;&lt;i class="fa fa-fw fa-play-circle-o"&gt;&lt;/i&gt; PocketCasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://runwith.chriskrycho.com/feed.xml"&gt;&lt;i class="fa fa-fw fa-rss"&gt;&lt;/i&gt; Old-fashioned RSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;A few comments on the podcast from a form/genre angle, and a few from a technical angel:&lt;/p&gt;
&lt;p&gt;You can think of &lt;a href="//www.manton.org/2016/01/new-podcast-timetable.html"&gt;“microcasts”&lt;/a&gt; as being not terribly dissimilar from a &lt;a href="//www.chriskrycho.com/micro/"&gt;microblog post&lt;/a&gt; in its own way. I’m happily stealing the idea of a microcast from &lt;a href="//www.manton.org"&gt;Manton Reece&lt;/a&gt;, whose &lt;a href="//timetable.manton.org"&gt;Timetable&lt;/a&gt; show is a delightful little thing. (It’s not original to him; a quick [Google search] will turn up instances of the term dating back several years at least, but he’s where I got the idea, and I think he’s certainly one of the first to be popularizing the form.)&lt;/p&gt;
&lt;p&gt;I find podcasting as a medium extremely interesting in general (I’m &lt;a href="//www.winningslowly.org"&gt;sure&lt;/a&gt; you would &lt;a href="//www.newrustacean.com"&gt;never&lt;/a&gt; have &lt;a href="//www.sap-py.com"&gt;guessed&lt;/a&gt; that), and I think microcasts will proliferate rapidly. As my friend &lt;a href="http://oluseyi.info"&gt;Oluseyi Sonaiya&lt;/a&gt; and I have often discussed, brevity is a real virtue in podcasting, and one too-little appreciated by many amateur producers in the space. &lt;a href="http://independentclauses.com"&gt;Stephen&lt;/a&gt; and I aim for that balance with &lt;a href="//www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;, and it’s always been a part of my consideration with &lt;a href="//www.newrustacean.com"&gt;New Rustacean&lt;/a&gt; as well. People’s time is valuable. Saying something and then &lt;em&gt;being done&lt;/em&gt; is a kindness to your audience.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And then, practically speaking, there’s the simple reality that it’s just &lt;em&gt;harder&lt;/em&gt; to record a long-form podcast while running. Especially a good one.&lt;/p&gt;
&lt;p&gt;At a tech level, producing the podcast is incredibly simple: I use the built-in microphone in the headphones that come with an iPhone to record, and do the recording and (extremely minimal) audio production in &lt;a href="https://geo.itunes.apple.com/us/app/ferrite-recording-studio/id1018780185?mt=8&amp;amp;at=1001l4KM"&gt;Ferrite&lt;/a&gt;. When I say minimal, I mean really minimal: I chop off the bits before I start talking, and the bits after I start talking, and I do all of that on my iPhone. Then I export to Dropbox, and from there to my CDN. That’s it.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;No comments about the length of my blog posts, please.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="fitness"></category><category term="podcasting"></category><category term="design"></category></entry><entry><title>Why We Gather</title><link href="http://www.chriskrycho.com/2016/why-we-gather.html" rel="alternate"></link><published>2016-04-03T10:11:00-04:00</published><updated>2016-04-03T10:11:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-04-03:/2016/why-we-gather.html</id><summary type="html">&lt;p&gt;One of the reasons we meet together as a church every Sunday, no matter what; and one of the beauties of taking the Lord’s supper together every Sunday, no matter what, is this:&lt;/p&gt;
&lt;p&gt;Today, my morning so far has involved one child being mildly fussy, and the other having …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the reasons we meet together as a church every Sunday, no matter what; and one of the beauties of taking the Lord’s supper together every Sunday, no matter what, is this:&lt;/p&gt;
&lt;p&gt;Today, my morning so far has involved one child being mildly fussy, and the other having a series of protracted meltdowns which including urinating on me. It includes the dreadful strains of children’s entertainment in the background as I write these very words: the kind of thing that seems calculated to annoy me.&lt;/p&gt;
&lt;p&gt;But this is the Lord’s day. Not mine.&lt;/p&gt;
&lt;p&gt;We will gather in a few hours to proclaim the one who lived in this same world, in all its brokenness. We will sing to remind each other of the way Jesus fulfilled and finished the hope of Israel, of how he died, of how he &lt;em&gt;lives&lt;/em&gt;. We will hear the word of our Lord preached, words that are true and lasting. We will take the Lord’s supper together as a lasting reminder of what he did, as a sign of his lasting presence with us today, and as a promise of the future wedding feast that we will partake of together. We will share the week’s joys and sorrows with each other. It will be imperfect, messy, possibly out of tune and with more than a few crumbs on the floor. But it will be &lt;em&gt;good&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We gather regardless of how we feel, or of what our circumstances are. We need each other, and we need the reminder that the things we experience day-in and day-out are not final or ultimate. We gather as a reminder that the little tastes we find of the Kingdom in the gathering are tastes of a future that really is coming.&lt;/p&gt;
</content><category term="family"></category><category term="church"></category></entry><entry><title>even Easter morning</title><link href="http://www.chriskrycho.com/2016/even-easter-morning.html" rel="alternate"></link><published>2016-03-27T11:50:00-04:00</published><updated>2016-03-27T11:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-27:/2016/even-easter-morning.html</id><summary type="html">The ways we carry on in this modern world / do at times perplex me / for we are not, or not especially, / mindful of the world around us</summary><content type="html">&lt;div class="line-block"&gt;The ways we carry on in this modern world&lt;br /&gt;
do at times perplex me&lt;br /&gt;
for we are not, or not especially,&lt;br /&gt;
mindful of the world around us.&lt;br /&gt;
&lt;br /&gt;
It is charged, they say, charged with wonder,&lt;br /&gt;
and I suppose it must be&lt;br /&gt;
for this is a world where God became a man,&lt;br /&gt;
and died, and lived again&lt;br /&gt;
&lt;br /&gt;
But every day seems a day like another,&lt;br /&gt;
even Easter morning&lt;br /&gt;
Because we do still live in the time&lt;br /&gt;
between the times:&lt;br /&gt;
&lt;br /&gt;
Christ is risen!&lt;br /&gt;
    —and we still die, and mourn&lt;br /&gt;
        (but not without hope)—&lt;br /&gt;
Christ will come again!&lt;br /&gt;
&lt;br /&gt;
And this is why we meet&lt;br /&gt;
this is why we sing&lt;br /&gt;
and tell each other again&lt;br /&gt;
the old story, as if new&lt;br /&gt;
&lt;br /&gt;
So that on gray days like every other&lt;br /&gt;
even Easter morning&lt;br /&gt;
We remember, though still in the time&lt;br /&gt;
between the times:&lt;br /&gt;
&lt;br /&gt;
Christ is risen!&lt;br /&gt;
    —and we will live, and dance&lt;br /&gt;
       (when we see our hope)—&lt;br /&gt;
Christ will come again!&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>what darkness crawls on human hearts</title><link href="http://www.chriskrycho.com/2016/what-darkness-crawls-on-human-hearts.html" rel="alternate"></link><published>2016-03-26T21:21:00-04:00</published><updated>2016-03-26T21:21:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-26:/2016/what-darkness-crawls-on-human-hearts.html</id><summary type="html">&lt;div class="line-block"&gt;what darkness crawls on human hearts&lt;br /&gt;
in times between times, in waitings,&lt;br /&gt;
what shadows ’twine and strangle souls&lt;br /&gt;
after hoping’s wretched end&lt;br /&gt;
&lt;br /&gt;
what murks do clamp on human hopes&lt;br /&gt;
in days which be nights, in sorrows&lt;br /&gt;
what gloom does bind and tangle minds&lt;br /&gt;
after dreaming’s left undone&lt;br /&gt;
&lt;br /&gt;
but …&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;what darkness crawls on human hearts&lt;br /&gt;
in times between times, in waitings,&lt;br /&gt;
what shadows ’twine and strangle souls&lt;br /&gt;
after hoping’s wretched end&lt;br /&gt;
&lt;br /&gt;
what murks do clamp on human hopes&lt;br /&gt;
in days which be nights, in sorrows&lt;br /&gt;
what gloom does bind and tangle minds&lt;br /&gt;
after dreaming’s left undone&lt;br /&gt;
&lt;br /&gt;
but&lt;br /&gt;
nights end&lt;br /&gt;
and&lt;br /&gt;
night’s end&lt;br /&gt;
yet…&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>The Titles Father, Son, and Holy Spirit as Denoting Being, Not Activity</title><link href="http://www.chriskrycho.com/2016/the-titles-father-son-and-holy-spirit-as-denoting-being-not-activity.html" rel="alternate"></link><published>2016-03-26T20:30:00-04:00</published><updated>2016-03-26T20:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-26:/2016/the-titles-father-son-and-holy-spirit-as-denoting-being-not-activity.html</id><summary type="html">Karl Rahner's famous dictum, “The ‘economic’ Trinity is the ‘immanent’ Trinity, and the ‘immanent’ Trinity is the ‘economic’ Trinity,” is a helpful and accurate summary—but must be applied carefully.
</summary><content type="html">&lt;section id="introduction" class="level2"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Rahner’s Rule famously states that “the ‘economic’ Trinity is the ‘immanent’ Trinity, and the ‘immanent’ Trinity is the ‘economic’ Trinity.”&lt;span class="citation" data-cites="rahner"&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The dictum has been much debated and stands as a major point of consideration—not to say contention!—in modern Trinitarian doctrinal discussion. This paper will establish that Rahner’s rule, rightly understood and articulated,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; is correct and essential for the Christian faith, and leads inexorably to the conclusion that the names “Father,” “Son,” and “Spirit” are titles of God in being, and not only in activity. The triune &lt;em&gt;actions&lt;/em&gt; of God are the result of his triune &lt;em&gt;being&lt;/em&gt;; therefore, God’s work in salvation history is truly self-revelatory. Thus, Christians may claim to have right and proper, though not exhaustive, knowledge of the divine nature through his mighty works in history. The one true, Triune God has acted in history as the Father of Jesus Christ, the Incarnate Logos, and the Spirit of the Father and the Son—and in this he has not presented a charade, but the Godhead as it truly is. Thus, Christians are right to understand God as being &lt;em&gt;in essence and being&lt;/em&gt;, and not merely in &lt;em&gt;action&lt;/em&gt;—that is, &lt;em&gt;in se&lt;/em&gt;—Father, Son, and Spirit.&lt;/p&gt;
&lt;p&gt;A definition of the terms may be helpful: the “economic” Trinity is the Trinity at work in history (and especially salvation history). The “immanent Trinity” is God present to himself (&lt;em&gt;in se&lt;/em&gt;); it might well be termed the “ontological” Trinity or “eternal” Trinity.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Thus, Rahner’s claim entails at least 3 sub-claims: God is Trinity in being; God’s Triune nature is revealed &lt;em&gt;only&lt;/em&gt; through (salvation) history; and God’s Triune nature is &lt;em&gt;truly&lt;/em&gt; revealed through salvation history.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Responses to Rahner’s dictum since its 1970 publication in &lt;em&gt;The Trinity&lt;/em&gt; have taken it in one of two major directions: “radicalizing” and “restricting.” Authors following the radicalizing course reduce the immanent Trinity to the economic trinity. As a consequence, they often tie human knowledge of (and sometimes the actual being of) God to his development along with the cosmos, or to human experience of God in the Incarnation specifically. In constrast, the “restricting” interpreters affirm Rahner’s rule but note its limits. In particular, they tend to emphasize that the being of the Trinity is independent of salvation history, though rightly revealed in it.&lt;span class="citation" data-cites="sanders"&gt;&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; This paper takes the later stance.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="analysis" class="level2"&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;section id="scriptural-basis" class="level3"&gt;
&lt;h3&gt;Scriptural Basis&lt;/h3&gt;
&lt;p&gt;Several passages in the New Testament emphasize most clearly the integral (and not merely functional) unity and relationship of the Father and the Son, and likewise the essential relationship of Spirit to Father and Son. In each case, the claim’s truth depends on the eternal relations between the persons being precisely those revealed in salvation history.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Throughout his prologue, John is at pains to demonstrate that the Logos eternally dwells as Logos and as God—and &lt;em&gt;as Son&lt;/em&gt;. In 1:14, John emphasizes that the glory of the Incarnate Word is as (that it: it &lt;em&gt;is&lt;/em&gt;) the glory of the only Son from the Father. He follows this with the assertion that “the only God, who is at the Father’s side, he has made him known” (verse 18). In John 10:15, Jesus himself proclaims that he knows the Father and the Father knows him; in 10:30 he declares, “I and the Father are one.” The consistent claim of John’s gospel, then, is: Jesus, the Incarnate Logos, knew and revealed the Father as his Son. For the claim to be coherent or true, two things must hold.&lt;/p&gt;
&lt;p&gt;First, Jesus’ knowledge of God as his Father could not merely be a statement of the state of affairs between them during the Incarnation. If that were the case, the knowledge he claims would be knowledge not of the Father as he is, but only of the human experience of God as wholly other, transcendent, unreachable—not, that is, of God as immanent. It would not be the knowledge of God as he is within his own triune self. Second, and consequentially, the revelation Jesus offered his disciples of God would likewise be not of God as he is in himself, but only the human experience of God. If God is not Father to the Son and Son to the Father &lt;em&gt;in se&lt;/em&gt;, but only in acts in history, then the revelation of God as the “Father of our Lord Jesus Christ” (Eph. 1:3, Col. 1:3). Moreover, the apostles claimed Jesus to be “the image of the invisible God” (Col. 1:15) in whom “all the fallness of God was pleased to dwell” (Col. 1:19); the “radiance of the glory of God and the exact imprint of his nature” (Heb. 1:3). Again, if Jesus’ acts in history can be separated from his &lt;em&gt;nature&lt;/em&gt;, these claims become meaningless. Jesus’ Sonship and his making a way to the Father are central to the apostolic preaching. If Sonship and Fatherhood are not part of God’s nature, Jesus could neither have imaged God nor carried the exact imprint of his nature.&lt;/p&gt;
&lt;p&gt;Likewise, Jesus’ promise to ask the Father to give the Spirit (14:16–17), which finds its fulfillment after the ascension of the Son, highlights the eternal relation between the persons. Whether during or after (or indeed before) the Incarnation, the Son speaks to the Father &lt;em&gt;as Father&lt;/em&gt;, and the Father sends the Spirit &lt;em&gt;as his Spirit&lt;/em&gt; at the Son’s request &lt;em&gt;as Son&lt;/em&gt;. Thus, in John 14:15–29, Jesus explains that the coming of the Spirit &lt;em&gt;is&lt;/em&gt; the coming of the Son. To have the Spirit of truth is to have the Son who is in the Father, in oneself. The Father and the Son come to a believer when the Spirit comes to her (14:20). The Son comes to the one whom the Spirit indwells (14:21, 28). The Spirit proceeds from the Father and bears witness about the Son who sent him (15:26). But as with the persons of the Son and the Father, this identity cannot be if the persons are not merely acting in this way, but rather eternally subsist, eternally are &lt;em&gt;being&lt;/em&gt; the Father of the Son and Son of the Father and Spirit of the Father and the Son. How could the Spirit bear witness truly to the Son, or rightly be said to be sent by the Father, if the Son and Father are not actually Son and Father, but only act as such in the history of salvation? In that case, the Spirit might be sent in salvation history, but would not bear witness to the Son as he is &lt;em&gt;in himself&lt;/em&gt;. The revelation would be of something less than God—not at all what Jesus promised.&lt;/p&gt;
&lt;p&gt;In each case, it is clear: Scripture claims that the actions of the Triune God in history reveal him as he is. The Son truly reveals the Father. The Father truly sends the Spirit through the Son. The Spirit truly glorifies the Father and the Son. These are so because the Spirit, Son, and Father act in accordance with their eternal, immanent relations. The efficacy of God’s reconciling, saving work—the Son drawing people into his own communion with the Father through the indwelling Spirit—depends on the economy of salvation being the outworking of God’s own nature. Their relations within the Godhead which precede, ground, and perfectly inform their actions. Thus, Rahner’s rule might helpfully be elaborated and rephrased: the economic Trinity (rightly and truly, but inexhaustively) reveals the immanent Trinity, because the economic trinity derives wholly from the being of the immanent Trinity. Being drives action, and action (partially, but truly) reveals being.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="rahner-evaluated" class="level3"&gt;
&lt;h3&gt;Rahner Evaluated&lt;/h3&gt;
&lt;p&gt;Though Rahner’s Rule is strictly correct, his own elaboration of these ideas has its limits: not least in its tendency, as he developed it, toward modalism.&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; Thus, Letham observes that Rahner’s discussion of persons as “distinct manners of subsisting” leaves little room for &lt;em&gt;love&lt;/em&gt; between the subsisters.&lt;span class="citation" data-cites="letham"&gt;&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; However, the solution is not to abandon Rahner’s dictum, but to press on it more firmly, more clearly, and more Scripturally. After all, the Scriptures bear witness to the triune God’s actions precisely as their interacting not merely as “subsistences” but as persons-who-love. The Son does the Father’s will and shows the Father truly, and they send to their people the Spirit who communicates everything of the Father and the Son. As Torrance comments:&lt;span class="citation" data-cites="torrance"&gt;&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thus when we approach God as Father through the Son, our knowledge of the Father in the Son is grounded in the very being of God and is determined by what he essentially is in his own nature… in Jesus Christ we are really enabled to know God in accordance with his own nature as Father and Son…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But this is &lt;em&gt;not&lt;/em&gt; the case if the economic Trinity and the immanent Trinity are truly distinct. The Incarnation reveals God as he is in himself &lt;em&gt;only&lt;/em&gt; if the God’s works flow from his being and essence, in the relations Father, Son, and Spirit.&lt;/p&gt;
&lt;p&gt;Likewise, Letham is right that Rahner partially neglects the immanent Trinity and limits himself to the human experience of the economic Trinity.&lt;span class="citation" data-cites="letham"&gt;&lt;a href="#fn10" class="footnote-ref" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; For example, Rahner regularly falls prey to a trap Athanasius avoids: seeing the Father, especially in the Old Testament, primarily as &lt;em&gt;unoriginate&lt;/em&gt;.&lt;a href="#fn11" class="footnote-ref" id="fnref11"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt; Worse, he derives the person of the Father from the knowledge of the Father.&lt;span class="citation" data-cites="rahner"&gt;&lt;a href="#fn12" class="footnote-ref" id="fnref12"&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; He fails to apply the second half of his dictum. If the first half emphasizes that the Trinity’s actions reveal the divine being, the second half emphasizes that those actions flow out of the divine being. The acts of the Godhead in history reveal to God’s nature because they are not merely human experiences, but the God’s self-revelation of his own being.&lt;/p&gt;
&lt;p&gt;Rahner largely has the right of this elsewhere. He notes that when Jesus considers himself as Son, he considers not only his human but also his divine relation to the Father as that of a Son.&lt;span class="citation" data-cites="rahner"&gt;&lt;a href="#fn13" class="footnote-ref" id="fnref13"&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The incarnate Son reveals both the Father truly, and also that the Incarnate Logos is Son and not Father.&lt;span class="citation" data-cites="rahner"&gt;&lt;a href="#fn14" class="footnote-ref" id="fnref14"&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The same must be said of the human relationship to God through the Spirit.&lt;span class="citation" data-cites="rahner"&gt;&lt;a href="#fn15" class="footnote-ref" id="fnref15"&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The Spirit who communicates the love and grace and forgiveness the Father has effected by the work of the Incarnate Son is God. He communicates God as he is, as the &lt;em&gt;presence&lt;/em&gt; of the Father’s self-revelation in the Son.&lt;span class="citation" data-cites="torrance"&gt;&lt;a href="#fn16" class="footnote-ref" id="fnref16"&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The Spirit is the Spirit of the Father and the Spirit of the Son; he is the true presence of both; he shares their mutual love and joy, and communicates both to believers.&lt;/p&gt;
&lt;p&gt;John Frame objects to another misstep Rahner’s rule might prompt: “There is a difference between what God is necessarily and what he freely chooses to do in his plan for creation.”&lt;span class="citation" data-cites="frame"&gt;&lt;a href="#fn17" class="footnote-ref" id="fnref17"&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; No necessity demanded creation, salvation, or indeed any of God’s acts in history.&lt;span class="citation" data-cites="letham torrance barth:I.2"&gt;&lt;a href="#fn18" class="footnote-ref" id="fnref18"&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; They are &lt;em&gt;gifts&lt;/em&gt;.&lt;span class="citation" data-cites="barth:IV.1"&gt;&lt;a href="#fn19" class="footnote-ref" id="fnref19"&gt;&lt;sup&gt;19&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; They are acts in which the Trinity is evidenced, and therefore are truly revelatory; but this is because God faithfully acts in accord with his own nature.&lt;span class="citation" data-cites="letham barth:II.1"&gt;&lt;a href="#fn20" class="footnote-ref" id="fnref20"&gt;&lt;sup&gt;20&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; On the other hand, the realities of the Trinity “either are in God himself… or they exist only in us… as effects of the divine creative activity. But then… there occurs no self-communication, God himself is not there, he is only represented by the creature…”&lt;span class="citation" data-cites="rahner"&gt;&lt;a href="#fn21" class="footnote-ref" id="fnref21"&gt;&lt;sup&gt;21&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; God is not obliged to act in a particular way in salvation history, but his actions truly reflect his being. It is because “God is, ‘before’ creation took place, already a being-in-relation”&lt;span class="citation" data-cites="gunton"&gt;&lt;a href="#fn22" class="footnote-ref" id="fnref22"&gt;&lt;sup&gt;22&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; that he is free of necessity in creation or salvation. The Trinity does not need anything, for Father, Son, and Spirit are eternally in relation to one another. God does not need to create, to redeem, even to reveal himself; “God’s self-unveiling remains an act of sovereign divine freedom”&lt;span class="citation" data-cites="barth:I.1"&gt;&lt;a href="#fn23" class="footnote-ref" id="fnref23"&gt;&lt;sup&gt;23&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;—but creation, redemption, and revelation are still acts of self-unveiling.&lt;/p&gt;
&lt;p&gt;Thus, if Rahner’s rule is pressed to the point where God’s triunity is restricted to (or by) his acts in history, it is wrong, for precisely the reason Frame outlines—but it need not be pressed that way. “The Triune God is the Lord of history. Events in this world do not prescribe his being, or his tri-unity… all we know of the immanent Trinity is given in revelation, but revelation does not and cannot fully reveal God to human minds.”&lt;span class="citation" data-cites="giles"&gt;&lt;a href="#fn24" class="footnote-ref" id="fnref24"&gt;&lt;sup&gt;24&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The Father of Jesus is the eternal Father of the Son, the incarnate Logos the eternal Son of the Father, and the sent Helper is the eternal Spirit of Father and Son. Human knowledge of the Trinity is not &lt;em&gt;exhaustive&lt;/em&gt;, but it is &lt;em&gt;true&lt;/em&gt;. “God reveals himself as he truly is… the economic roles played by the three persons must be appropriate to their natures.”&lt;span class="citation" data-cites="frame"&gt;&lt;a href="#fn25" class="footnote-ref" id="fnref25"&gt;&lt;sup&gt;25&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="subordination" class="level3"&gt;
&lt;h3&gt;Subordination&lt;/h3&gt;
&lt;p&gt;One other serious challenge remains. How (if at all) should Jesus Christ’s human nature be taken to relate to his divine nature in considerations of the correspondence or identity&lt;a href="#fn26" class="footnote-ref" id="fnref26"&gt;&lt;sup&gt;26&lt;/sup&gt;&lt;/a&gt; between the economic and immanent Trinity? The Incarnation reveals the relationship of Father to Son and Son to Father (as well as the relation of the Spirit between the two); then is everything that is true of the way that the Son/Logos-as-man related to the Father true of the way that the Son/Logos eternally relates to the Father? Or are there instead elements of the Incarnation which reflect Jesus’ human as well as his divine nature in relation to the Godhead? It is clear that Jesus the man subordinated his will to God the Father’s will, but it is not at all clear that this entails the eternal submission of the divine Son’s will to the Father’s will. Whether in liberationist theology or attempts to ground male-femlae relations in the ontology of the Trinity, any “radicalizing” approach tends to collapse the proper direction of the identity. It does not follow from the eternal distinction between Father and Son that the Father’s love for the Son is somehow greater than than the reciprocal love of the Son for the Father, or that the creative and redemptive acts of the Trinity in history reflect such a distinction.&lt;span class="citation" data-cites="moltmann"&gt;&lt;a href="#fn27" class="footnote-ref" id="fnref27"&gt;&lt;sup&gt;27&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Was it necessary in a logical or ontological sense that the Son and not the Father or the Spirit become incarnate? The answer is “yes”, but a carefully qualified yes. Creation, salvation, and eschatological restoration are each acts of the Triune God in which there is no confusion of that which is outside the Trinity and the inner Triune life itself.&lt;span class="citation" data-cites="barth:III.1"&gt;&lt;a href="#fn28" class="footnote-ref" id="fnref28"&gt;&lt;sup&gt;28&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; The Father wills, and through the Son’s action the Spirit effects. But in each of these acts, it is the Father &lt;em&gt;as Father&lt;/em&gt;, the Son &lt;em&gt;as Son&lt;/em&gt;, and the Spirit &lt;em&gt;as Spirit&lt;/em&gt; at work.&lt;span class="citation" data-cites="barth:III.1"&gt;&lt;a href="#fn29" class="footnote-ref" id="fnref29"&gt;&lt;sup&gt;29&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; Not only in the specific instance of Incarnation, but in all of history&lt;a href="#fn30" class="footnote-ref" id="fnref30"&gt;&lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt; the economy of the Trinity reflects and proceeds from the essence of the Trinity.&lt;span class="citation" data-cites="rahner"&gt;&lt;a href="#fn31" class="footnote-ref" id="fnref31"&gt;&lt;sup&gt;31&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; God freely acts in history in accord with his own being.&lt;span class="citation" data-cites="letham rahner frame"&gt;&lt;a href="#fn32" class="footnote-ref" id="fnref32"&gt;&lt;sup&gt;32&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; At the same time, the Incarnation—however climactic—is not the whole of God’s self-revelation. Equally important must be both the rest of salvation history and the apostolic teaching on the nature of the Son, which clarifies: there is &lt;em&gt;mutual&lt;/em&gt; submission within the Trinity.&lt;span class="citation" data-cites="frame"&gt;&lt;a href="#fn33" class="footnote-ref" id="fnref33"&gt;&lt;sup&gt;33&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; It was fitting that the Son be Incarnate, and the Spirit sent; but more than this in terms of subordination should not be read into the relations of the Trinity.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If the persons of the Trinity are not Father, Son, and Spirit in and of themselves, then Christians know nothing of the inner life of the God we profess to worship. The notion of Scripture as divine self-revelation is a sham. The actions of God in history do not reveal God himself. In that case, Jesus’ claim to reveal the Father would be more than suspect; it would be false. Moreover, it must have been the Son, the Logos, who was the climactic revelation of God (Heb. 1:3), and the Spirit who is the indwelling presence of Father and Son in God’s people. “The divine Word is the divine speaking. The divine gift is the divine giving.”&lt;span class="citation" data-cites="barth:I.1"&gt;&lt;a href="#fn34" class="footnote-ref" id="fnref34"&gt;&lt;sup&gt;34&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="bibliography" class="level1 unnumbered"&gt;
&lt;h1&gt;Bibliography&lt;/h1&gt;
&lt;div id="refs" class="references"&gt;
&lt;div id="ref-barth:III.1"&gt;
&lt;p&gt;Barth, Karl. &lt;em&gt;The Doctrine of Creation&lt;/em&gt;. Edited by G. W. Bromiley and T. F. Torrance. Translated by J. W. Edwards, O. Bussey, and Harold Knight. Vol. III.1. Church Dogmatics. Edinburgh: T &amp;amp; T Clark, 1958.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-barth:II.1"&gt;
&lt;p&gt;———. &lt;em&gt;The Doctrine of God&lt;/em&gt;. Edited by G. W. Bromiley and T. F. Torrance. Translated by T. H. L. Parker, W. B. Johnston, Harold Knight, and J. L. M. Haire. Vol. II.1. Church Dogmatics. Edinburgh: T &amp;amp; T Clark, 1957.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-barth:IV.1"&gt;
&lt;p&gt;———. &lt;em&gt;The Doctrine of Reconciliation&lt;/em&gt;. Edited by G. W. Bromiley and T. F. Torrance. Translated by G. W. Bromiley. Vol. IV.1. Church Dogmatics. Edinburgh: T &amp;amp; T Clark, 1956.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-barth:I.2"&gt;
&lt;p&gt;———. &lt;em&gt;The Doctrine of the Word of God&lt;/em&gt;. Edited by G. W. Bromiley and T. F. Torrance. Translated by G. W. Bromiley. Vol. I.2. Church Dogmatics. Edinburgh: T &amp;amp; T Clark, 1956.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-barth:I.1"&gt;
&lt;p&gt;———. &lt;em&gt;The Doctrine of the Word of God&lt;/em&gt;. Edited by G. W. Bromiley and T. F. Torrance. Translated by G. W. Bromiley. Second edition. Vol. I.1. Church Dogmatics. 1936. Reprint, Edinburgh: T &amp;amp; T Clark, 1975.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-erickson"&gt;
&lt;p&gt;Erickson, Millard J. &lt;em&gt;God in Three Persons: A Contemporary Interpretation of the Trinity&lt;/em&gt;. Second printing. 1995. Reprint, Baker Books, 1996.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-frame"&gt;
&lt;p&gt;Frame, John. &lt;em&gt;The Doctrine of God: A Theology of Lordship&lt;/em&gt;. Vol. 2. A Theology of Lordship. Phillipsburg: P&amp;amp;R Publishing, 2002.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-giles"&gt;
&lt;p&gt;Giles, Kevin. &lt;em&gt;Jesus and the Father: Modern Evangelicals Reinvent the Doctrine of God&lt;/em&gt;. Grand Rapids: Zondervan, 2006.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-gunton"&gt;
&lt;p&gt;Gunton, Colin E. &lt;em&gt;The Promise of Trinitarian Theology&lt;/em&gt;. Second edition. 1991. Reprint, T &amp;amp; T Clark, 1997.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-lacugna"&gt;
&lt;p&gt;LaCugna, Catherine Mowry. &lt;em&gt;God for Us: The Trinity and the Christian Life&lt;/em&gt;. First paperback edition. 1991. Reprint, New York: Harper San Francisco, 1993.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-letham"&gt;
&lt;p&gt;Letham, Robert. &lt;em&gt;The Holy Trinity: In Scripture, History, Theology, and Worship&lt;/em&gt;. Phillipsburg: P&amp;amp;R Publishing, 2004.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-moltmann"&gt;
&lt;p&gt;Moltmann, Jürgen. &lt;em&gt;History and the Triune God: Contributions to Trinitarian Theology&lt;/em&gt;. Translated by John Bowden. New York: Crossroad, 1992.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-rahner"&gt;
&lt;p&gt;Rahner, Karl. &lt;em&gt;The Trinity&lt;/em&gt;. Translated by Joseph Donceel. March 2015 printing. 1967. Reprint, New York: The Crossroad Publishing Company, 1997.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-sanders"&gt;
&lt;p&gt;Sanders, Fred. &lt;em&gt;The Image of the Immanent Trinity: Rahner’s Rule and the Theological Interpretation of Scripture&lt;/em&gt;. Issues in Systematic Theology 12. New York: Peter Lang, 2005.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-torrance"&gt;
&lt;p&gt;Torrance, T. F. &lt;em&gt;The Trinitarian Faith&lt;/em&gt;. Paperback edition, sixth printing. 1991. Reprint, New York: T &amp;amp; T Clark, 2006.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Karl Rahner, &lt;em&gt;The Trinity&lt;/em&gt;, trans. Joseph Donceel, March 2015 printing (1967; repr., New York: The Crossroad Publishing Company, 1997), 22.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Which is not necesarily to say “as Rahner himself understood or articulated it” or “as it is interpreted by his most famous interpreters”.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;For a helpful summary of the history of the development of the terms, see &lt;span class="citation" data-cites="giles"&gt;Kevin Giles, &lt;em&gt;Jesus and the Father: Modern Evangelicals Reinvent the Doctrine of God&lt;/em&gt; (Grand Rapids: Zondervan, 2006)&lt;/span&gt; 246–249.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;For a similar summary of this development, see &lt;span class="citation" data-cites="giles"&gt;Giles&lt;/span&gt; 250–265.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Fred Sanders, &lt;em&gt;The Image of the Immanent Trinity: Rahner’s Rule and the Theological Interpretation of Scripture&lt;/em&gt;, Issues in Systematic Theology 12 (New York: Peter Lang, 2005), 83–84.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;“Precision” here meaning “truth” but not “exhaustion.” See below.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;Cf. &lt;span class="citation" data-cites="rahner"&gt;Rahner, &lt;em&gt;The Trinity&lt;/em&gt;&lt;/span&gt; 106–107, where Rahner very nearly collapses the persons into the mere self-expressions of a pure monad.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Robert Letham, &lt;em&gt;The Holy Trinity: In Scripture, History, Theology, and Worship&lt;/em&gt; (Phillipsburg: P&amp;amp;R Publishing, 2004), 295–96.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;T. F. Torrance, &lt;em&gt;The Trinitarian Faith&lt;/em&gt;, paperback edition, sixth printing (1991; repr., New York: T &amp;amp; T Clark, 2006), 53.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;Letham, &lt;em&gt;The Holy Trinity&lt;/em&gt;, 297.&lt;a href="#fnref10" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn11"&gt;&lt;p&gt;E.g. &lt;span class="citation" data-cites="rahner"&gt;Rahner, &lt;em&gt;The Trinity&lt;/em&gt;, 59&lt;/span&gt;; cf. Athanasius &lt;em&gt;Apologia Contra Arianos&lt;/em&gt; 1.33–34.&lt;a href="#fnref11" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn12"&gt;&lt;p&gt;Rahner, 60.&lt;a href="#fnref12" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn13"&gt;&lt;p&gt;Rahner, 63–65.&lt;a href="#fnref13" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn14"&gt;&lt;p&gt;Cf. Rahner, 29 and &lt;span class="citation" data-cites="torrance"&gt;@torrance&lt;/span&gt;, 55.&lt;a href="#fnref14" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn15"&gt;&lt;p&gt;Rahner, &lt;em&gt;The Trinity&lt;/em&gt;, 67.&lt;a href="#fnref15" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn16"&gt;&lt;p&gt;Torrance, &lt;em&gt;The Trinitarian Faith&lt;/em&gt;, 203.&lt;a href="#fnref16" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn17"&gt;&lt;p&gt;John Frame, &lt;em&gt;The Doctrine of God: A Theology of Lordship&lt;/em&gt;, vol. 2, A Theology of Lordship (Phillipsburg: P&amp;amp;R Publishing, 2002), 706–7.&lt;a href="#fnref17" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn18"&gt;&lt;p&gt;Letham, &lt;em&gt;The Holy Trinity&lt;/em&gt;, 363–64; Torrance, &lt;em&gt;The Trinitarian Faith&lt;/em&gt;; Karl Barth, &lt;em&gt;The Doctrine of the Word of God&lt;/em&gt;, ed. G. W. Bromiley and T. F. Torrance, trans. G. W. Bromiley, vol. I.2, Church Dogmatics (Edinburgh: T &amp;amp; T Clark, 1956), 135.&lt;a href="#fnref18" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn19"&gt;&lt;p&gt;Karl Barth, &lt;em&gt;The Doctrine of Reconciliation&lt;/em&gt;, ed. G. W. Bromiley and T. F. Torrance, trans. G. W. Bromiley, vol. IV.1, Church Dogmatics (Edinburgh: T &amp;amp; T Clark, 1956), 52.&lt;a href="#fnref19" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn20"&gt;&lt;p&gt;Letham, &lt;em&gt;The Holy Trinity&lt;/em&gt;, 296; Karl Barth, &lt;em&gt;The Doctrine of God&lt;/em&gt;, ed. G. W. Bromiley and T. F. Torrance, trans. T. H. L. Parker et al., vol. II.1, Church Dogmatics (Edinburgh: T &amp;amp; T Clark, 1957), 57–58.&lt;a href="#fnref20" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn21"&gt;&lt;p&gt;Rahner, &lt;em&gt;The Trinity&lt;/em&gt;, 100.&lt;a href="#fnref21" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn22"&gt;&lt;p&gt;Colin E. Gunton, &lt;em&gt;The Promise of Trinitarian Theology&lt;/em&gt;, Second edition (1991; repr., T &amp;amp; T Clark, 1997), 142.&lt;a href="#fnref22" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn23"&gt;&lt;p&gt;Karl Barth, &lt;em&gt;The Doctrine of the Word of God&lt;/em&gt;, ed. G. W. Bromiley and T. F. Torrance, trans. G. W. Bromiley, Second edition, vol. I.1, Church Dogmatics (1936; repr., Edinburgh: T &amp;amp; T Clark, 1975), 321.&lt;a href="#fnref23" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn24"&gt;&lt;p&gt;Giles, &lt;em&gt;Jesus and the Father&lt;/em&gt;, 258.&lt;a href="#fnref24" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn25"&gt;&lt;p&gt;Frame, &lt;em&gt;The Doctrine of God&lt;/em&gt;, 2:706.&lt;a href="#fnref25" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn26"&gt;&lt;p&gt;On “correspondence” and “identity” cf. &lt;span class="citation" data-cites="giles"&gt;Giles, &lt;em&gt;Jesus and the Father&lt;/em&gt;&lt;/span&gt;, ch. 7.&lt;a href="#fnref26" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn27"&gt;&lt;p&gt;Contra Jürgen Moltmann, &lt;em&gt;History and the Triune God: Contributions to Trinitarian Theology&lt;/em&gt;, trans. John Bowden (New York: Crossroad, 1992), 39.&lt;a href="#fnref27" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn28"&gt;&lt;p&gt;Karl Barth, &lt;em&gt;The Doctrine of Creation&lt;/em&gt;, ed. G. W. Bromiley and T. F. Torrance, trans. J. W. Edwards, O. Bussey, and Harold Knight, vol. III.1, Church Dogmatics (Edinburgh: T &amp;amp; T Clark, 1958), 54–55.&lt;a href="#fnref28" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn29"&gt;&lt;p&gt;Barth, III.1:56.&lt;a href="#fnref29" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn30"&gt;&lt;p&gt;In some sense, given the fall and God’s action to restore and redeem humanity, all history &lt;em&gt;is&lt;/em&gt; salvation-history.&lt;a href="#fnref30" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn31"&gt;&lt;p&gt;Rahner, &lt;em&gt;The Trinity&lt;/em&gt;, 76.&lt;a href="#fnref31" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn32"&gt;&lt;p&gt;Cf. Letham, &lt;em&gt;The Holy Trinity&lt;/em&gt;, 418; Rahner, &lt;em&gt;The Trinity&lt;/em&gt;, 11–12; Frame, &lt;em&gt;The Doctrine of God&lt;/em&gt;, 2:711–12.&lt;a href="#fnref32" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn33"&gt;&lt;p&gt;Frame, &lt;em&gt;The Doctrine of God&lt;/em&gt;, 2:719.&lt;a href="#fnref33" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn34"&gt;&lt;p&gt;Barth, &lt;em&gt;The Doctrine of the Word of God&lt;/em&gt;, I.1:321.&lt;a href="#fnref34" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="SEBTS"></category><category term="M. Div."></category><category term="papers"></category></entry><entry><title>Ulysses, Byword, and “Just Right”</title><link href="http://www.chriskrycho.com/2016/ulysses-byword-and-just-right.html" rel="alternate"></link><published>2016-03-26T08:00:00-04:00</published><updated>2016-03-26T08:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-26:/2016/ulysses-byword-and-just-right.html</id><summary type="html">&lt;p&gt;I’m trying out Ulysses again, as it’s been updated substantially since I last used it. I think the main thing to say about it is that it’s gorgeous and a really great editor, and that there is nonetheless something about it which makes it feel not quite …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m trying out Ulysses again, as it’s been updated substantially since I last used it. I think the main thing to say about it is that it’s gorgeous and a really great editor, and that there is nonetheless something about it which makes it feel not quite as &lt;em&gt;fluid&lt;/em&gt; as Byword always has.&lt;/p&gt;
&lt;p&gt;Neither of them quite &lt;em&gt;nails&lt;/em&gt; it for my purposes, though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neither is quite there for text that includes a lot of code samples. (Basically: neither supports the GitHub variations on Markdown, which are incredibly important for &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;a lot of my writing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Neither has the ability to do things like autocompletion of citations from something like BibLatex. (No standalone app does, to my knowledge.)&lt;/li&gt;
&lt;li&gt;Ulysses’ most powerful features only work in its iCloud bucket. And they’re not standard: rather than embracing &lt;a href="http://criticmarkup.com"&gt;CriticMarkup&lt;/a&gt; for comments, they have their own. The same is true of e.g. their code blocks.&lt;/li&gt;
&lt;li&gt;Ulysses &lt;em&gt;converts&lt;/em&gt; any other Markdown documents to its own custom variant when you open them. Had those documents formatted a way you liked (e.g. with specific kinds of link or footnote formatting)? Don’t expect them to still be that way.&lt;/li&gt;
&lt;li&gt;Byword really does one thing well: opening and writing single documents. It does this extremely well, but it also has none of the library management that is useful for larger projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these apps are really wonderful in many ways, and I think it’s fair to say that they’re &lt;em&gt;perfect&lt;/em&gt; for many writers. &lt;a href="http://jaimiekrycho.com/"&gt;My wife&lt;/a&gt;, for example, does nearly all her fiction writing in Ulysses; it works wonderfully for her. But for the kinds of writing I do—usually technical in one way or another—it is limited in its utility. That’s not really a critique of the apps. It’s more the recognition that I have some pretty unusual requirements of my writing apps.&lt;/p&gt;
&lt;p&gt;That said, I don’t think I’m the only person out there who has these particular needs. I am, for example, hardly the only person working with citations and academic text, or writing Markup with lots of code samples in it. And as much as you can bend general-purpose text editors like &lt;a href="https://atom.io"&gt;Atom&lt;/a&gt; to your will,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; it’s not the same as a dedicated writing app that focuses—in the ways that Ulysses and Byword both do—on just being a great tool for &lt;em&gt;writing&lt;/em&gt;. Writing and writing &lt;em&gt;code&lt;/em&gt; are not the same, after all. A tool that’s really well-optimized for the latter isn’t necessarily well-optimized for the former.&lt;/p&gt;
&lt;p&gt;Keep your ears open. You might just be hearing more about this in the future.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Trust me, I have: I have Zen mode installed, a custom Byword-like theme I use when I just want to write, and even a citation autocompletion package integrated with it. It’s not bad. But I still don’t love it as a first-choice &lt;em&gt;writing&lt;/em&gt; tool.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="design"></category><category term="software development"></category><category term="writing"></category></entry><entry><title>Realism and Anti-Realism in Science</title><link href="http://www.chriskrycho.com/2016/realism-and-anti-realism-in-science.html" rel="alternate"></link><published>2016-03-15T12:32:00-04:00</published><updated>2016-03-15T12:32:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-15:/2016/realism-and-anti-realism-in-science.html</id><summary type="html">The realism/anti-realism debate in science often hinges on the nature of and relationship between observables and unobservables. But is there actually such a distinction?
</summary><content type="html">&lt;p&gt;&lt;i&gt;Adjudicating the realism/anti-realism debate in science often involves discussion of ‘miracles,’ the ‘observable/unobservable distinction,’ and ‘underdetermination’. Pick one of these three areas and develop an argument for realism or anti-realism in terms of it. Don’t forget to assess the argument.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The realism/anti-realism debate in science often hinges on the nature of and relationship between observables and unobservables. Anti-realists argue that scientists can have no actual knowledge of unobservables, and therefore should treat theories about unobservables agnostically: however useful the models may be, they should not be considered to correspond to &lt;em&gt;truth&lt;/em&gt; about reality. For example, anti-realists argue that hypotheses about the nature of fundamental particles such as quarks and electrons should not be taken as if quarks and electrons actually exist, but only as pragmatically useful, with no way even in principle of determining whether such things actually exist.&lt;/p&gt;
&lt;p&gt;In fact, any attempt to consider the relationship between observables and unobservables ultimately points instead toward a (critical) realist account of science. Any attempt to distinguish sharply or clearly in principle between observables and unobservables fails, for two reasons: first, the claim that “unobservables” as such exist in a strict sense; and second, that, the relationship between “observable” and “unobservable” falls along a spectrum.&lt;/p&gt;
&lt;p&gt;In the first case, anti-realists use “unobservable” to mean anything not &lt;em&gt;directly&lt;/em&gt; observable by human senses. However, to declare such objects in principle unobservable is to beg the question, since the point under debate is precisely whether things detected indirectly—electron traces in a gas cloud, for example—are being observed or simply hypothesized. Anti-realists must first establish in an in-principle sense a sharp distinction between that which is indirectly observed and that which is directly observed. Realists, by contrast, note that indirect observation is rightly considered reliable in the realm of ordinary experience. It is reasonable to conclude that the wind is blowing from seeing its effects on trees even if sitting inside a closed room with no direct experience of the wind. Indirect observations still count as observations, and are clear signals of the real presence of a thing being observed. Whether it is observed directly or indirectly does not determine whether it is observed at all.&lt;/p&gt;
&lt;p&gt;This also extends into the second case: a realist view rightly makes sense of the way things are more or less directly observable. On one end are those phenomena which can be detected through (normal, healthy) human senses such as hearing or vision. Moving down toward the not-directly-observable spectrum, scientists use various sorts of equipment to enhance their ability to observe: telescopes, when looking at things inaccessible to ordinary human sight because of distance; and microscopes, when examining things inaccessible to ordinary human sight because of size. In both cases, however, there is no clear line distinguishing the “observable” and the “unobservable”—only a spectrum of more- or less-directly-observable phenomena. Insects may be observed with the unaided human eye, bacteria with optical microscopes, individual molecules of materials with electron microscopes. In each case, the same principle is at work in the observation: light bouncing off an object and being received.&lt;/p&gt;
&lt;p&gt;The anti-realist may object that this is not so: the fact that the distinction between observables and unobservables is blurry does not mean it does not exist. To borrow an example from Okasha: the line between “bald” and “hirsute” may be fuzzy (pun intended), but it is still possible to identify a bald man. Even granting the in-principle distinction between “observable” and “unobservable,” however, the objection fails to establish the strong claim made by anti-realists. It does not establish that the items in question are in fact unobservable (especially when confronted with the realist argument for indirect observation). Nor does it establish that scientists would be in principle incapable of correctly modeling unobservables. At most, it establishes that unobservables may exist.&lt;/p&gt;
&lt;p&gt;Thus, it is reasonable to suppose that though current models of astronomical behavior, or of quantum mechanics, or gravity, or any other only-indirectly-observable phenomena may be incomplete or partial, they nonetheless represent something &lt;em&gt;actual&lt;/em&gt;. The wind really is blowing. There really an electron leaving a trail in the gas chamber.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>The 'Covering Law' Model</title><link href="http://www.chriskrycho.com/2016/the-covering-law-model.html" rel="alternate"></link><published>2016-03-15T12:31:00-04:00</published><updated>2016-03-15T12:31:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-15:/2016/the-covering-law-model.html</id><summary type="html">The 'covering law' model of scientific explanation demands explanations be deductive arguments with sound premises referring to natural laws. It founders on the issue of causality.
</summary><content type="html">&lt;p&gt;&lt;i&gt;What is the ‘covering law’ model of scientific explanation and what are two reasons it seems to be defective? How do these defects point to a better model of scientific explanation?&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The ‘covering law’ model of scientific explanation is the view that scientific explanations consist of three elements: &lt;em&gt;deductive&lt;/em&gt; arguments, with &lt;em&gt;sound&lt;/em&gt; premises, which make referent to (at least) one natural law. That is, for an explanation to count as “scientific,” it must first of all be in the from of an argument, “If A is true then B is the case; A is true, therefore B is the case.” Second, the premises of the argument must be valid. In other words, “If A and B are both true, then C is the case; A and B are true, therefore C is the case” is deductively valid, but if either of the premises A or B are false, the argument is not sound and it does not serve as a scientific explanation. Finally, the explanation must refer to one or more general laws in the course of its argument. That is, in the same formulation, “If A and B are both true, then C is the case; A and B are true, therefore C is the case,” the explanation may be both deductive and sound but &lt;em&gt;unscientific&lt;/em&gt; if neither A nor B are natural laws of some sort.&lt;/p&gt;
&lt;p&gt;One classic example of this sort of explanation is answering why a given plant died. Given that scientists know a great many things about the necessary conditions for plants to remain alive, it is possible to construct an explanation that fits the covering law model. Such an argument might proceed as follows:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;All living must metabolize sources of energy to stay alive [general law GL-A].&lt;/li&gt;
&lt;li&gt;Plants are living things [observation O-A].&lt;/li&gt;
&lt;li&gt;Plants metabolize energy via photosynthesis [general law GL-B].&lt;/li&gt;
&lt;li&gt;This plant was kept in the dark [an observation O-B].&lt;/li&gt;
&lt;li&gt;Therefore, this plant could not metabolize energy via photosynthesis [conclusion C-A following from GL-B and O-B].&lt;/li&gt;
&lt;li&gt;Therefore, this plant died [conclusion following from C-A, O-A, and GL-A].&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It would equally be possible in the absence of observations (O-A and O-B) to formulate a &lt;em&gt;prediction&lt;/em&gt;: in place of O-B and the conclusions which follow it, we could supply this form:&lt;/p&gt;
&lt;ol start="4" type="1"&gt;
&lt;li&gt;If a plant is kept in the dark, it will not be able to metabolize energy via photosynthesis [P].&lt;/li&gt;
&lt;li&gt;Therefore, a plant which is kept in the dark will die. [C-C]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that the two forms are symmetric, because of the rules of deductive logic. Any explanation formulated under the covering law model could also be couched as a prediction.&lt;/p&gt;
&lt;p&gt;Although the covering law model is initially attractive, there are two serious problems with it. The first is this very point of symmetry. Explanations, it turns out, are rarely symmetric with predictions. To borrow an example from Okasha, given the rules of trigonometry, if one knows any two of the angle of the sun in the sky, the height of a flagpole, or the length of the shadow cast by the flagpole, one can &lt;em&gt;predict&lt;/em&gt; the third element. For example, having only the length of the shadow and the height of the flagpole, one can calculate the angle of the sun in the sky. Clearly, however, the length of the shadow and the height of the flagpole have no causal relation to the position of the sun in the sky. They do not &lt;em&gt;explain&lt;/em&gt; it, though they may be used to predict it. By contrast, the intent of the person fashioning the flagpole, and a combination of facts about the sun’s emanation of light as part of the process of fusion and the earth’s orbit around the sun do suffice to explain the length of the shadow.&lt;/p&gt;
&lt;p&gt;This is not merely a hypothetical concern; it is precisely the distinction between ancient Babylonian and ancient Greek methods of astronomy, as J.P. Moreland comments. The Babylonian astronomers were able to &lt;em&gt;predict&lt;/em&gt; the positions of stars in the sky, relying on careful observation and detailed tables. They did not offer any &lt;em&gt;explanation&lt;/em&gt; of those positions, however; the Greeks did. Though the Ptolemaic model the Greeks embraced is now rejected, it was an explanatory, and therefore &lt;em&gt;scientific&lt;/em&gt;, model. Predictions are not the same as explanations, precisely because explanations indicate the underlying causes that things are as they are.&lt;/p&gt;
&lt;p&gt;Second, it is possible to offer explanations which satisfy the covering law model, but in which the premises are &lt;em&gt;irrelevant to the conclusion&lt;/em&gt;. In Okasha’s example, a doctor explains why a man does not become pregnant in terms of the observation that people who regularly take oral contraceptives do not become pregnant, and the man is taking oral contraceptives. Leaving aside the question of why a man would be taking oral contraceptives, the actual explanation is quite different: the man does not become pregnant because men are biologically incapable of pregnancy. Though the argument is deductively valid, and its premises are at least potentially sound, the law actually fails as an explanation. In this case, its predictive power is actually deceptive, because the prediction is totally uncoupled from the cause.&lt;/p&gt;
&lt;p&gt;Both of these failings share in common the same core issue: ignoring the role of causality. Scientific explanations—to be differentiated from scientific &lt;em&gt;observations&lt;/em&gt; such as “water is two molecules of hydrogen and one of oxygen”—traffic in &lt;em&gt;causes&lt;/em&gt; and not merely &lt;em&gt;predictions&lt;/em&gt;. Any model of how scientific explanation actually works must therefore include the arrow of causality.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>The Problem of Induction</title><link href="http://www.chriskrycho.com/2016/the-problem-of-induction.html" rel="alternate"></link><published>2016-03-15T12:30:00-04:00</published><updated>2016-03-15T12:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-15:/2016/the-problem-of-induction.html</id><summary type="html">Is induction a trustworthy means of obtaining knowledge? The majority of scientific reasoning necessarly leans heavily on induction—but is this warranted or defensible?
</summary><content type="html">&lt;p&gt;&lt;i&gt;What is the problem of induction? Discuss two proposed solutions to this problem, and explain why (in your view) they are adequate solutions or defective ones.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The problem of induction is the question: &lt;em&gt;Is induction a trustworthy means of obtaining knowledge?&lt;/em&gt; The majority of scientific reasoning necessarily leans heavily on induction—it is, after all, impossible to observe every star in the universe, or every duck on Earth, or the psychological patterns of all humans, for example. Thus, any scientific reasoning which purports to rise to the level of a universal explanation or law must rely on induction to arrive at its conclusion: “We have observed things to obey rules X, Y, and Z in all known instances. Given the regularity of the universe, it follows that things obey rules X, Y, and Z everywhere.” The question is whether the leap between the premises and the conclusion is warranted: is it reasonable to suppose that things scientists have &lt;em&gt;not&lt;/em&gt; observed (whether because they are out of observational range, or because they are in the future) behave the same way as those they &lt;em&gt;have&lt;/em&gt; observed?&lt;/p&gt;
&lt;p&gt;Mark Lange helpfully summarizes the problem in the form of a simple argument: since all arguments are either deductive or inductive, the middle link in the argument for the reliability of induction must be either deductive or inductive. But it cannot be an inductive argument; that would simply be a circular argument: “If inductive reasoning holds, it is valid to use inductive reasoning, and inductive reasoning has always worked in the past, so we induce that it will continue to work in the future, ergo it is valid to use inductive reasoning.”&lt;/p&gt;
&lt;p&gt;Unfortunately, the argument may also not be &lt;em&gt;deductive&lt;/em&gt;. There is an infinite number of &lt;em&gt;logically&lt;/em&gt; possible explanations for the apparent success of induction to date. For example, it is logically possible that all objects believed to be green—and which inductive reasoning would therefore suggest will be green tomorrow as well—are in fact the mysterious and previous unobserved color “grue”: a color which appears green until an unspecified date, after which it is blue. This is just as logically consistent with all observations as the idea that induction holds. Thus, no deductive argument can demonstrate the validity of induction, for there is no &lt;em&gt;deductive&lt;/em&gt; manner of choosing between such possibilities.&lt;/p&gt;
&lt;p&gt;One proposed solutions is a pragmatic argument. &lt;em&gt;If the universe behaves uniformly, then induction will work; if the universe does &lt;strong&gt;not&lt;/strong&gt; behave uniformly, then no method will work. Therefore, scientists are justified in acting as though induction works.&lt;/em&gt; Unfortunately, this argument at best establishes a matter of reasonable policy for scientists, without providing warrant for belief. That is, however reasonable and even necessary it may be for scientists to proceed as though induction holds and is valid, the argument provides no evidence that induction &lt;em&gt;does&lt;/em&gt; in fact hold.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another solution is the argument from Christian theism: &lt;em&gt;given God’s creation covenant to maintain order (Genesis 9), the goodness and providence of God (derived from statements to that effect throughout Scripture), and the claim to efficacy of the Proverbs, it is theologically necessary that the universe continue to work as it has in the past.&lt;/em&gt; In its favor, this suggestion has the form of an argument, and is not directly reliant on the evidence of past uniformity as a basis for future uniformity. However, this sort of reasoning from Scripture is itself inductive. It takes a specific interpretation of the texts under consideration, and a belief that things are at a certain point in cosmological/theological history (i.e. the eschaton has not yet arrived) and extrapolates to the notion that God will continue upholding the previous pattern of laws of nature. Moreover, even if the argument were to hold, it would not be a &lt;em&gt;scientific&lt;/em&gt; but a &lt;em&gt;philosophical-theological&lt;/em&gt; argument. (This is, perhaps, unsurprising given that though the problem of induction is especially applicable to the practice of science, it is a far more general problem.)&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Interestingly, however, if the validity of induction is taken as an &lt;em&gt;a priori&lt;/em&gt; assumption, its historical efficacy may be taken as good evidence for the consistency of nature as a reasonable inference to the best explanation in the realism/anti-realism debate.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="philosophy"></category><category term="science"></category></entry><entry><title>Rust and Swift (xv)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html" rel="alternate"></link><published>2016-03-12T14:45:00-05:00</published><updated>2016-03-12T14:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-12:/2016/rust-and-swift-xv.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="http://www.chriskrycho.com/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The next chapter in the Swift book focuses on &lt;em&gt;inheritance&lt;/em&gt;, a concept which does not yet exist in Rust.&lt;/p&gt;
&lt;p&gt;Swift embraces classical inheritance for &lt;code&gt;class&lt;/code&gt; data types. As noted &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;previously&lt;/a&gt;, Rust’s &lt;code&gt;struct&lt;/code&gt; covers much of the ground covered by Swift’s &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; types together (value and reference types, etc.). However, what Swift’s &lt;code&gt;class&lt;/code&gt; types bring to the table is inheritance-based (and not just composition-based) extension of types.&lt;/p&gt;
&lt;p&gt;This is a bit of an interesting point: it is an area where, &lt;em&gt;as of today&lt;/em&gt;, Swift can do something that is flat impossible in Rust—a rarity.&lt;/p&gt;
&lt;p&gt;However, the &lt;em&gt;status quo&lt;/em&gt; will be changing sometime in the next year or so, as there is a &lt;a href="https://github.com/rust-lang/rfcs/pull/1210"&gt;Rust RFC&lt;/a&gt; which has been accepted and is in the process of being implemented which paves the way for inheritance. (Discussions are &lt;a href="https://aturon.github.io/blog/2015/09/18/reuse/"&gt;ongoing&lt;/a&gt; as to the best way to implement it for Rust. Classical inheritance with vtables as in Swift is probably &lt;em&gt;not&lt;/em&gt; going to be the approach.)&lt;/p&gt;
&lt;p&gt;The reason Rust’s core team chose to proceed without inheritance for the 1.0 release of the language last May is simple: at a philosophical level, they prefer (as in general most developers increasingly acknowledge that we should all prefer) composition over inheritance. &lt;em&gt;Prefer&lt;/em&gt;, not &lt;em&gt;universally choose&lt;/em&gt;, because there are situations in which inheritance is the correct choice. But there is a reason that programming with interfaces rather than via sub-classing is a “best practice” for many scenarios in languages like Java or C#.&lt;/p&gt;
&lt;p&gt;Rust’s &lt;code&gt;trait&lt;/code&gt; system gives you &lt;em&gt;composition&lt;/em&gt; in some remarkably powerful ways, allowing you to do things that in C++, for example, have to be accomplished via a combination of inheritance and overloading. Swift, likewise, supplies a &lt;code&gt;protocol&lt;/code&gt; system and allows extensions to define further behavior on top of existing data structures. From what I’ve gathered, those approaches are preferred over inheritance in Swift for the same reason Rust shipped 1.0 without it!&lt;/p&gt;
&lt;p&gt;But Swift does have inheritance, so it’s worth seeing how it works.&lt;/p&gt;
&lt;p&gt;First, any &lt;code&gt;class&lt;/code&gt; which doesn’t declare a parent from which to inherit is a base class. This is an important difference from, say, Python, where all classes inherit from &lt;code&gt;Object&lt;/code&gt; (leaving aside custom metaclasses).&lt;/p&gt;
&lt;p&gt;The syntax choices Swift has made around sub-class declarations are sensible and readable: &lt;code&gt;class SubClass: ParentClass&lt;/code&gt; is eminently readable and doesn’t have any obvious points of overlap with other elements in the language.&lt;/p&gt;
&lt;p&gt;Indeed, &lt;em&gt;many&lt;/em&gt; of the choices made around classes are quite sensible. Overrides, for example, are made explicit via the &lt;code&gt;override&lt;/code&gt; keyword. While I’ve sometimes poked fun at Swift’s tendency to add keywords everywhere, this seems like a reasonable place to have one, and it’s nice that overrides are explicit rather than implicit. The same is true of the use of &lt;code&gt;super&lt;/code&gt; to refer to the superclass. I’m not sure of the implementation details, but &lt;code&gt;super&lt;/code&gt; &lt;em&gt;appears&lt;/em&gt; to act as just a special/reserved name for an object: all the syntax around it is normal object instance syntax, which is as it should be.&lt;/p&gt;
&lt;p&gt;The limitations around overriding properties all make sense. You can override a read- or write-only parent property as both readable and writable, but you can’t override a readable or writable property &lt;em&gt;not&lt;/em&gt; to be readable or writable respectively. Presumably this is because the method lookup for properties always checks up the inheritance chain for getters or setters, so if one is present, you can’t just get rid of it. (You could of course override with a no-op function that spews a warning or some such, but that would pretty clearly be an abuse of the parent API. There might be times you would do that with a third-party library parent class, but in your own code it should be avoided: it indicates a problem in your API design that you need to address instead.)&lt;/p&gt;
&lt;p&gt;Finally, we have Swift’s &lt;code&gt;final&lt;/code&gt; keyword—and yes, pun intended. It marks whatever block-level item it is attached to—whether class, method, or property—as non-overridable. Attempts to override an item marked final are compile-time failures. (The same kind of thing exists in Java and C#.) In and of itself, this isn’t especially interesting. It is interesting to ponder whether you should make classes subclass-able or not in your API design. There has been &lt;a href="http://mjtsai.com/blog/2015/12/21/swift-proposal-for-default-final/"&gt;an active debate&lt;/a&gt;, in fact, whether classes in Swift should become final &lt;em&gt;by default&lt;/em&gt; in Swift 3.0, rather than open by default. The debate centers on the danger of unintended consequences of overriding, which ultimately takes us back around to the preference for composition, of course.&lt;/p&gt;
&lt;p&gt;All of this, among other things, raises the very interesting question of what this will look like in Rust when, eventually, we get inheritance there. After all, we know it will be quite different in some ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It presumably won’t involve a distinct data type constructor, &lt;em&gt;a la&lt;/em&gt; Swift’s distinction between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;: there may be syntactic sugar involved, and there will definitely be new functionality present, but it will certainly be built on the existing language features as well. There’s a good chance it will basically &lt;em&gt;look&lt;/em&gt; like just a special case of &lt;code&gt;impl SomeTrait for SomeStruct&lt;/code&gt;, which would fit very well with the ways Rust solves so many other problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust doesn’t have many of the things which Swift takes care to special-case for overriding with &lt;code&gt;final&lt;/code&gt;, but it will need to address that case for inherited methods and data in some way. (The proposal linked above uses a distinction between &lt;code&gt;default&lt;/code&gt; and blanket implementations for trait specialization to pull this off; if those words don’t mean anything to you, don’t worry: I’ve read that post and RFC half a dozen times before I got a really solid handle on all the pieces involved.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will be a relative latecomer to the language, rather than baked in from the start, and therefore will likely seem a secondary way of solving problems, especially at first. (This is, I think, both intentional and good.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiv.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Indexing and subscripts, or: traits vs. keywords again.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xvi.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Initialization: another area where Swift has a lot more going on than Rust.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Rust and Swift (xiv)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xiv.html" rel="alternate"></link><published>2016-03-10T21:25:00-05:00</published><updated>2016-03-10T21:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-10:/2016/rust-and-swift-xiv.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Rust and Swift both support defining subscript access to a given data type, like &lt;code&gt;SomeType[accessedByIndex]&lt;/code&gt;. Unsurprisingly, given &lt;a href="/rust-and-swift.html"&gt;everything we’ve seen so far&lt;/a&gt;, Rust does this with traits, and Swift with a keyword.&lt;/p&gt;
&lt;p&gt;In Rust, you can define subscript-style access to a type by implementing the &lt;code&gt;Index&lt;/code&gt; and/or &lt;code&gt;IndexMut&lt;/code&gt; traits, which allow &lt;em&gt;indexing&lt;/em&gt; into a given location in a kind of type. The implementation simply requires one function, which is called when you use the &lt;code&gt;[]&lt;/code&gt; operator. That function, &lt;code&gt;index&lt;/code&gt; or &lt;code&gt;index_mut&lt;/code&gt;, implements how to do the lookup for the specific type. The &lt;code&gt;impl&lt;/code&gt; block indicates not only that &lt;code&gt;Index&lt;/code&gt; or &lt;code&gt;IndexMut&lt;/code&gt; is being implemented, but also the type of the &lt;em&gt;key&lt;/em&gt; used: &lt;code&gt;impl Index&amp;lt;Bar&amp;gt; for Foo { ... }&lt;/code&gt;, where access would look like &lt;code&gt;a_foo[some_bar]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The two kinds of traits and corresponding methods define the behavior for immutable and mutable data type, as their name suggest.&lt;/p&gt;
&lt;p&gt;Since the trait is defined generically, you can implement whatever kinds of accessors you like to the same underlying data structure, including generics accessors with trait bounds.&lt;/p&gt;
&lt;p&gt;It is perhaps telling that in Rust you just find these traits in the general &lt;code&gt;std::ops&lt;/code&gt; module, where all the core language operations and associated operators are defined. Rust doesn’t do “operator overloading” so much as it simply provides operators as one more class of trait potentially applicable to your type. (The family resemblance to Haskell’s type classes and similar in other languages is obvious.)&lt;/p&gt;
&lt;p&gt;In Swift, you define indexing behavior with the &lt;code&gt;subscript&lt;/code&gt; keyword. Subscripts act very similarly to Swift’s &lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html"&gt;computed properties&lt;/a&gt;. They can be made read- or write-only by including or excluding &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; function definitions, just like computed properties.&lt;/p&gt;
&lt;p&gt;The behavior is in fact so closely aligned with the computed property syntax and behavior that I initially wondered if it wasn’t just a special case. It is not (though I’m sure much of the parsing machinery can be shared). As the designation of &lt;code&gt;subscript&lt;/code&gt; as a keyword strongly implies, and unlike in Rust, this is a separate language construct, not building on existing language machinery.&lt;/p&gt;
&lt;p&gt;Swift, like Rust, allows you to define arbitrary accessors. However, since the behavior relies on the &lt;code&gt;subscript&lt;/code&gt; construct rather than generics and protocols (Swift’s equivalent to Rust’s traits), you define different kinds of accessors via multiple &lt;code&gt;subscript&lt;/code&gt; blocks. (Presumably these could take generic arguments, but I haven’t tested that to be sure.)&lt;/p&gt;
&lt;p&gt;Both languages proceed to use these as ways of accessing types as makes sense—e.g. for not only arrays or vectors, but also dictionaries in Swift and &lt;code&gt;HashMap&lt;/code&gt; types in Rust.&lt;/p&gt;
&lt;p&gt;Since you can define the behavior yourself, you can also use complex types as keys. The languages approach this a bit differently, though. In Rust, if you wanted a compound key, you would need to define either a simple container &lt;code&gt;struct&lt;/code&gt; or use a tuple as the argument. In Swift, because it uses the same basic syntax as computed properties, you can just define as many method arguments, of whatever type, as you want.&lt;/p&gt;
&lt;p&gt;Takeaway: Rust uses traits; Swift uses a keyword. We probably could have guessed that when we started, at this point!&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Methods, instance and otherwise.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xv.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Inheritance: a Swiftian specialty (for now).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>A Strange and Messy Deliverance</title><link href="http://www.chriskrycho.com/2016/a-strange-and-messy-deliverance.html" rel="alternate"></link><published>2016-03-08T20:00:00-05:00</published><updated>2016-03-08T20:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-08:/2016/a-strange-and-messy-deliverance.html</id><summary type="html">Three stories, three judges and deliverers, one saving God.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The only constraints on this sermon were that it be between 15 and 25 minutes long, and be on a text from the Old Testament. Video and its audio are from an old MacBook Pro pointed at the podium. Dedicated audio is from my iPhone in my shirt pocket.&lt;/i&gt;&lt;/p&gt;
&lt;section id="audio" class="level3"&gt;
&lt;h3&gt;Audio&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.podtrac.com/pts/redirect.m4a/cdn.chriskrycho.com/sermons/2016-03-08.m4a"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;audio title="A Strange and Messy Deliverance" controls="controls" preload="metadata" src="http://www.podtrac.com/pts/redirect.m4a/cdn.chriskrycho.com/sermons/2016-03-08.m4a" type="audio/m4a"&gt;
Sorry; your browser doesn’t support m4a files. Try downloading the file directly and playing it in iTunes or another media app.
&lt;/audio&gt;
&lt;/section&gt;
&lt;section id="video" class="level3"&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;div class="iframe-wrapper four-to-three"&gt;
&lt;iframe title="A Strange and Messy Deliverance" src="https://player.vimeo.com/video/158279181" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href="https://vimeo.com/158279181"&gt;A Strange and Messy Deliverance (Judges 3:7–31)&lt;/a&gt; from &lt;a href="https://vimeo.com/chriskrycho"&gt;Chris Krycho&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="prayer" class="level2"&gt;
&lt;h2&gt;Prayer&lt;/h2&gt;
&lt;p&gt;Let us pray. &lt;em&gt;Gracious Father: thank you for revealing yourself to us, especially in your Son, our Lord; and for filling us with your Spirit so that we may know you truly. As we come to your word tonight, help us know you more deeply and worship you more faithfully. In Christ’s name, amen.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction" class="level2"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Please open your Bibles to Judges, chapter 3. And as you turn there, I want you to think about these words:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Boring exegesis &lt;em&gt;must&lt;/em&gt; be wrong when the texts are so obviously full of life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Boring exegesis &lt;em&gt;must&lt;/em&gt; be wrong when the texts are so obviously full of life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s N. T. Wright, speaking of the Pauline epistles. But I think, equally applicable whenever we come to God’s word—especially in preaching and teaching—and most especially when the texts are like this one: lively, to say the least; strange, even.&lt;/p&gt;
&lt;p&gt;I have two goals for this sermon. The first—always the first—is to show the grace of God clearly. As Bryan Chappell, the author &lt;em&gt;Christ-Centered Preaching&lt;/em&gt;, puts it, we want to see how God did for his people then what they could not do for themselves; and through that to be be reminded of what he has done for us, that we could not do for ourselves. That’s the point of this sermon: God’s grace in Christ.&lt;/p&gt;
&lt;p&gt;But secondarily—thinking about boring exegesis; thinking about hard texts like Judges 3—I hope to encourage you that these texts, these strange texts, these sometimes difficult texts—they’re for us, and for our good. They’re for our people, and our people’s good. We don’t need to ashamed of them, or embarrassed by them, or intimidated by them. Rather, we can come away seeing how these texts magnify the grace of God, how these texts remind us to look to Christ.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="body" class="level2"&gt;
&lt;h2&gt;Body&lt;/h2&gt;
&lt;section id="othniel-the-first-judge" class="level3"&gt;
&lt;h3&gt;Othniel: The first judge&lt;/h3&gt;
&lt;p&gt;So let’s look and see. This is a long passage, with three judges—Othniel, Ehud, and Shamgar—so we’ll take each in turn. Read with me, starting in verse 7:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And the people of Israel did what was evil in the sight of the LORD. They forgot the LORD their God and served the Baals and the Asheroth. Therefore the anger of the LORD was kindled against Israel, and he sold them into the hand of Cushan-rishathaim king of Mesopotamia. And the people of Israel served Cushan-rishathaim eight years. But when the people of Israel cried out to the LORD, the LORD raised up a deliverer for the people of Israel, who saved them, Othniel the son of Kenaz, Caleb’s younger brother. The Spirit of the LORD was upon him, and he judged Israel. He went out to war, and the LORD gave Cushan-rishathaim king of Mesopotamia into his hand. And his hand prevailed over Cushan-rishathaim. So the land had rest forty years. Then Othniel the son of Kenaz died.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This first narrative is probably the easiest to understand. &lt;strong&gt;Othniel&lt;/strong&gt; is &lt;strong&gt;the first judge&lt;/strong&gt;. He is the prototype for all the other judges that follow. His story shows out the pattern for the whole book, the same one the author laid out back in chapter 2: sin, discipline, a cry for mercy, and God’s deliverance through a judge.&lt;/p&gt;
&lt;p&gt;Verse 7: Israel sins. They &lt;em&gt;forgot&lt;/em&gt; Yahweh their God. They served the Ba’als and the Asheroth instead of the God who had delivered them from Egypt.&lt;/p&gt;
&lt;p&gt;That’s an interesting word choice: &lt;em&gt;forgot&lt;/em&gt;—and it’s an important word, not only in this passage, but throughout the Bible. After all the reminders in the covenant: Set up these stones so you remember! Teach your children, so they remember. Bind it on your hands and your forehead, so you remember! And they forgot.&lt;/p&gt;
&lt;p&gt;Othniel is Caleb’s brother, note. They forgot in the &lt;em&gt;first generation&lt;/em&gt; they were in the land.&lt;/p&gt;
&lt;p&gt;When we forget, we get things wrong. You’ve seen it happen: a spouse forgets an anniversary, and spends some time “in the dog house.” Or parents who miss a school event for their children, and leave them feeling like they don’t matter. Forgetting a friend’s birthday: maybe you’re not as close as you thought.&lt;/p&gt;
&lt;p&gt;And sometimes… we all forget who God is, what he has done for us, and what our relationship to him is as the covenant people of God. We find ourselves fixated on the approval of the people in the pews, on the applause of subscribers to our popular podcast, on the affirmation of our professional peers. We become idolaters—just like Israel.&lt;/p&gt;
&lt;p&gt;But he showed them mercy. How? “He sold them into the hand of Cushan-rishathaim, king of Mesopotamia”—not mercy the way we might be inclined to think of it, but real, deep mercy.&lt;/p&gt;
&lt;p&gt;Because: see what happens? It had the intended effect. They remembered Yahweh and called out to him. And he delivered them—both from the pagan King, and from their idolatry, at least for a time! The Spirit came on Othniel, and he led Israel to war, and God delivered them from Cushan-rishathaim, and they had peace for forty years.&lt;/p&gt;
&lt;p&gt;God delivered his people, and Othniel, this &lt;em&gt;first judge&lt;/em&gt;, was a good judge. He wasn’t a prophet like Moses; he didn’t give them lasting rest, any more than Joshua had (40 years is good, but it’s not &lt;em&gt;forever&lt;/em&gt;); and he didn’t circumcise their hearts. Not &lt;em&gt;the&lt;/em&gt; judge then. A good judge, but not &lt;em&gt;the&lt;/em&gt; judge.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ehud-the-assassin" class="level3"&gt;
&lt;h3&gt;Ehud: The assassin&lt;/h3&gt;
&lt;p&gt;Sadly, he was also the &lt;em&gt;best&lt;/em&gt; of the Judges. Things only go downhill from here. Who’s next? &lt;strong&gt;Ehud: the assassin.&lt;/strong&gt; Let’s read again, picking up in verse 12:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And the people of Israel again did what was evil in the sight of the LORD, and the LORD strengthened Eglon the king of Moab against Israel, because they had done what was evil in the sight of the LORD. He gathered to himself the Ammonites and the Amalekites, and went and defeated Israel. And they took possession of the city of palms. And the people of Israel served Eglon the king of Moab eighteen years.&lt;/p&gt;
&lt;p&gt;Then the people of Israel cried out to the LORD, and the LORD raised up for them a deliverer, Ehud, the son of Gera, the Benjaminite, a left-handed man. The people of Israel sent tribute by him to Eglon the king of Moab. And Ehud made for himself a sword with two edges, a cubit in length, and he bound it on his right thigh under his clothes. And he presented the tribute to Eglon king of Moab. Now Eglon was a very fat man. And when Ehud had finished presenting the tribute, he sent away the people who carried the tribute. But he himself turned back at the idols near Gilgal and said, “I have a secret message for you, O king.” And he commanded, “Silence.” And all his attendants went out from his presence. And Ehud came to him as he was sitting alone in his cool roof chamber. And Ehud said, “I have a message from God for you.” And he arose from his seat. And Ehud reached with his left hand, took the sword from his right thigh, and thrust it into his belly. And the hilt also went in after the blade, and the fat closed over the blade, for he did not pull the sword out of his belly; and the dung came out. Then Ehud went out into the porch and closed the doors of the roof chamber behind him and locked them. When he had gone, the servants came, and when they saw that the doors of the roof chamber were locked, they thought, “Surely he is relieving himself in the closet of the cool chamber.” And they waited till they were embarrassed. But when he still did not open the doors of the roof chamber, they took the key and opened them, and there lay their lord dead on the floor.&lt;/p&gt;
&lt;p&gt;Ehud escaped while they delayed, and he passed beyond the idols and escaped to Seirah. When he arrived, he sounded the trumpet in the hill country of Ephraim. Then the people of Israel went down with him from the hill country, and he was their leader. And he said to them, “Follow after me, for the LORD has given your enemies the Moabites into your hand.” So they went down after him and seized the fords of the Jordan against the Moabites and did not allow anyone to pass over. And they killed at that time about 10,000 of the Moabites, all strong, able-bodied men; not a man escaped. So Moab was subdued that day under the hand of Israel. And the land had rest for eighty years.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We see the same pattern again here… sort of. We see Israel sin, and God discipline them. And we see Israel cry out to their covenant God, and we see him deliver them.&lt;/p&gt;
&lt;p&gt;But of course, Ehud’s story is more complicated than Othniel’s was. Some of the details here might initially perplex us. Why do we hear about how fat the king is? Why do we hear about the dung coming out after he gets stabbed? Why almost any of the extraneous-seeming details in this story?&lt;/p&gt;
&lt;p&gt;Well, this is satire. (Which doesn’t make it untrue, of course.) The author plays up the ridiculous elements in this bit of history to make a point.&lt;/p&gt;
&lt;p&gt;What do we see here?&lt;/p&gt;
&lt;p&gt;A conquering king! …&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;who’s actually morbidly obese, not exactly a strapping warrior&lt;/li&gt;
&lt;li&gt;who, so cunning he could forge an alliance with the Ammonites and Amalekites, gets fooled by a simple trick (“Oh king, I have secret message for you”)—he’s either hopelessly naive or profoundly overconfident; neither is good&lt;/li&gt;
&lt;li&gt;a man who so comically out of line with what a king should be that his servants don’t even notice when there’s a wretched stench and he takes a &lt;em&gt;looong&lt;/em&gt; time relieving himself&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Great king.&lt;/p&gt;
&lt;p&gt;And his servants? They aren’t exactly top-drawer. They don’t even notice Ehud escaping after he assassinated their king…&lt;/p&gt;
&lt;p&gt;If we read the story right, it’s humorous. The author is poking fun at the Moabites! “Those Moabites!”&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;But, wait… those Moabites conquered Israel. This ridiculous Moabite king?… Ehud was there to bring him tribute.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Israel&lt;/em&gt; is the real joke. The idolaters who got conquered by &lt;em&gt;this&lt;/em&gt; king. Ouch.&lt;/p&gt;
&lt;p&gt;This is what good satire does. It sneaks in, makes you laugh, and then hits you where it counts.&lt;/p&gt;
&lt;p&gt;And what about Ehud himself? What about this savior figure? He’s not good either. He’s a vicious assassin, a traitor who stabbed the man he was legally supposed to be serving.&lt;/p&gt;
&lt;p&gt;This story is messy. Not just because of the dung coming out. But because while yes, God did deliver his people, and that is good—but Ehud isn’t the kind of deliverer we want, not the kind of deliverer we need.&lt;/p&gt;
&lt;p&gt;Not the brutal killer, but the one who was brutally killed.&lt;/p&gt;
&lt;p&gt;Not the one who defeated a foreign king by stabbing him in the gut, but the one who overcame both the pagan oppressor and the idolatry that led to that oppression by &lt;em&gt;being&lt;/em&gt; stabbed, by taking the weapon to &lt;em&gt;his&lt;/em&gt; gut.&lt;/p&gt;
&lt;p&gt;The book of Judges shows us over and over again what we’re like left to our own purposes. How even our human saviors are woefully insufficient. The covenant hope, proclaimed from the start of Genesis and made so clear in Deuteronomy… was still waiting to be fulfilled.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="shamgar-unifying-theme" class="level3"&gt;
&lt;h3&gt;Shamgar &amp;amp; Unifying Theme&lt;/h3&gt;
&lt;p&gt;And then we come to the end of this chapter—to &lt;strong&gt;Shamgar: the man with an ox-goad&lt;/strong&gt; and his one verse: verse 31.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After him was Shamgar the son of Anath, who killed 600 of the Philistines with an oxgoad, and he also saved Israel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So if you’re like me, you’re wondering at least two things about this passage. One is: what in the world is an oxgoad? That’s the easy one: It’s a cattle prod. A long wooden pole with a point on the end. Makes for a decent improvised spear.&lt;/p&gt;
&lt;p&gt;But the other question, the bigger question, is &lt;em&gt;why does Ehud get paragraphs, with lurid details for a satire… and Shamgar gets just one sentence?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We have a man who, based on his name, doesn’t even seem to be an Israelity, who shows up, kills 600 Philistines with an ox-goad, and then he’s gone. He gets one mention in Deborah’s song in chapter 5, but basically, this is it.&lt;/p&gt;
&lt;p&gt;So why mention him at all if he’s so seemingly unimportant? Why these proportions?&lt;/p&gt;
&lt;p&gt;After all, this is the inspired word of God. And the author had a reason for giving us these stories, even &lt;em&gt;these proportions.&lt;/em&gt; He’s making a point.&lt;/p&gt;
&lt;p&gt;We read this and I, for one, think, “Oh, that sounds interesting; how did he do that with a cattle pr—” “NO. That’s not the question.” He slams the door on that question.&lt;/p&gt;
&lt;p&gt;Shamgar’s skill with an ox-goad is not the point, any more than Ehud’s skill as an assassin was the point, any more even than Othniel’s skill as a military leadership was the point. No more, I put it to you, than any of &lt;em&gt;us&lt;/em&gt; are the point.&lt;/p&gt;
&lt;p&gt;“And he also saved Israel.” Those words tell us what we need to know. Who saved Israel? Shamgar… Ehud… Othniel… but really, in every case, Yahweh. The covenant-keeping God, who saved Israel not only from 600 Philistines, not only from a Moabite king worthy of derision, not only from a mighty king of Mesopotamia—but from her idolatry.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary-and-exhortation" class="level2"&gt;
&lt;h2&gt;Summary and Exhortation&lt;/h2&gt;
&lt;p&gt;Someday—someday, after many judges, many kings, many priests, many prophets—there would come a deliverer—a judge, a prophet, a priest, a king—&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;who would give the land rest, who would give the people of God true rest, for more than just a generation; forever…&lt;/li&gt;
&lt;li&gt;who would be a wise king&lt;/li&gt;
&lt;li&gt;who would be gentle and gracious ruler&lt;/li&gt;
&lt;li&gt;who would give God’s people circumcised hearts&lt;/li&gt;
&lt;li&gt;who would fulfill the covenant hopes and take on himself the covenant curses of Deuteronony, of Exodus, of Genesis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have that deliverer. We have Christ. “And he also saved Israel.” So when we read, when we teach, when we preach, let us look, every time, and see what God did for his people that they could not do for themselves. Let us, in every passage, in every picture of grace, find a reminder of what God has done for us in Christ, that we could not do for ourselves.&lt;/p&gt;
&lt;p&gt;We have a deliverer. Don’t forget. Don’t let your people forget. We have a deliverer.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Gracious Father: thank you for delivering us. Help us be faithful with your word. Help us remember, and help us remind your people, of how you have delivered us. In the name of Jesus, our savior, amen.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
</content><category term="SEBTS"></category><category term="M. Div."></category><category term="sermons"></category></entry><entry><title>No One is ‘Not Worthy’</title><link href="http://www.chriskrycho.com/2016/no-one-is-not-worthy.html" rel="alternate"></link><published>2016-03-06T17:40:00-05:00</published><updated>2016-03-06T17:40:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-06:/2016/no-one-is-not-worthy.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;No one is ‘not worthy’ of our service in the body of Christ.&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;No one is ‘not worthy’ of our service in the body of Christ.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>The Future of JavaScript</title><link href="http://www.chriskrycho.com/2016/the-future-of-javascript.html" rel="alternate"></link><published>2016-03-02T12:30:00-05:00</published><updated>2016-03-02T12:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-03-02:/2016/the-future-of-javascript.html</id><summary type="html">JavaScript (ECMAScript) is in a state of substantial change. And nearly all of those changes make our software development safer and more ergonomic! A short talk covering some of the biggest changes.
</summary><content type="html">&lt;p&gt;I gave a short tech talk at my new employer &lt;a href="http://www.olo.com"&gt;Olo&lt;/a&gt; today, covering a number of the changes current and forthcoming in ECMAScript 2015 and later. Alas, I ran out of time in preparation and didn’t get to cover everything I wanted—I would have liked very much to cover modules, and to cover fat-arrow-functions in more depth than I did. I’ll look forward to hopefully giving further tech talks at Olo in the future, and perhaps giving this one, expanded and finished out a bit, elsewhere. (If you’d like me to give a talk, including this one, just let me know!) In the meantime, you can take a look at the &lt;a href="//www.chriskrycho.com/talks/es-future-olo"&gt;slides&lt;/a&gt;, which I think will be helpful and interesting!&lt;/p&gt;
&lt;p&gt;And yes, there &lt;em&gt;were&lt;/em&gt; a lot of really delightful &lt;em&gt;Doctor Who&lt;/em&gt; references in this talk. Because &lt;em&gt;of course&lt;/em&gt; there were!&lt;/p&gt;
</content><category term="talks"></category><category term="software development"></category><category term="programming languages"></category><category term="javascript"></category></entry><entry><title>Static Site Generators and Podcasting</title><link href="http://www.chriskrycho.com/2016/static-site-generators-and-podcasting.html" rel="alternate"></link><published>2016-02-28T12:50:00-05:00</published><updated>2016-02-28T12:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-28:/2016/static-site-generators-and-podcasting.html</id><summary type="html">&lt;p&gt;Presently, I publish both &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt; and &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; using what is admittedly a bit of a quirky approach. It works well for me, and I think it’s worth documenting for other nerdy types out there, but if you’re just getting going with podcasting and you’re …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Presently, I publish both &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt; and &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; using what is admittedly a bit of a quirky approach. It works well for me, and I think it’s worth documenting for other nerdy types out there, but if you’re just getting going with podcasting and you’re looking for the easy way to do it, let me warn you: &lt;em&gt;this isn’t it&lt;/em&gt;. Something like &lt;a href="https://soundcloud.com/for/podcasting"&gt;SoundCloud&lt;/a&gt; and a blog for show notes, or &lt;a href="https://wordpress.org"&gt;WordPress&lt;/a&gt; with &lt;a href="https://wordpress.org/plugins/powerpress/"&gt;Blubrry PowerPress&lt;/a&gt; is what you want instead. This approach works &lt;em&gt;extremely&lt;/em&gt; well for statically-generated sites, however, and I imagine a few people out there might find it useful.&lt;/p&gt;
&lt;section id="the-short-version" class="level2"&gt;
&lt;h2&gt;The short version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generate the feeds with &lt;a href="http://reinventedsoftware.com/feeder/"&gt;Feeder&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Generate the site statically with something else (and it &lt;em&gt;really&lt;/em&gt; doesn’t matter what).&lt;/li&gt;
&lt;li&gt;Copy the feed into the generated site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-long-version" class="level2"&gt;
&lt;h2&gt;The long version&lt;/h2&gt;
&lt;p&gt;I generate the sites themselves with &lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;Pelican&lt;/a&gt; and &lt;a href="http://www.newrustacean.com/show_notes/e001/index.html"&gt;&lt;code&gt;cargo doc&lt;/code&gt;&lt;/a&gt;, respectively. I was already comfortable with Pelican because it’s what I use to generate &lt;em&gt;this&lt;/em&gt; site (with a few &lt;a href="https://github.com/chriskrycho/chriskrycho.com/blob/master/pelicanconf.py"&gt;tweaks&lt;/a&gt; to the standard configuration, especially using &lt;a href="http://pandoc.org/"&gt;Pandoc&lt;/a&gt; rather than the Python Markdown implementation), so I ran with it for building the Winning Slowly site, and it has worked quite well for building the site itself. It just gets built locally and deployed via &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, it does not have built-in support for generating &lt;a href="https://en.wikipedia.org/wiki/RSS_enclosure"&gt;podcast feeds&lt;/a&gt;, even just the general case with enclosures. &lt;a href="https://itunespartner.apple.com/en/podcasts/overview"&gt;iTunes podcast support&lt;/a&gt; would have taken a lot of work to add.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Instead, I chose to build the RSS feed semi-manually. &lt;em&gt;Semi&lt;/em&gt;-manually, because doing it totally manually is a recipe for making mistakes. XML is many things, but “easy to write correctly by hand” is not one of them. I use &lt;a href="http://reinventedsoftware.com/feeder/"&gt;Feeder&lt;/a&gt; to manage the feeds, and &lt;em&gt;it&lt;/em&gt; makes sure that the enclosure and iTunes elements are set correctly.&lt;/p&gt;
&lt;p&gt;The biggest upside to this is that I can use Pelican without modification to how it generates feeds (apart from optionally turning them off entirely). It just &lt;a href="https://github.com/WinningSlowly/winningslowly.org/blob/master/pelicanconf.py#L99"&gt;copies&lt;/a&gt; the feed I generate to the output file during its normal build process. As suggested above, I also &lt;em&gt;don’t&lt;/em&gt; generate the other feeds which Pelican supports, as we have no need for them; we only care about the podcast feed.&lt;/p&gt;
&lt;p&gt;This process works equally well, with very little modification, for New Rustacean. In that case, I’m generating the content by running Rust’s documentation tool, &lt;code&gt;cargo doc&lt;/code&gt;&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; to render the “API docs” which serve as show notes. Notice the family resemblance between &lt;a href="http://www.newrustacean.com/show_notes/"&gt;my “show notes”&lt;/a&gt; and, say, the &lt;a href="http://sgrif.github.io/diesel/diesel/index.html"&gt;Diesel docs&lt;/a&gt;, which are both generated the same way. This is &lt;em&gt;not&lt;/em&gt; a normal way of building a podcast website; you can hear me explain why I did it this way in &lt;a href="http://www.newrustacean.com/show_notes/e001/index.html"&gt;New Rustacean e001: Document all the things!&lt;/a&gt; In any case, I just take the show note-relevant parts of the documentation and put it in Feeder, generate the feed, and &lt;a href="https://github.com/chriskrycho/newrustacean.com/blob/master/Makefile#L32"&gt;copy that as part of the build process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;And, incidentally, &lt;a href="http://www.sap-py.com"&gt;Sap.py&lt;/a&gt; and my &lt;a href="http://www.chriskrycho.com/sermons.xml"&gt;sermons&lt;/a&gt; feed.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;If I stick with Pelican long-term, I might look into adding it anyway, but honestly, I don’t love Pelican. The reasons have little to do with Pelican for itself, and a lot more to do with my particular and somewhat peculiar needs. That’s a post for another day. In any case, I’m likelier to use another generator—even one I write myself!—than to do the work to make Pelican do what I want.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Technically, Rust’s documentation tool is &lt;code&gt;rustdoc&lt;/code&gt;, which &lt;code&gt;cargo doc&lt;/code&gt; wraps around. I never actually use &lt;code&gt;rustdoc&lt;/code&gt; directly, though.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="podcasting"></category><category term="python"></category><category term="rust"></category></entry><entry><title>Rust and Swift (xiii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xiii.html" rel="alternate"></link><published>2016-02-28T11:15:00-05:00</published><updated>2016-03-06T13:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-28:/2016/rust-and-swift-xiii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Rust and Swift both have methods which are attached to given data types. However, whereas Rust takes its notion of separation of data and functions rather strictly, Swift implements them on the relevant data structures (classes, structs, or enums) directly. In other words, the implementation of a given type’s methods is within the body of the type definition itself in swift, whereas in Rust it is in an &lt;code&gt;impl&lt;/code&gt; block, usually but not always immediately adjacent in the code.&lt;/p&gt;
&lt;p&gt;This goes to one of the philosophical differences between the two languages. As we’ve discussed often in the series, Rust reuses a smaller set of concepts—language-level primitives—to build up its functionality. So methods on a type and methods for a trait on a type are basically the same thing in Rust; they’re defined in almost exactly the same way (the latter includes &lt;code&gt;for SomeTrait&lt;/code&gt; in the &lt;code&gt;impl&lt;/code&gt; expression). In Swift, a method is defined differently from a protocol definition, which we’ll get to in the future. The point is simply this: the two take distinct approaches to the relationship between a given type definition and the implementations of any functions which may be attached to it.&lt;/p&gt;
&lt;p&gt;Another important difference: access to other members of a given data type from within a method is &lt;em&gt;explicit&lt;/em&gt; in Rust and &lt;em&gt;implicit&lt;/em&gt; in Swift. In Rust, the first parameter to an instance method is always &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;&amp;amp;self&lt;/code&gt; (or a mutable version of either of course), much as in Python. This explicitness distinction is by now exactly what we expect from the two languages.&lt;/p&gt;
&lt;p&gt;Both use dot notation, in line with most other languages with a C-like syntax, for method calls, e.g. &lt;code&gt;instance.method()&lt;/code&gt; in Swift and &lt;code&gt;instance.method()&lt;/code&gt; in Rust. The latter is just syntactical sugar for &lt;code&gt;T::method(&amp;amp;instance)&lt;/code&gt; or &lt;code&gt;T::method(instance)&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is the type of the instance (depending on whether the item is being borrowed or moved). Given its implicit knowledge of/access to instance-local data, and the distinctive behavior of Swift methods (see below), I don’t &lt;em&gt;think&lt;/em&gt; the same is, or even could be, true of Swift.&lt;/p&gt;
&lt;p&gt;All of Swift’s &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;other behaviors around functions&lt;/a&gt;—internal and external names, and all the distinctions that go with those—are equally applicable to methods. Similarly, with the sole change that the first parameter is always the instance being acted on, a Rust methods follow all the same rules as ordinary Rust functions (which is why you can call the struct or enum method with an instance parameter as in the example above).&lt;/p&gt;
&lt;p&gt;Swift does &lt;em&gt;have&lt;/em&gt; a &lt;code&gt;self&lt;/code&gt;—it is, of course, implicit. It’s useful at times for disambiguation—basically, when a parameter name shadows an instance name. This will look familiar to people coming from Ruby.&lt;/p&gt;
&lt;p&gt;The strong distinction Swift makes &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;between reference and value types&lt;/a&gt; comes into play on methods, as you might expect, as does its approach to mutability. Methods which change the values in value types (&lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt; instances) have to be declared &lt;code&gt;mutating func&lt;/code&gt;. This kind of explicit-ness is good. As we discussed in &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;Part 10&lt;/a&gt;, Rust approaches this entire problem differently: types are not value or reference types; they are either mutable and passed mutably (including as &lt;code&gt;mut self&lt;/code&gt; or &lt;code&gt;&amp;amp;mut self&lt;/code&gt;), or they are not. If an instance is mutable and passed mutably, a method is free to act on instance data. And in fact both languages require that the instance in question not be immutable. In fact, everything we said in Part 10 about both languages applies here, just with the addendum that private properties are available to methods.&lt;/p&gt;
&lt;p&gt;The distinction, you’ll note, is in where the indication that there’s a mutation happens. Swift has a special keyword combination (&lt;code&gt;mutating func&lt;/code&gt;) for this. With Rust, it’s the same as every other function which mutates an argument. This makes Rust slightly more verbose, but it also means that in cases like this, the existing language tooling is perfectly capable of handling what has to be a special syntactical case in Swift.&lt;/p&gt;
&lt;p&gt;Both Swift and Rust let you out-and-out change the instance by assigning to &lt;code&gt;self&lt;/code&gt;, albeit in fairly different ways. In Swift, you’d write a mutating method which updates the instance proper like this:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Point {
    var x = 0.0, y = 0.0
    mutating func changeSelf(x: Double, y: Double) {
        self = Point(x: x, y: y)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you’d need to explicitly pass a mutable reference and dereference it. (If you tried to pass &lt;code&gt;mut self&lt;/code&gt; instead of &lt;code&gt;&amp;amp;mut self&lt;/code&gt;, it would fail unless you returned the newly created object and assigned it outside.) Note that while the full implementation here is a couple lines longer, because of the data-vs.-method separation discussed earlier, the implementation of the method itself is roughly the same length.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;pub struct Point {
    pub x: f64,
    pub y: f64,
}

impl Point {
    pub fn change_self(&amp;amp;mut self, x: i32, y: i32) {
        *self = Point { x: x, y: y };
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that though you &lt;em&gt;can&lt;/em&gt; do this, I’m not sure it’s particularly Rustic. My own instinct would be to get a &lt;em&gt;new&lt;/em&gt; &lt;code&gt;Point&lt;/code&gt; rather than mutate an existing one, in either language, and let the other be cleaned up “behind the scenes” as it were (with automatic memory management in Swift or the compiler’s automatic destruction of the type in Rust)—purer functions being my preference these days.&lt;/p&gt;
&lt;p&gt;You can do this with &lt;code&gt;enum&lt;/code&gt; types as well, which the Swift book illustrates with a three-state switch which updates the value type passed to a new value when calling its &lt;code&gt;next()&lt;/code&gt; method. You can do the same in Rust, with the same reference/dereference approach as above.&lt;/p&gt;
&lt;p&gt;Here’s a three-state switch in Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;enum ThreeState {
    case First, Second, Third
    mutating func next() {
        switch self {
        case First:
            self = Second
        case Second:
            self = Third
        case Third
            self = First
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the same in Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;enum ThreeState { First, Second, Third }
impl ThreeState {
    pub fn next(&amp;amp;mut self) {
        match *self {
            ThreeState::First =&amp;gt; *self = ThreeState::Second,
            ThreeState::Second =&amp;gt; *self = ThreeState::Third,
            ThreeState::Third =&amp;gt; *self = ThreeState::First,
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both languages also have what Swift calls “type methods”, and which you might think of as “static class methods” coming from a language like Java or C♯. In Swift, you define them by adding the &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; keywords to the &lt;code&gt;func&lt;/code&gt; definition. The &lt;code&gt;class func&lt;/code&gt; keyword combo is only applicable in &lt;code&gt;class&lt;/code&gt; bodies, and indicates that sub-classes may override the method definition.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Bar {
    static func quux() { print(&amp;quot;Seriously, what&amp;#39;s a `quux`?&amp;quot;) }
}

func main() {
    Bar.quux()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you simply drop &lt;code&gt;self&lt;/code&gt; as a first parameter and call it with &lt;code&gt;::&lt;/code&gt; syntax instead of &lt;code&gt;.&lt;/code&gt; syntax:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Bar;
impl Bar {
    pub fn quux() { println!(&amp;quot;Seriously, what&amp;#39;s a `quux`?&amp;quot;); }
}

fn main() {
    Bar::quux();
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual, Rust chooses to use existing language machinery; Swift uses new (combinations of) keywords.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Properties: type and instance, stored and computed.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiv.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Indexing and subscripts, or: traits vs. keywords again.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (xii)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html" rel="alternate"></link><published>2016-02-27T22:30:00-05:00</published><updated>2016-02-27T22:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-27:/2016/rust-and-swift-xii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class="editorial"&gt;A note on publication: I had this drafted in early January and simply forgot to publish it. Whoops!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As noted in &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;my discussion of the product types in Rust and Swift&lt;/a&gt;, Swift distinguishes between classes and structs, with the former being reference types and the latter being value types. All structs are value types in Rust. (That you can wrap them in a pointer for heap-allocation with one of the smart pointer types, e.g. &lt;code&gt;Box&lt;/code&gt; or &lt;code&gt;Rc&lt;/code&gt; or &lt;code&gt;Arc&lt;/code&gt;, doesn’t change this fundamental reality.) This underlying difference gives rise to one the big difference between Swift classes and Rust structs: a constant &lt;code&gt;class&lt;/code&gt; instance in Swift can still have its fields mutated; not so with a Rust &lt;code&gt;struct&lt;/code&gt; instance. But also not so with a &lt;em&gt;Swift&lt;/em&gt; &lt;code&gt;struct&lt;/code&gt; instance, as it turns out! There isn’t a straightforward way to do this with &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; in Rust; you &lt;em&gt;could&lt;/em&gt; do it with something like an &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;/code&gt;, though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s &lt;code&gt;lazy&lt;/code&gt; keyword, and associated delayed initialization of properties has, as far as I know, no equivalent whatsoever in Rust. And while I can see the utility in principle, I’m hard-pressed to think of any time in my working experience where the behavior would actually be useful. Rather than having &lt;code&gt;lazy&lt;/code&gt; properties, I would be far more inclined to separate the behavior which should be initialized at a later time into its own data structure, and supplying it via &lt;em&gt;inversion of control&lt;/em&gt; if it is necessary for an actions taken by other data structures. (This seems—at first blush at least—to be a way of supporting the un- or partially-initialized data types possible in Objective C?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift has computed properties, a concept familiar to Python developers (and relatively recently introduced in JavaScript). These can e quite handy, as they let you define a property to be accessed like any other (&lt;code&gt;someInstance.theProperty&lt;/code&gt;) while being defined with functions which compute the value dynamically. A common, trivial example: if you defined a &lt;code&gt;Person&lt;/code&gt; with &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; members, you could define a computed property, &lt;code&gt;fullName&lt;/code&gt;, which was built using the existing values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust doesn’t have computed properties at all. This is because of its design decision to deeply separate &lt;em&gt;data&lt;/em&gt; from &lt;em&gt;behavior&lt;/em&gt;, essentially stealing a page from more pure-functional languages (Haskell etc.). This is (one reason) why you don’t define the implementation of a &lt;code&gt;struct&lt;/code&gt; method in the same block as the members of the struct. See an excellent explanation &lt;a href="https://www.reddit.com/r/rust/comments/2uvfic/why_doesnt_rust_have_properti%20es/cocmunq"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s also closely related the way Rust favors composition over inheritance (by making the latter impossible, at least for now!). By separating &lt;code&gt;impl&lt;/code&gt; from &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt;, Rust makes it not only straightforward but &lt;em&gt;normal&lt;/em&gt; to define new behavior for a given item separately from the data description. This, combined with the use of traits (like Swift’s protocols) as the primary way of sharing behavior between objects, means that you don’t have to worry about conforming to some interface when you define a given type; it can always&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; be defined later, even by entirely other modules or even other crates (packages).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, the result is that it’s not at all Rustic&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; to have something like getters or setters or computed properties. It makes sense to have them in Swift, though, which has a more traditionally object-oriented type system (though with some neat additions in the form of its &lt;code&gt;protocol&lt;/code&gt; type classes, which are analogous to Rust’s &lt;code&gt;trait&lt;/code&gt;s—but we’ll come to those in a future post). This is a wash: it’s just a function of the slightly different approaches taken in object design in the two systems. If you have a Swift-style type system, you should have computed properties. If you have a Rust-like type system, you shouldn’t.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m shocked—utterly shocked!—to find that Swift provides a default &lt;code&gt;newValue&lt;/code&gt; argument for setters for computed properties, and shorthand for defining read-only properties. By which I mean: I find this kind of thing entirely unsurprising at this point in Swift, but I don’t like it any better. Making so much implicit just rubs me the wrong way. Once you know the language, it’s fine of course: you’ll recognize all the patterns. It just seems, in an interesting way, to add cognitive load rather than reducing it. That may just be me, though!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interestingly, Swift also allows you to set watchers on given properties—functions called with the new or the removed value whenever the value of the computed property is updated or touched for any reason. It has two of these built in: &lt;code&gt;willSet&lt;/code&gt; and &lt;code&gt;didSet&lt;/code&gt;. You can override these to get custom behavior when a normal property is about to change. (You can of course just implement the desired behavior yourself in the &lt;code&gt;set&lt;/code&gt; method for a computed property.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since Rust doesn’t have properties, it doesn’t have anything analogous. I can’t think of a particularly straightforward way to implement it, either, though you might be able do some chicanery with a trait. Of course you can always define a setter method which takes a value and optional callbacks for actions to take before and after setting the value; the thing that’s nice in Swift is that it gives you these as built-in capabilities within the language itself. (Now I’m wondering if or how you could implement an &lt;code&gt;Observable&lt;/code&gt; trait, though! Might have to play with that idea more later.) It’s worth remembering , in any case, that Rust doesn’t have these &lt;em&gt;because it doesn’t have properties&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Curiously, Swift provides the same functionality for “global” and “local” variables in a given context. In both cases, this is suggestive of the underlying object model for both modules and functions in Swift.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now I’m curious what the representation of a module is in Swift; is it part of the general object system in some way?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This likewise gets me asking: what &lt;em&gt;is&lt;/em&gt; a module in Rust? It’s a block item, clearly, and accordingly defines a scope (as do functions, if and match expressions, and so on). It’s &lt;em&gt;not&lt;/em&gt; a compilation unit (as it is in C or C++). What other machinery is attached to it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both of these questions can be answered by reading the source code for the languages (&lt;a href="https://github.com/rust-lang/rust"&gt;Rust&lt;/a&gt;, &lt;a href="https://github.com/apple/swift"&gt;Swift&lt;/a&gt;), of course. Putting that on my to-do list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift also has &lt;em&gt;type properties&lt;/em&gt;: values common to all instances of a given type. These are directly analogous to &lt;em&gt;class properties&lt;/em&gt; (or &lt;em&gt;class attributes&lt;/em&gt;) in Python or prototype properties in JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust doesn’t have anything like this to my knowledge. You could accomplish something similar using a module-level variable with a &lt;code&gt;'static&lt;/code&gt; lifetime,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; much as you could in C—but that wouldn’t be an item on the type itself, of course.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;static&lt;/code&gt; declaration of item in Swift suggests what a possible implementation might look like in Rust: defining a member like &lt;code&gt;a_static_long: 'static i64&lt;/code&gt;. There might be some interesting challenges around that, though; I don’t know enough to comment meaningfully. At the least, it seems like it would be an odd fit with the rest of the memory management approach Rust takes, and it would make it a bit harder to reason correctly about the behavior of data in a given type. (There are certainly issues there around mutability guarantees and lifetime checking!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because of the differences in underlying approach to data types and implementation, this is one of the areas where the superficially (and sometimes actually) similar languages diverge &lt;em&gt;a lot&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Hopes for the next generation of systems programming.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xiii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Methods, instance and otherwise.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;leaving aside details about &lt;code&gt;trait&lt;/code&gt; specialization &lt;a href="https://github.com/aturon/rfcs/blob/impl-specialization/text/0000-impl-specialization.md"&gt;still being hashed out&lt;/a&gt; in Rust&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;This is now my preferred term for “idiomatic Rust”—directly analogous to “Pythonic,” but with the upside of being an actual word, and one with pleasantly evocative connotations to boot.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;There’s nothing analogous to Rust’s concept of explicit lifetimes in Swift, as far as I can tell. The &lt;code&gt;static&lt;/code&gt; keyword in Swift, like that in C, Objective-C, and C++, is &lt;em&gt;sort of&lt;/em&gt; like Rust’s &lt;code&gt;'static&lt;/code&gt; lifetime specifically, for variables at least—but Rust’s lifetime is substantially more sophisticated and complex than that analogy might suggest.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="listicles"></category><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>through a paper veil</title><link href="http://www.chriskrycho.com/2016/through-a-paper-veil.html" rel="alternate"></link><published>2016-02-23T15:16:00-05:00</published><updated>2016-02-23T15:16:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-23:/2016/through-a-paper-veil.html</id><summary type="html">An author does a strange thing / when he writes the words “at present.” / …</summary><content type="html">&lt;div class="line-block"&gt;An author does a strange thing&lt;br /&gt;
        when he writes the words “at present.”&lt;br /&gt;
    Whose present,&lt;br /&gt;
        and if I reread the words—which?&lt;br /&gt;
    We are sharing times&lt;br /&gt;
        and mental space&lt;br /&gt;
            albeit through a paper veil.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>A Humble, Selfless, Unity</title><link href="http://www.chriskrycho.com/2016/a-humble-selfless-unity.html" rel="alternate"></link><published>2016-02-09T18:40:00-05:00</published><updated>2016-02-09T18:40:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-02-09:/2016/a-humble-selfless-unity.html</id><summary type="html">We are called to a humble, selfless unity which reflects the humble, selfless unity of our Triune God.</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The only constraints on this sermon were that it be between 15 and 25 minutes long, and be on a text from an epistle. Video is from an old MacBook Pro pointed at the podium.&lt;/i&gt;&lt;/p&gt;
&lt;section id="audio" class="level3"&gt;
&lt;h3&gt;Audio&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.podtrac.com/pts/redirect.m4a/cdn.chriskrycho.com/sermons/2016-02-09.m4a"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;audio title="A Humble, Selfless, Unity" controls="controls" preload="metadata" src="http://www.podtrac.com/pts/redirect.m4a/cdn.chriskrycho.com/sermons/2016-02-09.m4a" type="audio/m4a"&gt;
Sorry; your browser doesn’t support m4a files. Try downloading the file directly and playing it in iTunes or another media app.
&lt;/audio&gt;
&lt;/section&gt;
&lt;section id="video" class="level3"&gt;
&lt;h3&gt;Video&lt;/h3&gt;
&lt;div class="iframe-wrapper four-to-three"&gt;
&lt;iframe title="A Humble, Selfless, Unity" src="https://player.vimeo.com/video/154810219" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;
&lt;a href="https://vimeo.com/154810219"&gt;A Humble, Selfless Unity (Philippians 2:1–11)&lt;/a&gt; from &lt;a href="https://vimeo.com/chriskrycho"&gt;Chris Krycho&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;Good evening. Let’s pray before we begin.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Gracious God, may your word be clear in our hearts. May your Spirit open our minds to see you more clearly and love as you have loved us. May we see you, and may I not obscure you. Thank you for revealing yourself to us.&lt;/i&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="introduction" class="level2"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Our text for this evening is Philippians 2:1–11. It might be a familiar passage to many of you, but I think it might also be a surprising passage to you. It was for me.&lt;/p&gt;
&lt;p&gt;I don’t know if you’ve ever been walking along someplace familiar and had something prompt you to stop and notice something about your surroundings that you had never seen before. Maybe you went back to the house you grew up in, and the house is the same, but you aren’t—and you notice the little cracks in the ceiling. &lt;em&gt;Were those always there?&lt;/em&gt; You look at the wall in your older sister’s bedroom. &lt;em&gt;Was it always that color? I thought it was lighter than that.&lt;/em&gt; You go down the stairs into the basement, and “Yup, they always creaked like that,” your mother tells you. You start to ask about the way the basement smells and she just shakes her head at you.&lt;/p&gt;
&lt;p&gt;It had been a while since I read this passage, and it kind of felt like thinking you had grown up in a &lt;em&gt;really nice house&lt;/em&gt; and going back and discovering that it was &lt;em&gt;mansion&lt;/em&gt;. But whether you’ve read this passage a hundred times, or this your first time opening a Bible, God is inviting us into a beautiful mansion tonight.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="believers-called-to-humble-selfless-unity-215" class="level2"&gt;
&lt;h2&gt;1. Believers called to humble, selfless, unity (2:1–5)&lt;/h2&gt;
&lt;p&gt;As we come to Philippians 2, Paul has just spent the first chunk of a letter to these Christians in Philippi—good friends to him, people who have supported his ministry—about his circumstances… which aren’t great, frankly. He wrote this letter from prison. But, one way or another, he has seen a great many people hear the good news about Jesus as a result of his in prison. But he also knows that the Philippians are having a hard time, and he knows that they need encouragement in their faith. He knew that when things get hard—whether that’s persecution, physical or mental illness, death among your friends or family, losing jobs—when life gets hard, we can turn on each other. And Paul called the Philippians, in the midst of their trials—God is calling us, tonight, in the midst of our trials—to something different: to a &lt;strong&gt;humble, selfless, unity&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;So if there is any encouragement in Christ, any comfort from love, any participation in the Spirit, any affection and sympathy, &lt;sup&gt;2&lt;/sup&gt;complete my joy by being of the same mind, having the same love, being in full accord and of one mind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;section id="four-reasons" class="level3"&gt;
&lt;h3&gt;Four reasons&lt;/h3&gt;
&lt;p&gt;Paul opens with four &lt;em&gt;reasons&lt;/em&gt; for people to live with this humble, selfless unity. “If there is any…”&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;encouragement in Christ&lt;/li&gt;
&lt;li&gt;comfort from love&lt;/li&gt;
&lt;li&gt;participation in [which could also read fellowship in or with] the Spirit&lt;/li&gt;
&lt;li&gt;affection and sympathy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;“If there is any,” he says. Is there any? Well, yes. There &lt;em&gt;is&lt;/em&gt; encouragement in Christ. We &lt;em&gt;do&lt;/em&gt; find comfort from being loved, by God and by each other. As believers, we do have fellowship with the Spirit, and through him with Christ and the Father, and of course with each other too. We do have God-given affection and sympathy for each other, and even for non-believers.&lt;/p&gt;
&lt;p&gt;In other words, Paul is using that “if” to quietly point the Philippian believers to a &lt;em&gt;reality&lt;/em&gt;. When he asks them to complete his joy if these things are true, he’s saying, “Look, these four things &lt;em&gt;are&lt;/em&gt; true.” You &lt;em&gt;do&lt;/em&gt; encouragement; comfort; fellowship; affection and sympathy. And just as they did, so do we.&lt;/p&gt;
&lt;p&gt;So given those four good reasons, Paul asks them to complete his joy. As he has told them already, earlier in the epistle, he already has great joy—in seeing the gospel go forth. He even rejoices when people preach the gospel in an attempt to make him jealous. But his joy isn’t complete without something else. If these four reasons are the foundation for that completion, the finished building is &lt;strong&gt;humble, selfless, unity&lt;/strong&gt;. But what we might ask: what is the structure of that finished building?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="three-ways" class="level3"&gt;
&lt;h3&gt;Three ways&lt;/h3&gt;
&lt;p&gt;There are three. Four foundation stones, and three pillars on that base. Paul told his friends they would complete his joy—they would fill it up—by:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;being of the same mind&lt;/li&gt;
&lt;li&gt;having the same love&lt;/li&gt;
&lt;li&gt;being in full accord and of one mind&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(If you’re worried about my counting: affection and sympathy go together, and so do “being in full accord and of one mind.” If you have true affection for someone, you will feel sympathy for her when she is struggling. If you’re in full accord with someone, it’s like you and he share a mind. So: four foundation stones, and these three pillars.)&lt;/p&gt;
&lt;p&gt;And what we see in these three pillars is that these three ways are really &lt;em&gt;one&lt;/em&gt; way. They’re one structure. And that &lt;em&gt;one way&lt;/em&gt;, is to be &lt;em&gt;one&lt;/em&gt;. That one way is &lt;em&gt;unity&lt;/em&gt;. Joy, for the apostle, and I think it is fair to say God’s joy in our fellowship, is complete when we are truly unified. Not identical, but unified.&lt;/p&gt;
&lt;p&gt;But how? &lt;em&gt;How&lt;/em&gt; do we have the same mind? &lt;em&gt;How&lt;/em&gt; do we have the same love? &lt;em&gt;How&lt;/em&gt; can we be in full accord and of one mind? That seems rather abstract. If I sat down my three-and-a-half year old and my 20-month old and said, “Okay, Ellie and Kate, you need to have unity between you two,” they would just stare at me. Ellie, the older one, might say, “Yes, daddy!” just to be good, but they wouldn’t know what to do with it. Kate, the younger one, would probably yell “No!” because she’s a toddler and we’re working on that right now. And wherever you are: whether you’re saying, “Okay…” but you don’t really get it, or you’re saying “No, no way! Have you met these people?” Paul draws us forward. He gives us some help, makes it a little more concrete.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="two-contrasts" class="level3"&gt;
&lt;h3&gt;Two contrasts&lt;/h3&gt;
&lt;p&gt;Paul gives us two pairs of contrasts to help us see a little more clearly what this kind of unity looks like. Capstones to match the foundation, if you will.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt;Do nothing [, he says in v. 3,] from selfish ambition or conceit, but in humility count others more significant than yourselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s the first capstone, the first contrast. Not selfish ambition, not conceit, but humility, and counting others more important than yourself. So we see first that this unity is &lt;em&gt;humble&lt;/em&gt; unity. It comes becomes I’m valuing you above me. I’m not trying to exalt myself. I’m thinking of how I can make you do well instead.&lt;/p&gt;
&lt;p&gt;Verse 4 shows us the second contrast, the second capstone:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt;Let each of you look not only to his own interests, but also to the interests of others.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This unity, then, is also &lt;em&gt;selfless&lt;/em&gt;. When we’re healthy, we don’t just aim to get our own. “Looking out for number one!” No, instead, we help others accomplish their hopes. We give of our time; our money; our sleep; our space – to help others.&lt;/p&gt;
&lt;p&gt;So this is the church. This is the kind of building we’re supposed to be. As Paul puts it in Ephesians, we’re being built together into a temple for God—a temple of people known for their &lt;strong&gt;humble, selfless, unity&lt;/strong&gt;—their love.&lt;/p&gt;
&lt;p&gt;We have these four foundations: encouragement in Christ, comfort from love, fellowship with the Spirit, and affection and sympathy. We have three pillars of unity: being of the same mind, having the same love, being in full accord and of one mind. We have two capstones: calls to humility and selflessness.&lt;/p&gt;
&lt;p&gt;But you might be asking now, “How? I want that unity; I even want to be selfless and humble, even if that sounds kind of hard. But I don’t know &lt;em&gt;how&lt;/em&gt;.” And to that, Paul says, “Don’t worry; I’ll give you an example. In fact, here is &lt;em&gt;the&lt;/em&gt; example.” And he shows us Christ—verse 5: “Have this mind among yourselves, which was also in Christ Jesus…”&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-foundation-of-humble-selfless-unity-2611" class="level2"&gt;
&lt;h2&gt;2. The foundation of humble, selfless, unity (2:6–11)&lt;/h2&gt;
&lt;p&gt;The mind of Christ! That’s a heady thing to think about. But for Paul, it’s deeply practical, in fact. He gives us a very succinct summary of Jesus’ ministry. And what was Jesus like? He was humble. He was selfless. (And if you’re thinking, “But what about unity?” you’re right. Hold on to that thought. We’ll come back to it.) Let’s start by looking at Christ’s example.&lt;/p&gt;
&lt;section id="christ-humbled-himself" class="level3"&gt;
&lt;h3&gt;Christ humbled himself&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;sup&gt;6&lt;/sup&gt;who [Christ Jesus], though he was in the form of God, did not count equality with God a thing to be grasped [—something to be held onto—], &lt;sup&gt;7&lt;/sup&gt;but emptied himself, by taking the form of a servant, being born in the likeness of men. &lt;sup&gt;8&lt;/sup&gt;And being found in human form, he humbled himself by becoming obedient to the point of death, even death on a cross.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What we see here is one of the great mysteries our faith. God became man. We could take a dozen sermons on this point alone. But Paul has something very specific for us to see from the Incarnation here. Whatever prerogatives we might have—whatever money, whatever fame, whatever position or status—the Son had more. And Jesus Christ lived as a servant. He didn’t hold onto what was his (and it really was his, by right!). He came as one of us. When you read here, “in the likeness of man,” don’t think “he was kind of like us.” Hebrews tells us that he was &lt;em&gt;exactly&lt;/em&gt; was we are—yet without sin.&lt;/p&gt;
&lt;p&gt;And that degradation goes down and down and down. He became a baby, who needed to be changed. He dealt, like my older daughter does, with younger siblings who tormented him. He was teased by other children. He went through puberty and had his voice go all scratchy. He worked for many years in obscurity. When he started his ministry, he was rejected as often as accepted, loved for his miracles and not for the God he revealed, mocked even by his own family, and wandered around without a home. Remember, the God of all the universe. And ultimately, he died. Died a sinner’s shameful death. He took our humiliation. And through all of it, he did not complain, he just served. So Christ is our model.&lt;/p&gt;
&lt;p&gt;A convicting model, at least for me. Jesus, the real flesh-and-blood Jesus who was tempted just like us, is the perfect man. He is what it &lt;em&gt;means&lt;/em&gt; to be human rightly. And he served. He’s the rightful king! And he served. Do I serve like that? Do you? Or do we demand our rights?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-father-exalted-christ" class="level3"&gt;
&lt;h3&gt;The Father exalted Christ&lt;/h3&gt;
&lt;p&gt;Now, as we come into these final verses, we see what at first might seem like a bit of a strange turn. Paul is trying to teach us about this kind of &lt;strong&gt;humble, selflessness,&lt;/strong&gt;—and yes, &lt;strong&gt;unity&lt;/strong&gt;. Hmm. And we were tracking along, as we saw the concrete example of Jesus living and dying selflessly. Feeling conviction, even; I certainly was and am. But then we get to this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;sup&gt;9&lt;/sup&gt;Therefore God has highly exalted him and bestowed on him the name that is above every name, &lt;sup&gt;10&lt;/sup&gt;so that at the name of Jesus every knee should bow, in heaven and on earth and under the earth, &lt;sup&gt;11&lt;/sup&gt;and every tongue confess that Jesus Christ is Lord, to the glory of God the Father.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is, at first blush, a bit of a challenge. “Okay. I mean, it’s good that Jesus is exalted. But how does it fit? Am &lt;em&gt;I&lt;/em&gt; going to be exalted? Am I supposed to serve because Jesus was exalted? What’s going on here?”&lt;/p&gt;
&lt;p&gt;There are two parts to this. One of them is, yes, that Jesus is Lord. We are citizens of his kingdom, and if his people lived like that, his people should &lt;em&gt;certainly&lt;/em&gt; live like that. So that is one part of it.&lt;/p&gt;
&lt;p&gt;But there is something else going on here, too.&lt;/p&gt;
&lt;p&gt;And this—oh, this! What do we see here? We see the Father exalting the son. He &lt;em&gt;highly&lt;/em&gt; exalted him. He gave him the name that is above every other name. The Father wants every one to say, “Jesus is Lord!” The Father wants everyone to bow down and worship Jesus. And Jesus, the Son—he’s doing all of this, he’s becoming a servant, taking on human nature, dying, on a cross to what end? To the glory of the Father!&lt;/p&gt;
&lt;p&gt;We have a little glimpse here into something… &lt;em&gt;awesome&lt;/em&gt;. We see the Father, saying to the Son, “Let me exalt you!” And Jesus says to the Father, “All the glory is yours!” And the Father to the Son, and the Son to the Father, back and forth, and back and forth, forever. This is the life of the trinity. This is the eternal life of the triune God: &lt;strong&gt;humble, selfless, unity&lt;/strong&gt;! Love!&lt;/p&gt;
&lt;p&gt;And this is what we’re meant to be. This is what the church is for. This is what &lt;em&gt;humanity&lt;/em&gt; is for: men and women made in the image of God—&lt;strong&gt;humble, selfless, unity&lt;/strong&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The life of the Trinity, in the life of the church. This is the building we’re meant to be. This is the temple. This is the mansion.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Paul has taken our question: “How do I live like that?” and he’s answered it by showing us how the life of the triune God took on flesh, and lived among us. Was our servant. Died for us. He says: “How Christ lived is how we are meant to live.” And he reminds us, back there in v. 1: “If there is any encouragement in Christ, any comfort from love, any participation in the Spirit—any fellowship with the Spirit, remember; any affection and sympathy, complete my joy…” We have fellowship with the Spirit. That’s where our unity comes from: not common interests, not shared experiences, not being the same age, or sex, or ethnicity, or social standing, or economic status.&lt;/p&gt;
&lt;p&gt;We’re meant to be a little picture, every day, of the Trinity. And the way we do that, is by living like Christ did. We choose, every day, to serve the people around us, instead of ourselves. We choose, every day, not to put ourselves first, but to put others first. We choose, every day, not to make ourselves look great, but to love others.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="exhortation" class="level2"&gt;
&lt;h2&gt;Exhortation&lt;/h2&gt;
&lt;p&gt;Brothers and sisters, here is my challenge to you today. Fill up your joy, and fill up my joy, and fill out our Triune God’s joy in you!—by loving one another as he has loved us. This kind of &lt;strong&gt;humble, selfless, unity&lt;/strong&gt; is not a burden. It is what we are for. And yes, in this fallen world, it is hard sometimes. But we have the Spirit. We participate in God’s own love. Mystery— awesome mystery! Let us love one another. Let us count one another more important than ourselves. Let us look not only to our own interests, but to each other’s. Let us live in the &lt;strong&gt;humble, selfless, unity&lt;/strong&gt; of our King’s kingdom.&lt;/p&gt;
&lt;p&gt;And friend, if you are &lt;em&gt;not&lt;/em&gt; a believer, and you look at this picture, I hope you’re thinking, “Yes. That’s what the world ought to look like.” Because it is. And it’s beautiful. We’re not meant not for self-absorption. We’re meant to live like Christ did. So I challenge you: call Christ lord. Let his death be yours, and his resurrection, too—come walk after him with us.&lt;/p&gt;
&lt;p&gt;Let us pray to our loving, selfless, humble God of unity.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i&gt;God we praise you, who are love and light forever. Thank you for your love—for sharing it with us, humbly and selflessly; for drawing us into your love and restoring us to what you designed us for. Thank you for building us into a temple for your Spirit. Help us walk in this same humble, selfless unity. &lt;/i&gt;&lt;/p&gt;
&lt;/section&gt;
</content><category term="SEBTS"></category><category term="M. Div."></category><category term="sermons"></category></entry><entry><title>Time</title><link href="http://www.chriskrycho.com/2016/time.html" rel="alternate"></link><published>2016-01-23T19:45:00-05:00</published><updated>2016-01-23T19:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-23:/2016/time.html</id><summary type="html">Jaimie and I are presently trapped in a hotel in New York City, courtesy of winter weather. We decided to do a little writing challenge! This is mine.</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;Jaimie and I are presently trapped in a hotel in New York City, courtesy of winter weather. We decided to do a little writing challenge! The rules of our challenge were: we had 30 minutes to write at least 500 words, it had to be fantasy, it had to be about someone the opposite sex of the author, and it had to be about someone elderly. This is mine.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The door opened, but it did not creak. It &lt;em&gt;always&lt;/em&gt; creaked. Like Janice’s bones in the morning, it creaked.&lt;/p&gt;
&lt;p&gt;She frowned at the back of the door facing her. Someone stood there, it seemed; a shadow darkened the floor by the doorway. Her eyes were rheumy enough, and the room layout ridicuous enough, that she couldn’t say more.&lt;/p&gt;
&lt;p&gt;&amp;quot;Who is it? she called out. Croaked out, more like, but that was the price of eighty years’ of cigarettes.&lt;/p&gt;
&lt;p&gt;«Time.» Helpful response, that was.&lt;/p&gt;
&lt;p&gt;“What’s that?” She was still croaking. She coughed, tried to clear her throat.&lt;/p&gt;
&lt;p&gt;«Time,» he said again. She thought it was a he, but his voice sounded funny. Far away. Then again, her ears had been going for long enough now.&lt;/p&gt;
&lt;p&gt;“Time? Kids aren’t coming today, so you can have all you want. But who are you?”&lt;/p&gt;
&lt;p&gt;«It. is. time.»&lt;/p&gt;
&lt;p&gt;The shadow looked darker. She frowned, pursed her lips, and shook her head. “Young man—you are young, aren’t you? You don’t sound old—come in here and sit down and explain yourself.”&lt;/p&gt;
&lt;p&gt;«I. sit. for. no. one.»&lt;/p&gt;
&lt;p&gt;Janice blinked a few times. She sat back in her chair. She tried to take a deep breath, coughed, coughed some more, gave up on the deep breath, contented herself with a swallow instead. That seemed more appropriate anyway. But no, she was just being absurd. Old, even.&lt;/p&gt;
&lt;p&gt;“Well, all right, then, but come in where I can see you.”&lt;/p&gt;
&lt;p&gt;«No. it. is. your. time.»&lt;/p&gt;
&lt;p&gt;She swallowed again.&lt;/p&gt;
&lt;p&gt;“Time for what?” Just to be sure. The shadow was still getting darker. It could have been her eyes, but the rest of the room was the same as before: fuzzed out to an irritating degree, but bright enough.&lt;/p&gt;
&lt;p&gt;«Time. to. depart.»&lt;/p&gt;
&lt;p&gt;“Son, or whatever you are” (she no longer thought it was anyone who ought to be called son, or daughter for that matter) “be clear. I don’t have time for whatever your game is. Had enough of foolishness twenty years ago.”&lt;/p&gt;
&lt;p&gt;«It. is. time. for. you. to. depart. this. life.»&lt;/p&gt;
&lt;p&gt;Well, then. One thing to have a half-cocked notion of a thing like that, but another hear it from the mouth of… time? itself. “Is it now?” she managed. “Well, you took long enough getting here. Family’s been telling me that for a good twenty years now.”&lt;/p&gt;
&lt;p&gt;Where the shadow stood on the floor in front of the door was all dark now. Shaped something like a man, for all her blurred sight could make out, but black as a night when all the moons were down.&lt;/p&gt;
&lt;p&gt;She was ready, though. Ready as you could be. “Do you announce yourself to &lt;em&gt;everyone&lt;/em&gt; like this, or just half-blind old ladies?” She sounded like a bullfrog with a sore throat.&lt;/p&gt;
&lt;p&gt;The shadow answered. «All. those. who. have. time.»&lt;/p&gt;
&lt;p&gt;Helpful. Not that it mattered. She &lt;em&gt;was&lt;/em&gt; ready. She was.&lt;/p&gt;
&lt;p&gt;The shadow was suddenly before her. A starless, moonless night. Time indeed.&lt;/p&gt;
&lt;p&gt;Janice stood up. Face it on your feet, she’d always said. To the blazes with that, now, she concluded. Face it asleep in the night was a better plan. But here she was.&lt;/p&gt;
&lt;p&gt;She could still run. Jump a little even. So she did. She threw herself at the shadow, and as she came to it, she thought she saw stars.&lt;/p&gt;
&lt;p&gt;And then everything was gone except the stars, whirling before suddenly clear eyes. Ten billion galaxies whirled; pulsars flamed and danced in time; suns flared and planets spun.&lt;/p&gt;
&lt;p&gt;Green grass, dusted with snow.&lt;/p&gt;
&lt;p&gt;«You. have. time.»&lt;/p&gt;
&lt;p&gt;She looked up. Stars, not night.&lt;/p&gt;
&lt;p&gt;«Spend. it. well.»&lt;/p&gt;
&lt;p&gt;She stood.&lt;/p&gt;
</content><category term="fiction"></category></entry><entry><title>“I Don't Know When I'd Use That”</title><link href="http://www.chriskrycho.com/2016/i-dont-know-when-id-use-that.html" rel="alternate"></link><published>2016-01-17T10:00:00-05:00</published><updated>2016-01-17T10:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-17:/2016/i-dont-know-when-id-use-that.html</id><summary type="html">&lt;p&gt;I was reading an interesting Stack Overflow &lt;a href="http://stackoverflow.com/questions/21170493/when-are-higher-kinded-types-useful"&gt;discussion&lt;/a&gt; of the value of &lt;a href="http://stackoverflow.com/questions/6246719/what-is-a-higher-kinded-type-in-scala"&gt;higher-kinded types&lt;/a&gt; (hereafter &lt;abbr&gt;HKTs&lt;/abbr&gt;), and noted someone repeatedly commenting, “But when would you use this in a &lt;em&gt;real app&lt;/em&gt;?” To put it the way another &lt;a href="https://m4rw3r.github.io/rust-and-monad-trait/"&gt;blog post&lt;/a&gt; about &lt;abbr&gt;HKTs&lt;/abbr&gt; (in Rust), they are “a feature people do not …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was reading an interesting Stack Overflow &lt;a href="http://stackoverflow.com/questions/21170493/when-are-higher-kinded-types-useful"&gt;discussion&lt;/a&gt; of the value of &lt;a href="http://stackoverflow.com/questions/6246719/what-is-a-higher-kinded-type-in-scala"&gt;higher-kinded types&lt;/a&gt; (hereafter &lt;abbr&gt;HKTs&lt;/abbr&gt;), and noted someone repeatedly commenting, “But when would you use this in a &lt;em&gt;real app&lt;/em&gt;?” To put it the way another &lt;a href="https://m4rw3r.github.io/rust-and-monad-trait/"&gt;blog post&lt;/a&gt; about &lt;abbr&gt;HKTs&lt;/abbr&gt; (in Rust), they are “a feature people do not really know what to do with.”&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: I’m sympathetic to that desire for concrete examples. I’m interested in these kinds of things not primarily for their intellectual value but for their pragmatic value (though I don’t think those two are as distinct as many people do). I’d &lt;em&gt;also&lt;/em&gt; love to see some more real-world examples in those discussions. All too often, the discussions of types in Haskell end up being quite abstract and academic—no surprise, given the language’s origin. But I’m also aware that quite often it’s difficult to see how a given kind of abstraction is useful without jumping into a language which has that abstraction available and &lt;em&gt;using&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;People often get turned off by Haskell (and other similarly high-abstraction languages like Scala) because of challenging terms like &lt;em&gt;monad&lt;/em&gt;, &lt;em&gt;applicative&lt;/em&gt;, &lt;em&gt;functor&lt;/em&gt;, and so on. And again: I get that. To grok Haskell, you need to wrap your head around a lot of &lt;em&gt;math&lt;/em&gt; ideas—mainly various properties of &lt;em&gt;sets&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But I remember feeling the same way six years ago when I started playing with JavaScript and jQuery and every tutorial out there simply assumed existing familiarity and comfort with functions as arguments or return values. Coming from the world of Fortran and C, my head ached for weeks as I tried to make sense of what I was seeing. Even when I finally got it, &lt;em&gt;I didn’t like it&lt;/em&gt;. Over the last several years, though, I’ve become increasingly comfortable and even reliant on closures, composition of functions to transform data, and so on as I worked regularly in Python and JavaScript.&lt;/p&gt;
&lt;p&gt;That experience has taught me that my current inability to see the utility of a given abstraction means little about the abstraction. It’s primarily an indicator of my own inexperience.&lt;/p&gt;
&lt;p&gt;To the question of the utility &lt;abbr&gt;HKTs&lt;/abbr&gt; in general—in Haskell, Rust, or somewhere else—I don’t have the knowledge myself (yet) to supply a good answer. Heck, I can’t even &lt;em&gt;explain&lt;/em&gt; them very well. (&lt;a href="http://adriaanm.github.io/research/2010/10/06/new-in-scala-2.8-type-constructor-inference/"&gt;Other people can, though!&lt;/a&gt;) But I can say that reading &lt;a href="https://gumroad.com/l/maybe-haskell"&gt;&lt;em&gt;Maybe Haskell&lt;/em&gt;&lt;/a&gt; showed me clearly that such things can be very useful. Even if I am not yet comfortable using that tool, I see how learning to use it would be profitable in the long-term. And like any good tool, even if you don’t need it every day… when you want it, you &lt;em&gt;really&lt;/em&gt; want it.&lt;/p&gt;
</content><category term="software development"></category><category term="programming languages"></category><category term="rust"></category><category term="haskell"></category></entry><entry><title>Trust, Fame, and Deceit</title><link href="http://www.chriskrycho.com/2016/trust-fame-and-deceit.html" rel="alternate"></link><published>2016-01-10T15:45:00-05:00</published><updated>2016-01-10T15:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-10:/2016/trust-fame-and-deceit.html</id><summary type="html">&lt;p&gt;I &lt;a href="/2016/women-in-rust.html"&gt;recently noted&lt;/a&gt;, in the course of seeing how my &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt; podcast was doing, that the subscriber list for its Twitter followers was overwhelmingly, terribly male. So I responded a little: I posted publicly about it on Twitter, making known my intention to find some ways within the podcast …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I &lt;a href="/2016/women-in-rust.html"&gt;recently noted&lt;/a&gt;, in the course of seeing how my &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt; podcast was doing, that the subscriber list for its Twitter followers was overwhelmingly, terribly male. So I responded a little: I posted publicly about it on Twitter, making known my intention to find some ways within the podcast to feature female Rust developers, just to help make the Rust community that much friendlier to women. (I’m &lt;a href="https://twitter.com/b0rk/status/686150249619013632"&gt;told&lt;/a&gt; that it’s actually very welcoming so far, for which I’m grateful!)&lt;/p&gt;
&lt;p&gt;The response was gratifying in some ways: I got a fair bit of response from within the Rust community, and heard back from a number of women who listen to the show. At least one of them linked to the show, recommending it strongly.&lt;/p&gt;
&lt;p&gt;I was happy about this. And then I started thinking about the way this cycle played out. Everything in it was genuinely well-intended on my part. I very much want to see the tech world in general and open-source software in particular be friendlier and kinder and more respectful to women. I want it to be a genuinely egalitarian space. I would go so far as to say that I think that is essential for it to be a genuinely &lt;em&gt;good&lt;/em&gt; space.&lt;/p&gt;
&lt;p&gt;But what if those &lt;em&gt;weren’t&lt;/em&gt; my intentions? What if, in point of fact, I was a misogynist pig with a penchant for sexual harassment?&lt;/p&gt;
&lt;p&gt;The same social media tactics would still work. People who’d experienced my wickedness first-hand would know better, but many wouldn’t. I’d just be a friendly-sounding voice out there on the internet, giving every impression of being on the side of people whose go of things in the tech community has been pretty rough at times. My stature would go up as a consequence. My podcast would grow in popularity. The likely hood of my being a well-liked and well-respected member of the community would only increase.&lt;/p&gt;
&lt;p&gt;And the opportunities I would have to abuse that position of influence would all concomitantly increase as well.&lt;/p&gt;
&lt;p&gt;Again: that &lt;em&gt;isn’t&lt;/em&gt; me. But unless you know me and see how I live my life, you don’t know that. You don’t know from a tweet, or a blog post, or even a whole public internet history. Sad to say, but &lt;em&gt;people lie&lt;/em&gt;, and they do it for many reasons. When, in the midst of any furor over another revelation of sexual predation from a well-regarded person who has said all the right things, remember that words are cheap. “Actions speak louder than words” is a truism for a reason.&lt;/p&gt;
&lt;p&gt;That doesn’t mean you should mistrust everything you hear or read. It doesn’t mean that behind every nice-seeming person on the internet is actually a creepy psychopath plotting how to manipulate you. It just means that you shouldn’t be surprised to find that, out of the great mass of people who genuinely are friendly and helpful, there are nonetheless a few for whom their friendliness and helpfulness are a manipulative charade.&lt;/p&gt;
&lt;p&gt;A few thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep trusting people. You can’t live your life sanely otherwise.&lt;/li&gt;
&lt;li&gt;But don’t be surprised when some people aren’t what they seem.&lt;/li&gt;
&lt;li&gt;If someone acts one way in public but is completely different in private, do whatever you can to deal with it. Above all, if you’re their friend, &lt;em&gt;call them on it&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Give grace; people make mistakes. But also don’t assume that just because someone who’s lied repeatedly apologizes, they’re going to change. Giving grace and forgiving people doesn’t mean being blind or naïve.&lt;/li&gt;
&lt;li&gt;Don’t manipulate people. It’s easy to do it, and the temptation toward popularity can get tangled up even with genuine desires to do good in ways that profoundly complicate your actions. Watch out for it.&lt;/li&gt;
&lt;li&gt;Don’t let that worry keep you from doing good things for other peoples’ good. Keep your eyes on your own motives while you do it, but &lt;a href="https://www.biblegateway.com/passage/?search=Matthew+22%3A34-40&amp;amp;version=NIV"&gt;love others as you love yourself.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Women in Rust</title><link href="http://www.chriskrycho.com/2016/women-in-rust.html" rel="alternate"></link><published>2016-01-10T15:25:00-05:00</published><updated>2016-01-10T15:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-10:/2016/women-in-rust.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I posted these bullet points last night as a series of tweets on my &lt;a href="https://www.twitter.com/chriskrycho"&gt;main account&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007510147309568"&gt;∞ January 9, 2016 21:11&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A thing I’d really, really like to see change—this is from the &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt; Twitter data. Unsurprising, but awful:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/images/new-rustacean-followers.png" alt="@newrustacean Twitter follower gender data" /&gt;&lt;figcaption&gt;&lt;a href="https://www.twitter.com/newrustacean"&gt;@newrustacean&lt;/a&gt; Twitter follower gender data&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007729371148289"&gt;∞ January 9, 2016 …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I posted these bullet points last night as a series of tweets on my &lt;a href="https://www.twitter.com/chriskrycho"&gt;main account&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007510147309568"&gt;∞ January 9, 2016 21:11&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A thing I’d really, really like to see change—this is from the &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt; Twitter data. Unsurprising, but awful:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/images/new-rustacean-followers.png" alt="@newrustacean Twitter follower gender data" /&gt;&lt;figcaption&gt;&lt;a href="https://www.twitter.com/newrustacean"&gt;@newrustacean&lt;/a&gt; Twitter follower gender data&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686007729371148289"&gt;∞ January 9, 2016 21:12&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Takeaway: the &lt;a href="https://www.twitter.com/rustlang"&gt;@rustlang&lt;/a&gt; community has many strengths, but like every tech community, we need to improve here—a lot.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686008145752272896"&gt;∞ January 9, 2016 21:14&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Standing offer: if you’re a female &lt;a href="https://www.twitter.com/rustlang"&gt;@rustlang&lt;/a&gt; dev, I’d &lt;em&gt;love&lt;/em&gt; to feature your experience learning Rust on the show.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/chriskrycho/status/686008527937245185"&gt;∞ January 9, 2016, 21:15&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ll be doing some interview &lt;a href="https://www.twitter.com/newrustacean"&gt;@newrustacean&lt;/a&gt; episodes soon-ish—I want as many female voices in the mix as possible.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="podcasting"></category><category term="tweetstorm"></category><category term="rust"></category></entry><entry><title>Rust and Swift (xi)</title><link href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html" rel="alternate"></link><published>2016-01-10T10:00:00-05:00</published><updated>2016-01-10T10:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2016-01-10:/2016/rust-and-swift-xi.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I’ve still been (slowly) working through the Swift book and comparing Swift and Rust; I have another draft started which I’ll hopefully finish this week. And I still find the comparison deeply profitable. The two languages continue to evolve in interesting ways, and the comparison is all the more interesting &lt;a href="https://github.com/apple/swift"&gt;now that Swift is open-source&lt;/a&gt; and its future &lt;a href="https://github.com/apple/swift-evolution"&gt;open for community input&lt;/a&gt; (just as &lt;a href="https://github.com/rust-lang/rfcs"&gt;Rust is&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Something I’ve been thinking about for several months, and which the &lt;a href="https://overcast.fm/+CdSzsTIY/1:16:42"&gt;brief discussion of Swift, Go, and Rust&lt;/a&gt; at the end of the latest &lt;a href="http://atp.fm/episodes/151"&gt;Accidental Tech Podcast&lt;/a&gt; brought back to my mind, is the question of what the next generation of systems-level programming language should be. And my answer is: there shouldn’t be &lt;em&gt;just one&lt;/em&gt;. The best possible thing for the space, in many ways, is for there to be a healthy diversity of options and lots of competition in the space. We don’t want to have &lt;em&gt;ten&lt;/em&gt; different systems programming languages to deal with, I think—but three or four or five would be &lt;em&gt;much&lt;/em&gt; preferable to having one or two (closely related) as we have in the decades of C and C++ dominance.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: both languages (and perhaps especially C) do many things exceptionally well. For all that they are (justly) maligned for some of their problems, the longevity of both C and C++ has a great deal to do with how well they fit the problem domain, and how much they’ve empowered developers to accomplish within that space (which is very, &lt;em&gt;very&lt;/em&gt; large).&lt;/p&gt;
&lt;p&gt;The problem, though, at least as I see it, is that the existence of only two really serious systems programming languages for the last several decades has led a lot of developers to think that C and C++‘s ways of solving problems are the &lt;em&gt;only&lt;/em&gt; way to solve problems. The languages we use shape the way we think about possible solutions, and when a given language doesn’t recognize entire classes of different approaches, that deeply limits developers’ ability to tackle certain issues. (See also the interesting CppCast &lt;a href="http://cppcast.com/2015/10/andrei-alexandrescu/"&gt;interview with D’s Andrei Alexandrescu&lt;/a&gt; in which he makes similar points.)&lt;/p&gt;
&lt;p&gt;The most obvious thing missing from both is the ability to do truly functional-style programming. C of course is also lacking classes and thus is much more difficult to use for any sort of object-oriented programming.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Neither has anything remotely like Rust’s traits or Swift’s extensions; C++ has only gotten lambdas recently.&lt;/p&gt;
&lt;p&gt;All of this comes out to mean that the set of &lt;em&gt;tools&lt;/em&gt; available to systems programmer has necessarily been missing any number of things available in languages outside that context. In some cases, this may be a necessary consequence of the kinds of programming being done: when you need totally deterministic memory and compiler behavior, dynamic typing and a non-trivial runtime are simply not options. But in many cases, they are simply a function of the history of the languages’ development and history. Being an ALGOL descendant, and especially a C descendant, means there are some fundamental choices about the language which will differ from those made in a language descended from ML.&lt;/p&gt;
&lt;p&gt;All of which is to say: C and C++ have been really useful tools in many ways, but having &lt;em&gt;only&lt;/em&gt; C and C++ available for serious systems programming work over the last decades has left many developers blind to or simply unaware of the real advantages other paradigms might offer them.&lt;/p&gt;
&lt;p&gt;So going forward, I don’t want there to be &lt;em&gt;a winner&lt;/em&gt; in the systems programming space. I’d rather see D, Rust, Swift, Go, and maybe even a few other contenders all stay strong—finding their own niches and continually pushing each other and learning from each other. That will give us a space in which different languages are free to try out different approaches to the same problems, without being tied to the specific constraints faced by other languages. Built-in greenthreading? Go! Hindley-Milner types, memory safety, and zero runtime? Rust! Something in beween, highly expressive and with different type systems and tradeoffs around memory management, etc.? Swift, or D!&lt;/p&gt;
&lt;p&gt;Having a robust, thriving set of competitors in the market will be good for the languages themselves. But it will also be good for developers. It will take off some of the blinders that come from a single language (or a pair of very closely related languages) dominating the ecosystem. It will make it likelier that people will be more familiar with different programming paradigms. And that can only be a good thing, as far as I’m concerned.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Classes and structs (product types), and reference and value types.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Properties: type and instance, stored and computed.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;It is of course entirely possible to do non-classical OOP; the point is that C entirely lacks &lt;em&gt;language-level&lt;/em&gt; facilities for OOP, inheritance, etc.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming-languages"></category></entry><entry><title>Thoughts on 2015 (and 2016)</title><link href="http://www.chriskrycho.com/2015/thoughts-on-2015-and-2016.html" rel="alternate"></link><published>2015-12-26T13:30:00-05:00</published><updated>2015-12-26T13:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-12-26:/2015/thoughts-on-2015-and-2016.html</id><summary type="html">&lt;p&gt;As we come to the end of the year, I have been reflecting on the things I set out to do this year, and on my hopes for the coming year. At the start of the year, I posted a number of goals for my “public” life this year, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As we come to the end of the year, I have been reflecting on the things I set out to do this year, and on my hopes for the coming year. At the start of the year, I posted a number of goals for my “public” life this year, and I also wrote up a number of personal goals for myself. Goals are well and good, but if I do not evaluate how I did on them, and think about areas I succeeded and areas I failed, and on how I might do better in the future, those goals will not make much difference. (&lt;em&gt;Much&lt;/em&gt; difference, I say, because I have long found that even just having goals makes a difference in how I approach the year.)&lt;/p&gt;
&lt;p&gt;At the start of the year, I posted a list of &lt;a href="http://www.chriskrycho.com/2015/public-ish-plans.html"&gt;“Public-ish Plans”&lt;/a&gt;. My self-evaluation on those counts isn’t amazing. The Winning Slowly goals, I managed: we have separate pages for each season, and we recorded two more seasons—each one better than those before. Hosting things on Digital Ocean and migrating my wife’s blogs off of Blogger and WordPress, not so much (read: not at all, though I did &lt;em&gt;start&lt;/em&gt; writing a Ghost theme for her current WordPress site… and haven’t touched it in at least six months.) I wrote some music this year, but not three minutes worth—you &lt;em&gt;can&lt;/em&gt; hear all 37 seconds of it &lt;a href="https://soundcloud.com/chriskrycho"&gt;on SoundCloud&lt;/a&gt;. I wrote &lt;a href="http://www.chriskrycho.com/poetry/"&gt;poetry&lt;/a&gt;; I managed to average about one poem a month starting in March. I wrote a few essays, but nothing close to one per month. I posted a whopping two book reviews (out of the six I hoped for), and both of those were written for school. I managed to add a picture to the About page, but I didn’t even come close to blogging about the family on a monthly basis.&lt;/p&gt;
&lt;p&gt;In sum: about 50/50 on those goals.&lt;/p&gt;
&lt;p&gt;That said, I managed quite a few other things &lt;em&gt;not&lt;/em&gt; on that list this year. I started learning Rust, and started &lt;a href="http://newrustacean.com/"&gt;a podcast about it&lt;/a&gt; which is easily the most successful online endeavor I’ve ever undertaken, with a good 500 regular listeners. (That’s a small crowd on the internet, but massively more than any writing I’ve done, and actually larger than Winning Slowly’s current audience.) I have basically carried home a major transition effort for my main software development client, and helped them bring a new developer up to speed. I landed a new software development job, doing things I’m much more passionate about, which I’ll be starting in mid-January. I ran a triathlon (and placed third in my age group), and I set another personal record in the half-marathon I ran this fall.&lt;/p&gt;
&lt;p&gt;One of the lessons I take away from this last year, then, is that it’s important to set goals, but it’s also important to let those goals change over time. Some of those goals are still things I’d like to accomplish—like migrating us to DigitalOcean, and getting Jaimie’s sites off of Blogger especially. Another (fairly obvious one) is prioritizing. I had a lot of major goals for last year, and in retrospect, I think I had &lt;em&gt;too many&lt;/em&gt;. It’s hard to keep all of those in sight of the course of the year, especially with other professional and scholastic demands to meet (themselves often good in their own right).&lt;/p&gt;
&lt;p&gt;With all of these things in mind, I’m planning to approach 2016 a little differently. I haven’t made formal goals yet, but I have come up with the basic outline I want to use going forward.&lt;/p&gt;
&lt;p&gt;First, I am going to set a single goal in each of five major categories in my life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;spiritual:&lt;/strong&gt; everything in my walk with God, including my own personal devotions, my involvement in the life of the church, and my “ministry” actions in general&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;family:&lt;/strong&gt; both quantity and quality time spent with my wife and my quickly-growing-up little girls&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;personal:&lt;/strong&gt; podcasting, blogging, and writing for &lt;a href="http://mereorthodoxy.com/author/chris-krycho/"&gt;other outlets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;professional:&lt;/strong&gt; working in my new job and as a consultant, and carrying on toward the conclusion of my M. Div.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;health/fitness:&lt;/strong&gt; continuing to stay healthy, including eating well and continuing to stay fit by running and doing triathlon work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this list is intentionally &lt;em&gt;unordered&lt;/em&gt;.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; My spiritual life remains the highest priority, because if my walk with God falters, everything else will go amok. Beyond that, however, the amount of time and effort I invest in each category not only can but should vary over time. Family will broadly remain in the second of those slots, though there may be days or the occasional week where one of the other concerns &lt;em&gt;very temporarily&lt;/em&gt; takes a higher priority. The others will adjust relative to each other as need be: there will be times when school requires more, and so my own writing gets less time, and there will be times when I have more flexibility and so am able to devote more to those personal interests, and so on. The goal here is not the mythical notion of “balance” but rather faithfulness, which has some superficial similarities but ultimately &lt;a href="http://www.chriskrycho.com/2015/faithfulness.html"&gt;plays out rather differently&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m hoping, in light of those goals, to set annual, monthly, and daily goals in each of those categories. The daily goals should help me move toward the monthly goals, and the monthly goals toward the yearly goals. I only get to set one goal in each of those categories for each tier: at five goals, that’s already plenty! I hope that evaluating each day will help me be more focused and faithful, and that situating daily and monthly goals each in light of larger goals will help me actually accomplish those larger goals. We’ll see how it goes, of course. I’ll be back in a week or so with whatever goals I decide to make public in those categories, and again in a year with an evaluation rather like this one.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Under the covers, it’s literally an HTML unordered list.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="family"></category><category term="rust"></category><category term="podcasting"></category></entry><entry><title>Power and Mercy</title><link href="http://www.chriskrycho.com/2015/power-and-mercy.html" rel="alternate"></link><published>2015-12-09T12:30:00-05:00</published><updated>2015-12-09T12:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-12-09:/2015/power-and-mercy.html</id><summary type="html">Mark 5:1–20 shows us that Jesus is the kind of king we need: one who is both powerful and merciful.</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The Bible exposition class for which I prepared this sermon involves &lt;em&gt;writing&lt;/em&gt; but not &lt;em&gt;delivering&lt;/em&gt; a sermon. If, at some point in the future, I actually deliver this sermon (e.g. in my sermon delivery course next semester), I will update this post with a link to the audio and/or video.&lt;/i&gt;&lt;/p&gt;
&lt;section id="introduction" class="level2"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recent estimates suggest that the United States of America currently spends about three times as much money on our military as the next biggest military spender out there, China. In fact, if you add up the military spending of China, Russia, Saudi Arabia, France, Great Britain, India, and Germany, we still spend more. And remember, China’s and India’s populations are both over four times larger than ours. What’s more, corruption and graft notwithstanding, our military-industrial complex is incredibly advanced. It’s fair to say that America has the most powerful, best equipped, most effective military apparatus in the whole world.&lt;/p&gt;
&lt;p&gt;And yet. And yet, as a country, we are very afraid. All of that power can’t protect us from everything. And we are very feared. For all of America’s lofty ideals, we have made a mess of things pretty often. We’ve gotten it wrong. Having power, it turns out, isn’t enough. Having enough power matters, but so does having the right kind of power, and so does how you use that power.&lt;/p&gt;
&lt;p&gt;As we look at Mark 5:1–20, we’re going to see that play out. It’s not just having power that matters. It matters who has the power, and how they use it. Do they torment? Or do they show mercy?&lt;/p&gt;
&lt;p&gt;I’ll give you a hint: we want power coupled with mercy. You can see, if you look at verse 19, how this whole passage hinges on that. When all is said and done, the man in the middle of this story gets to go tell all his friends and neighbors how much the Lord had done for him—how powerful God is—and how the Lord had shown him mercy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="exposition" class="level2"&gt;
&lt;h2&gt;Exposition&lt;/h2&gt;
&lt;section id="context" class="level3"&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;So let’s see how Mark gets us there. As we come to our text, we read: “They came to the other side of the sea, to the country of the Gerasenes.”&lt;/p&gt;
&lt;p&gt;“The other side of the sea from what?” you might be asking. Well, from Galilee, where Jesus had been teaching. Back at the beginning of chapter 4, Mark tells us about a series of parables that Jesus taught about his new kingdom. And those parables particularly emphasized people’s response as his kingdom comes. Some reject it entirely; some look excited about it at first, but ultimately aren’t a part of it; and some, a few, &lt;em&gt;really are&lt;/em&gt; citizens of the new kingdom.&lt;/p&gt;
&lt;p&gt;Then, back in 4:35, Mark switched to a series of narratives—four stories. This is Mark’s basic strategy: tell us what Jesus said, and then show us what he did. Why? Well, because the parables weren’t just cryptic things Jesus said to confuse people; he was telling his disciples, the ones who had ears to hear, how things really were. Each thing Jesus &lt;em&gt;did&lt;/em&gt; showed that what he &lt;em&gt;said&lt;/em&gt; was true.&lt;/p&gt;
&lt;p&gt;His kingdom wasn’t coming the way people thought, or even to the people who thought it was for them. And he wasn’t the kind of king they had in mind, either. He had authority not just over nations and troops, but (as Mark shows us in these four stories), over the sea and the sky, over demons—that’s today’s passage—over incurable illness, even over death. And in each of these events, we see that Jesus wasn’t just a &lt;em&gt;powerful&lt;/em&gt; king. He was also a &lt;em&gt;merciful&lt;/em&gt; king.&lt;/p&gt;
&lt;p&gt;Now, within these four narratives, Mark breaks things down into two pairs of miracle stories which hang together: the storm and the demonized man, and the two healings back on the other side of the sea. Today, we find ourselves in the second half of that first pair. With the storm, the disciples could not save themselves, so Jesus rebuked the storm, and there was a great calm, and the disciples were afraid. We are going to see those same ideas here: someone who cannot save himself, Jesus rebuking something, a great calm as a result, and people being afraid. We will see Jesus’ power and mercy. And we will see a different response than fear—a better one.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="beat-1-a-wild-man-516" class="level3"&gt;
&lt;h3&gt;Beat 1: A wild man – 5:1–6&lt;/h3&gt;
&lt;p&gt;So let’s follow Mark on this journey. Verse 2 tells us that “when Jesus had stepped out of the boat, immediately there met him out of the tombs a man with an unclean spirit”. Verse 6 reiterates the point—“And when he saw Jesus from afar, he ran and fell down before him”—but first Mark wants us to know something about who this man was. Verses 3 through 5 tell us:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He lived among the tombs. And no one could bind him anymore, not even with a chain, for he had often been bound with shackles and chains, but he wrenched the chains apart, and he broke the shackles in pieces. No one had the strength to subdue him. Night and day among the tombs and on the mountains he was always crying out and cutting himself with stones.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, this was not a man in need of a little help, an appointment with a counselor. No, here we have a man enslaved. Nothing anyone could do would help him.&lt;/p&gt;
&lt;p&gt;What we have here is Mark establishing both the characters involved, and the “power curve” for the rest of the scene. If you’re reading a superhero comic or watching a superhero movie, you have a sense of how strong everyone is. And of course, this leads to all sorts of conundrums. Who would win in a fight? Next year’s &lt;em&gt;Batman vs. Superman: Dawn of Justice&lt;/em&gt; and &lt;em&gt;Captain America: Civil War&lt;/em&gt; both hinge on this. Who is stronger? Who will win? And of course, if you let the wrong characters in, the game just becomes pointless. I saw an interview with the writers behind &lt;em&gt;Captain America&lt;/em&gt;, where they explained why the Hulk wouldn’t be in the movie. You add in the Hulk, and it’s game over for the other team. There’s no tension in the conflict anymore. The Hulk just wins.&lt;/p&gt;
&lt;p&gt;And that’s basically the picture Mark shows us in this passage. It’s pretty clear: the demons were stronger. Nothing anyone could do was effective. They couldn’t even keep this man imprisoned; verse 4 has him acting like, well, like the Hulk. They tried chaining him up hand and foot; he just ripped the chains on his wrists off and smashed the fetters on his feet. “No one,” Mark says, “had the strength to subdue him.” Healing him was out of the question. And the man himself was clearly totally under the demons’ control. The “super-villains” had the upper hand.&lt;/p&gt;
&lt;p&gt;Now, the Hulk can be kind of fun to watch, but that’s not what we have here. They made a mockery of this man. We shouldn’t take that lightly. They made him run around screaming, naked, cutting himself, in the midst of the tombs. There is a reason Mark describes him as having an &lt;em&gt;unclean&lt;/em&gt; spirit. The demons were doing everything in their power—short of killing this man—to defile what God had called “very good” and what he had promised to redeem: his humanity.&lt;/p&gt;
&lt;p&gt;So there’s the power curve when Jesus arrives on the scene; there are the characters. As soon as Jesus gets off the boat, this man comes out to meet him. And then, perhaps surprisingly, given that power curve—but then again, maybe not &lt;em&gt;so&lt;/em&gt; surprising given what Jesus has already done in this gospel—verse 6 tells us that the man falls down at his knees before Jesus. He goes prostrate. Flat on his face. The way you would kneel before someone absolutely more powerful than you. Jesus’ arrival is clearly a change from the status quo.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="beat-2-a-merciful-act-5713" class="level3"&gt;
&lt;h3&gt;Beat 2: A merciful act – 5:7–13&lt;/h3&gt;
&lt;section id="setup" class="level4"&gt;
&lt;h4&gt;Setup&lt;/h4&gt;
&lt;p&gt;So Mark has set the scene for us: here is a man who has been tormented for who knows how long, and as soon Jesus steps off the boat, he man comes running up and throws himself down at Jesus’ feet. That’s quite the welcoming party. Put yourself in the disciples’ shoes for a moment. You’ve just seen Jesus go from sleeping in the back of a boat—in the middle of the kind of storm that scared the Galilean fishermen who are with you—to standing up and telling a storm to be quiet and it does. You’re afraid. And then you get to the other side, still more than a little in shock from that, and a naked man with cuts all over his body comes up to Jesus and throws himself at his feet and starts arguing with him, shouting at him. You might be afraid all over again. And for good reason. Notice that throughout the whole passage, the disciples are just onlookers. This is out of their league, too; so they just watch.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="beat-2a-jesus-power-5710" class="level4"&gt;
&lt;h4&gt;Beat 2a: Jesus’ power – 5:7–10&lt;/h4&gt;
&lt;p&gt;Dealing with the man and his impure spirit is not, however, out of Jesus’ league. Verses 7–10 make it very clear that Jesus is absolutely and unquestionably the most powerful person in this encounter.&lt;/p&gt;
&lt;p&gt;Notice, too, that the demonized man is arguing with Jesus because Jesus is arguing with him. Verses 7 and 8 tell us:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He shouted at the top of his voice, “What do you want with me, Jesus, Son of the Most High God? In God’s name don’t torture me!” For Jesus had said to him, “Come out of this man, you impure spirit!”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jesus picked this fight, and it’s not going to go down well for the demons.&lt;/p&gt;
&lt;p&gt;Now we know from ancient records that there were both Greek and Jewish exorcists who made it their business to drive out evil spirits. You will find the same in many non-Western cultures today, and—as an aside—I think those cultures probably have the right of it more than we do. It has been said that the greatest trick the devil ever pulled was convincing people he didn’t exist, and that seems about right. How can you possibly fight something you don’t even believe exists? It’s a brilliant, devious strategic move. You can pull the North Korea strategy—try to constantly rattle your saber to keep everyone afraid of you. Or you can act like an assassin: keep a low profile, and if possible don’t even let your would-be opponents know you exist, until you’ve killed them and caused mayhem. In the hyper-secular West, that seems to be the satanic strategy of the hour, and I think it’s fair to say it’s been reasonably successful for our enemy—even if we know from passages like this one that Jesus’ ultimate victory is guaranteed.&lt;/p&gt;
&lt;p&gt;That &lt;em&gt;wasn’t&lt;/em&gt; the strategy of the day back then, though. And we know from those old records that the general strategy for dealing with demons was to try to use powerful command words and phrases, or to negotiate and bargain, or to use the demon’s name to get spiritual power over them, or to try to use other divine powers to bind them.&lt;/p&gt;
&lt;p&gt;But we don’t see any of that in this passage. The demons recognize Jesus’ power and authority right away. You can see it there in verse 7: as soon as Jesus tells them to leave, they plead with him not to torment them. And you don’t plead with someone not to torment you unless they &lt;em&gt;can&lt;/em&gt; torment you. By the time Jesus asks for a name in verse 9, the demons have already acknowledged Jesus’ power and authority in the situation. What’s more, they call him “Son of the Most High God” there in verse 7. Now, this title does double duty here.&lt;/p&gt;
&lt;p&gt;First, it is another confirmation of Mark’s claim throughout his gospel: that Jesus is in fact the Son of God. And significantly, the early confessions to that effect all come on the lips of demons he exorcises. The spiritual forces know spiritual authority when they see it, even if the people don’t see it yet. So confirming that Jesus is “the Son of God” is the first thing this does.&lt;/p&gt;
&lt;p&gt;The second thing it does is establish that Jesus isn’t just another player in the spiritual game. Whatever other gods someone might worship, and whatever other claims to divine power someone might offer up, Jesus trumps them all. He is the son not just of &lt;em&gt;some&lt;/em&gt; god, but of &lt;em&gt;the Most High God&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The fact that there is a legion of demons, as they admit in verse 9, simply heightens the contrast. We knew already that the “impure spirit” was able to torment the man; now we know that it is &lt;em&gt;many&lt;/em&gt; demons. It doesn’t matter. They’re still reduced to begging and pleading with him: verse 10 tells us that the man—really, the spirits speaking through him—“begged Jesus again and again not to send them out of the area.”&lt;/p&gt;
&lt;p&gt;Again, the power curve: Jesus’ authority isn’t even in the same ballpark as anyone else in the story—not the demonized man, not the people who were unable to help him or even restrain him, not the silent disciples, and not even the multitude of demons. He exceeds them all.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="beat-2b-jesus-focus-51113" class="level4"&gt;
&lt;h4&gt;Beat 2b: Jesus’ focus – 5:11–13&lt;/h4&gt;
&lt;p&gt;Jesus’ power is only part of the story, though. As we come into vv. 11–13, we can see his &lt;em&gt;focus&lt;/em&gt; as well. And that focus is healing a man in need. Read with me, starting in verse 11:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A large herd of pigs was feeding on the nearby hillside. The demons begged Jesus, “Send us among the pigs; allow us to go into them.” He gave them permission, and the impure spirits came out and went into the pigs. The herd, about two thousand in number, rushed down the steep bank into the lake and were drowned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, this confirms what we already know: they &lt;em&gt;need&lt;/em&gt; Jesus’ permission. He is in charge. But, second, it also tells us that between the man and the pigs, there wasn’t a contest for Jesus. Not because he didn’t care about pigs. We know from Colossians 1 that the eternal Son of God—who Mark is taking this whole book to tell us about—is the agent of God’s creation of the whole universe; and his powerful word is the reason that the whole universe keeps existing, pigs included. Pigs were part of what he called a “good” creation in Genesis 1. Speaking as a lover of bacon myself, I’m inclined to agree with God’s assessment: pigs are good.&lt;/p&gt;
&lt;p&gt;But, and this is important: people are more important than pigs. You can find any number of modern commentators on this passage asking about the ethical implications of Jesus’ letting the demons destroy the pigs along with themselves in this way. Neither Mark nor Luke or Matthew seem bothered by this point. Neither does Jesus. Pigs matter. Pigs are good. But they don’t matter like people do. And while it is not clear from this passage why Jesus accepted the demons’ request, what is clear is that his mercy toward this man—his compassion on him—trumped any concern for the pigs. Jesus’ focus was healing and saving people. Here, we see clearly that his powerful word is not just for creation, but also for &lt;em&gt;salvation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This tells us something about Jesus’ power and authority. It is &lt;em&gt;good&lt;/em&gt; power and authority. He is &lt;em&gt;merciful&lt;/em&gt;. And it is so important—&lt;em&gt;extraordinarily&lt;/em&gt; important—that the Son of the Most High God, the king bringing in his kingdom, be merciful. Because as Ephesians 2 tells us, before God intervenes in our lives, we’re all like this man was. We start off dead in our sins, slaves to our lusts and every desire gone wrong and totally unchecked, in the domain of darkness, following the prince of the power of the air, the spirit now at work in the children of disobedience. The demons, in other words. And then Jesus steps in. As the rightful king, he has the power to free us… and he’s a &lt;em&gt;merciful&lt;/em&gt; king, so he &lt;em&gt;does&lt;/em&gt; free us. That’s good news. That’s gospel.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="beat-3-a-fearful-crowd-51417" class="level3"&gt;
&lt;h3&gt;Beat 3: A fearful crowd – 5:14–17&lt;/h3&gt;
&lt;p&gt;Of course, it doesn’t always &lt;em&gt;look&lt;/em&gt; like good news to everyone when Jesus shows up and starts healing people. Remember, Mark is showing us the truth of those parables from back in chapter 4. So we see here the good king who is bringing in his kingdom—in secret now, but someday in glorious light—but we also see those different kinds of soil from the parable of the sower and the seed: some fruitful, some &lt;em&gt;not&lt;/em&gt; fruitful.&lt;/p&gt;
&lt;p&gt;Look at what happens in verses 14 through 17:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Those tending the pigs ran off and reported this in the town and countryside, and the people went out to see what had happened. When they came to Jesus, they saw the man who had been possessed by the legion of demons, sitting there, dressed and in his right mind; and they were afraid. Those who had seen it told the people what had happened to the demon-possessed man—and told about the pigs as well. Then the people began to plead with Jesus to leave their region.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can imagine being one of the herdsmen, seeing the pigs drowned by demons, and being frightened—and maybe they were. But that’s not what Mark says. That’s not why these people were afraid. They were afraid because they saw this man who had been naked, clothed; who had been running and screaming, sitting calmly; who had been out of his mind, now in his right mind. &lt;em&gt;That&lt;/em&gt; was what made them afraid.&lt;/p&gt;
&lt;p&gt;Mark has created a sharp contrast here: between this scene and the one that preceded it, the calming of the storm.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In both scenes, we see Jesus confronting something far more powerful than ordinary humans can handle: in the first, a terrible storm; in the second, a legion of demons.&lt;/li&gt;
&lt;li&gt;In both scenes, we see him exercise his powerful word for mercy: in the first, to save his disciples from the storm; in the second, to save this man from the demons who tormented him.&lt;/li&gt;
&lt;li&gt;In both scenes, we see the tumult of a broken world, and then calm and peace after Jesus acts.&lt;/li&gt;
&lt;li&gt;And in both scenes, we see people who are afraid after Jesus acts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But there seems to be more than one way to be “afraid” when you see the power of God’s Spirit on display in the person of Jesus Christ. You can be afraid and still want to be with him, like the disciples. Or you can be afraid like these people were—they wanted him to leave.&lt;/p&gt;
&lt;p&gt;Clearly, one of these is better than the other. Far better to be with Jesus even if his power is more than you can handle—even if you find that the Son of God is not at all safe. Because he &lt;em&gt;is&lt;/em&gt; good.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="beat-4-an-effective-commission-51820" class="level3"&gt;
&lt;h3&gt;Beat 4: An effective commission – 5:18–20&lt;/h3&gt;
&lt;p&gt;But Mark wants to take us even further than the disciples’ example. He wants us to see that we do not need to be afraid. Because Jesus’ &lt;em&gt;power&lt;/em&gt; is expressed in &lt;em&gt;mercy&lt;/em&gt; to his people. The disciples didn’t really understand who Jesus was yet, didn’t really grasp either his power or his mercy yet, but someone surprising in this story does: an unclean Gentile man who had been tortured by demons. The man Jesus healed. The one to whom he so very powerfully showed mercy. Look! Verse 18:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As Jesus was getting into the boat, the man who had been demon-possessed begged to go with him.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He begged! He is the third person to beg or plead in this story. The demons begged not to be destroyed yet—and Jesus surprisingly showed them mercy in that. The people pleaded with Jesus to leave—and Jesus surprisingly showed them mercy in that. And here—at last!—someone begs for the &lt;em&gt;right&lt;/em&gt; thing: to be with Jesus. The same phrase as when Jesus called the disciples to be with him. And Jesus surprisingly… shows mercy by saying &lt;em&gt;no&lt;/em&gt; to him. Verses 19 and 20:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jesus did not let him, but said, “Go home to your own people and tell them how much the Lord has done for you, and how he has had mercy on you.” So the man went away and began to tell in the Decapolis how much Jesus had done for him. And all the people were amazed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“Go home to your own people”, verse 19 says—some translations say “to your friends”—“and tell them how much the Lord has done for you, and how he has mercy on you.” Precisely &lt;em&gt;because&lt;/em&gt; this man understood Jesus great power and his great mercy, he had somewhere to be that wasn’t &lt;em&gt;with Jesus&lt;/em&gt; yet. He knew how great God’s power was, and he knew how deep God’s mercy was. So Jesus gave him a commission, and it looks familiar: go tell the nations what God has done. The nations: this is a Gentile, not a Jew; he is in the Decapolis, Gentile country, not Jewish country. “Go tell them about God’s mercy,” Jesus says to him. Because the mercy of God is not just for the Jews. Jesus was not going to be a petty little messiah, king of a corner of Palestine. God’s mercy was for the healing of the nations. And here we see the first taste of that in Mark—because what happened? “…all the people were amazed.”&lt;/p&gt;
&lt;p&gt;Mark doesn’t tell us here what came of this, what the fruit was. We don’t know how many of those who were amazed were just apparently fruitful soil, where the seed sprung up and soon withered. But it is clear that there was at least &lt;em&gt;one&lt;/em&gt; who was good soil. And if Jesus’ ministry in the Decapolis in chapter 7 is any indication, it seems the Spirit may well have been using this man’s seed-sowing to prepare a great harvest some day.&lt;/p&gt;
&lt;p&gt;One more thing to see here: a detail, but not a little thing. Unlike the disciples, who hadn’t &lt;em&gt;gotten it&lt;/em&gt; yet—this man proclaimed &lt;em&gt;exactly&lt;/em&gt; what he should have. Notice, Jesus tells him to say what “the Lord” had done for him. From a Jew, including Jesus, that meant “Yahweh,” the God of Israel. And in verse 20, “the man went away and began to tell… how much &lt;em&gt;Jesus&lt;/em&gt; had done for him.” And rightly so. The mercy of Yahweh, the God of Israel, is the mercy of Jesus, the Son of the &lt;em&gt;Most High God&lt;/em&gt;—the God over every pagan deity, over every demonic power, over every human heart, over &lt;em&gt;all&lt;/em&gt; nations.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summation" class="level2"&gt;
&lt;h2&gt;Summation&lt;/h2&gt;
&lt;p&gt;A few years ago, John Piper was preaching a missions sermon, and he started with Mark 5:19. You can see why. It’s the heart of the gospel. And Piper summed up the heart of the gospel this way:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;God sent his Son into the world to save sinners from every nation so that they would glorify him for his mercy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that’s right. This whole narrative is a microcosm, a little picture, of the gospel, and of the right response to the gospel. Here we have a story of a Gentile man—one of the nations, not a Jew—who was literally enslaved by the powers of hell, set free by Jesus. But not just set free; set free and given a commission. Look there at verse 19 again: “Go home to your friends and tell them how much the Lord has done for you, and how he has had mercy on you.” That commission tells us what this story is about. And the center of that commission is the center of Mark’s gospel. And in fact, it’s the center of the whole Bible. It’s the center of this &lt;em&gt;great&lt;/em&gt; story we are all part of. God’s power, expressed in mercy, to save people from every nation through Jesus Christ.&lt;/p&gt;
&lt;p&gt;Look how much he has done for us &lt;em&gt;because of that mercy&lt;/em&gt;! He saves people like you and me, people from every nation who can’t save themselves, and he invites them into his kingdom, and he gives them a mission.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="invitation" class="level2"&gt;
&lt;h2&gt;Invitation&lt;/h2&gt;
&lt;p&gt;Which is to say, he gives &lt;em&gt;us&lt;/em&gt; a mission. If you are a Christian in this room—if you have said to Jesus, “Let me be with you”—then he has said to you, “Go and tell your friends how much the Lord has done for you and how he has shown mercy to you.” Every one of us should want others to know how God has saved us. If you aren’t doing that, I challenge you: tell the people around you! Tell your friends, your coworkers, your family members. If that’s hard for you—and I understand; it can be—then think back on your salvation. Think about how God has shown mercy to you. Pray for the Spirit to stir you up, to deepen your love for him and your joy in what he has done, so that your telling others isn’t out of guilt, but out of excitement. That’s a prayer he delights to answer.&lt;/p&gt;
&lt;p&gt;And friend, if you are in this room and you are &lt;em&gt;not&lt;/em&gt; in the kingdom? We have a good king, who offers you a pardon for your rebellion. You can be a citizen with us; we were all rebels, too. Come to him. Ask to be with him. Join us as we follow him. He has shown us mercy; he will show you mercy, too. All you have to do is surrender. Lay down your weapons. Ask for mercy. And call him Lord. If that’s you, please: let us walk with you. Come talk with us before you leave.&lt;/p&gt;
&lt;p&gt;Let’s pray. Let’s pray to our powerful, merciful God.&lt;/p&gt;
&lt;/section&gt;
</content><category term="SEBTS"></category><category term="M. Div."></category><category term="sermons"></category></entry><entry><title>Rust and Swift (x)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-x.html" rel="alternate"></link><published>2015-12-06T11:25:00-05:00</published><updated>2015-12-22T13:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-12-06:/2015/rust-and-swift-x.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Swift and Rust both have “product types” as well as the &lt;code&gt;enum&lt;/code&gt; “sum types.” In Rust, these are &lt;code&gt;struct&lt;/code&gt; types; Swift splits them into &lt;code&gt;class&lt;/code&gt;es and &lt;code&gt;struct&lt;/code&gt;s.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Product types” will be much more familiar to programmers coming from a C-like background, or indeed most object-oriented programming languages: these are the same basic kind of thing as classes, structs, and objects in other languages. These include &lt;em&gt;all&lt;/em&gt; the value types which compose them, unlike sum types—&lt;code&gt;enum&lt;/code&gt;—which have &lt;em&gt;only one&lt;/em&gt; of the value types which compose them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Right off the bat, I note the Swift book’s somewhat amusing reticence to call out C and C-descended languages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike other programming languages, Swift does not require you to create separate interface and implementation files for custom classes and structures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because there’s such a long list of languages not directly descended from C which do that, right? 😉&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust differs not only from Swift but from every other modern language I have used in not having a constructor &lt;em&gt;syntax&lt;/em&gt; for its instantiations. Whereas C++ has &lt;code&gt;new NameOfType()&lt;/code&gt; and Python and Swift both have &lt;code&gt;NameOfType()&lt;/code&gt;, “constructors” for Rust &lt;code&gt;struct&lt;/code&gt;s are just functions which return an instance constructed using literal syntax, by convention &lt;code&gt;NameOfType::new()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let’s make a &lt;code&gt;struct&lt;/code&gt; defining a location in a plane, you might do this in Swift (leaving aside initializer values; I’ll come back to those later). These definitions look &lt;em&gt;very&lt;/em&gt; similar. Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Point {
    var x: Double var y: Double
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;struct Point {
    x: f64,
    y: f64,
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating the types looks a little different, though. Here’s a constructor in Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;let point = Point(x: 0, y: 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the two ways we could construct the type in Rust, a literal constructor (fairly similar to constructing &lt;code&gt;dict&lt;/code&gt; literals in Python or object literals in JavaScript):&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let point = Point { x: 0.0, y: 0.0 };&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or a constructor method, &lt;code&gt;new&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;// &amp;quot;Constructor&amp;quot;
impl Point {
    fn new(x: f64, y: f64) -&amp;gt; Point {
        Point { x: x, y: y }
    }
}

let another_point = Point::new(0, 0);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Observe: these two things in Rust are the same under the covers (though if &lt;code&gt;Point&lt;/code&gt;s had non-public internals, they would be non-trivially different: you couldn’t construct it with its private members externally). As usual, Rust opts to keep the language relatively small in these core areas. Given the plethora of ways you can construct something in e.g. C++, I count that a big win.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another difference: Swift has &lt;em&gt;syntax&lt;/em&gt; for default values; Rust uses a &lt;code&gt;trait&lt;/code&gt; instead. In Swift, you simply supply the default value in the definition of the &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct Point {
    var x = 0.0 var y = 0.0
}

let point = Point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, you use &lt;code&gt;std::default::Default&lt;/code&gt;, which provides a standard value for a given type, and for simple types can be supplied by the compiler even for custom types. Here is the equivalent Rust code:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use std::default::Default;

#[derive(Default)]
struct Point {
    x: f64,
    y: f64,
}

let point = Point::default();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is reasonable enough, but we can also supply our own custom implementation if we so desire:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;use std::default::Default;

struct Point {
    x: f64,
    y: f64,
}

impl Default for Point {
    fn default() -&amp;gt; Point {
        Point { x: 0.0, y: 0.0 }
    }
}

let point = Point::default();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, this is trivial for this type, but you can see how it could be useful for more complex types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The tradeoffs here are our usual suspects: Rust’s re-use of an existing concept/tool within the language (&lt;code&gt;trait&lt;/code&gt;) vs. Swift’s use of syntax. Rust is slightly more explicit, making it obvious that a default value is being created—but Swift is perfectly readable and the syntax is consistent with many other languages, and it &lt;em&gt;is&lt;/em&gt; shorter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages use &lt;code&gt;.&lt;/code&gt; syntax for member access. Swift:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;println(&amp;quot;The point is: \(point.x), \(point.y)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;println!(&amp;quot;The point is {:}, {:}&amp;quot;, point.x, point.y);&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift lets you define items &lt;em&gt;within&lt;/em&gt; a struct as mutable or constant. So you can create a variable struct instance, with some of its items immutable:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;struct PointOnZAxis {
    var x: Double var y: Double let z = 0.0
}

var point = PointOnZAxis(x: 4.0, 5.0)
point.x = 5.0 point.y = 6.0
// This wouldn&amp;#39;t compile, though:
// point.z = 1.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is pretty handy for a lot of object-oriented programming approaches.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And Rust doesn’t have it. There are ways to accomplish the same thing; this isn’t the end of the world. Still, it’s an interesting omission, and it’s very much by design. Rust &lt;em&gt;used&lt;/em&gt; to have this feature, and dropped it—and for good reason. Say you had a mutable field in a mutable struct, and then an immutable reference to it; should the mutable field be mutable, or immutable, with that reference?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Rusty way to do this is to differentiate between public and private data. The above examples don’t make the public/private distinction particularly clear, because they assume everything is within the same module. However, many times, this will not be the case.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;mod geometry {
    pub struct Point {
        x: f64,
        pub y: f64,
    }

    impl Point {
        pub fn new() -&amp;gt; Point {
            Point { x: 0.0, y: 0.0 }
        }

        pub fn set_x(&amp;amp;mut self, x: f64) {
            self.x = x;
        }
    }
}

fn main() {
    // Won&amp;#39;t compile: the `x` field is private.
    // let mut p = geometry::Point { x: 0.0, y: 0.0 };

    // Will compile: the `new` method is public.
    let mut p = geometry::Point::new();

    // Won&amp;#39;t compile: `x` isn&amp;#39;t public.
    // p.x = 4.0;
    // You can use the setter, though:
    p.set_x(4.0);

    // You *can* set `y` directly, though, because it&amp;#39;s public.
    p.y = 14.0;

    // You can&amp;#39;t set fields either way if the instance is immutable.
    let q = geometry::Point::new();

    // This fails because `set_x` requires a mutable reference, but `q` is
    // immutable.
    // q.set_x(4.0);

    // This fails because `q` is immutable, and so all its fields are, too.
    // q.y = 14.0;
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is an interesting way of handling this issue. Rust takes the fairly standard use of information hiding (one of the basic principles of most object-oriented programming techniques) and combines it with the language’s normal mutability rules to make it so that the mutability of any given instance data is quite clear: all public members are just as mutable as the struct. If a member isn’t potentially publicly mutable, it isn’t publicly accessible. I really like this, though it took some mental readjustment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s one other difference here, and it’s actually one of the areas Swift and Rust diverge substantially. Rust has &lt;code&gt;struct&lt;/code&gt; for all product types; Swift splits them into &lt;code&gt;struct&lt;/code&gt; types and &lt;code&gt;class&lt;/code&gt; types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift &lt;code&gt;class&lt;/code&gt;es have inheritance; there is presently &lt;em&gt;no&lt;/em&gt; inheritance in Rust.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, whereas Rust determines whether to use pass-by-reference or-value depending on details of the type (whether it implements the &lt;code&gt;Copy&lt;/code&gt; &lt;code&gt;trait&lt;/code&gt;) and expected arguments to a function, Swift makes that distinction between &lt;code&gt;class&lt;/code&gt; (pass-by-reference) and &lt;code&gt;struct&lt;/code&gt; (pass-by-value) types. Quirky.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not bad, &lt;em&gt;per se&lt;/em&gt;. But quirky.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I recently bumped into some discussion of data types in C♯ along with C, C++, and Java (&lt;a href="http://joeduffyblog.com/2015/12/19/safe-native-code/"&gt;here&lt;/a&gt;) and discovered that Swift is stealing this idea from C♯, which &lt;a href="https://msdn.microsoft.com/en-us/library/0taef578.aspx"&gt;makes the same copy/reference distinction&lt;/a&gt; between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One consequence of this: in Rust, you’re always rather explicit about whether you’re accessing things by value vs. by reference. Not so in Swift; you have to remember whether the item you’re touching is a &lt;code&gt;struct&lt;/code&gt; type or a &lt;code&gt;class&lt;/code&gt; type, so that you can &lt;em&gt;remember&lt;/em&gt; whether a given assignment or function call results in a reference or a copy. This is necessary because Swift doesn’t let you make that explicit (trying to hide the memory management from you). And it’s not alone in that, of course; many other high-level languages obscure that for convenience but still require you to think about it in certain circumstances. I’ve been bitten in the past by the value/reference distinction when thinking through the behavior of Python objects, for example, so that’s not a critique of Swift. Moreover, having the distinction between &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; types does let you be &lt;em&gt;more&lt;/em&gt; explicit than you might in e.g. Python about how given data will be handled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I won’t lie, though: I like Rust’s approach better. (Shocking, I know.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All that nice initializer syntax for Swift &lt;code&gt;struct&lt;/code&gt; types is absent for its &lt;code&gt;class&lt;/code&gt; types, which seems strange to me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift supplies some syntax for object identity, since it’s useful to know not only whether two &lt;code&gt;class&lt;/code&gt; instances have the same data, but are in fact the same instance. You can use &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt;. Handy enough. To get at this kind of equivalence in Rust, you have to use raw pointers (which are often but not always &lt;code&gt;unsafe&lt;/code&gt;; you can do this specific comparison &lt;em&gt;without&lt;/em&gt; being &lt;code&gt;unsafe&lt;/code&gt;, for example) to check whether the memory addresses are the same.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ix.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Sum types (&lt;code&gt;enum&lt;/code&gt;s) and more on pattern matching.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2016/rust-and-swift-xi.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Hopes for the next generation of systems programming.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="listicles"></category><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>An Apology and a Hermeneutic</title><link href="http://www.chriskrycho.com/2015/an-apology-and-a-hermeneutic.html" rel="alternate"></link><published>2015-12-01T09:00:00-05:00</published><updated>2015-12-01T09:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-12-01:/2015/an-apology-and-a-hermeneutic.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Jesus and the Victory of God: Christian Origins and the Question of God, Volume Two&lt;/em&gt;, by N. T. Wright, Minneapolis: Fortress, 1996, 741 pages. Reviewed by Christopher Krycho.&lt;/p&gt;
&lt;section id="introduction" class="level2"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Few books can claim to represent a substantive entry in both apologetics and hermeneutics, yet this is precisely what N. T …&lt;/p&gt;&lt;/section&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Jesus and the Victory of God: Christian Origins and the Question of God, Volume Two&lt;/em&gt;, by N. T. Wright, Minneapolis: Fortress, 1996, 741 pages. Reviewed by Christopher Krycho.&lt;/p&gt;
&lt;section id="introduction" class="level2"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Few books can claim to represent a substantive entry in both apologetics and hermeneutics, yet this is precisely what N. T. Wright’s &lt;em&gt;Jesus and the Victory of God&lt;/em&gt; accomplishes. In this book, the second in Wright’s massive work on Christians origins,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; he treats the question of the historical Jesus via a thorough survey of the modern history of interpretation and the contents of the synoptic gospels themselves. The result is a telling well within historic Christian orthodoxy, though often at sharp angles to current historical approaches to Jesus. Along the way, he also marks out a fruitful interpretive path for Christians reading the gospels. The picture he paints of Jesus—a first-century prophet-Messiah who saw himself standing at the capstone of Israel’s history, fulfilling Yahweh’s plans for his people, but in a way no one in his day seemed to expect—is both apologetically compelling and spiritually illuminating.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="overview" class="level2"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Wright begins with an introduction designed to orient the reader to the basic challenges confronting any would-be interpreter of Jesus in the modern era. Critical issues abound, and it is impossible to return to a pre-critical reading of the text. But though the historian must deal with any number of problems in interpreting the person of Jesus, these problems are not specific to him; they are endemic to the task of history.&lt;/p&gt;
&lt;p&gt;Wright therefore begins by establishing his criteria for evaluating interpretations of Jesus’ person and program. Any such theory must account for the transition from Judaism to Christianity; it must therefore present Jesus, the lynchpin of that transformation, as not only &lt;em&gt;dissimilar&lt;/em&gt; to both worldviews, but also &lt;em&gt;similar&lt;/em&gt; to both (132). Jesus must have made sense to his Jewish contemporaries, but also profoundly theologically innovative, to create an entirely new community with its own theology and practice. Wright argues Jesus accomplished this via a program in which “[the] symbolic world of first-century Judaism has been rethought from top to bottom, even while its underlying theology (monotheism, election, and eschatology) has been retained” (218)—with Jesus himself at the center of the plan of Israel’s god, uniquely embodying a father-son relationship with &lt;span class="divine-name tetragrammaton"&gt;YHWH&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;He argues this thesis in two major parts, one focusing on the work and teachings of Jesus as a messianic prophet, the other focusing on the Jesus’ aims and beliefs as he carried out his program. Along the way, Wright examines a wide and representative sample of Jesus’ reported deeds and teachings. In each case, the data fits the thesis: Jesus was retelling Israel’s story in a new way, with himself at the center of God’s plan to end his people’s long exile. By the end of the volume, Wright can thus conclude:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Jesus] believed himself called, by Israel’s god, to &lt;em&gt;evoke&lt;/em&gt; the traditions which promised &lt;span class="divine-name tetragrammaton"&gt;YHWH&lt;/span&gt;’s return to Zion, and the somewhat more nebulous but still important traditions which spoke of a human figure sharing the divine throne; to &lt;em&gt;enact&lt;/em&gt; those traditions in his own journey to Jerusalem, his messianic act in the Temple, and his death at the hands of the pagans (in the hope of subsequent vindication); and thereby to &lt;em&gt;embody&lt;/em&gt; &lt;span class="divine-name tetragrammaton"&gt;YHWH&lt;/span&gt;’s return. (651)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is not a simple restatement of typical Christian belief, though of course it accords with it. It goes further, making sense of Jesus’ words and deeds in a way that meets Wright’s criterion of double dissimilarity and double similarity. The thesis passes the test.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="assessment" class="level2"&gt;
&lt;h2&gt;Assessment&lt;/h2&gt;
&lt;p&gt;Wright’s volume has much to commend it: its historical method, its thoroughness, its broad engagement with opposing views, even its style. Its most significant contributions, though, fall under two basic headings: a challenge to many modern (atheological or even anti-theological) re-readings of the gospels, and a challenge to many current evangelical interpretation of the gospels. Both of these are successful in large measure because of Wright’s care (and flare) in dealing with the material and with other (contrary) treatments of the same data, but it is Wright’s ability to build cogent arguments with that material on this scale which makes this more than a tedious summary of data.&lt;/p&gt;
&lt;p&gt;Against secular, demythologizing, and materialist interpretations of the text, Wright mounts a serious and substantive case for a traditional (though not uncritical) assessment of the historical reliability of the synoptics and their picture of Jesus. Many critics suppose that the picture of Jesus painted by the gospellers must be anachronistic, ideologically-driven or situationally-motivated, or inflated by faith in contradistinction to history. Such readings of Jesus paint him as any variety of figures: a sadly-mistaken apocalyptic prophet; a Stoic philosopher in first century garb; a preacher of progressive ideas of love and tolerance; the author of a new, non-Jewish religion; a preacher of Jewish (or timeless) verities. One suspects, with Wright, that many of these readings find their source not in the text but in the prejudices or preferences of the commentators. Wright’s argument, by contrast, is far more credible than any of these—and not simply because it aligns with the historic confession of Jesus as Messiah and Lord. Rather, his picture of a distinctly Jewish apocalyptic prophet makes the best sense of the actual evidence from the earliest texts, including not only the synoptic gospels but also the early epistles and even the non-canonical literature like the Gospel of Thomas.&lt;/p&gt;
&lt;p&gt;The second major value of the book is its (usually, but not always, quiet) challenge to many &lt;em&gt;Christian&lt;/em&gt; readings of the gospels. Wright accurately notes that many Christian interpreters, perhaps especially in the Protestant tradition, have struggled to make sense of the gospels. Many evangelical readings of the gospels find little or no connection between what Jesus said and did and his crucifixion and resurrection. Indeed, no few of the commentaries this author has read sturggle to make much of the Pharisees’ and Sadducees’ mutual hostility toward Jesus without reducing them to caricatures, or to make sense of many of the parables or their role in Jesus’ ministry. The interpretation Wright proposes accounts for all these issues, and provides a helpful hermeneutic for untangling many of the otherwise perplexing passages in the gospels.&lt;/p&gt;
&lt;p&gt;Wright’s work thus walks a helpful middle ground between misinterpretations on either side. Anachronistic tendencies among both secular and Christians interpreters lead both astray. He was not a modern progressive, nor an unfortunately mistaken apocalyptic street preacher, nor a teller of timeless ethical truths, nor a preacher of a new religion of grace oddly disconnected from Judaism. Rather, he was a Jewish prophet going about the business of offering a subversive interpretation—though one deeply in touch with the Law and Prophets—of &lt;span class="divine-name tetragrammaton"&gt;YHWH&lt;/span&gt;’s promises to his. This is unsurprising. After all, this is precisely how the gospels present Jesus: dissimilar in certain ways from both the Judaism that preceded him and the Christianity that followed him (again: Wright’s criteria of double dissimilarity). Any telling of the historical Jesus must provide an explanation for the transition from Second Temple Judaism to Christianity, and do so on historically plausible grounds. So must any right interpretation of the gospels for Christian piety. Wright’s theory accomplishes this handily.&lt;/p&gt;
&lt;p&gt;Perhaps even more important is the way in which Wright’s work strikes at a kind of nascent docetism among many Christians. While Jesus’ full humanity may be an article of faith for orthodox believers, many fail to think of what exactly that means. Jesus was not merely as a divine mystery speaking timeless truths and then fulfilling a cruciform commission strangely disconnected from his parable-telling, paralytic-healing ministry. Rather, he was a &lt;em&gt;man&lt;/em&gt; standing at the conclusion the line of Jewish men who had called Israel back to faithfulness and proclaimed that Israel’s God was about saving the whole world. Not only does Wright have a Chalcedonian Christology, he is &lt;em&gt;more&lt;/em&gt; orthodox than many believers: the Jesus painted in this portrait is no less human than divine. Jesus’ sense of vocation, his real temptations and struggles to fulfill that vocation, and even his not-rare, but unconventionally-embodied, claim to Messiahship were the actions of a first-century Jewish &lt;em&gt;man&lt;/em&gt;. To see this clearly is to see exactly what the Fathers meant in their confession of “our Lord Jesus Christ, the same perfect in Godhead and manhood, truly God and truly man… consubstantial with us according to the Manhood, in all things like unto us, without sin…”&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; To miss it is to risk missing the humanity of Christ in all its glory.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="application-and-conclusion" class="level2"&gt;
&lt;h2&gt;Application and Conclusion&lt;/h2&gt;
&lt;p&gt;Wright’s work is to be commended on a number of levels. Its scholarly depth makes it a formidable resource when discussing the historical Jesus, particularly with those who reject the gospels’ claims to present Jesus accurately. Wright’s enjoyable wit makes the length of the work far more manageable. His proposed hermeneutic, though it can be pressed too far, provides a helpful tool for interpreting the synoptics. Most of all, his reminder of the real and true humanity of Jesus is a sharp rejoinder to the functional docetism all too common in evangelicalism. The book is therefore very helpful for both apologetics and exegesis. Whatever their other differences with Wright, pastors and teachers would do well to digest Wright’s work here.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;&lt;em&gt;The New Testament and the People of God&lt;/em&gt;; &lt;em&gt;Jesus and the Victory of God&lt;/em&gt;; &lt;em&gt;The Resurrection of the Son of God&lt;/em&gt;; and &lt;em&gt;Paul and the Faithfulness of God&lt;/em&gt; (in two volumes).&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;The Chalcedonian Definition.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="papers"></category><category term="book reviews"></category></entry><entry><title>How I Became a (Relatively) Quick Runner</title><link href="http://www.chriskrycho.com/2015/how-i-became-a-relatively-quick-runner.html" rel="alternate"></link><published>2015-11-22T11:00:00-05:00</published><updated>2015-11-22T11:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-11-22:/2015/how-i-became-a-relatively-quick-runner.html</id><summary type="html">&lt;p&gt;A few weeks ago, I ran the &lt;a href="http://cityofoaksmarathon.com"&gt;City of Oaks&lt;/a&gt; half marathon event for the third consecutive year. I finished at 1:24:58, which comes out to be about a 6:29/mile pace. I finished 20th overall, out of thousands of half-marathoners. If that seems fast to you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few weeks ago, I ran the &lt;a href="http://cityofoaksmarathon.com"&gt;City of Oaks&lt;/a&gt; half marathon event for the third consecutive year. I finished at 1:24:58, which comes out to be about a 6:29/mile pace. I finished 20th overall, out of thousands of half-marathoners. If that seems fast to you, well, it seems fast to me, too.&lt;/p&gt;
&lt;p&gt;People often ask me how I run so far and so quickly. I always laugh when they ask, because for my part, I haven’t thought of myself as particularly fast—the guys who finished first in my race this year ran over a minute per mile faster than me.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The best half-marathoners in the world are running a 4:30/mile pace! But I grant that a 6:29/mile pace is, in the grand scheme of things, pretty quick.&lt;/p&gt;
&lt;p&gt;That leads me to the &lt;em&gt;other&lt;/em&gt; reason I don’t tend to think of myself as fast: my training approach.&lt;/p&gt;
&lt;p&gt;My half marathon times have always been pretty good,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; but it is &lt;em&gt;not&lt;/em&gt; because I am particularly athletic. As I mentioned in &lt;a href="/2015/how-i-became-a-runner.html"&gt;my first post&lt;/a&gt; in this series: you can ask my high school football coaches. I was never particularly quick, and even now my best mile time is somewhere around 5:30. I knew people even in high school who were in the mid- to low-4:00 range. Still, going sub-6:30 for 13 miles is no joke, and if you had told me even five years ago—after I started running!—that someday I would run the race I did a few weeks ago, I’d have laughed in disbelief.&lt;/p&gt;
&lt;p&gt;But it really is all in the training. I have two things going for me, and only two: I train &lt;em&gt;smart&lt;/em&gt;, and I train &lt;em&gt;consistently&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Consistency first: year-round, I am doing some sort of workout six days a week. Throughout the winter and spring, that will look like a mix of running, spin classes at the gym, and swimming as I prep for another triathlon. From now till the end of January or so, I’ll just do pretty much whatever I feel like in that mix, while keeping at it. From February till whatever point early next summer that my triathlon is, I’ll dedicate two workouts a week to each of the sports. Then I’ll slowly transition to nearly-all running. Through the fall, I will run 5–6 days a week, cycling for a commute when weather permits one of those days instead.&lt;/p&gt;
&lt;p&gt;That right there is the single biggest factor in my performance. If &lt;em&gt;anyone&lt;/em&gt; did 30–45 minutes a day four days a week, an hour one day a week, and ninety minutes to two hours another day a week, he would get quicker rapidly. If he did that for five and a half years (as I have been), he would likely be in very similar shape to me.&lt;/p&gt;
&lt;p&gt;As for training smart, I basically just follow the &lt;a href="http://philmaffetone.com/what-is-the-maffetone-method/"&gt;Maffetone method&lt;/a&gt;. Most of my runs are easy, aerobic runs. Even at the height of my training for a half marathon, when I am running 45–50 miles each week, 80% of my miles are at a conversational pace. (I’ve carried on fifteen-minute-long phone conversations on runs before!) My long runs include a hard, roughly race-pace finish for the last three or four miles, and I do one hard run a week which is half aerobic and half pushing harder than race speed.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; But overall, I run a slow-for-me pace most of the time. I use a heart-rate monitor to help me stay in an easy, aerobic training zone, and I simply don’t go over that.&lt;/p&gt;
&lt;p&gt;That slow-run training pays off in a couple ways. First, it builds up my body’s ability to process energy aerobically (see &lt;a href="http://philmaffetone.com/what-is-the-maffetone-method/"&gt;the Maffetone method article&lt;/a&gt; for details). Second, it’s much easier on my body—I simply don’t have the joint problems or soreness that many runners do. Third, it is &lt;em&gt;much&lt;/em&gt; easier mentally, because I can enjoy my runs and not feel exhausted after them. That means it’s much easier to do them day after day, and that takes me back to the consistency point from above.&lt;/p&gt;
&lt;p&gt;So if you want to run fast: run a lot, and usually run slow.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The top finisher came in at 1:10:03 (to my 1:24:48)—a 5:21/mile pace. The record on the course—which isn’t a perfect match for what we ran today, but pretty similar—is 1:04:21, which is about a 4:55 pace. That’s &lt;em&gt;blisteringly&lt;/em&gt; fast.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;In my first, in December 2011, I ran a 1:36:32, which is about a 7:23 pace.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I also occasionally through speed work days; this fall I did one day of hill repeats: a quarter mile pushing &lt;em&gt;hard&lt;/em&gt; up a hill, a quarter mile easy back down the hill, and a minute of rest. Five miles of that is tough; I’d like to do more in future years.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="fitness"></category></entry><entry><title>Fall Haiku</title><link href="http://www.chriskrycho.com/2015/fall-haiku.html" rel="alternate"></link><published>2015-11-22T10:10:00-05:00</published><updated>2015-11-22T10:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-11-22:/2015/fall-haiku.html</id><summary type="html">The sky is – not bleak, but – gray…</summary><content type="html">&lt;div class="line-block"&gt;The sky is – not bleak, but – gray;&lt;br /&gt;
   few leaves remain to&lt;br /&gt;
      autumn branches clinging.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>Rust and Swift (ix)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-ix.html" rel="alternate"></link><published>2015-11-09T22:20:00-05:00</published><updated>2016-01-02T21:54:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-11-09:/2015/rust-and-swift-ix.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Right off the bat when looking at the definitions for Swift’s and Rust’s &lt;code&gt;enum&lt;/code&gt; types, a difference pops out: the use of the keyword &lt;code&gt;case&lt;/code&gt; to introduce an enum member in Swift. In one sense, this overloads that keyword, but in another sense it’s fine: pattern matching and enums go hand in hand, so the use in both cases is fairly natural. Rust doesn’t have any special syntax to designate the elements of an enum; they’re just separated by commas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I am not at all shocked to find that Swift has a variant syntax for its unit type case declarations, where a single &lt;code&gt;case&lt;/code&gt; keyword precedes a list of comma-separated cases defined on a single line. (At this point, I would be more surprised &lt;em&gt;not&lt;/em&gt; to find a variant syntax for something in Swift!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Something truly wonderful about both a Rust and Swift: enumerated types aren’t just wrappers around integer values. They’re real types of their own. This is powerful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust and Swift also share in having enumerated types that can hold values. The most prominent of these so far in the Swift book are optionals, the &lt;code&gt;Optional&lt;/code&gt; enum type, corresponding very closely to Rust’s &lt;code&gt;Option&lt;/code&gt; type. Having had these for a bit in playing with Rust, and having gotten familiar with the utility of types like these while reading &lt;a href="https://gumroad.com/l/maybe-haskell"&gt;&lt;em&gt;Maybe Haskell&lt;/em&gt;&lt;/a&gt;—a delightful book which introduces Haskell and functional programming using Haskell’s &lt;code&gt;Maybe&lt;/code&gt; type—I now miss them profoundly in languages which don’t have them. (Which is to say: every language I use on a regular basis professionally: C, C++, Python, JavaScript, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s enum types don’t have integer values &lt;em&gt;by default&lt;/em&gt;—but they can have them if you define a type and assign a value to each enum case at the definition. These “raw values” are distinct from the “associated values” noted just above. I expect these exist primarily for ease of interoperation with Objective-C.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;del&gt;Rust doesn’t have anything like this, at least that I can think of. The main place it would be useful would be for foreign function interfaces (as in Swift), and this is one of several such gaps in Rust,&lt;/del&gt; along with the lack of a straightforward way to map to C’s &lt;code&gt;union&lt;/code&gt; types. &lt;del&gt;There are trade offs in terms of adding the functionality to the language, though, as it substantially increases the complexity of what an enum value can be, I think.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; This was incorrect. From the &lt;a href="https://doc.rust-lang.org/reference.html"&gt;Rust Reference&lt;/a&gt; section on &lt;a href="https://doc.rust-lang.org/reference.html#enumerations"&gt;Enumerations&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enums have a discriminant. You can assign them explicitly:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;enum Foo {
    Bar = 123,
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a discriminant isn’t assigned, they start at zero, and add one for each variant, in order.&lt;/p&gt;
&lt;p&gt;You can cast an enum to get this value:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let x = Foo::Bar as u32; // x is now 123u32&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This only works as long as none of the variants have data attached. If it were &lt;code&gt;Bar(i32)&lt;/code&gt;, this is disallowed.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initialization of Swift’s raw-valued enum type is quite similar, and pleasantly so, to Python’s initialization of enums.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In a surprising change from the usual, Swift’s syntax for binding variable names when pattern matching against an enum is &lt;em&gt;more&lt;/em&gt; verbose than Rust’s, requiring the use of either a leading &lt;code&gt;let&lt;/code&gt; on the &lt;code&gt;case&lt;/code&gt; statement if all the elements are of the same type, or a &lt;code&gt;let&lt;/code&gt; in front of each element otherwise:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;var matchedValue: String
let matchee = 3.14159
switch matchee {
case 3.14159:
    matchedValue = &amp;quot;pi&amp;quot;
case _:
    matchedValue = &amp;quot;not pi&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, a matched pattern can simply bind its value directly:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let matchee = 3.14159;
let matchedValue = match matchee {
    3.14159 =&amp;gt; &amp;quot;pi&amp;quot;.to_string(),
    _ =&amp;gt; &amp;quot;not pi&amp;quot;.to_string()
};&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift has the ability to do recursive enumerations with its &lt;code&gt;indirect&lt;/code&gt; type. This is conceptually interesting, but off the top of my head I can’t think of a time when this would have been useful at any point since I started programming seven and a half years ago. The book’s example of a recursive function a aliasing arithmetic expressions is fine, but not particularly illuminating to me. I suspect, though, that it might make more sense if I were more familiar with pure functional programming paradigms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; a friend &lt;a href="https://alpha.app.net/jws/post/65990633"&gt;points out&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Indirect enums are useful for recursive types in general. There are a lot of these: Lists, trees, and streams are the big ones that come to mind.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All those same lines: Rust does &lt;em&gt;not&lt;/em&gt; have the ability to have recursive enumerations at present (or recursive &lt;code&gt;struct&lt;/code&gt; types, for that matter), at least without heap-allocating with &lt;code&gt;Box&lt;/code&gt; along the way. You &lt;em&gt;can&lt;/em&gt; construct such a type, in other words, but you have to be explicit about how you’re handling the memory, and it can’t be stack-allocated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For an example of a recursive enumeration type (as well as an interesting/hilarious example of how you can easily confuse the compiler if you do this wrong), see &lt;a href="https://users.rust-lang.org/t/recursive-enum-types/2938"&gt;this Rust forum post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For some discussion on stack- and heap-allocated memory in Rust, I’ll shamelessly promote my Rust podcast, &lt;a href="http://www.newrustacean.com"&gt;New Rustacean&lt;/a&gt;: take a listen to &lt;a href="http://www.newrustacean.com/show_notes/e005/index.html"&gt;e005: Allocate it where?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Functions, closures, and an awful lot of Swift syntax.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-x.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Classes and structs (product types), and reference and value types.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="software development"></category><category term="listicles"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>October was</title><link href="http://www.chriskrycho.com/2015/october-was.html" rel="alternate"></link><published>2015-11-05T10:00:00-05:00</published><updated>2015-11-05T10:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-11-05:/2015/october-was.html</id><summary type="html">October was a long month, and strange, /
    for how quickly it seemed to end…</summary><content type="html">&lt;div class="line-block"&gt;October was a long month, and strange,&lt;br /&gt;
    for how quickly it seemed to end.&lt;br /&gt;
Long days, and many weary of them,&lt;br /&gt;
    yet also more to do than fit.&lt;br /&gt;
And, much the same, so this year has gone,&lt;br /&gt;
    but two months left; the rest behind.&lt;br /&gt;
Life, it seems, is brief; it passes quick,&lt;br /&gt;
    so stewardship of days comes dear.&lt;br /&gt;
Falls’ leaves, and spring’s, come swift and swifter&lt;br /&gt;
    take heed, with reckoning in mind.&lt;br /&gt;
Live full and well, diligent and glad;&lt;br /&gt;
    count each day and decade—a gift.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>CSS Fallback for OpenType Small Caps</title><link href="http://www.chriskrycho.com/2015/css-fallback-for-opentype-small-caps.html" rel="alternate"></link><published>2015-10-19T20:00:00-04:00</published><updated>2015-10-19T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-10-19:/2015/css-fallback-for-opentype-small-caps.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I wrote this up as &lt;a href="http://stackoverflow.com/questions/24846264/css-fallback-for-opentype-small-caps/25172932#25172932"&gt;a question on Stack Overflow&lt;/a&gt; a bit over a year ago. It has continued to get a fair bit of traffic, so I’ve republished it here and cleaned it up a bit.&lt;/i&gt;&lt;/p&gt;
&lt;section id="the-problem" class="level2"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over the last year, I’ve worked on &lt;a href="//holybible.com"&gt;a site …&lt;/a&gt;&lt;/p&gt;&lt;/section&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I wrote this up as &lt;a href="http://stackoverflow.com/questions/24846264/css-fallback-for-opentype-small-caps/25172932#25172932"&gt;a question on Stack Overflow&lt;/a&gt; a bit over a year ago. It has continued to get a fair bit of traffic, so I’ve republished it here and cleaned it up a bit.&lt;/i&gt;&lt;/p&gt;
&lt;section id="the-problem" class="level2"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over the last year, I’ve worked on &lt;a href="//holybible.com"&gt;a site&lt;/a&gt; where small caps are important: setting the text of the Bible. In the Old Testament the name of God is transliterated as &lt;code&gt;Lord&lt;/code&gt; but in small caps—not “LORD” but &lt;span class="divine-name"&gt;Lord&lt;/span&gt; (RSS readers will want to click through and see this on my site). However, the state of OpenType small caps support at the moment is… less than optimal. Safari (even up through Safari 9 on El Capitan, from which I am typing this) still doesn’t support the &lt;code&gt;-webkit-font-feature-settings: 'smcp'&lt;/code&gt; option, and a lot of the hits for this website will be coming from mobile.&lt;/p&gt;
&lt;p&gt;Unfortunately, “graceful degradation” is problematic here: if you specify both &lt;code&gt;font-variant: small-caps&lt;/code&gt; and &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; in a browser that supports the latter (e.g. Chrome), the &lt;code&gt;font-variant&lt;/code&gt; declaration overrides it, so the horribly ugly old-style version still comes into play. (Note: this is as it should be per the &lt;a href="http://www.w3.org/TR/css-fonts-3/#feature-precedence"&gt;spec&lt;/a&gt;: the &lt;code&gt;font-variant&lt;/code&gt; declaration has a higher priority than the &lt;code&gt;font-feature-settings&lt;/code&gt; declaration). Given the current implementations of &lt;code&gt;font-variant: small-caps&lt;/code&gt;, though—shrunken capitals rather than actual small capitals—the result is that using &lt;code&gt;font-variant: small-caps&lt;/code&gt; realists in not-so-gracefully degrading &lt;em&gt;everyone’s&lt;/em&gt; reading experience.&lt;/p&gt;
&lt;p&gt;In the past, I have exported the small caps as a distinct webfont and specified them directly; see &lt;a href="http://www.chriskrycho.com/2014/learning-qml-part-1.html"&gt;this post&lt;/a&gt; for a simple example: the first line of each paragraph is specified that way.&lt;/p&gt;
&lt;p&gt;While I &lt;em&gt;can&lt;/em&gt; do the same thing here (and at least in theory could deliver a pretty small typeface, since I really only need three characters: &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt;), I’d prefer simply to enable sane fallbacks. As noted above, however, that’s not possible. I am &lt;em&gt;open to&lt;/em&gt; but would very much prefer to avoid server-side solutions (browser detection, etc.) as a point of complexity that is better to minimize, especially given how rapidly browsers change. How else might one solve this problem, and especially are there existing solutions for it?&lt;/p&gt;
&lt;p&gt;In the future, &lt;code&gt;font-variant: small-caps&lt;/code&gt; will handle this nicely, as per &lt;a href="http://www.w3.org/TR/css3-fonts/#small-caps"&gt;the spec&lt;/a&gt; it should display a small-capitals-variant of the typeface if the typeface supplies it. However, at present, &lt;em&gt;no browser supports this&lt;/em&gt; (at least, none that I can find!). This means that instead, they all render fake small capitals simply by scaling down actual capitals. The result is typographically unpleasant, and unacceptable on this project.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solutions" class="level2"&gt;
&lt;h2&gt;The Solution(s)&lt;/h2&gt;
&lt;p&gt;I spent a considerable amount of time researching this and wrestling with it. After digging around as best I could, the top solutions for now are:&lt;/p&gt;
&lt;section id="supports" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Take advantage of the &lt;code&gt;@supports&lt;/code&gt; rule in browsers. This is what I initially opted to do on this project.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; You use the rule this way:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.some-class {
    font-variant: small-caps;
}

@supports(font-feature-settings: &amp;#39;smcp&amp;#39;) {
    .some-class {
        font-variant: normal;
        font-feature-settings: &amp;#39;smcp&amp;#39;;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I’ve simplified by leaving out the prefixed versions; you’ll need to add the &lt;code&gt;-webkit-&lt;/code&gt; and &lt;code&gt;-moz-&lt;/code&gt; prefixes to get this actually working.) This has the advantage that support for real small caps and support for the &lt;code&gt;@supports&lt;/code&gt; rule are very similar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@supports&lt;/code&gt;: &lt;a href="http://caniuse.com/#feat=css-featurequeries"&gt;Can I Use Feature Queries?&lt;/a&gt;: Chrome 31+, Firefox 29+, Opera 23+, Android 4.4+, Safari 9+, Edge 12+, Chrome for Android&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-feature-settings&lt;/code&gt;: &lt;a href="http://usabilitypost.com/2014/05/10/using-small-caps-and-text-figures-on-the-web/"&gt;Using Small Caps &amp;amp; Text Figures on the Web&lt;/a&gt;: Chrome, Firefox, IE10+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This isn’t perfect: since IE10/11 don’t implement &lt;code&gt;@supports&lt;/code&gt;, you miss one browser—sort of. At this point, IE is a legacy browser, and Edge has had &lt;code&gt;@supports&lt;/code&gt; available from the start. Thus, this gets you most of the way there, and it should be future-facing: this should progressively enhance the site nicely. The normal (bad, but functional) small caps are displayed in the meantime, and when browsers eventually get around to using OpenType small caps by default for &lt;code&gt;font-variant: small-caps&lt;/code&gt;, this will continue to work just fine. It’s “progressive enhancement” and it’ll work nicely for most purposes.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="typeface-subsetting" class="level3"&gt;
&lt;h3&gt;Typeface subsetting&lt;/h3&gt;
&lt;p&gt;As mentioned above, one can create a subset of the typeface that includes only small capitals. This is what I have done for the small caps on this site; see the example in the first paragraph.&lt;/p&gt;
&lt;p&gt;To pull this off, you’ll need to start by subsetting the typeface. You can do this manually with a font tool, or (the simpler way) you can use FontSquirrel’s custom subsetting tool in their &lt;a href="http://www.fontsquirrel.com/tools/webfont-generator"&gt;webfont generator&lt;/a&gt;. (&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; You &lt;em&gt;must&lt;/em&gt; check the license and confirm that the typeface in question allows this kind of modification. See below.) In the web font generator, first upload the file you wish to modify. Then choose the &lt;strong&gt;Expert&lt;/strong&gt; radio button. Most of the settings you can leave as they are; they’re good sane defaults. Midway down the page you’ll see &lt;strong&gt;OpenType Flattening&lt;/strong&gt; options. Here, select only “Small Caps”. Run the generator. The result will be a complete replacement of the normal lowercase letters with the small caps set.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In that case, you can simply apply a style to the elements you want to have small capitals, e.g.:&lt;/p&gt;
&lt;pre class="css"&gt;&lt;code&gt;.divine-name {
    font-family: &amp;#39;my_typeface_smcp&amp;#39;, &amp;#39;my_typeface&amp;#39;, serif;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The major advantage to this approach is consistency: that typeface is going to display on every browser out there, back to IE5.5, as long as you deliver it correctly using the various hooks required by &lt;code&gt;@font-face&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are a few disadvantages to this approach, though:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It means delivering another font file. In my case, this would be an acceeptably low size (since I actually only need four characters), but it’s still something to consider in general. It is in any case another HTTP request, which is going to further slow the page load time or at least give you some flash of unstyled text when it reloads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It may violate the licenses of the typefaces in question. For at least one of the fonts I used on this project, it &lt;em&gt;does&lt;/em&gt;: the license explicitly forbids rebuilding the font using tools like FontSquirrel. (FontSquirrel was the tool I used for this approach before, and it works quite well.) This is a make-or-break issue for using a subset of a typeface to accomplish the goal. That being said, if you have a good reason to do it, you may be able to get support from the vendor (especially if they’re a small shop). For the project that prompted this question, I was able to do just that with a nice email—the designer is a great guy.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The other major reason not to do it this way is that it has a significantly higher maintenance cost. If at any point you need to change or update the typeface, you have to go through the subsetting process all over again. By contrast, the first option will simply &lt;em&gt;work&lt;/em&gt;, though admittedly not as pleasantly as one might hope, and will not only continue to work but will actually improve over time as browsers increase their implementation of the CSS3 standard.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I opted for the second solution on HolyBible.com—typography was one of the driving differentiators for the site, so I prioritized it and did the necessary legwork for it. In general, though, the first option should work well for most sites. In any case, both ways work, though the first one is a &lt;em&gt;better&lt;/em&gt; example of progressive enhancement. And we can all look forward to the day when true small-caps support is available on every browser, right?&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For various reasons (especially see note 2 below), I actually opted for the second approach outlined here, which is the same approach I was trying to avoid. Alas.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Issues remain: even in the latest Chrome (46 as of the time of this post), using the &lt;code&gt;font-feature-settings: 'smcp'&lt;/code&gt; approach has some issues. For example, if you turn on &lt;code&gt;letter-spacing&lt;/code&gt; (a fairly common &lt;a href="http://practicaltypography.com/letterspacing.html"&gt;recommendation&lt;/a&gt; for small caps), the small caps will revert to normal lowercase letters.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;From the FontSquirrel blog post that introduced the feature:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have a font with OpenType features, you can now flatten some of them into your webfont. For instance, some fonts have small caps built in, but they are completely inaccessible in a web browser. By selecting the “Small Cap” option, the Generator will replace all the lowercase glyphs with the small cap variants, giving you a small cap font. Please note that not all OpenType features are supported and if the font lacks OpenType features, using these options won’t create them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="design"></category><category term="software development"></category><category term="typography"></category></entry><entry><title>Rust and Swift (viii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html" rel="alternate"></link><published>2015-10-18T11:50:00-04:00</published><updated>2015-10-19T20:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-10-18:/2015/rust-and-swift-viii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past few months. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Rust and Swift handle function definition fairly similarly, at least for basic function definitions. In fact, for most basic functions, the only difference between the two is the keyword used to indicate that you’re declaring a function: &lt;code&gt;fn&lt;/code&gt; in Rust and &lt;code&gt;func&lt;/code&gt; in Swift.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Likewise, both return an empty tuple, &lt;code&gt;()&lt;/code&gt;, called the &lt;em&gt;unit type&lt;/em&gt; in Rust or &lt;code&gt;Void&lt;/code&gt; in Swift. Note, however, that this unit/&lt;code&gt;Void&lt;/code&gt; type is &lt;em&gt;not&lt;/em&gt; like C(++)’s &lt;code&gt;void&lt;/code&gt; or Java’s &lt;code&gt;null&lt;/code&gt;: you cannot coerce other types to it; it really is an empty tuple.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type declarations on functions are basically identical for simple cases, though they vary into the details as you get into generics and constraints in generics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have no idea why the Swift team chooses to represent function names like this: &lt;code&gt;function_name(_:second_param:third_param:&amp;lt;etc.&amp;gt;)&lt;/code&gt;. Perhaps it’s a convention from other languages I’m simply unfamiliar with, but it seems both odd and unhelpful: eliding the first parameter name obscures important information. Also, why use colons for the delimiter?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I’m informed via Twitter and App.net that this reflects how function names work in Objective C, and derives ultimately from Smalltalk.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being able to name the items in a returned type in Swift is quite handy; it’s something I have often wanted and had to work around with dictionaries or other similar types in Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll see how I feel once I’ve been writing both for a while, but initially I &lt;em&gt;strongly&lt;/em&gt; prefer Rust’s more-obvious (if also somewhat longer) &lt;code&gt;-&amp;gt; Option&amp;lt;i32&amp;gt;&lt;/code&gt; to return an optional integer to Swift’s &lt;code&gt;-&amp;gt; Int?&lt;/code&gt;. I am quite confident that I’ll miss that trailing &lt;code&gt;?&lt;/code&gt; somewhere along the way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m sure there’s a reason for Swift’s internal and external parameter names and the rules about using &lt;code&gt;_&lt;/code&gt; to elide the need to use keyword arguments (but automatically eliding the first one) and so on… but I really can’t see the utility, overall. It seems like it would be better just to have Python-like args and keyword args.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That’s doubly so given that Swift’s rules for default-valued parameters map exactly to Python’s: they need to go at the end, after any parameters which don’t have default values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s variadic parameters are nice—though of course limited, since if you have more than one, the compiler may not know how to resolve which destination parameter a given argument belongs with. (I imagine the compiler &lt;em&gt;could&lt;/em&gt; be extended to be able to handle multiple variadic parameters as long as they were all of different types, but that’s probably not worth the work or the potential confusion it would introduce.) In any case, it’s a small nicety that I do wish Rust had.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s variable parameters are… interesting. I can see the utility, sort of, but (probably from years of habit with C and Python and pass-by-reference types), it’s just not a pattern that makes a lot of sense to me right now. No doubt I’ll get used to them in idiomatic Swift, but while Rust doesn’t have a similar feature, I suspect I won’t miss it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In/out parameters—that is, mutable pass-by-reference types—are available in both languages. The syntax is &lt;em&gt;very&lt;/em&gt; different here, as are the semantics.&lt;/p&gt;
&lt;p&gt;Swift has the &lt;code&gt;inout&lt;/code&gt; keyword, supplied before a parameter definition:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;func adds4ToInput(inout num: Int) {
    num += 4;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust has instead a variation on every other type definition, declaring the type in this case to be a mutable reference:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn adds_4_to_input(num: &amp;amp;mut i32) {
    num += 4;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual, in other words, Swift opts to use new syntax (in this case, a dedicated keyword) while Rust opts to use the same syntax used everywhere else to denote a mutable reference. In fairness to Swift, though, this is something of a necessity there. From what I’ve seen so far, Swift generally doesn’t (and perhaps can’t?) do pointers or references explicitly (though of course it’s handling lots of things that way under the covers); arguments to functions are a special case, presumably present primarily for interoperability with Objective-C.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s function type definitions, as used in e.g. function parameter definitions, are quite nice, and reminiscent of Haskell in the best way. Rust’s are pretty similar, and add in its &lt;code&gt;trait&lt;/code&gt; usage—because functions types &lt;em&gt;are&lt;/em&gt; &lt;code&gt;trait&lt;/code&gt;s. Once again, I really appreciate how Rust builds more complicated pieces of functionality on lower-level constructs in the language. (Swift may be doing similar under the covers, but the Swift book doesn’t say.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Again, though, the downside to Rust’s sophistication is that it sometimes bundles in some complexity. Returning a function in Swift is incredibly straightforward:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;func getDoubler() -&amp;gt; (Int) -&amp;gt; Int {
    func doubler(number: Int) -&amp;gt; Int {
        return number * 2
    }

    return doubler
}

func main() {
    let doubler = getDoubler()
    println(&amp;quot;\(doubler(14))&amp;quot;)  // -&amp;gt; 28
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing the same in Rust is a bit harder, because—as of the 1.3 stable/1.5 nightly timeframe—it requires you to explicitly heap-allocate the function. Swift just takes care of this for you.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;fn get_doubler() -&amp;gt; Box&amp;lt;Fn(i32) -&amp;gt; i32&amp;gt; {
    fn doubler(number: i32) -&amp;gt; i32 {
        number * 2
    }

    Box::new(doubler)
}

fn main() {
    let doubler = get_doubler();
    println!(&amp;quot;{:}&amp;quot;, doubler(14));  // -&amp;gt; 28
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you understand what’s going on under the covers here, this makes sense: Rust normally stack-allocates a function in a scope, and therefore the &lt;code&gt;doubler&lt;/code&gt; function goes out of scope entirely when the &lt;code&gt;get_doubler&lt;/code&gt; function returns if you don’t heap-allocate it with &lt;code&gt;Box::new&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In both languages, closures and “ordinary” functions are variations on the same underlying functionality (as it should be). In Rust’s case, functions and closures both implement the &lt;code&gt;Fn&lt;/code&gt; trait. In Swift’s case, named functions are a special case of closures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Swift syntax for a closure is, well, a bit odd to my eye. The basic form is like this (with the same “doubler” functionality as above):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;{ (n: Int) -&amp;gt; Int in return n * 2 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For brevity, this can collapse down to the shorter form with types inferred from context, parentheses dropped and the &lt;code&gt;return&lt;/code&gt; keyword inferred from the fact that the closure has only a single expression (note that this wouldn’t be valid unless in a context where the type of &lt;code&gt;n&lt;/code&gt; could be inferred):&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;{ n in n * 2 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The simplicity here is nice, reminiscent in a good way of closures/lambdas in other languages.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The fact that it’s a special case is less to my taste.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rust’s closure syntax is fairly similar to Swift’s brief syntax. More importantly, there’s no special handling for closures’ final expressions. Remember: the final expression of &lt;em&gt;any&lt;/em&gt; block is always returned in Rust.&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;|n| n * 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted to fully annotate the types, as in the first Swift example, it would be like so:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;|n: i32| -&amp;gt; i32 { n * 2 }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are even &lt;em&gt;more&lt;/em&gt; differences between the two, because of Rust’s ownership notion and the associated need to think about whether a given closure is being borrowed or moved (if the latter, explicitly using the &lt;code&gt;move&lt;/code&gt; keyword).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift has the notion of shorthand argument names for use with closures.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The arguments to a closure get the default names &lt;code&gt;$0&lt;/code&gt;, &lt;code&gt;$1&lt;/code&gt;, etc. This gets you even &lt;em&gt;more&lt;/em&gt; brevity, and is quite convenient in cases where closures get used a lot (&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, etc.).&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;{ $0 * 2 }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If that weren’t enough, Swift will go so far as to simply reuse operators (which are special syntax for functions) as closures. So a closure call could simply be &lt;code&gt;+&lt;/code&gt; for a function expecting a closure operating on two numbers; Swift will infer that it needs to map back to the relevant method definition on the appropriate type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The upside to this is that the code can be incredibly brief, and—once you’re used to it, at least—still fairly clear. The downside to this is yet &lt;em&gt;more&lt;/em&gt; syntax for Swift, and the ever-growing list of things to remember and ways to write the same thing I expect will lead to quite a bit of instability as the community sorts out some expectations for what is idiomatic in any given instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And if that weren’t enough, there is more than one way to supply the body of a closure to a Swift function that expects it: you can supply a block (&lt;code&gt;{ /* closure body */ }&lt;/code&gt;) &lt;em&gt;after&lt;/em&gt; the function which expects it. Yes, this can end up looking nearly identical to the form for declaring a function:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;someFunctionExpectingAnIntegerClosure() { n * 2 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But you can also drop the parentheses if that’s the only argument.&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;someFunctionExpectingAnIntegerClosure { n * 2 }&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In terms of the &lt;em&gt;mechanics&lt;/em&gt; of closures, and not just the syntax, the one significant difference between Rust and Swift is the same one we’ve seen in general between the two languages: Swift handles the memory issues automatically; Rust makes you be explicit about ownership. That is, as noted above about the closures themselves, in Rust you may have to &lt;code&gt;move&lt;/code&gt; ownership to get the expected behavior. Both behave basically like closures in any other language, though; nothing surprising here. Both also automatically copy values, rather than using references, whever it makes sense to do so.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift autoclosures allow for lazy evaluation, which is neat, but: &lt;em&gt;yet more syntax&lt;/em&gt;! Seriously. But I think all its other closure syntaxes &lt;em&gt;also&lt;/em&gt; allow for lazy evaluation. The only reason I can see to have the special attribute (&lt;code&gt;@autoclosure&lt;/code&gt;) here is because they added this syntax. And this syntax exists so that you can call functions which take closures as if they &lt;em&gt;don’t&lt;/em&gt; take closures, but rather the argument the closure itself takes. But of course, this leads the Swift book to include the following warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Overusing autoclosures can make your code hard to understand. The context and function name should make it clear that the evaluation is being deferred.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, care needed indeed. (Or, perhaps, you could just avoid adding more special syntax that leads to unexpected behaviors?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Good grief. I’m tired now. That’s a half-dozen variants on &lt;em&gt;closure syntax&lt;/em&gt; in Swift.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember: there’s still just one way to write and use a closure in Rust.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This takes me back to something I noticed &lt;a href="/2015/rust-and-swift-ii.html"&gt;early on&lt;/a&gt; in my analysis of the two languages. In Swift, there’s nearly always more than one way to do things. In Rust, there’s usually one way to do things. Swift prefers brevity. Rust prefers to be explicit. In other words, Swift borrows more of its philosophy from Perl; Rust more from Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’m a Python guy, through and through. Perl drives me crazy every time I try to learn it. You could guess (even if you hadn’t already seen) where this lands me between Rust and Swift.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post is incredibly long, but I blame that on the (frankly incredible) number of variants Swift has on the same concept.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Pattern matching and the value of expression blocks.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ix.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Sum types (&lt;code&gt;enum&lt;/code&gt;s) and more on pattern matching.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Compare the closure syntaxes especially in Ruby and ES6+.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;For a similar example in another up-and-coming language, see &lt;a href="http://elixir-lang.org/getting-started/modules.html#function-capturing"&gt;Elixir&lt;/a&gt;, which does almost exactly the same but with &lt;code&gt;&amp;amp;&lt;/code&gt; in place of &lt;code&gt;$&lt;/code&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="listicles"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>How I Became a Runner</title><link href="http://www.chriskrycho.com/2015/how-i-became-a-runner.html" rel="alternate"></link><published>2015-10-12T20:00:00-04:00</published><updated>2015-10-12T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-10-12:/2015/how-i-became-a-runner.html</id><summary type="html">&lt;p&gt;Sometime in the last few years, I became “that runner guy.” It is no longer strange for me to introduce myself to someone new in the area we live, and hear them say, “Have I seen you running?” I smile and nod: “Yep, that’s me.” And to be fair …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometime in the last few years, I became “that runner guy.” It is no longer strange for me to introduce myself to someone new in the area we live, and hear them say, “Have I seen you running?” I smile and nod: “Yep, that’s me.” And to be fair, I do run a lot: six days a week, most weeks, always at least half an hour. In three weeks, I’ll run my seventh half marathon,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and I finished my first triathlon last summer. So, yes, I do run a lot.&lt;/p&gt;
&lt;p&gt;But it’s still a little strange to me. I came to running late, and in a roundabout way. Many of my friends ran cross country in high school; I played football (and poorly at that) instead. I ran off and on in college in a (mostly failing) attempt to stay in shape and avoid college weight. The only running I did consistently was playing Ultimate on Fridays with some friends. For the first year I was out of college, my routine was much the same.&lt;/p&gt;
&lt;p&gt;And then I got mono. I drank after a friend who carries around a particularly virulent strain of it, and was down for the count: a month in bed, and two months of recovery after that. I was, in theory, the captain of a church league Ultimate team that spring. I missed half the games, and even when I was able to attend some of them in the latter half of the season, it left me literally needing a nap just to stand and watch for an hour. In the hopes of being back in good enough shape to play the following fall, I started running as soon as I was cleared by the doctor.&lt;/p&gt;
&lt;p&gt;That first run on a treadmill in May 2010 was painfully slow. Even when I was furthest out of shape before that, running an 8-minute mile had been doable—painful, perhaps, but doable. That day I ran a 12-minute mile, and was done for the day. The same thing another day that week. And again.&lt;/p&gt;
&lt;p&gt;But slowly, over time, I built up my endurance. I managed to run two miles outside a few weeks later. By the time Ultimate season rolled around in late August, I could run five miles, and was doing three to five miles four times a week. I was in good enough shape to play Ultimate, and I enjoyed it.&lt;/p&gt;
&lt;p&gt;Still, I found running hard, and didn’t particularly enjoy it. I ran solely as a means to the end of playing Ultimate. More, five miles was my upper limit if I ran hard (as I always did). When I thought about people who ran half-marathons—still less the full—I simply could not understand how they did it. But I started to &lt;em&gt;want&lt;/em&gt; to understand.&lt;/p&gt;
&lt;p&gt;And then I had one simple conversation, which changed my entire approach to running. It set me on a course to this seventh half-marathon, and to being “that runner guy” around here. It led to my being the healthiest I’ve ever been. And, strangest of all, it ended up with my &lt;em&gt;loving&lt;/em&gt; to run—and not because I like pain.&lt;/p&gt;
&lt;p&gt;But more on that next time.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Dallas White Rock 2011, Oklahoma City 2012, Fort Worth 2012, one whose name I can’t remember in April 2013, City of Oaks 2013, City of Oaks 2014.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="fitness"></category></entry><entry><title>Two Podcast Themes</title><link href="http://www.chriskrycho.com/2015/two-podcast-themes.html" rel="alternate"></link><published>2015-09-30T07:10:00-04:00</published><updated>2015-09-30T07:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-30:/2015/two-podcast-themes.html</id><summary type="html">This summer, I wrote themes for two podcasts I launched. Take a listen!</summary><content type="html">&lt;p&gt;This summer, I launched two podcasts. (This reminds me: I need to put up the second episode of one of those tomorrow, and record and publish the second episode of the other by Friday. Lots to do!) Here are the themes for the two shows:&lt;/p&gt;
&lt;iframe title="Theme for Sap.py" height="300" width="300" style="padding-top: 1em; padding-bottom: 1em; margin: auto; display: block;" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/217984865&amp;amp;auto_play=false&amp;amp;color=5592c9&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;
&lt;/iframe&gt;
&lt;iframe title="New Rustacean Theme" height="300" width="300" style="padding-top: 1em; padding-bottom: 1em; margin: auto; display: block;" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/225441161&amp;amp;auto_play=false&amp;amp;color=5592c9&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true"&gt;
&lt;/iframe&gt;
</content><category term="music"></category></entry><entry><title>A Range of Prophets</title><link href="http://www.chriskrycho.com/2015/a-range-of-prophets.html" rel="alternate"></link><published>2015-09-27T09:40:00-04:00</published><updated>2015-09-27T09:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-27:/2015/a-range-of-prophets.html</id><summary type="html">&lt;p&gt;N. T. Wright makes it painfully clear that it’s difficult (if not impossible) to understand Jesus fully and rightly without having a deep knowledge of the Old Testament:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Equally impressive are the strong hints, throughout the gospels, that Jesus was modelling his ministry not on one figure alone, but …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;N. T. Wright makes it painfully clear that it’s difficult (if not impossible) to understand Jesus fully and rightly without having a deep knowledge of the Old Testament:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Equally impressive are the strong hints, throughout the gospels, that Jesus was modelling his ministry not on one figure alone, but on a range of prophets from the Old Testament. Particularly striking is his evocation of the great lonely figure Micaiah ben Imlach (1 Kings 22), who, when asked about the coming battle, predicted the death of Ahab, king of Israel, by saying, ‘I saw all Israel scattered upon the mountains, as sheep that have no sheperd.’ Jesus, looking at the crowds, takes pity on them, because that is what they remind him of: leaderless sheep. Like Ezekiel, Jesus predicts that the temple will be abandoned by the Shekinah, left unprotected to its fate. Like Jeremiah, Jesus constantly runs the risk of being called a traitor to Israel’s national apsirations, while claiming all the time that he nevertheless is the true spokesman for the covenant god. This, as we shall see, lies behind a good part of the story of Jesus’ action in the Temple, and his subsequence ‘trial’: Jesus has predicted the destruction of the Temple and is on trial not least as a false prophet. Jesus replies to earlier critics and questioners with the sign of the prophet Jonah. Jonah was predicting immenent judgment on Nineveh, following his adventure with the fish; Jesus is predicting imminent judgment on Israel, and a similar sign will validate his message too. He is constantly redefining what the coming day will mean for Israel, warning her, like Amos, that it will be a day of darkness, not of light. Like Amos, too, he implies that the people of god are to be judged as the climax of the divine judgment upon all nations. The judgment which he announces upon Israel is sketched with the help of prophetic passages relating to the judgment of Jerusalem by Babylon, and also, more terrifyingly, passages which speak of the divine judgment upon Babylon itself.&lt;/p&gt;
&lt;p&gt;Above all, Jesus adopts the style of, and consciously seems to imitate, Elijah. Here we are again in an interesting position &lt;em&gt;vis-à-vis&lt;/em&gt; the sources. It is clear from all three synoptics that they, and presumably with them the early church as a whole, regard John the Baptist as in some sense Elijah &lt;em&gt;redivivus&lt;/em&gt;. They nevertheless portray Jesus as acting in Elijah-like ways, and show that the disciples were thinking of Elijah-typology as giving them a blueprint for his, and their own, activity. Jesus himself, explaining the nature of his work, is portrayed using both Elijah and Elisha as models. Again, it is highly unlikely that the early church, seeing Jesus as the Messiah and hence John as Elija, created this identification out of nothing. However, at the same time, though John himself seems to have thought that Jesus was to be the new Elijah, Jesus actually returned the compliment. We begin here to see both parallel and distinction. Jesus’ ministry is so like that of Elijah that they can be easily confused. He too is announcing to the faithless people of &lt;span class="divine-name tetragrammaton"&gt;YHWH&lt;/span&gt; that their covenant god will come to them in wrath. But at the same time he is also acting out a different message, one of celebration and inauguration, which bursts the mould of the Elijah-model.&lt;/p&gt;
&lt;p&gt;From all of this it should be clear that Jesus regarded his ministry as in continuity with, and bringing to a climax, the work of the great prophets of the Old Testament, culminating in John the Baptist, whose initiative he had used as his launching-pad.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>Autonomous Individualism</title><link href="http://www.chriskrycho.com/2015/autonomous-individualism.html" rel="alternate"></link><published>2015-09-26T13:00:00-04:00</published><updated>2015-09-26T13:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-26:/2015/autonomous-individualism.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Title: Autonomous Individualism Date: 2015-09-26 13:00 Template: formats/quotation Tags: [quotes] Category: theology Source: Mark A. Seifrid, &lt;cite&gt;The Second Letter to the Corinthians&lt;/cite&gt; bibliography: /Users/chris/writing/icloud-drive/Documents/writing/library.bib csl: /Users/chris/writing/icloud-drive/Documents/writing/chicago.csl …&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;pro me&lt;/em&gt; of the gospel does not …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;hr /&gt;
&lt;p&gt;Title: Autonomous Individualism Date: 2015-09-26 13:00 Template: formats/quotation Tags: [quotes] Category: theology Source: Mark A. Seifrid, &lt;cite&gt;The Second Letter to the Corinthians&lt;/cite&gt; bibliography: /Users/chris/writing/icloud-drive/Documents/writing/library.bib csl: /Users/chris/writing/icloud-drive/Documents/writing/chicago.csl …&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;pro me&lt;/em&gt; of the gospel does not further an autonomous individualism. It brings it to an end.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>Jeb Bush on net neutrality</title><link href="http://www.chriskrycho.com/2015/jeb-bush-on-net-neutrality.html" rel="alternate"></link><published>2015-09-24T07:15:00-04:00</published><updated>2015-09-24T07:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-24:/2015/jeb-bush-on-net-neutrality.html</id><summary type="html">&lt;p&gt;Dear Republicans: your &lt;a href="http://arstechnica.com/tech-policy/2015/09/if-elected-president-jeb-bush-will-get-rid-of-net-neutrality-rules/"&gt;opposition to net neutrality&lt;/a&gt; might be justifiable as something other than kowtowing to megacorporations &lt;em&gt;if you ever got around to proposing something else&lt;/em&gt;. As is, all you’re doing is propping up some of the nastiest, most anti-consumer companies in the country and sustaining monopolies and duopolies …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dear Republicans: your &lt;a href="http://arstechnica.com/tech-policy/2015/09/if-elected-president-jeb-bush-will-get-rid-of-net-neutrality-rules/"&gt;opposition to net neutrality&lt;/a&gt; might be justifiable as something other than kowtowing to megacorporations &lt;em&gt;if you ever got around to proposing something else&lt;/em&gt;. As is, all you’re doing is propping up some of the nastiest, most anti-consumer companies in the country and sustaining monopolies and duopolies, supposedly in the name of “free markets”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stop it.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;N.b. This isn’t intrinsically a partisan issue. It’s become one, but mostly because Republicans have felt compelled to do the bidding of the telecom industry for… reasons.&lt;/p&gt;
&lt;p&gt;The only thing worse than a government monopoly is a &lt;em&gt;private&lt;/em&gt; monopoly.&lt;/p&gt;
&lt;p&gt;If Republicans wanted to push for &lt;a href="https://en.wikipedia.org/wiki/Local-loop_unbundling"&gt;local loop unbundling&lt;/a&gt; in place of net neutrality, &lt;em&gt;almost everyone&lt;/em&gt; would be for it. (The exception: telecom companies.)&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Rust and Swift (vii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-vii.html" rel="alternate"></link><published>2015-09-19T15:00:00-04:00</published><updated>2015-09-20T13:42:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-19:/2015/rust-and-swift-vii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Both Rust and Swift have &lt;em&gt;pattern-matching&lt;/em&gt;, and with what appears to be fairly similar basic behavior. (I touched on this briefly in my &lt;a href="/2015/rust-and-swift-i.html"&gt;first post in the series&lt;/a&gt;.) In Rust this goes under the &lt;code&gt;match&lt;/code&gt; construct, with matches specified like &lt;code&gt;&amp;lt;pattern&amp;gt; =&amp;gt; &amp;lt;expression|statement&amp;gt;&lt;/code&gt;, optionally with guards specified with &lt;code&gt;if&lt;/code&gt; expressions. In Swift, patterns are matched using the &lt;code&gt;switch&lt;/code&gt; construct, with matches specified like &lt;code&gt;case &amp;lt;pattern&amp;gt;: &amp;lt;expression|statement&amp;gt;&lt;/code&gt;, optionally with guards specified with &lt;code&gt;where&lt;/code&gt; expressions. (&lt;code&gt;where&lt;/code&gt; is also used in Rust, but for generic constraints, not pattern match guards.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages allow you to bind names to a matched pattern: Swift with &lt;code&gt;case let &amp;lt;name&amp;gt;&lt;/code&gt; and Rust simply by using the name in a normal destructuring expression as part of the match definition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; that’s not &lt;em&gt;quite&lt;/em&gt; right. In Rust, you use the &lt;code&gt;@&lt;/code&gt; operator with the variable name you want to bind in the match.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit the second:&lt;/strong&gt; I was mixed up, because Rust actually has &lt;em&gt;both&lt;/em&gt; of those options. You can either match directly, e.g. when getting the value of an &lt;code&gt;Option&lt;/code&gt; type: &lt;code&gt;Some(value)&lt;/code&gt; as the pattern will bind &lt;code&gt;value&lt;/code&gt;. But if you need to bind a specific part of more complicated data structure, the &lt;code&gt;@&lt;/code&gt; operator is present to let you do it in a fairly straightforward way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages allow for the use of &lt;code&gt;_&lt;/code&gt; as a “wildcard” in match definitions. Since match definitions in Rust use the patterns directly, the equivalent of Swift’s C-like &lt;code&gt;default&lt;/code&gt; is simply a wildcard match pattern (&lt;code&gt;_ =&amp;gt; &amp;lt;-expression|statement&amp;gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One significant difference: like its &lt;code&gt;if&lt;/code&gt; blocks, Rust’s &lt;code&gt;match&lt;/code&gt; blocks are expressions, so they can be assigned. I.e., you can write this:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let test = 5u32;
let description = match test {
    0..10 =&amp;gt; &amp;quot;less than ten&amp;quot;,
        _ =&amp;gt; &amp;quot;greater than ten&amp;quot;,
}
println!(&amp;quot;{?:}&amp;quot;);  // &amp;quot;less than ten&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Swift doesn’t let you do this; the same thing there would be written like this:&lt;/p&gt;
&lt;pre class="swift"&gt;&lt;code&gt;let test: UInt32 = 5
var description: String
switch test {
    case 0..&amp;lt;10:
        description = &amp;quot;less than ten&amp;quot;
    default:
        description = &amp;quot;greater than ten&amp;quot;
}
println(&amp;quot;\(description)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages have &lt;code&gt;break&lt;/code&gt; statements, but in Rust they’re only used in loop constructs, while Swift (like C) uses them to escape &lt;code&gt;case&lt;/code&gt;s as well. The Swift book gives an example of one place they’re necessary in a &lt;code&gt;switch&lt;/code&gt;: to match a case and do nothing there (e.g. &lt;code&gt;default: break&lt;/code&gt;). In Rust, you would simply supply an empty block for that scenario (e.g. &lt;code&gt;_ =&amp;gt; {}&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Correctly, both languages force you to match exhaustively on relevant patterns. If you’re matching an enumerated type, for example, you must handle every enumerated value. You can of course do this with wildcard patterns or with Swift’s &lt;code&gt;default&lt;/code&gt;, but the good thing is that both languages will refuse even to compile if a given pattern isn’t matched.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift’s default behavior around its &lt;code&gt;switch&lt;/code&gt; statements is sane: it does &lt;em&gt;not&lt;/em&gt; automatically fall through into the next statement. It does let you do this, without checking the condition on the next statement (as in C), using the &lt;code&gt;fallthrough&lt;/code&gt; keyword. Rust, by contrast, simply doesn’t allow this at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both languages supply named control statements (loops, etc.), with slightly different syntax for naming them. Rust’s, curiously, shares its syntax with lifetime definitions—more on those in a future post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I don’t believe Rust has anything quite like Swift’s &lt;code&gt;guard&lt;/code&gt;s, which allow you to leave normal or expected control flow in the main body of a block, with a secondary block for cases where the &lt;code&gt;guard&lt;/code&gt; isn’t matched. This isn’t a huge deal, but it does fit as a nice convenience into the typical &lt;code&gt;if let&lt;/code&gt; pattern in Swift. Basically, it just lets you elide an empty &lt;code&gt;if&lt;/code&gt; block and supply only the &lt;code&gt;else&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; a friend &lt;a href="https://alpha.app.net/jws/post/64804111"&gt;points out&lt;/a&gt; that Swift &lt;code&gt;guard&lt;/code&gt;s also require you to exit the current scope, so it’s unambiguous what you’re doing if you use them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vi.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Collection types and the difference between syntax and semantics.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-viii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Functions, closures, and an awful lot of Swift syntax.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="software development"></category><category term="listicles"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (vi)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-vi.html" rel="alternate"></link><published>2015-09-19T09:00:00-04:00</published><updated>2015-09-19T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-19:/2015/rust-and-swift-vi.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It kind of feels like this summarizes a &lt;em&gt;lot&lt;/em&gt; of things about the overall design of Swift:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although the two forms are functionally identical, the shorthand form is preferred and is used throughout this guide when referring to the type of an array. —&lt;em&gt;The Swift Programming Language (Swift 2 Prerelease)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The documentation for the various types in Rust’s &lt;code&gt;std::collections&lt;/code&gt; module is hilarious and great. Highly recommended.&lt;/p&gt;
&lt;p&gt;One thing that jumped out at me reading this chapter of the Swift book (though I don’t think it’s been explicitly discussed yet): Rust doesn’t have named parameters; Swift does. There are good reasons for that in both cases, but I suspect this is one of the small details I’ll miss the most in Rust. I’ve been spoiled by Python.&lt;/p&gt;
&lt;p&gt;Swift’s &lt;code&gt;Array&lt;/code&gt; type is analogous to Rust’s &lt;code&gt;Vec&lt;/code&gt; type (usually created with the &lt;code&gt;vec!&lt;/code&gt; macro), &lt;em&gt;not&lt;/em&gt; its &lt;code&gt;Array&lt;/code&gt; type. Rust &lt;code&gt;Vec&lt;/code&gt;s and Swift &lt;code&gt;Array&lt;/code&gt;s are dynamically sized and created on the heap, whereas Rust’s &lt;code&gt;Array&lt;/code&gt;s are statically sized and created on the stack. Syntax for creating &lt;code&gt;Array&lt;/code&gt;s in both languages is quite similar (though the results are different):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swift:
&lt;ul&gt;
&lt;li&gt;Fixed size: &lt;code&gt;let an_array: [Int] = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Variable size: &lt;code&gt;var an_array = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rust:
&lt;ul&gt;
&lt;li&gt;Array: &lt;code&gt;let an_array: [i32, 3] = [1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector: &lt;code&gt;let a_vector: Vec&amp;lt;i32&amp;gt; = vec![1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s the long form, of course; both languages have type inference, so you’d rarely write it like that. The usual form would be with the type in all of those cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swift:
&lt;ul&gt;
&lt;li&gt;Fixed size: &lt;code&gt;let an_array = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Variable size: &lt;code&gt;var an_array = [1, 2, 3]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rust:
&lt;ul&gt;
&lt;li&gt;Array: &lt;code&gt;let an_array = [1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Vector: &lt;code&gt;let a_vector = vec![1, 2, 3];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust also adds the concept of “slices,” which provide access to segments of arrays, and are heap-allocated as pointers to a given item in the array and a length (number of elements) included.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Array&lt;/code&gt; operations in Swift are all pretty reasonable, and surprisingly descriptive. They remind me in a good way of Python’s &lt;code&gt;list&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;There are a &lt;em&gt;lot&lt;/em&gt; of &lt;a href="http://doc.rust-lang.org/stable/std/vec/struct.Vec.html"&gt;ways to interact with &lt;code&gt;Vec&lt;/code&gt;s in Rust&lt;/a&gt;. (That’s not a bad thing.) A bit surprising to me was the absence of an &lt;code&gt;enumerate&lt;/code&gt; method, on &lt;code&gt;Vec&lt;/code&gt; itself, but then I discovered that it exists in the &lt;code&gt;IntoIter&lt;/code&gt; struct in the same module, which fully implements the &lt;code&gt;Iterator&lt;/code&gt; &lt;code&gt;trait&lt;/code&gt;. As a result, it has an &lt;code&gt;enumerate&lt;/code&gt; function returning an &lt;code&gt;Enumerate&lt;/code&gt; &lt;code&gt;struct&lt;/code&gt; instance. (Under the covers, I suspect Swift &lt;code&gt;Array&lt;/code&gt;s just implement an &lt;code&gt;Iterable&lt;/code&gt; &lt;code&gt;protocol&lt;/code&gt;, which is similar to this approach in some ways.)&lt;/p&gt;
&lt;p&gt;This makes a point I’m coming back to fairly often: Rust doesn’t necessarily put everything on a single object definition, but rather into a set of related &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt; types and &lt;code&gt;trait&lt;/code&gt;s. This is really powerful, but it’s going to take some mental adjustment. In this way, Swift’s structure and semantics are much more like the languages I’m used to than Rust’s are (but even there, the use of &lt;code&gt;protocols&lt;/code&gt; gives it considerable new flexibility).&lt;/p&gt;
&lt;p&gt;Note that I said &lt;em&gt;semantics&lt;/em&gt;, not syntax. Swift and Rust are a great example of how very similar syntax can mask differences in semantics. (For another such example, compare JavaScript’s syntax and semantics to Java’s: they’re superficially similar syntactically, and light years apart semantically.)&lt;/p&gt;
&lt;p&gt;Swift’s &lt;code&gt;Set&lt;/code&gt; type and Rust’s roughly analogous &lt;code&gt;HashSet&lt;/code&gt; both have a &lt;code&gt;contains&lt;/code&gt; method which behaves much like Python’s &lt;code&gt;in&lt;/code&gt; keyword. Indeed, and perhaps unsurprisingly, the two types implement many of the same methods in general. This is perhaps to be expected given that the language around sets (as a mathematical concept being mapped down into a representation in a program) is quite standardized.&lt;/p&gt;
&lt;p&gt;Because of their stricter typing systems, both Rust and Swift require you to specify the types used in their mapping constructs (Rust has &lt;code&gt;HashMap&lt;/code&gt; and Swift has &lt;code&gt;Dictionary&lt;/code&gt;), though of course both can infer this as well in certain cases. At the most basic level, you can’t use arbitrary (hashable) types as keys in mixed fashion like you can in e.g. Python’s &lt;code&gt;dict&lt;/code&gt; type, but in practice this shouldn’t matter, for two reasons:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;It’s generally inadvisable to use different types for keys in the same dictionary anyway. To me, at least, that usually indicates the need to step back and think more carefully about the types and data structures I’m using.&lt;/li&gt;
&lt;li&gt;For the occasional case where it &lt;em&gt;is&lt;/em&gt; appropriate, I wonder if you could declare the type as generic in either Rust or Swift. I’m putting this down as a TODO item for myself to find out!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I really wish that Swift used the Python-style curly-brace delimited syntax (&lt;code&gt;{'key': 'value'}&lt;/code&gt;) for its dictionary literal initializers. I can see, from a syntax reason, why it doesn’t: that would overload the block syntax (which Python can avoid because it’s white-space delimited). But it’s &lt;em&gt;really&lt;/em&gt; convenient.&lt;/p&gt;
&lt;p&gt;Along similar lines, I can see why the Swift designers chose to make all iterables have literal initializers using braces (&lt;code&gt;[...]&lt;/code&gt;); it makes parsing fairly straightforward. However, the result is that it’s pretty difficult to see at first glance what you’re dealing with. It could quite easily be an &lt;code&gt;Array&lt;/code&gt;, a &lt;code&gt;Set&lt;/code&gt;, or a &lt;code&gt;Dictionary&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This highlights a too-little-appreciated aspect of programming language design: &lt;em&gt;readability&lt;/em&gt;. However much we programmers enjoy writing code, the reality is that we will all spend a great deal of our time—probably even a majority of it—reading it instead. Thus, while we should care about conveniences for writing code, and being overly verbose can be a pain, we should also concern ourselves with the ease of comprehending code when it is read, and the syntax and conventions a language embraces are a big part of this.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Dictionary&lt;/code&gt; type in Swift is a pretty close analog to Python’s &lt;code&gt;dict&lt;/code&gt;, right down to several of the method names. the same is true of Rust’s &lt;code&gt;HashMap&lt;/code&gt;. That’s not a bad thing by any stretch of the imagination.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-v.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; The value (and challenge) of learning languages in parallel.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Pattern matching and the value of expression blocks.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Set the agenda</title><link href="http://www.chriskrycho.com/2015/set-the-agenda.html" rel="alternate"></link><published>2015-09-16T18:53:00-04:00</published><updated>2015-09-16T18:53:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-16:/2015/set-the-agenda.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;It would be pleasant if, for once, the historians and the theologians could set the agenda for the philosophers, instead of vice versa.&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;It would be pleasant if, for once, the historians and the theologians could set the agenda for the philosophers, instead of vice versa.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>Rust and Swift (v)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-v.html" rel="alternate"></link><published>2015-09-12T13:45:00-04:00</published><updated>2015-09-12T13:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-12:/2015/rust-and-swift-v.html</id><summary type="html">I have been learning Rust and Swift in parallel. I wouldn’t normally recommend this course of action, but I’m finding it enormously profitable. You might, too, under the right circumstances.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I’ve been working on learning Swift over the past couple weeks, and had spent the month prior to that doing a deep first dive on Rust. This kind of approach, learning two languages basically at the same time, is entirely new to me, and for good reason. Programming languages are not trivial to learn, and to learn them meaningfully one must practice with them a great deal.&lt;/p&gt;
&lt;p&gt;I’m doing this largely of necessity. I’m hoping to build an application with a very capable, performant cross-platform core language (Rust), but planning to ship a native OS X app (first) when all is said and done. My desire to make the core libraries portable rules out Swift immediately. To be frank, so does the fact that it’s an Apple language: I am happy to use Apple’s tools on its platform, but I don’t want to shackle myself to their choices in the long run. Too, having good Rust experience is likely to be valuable in many other contexts.&lt;/p&gt;
&lt;p&gt;So I need to learn both.&lt;/p&gt;
&lt;p&gt;And, while I wouldn’t ordinarily recommend this course of action—indeed, unless you already have a fair bit of programming experience and already know several languages, I’d actively recommend against it—I’m finding it enormously profitable. The languages have been designed in roughly the same time frame, cite many of the same influences, and overlap substantially in terms of audience and goals. Yet they are, as this series has already highlighted, quite different languages in many ways.&lt;/p&gt;
&lt;p&gt;Learning them in parallel is helping me see the trade-offs each one has made, and force me to think about &lt;em&gt;why&lt;/em&gt; they differ in the ways they do. In particular, I think I have a much better idea what’s going on “under the covers” in each language and therefore know what to expect of them better. This, in turn, has dramatically deepened my grasp of the languages relative to the amount I’ve been looking at them, compared to previous language-learning efforts. (It also helps that I’ve already learned a number of languages, of course, and that I’ve been pushing my brain into the learning-programming-languages space via reading about Haskell, functional patterns in JavaScript, and so on this year.)&lt;/p&gt;
&lt;p&gt;I have a long way to go in both languages, of course. Reading on nights and weekends, and the little bit of playing I’ve been able to do with each of them, is no replacement for just sinking my teeth into a project and finding the pain points. Nonetheless, I’m really glad to be learning these two languages &lt;em&gt;together&lt;/em&gt;. If you’re up for a challenge, try it sometime! You’ll be surprised how much you learn.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iv.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Language design tradeoffs, highlighted by string manipulation.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-vi.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Collection types and the difference between syntax and semantics.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="software development"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>If-expressions in Rust</title><link href="http://www.chriskrycho.com/2015/if-expressions-in-rust.html" rel="alternate"></link><published>2015-09-12T11:05:00-04:00</published><updated>2015-09-12T11:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-12:/2015/if-expressions-in-rust.html</id><summary type="html">&lt;p&gt;I love the fact that all &lt;code&gt;if&lt;/code&gt; statements in Rust are expressions. It gives you a great deal of expressitivity in the language.&lt;/p&gt;
&lt;p&gt;Let’s contrast with Python (which I love, for the record). In Python, you can do something like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;some_condition = True
if some_condition:
    a_value = &amp;quot;Yeah!&amp;quot;
else:
    a_value …&lt;/code&gt;&lt;/pre&gt;</summary><content type="html">&lt;p&gt;I love the fact that all &lt;code&gt;if&lt;/code&gt; statements in Rust are expressions. It gives you a great deal of expressitivity in the language.&lt;/p&gt;
&lt;p&gt;Let’s contrast with Python (which I love, for the record). In Python, you can do something like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;some_condition = True
if some_condition:
    a_value = &amp;quot;Yeah!&amp;quot;
else:
    a_value = &amp;quot;Oh, sads.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those are &lt;em&gt;statements&lt;/em&gt; in the body of the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; block; you can’t assign the block itself to &lt;code&gt;a_value&lt;/code&gt;. However, like C, C++, Java, etc., Python does provide an &lt;em&gt;expression&lt;/em&gt;-type conditional, a ternary expression.&lt;/p&gt;
&lt;p&gt;So you can also do this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;some_condition = True
a_value = &amp;quot;Yeah&amp;quot; if some_condition else &amp;quot;Oh, sads.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This expression form of the &lt;code&gt;if&lt;/code&gt; block is what all Rust &lt;code&gt;if&lt;/code&gt; blocks are. So in Rust, the normal long form is:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let some_condition = true;
let a_value = if some_condition {
    &amp;quot;Yeah!&amp;quot;
}
else {
    &amp;quot;Oh, sads.&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(You could also write this with a &lt;code&gt;let mut a_value&lt;/code&gt; and then set its value inside the conditional blocks, but that’s not at all good form in Rust.)&lt;/p&gt;
&lt;p&gt;And of course, you can shorten that rather nicely where the expressions are brief enough:&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let some_condition = true;
let a_value = if some_condition { &amp;quot;Yeah!&amp;quot; } else { &amp;quot;Oh, sads.&amp;quot; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this gets really nice when you have more complicated work to do in a Rust conditional. It doesn’t matter how many things going on inside an &lt;code&gt;if&lt;/code&gt; expression; it’s still an expression. As such, you can also write this:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="rust"&gt;&lt;code&gt;let some_condition = true;
let a_value = if some_condition {
    let the_answer = 42;
    let theme = &amp;quot;Take my love, take my land...&amp;quot;;
    &amp;quot;Yeah!&amp;quot;  // An expression!
}
else {
    let the_question = &amp;quot;What do you get when you multiply six by nine?&amp;quot;;
    let song = &amp;quot;You can&amp;#39;t take the sky from me!&amp;quot;;
    &amp;quot;Oh, sads.&amp;quot;  // An expression!
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously this is totally contrived and silly; the point is that no matter what the internals are, &lt;code&gt;if&lt;/code&gt; blocks are expressions, and their final expressions can be assigned like any other.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As a note: I got here because I was originally thinking you couldn’t do a one-liner like you can in Python. As shown above, that’s totally false, and in fact the Rust version is much more capable than Python’s, because you don’t need a dedicated ternary when all &lt;code&gt;if&lt;/code&gt; blocks are expressions. Rust used to have a C-style ternary (&lt;code&gt;&amp;lt;condition&amp;gt; ? &amp;lt;value if true&amp;gt; : &amp;lt;value if false&amp;gt;&lt;/code&gt;) but it was &lt;a href="https://github.com/rust-lang/rust/issues/1698"&gt;removed&lt;/a&gt; during the lead-up to the 1.0 release—a decision I wholeheartedly affirm.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note that under normal conditions the compiler won’t actually accept this because of the unused names.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="programming languages"></category><category term="rust"></category><category term="python"></category></entry><entry><title>On learning to make art</title><link href="http://www.chriskrycho.com/2015/on-learning-to-make-art.html" rel="alternate"></link><published>2015-09-10T21:11:00-04:00</published><updated>2015-09-10T21:11:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-10:/2015/on-learning-to-make-art.html</id><summary type="html">&lt;p&gt;I would not say &lt;a href="/2015/fleet-once-more.html"&gt;the poem&lt;/a&gt; I posted today is particularly good—but I wrote it, and that is something. I want to be writing longer-form, narrative poetry, and this has a &lt;em&gt;little&lt;/em&gt; more of that than what I have been doing lately. I need to start using constraining forms …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I would not say &lt;a href="/2015/fleet-once-more.html"&gt;the poem&lt;/a&gt; I posted today is particularly good—but I wrote it, and that is something. I want to be writing longer-form, narrative poetry, and this has a &lt;em&gt;little&lt;/em&gt; more of that than what I have been doing lately. I need to start using constraining forms (and especially historical forms) once more: that makes for richer, better poetry from me.&lt;/p&gt;
&lt;p&gt;This is significant: we learn how to do certain kinds of creative work (perhaps all creative work!) by closely following the forms and approaches of those who preceded us. This is just as true of composing music as of poetry.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;An aside: the fact that the final words of the first and third, and second and fourth stanzas of that poem are the is a total coincidence. There is a greater degree of serendipity in art—or at least, in my art—than would boost my ego to let on. But ego-boosting be damned.&lt;/p&gt;
</content></entry><entry><title>Rust and Swift (iv)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-iv.html" rel="alternate"></link><published>2015-09-10T21:05:00-04:00</published><updated>2015-09-10T21:05:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-10:/2015/rust-and-swift-iv.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Both Swift and Rust directly address the issue of having to worry about memory allocation and safety. They do it in different ways, though: Swift by automatic reference counting, Rust by its concept of ownership. For a lot of day-to-day development, I can see the Swift approach being a win for the same reason a language like Python or Ruby is: having that all handled for you is &lt;em&gt;nice&lt;/em&gt;. Having the power Rust gives you comes at the price of increased cognitive load from having to reason about ownership.&lt;/p&gt;
&lt;p&gt;To put it another way: all programming languages have to make trade offs. Although I like Rust’s better than Swift’s so far, I’ve no doubt I will find any number of things to appreciate about Swift over Rust. You can’t have everything.&lt;/p&gt;
&lt;p&gt;This caught my attention in part because dealing with things like strings (or other pass-by-value types) in Swift is rather more straightforward than in Rust. The outcomes are much the same, but since &lt;em&gt;all&lt;/em&gt; &lt;code&gt;String&lt;/code&gt;s in Swift are passed by value (never by reference), you simply don’t have to think about modification—even safe modification!&lt;/p&gt;
&lt;p&gt;Rust of course had the &lt;code&gt;Copy&lt;/code&gt; trait which lets you do this, but the point is that the “ergonomics” are slightly nicer in Swift.&lt;/p&gt;
&lt;p&gt;Also, the string interpolation Swift does is &lt;em&gt;nice&lt;/em&gt;. That’s one thing I really wish Rust had. It’s Python-style string formatting macro is great, but being able to interpolate values (&lt;code&gt;&amp;quot;strings with \(variables)&amp;quot;&lt;/code&gt; or even &lt;code&gt;&amp;quot;embedded expressions like \(2 + 4)&amp;quot;&lt;/code&gt;) is very nice.&lt;/p&gt;
&lt;p&gt;Swift’s approach to strings in general seems well-thought-through and gives appropriate levels of attention to the details which make handling complex or non-Western languages much more manageable. As a typography geek, I appreciate this a great deal.&lt;/p&gt;
&lt;p&gt;That said, since Swift’s strings &lt;em&gt;do&lt;/em&gt; handle all those edge cases for Unicode, you lose some standard string access patterns and lose much (maybe all?) insight into the internal structure of the string. That may be good, and may be bad, depending on the circumstance. Like I said: trade-offs.&lt;/p&gt;
&lt;p&gt;Actually, on reading further, the way Swift handles Unicode strings is pretty nice. It &lt;em&gt;does&lt;/em&gt; give you insight into those, via specific methods for different representations. I particularly appreciate that it’s you deal with them as the standalone &lt;code&gt;String&lt;/code&gt; type as well as giving you direct access to the code points—and not just one Unicode code point set, but any of &lt;abbr&gt;UTF8&lt;/abbr&gt;, &lt;abbr&gt;UTF16&lt;/abbr&gt;, or &lt;abbr&gt;UTF32&lt;/abbr&gt; (Unicode scalars). Trust Apple to pay close attention to text.&lt;/p&gt;
&lt;p&gt;Rust’s strings are &lt;em&gt;good&lt;/em&gt;, but not quite as sophisticated (presumably for simplicity around the memory mapping). All Rust &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;str&lt;/code&gt; instances are composed of &lt;abbr&gt;UTF32&lt;/abbr&gt; Unicode scalars, encoded as &lt;abbr&gt;UTF8&lt;/abbr&gt; sequences. It doesn’t have some of the convenience methods Swift does for getting any of the other representations. That said, I expect this should show up rarely if at all in my ordinary usage. Importantly, the fundamental storage is the same: both use scalars.&lt;/p&gt;
&lt;p&gt;This was the first section where it didn’t feel like Rust was just a clear overall “winner” over Swift. Some of the trade offs between the language designs are more apparent here, and I do appreciate the “ergonomics” of Swift in a number of these things.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Operators, including overloading, and thoughts on brevity.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-v.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; The value (and challenge) of learning languages in parallel.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>fleet once more</title><link href="http://www.chriskrycho.com/2015/fleet-once-more.html" rel="alternate"></link><published>2015-09-10T13:00:00-04:00</published><updated>2015-09-10T13:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-10:/2015/fleet-once-more.html</id><summary type="html">&lt;div class="line-block"&gt;Every time I step out to take a run,&lt;br /&gt;
    it seems the clouds roll back,&lt;br /&gt;
    the sun begins to shine,&lt;br /&gt;
    intensifies its radiance and heat.&lt;br /&gt;
This makes for great discomfort, toil,&lt;br /&gt;
    as sweat rolls down my brow&lt;br /&gt;
    and heart rate climbs too quick,&lt;br /&gt;
    requires me to slow and sweat the …&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;Every time I step out to take a run,&lt;br /&gt;
    it seems the clouds roll back,&lt;br /&gt;
    the sun begins to shine,&lt;br /&gt;
    intensifies its radiance and heat.&lt;br /&gt;
This makes for great discomfort, toil,&lt;br /&gt;
    as sweat rolls down my brow&lt;br /&gt;
    and heart rate climbs too quick,&lt;br /&gt;
    requires me to slow and sweat the more.&lt;br /&gt;
It frustrates, irritates, annoys me,&lt;br /&gt;
    that though I wish to speed,&lt;br /&gt;
    to cruise along, to glide,&lt;br /&gt;
    but quickly—not clodding in the heat.&lt;br /&gt;
Even so, I step out the door again:&lt;br /&gt;
    someday cooler airs, or cloudy skies,&lt;br /&gt;
    or both will come, and gladly&lt;br /&gt;
    I will find my feet are fleet once more.&lt;/div&gt;
</content><category term="poetry"></category><category term="fitness"></category></entry><entry><title>Spirit Empowered Preaching</title><link href="http://www.chriskrycho.com/2015/spirit-empowered-preaching.html" rel="alternate"></link><published>2015-09-08T12:05:00-04:00</published><updated>2015-09-08T12:05:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-08:/2015/spirit-empowered-preaching.html</id><summary type="html">&lt;p&gt;Arturo G. Azurdia III spent several decades preaching and pastoring. He was thus well-experienced in the week-to-week work of preparing sermons and the burden of caring for a congregation. During his years of pastoral work, however, he also studied at Westminster Theological Seminary; he was at the time of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Arturo G. Azurdia III spent several decades preaching and pastoring. He was thus well-experienced in the week-to-week work of preparing sermons and the burden of caring for a congregation. During his years of pastoral work, however, he also studied at Westminster Theological Seminary; he was at the time of the book’s publication a professor at Western Seminary. Thus, he also brought to the table academic knowledge helpful for situating his developing understanding of the role of the Holy Spirit in a preaching ministry. Accordingly, Azurdia brings both Scripture and experience to bear in &lt;em&gt;Spirit Empowered Preaching&lt;/em&gt;: the lessons he learned in seminary, he then applied in the context of his ongoing ministry, and was able to filter his experience through careful reflection on the Scriptures. &lt;em&gt;Spirit Empowered Preaching&lt;/em&gt; was published not at the beginning of that career, but after considerable time behind the pulpit of an ordinary church, after he had moved into a teaching role.&lt;/p&gt;
&lt;p&gt;Azurdia’s aim in &lt;em&gt;Spirit Empowered Preaching&lt;/em&gt; is twofold: to demonstrate the necessity of the Holy Spirit’s work in the preacher for effective preaching, and to describe how the preacher should go about seeking the Spirit’s work in his preaching. He argues in his introduction that “the greatest deficiency in contemporary expositional ministry is powerlessness; in other words, preaching that is devoid of the vitality of the Holy Spirit” (12). That is, although right preaching necessarily entails careful exegesis and attention to the “literal, grammatical, historical, contextual, redemptive” details of a text (11), no amount of mere intellectual study on its own will accomplish God’s purposes for preaching. If the church is to be encouraged, challenged, and built up; and if outsiders are to be convicted, the Holy Spirit must be present and working efficaciously through the preacher. Only the Spirit can change human hearts. This was true for the early church, and it is true today.&lt;/p&gt;
&lt;p&gt;Azurdia lays out his thesis in a brief introduction. Following that, he does not simply repeat the thesis chapter by chapter, however. Instead, he builds a broader theology of preaching and connects the different elements of the preaching ministry back to the central theme of the text. Thus, in Chapter 1, he starts by arguing that the “greater works” the disciples would do were the advancement of the gospel through the nations, and notes how Christ explicitly tied this to the coming of the promised Holy Spirit. The advance of the gospel was for the disciples, and is for modern preachers, utterly dependent on the work of God. Chapter 2 describes who the Spirit is and what he does in the life of the minister—and what goes wrong in the ministry when the Spirit is neglected. In Chapter 3, Azurdia argues for Christocentric preaching, since the Spirit is &lt;em&gt;Christ’s&lt;/em&gt; Spirit and glorifies him. Chapter 4 carries this theme further: the priority of every preacher must be glorifying Christ, not merely meeting the felt needs of the people. Every topic must be heard in light of the finished work of the Savior, not standing on its own as abstract ethical instruction. In Chapter 5, he argues that the first responsibility of both the minister and the church is preaching—and that, as such, the church should understand when the pastor spends most of his time preparing for sermon delivery, rather than on other concerns. Here he also takes time to critique ministry methodologies which do not align with the gospel, especially those in many seeker-sensitive churches which have run to extremes of entertainment.&lt;/p&gt;
&lt;p&gt;In Chapter 6, Azurdia comes to the core of his message: the preacher must be both generally filled with the Spirit (i.e. regenerate) and specifically filled time and again by the Spirit for preaching. Here he draws upon the frequent language of being “filled with the Holy Spirit” in Acts as well as the affirmations of preachers like Martyn Lloyd Jones. Chapter 7 is an examination of the flip-side of the necessity of the Spirit’s filling: the frustration of the pastor’s own inability. If the work of the Spirit is utterly essential for preaching to have any effect whatsoever, then all the pastor’s efforts may be for naught. This may lead to either despair (for the self-dependent man) or greater faith (for the man who trusts Christ).&lt;/p&gt;
&lt;p&gt;In Chapter 8, Azurdia turns to the nature and life of a man called to this ministry: he “&lt;em&gt;must devote himself to a consistent pattern of fervent intercession&lt;/em&gt;” (135, emphasis original). That the Spirit must be present for preaching to be effective is not grounds for pastors to abdicate their own responsibility. Rather, it increases their responsibility to pray for the Spirit to work through their preaching. Chapter 9 continues this focus on the life of the preacher. He must be prayerful, diligent in study, and prayerful in his study. He must remember in all this prayer that the Spirit is not a &lt;em&gt;tool&lt;/em&gt; but a &lt;em&gt;person&lt;/em&gt;, someone who can be grieved. The preacher must keep himself holy, and so must his congregation—because either may drive away the Spirit by their unrepentance. Chapter 10 illustrates and emphasizes this necessity of prayer in the life of both preacher and congregation. Finally, Azurdia briefly summarizes his argument: “&lt;em&gt;Spirit empowered preaching is the principle means of advancing the kingdom of God…. will be evangelical in emphasis…. is the responsibility of the church&lt;/em&gt;” (179–181, emphasis original).&lt;/p&gt;
&lt;p&gt;The book is persuasive and thorough, but neither as effective or as persuasive as it might have been. Azurdia’s comments on the “greater ministry” the disciples were to have are perhaps the most helpful material in the book. In general, his attention to the roles the Spirit plays in the life of the church is a helpful corrective both to the neglect the Spirit often receives from non-charismatic churches and the misinterpretations proffered by many in the charismatic movement. Likewise, his call to prayerful as well as well-studied preaching is a helpful reminder especially for preachers tempted to rely on their own intellectual merits. Gladly, and unlike E. M. Bounds’ work on prayer, he does so without ever denigrating the value of intellectual engagement and deep study. Azurdia’s counsel to study hard, pray hard, and pray during the time of study is well-taken. Those who preach should devote meaningful parts of their preparation time not only to exegesis but to fellowship with God by &lt;em&gt;prayerful&lt;/em&gt; interaction with the text.&lt;/p&gt;
&lt;p&gt;Perhaps the greatest strength of the book is Azurdia’s emphasis on the nature and person of the Spirit. As noted above, he refuses to indulge in the mistaken charismatic emphases on the miraculous gifts over the more central work of the Spirit: revealing Christ. All the focus on sign gifts can quickly lead people to forget that the Spirit was sent to make Christ known and glorify him. His diagnostic question is extremely helpful (and not only for evaluating charismatics, but for evaluating anyone claiming God’s hand on his ministry): “&lt;em&gt;Does this ministry reveal and glorify Jesus Christ?&lt;/em&gt;” (50, emphasis original). Again, the Spirit is the spirit of truth, sent by the Father to empower the church to know and make known the Son. As such, no ministry which claims the Spirit’s power but focuses on anything other than knowing and proclaiming Christ is legitimate. At the same time, this does not mean the church should shun the Spirit to avoid those missteps—rather, the church should point to a better understanding of the Spirit’s mission, and respond in faith. A church that understands the Spirit’s proclamatory and instructing role will follow Azurdia’s counsel and dedicate itself to prayer, cognizant that apart from the Spirit the church and her pastor can do nothing. Congregations should also learn to ask that same question of &lt;em&gt;all&lt;/em&gt; sermons and preachers and experiences: does it reveal and glorify Jesus Christ?&lt;/p&gt;
&lt;p&gt;However, weaknesses emerge in a number of areas which substantially lessen the book’s impact. First, Azurdia makes the same move many Reformed and evangelical preachers do, elevating the preaching of the word to the primary (and nearly the sole) responsibility of the preacher. This move seems unwarranted in light of the distinction between ordinary pastors and the apostles on whose actions (in Acts 6) the view is grounded. As such, Azurdia simply passed over the many other responsibilities enjoined of shepherds in the pastoral epistles. To be sure, preaching is a necessity in the life of the church. However, it is only one of the pastor’s responsibilities, and he will find it difficult to carry it out effectively if he is not sharing life with his sheep. Thus, pastors ought to dedicate much of their time to &lt;em&gt;shepherding&lt;/em&gt;: to caring for the ordinary soulish needs of their people and not only for the times of preaching. This is doctrinally necessary, and practically helpful.&lt;/p&gt;
&lt;p&gt;More problematic was Azurdia’s conflation of the Spirit’s filling with an experience or sense of that filling. Like Lloyd-Jones and others he cites, Azurdia describes the anointing or unction of the Spirit as a particular sense the preacher and congregation have of the Spirit’s working through him in a unique way. Curiously, Azurdia also affirms that there may be times the Spirit is moving powerfully but the preacher is unaware of it, as in the common case of a man who preached and felt it accomplished nothing but heard later from members of his congregation how the Spirit used it in their lives. Too often in evangelicalism, &lt;em&gt;feeling&lt;/em&gt; is mistaken for &lt;em&gt;reality&lt;/em&gt;. Nowhere in the New Testament is the Spirit’s presence described in terms of a feeling in the preacher. Rather, it is born out by the effects of the preaching. To be sure, the Spirit may graciously grant the pastor a clear sense of his presence and power on some days, and that sense is a blessing. However, the absence of such a sense does not indicate the Spirit’s absence; neither does a strong feeling necessarily indicate his presence in power. In encouraging pastors to think in these terms, Azurdia ultimately plants seeds of discouragement in the lives of those who may preach diligently and prayerfully—and effectively—for many years without that particular experience, which is promised no one. As he notes of many experiences in charismatic circles, “we need to be concerned that the spiritual development of well-meaning Christians can become vulnerable to the law of diminishing returns… Often, the inevitable consequence is spiritual emptiness” (49). This is no less a danger for the preacher expecting a strong internal sense of anointing than for the believer wanting a fresh anointing for speaking in tongues. Preachers should indeed dedicate themselves to prayer and come with an expectation that they can accomplish nothing on their own, but they should reject as unbiblical and unhelpful the idea that their internal sense of the Spirit’s presence is accurate or indicative of his work.&lt;/p&gt;
&lt;p&gt;Still, on the whole, Azurdia’s point is well-taken. The church desperately needs the Holy Spirit for her efficacy in ministry. Lives will not change unless God works: sermons will fall on deaf ears, and congregations’ ministries may produce physically helpful outcomes while leaving sinners damned. Preachers and their people must recover prayerful dependence on the third person of the Trinity. They must ask constantly of their ministries, “Does this show Christ clearly and make him look glorious?” They must plead for the Spirit to come and work. But (contra Azurdia) they must never mistake their perceived experience of the Spirit for the actual work of the Spirit.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="papers"></category><category term="book reviews"></category></entry><entry><title>Rust and Swift (iii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-iii.html" rel="alternate"></link><published>2015-09-07T11:55:00-04:00</published><updated>2016-03-12T23:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-07:/2015/rust-and-swift-iii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I just hit operators in the Swift book. First question: are operators special syntax, or are they sugar for &lt;code&gt;protocol&lt;/code&gt;s? (Every modern language I use or even have played with handles them as sugar for another language construct—Python, Ruby, Io, Elixir, and Rust, to name just a few ranging over a substantial variety of ages and styles.)&lt;/p&gt;
&lt;p&gt;Oh. I did the requisite digging, and operators are functions (which is okay) defined in the &lt;del&gt;global namespace (&lt;em&gt;:sigh:&lt;/em&gt;)&lt;/del&gt; Swift module.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I say “okay” rather than good because the justification offered is that this is the only way to make the operators work as binary operators between existing instances of types. But that elides the fact that, if that’s the case, it is so because of other language design decisions. This seems like a perfect place to use a &lt;code&gt;protocol&lt;/code&gt;, but perhaps (unlike Rust’s &lt;code&gt;trait&lt;/code&gt;) they’re not sufficiently capable to handle this? That’s an open question; I have no idea about the answer.&lt;/p&gt;
&lt;p&gt;Interestingly, Rust has several fewer operators than Swift, even apart from those mentioned in my &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;previous post&lt;/a&gt;. It drops the pre- and post-increment operators entirely (as does Python), since their results can always be accomplished in other ways with less potential for confusion. Swift keeps them, no doubt in part because most (Objective) C programs are deeply familiar with them and with idioms associated with them.&lt;/p&gt;
&lt;p&gt;I learned a few new things about Rust’s operators as well: the Boolean &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators and its bitwise &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt; operators differ not only in that the former are &lt;em&gt;short-circuit&lt;/em&gt; operators and the latter are not. Obviously you can also do things like bit-wise flag operations with the latter, but the reference emphasizes the short-circuiting behavior. This makes perfect sense, but it wasn’t something I’d ever considered explicitly before.&lt;/p&gt;
&lt;p&gt;There is no ternary operator in Rust, because of how it handles the relationship between expressions and statements. Swift keeps it. That’s an interesting reflection of differences in design: Rust dropped it because &lt;code&gt;if&lt;/code&gt; blocks are expressions, so it’s redundant, and they have had a goal of removing unnecessary features. (See the discussion on dropping the ternary operator—with an interesting aside from Brendan Eich on JavaScript—&lt;a href="https://github.com/rust-lang/rust/issues/1698"&gt;here&lt;/a&gt;). Note that this is not a criticism of Swift, just an observation, though I do really like Rust’s expression-driven approach.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;??&lt;/code&gt; “nil coalescing operator”, on the other hand, I actively dislike. This seems like shorthand for the sake of shorthand, partly necessitated by the existing drive toward shorthand with optional types in Swift. Sometimes brevity can lead to decreased clarity. Eliding too much, or subsuming it into shorthand, makes the language harder to hold in your head and requires you to slow down more for parsing each line.&lt;/p&gt;
&lt;p&gt;Nothing surprising (or different) between the standard boolean operators in the two languages.&lt;/p&gt;
&lt;p&gt;I wonder how many times the word “concise” (or synonyms of it) appear in the Swift book? It’s increasingly clear to me reading that brevity is one of the primary design goals. Maybe it’s just me, but that actually seems a little weird. Brevity is good so far as it goes, but &lt;em&gt;legibility&lt;/em&gt; is much better.&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Basic types and the syntax around them.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iv.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Language design tradeoffs, highlighted by string manipulation.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;See edit in discussion of functions and global namespace in &lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;part ii&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>Rust and Swift (ii)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html" rel="alternate"></link><published>2015-09-06T10:20:00-04:00</published><updated>2016-03-12T23:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-06:/2015/rust-and-swift-ii.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I am reading through the Swift book, and comparing it to Rust, which I have also been learning over the past month. As with the other posts in this series, these are off-the-cuff impressions, which may be inaccurate in various ways. I’d be happy to hear feedback! Note, too, that my preferences are just that: preferences. Your tastes may differ from mine. &lt;a href="/rust-and-swift.html"&gt;(See all parts in the series.)&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;At first blush, I find the extra syntax around optionals in Swift more confusing than helpful. I think this comes down to my preference for a more Python-like approach: “Explicit is better than implicit” and “There should be one– and preferably only one –obvious way to do it” both militate against the multiple different ways you can handle optional values in Swift. &lt;code&gt;Optional&lt;/code&gt; types are created in one of two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;with the &lt;code&gt;?&lt;/code&gt; operator on a type definition, creating an explicitly wrapped type which must be checked in some way.&lt;/li&gt;
&lt;li&gt;with the &lt;code&gt;!&lt;/code&gt; operator on a type definition, creating an “implicitly unwrapped optional” by forcibly unwrapping it (and creating a runtime error if the optional is empty)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After creating an optional, you can get at its contents by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using the &lt;code&gt;if let&lt;/code&gt; or &lt;code&gt;while let&lt;/code&gt; constructs to bind the optional value’s non-&lt;code&gt;nil&lt;/code&gt; value for a block&lt;/li&gt;
&lt;li&gt;using the &lt;code&gt;!&lt;/code&gt; operator on a variable name, explicitly unwrapping it (and creating a runtime error if the optional is empty)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By contrast, in Rust you always have to explicitly unwrap the item, using the &lt;code&gt;unwrap&lt;/code&gt; method or pattern matching. There are no implicitly unwrapped types. Moreover, there is no special syntax around creating optional types in Rust: you just declare them with an &lt;code&gt;Option&lt;/code&gt; type or another type that &lt;code&gt;impl&lt;/code&gt;s the &lt;code&gt;Option&lt;/code&gt; behavior. The “shortcut” behavior around error handling, &lt;code&gt;try!&lt;/code&gt;, isn’t special syntax, but application of another standard language construct (in this case, a macro).&lt;/p&gt;
&lt;p&gt;The discussion of &lt;code&gt;assert&lt;/code&gt; in the Swift book re-raises the question about the global namespace:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“You write an assertion by calling the global &lt;code&gt;assert(_:_:)&lt;/code&gt; function.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This continues to suggest strongly that Swift does in fact have a true global namespace, &lt;em&gt;not&lt;/em&gt; an automatically-imported prelude. That can make a big difference for applications in certain spaces (e.g. systems programming), when you might have good reason to want to replace the standard library’s approach with a different one. (See Rust’s &lt;a href="https://doc.rust-lang.org/book/no-stdlib.html"&gt;&lt;code&gt;#[no_std]&lt;/code&gt;&lt;/a&gt; docs and the &lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/1184-stabilize-no_std.md"&gt;related RFC&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; “strongly suggests” or no, I have now been &lt;a href="https://twitter.com/jckarter/status/708765262309228544" title="Tweet by one of the Swift developers"&gt;reliably informed&lt;/a&gt; that I was mistaken—and am happy to have been wrong here. As in Haskell, these functions are implicitly imported and belong to the &lt;code&gt;Swift&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;In Rust, &lt;code&gt;assert!&lt;/code&gt; is a macro, not a function, which is an interesting but perhaps not &lt;em&gt;especially&lt;/em&gt; important distinction in this particular case. (It might be, though; I’d have to see the implementation of each to see how they play out differently.)&lt;/p&gt;
&lt;p&gt;In any case, this also highlights another large difference between the two: testing is &lt;a href="https://doc.rust-lang.org/stable/book/testing.html"&gt;front and center&lt;/a&gt; in Rust, and barely receives a mention so far in the Swift book (and isn’t in the table of contents). Having language-level support for testing is a big deal.&lt;/p&gt;
&lt;p&gt;Language tour and first chapter of the language guide down, my sense is that Swift is a substantially better language than C or C++ (and presumably than Objective C, but since I don’t know that language I can’t speak to it) for app design, but that Rust is a better language yet. Both a far more modern than their predecessors, but they approach the same problems in surprisingly different ways, relatively similar syntax notwithstanding. So far, I like the Rust approach better.&lt;/p&gt;
&lt;p&gt;In particular, more syntax is not my preferred way to tackle these things. Providing good language constructs and primitives on which to build seems better in &lt;em&gt;many&lt;/em&gt; ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It substantially reduces the cognitive load for the developer, by keeping the number of constructs small and simply varying how they are applied.&lt;/li&gt;
&lt;li&gt;It increases the quality of those primitives, because it forces the language deadness to make sure they actually address the full problem space.&lt;/li&gt;
&lt;li&gt;It lets developers approach the same problem in ways the language design team may not have anticipated, and over time the community may find shared conventions that improve on the &lt;code&gt;std&lt;/code&gt; approach, and nothing has to change in the language spec (or the compiler!) to adopt those changes.&lt;/li&gt;
&lt;li&gt;In general, then, it makes change much easier to manage, and change can be community-driven rather than requiring the language design team to manage it.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-i.html"&gt;&lt;strong&gt;Previous:&lt;/strong&gt; Thoughts after reading the introduction to the Swift book.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-iii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Operators, including overloading, and thoughts on brevity.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This may of course be intentional on Apple’s part with Swift. Maintaining tight control over its tooling is very typical of modern Apple.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category><category term="programming languages"></category></entry><entry><title>Rust and Swift (i)</title><link href="http://www.chriskrycho.com/2015/rust-and-swift-i.html" rel="alternate"></link><published>2015-09-04T22:59:00-04:00</published><updated>2015-09-07T13:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-04:/2015/rust-and-swift-i.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;I started writing these responses in a Slack channel of developers I participate in as I worked through the &lt;a href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt; &lt;a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/"&gt;book&lt;/a&gt;. I realized after a bit that it would make a better blog post than chat room content, so here we are. This is all entirely off-the-cuff: me just thinking …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;I started writing these responses in a Slack channel of developers I participate in as I worked through the &lt;a href="https://developer.apple.com/swift/"&gt;Swift&lt;/a&gt; &lt;a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/"&gt;book&lt;/a&gt;. I realized after a bit that it would make a better blog post than chat room content, so here we are. This is all entirely off-the-cuff: me just thinking out loud as I read; this is by no means expert opinion.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=editorial&gt;I later turned this into the first part of a whole &lt;a href="/rust-and-swift.html"&gt;series&lt;/a&gt; comparing Rust and Swift!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;..&amp;lt;&lt;/code&gt; – seriously?&lt;/p&gt;
&lt;p&gt;That has to be one of the most annoying operators I’ve ever seen. It ends up with cognitive noise because &lt;code&gt;&amp;lt;name&lt;/code&gt; initially processes as “starting a generic” and you have to re-parse it visually and mentally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the first chapter of the Swift book, my impression is “a poor man’s Rust”; my gut feel based on that first pass and everything I’ve seen and read about Swift over the past two years is that it’s roughly what you would get if you took Rust’s syntax and replaced Rust’s hard safety goals with the aim of mapping to ObjC semantics. (To be fair to Apple, that interoperability was probably necessary.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An example that jumps out at me as immediately illustrative of the difference in approach the languages take is the way you pass structures by reference vs. copy. In Swift, that’s done via two completely distinct language constructs, &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;class&lt;/code&gt;es respectively.&lt;/p&gt;
&lt;p&gt;In Rust, there is just the &lt;code&gt;struct&lt;/code&gt; type to handle both of those. They’re immutable unless you declare them with &lt;code&gt;mut&lt;/code&gt;, and you can pass them via copy simply by implementing the &lt;code&gt;Copy&lt;/code&gt; &lt;code&gt;trait&lt;/code&gt; (which seems roughly analogous to Swift’s &lt;code&gt;protocol&lt;/code&gt;, but I’ve not yet dig deeply enough to see how they differ). Those things aren’t baked into the language, but use simpler language building blocks to define behavior into he library.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I saw someone do a write up a while back arguing that Go isn’t a &lt;em&gt;bad&lt;/em&gt; language, it just isn’t a &lt;em&gt;good&lt;/em&gt; language. My first impression of Swift, after having spent the last month with Rust, is very much along those lines.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Huh. Here’s something that I appreciate about Rust, Haskell, and others now that I didn’t before: there’s a difference between implicitly/automatically importing a prelude or a given set of standard library functions, and having actually global functions. Does Swift actually have functions like &lt;code&gt;print&lt;/code&gt; in a global namespace, as the book seems to imply, or they being imported automatically &lt;em&gt;a la&lt;/em&gt; Rust/Haskell/etc.?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; it appears Swift does likewise, but that you can’t access the relevant module directly. Which is halfway there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hmm. Why have &lt;code&gt;Double&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;Float&lt;/code&gt;—just for ObjC interop, I guess?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; follow-up from a conversation with a friend: it’s because you have 32- and 64-bit architectures out there; sometimes you don’t want 64 bits of floating point precision for that reason. Note that Rust &lt;em&gt;also&lt;/em&gt; has this distinction; you can declare things as &lt;code&gt;f32&lt;/code&gt; or &lt;code&gt;f64&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extending the above note on &lt;code&gt;class&lt;/code&gt;es and &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;protocol&lt;/code&gt;s vs. Rust’s approach: the same thing is true about &lt;code&gt;extension&lt;/code&gt;, which is a distinct concept from implementing a &lt;code&gt;protocol&lt;/code&gt;; again, in Rust these are both just handled with a single language construct, &lt;code&gt;impl&lt;/code&gt;. That’s not because &lt;code&gt;impl&lt;/code&gt; is overloaded, but rather because the underlying language machinery is the same for the two things. (edited)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(I’ve a feeling learning Swift is going to turn me into even more of a Rust fanboy.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reading the two books in close sequence like this is proving really productive mentally for thinking about how the two handle the same issues. I’ve never done anything quite like this before, and it’s fascinating.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have an increased appreciation for Rust’s use of semi-colons to turn expressions into statements, and thereby to distinguish clearly between the two (among other things, allowing for implicit return of anything that’s an expression).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another interesting comparison: Rust’s &lt;code&gt;match&lt;/code&gt; and Swift’s &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; fill the same role of pattern matching. I’m curious to see how they differ. Does Swift do matching on arbitrary expressions?&lt;/p&gt;
&lt;p&gt;Also, I see where the syntax choices came from in both, and while I slightly prefer Rust’s, I think both make reasonably good sense; Swift’s will understandably be more familiar to C and ObjC programmers, and that’s a perfectly defensible approach. Seen that way, it is expanding on the C-style construct (even if it’s actually doing something substantially more sophisticated than that under the hood by being a form of actual pattern matching).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2015/rust-and-swift-ii.html"&gt;&lt;strong&gt;Next:&lt;/strong&gt; Basic types and the syntax around them.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="listicles"></category><category term="programming languages"></category><category term="rust"></category><category term="swift"></category><category term="rust-and-swift"></category></entry><entry><title>He who knew no sin...</title><link href="http://www.chriskrycho.com/2015/he-who-knew-no-sin.html" rel="alternate"></link><published>2015-09-01T16:16:00-04:00</published><updated>2015-09-01T16:16:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-09-01:/2015/he-who-knew-no-sin.html</id><summary type="html">&lt;p&gt;This is one of the single most beautiful sentences in the Bible, and it is &lt;em&gt;incredible&lt;/em&gt; in the original:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;τὸν μὴ γνόντα ἁμαρτίαν ὑπὲρ ἡμῶν ἁμαρτίαν ἐποίησεν, ἵνα ἡμεῖς γενώμεθα δικαιοσύνη θεοῦ ἐν αὐτῷ.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He made the one who knew no sin to be sin for us—so …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This is one of the single most beautiful sentences in the Bible, and it is &lt;em&gt;incredible&lt;/em&gt; in the original:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;τὸν μὴ γνόντα ἁμαρτίαν ὑπὲρ ἡμῶν ἁμαρτίαν ἐποίησεν, ἵνα ἡμεῖς γενώμεθα δικαιοσύνη θεοῦ ἐν αὐτῷ.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He made the one who knew no sin to be sin for us—so that we might become God’s righteousness in him.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>On Editing Podcasts</title><link href="http://www.chriskrycho.com/2015/on-editing-podcasts.html" rel="alternate"></link><published>2015-08-24T20:16:00-04:00</published><updated>2015-08-28T19:51:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-24:/2015/on-editing-podcasts.html</id><summary type="html">Most podcasts are more like blog posts than magazine articles. (That doesn't mean you shouldn't edit, them, though!)
</summary><content type="html">&lt;p&gt;Last week, Alan Jacobs posted &lt;a href="http://text-patterns.thenewatlantis.com/2015/08/podcasts.html"&gt;a few thoughts&lt;/a&gt; on the overall quality of podcasts. While he’s &lt;a href="http://text-patterns.thenewatlantis.com/2015/08/podcasts-redux.html"&gt;since acknowledged&lt;/a&gt; that part of his challenge with podcasts is that his bar is extremely high, I think his original piece bears quoting and responding to briefly, including a few thoughts about how Stephen and I handle &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From his piece:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Podcasts, overall, are&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;People struggling to articulate for you stuff you could find out by looking it up on Wikipedia (e.g. In Our Time);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People using old-timey radio tricks to fool you into thinking that a boring and inconsequential story is fascinating (e.g. Serial);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People leveraging their celebrity in a given field as permission to ramble incoherently about whatever happens to come to their minds (e.g. The Talk Show); or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People using pointless audio-production tricks to make a pedestrian story seem cutting-edge (e.g. Radiolab).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;I actually happen to basically agree with those critiques. However, one category he left out is: &lt;em&gt;people podcasting the way people blog&lt;/em&gt;. And this is where many of the most interesting podcasts I listen to come in. It’s also basically where Winning Slowly fits: you can think of our show like an audio version of a blog post. It’s not as carefully considered or edited as a long-form magazine piece (or, in its respective medium, a professionally produced radio show). But like blog posts, the fact that it’s a bit more off the cuff and that it’s &lt;em&gt;not&lt;/em&gt; the incredibly tight work that you find in a magazine can actually be attractive at times. Many of my favorite podcasts are very conversational and not heavily produced.&lt;/p&gt;
&lt;p&gt;But—and here I think Jacobs is absolutely correct—all of the shows I really enjoy make a point to edit their shows. They clean up the audio from artifacts, they cut segments that were off topic, they make sure the levels are good between the different members of the podcast, and so on. And while you don’t have to do those things to have a podcast, any more than you need to edit the things you write to have a blog, you do need to do them if you want to have a &lt;em&gt;good&lt;/em&gt; show. Sadly, this is where a number of shows I otherwise might enjoy show themselves to the door.&lt;/p&gt;
&lt;p&gt;There is a reason Stephen and I spent a whole &lt;a href="http://www.winningslowly.org/season-0.html"&gt;“beta” season&lt;/a&gt; of &lt;a href="http://www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; working not only on what we wanted the show to be about, but finding its voice and tone, the structure of the episodes, and the quality of our audio. We wrestled with the audio output from mediocre microphones and adopted seemingly silly practices like putting blankets over our heads and microphones and laptops while recording so that we can get better sound spaces. We have taken the time to learn about compression and limiting and other audio editing techniques, and work hard to get the mix between our intro and outro music and our own voices correct. And we cut things mercilessly.&lt;/p&gt;
&lt;p&gt;For example, here is the blooper reel from &lt;a href="http://www.winningslowly.org/3.05/"&gt;3.05&lt;/a&gt;, which consists of only the &lt;em&gt;funny&lt;/em&gt; parts of what I cut from the show (there was probably as much again that I just removed and didn’t include):&lt;/p&gt;
&lt;audio class="media-embed" title="3.05 Bloopers" controls preload="metadata"&gt;
&lt;source src="http://www.podtrac.com/pts/redirect.m4a/cdn.winningslowly.org/3.05-bloopers.m4a"&gt;
&lt;source src="http://www.podtrac.com/pts/redirect.mp3/cdn.winningslowly.org/3.05-bloopers.mp3"&gt;
&lt;/audio&gt;
&lt;p&gt;That doesn’t begin to touch all the “umms” and long pauses and overly heavy breathing and do-overs we cut out (though, because this was a particularly rough episode, it does give you an idea). The result, as I think most of our listeners would agree, is a show that’s pretty tight as far as the audio goes.&lt;/p&gt;
&lt;p&gt;In terms of content, different shows will have a different feel, of course. Some will require more planning. &lt;a href="http://www.newrustacean.com/"&gt;New Rustacean&lt;/a&gt;, a new show on learning Rust I’m hoping to launch later this week or early next week, requires a &lt;em&gt;lot&lt;/em&gt; of planning. &lt;a href="http://www.sap-py.com/"&gt;Sap.py&lt;/a&gt;, the fun little show my wife and I are about to launch, about her adventures in learning Python, requires basically &lt;em&gt;no&lt;/em&gt; planning. Winning Slowly doesn’t require a lot of formal planning, but it does require Stephen and me to keep a good eye on ongoing stories in our fields of technology, religion, ethics, and art, and to discuss big-picture ideas regularly and actively. Some episodes, we outline carefully (like the one we recorded today, which will come out next Tuesday). For others, we can basically just wing it (like the one we recorded a week ago and which comes out tomorrow). But if our podcast is good, and I really do think it is, it is because we take the time to work at making it good. Just like you have to do on a blog, or really anything else in life.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;13 published episodes, and one we dropped entirely!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;One big difference between a podcast and a blog is that it actually takes a lot &lt;em&gt;more&lt;/em&gt; work to make a good podcast than a good blog post. Audio editing is much more involved than editing writing, and speaking intelligently for any length of time—whether off the cuff, with a detailed outline, or as an interviewer—is much harder to get right than writing, where you can polish to your heart’s content.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="podcasting"></category></entry><entry><title>That Something</title><link href="http://www.chriskrycho.com/2015/that-something.html" rel="alternate"></link><published>2015-08-20T08:57:00-04:00</published><updated>2015-08-20T08:57:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-20:/2015/that-something.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;You don’t just use illustrations in preaching; you illustrate &lt;em&gt;something&lt;/em&gt;. You don’t just offer applications in preaching; you apply &lt;em&gt;something&lt;/em&gt;. That &lt;em&gt;something&lt;/em&gt; is the word of God, rightly applied.&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;You don’t just use illustrations in preaching; you illustrate &lt;em&gt;something&lt;/em&gt;. You don’t just offer applications in preaching; you apply &lt;em&gt;something&lt;/em&gt;. That &lt;em&gt;something&lt;/em&gt; is the word of God, rightly applied.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>My dream of dreams</title><link href="http://www.chriskrycho.com/2015/my-dream-of-dreams.html" rel="alternate"></link><published>2015-08-13T09:00:00-04:00</published><updated>2015-08-13T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-13:/2015/my-dream-of-dreams.html</id><summary type="html">&lt;p&gt;Yes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In my dream of dreams, Trump actually runs third party, which emboldens Bernie Sanders (should he not get the nom–whoa, Sanders vs. Trump would be the greatest political race &lt;strong&gt;&lt;em&gt;OF ALL TIME&lt;/em&gt;&lt;/strong&gt;) to also run third-party, since all of them have viable “cores,” and we get a four-party …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Yes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In my dream of dreams, Trump actually runs third party, which emboldens Bernie Sanders (should he not get the nom–whoa, Sanders vs. Trump would be the greatest political race &lt;strong&gt;&lt;em&gt;OF ALL TIME&lt;/em&gt;&lt;/strong&gt;) to also run third-party, since all of them have viable “cores,” and we get a four-party race that spawns four actual parties and American politics is freed from its bipartisan lock and a bald eagle screams across the sky while Stephen Colbert tears his shirt and flexes his muscles and fireworks explode in the shape of America over his head.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>one deer standing in a field</title><link href="http://www.chriskrycho.com/2015/one-deer-standing-in-a-field.html" rel="alternate"></link><published>2015-08-12T07:40:00-04:00</published><updated>2015-08-12T07:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-12:/2015/one-deer-standing-in-a-field.html</id><summary type="html">one deer standing in a field /
of crows and green turf /
startled turns to look at us /
(we are but a car) /
turns back to its grassy feast
</summary><content type="html">&lt;div class="line-block"&gt;one deer standing in a field&lt;br /&gt;
of crows and green turf&lt;br /&gt;
startled turns to look at us&lt;br /&gt;
(we are but a car)&lt;br /&gt;
turns back to its grassy feast&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>High- and Low-Level Programming Languages</title><link href="http://www.chriskrycho.com/2015/high-and-low-level-programming-languages.html" rel="alternate"></link><published>2015-08-07T20:00:00-04:00</published><updated>2015-08-07T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-07:/2015/high-and-low-level-programming-languages.html</id><summary type="html">&lt;p&gt;It occurred to me while listening to &lt;a href="https://edwinb.wordpress.com"&gt;Edwin Brady&lt;/a&gt; talk about &lt;a href="http://www.idris-lang.org"&gt;Idris&lt;/a&gt; on the &lt;a href="http://typetheorypodcast.com"&gt;Type Theory Podcast&lt;/a&gt;,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; having just spent a few weeks starting to learn &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;: “low-level” has at least two meanings in software. One is whether something has manual memory management or is garbage collected, reference counted …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It occurred to me while listening to &lt;a href="https://edwinb.wordpress.com"&gt;Edwin Brady&lt;/a&gt; talk about &lt;a href="http://www.idris-lang.org"&gt;Idris&lt;/a&gt; on the &lt;a href="http://typetheorypodcast.com"&gt;Type Theory Podcast&lt;/a&gt;,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; having just spent a few weeks starting to learn &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;: “low-level” has at least two meanings in software. One is whether something has manual memory management or is garbage collected, reference counted, or otherwise manages memory itself. This is what people often mean when they talk about C, C++, etc. as being “low-level” and languages like Python or Ruby or C♯ being high-level.&lt;/p&gt;
&lt;p&gt;But then you toss in a language like &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;, and things start to get a little more complicated. Rust can do the same kind of direct memory management that makes C or C++ a good language for things like writing operating system kernels. [&lt;a href="https://github.com/torvalds/linux"&gt;1&lt;/a&gt;,&lt;a href="https://en.wikipedia.org/wiki/Architecture_of_Windows_NT"&gt;2&lt;/a&gt;,&lt;a href="http://www.opensource.apple.com/source/xnu/xnu-2782.10.72/"&gt;3&lt;/a&gt;] But it is also memory-safe, at least in ordinary usage. Like C♯, you have to be explicit about any unsafe code, with the &lt;code&gt;unsafe&lt;/code&gt; keyword on any blocks that do memory management that isn’t safe. And the vast majority of Rust code &lt;em&gt;is&lt;/em&gt; safe.&lt;/p&gt;
&lt;p&gt;More than that, though, Rust &lt;em&gt;feels&lt;/em&gt; like a high-level language. It gives you higher-kinded functions, generics, traits-based composition of types, hygienic macros, and the implementation of many important parts the essentials of the language in the library. If you need to patch something, or extend something, you can do that in a straightforward way. In short, it gives you lots of good abstractions like you would expect in a high-level language.&lt;/p&gt;
&lt;p&gt;Rust is low-level in that you can write (and people are writing) systems-level programs in it. It is high-level in that it lets you express things in ways normally associated with languages like Haskell or OCaml or Python or Ruby. To put it simply: it’s &lt;em&gt;low-level&lt;/em&gt; in its ability to address the computer, and &lt;em&gt;high-level&lt;/em&gt; in the abstractions it hands to a programmer. That’s a powerful combination, and I hope more languages embrace it in the years to come.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, I know that’s insanely nerdy. What did you expect?&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="programming languages"></category><category term="rust"></category><category term="python"></category><category term="ruby"></category><category term="c"></category><category term="cplusplus"></category></entry><entry><title>Straining Gnats and Siding with Pharaoh over the Midwives</title><link href="http://www.chriskrycho.com/2015/straining-gnats-and-siding-with-pharaoh-over-the-midwives.html" rel="alternate"></link><published>2015-08-01T10:00:00-04:00</published><updated>2015-08-01T10:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-08-01:/2015/straining-gnats-and-siding-with-pharaoh-over-the-midwives.html</id><summary type="html">&lt;p&gt;Internet acquaintance and generally solid thinker Derek Rishmawy &lt;a href="http://derekzrishmawy.com/2015/07/31/straining-gnats-and-siding-with-pharaoh-over-the-midwives/"&gt;hits this nail&lt;/a&gt; right on the head:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And here’s where I just want to say, if your first instinct when you watch or read about these videos is to think, “Geez, are you telling me they lied to get the footage …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Internet acquaintance and generally solid thinker Derek Rishmawy &lt;a href="http://derekzrishmawy.com/2015/07/31/straining-gnats-and-siding-with-pharaoh-over-the-midwives/"&gt;hits this nail&lt;/a&gt; right on the head:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And here’s where I just want to say, if your first instinct when you watch or read about these videos is to think, “Geez, are you telling me they lied to get the footage of these people sorting through these fetal parts, or discussing prices non-chalantly over lunch? Woof. That’s a bridge too far”, then you’re reading the story wrong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://derekzrishmawy.com/2015/07/31/straining-gnats-and-siding-with-pharaoh-over-the-midwives/"&gt;Read the whole thing.&lt;/a&gt;&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Lines in the Mirror</title><link href="http://www.chriskrycho.com/2015/lines-in-the-mirror.html" rel="alternate"></link><published>2015-07-31T19:37:00-04:00</published><updated>2015-07-31T19:37:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-31:/2015/lines-in-the-mirror.html</id><summary type="html">The mirror begins to show me lines /
around my lips and across my brow /
but I shall not mind their steady growth /
so long as they are mostly wonder /
…
</summary><content type="html">&lt;div class="line-block"&gt;The mirror begins to show me lines&lt;br /&gt;
around my lips and across my brow&lt;br /&gt;
but I shall not mind their steady growth&lt;br /&gt;
so long as they are mostly wonder&lt;br /&gt;
with compassion mixed, and joy writ bold&lt;br /&gt;
’til by God’s grace an agéd man&lt;br /&gt;
I wear deep these marks of life well-lived:&lt;br /&gt;
not scars, but prizes, fought hard and won&lt;br /&gt;
and full of hope for others after&lt;br /&gt;
(who may likewise four-score years do good)&lt;br /&gt;
and bright countenance bear to that end&lt;br /&gt;
which but another beginning be.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>Reeder 3 for Mac Beta</title><link href="http://www.chriskrycho.com/2015/reeder-3-for-mac-beta.html" rel="alternate"></link><published>2015-07-30T09:26:00-04:00</published><updated>2015-07-30T09:26:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-30:/2015/reeder-3-for-mac-beta.html</id><summary type="html">&lt;p&gt;Ooh, look! A beta for &lt;a href="http://reederapp.com/beta3/"&gt;Reeder 3&lt;/a&gt;! Shiny!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Ooh, look! A beta for &lt;a href="http://reederapp.com/beta3/"&gt;Reeder 3&lt;/a&gt;! Shiny!&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>SMuFL and MusicXML to W3C</title><link href="http://www.chriskrycho.com/2015/smufl-and-musicxml-to-w3c.html" rel="alternate"></link><published>2015-07-28T12:29:00-04:00</published><updated>2015-07-28T12:29:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-28:/2015/smufl-and-musicxml-to-w3c.html</id><summary type="html">&lt;p&gt;Another one in the music industry—but in this case, companies taking the long view and advancing the &lt;a href="http://www.sibeliusblog.com/news/makemusic-and-steinberg-transfer-development-of-musicxml-and-smufl-to-web-community-group/"&gt;good of the whole community&lt;/a&gt;, rather than just their own bottom line. (Spreadbury, the guy behind SMuFL, was one of the team laid off in the &lt;a href="%7Bfilename%7Dsibelius-8.md"&gt;aforementioned&lt;/a&gt; layoff from the Sibelius team …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another one in the music industry—but in this case, companies taking the long view and advancing the &lt;a href="http://www.sibeliusblog.com/news/makemusic-and-steinberg-transfer-development-of-musicxml-and-smufl-to-web-community-group/"&gt;good of the whole community&lt;/a&gt;, rather than just their own bottom line. (Spreadbury, the guy behind SMuFL, was one of the team laid off in the &lt;a href="%7Bfilename%7Dsibelius-8.md"&gt;aforementioned&lt;/a&gt; layoff from the Sibelius team, and now heads the product development for a new notation software tool from Steinberg.)&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Sibelius 8</title><link href="http://www.chriskrycho.com/2015/sibelius-8.html" rel="alternate"></link><published>2015-07-28T12:25:00-04:00</published><updated>2015-07-28T12:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-28:/2015/sibelius-8.html</id><summary type="html">&lt;p&gt;Avid: &lt;a href="http://www.sibeliusblog.com/news/sibelius-8-is-here/"&gt;charging Sibelius users more money than ever for less value than ever&lt;/a&gt;, after laying off their dev team a couple years ago just to maximize profits.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly​&lt;/a&gt; material here, folks. They lost me (and many other) customers along the way, and they’re headed further …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Avid: &lt;a href="http://www.sibeliusblog.com/news/sibelius-8-is-here/"&gt;charging Sibelius users more money than ever for less value than ever&lt;/a&gt;, after laying off their dev team a couple years ago just to maximize profits.&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly​&lt;/a&gt; material here, folks. They lost me (and many other) customers along the way, and they’re headed further down that road here.&lt;/p&gt;
&lt;p&gt;Subscription models for software can be valuable and reasonable—but the providers have to justify them with product to match. Avid isn’t, and hasn’t been. I’ve no doubt they’re continuing to profit in the short term, but this will no doubt erode their market position and waste an amazing product in the long term. Greed destroys good things.&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Academic Markdown and Citations</title><link href="http://www.chriskrycho.com/2015/academic-markdown-and-citations.html" rel="alternate"></link><published>2015-07-26T13:50:00-04:00</published><updated>2015-07-26T20:07:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-26:/2015/academic-markdown-and-citations.html</id><summary type="html">Managing citations is painful—especially in plain text. But with a little setup, Pandoc and BibTEX can take a lot of the pain out of it, whether for Word documents or a static site generator.
</summary><content type="html">&lt;p&gt;Much of my past few weeks were taken up with study for and writing and editing &lt;a href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.html"&gt;a paper&lt;/a&gt; for one of my classes at Southeastern. I’ve been writing all of my papers in Markdown ever since I got here, and haven’t regretted any part of that… except that managing references and footnotes has been painful at times.&lt;/p&gt;
&lt;p&gt;Footnotes in Markdown look like this:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Here is some text.[^fn]

[^fn]: And the footnote!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This poses no problems at all for normal footnotes. Academic writing introduces a few wrinkles, though, which means that this has always been the main pain point of my use of Markdown for writing papers.&lt;/p&gt;
&lt;p&gt;Many academic citation styles (including the Chicago Manual of Style, on which our seminary’s &lt;a href="http://www.press.uchicago.edu/books/turabian/turabian_citationguide.html"&gt;style guide&lt;/a&gt; is based) tend to have a long version of the footnote appear first, followed by short versions later. Nearly &lt;em&gt;all&lt;/em&gt; academic citations styles make free use of the &lt;a href="https://en.wikipedia.org/wiki/Ibid."&gt;“ibid.”&lt;/a&gt; abbreviation for repeated references to save space, time, and energy. Here is how that might look in manually-written footnotes, citing the very paper in which I sorted this all out:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Some text in which I cite an author.[^fn1]

More text. Another citation.[^fn2]

What is this? Yet _another_ citation?[^fn3]

[^fn1]: So Chris Krycho, &amp;quot;Not Exactly a Millennium,&amp;quot; chriskrycho.com, July 22,

2015, http://www.chriskrycho.com/2015/not-exactly-a-millennium.html
(accessed July 25, 2015), ¶6.
[^fn2]: Contra Krycho, ¶15, who has everything _quite_ wrong.
[^fn3]: ibid.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This seems straightforward enough, though it is a bit of work to get the format right for each different kind of citation (articles, books, ebooks, electronic references to articles…). Things &lt;em&gt;really&lt;/em&gt; get complicated in the editing process, though. For example, what if I needed to flip the order of some of these notes because it became clear that the paragraphs needed to move around? This happens &lt;em&gt;frequently&lt;/em&gt; during the editorial process. It becomes particularly painful when dealing with the “ibid.”-type references, because if I insert a new reference between two existing references, I have to go back in and manually add all that the reference content again myself.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enter Pandoc and &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;.&lt;/p&gt;
&lt;section id="managing-citations" class="level2"&gt;
&lt;h2&gt;Managing Citations&lt;/h2&gt;
&lt;p&gt;The idea of plain-text solutions to academic writing is not especially new; only the application of Markdown to it is—and that, only relatively. People have been doing this, and &lt;a href="http://kieranhealy.org/blog/archives/2014/01/23/plain-text/"&gt;documenting their approaches&lt;/a&gt;, for quite a while. Moreover, tools for managing references and citations have existed for quite some time as well; the entire &lt;a href="http://www.latex-project.org"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/a&gt; toolchain is largely driven by the concerns of academic publishing, and as such there are tools in the &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; ecosystem which address many of these problems.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One such is &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;, and the later (more capable) &lt;span class="tex"&gt;BibL&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;: tools for managing bibliographies in &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; documents. The &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;/&lt;span class="tex"&gt;BibL&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; approach to managing citations in a document is the use of the &lt;code&gt;\cite&lt;/code&gt; command, with the use of “keys” which map to specific documents: &lt;code&gt;\cite{krycho:2015aa}&lt;/code&gt;, for example.&lt;/p&gt;
&lt;p&gt;This is not Markdown, of course. But other folks who have an interest in Markdown and academic writing have put their minds to the problem already. Folks such as Jon MacFarlane, the originator and lead developer of &lt;a href="http://pandoc.org"&gt;Pandoc&lt;/a&gt;, perhaps the single most capable text-conversion tool in existence. As it turns out, Pandoc Markdown supports a &lt;a href="http://pandoc.org/README.html#citations"&gt;citation extension&lt;/a&gt; to the basic markup. It’s just a variant on the &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; citation style that feels more at home in Markdown: a pair of braces and an &lt;code&gt;@&lt;/code&gt;, plus the citation key, like &lt;code&gt;[@krycho]&lt;/code&gt;. Moreover, Pandoc knows how to use &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; libraries, as well as many others, and &lt;a href="http://citationstyles.org"&gt;Citation Style Languages&lt;/a&gt; (&lt;abbr&gt;CSL&lt;/abbr&gt;s) to generate markup in &lt;em&gt;exactly&lt;/em&gt; the format needed for any given citation style.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instead of writing out all those citations details by hand, then, I can just format my footnotes like this (assuming the citekey I had set up for the article was &lt;code&gt;krycho:revelation:2015&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Some text in which I cite an author.[^fn1]

More text. Another citation.[^fn2]

What is this? Yet _another_ citation?[^fn3]

[^fn1]: [@krycho:revelation:2015], ¶6.
[^fn2]: Contra [@krycho:revelation:2015], ¶15, who has everything _quite_ wrong.
[^fn3]: [@krycho:revelation:2015].&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is much simpler and, importantly, has the exact same form for each citation. Pandoc will take care of making sure that the first reference is in the long form, later references are in the short form, and repeated references are in the “ibid.” form as appropriate. It even renders a properly sorted and structured Works Cited section.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The slightly complex command I used to generate a Word document from a Markdown file with citations (using my own &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; library and the Chicago Manual of Style &lt;abbr&gt;CSL&lt;/abbr&gt;) on the command line is:&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="bash"&gt;&lt;code&gt;$ pandoc revelation.md --smart --standalone \
--bibliography /Users/chris/icloud-drive/Documents/writing/library.bib \
--csl=/Users/chris/icloud-drive/Documents/writing/chicago.csl -o revelation.docx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see an extended sample of this kind of usage in practice, take a look at the &lt;a href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.txt"&gt;Markdown source&lt;/a&gt; for the paper I wrote last week, using exactly this approach. Every footnote that references a specific source simply has a cite key of this variety. The header metadata includes a path to the bibliography file and a &lt;abbr&gt;CSL&lt;/abbr&gt;. (These could be configured globally, as well, but I chose to specify them on a per-file basis so that if I want or need to use &lt;em&gt;different&lt;/em&gt; styles or a separate library for another file at a later time, I can do so with a minimum of fuss. More on this below.)&lt;/p&gt;
&lt;p&gt;&lt;a href="/downloads/revelation.docx"&gt;Here&lt;/a&gt; is the rendered result. You can see that it automatically generated everything right down to the “ibid.”-style footnotes. I made a few, fairly minimal tweaks (replacing the search &lt;abbr&gt;URL&lt;/abbr&gt; with an &lt;abbr&gt;ATLA&lt;/abbr&gt; database catalog reference and inserting a section break before the Works Cited list), and turned the paper in—confident, for the first time since I started seminary, that all of the references were in the right order and the right format. With carefully formatted reference documents (with their own style sets),&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; I was able to generate an actually &lt;em&gt;nice&lt;/em&gt; &lt;abbr&gt;&lt;a href="/downloads/revelation-pretty.pdf"&gt;PDF&lt;/a&gt;&lt;/abbr&gt; version of the paper from another Word document, as well.&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And, better yet, you don’t even have to put citations in footnotes. As &lt;a href="https://twitter.com/anjdunning"&gt;@anjdunning&lt;/a&gt; pointed out in a &lt;a href="https://twitter.com/anjdunning/status/625415216575197184"&gt;tweet&lt;/a&gt; response to the original version of this post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.twitter.com/chriskrycho"&gt;@chriskrycho&lt;/a&gt; Don’t put citekeys in a footnote: write everything as inline citations and it will also generate notes when asked by CSL def. &lt;a href="https://twitter.com/anjdunning/status/625415216575197184"&gt;∞&lt;/a&gt; July 26, 2015 17:19&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my standard example from above, then, you could simply do this:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;Some text in which I cite an author.[@krycho:revelation:2015, ¶6]

More text. Another citation.[Contra @krycho:revelation:2015, ¶15, who has
everything *quite* wrong.]

What is this? Yet _another_ citation?[@krycho:revelation:2015]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will generate the same markup for my purposes here; and as &lt;a href="https://twitter.com/anjdunning"&gt;@anjdunning&lt;/a&gt; noted, it goes one step further and does what’s appropriate for the &lt;abbr&gt;CSL&lt;/abbr&gt;. This might be handy if, for example, you wanted to use the Chicago notes-bibliography style in one format, but switch to a simpler parenthetical citation style for a different medium—or even if you had a paper to submit to different journals with different standards. Having the citations inline thus has many advantages.&lt;/p&gt;
&lt;p&gt;Now, there are still times when you might want to split those out into distinct footnotes, of course. That second one is a good candidate, at least for the way I tend to structure my plain-text source. I find it useful in the case of &lt;em&gt;actual&lt;/em&gt; footnote content—i.e. text that I’m intentionally leaving aside from the main text, even with reference to other authors—to split it out from the main flow of the paragraph, so that someone reading the plain text source gets a similar effect to someone reading the web or Word or &lt;abbr&gt;PDF&lt;/abbr&gt; versions, with the text removed from the flow of thought. In any case, it’s quite nice that Pandoc has the power and flexibility such that you don’t &lt;em&gt;have&lt;/em&gt; to.&lt;/p&gt;
&lt;p&gt;Finally, you don’t actually &lt;em&gt;need&lt;/em&gt; the brackets around the citekey, depending on how you’re using the reference. If you wanted to cite the relevant author inline, you can—and it will properly display both the inline name and a reference (footnote, parenthetical, etc.) in line with the &lt;abbr&gt;CSL&lt;/abbr&gt; you’ve chosen. If I were going to quote myself in a paper, I would do something like this:&lt;/p&gt;
&lt;pre class="markdown"&gt;&lt;code&gt;As @krycho:revelation:2015 comments:

&amp;gt; This was a hard paper to write.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is &lt;em&gt;extremely&lt;/em&gt; powerful, and while I didn’t take advantage of it in my first paper using these tools, you can bet I will be in every future paper I write.&lt;/p&gt;
&lt;section id="all-those-references" class="level3"&gt;
&lt;h3&gt;All those references&lt;/h3&gt;
&lt;p&gt;Of course, as is probably apparent, managing a &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; library by hand is no joke. Entries tend to look like this:&lt;/p&gt;
&lt;pre class="tex"&gt;&lt;code&gt;@book{beale:revelation:2015,
        Date-Added = {2015-07-20 21:16:02 +0000},
        Date-Modified = {2015-07-20 21:21:05 +0000},
        Editor = {G. K. Beale and David H. Campbell},
        Publisher = {William B. Eerdmans Publishing Company},
        Title = {Revelation: A Shorter Commentary},
        Year = {2015}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While there is a lot of utility in having that data available in text, on disk, no one wants to &lt;em&gt;edit&lt;/em&gt; that by hand.&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; Gladly, editing it by hand is not necessary. For this project, I used the freely available &lt;a href="http://bibdesk.sourceforge.net"&gt;BibDesk&lt;/a&gt; tool, which is a workable (albeit not very pretty and not &lt;em&gt;very&lt;/em&gt; capable) manager for &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt;:&lt;/p&gt;
&lt;figure&gt;
&lt;img src="//cdn.chriskrycho.com/images/bibdesk.png" title="Not very pretty, but it does work" alt="BibDesk – open to the library for my Revelation paper" /&gt;&lt;figcaption&gt;BibDesk – open to the library for my Revelation paper&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once I filled in the details for each item and set a citekey for it, I was ready to go: BibDesk just stores the files in a standard &lt;code&gt;.bib&lt;/code&gt; file on the disk, which I specified per the Pandoc command above.&lt;/p&gt;
&lt;p&gt;BibDesk gets the job done alright, but only alright. Using a citation and reference management tool was a big win, though, and I fully intend to use one for every remaining project while in seminary—and, quite possibly, for other projects as well. Whether that tool is BibDesk or something else is a different matter entirely. (More on this below.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="to-the-web" class="level2"&gt;
&lt;h2&gt;To the web!&lt;/h2&gt;
&lt;p&gt;I wanted something more out of this process, if I could get it. One of the reasons I use plain text as a source is because from it, I can generate Word documents, &lt;abbr&gt;PDF&lt;/abbr&gt;s, and &lt;em&gt;this website&lt;/em&gt; with equal ease. However, Python Markdown knows nothing of &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; or citekeys, to my knowledge—and since I render everything for school with Pandoc, I have long wanted to configure &lt;a href="http://docs.getpelican.com/en/3.6.0/"&gt;Pelican&lt;/a&gt; to use Pandoc as its Markdown engine instead of Python Markdown anyway.&lt;/p&gt;
&lt;p&gt;As it happens, I actually set this up about a month ago. The process was pretty simple:&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I installed the &lt;a href="https://github.com/jstvz/pelican-pandoc-reader"&gt;pandoc-reader&lt;/a&gt; Pelican extension.&lt;/li&gt;
&lt;li&gt;I set the plugin path in my Pelican configuration file.&lt;/li&gt;
&lt;li&gt;I specified the arguments to Pelican I wanted to use.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The only additional tweaks necessary to get citation support were calling it with the &lt;code&gt;'--filter pandoc-citeproc'&lt;/code&gt; arguments, which lets it process any bibliography data supplied in the header metadata for the files. Calling Pandoc with &lt;code&gt;--bibliography &amp;lt;path to bibliography&amp;gt;&lt;/code&gt; (as in my example above) is a &lt;a href="http://pandoc.org/README.html#citation-rendering"&gt;shortcut&lt;/a&gt; for calling it with &lt;code&gt;--metadata &amp;lt;path to bibliography&amp;gt;&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;--filter pandoc-citeproc&lt;/code&gt; arguments. I could just supply the bibliography directly in the call from Pelican, but this would limit me to using a single bibliography file for &lt;em&gt;all&lt;/em&gt; of my posts—something I’d rather not limit myself to, since it might make sense to build up bibliographies around specific subjects, or even to have smaller bibliographies associated with each project (exported from the main bibliography), which could then be freely available along with the contents of the paper itself.&lt;a href="#fn10" class="footnote-ref" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; (On this idea, see a bit more below under &lt;strong&gt;The Future&lt;/strong&gt;.)&lt;/p&gt;
&lt;p&gt;One word of warning: Pandoc is much slower to generate &lt;abbr&gt;HTML&lt;/abbr&gt; with &lt;code&gt;--filter pandoc-citeproc&lt;/code&gt; than &lt;em&gt;without&lt;/em&gt; the filter, and the larger your site, the more you will feel this. (The time to generate the site from scratch jumped from about 10s to about 30s for me, with 270 articles, 17 drafts, 2 pages, and 1 hidden page, according to Pelican.) Pandoc has to process &lt;em&gt;every&lt;/em&gt; article to check for citations, and that’s no small task. However, if you have Pelican’s content caching turned on, this is a one-time event. After that, it will only be processing any new content with it; total generation time is back down where it was before for me: the effort is all in generating the large indexes I use to display the content for the landing pages and for category and tag archives.&lt;/p&gt;
&lt;p&gt;And the result: that same paper, rendered to &lt;abbr&gt;HTML&lt;/abbr&gt; &lt;a href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.html"&gt;on my website&lt;/a&gt;, with citations and works cited, generated automatically and beautifully.&lt;/p&gt;
&lt;section id="other-site-generators" class="level3"&gt;
&lt;h3&gt;Other site generators&lt;/h3&gt;
&lt;p&gt;I don’t know the situation around using Pandoc itself in other generators, including Jekyll—I simply haven’t looked. I do know, however, that there &lt;em&gt;is&lt;/em&gt; some tooling for Jekyll specifically to allow a similar workflow. If you’re using Jekyll, it looks like your best bet is to check out &lt;a href="https://github.com/inukshuk/jekyll-scholar"&gt;jekyll-scholar&lt;/a&gt; and the &lt;a href="https://github.com/inukshuk/citeproc-ruby"&gt;citeproc-ruby&lt;/a&gt; project, which (like pandoc-citeproc) enables you to embed citations and filter them through &lt;abbr&gt;CSL&lt;/abbr&gt;s to generate references automatically. As a note: you should definitely be able to get those working on your own deployment sites, but I have no idea whether it’s possible to do them with the GitHub Pages variant of Jekyll. (If anyone who reads this knows the answer to that, let me know on Twitter or App.net, and I’ll update the post accordingly.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-future" class="level2"&gt;
&lt;h2&gt;The future&lt;/h2&gt;
&lt;p&gt;In addition to continuing to use &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; with BibDesk as a way of managing my citations in the short term, I’m thinking about other ways to improve this workflow. One possibility is integrating with &lt;a href="http://scholdoc.scholarlymarkdown.com"&gt;Scholdoc&lt;/a&gt; as it matures, instead of &lt;a href="http://pandoc.org"&gt;pandoc&lt;/a&gt;, and maybe (hopefully, albeit unlikely) even contributing to it somewhat. I’m also open to using other citation library tools, though my early explorations with Mendeley and Zotero did not particularly impress me.&lt;/p&gt;
&lt;p&gt;There are substantial advantages for the applications (and thus for most users) to maintaining the data in an application-specific format (e.g. an SQLite database) rather than on the file system—but the latter has the advantage of making it much easier to integrate with other tools. However, Zotero and Mendeley both natively export to &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; format, and Mendeley natively supports &lt;a href="http://blog.mendeley.com/tipstricks/howto-use-mendeley-to-create-citations-using-latex-and-bibtex/"&gt;sync&lt;/a&gt; to a &lt;span class="tex"&gt;BibT&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; library (Zotero can do the same, but via third-party &lt;a href="https://zoteromusings.wordpress.com/tag/bibtex/"&gt;plugins&lt;/a&gt;), so those remain viable options, which I may use for future projects.&lt;/p&gt;
&lt;p&gt;I also want to look at making my library of resources available publicly, perhaps (a) as a standalone library associated with each project, so that anyone who wants to can download it along with the Markdown source to play with as an example and (b) as a general library covering my various reading and research interests, which will certainly be irrelevant to most people but might nonetheless provide some value to someone along the way. I’m a big fan of making this kind of data open wherever possible, because people come up with neat things to do with it that the original creators never expect. Not &lt;em&gt;everything&lt;/em&gt; should be open—but lots of things should, and this might be among them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I’m pretty happy with the current state of affairs, the aforementioned interest in other reference managers notwithstanding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can set up the citations &lt;em&gt;once&lt;/em&gt;, in a tool designed to manage references, instead of multiple times in multiple places.&lt;/li&gt;
&lt;li&gt;I can use Pandoc and a &lt;abbr&gt;CSL&lt;/abbr&gt; to get the citations formatted correctly throughout a paper, including generating the bibliography automatically.&lt;/li&gt;
&lt;li&gt;I can use the same tooling, integrated into my static site generator, to build a web version of the content—with no extra effort, once I configured it properly the first time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps most importantly, this helps me meet one of my major goals for all my writing: to have a single canonical &lt;em&gt;source&lt;/em&gt; for the content, which I will be able to access in the future regardless of what operating system I am using or what publishing systems come and go. Simple plain text files—Markdown—get me there. Now I’ve put good tools around that process, and I love it even more.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Coming up with names for footnotes in Markdown can be painful in general for long documents. If you try to name them manually, like I do for posts on my website, you will very quickly end up wasting time on the names. If you try to number them, they will end up out of order in a hurry. My own &lt;a href="http://2012-2013.chriskrycho.com/web/markdown-and-academic-writing/"&gt;previous solution&lt;/a&gt; to this problem quickly became unwieldy for larger papers, and required a &lt;em&gt;lot&lt;/em&gt; of hand-editing. Gladly, I no longer deal with that manually. Instead, I do all my drafting in &lt;a href="http://www.ulyssesapp.com"&gt;Ulysses&lt;/a&gt;, where you just type &lt;code&gt;(fn)&lt;/code&gt; and it creates a footnote automatically, and will move that footnote &lt;em&gt;object&lt;/em&gt; around transparently as you edit, handling all the number-setting, etc. on its own.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;The irony of site for software which boasts that it is “a high-quality typesetting system” and looks like &lt;a href="http://www.latex-project.org"&gt;&lt;em&gt;this&lt;/em&gt;&lt;/a&gt; is not lost on me…&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;If you used the installers on Pandoc’s website, &lt;code&gt;pandoc-citeproc&lt;/code&gt; comes with it. If you installed it via a package manager (e.g. by running &lt;code&gt;brew install pandoc&lt;/code&gt;), it may not have, so you’ll need to install it manually yourself (e.g. &lt;code&gt;brew install pandoc-citeproc&lt;/code&gt;).&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;All of the content, including the rendered footnotes and the bibliography, has sensible content types set on it: headers are headers, body text is body text, etc. You can then customize to match the specifications of your style guide. I have a Chicago/Turabian style set set up with the formatting rules to match.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Actually, it was even hairier than this, because I also had a &lt;code&gt;--reference-docx path/to/template.docx&lt;/code&gt; specified. If you think it’s perhaps a bit too complex, well, I agree. I plan to turn that into a command line alias in pretty short order, because remembering it every time is just not going to happen.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Using the &lt;code&gt;--reference-docx&lt;/code&gt; argument to Pandoc, you can hand it a document that already uses your desired style set, so you don’t have to go in and apply it manually.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;I could have done that with Pandoc’s &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; &lt;abbr&gt;PDF&lt;/abbr&gt; tools, as well, but didn’t really feel like taking the time to tweak the &lt;span class="tex"&gt;L&lt;span class="texA"&gt;A&lt;/span&gt;T&lt;span class="texE"&gt;E&lt;/span&gt;X&lt;/span&gt; template for it.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Probably someone does, but not me, and not most people!&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;If you’re using Pelican, you can take a look at my Pelican configuration file &lt;a href="https://github.com/chriskrycho/chriskrycho.com/blob/ef3ecbca1765750392086355aeae026c1159d4b9/pelicanconf.py#L109"&gt;here&lt;/a&gt; to see the full configuration for using Pandoc this way.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;Optimally, I’d really just prefer to be able to set &lt;em&gt;all&lt;/em&gt; of these arguments at a per-file level—i.e., not use &lt;code&gt;--filter pandoc cite-proc&lt;/code&gt; unless the file actually specifies a bibliography. And I could hack Pelican to do that; I’ve actually already &lt;a href="https://github.com/liob/pandoc_reader/pull/5"&gt;messed around&lt;/a&gt; with other, semi-related bits regarding Pelican and Pandoc’s shared handling of &lt;abbr&gt;YAML&lt;/abbr&gt; metadata. But I’d prefer to keep my installation as “vanilla” as possible to minimize the cost of setting things up again on a new machine or after a crash, etc.&lt;a href="#fnref10" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="workflow"></category><category term="writing"></category></entry><entry><title>Not Exactly a Millennium</title><link href="http://www.chriskrycho.com/2015/not-exactly-a-millennium.html" rel="alternate"></link><published>2015-07-22T21:45:00-04:00</published><updated>2015-07-22T21:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-22:/2015/not-exactly-a-millennium.html</id><summary type="html">Revelation's description of a millennial reign for saints and chaining of Satan is not intended to outline a millennial doctrine (a-, pre-, or post-), but rather signals in literary and symbolic fashion the assurance of God's power over Satan and the reward for his saints.
</summary><content type="html">&lt;section id="introduction" class="level2"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Few books are as perplexing to modern readers as Revelation, and few matters within it as controversial as the nature of the millennium. As one commentator put it, “Judging from the amount of attention given by many writers to the first ten verses of chapter 20, one would think they were the single most important section of the book of Revelation.”&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The three major millennial readings—pre-, a-, and postmillennial—divide on how to read the sequence. Both amillennial and postmillennial interpretations affirm that Christ will return at the end of the millennium and that there will be a single resurrection, whereas the premillennial interpretation anticipates Christ returning to &lt;em&gt;inaugurate&lt;/em&gt; the millennium, raising (some or all of) the saints at that time and then raising all who remain at the end of the millennium for final judgment. This paper will argue that John did not in fact intend to establish a totally new doctrine of a millennium (of any sort) in this much-debated sequence, but rather intended to succor his audience with the hope of God’s faithfulness to his promises. That is: the millennial passage indicates not a duration of time—not even an indeterminate sequence as in some idealist or historicist readings—but rather depicts symbolically and numerologically the fulfillment of the promises made to the saints elsewhere in Revelation and the rest of Scripture. In particular, he draws on imagery and the recapitulatory pattern established in Ezekiel 37–48,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; presenting the same conflict multiple times from different angles to emphasize the sovereignty of God and the surety of his salvation and vindication of his saints.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="context" class="level2"&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;Revelation was most likely written by John the Apostle from exile on the island of Patmos in the early-to-mid-90s A.D., though it is impossible to be certain of either authorship or provenance.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; The churches which constituted John’s audience—the seven addressees of the letters that opened the book—were facing a history of persecution and the threat of future persecution. As early as the 60s A.D., the church had faced serious persecution under Nero, and it continued to face varying degrees of opposition in the years that followed. The book served then—and has served the church ever since—as an exhortation to endure and an encouragement that whatever trials come, God will accomplish justice in the end and vindicate his saints.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although the purpose of the book is thus relatively clear, it remains difficult to interpret because of outstanding questions regarding its genre and structure. The book opens and closes in epistolary fashion; it declares itself to be a prophecy; and it is explicitly titled an apocalypse and bears all the hallmarks of the genre.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; As with many apocalypses, and like the Old Testament prophecies on which it is modeled and from which it draws, the book functions not merely as revelation, but also (and perhaps primarily) as exhortation—thus the epistolary frame and the consistent thematic warning against idolatry.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; As with apocalyptic literature in general, the book is heavy on imagery, metaphor, and symbolic representations. As such, it conveys its message at the three distinct levels of &lt;em&gt;visionary&lt;/em&gt;, &lt;em&gt;historical&lt;/em&gt; or &lt;em&gt;referential&lt;/em&gt;, and &lt;em&gt;symbolic&lt;/em&gt;.&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; Leaping directly from the visionary to the referential level without considering the symbolic meanings will certainly lead to misinterpretation within the genre. Indeed, the book itself indicates that it conveys its message primarily through symbols.&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; Thus, right interpretation of the text must respect literary convention and take care not to leap from the content of John’s vision to a proposed referent without considering how symbolism may be at play.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="exegesis" class="level2"&gt;
&lt;h2&gt;Exegesis&lt;/h2&gt;
&lt;p&gt;The millennial passage does not stand alone, but is part of the final, conclusive judgment cycle, beginning in 19:11 and concluding at the end of chapter 20. The sequence is comprised of five “And I saw…”&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt; sequences, which begin in 19:11, 19:17, 20:1, 20:4, and 20:11. The millennium itself is introduced in 20:2–3 and discussion of the millennium carries on through the final defeat of Satan after his release “when the thousand years are ended” (20:7).&lt;a href="#fn10" class="footnote-ref" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; After God’s final crushing victory over Satan, the scene turns to eternal judgment at the great white throne. Throughout the entire final sequence, he draws heavily on the narrative, language, and imagery of Ezekiel 37–48. Thus, John’s cycle of judgment passages leads directly into a discussion of the new Jerusalem, just as Ezekiel’s judgment sequence leads into his lengthy treatment of the future, eschatological temple.&lt;a href="#fn11" class="footnote-ref" id="fnref11"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt; Finally, John synthesizes these images from both Ezekiel with eschatological language from Isaiah, combining the two great visions into a unified whole. This pattern, and the imagery layered throughout, should both caution the reader from interpreting the sequence in strict chronological fashion—Ezekiel’s treatment is expressly recapitulatory&lt;a href="#fn12" class="footnote-ref" id="fnref12"&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;—and suggest that John’s intent may be comment and synthesis rather than the formulation of a wholly new doctrine.&lt;/p&gt;
&lt;section id="a-climactic-battle-with-the-beast-and-the-false-prophet" class="level3"&gt;
&lt;h3&gt;19:11–21: A Climactic Battle with the Beast and the False Prophet&lt;/h3&gt;
&lt;p&gt;John opens this final section of the book with two visions. The first (19:11–16) is an image of Christ as the divine warrior, the Word of God, whose word destroys the enemies of God. The second (19:17–21) is of the defeat of those enemies and a horrifying feast—the dreadful inverse of the wedding supper of the Lamb.&lt;a href="#fn13" class="footnote-ref" id="fnref13"&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt; Here is the first of several significant clues that the millennial passage that follows &lt;em&gt;recapitulates&lt;/em&gt; rather than &lt;em&gt;follows&lt;/em&gt; this battle. Throughout the book, with the sole exception of the appearance of nations in glory in the conclusion, “the nations” (τὰ ἐθνῆ) appear to the rebellious nations in contrast with the saints&lt;a href="#fn14" class="footnote-ref" id="fnref14"&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt;—and the nations are &lt;em&gt;completely&lt;/em&gt; destroyed here. The beast and false prophet are thrown into the lake of fire (19:20), and “the rest were slain by the sword that came from the mouth of him who was sitting on the horse” (19:21). The deceived nations that join Satan in Satan in his post-millennial war must be understood in light of this destruction.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-millenniumsatan-bound-saints-reigning-with-christ" class="level3"&gt;
&lt;h3&gt;20:1–6: The Millennium—Satan Bound, Saints Reigning with Christ&lt;/h3&gt;
&lt;p&gt;In 20:1–3, John describes an angel binding Satan and locking him in an abyss for a thousand years. In vv. 4–6, he describes the “first resurrection” and the thousand-year reign of the martyrs-and-saints with Christ.&lt;a href="#fn15" class="footnote-ref" id="fnref15"&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt; On the one hand, the language used here for binding Satan seems fairly strong: the angel binds him, then shuts him in the Abyss and seals and locks it.&lt;a href="#fn16" class="footnote-ref" id="fnref16"&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt; On the other hand, this is not the first place where the New Testament speaks of Satan’s being bound (cf. especially Mark 3:27 and the parallel in Matt. 12:29, Luke 19:17–18, John 12:31, Col. 2:15).&lt;a href="#fn17" class="footnote-ref" id="fnref17"&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt; Nor is it the first place where angelic forces defeat Satan and restrain his power (cf. Rev. 12).&lt;a href="#fn18" class="footnote-ref" id="fnref18"&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt; The angel binds Satan, and the point seems to be the &lt;em&gt;effect&lt;/em&gt; and &lt;em&gt;efficacy&lt;/em&gt; rather than the &lt;em&gt;extent&lt;/em&gt; of the binding: to prevent Satan from deceiving the nations and from assaulting the saints, until the climactic final battle.&lt;a href="#fn19" class="footnote-ref" id="fnref19"&gt;&lt;sup&gt;19&lt;/sup&gt;&lt;/a&gt; It also establishes God’s rule: Satan is powerless to resist.&lt;a href="#fn20" class="footnote-ref" id="fnref20"&gt;&lt;sup&gt;20&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After describing Satan’s binding, John turns his attention (another “and I saw”) to saints sharing in the first resurrection. Notably, these saints are seated on thrones, and John has used the language of martyr-saints and thrones before (see 6:9ff).&lt;a href="#fn21" class="footnote-ref" id="fnref21"&gt;&lt;sup&gt;21&lt;/sup&gt;&lt;/a&gt; The word “throne” appears some forty-seven times in the book, and apart from references to Satan’s or the beast’s rule, all of them (save perhaps these) unambiguously refer to heaven, &lt;em&gt;not&lt;/em&gt; earth.&lt;a href="#fn22" class="footnote-ref" id="fnref22"&gt;&lt;sup&gt;22&lt;/sup&gt;&lt;/a&gt; The link strongly suggests that the scene is not the earth in some future age, but heaven, and reinforces the notion that John is recapitulating material he has covered before, rather than continuing sequentially from what preceded in the text.&lt;/p&gt;
&lt;p&gt;John’s language of the “first resurrection” (20:6) and the ingressive use of preterite ζάω, “They came to life…” and “the rest… did not come to life” (20:4–5) are perhaps the strongest arguments in favor of a premillennial reading of the passage. The language suggests bodily resurrection, and indeed it is unusual for the same word to be used first of spiritual and then of physical resurrection only a few phrases apart.&lt;a href="#fn23" class="footnote-ref" id="fnref23"&gt;&lt;sup&gt;23&lt;/sup&gt;&lt;/a&gt; However, there are reasons within the text itself to think this is not John’s point. The first resurrection here includes all of, but only, the righteous; and the second all of, but only, the unrighteous.&lt;a href="#fn24" class="footnote-ref" id="fnref24"&gt;&lt;sup&gt;24&lt;/sup&gt;&lt;/a&gt; Similarly, and more conclusively, the &lt;em&gt;second death&lt;/em&gt; that parallels the (implied but never mentioned!) second resurrection&lt;a href="#fn25" class="footnote-ref" id="fnref25"&gt;&lt;sup&gt;25&lt;/sup&gt;&lt;/a&gt; is at least primarily spiritual, while the first is clearly physical; it is therefore possible the inverse is true of the resurrections.&lt;a href="#fn26" class="footnote-ref" id="fnref26"&gt;&lt;sup&gt;26&lt;/sup&gt;&lt;/a&gt; The kind of “coming to life” on display here is thus not &lt;em&gt;necessarily&lt;/em&gt; final resurrection, but spiritual life in the interval between Christ’s comings.&lt;/p&gt;
&lt;p&gt;More broadly, the literary tenor of the passage warrants caution beyond even that already suggested by the apocalyptic setting. The passage is saturated in symbolism and imagery: “chain,” “key,” “Abyss,” “dragon,” “ancient serpent,” “locked,” and “sealed” are all certainly images representing realities, rather than literal depictions of those realities.&lt;a href="#fn27" class="footnote-ref" id="fnref27"&gt;&lt;sup&gt;27&lt;/sup&gt;&lt;/a&gt; Given ten’s association with completeness or perfection, the use of its third power is clearly symbolic as well.&lt;a href="#fn28" class="footnote-ref" id="fnref28"&gt;&lt;sup&gt;28&lt;/sup&gt;&lt;/a&gt; Moreover, John here draws on imagery that was already prevalent in the apocalyptic literature that formed the context of his audience’s expectation. The notion of a Messianic millennium was not his invention, though he did bring it to bear in a unique context within the Christian canon.&lt;a href="#fn29" class="footnote-ref" id="fnref29"&gt;&lt;sup&gt;29&lt;/sup&gt;&lt;/a&gt; To suggest, then, that these “thousand years” &lt;em&gt;must&lt;/em&gt; be taken as a literal depiction of time, regardless of how often John repeats it, is to mistake the literary context and John’s intended meaning.&lt;a href="#fn30" class="footnote-ref" id="fnref30"&gt;&lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;All&lt;/em&gt; the numbers in Revelation appear to have a figurative rather than literal referent.&lt;a href="#fn31" class="footnote-ref" id="fnref31"&gt;&lt;sup&gt;31&lt;/sup&gt;&lt;/a&gt; Indeed, any directly literal approach to the millennium is necessarily “an incredible way to treat numbers in an apocalypse!”&lt;a href="#fn32" class="footnote-ref" id="fnref32"&gt;&lt;sup&gt;32&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thus, a symbolic reading of the thousand years seems best—and not only in the sense that the time period in view is not literally one thousand years, but also in the sense that it points to something other than a physical reign of the martyr-saints on earth entirely. One of the functions of the millennium, on any reading, is to demonstrate both Satan’s and the nations’ lack of repentance. Neither does a thousand years of being restrained chasten Satan whatsoever, nor does that interval where Satan is restrained change the hearts of rebellious men and women.&lt;a href="#fn33" class="footnote-ref" id="fnref33"&gt;&lt;sup&gt;33&lt;/sup&gt;&lt;/a&gt; Both Satan and rebellious humanity vindicate God’s judgment against them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-climactic-battle-with-satan" class="level3"&gt;
&lt;h3&gt;20:7–10: A Climactic Battle with Satan&lt;/h3&gt;
&lt;p&gt;Not itself a distinct section,&lt;a href="#fn34" class="footnote-ref" id="fnref34"&gt;&lt;sup&gt;34&lt;/sup&gt;&lt;/a&gt; the final war with Satan recapitulates material already covered in Revelation 16–19, and also links back to both of the immediately preceding “and I saw” sections.&lt;a href="#fn35" class="footnote-ref" id="fnref35"&gt;&lt;sup&gt;35&lt;/sup&gt;&lt;/a&gt; Here is one of the major clues that John is not building a theology of the millennium: the climactic defeat of Satan here directly echoes the previous defeat at Armageddon (16:14) and the defeat of the beast and false prophet (see above).&lt;a href="#fn36" class="footnote-ref" id="fnref36"&gt;&lt;sup&gt;36&lt;/sup&gt;&lt;/a&gt; Indeed “the war” (ὁ πόλεμος) appears only here, at 16:14, and 19:19 in the book, further tying them together.&lt;a href="#fn37" class="footnote-ref" id="fnref37"&gt;&lt;sup&gt;37&lt;/sup&gt;&lt;/a&gt; As noted above, the nations were utterly destroyed in the battle in 19:17–21, yet appear again here as Satan’s pawns only to be destroyed completely again. Even commentators who suppose a basically premillennial outlook therefore grant that the sequence of events with the nations here is difficult to make chronological sense of in premillennial terms.&lt;a href="#fn38" class="footnote-ref" id="fnref38"&gt;&lt;sup&gt;38&lt;/sup&gt;&lt;/a&gt; This is the same battle, with the same enemies, and the same outcome. John is indeed following Ezekiel’s outline; like the prophet, he retells the same battle from two angles. Just as the beast and false prophet deceived the nations and led them to destruction, Satan deceives the nations only to lead them to destruction. Indeed, this serves as the conclusion to a large-scale chiasm running from the beginning of ch. 12. John introduces Satan, the beast and the false prophet, and Babylon, and in turn God judges Babylon, the beast and the false prophet, and finally Satan.&lt;a href="#fn39" class="footnote-ref" id="fnref39"&gt;&lt;sup&gt;39&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This outcome is as expected, in light of the rest of the book and especially the preceding section it so clearly echoes. There, Christ defeated the Beast and the false prophet utterly; here God defeats Satan utterly. No actual battle appears in either case: God’s and Christ’s victory is immediate and without contest.&lt;a href="#fn40" class="footnote-ref" id="fnref40"&gt;&lt;sup&gt;40&lt;/sup&gt;&lt;/a&gt; Satan’s deception comes to an end once and for all, every one of his tools (whether the harlot, the false prophet and the beast, or the rebellious nations of the earth) unable to stand before God.&lt;a href="#fn41" class="footnote-ref" id="fnref41"&gt;&lt;sup&gt;41&lt;/sup&gt;&lt;/a&gt; As in Ezekiel, the rebellious nations are destroyed in the first telling with a sword, in the second telling with fire.&lt;a href="#fn42" class="footnote-ref" id="fnref42"&gt;&lt;sup&gt;42&lt;/sup&gt;&lt;/a&gt; Likewise, the end of Satan’s deceptions of the nations culminates in his being thrown into the lake of fire, just as were the other deceivers in ch. 19.&lt;a href="#fn43" class="footnote-ref" id="fnref43"&gt;&lt;sup&gt;43&lt;/sup&gt;&lt;/a&gt; The millennium is not a sequence &lt;em&gt;following&lt;/em&gt; the war against the saints, but a second image of the time that &lt;em&gt;leads up to&lt;/em&gt; that final confrontation.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="after-judgment-then-consummation" class="level3"&gt;
&lt;h3&gt;After: Judgment, Then Consummation&lt;/h3&gt;
&lt;p&gt;After Satan’s defeat, the living and the dead are judged, and those whose names are not found in the book of life are subjected to the second death—this one spiritual, joining the beast, the false prophet, and Satan in the lake of fire. Notably, the dead who are judged have not gone previously to the lake of fire here—unlike the rest of the New Testament’s expectation that the dead will be judged immediately at Christ’s return.&lt;a href="#fn44" class="footnote-ref" id="fnref44"&gt;&lt;sup&gt;44&lt;/sup&gt;&lt;/a&gt; At the last, Death and Hades join them (just as in 1 Cor. 15:26).&lt;a href="#fn45" class="footnote-ref" id="fnref45"&gt;&lt;sup&gt;45&lt;/sup&gt;&lt;/a&gt; Again: these are symbolic images; the visionary content cannot be translated into future-historical referents directly and without interpretation. These conclusive events &lt;em&gt;do&lt;/em&gt; help resolve the point of the millennium itself, though: they align all the final judgments together, synchronize John’s telling with the Ezekiel narration he is interpreting. Thus, John turns immediately after the judgment to the final vision of the book: the New Jerusalem, and the new Heavens and new Earth, and the descent of God to dwell with humanity forever. As in Ezekiel, the focus is on the shape of the future temple, as a symbol of the perfect restoration of God’s place of fellowship with humanity—only magnified manifold even beyond Ezekiel’s vision. Further, John’s integration of Isaianic imagery here into the new Jerusalem/heaven and earth strongly militates against interpreting Isaiah 65 as pointing to a millennial age.&lt;a href="#fn46" class="footnote-ref" id="fnref46"&gt;&lt;sup&gt;46&lt;/sup&gt;&lt;/a&gt; The turn to this massively perfect garden-city-temple emphasizes the finality of God’s eschatological work. It also further demonstrates that John’s concern, unlike so many commentators, was not the establishment of a doctrine of a millennium. Rather, John sought to make clear that God’s victory would be final and complete, that justice would be done in the world, and that the saints would have the reward he promised them.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="concern" class="level2"&gt;
&lt;h2&gt;Concern&lt;/h2&gt;
&lt;p&gt;The church may err—indeed, &lt;em&gt;has&lt;/em&gt; erred—in several ways in its interpretation of the Apocalypse. One the one hand, she may swerve into the kind of sensuousness attributed to Papias and others early in the history of the church, prompting Origin and Augustine to take a purely spiritual reading of the millennium, with the Reformers following them. On the other hand, the church has sometimes carried this idealized reading into spiritualizing away Christ’s return. Neither of these are good. John’s millennium is not a literal thousand years, nor even an unspecified-but-lengthy period of time when the former saints reign in resurrected bodies on a still-fallen earth, with sin yet-unjudged, over others who are still mortal and can reject salvation.&lt;a href="#fn47" class="footnote-ref" id="fnref47"&gt;&lt;sup&gt;47&lt;/sup&gt;&lt;/a&gt; But it is not a throwaway idea, and it should not lead the church to mischaracterize &lt;em&gt;other&lt;/em&gt; elements of John’s eschatology.&lt;/p&gt;
&lt;p&gt;John uses this language not to outline a new eschatological doctrine, but to shine light on an old one: God’s work overthrowing the powers of the present age in his Messiah’s incarnation, life, death, resurrection, and ascension. He reiterates what he and others have already said: Satan’s power to deceive the nations has been broken, because the strong man came and bound him.&lt;a href="#fn48" class="footnote-ref" id="fnref48"&gt;&lt;sup&gt;48&lt;/sup&gt;&lt;/a&gt; Christ is reigning &lt;em&gt;now&lt;/em&gt; (Hebrews 1:3–4), though there is a greater reign yet to come. Moreover, the broader context of the book makes clear that John’s point here is not to suggest some future half-way stop between fall and glory. Rather, he assures saints that even now, Satan’s hatred and lies are restrained—however fierce they may seem at times. As such, the saints can stand fast in the face of whatever trials they face.&lt;/p&gt;
&lt;p&gt;There are two major implications of this reading for the life of the church. First, and foundational for the second, Revelation as a book and this passage specifically have something to say to the church &lt;em&gt;today&lt;/em&gt;. These are not merely vague notions about an unknown future, which confuse rather than comfort. Instead, they are a symbolic (but for that no less &lt;em&gt;true&lt;/em&gt;) proclamation of the reign of Jesus Christ, the Ancient of Days, the King of Kings and Lord of Lords who will one day let Satan loose only to destroy him and his evil utterly. Secondly, therefore, the church should &lt;em&gt;preach&lt;/em&gt; this book, and regularly. John’s promises about the future will lead the church now to stand fast when the surrounding world calls for compromise and the temptation to idolatry rears its head, as it does in every generation. Satan is bound; Christ reigns &lt;em&gt;now&lt;/em&gt;, and the saints with him; and someday Christ will come again, judge the living and the dead once for all, and consummate his kingdom. “Here is a call for the endurance of the saints, those who keep the commandments of God and their faith in Jesus” (Rev. 14:12). The indicative—Christ reigns, Satan is bound—prompts an imperative: life as if this is so!&lt;a href="#fn49" class="footnote-ref" id="fnref49"&gt;&lt;sup&gt;49&lt;/sup&gt;&lt;/a&gt; Come temptations to materialism, or the worship of ancestors, or nationalism, or any other idolatry, Christians proclaim Christ alone is Lord. —&lt;/p&gt;
&lt;p&gt;–&lt;/p&gt;
&lt;/section&gt;
&lt;section id="works-cited" class="level1"&gt;
&lt;h1&gt;Works Cited&lt;/h1&gt;
&lt;!-- Inserted automatically by pandoc-citeproc --&gt;
&lt;div id="refs" class="references"&gt;
&lt;div id="ref-aune:revelation.1.5:1997"&gt;
&lt;p&gt;Aune, David E. &lt;em&gt;Revelation 1–5&lt;/em&gt;. Edited by Bruce M. Metzger and Ralph P. Martin. Vol. 52A. Word Biblical Commentary. Dallas: Word Books, 1997.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-aune:revelation.17.22:1998"&gt;
&lt;p&gt;———. &lt;em&gt;Revelation 17–22&lt;/em&gt;. Edited by Bruce M. Metzger and Ralph P. Martin. Vol. 52C. Word Biblical Commentary. Nashville: Thomas Nelson Publishers, 1998.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-beale:revelation:1999"&gt;
&lt;p&gt;Beale, G. K. &lt;em&gt;The Book of Revelation: A Commentary on the Greek Text&lt;/em&gt;. Edited by Donald A. Hagner I. Howard Marshall. The New International Greek Testament Commentary. Grand Rapids, Michigan: William B. Eerdmans Publishing Company, 1999.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-beale:millennium:2013"&gt;
&lt;p&gt;Beale, Gregory K. “The Millennium in Revelation 20:1-10: An Amillennial Perspective.” &lt;em&gt;Criswell Theological Review&lt;/em&gt; 11, no. 1 (2013): 29–62.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-boring:revelation:1989"&gt;
&lt;p&gt;Boring, M. Eugene. &lt;em&gt;Revelation&lt;/em&gt;. Edited by James Luther Mays and Paul J. Achtemeier. Interpretation: A Bible Commentary for Teaching and Preaching. Louisville, Kentucky: John Knox Press, 1989.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-jmford:revelation:1975"&gt;
&lt;p&gt;Ford, J. Massyngberde. &lt;em&gt;Revelation: Introduction, Translation and Commentary&lt;/em&gt;. Edited by David Noel Freedman and Raymond E. Brown. The Anchor Bible. Garden City, New York: Doubleday &amp;amp; Company, Inc., 1975.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-gorman:revelation:2011"&gt;
&lt;p&gt;Gorman, Michael J. &lt;em&gt;Reading Revelation Responsibly: Uncivil Worship and Witness: Following the Lamb into the New Creation&lt;/em&gt;. Eugene, Oregon: Cascade Books, 2011.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-kistemaker:revelation:2001"&gt;
&lt;p&gt;Kistemaker, Simon J. &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;. New Testament Commentary. Grand Rapids, Michigan: Baker Books, 2001.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-koester:revelation:2014"&gt;
&lt;p&gt;Koester, Craig R. &lt;em&gt;Revelation: A New Translation with Introduction and Commentary&lt;/em&gt;. Edited by John J. Collins. Vol. 38A. The Anchor Yale Bible. New Haven: Yale University Press, 2014.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-mangina:revelation:2010"&gt;
&lt;p&gt;Mangina, Joseph L. &lt;em&gt;Revelation&lt;/em&gt;. Edited by R. R. Reno. Brazos Theological Commentary on the Bible. Grand Rapids, Michigan: BrazosPress, 2010.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-merkle:millennium:2014"&gt;
&lt;p&gt;Merkle, Benjamin L, and W Tyler Krug. “Hermeneutical Challenges for a Premillennial Interpretation of Revelation 20.” &lt;em&gt;The Evangelical Quarterly&lt;/em&gt; 86, no. 3 (2014): 210–26.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-r.mounce:revelation:1998"&gt;
&lt;p&gt;Mounce, Robert H. &lt;em&gt;The Book of Revelation&lt;/em&gt;. Edited by Gordon D. Fee. Revised Edition. The New International Commentary on the New Testament. Grand Rapids, Michigan: William B. Eerdmans Publishing Company, 1998.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-osborne:revelation:2002"&gt;
&lt;p&gt;Osborne, Grant R. &lt;em&gt;Revelation&lt;/em&gt;. Edited by Moisés Silva. Baker Exegetical Commentary on the New Testament. Grand Rapids, Michigan: Baker Academic, 2002.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-patterson:revelation:2012"&gt;
&lt;p&gt;Patterson, Paige. &lt;em&gt;Revelation&lt;/em&gt;. Edited by E. Ray Clendenen. Vol. 39. The New American Commentary. B&amp;amp;H Publishing Group, 2012.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;&lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Robert H. Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;, ed. Gordon D. Fee, Revised Edition, The New International Commentary on the New Testament (Grand Rapids, Michigan: William B. Eerdmans Publishing Company, 1998)&lt;/span&gt;, 360; commentators across the spectrum make the same point—see similar comments in &lt;span class="citation" data-cites="boring:revelation:1989"&gt;M. Eugene Boring, &lt;em&gt;Revelation&lt;/em&gt;, ed. James Luther Mays and Paul J. Achtemeier, Interpretation: A Bible Commentary for Teaching and Preaching (Louisville, Kentucky: John Knox Press, 1989)&lt;/span&gt;, 202; &lt;span class="citation" data-cites="patterson:revelation:2012"&gt;Paige Patterson, &lt;em&gt;Revelation&lt;/em&gt;, ed. E. Ray Clendenen, vol. 39, The New American Commentary (B&amp;amp;H Publishing Group, 2012)&lt;/span&gt;, 361, &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Grant R. Osborne, &lt;em&gt;Revelation&lt;/em&gt;, ed. Moisés Silva, Baker Exegetical Commentary on the New Testament (Grand Rapids, Michigan: Baker Academic, 2002)&lt;/span&gt;, 697, 716.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;&lt;span class="citation" data-cites="boring:revelation:1989"&gt;Boring, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 207, 209; &lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 357; &lt;span class="citation" data-cites="beale:revelation:1999"&gt;G. K. Beale, &lt;em&gt;The Book of Revelation: A Commentary on the Greek Text&lt;/em&gt;, ed. Donald A. Hagner I. Howard Marshall, The New International Greek Testament Commentary (Grand Rapids, Michigan: William B. Eerdmans Publishing Company, 1999)&lt;/span&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Although some evangelical scholars contest the date, and many critical scholars have suggested other authors, the textual evidence points most strongly to traditional authorship, with a late date. So &lt;span class="citation" data-cites="kistemaker:revelation:2001"&gt;Simon J. Kistemaker, &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;, New Testament Commentary (Grand Rapids, Michigan: Baker Books, 2001)&lt;/span&gt;], 26–38; and see also the exhaustive (though inconclusive) summary in &lt;span class="citation" data-cites="aune:revelation.1.5:1997"&gt;David E. Aune, &lt;em&gt;Revelation 1–5&lt;/em&gt;, ed. Bruce M. Metzger and Ralph P. Martin, vol. 52A, Word Biblical Commentary (Dallas: Word Books, 1997)&lt;/span&gt;, lvi–lxx.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;&lt;span class="citation" data-cites="gorman:revelation:2011"&gt;Michael J. Gorman, &lt;em&gt;Reading Revelation Responsibly: Uncivil Worship and Witness: Following the Lamb into the New Creation&lt;/em&gt; (Eugene, Oregon: Cascade Books, 2011)&lt;/span&gt;, ch. 2, §&lt;em&gt;Prophecy&lt;/em&gt;, ¶6. &lt;abbr&gt;EPUB&lt;/abbr&gt;.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;&lt;span class="citation" data-cites="aune:revelation.1.5:1997"&gt;Aune, &lt;em&gt;Revelation 1–5&lt;/em&gt;&lt;/span&gt;, lxxi–xc.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;&lt;span class="citation" data-cites="aune:revelation.1.5:1997"&gt;Aune&lt;/span&gt;, lxxxvii; &lt;span class="citation" data-cites="gorman:revelation:2011"&gt;Gorman, &lt;em&gt;Reading Revelation Responsibly&lt;/em&gt;&lt;/span&gt;, ch. 2, §&lt;em&gt;Prophecy&lt;/em&gt;, ¶6–9. &lt;abbr&gt;EPUB&lt;/abbr&gt;.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;&lt;span class="citation" data-cites="beale:millennium:2013"&gt;Gregory K Beale, “The Millennium in Revelation 20:1-10: An Amillennial Perspective.” &lt;em&gt;Criswell Theological Review&lt;/em&gt; 11, no. 1 (2013): 29–62&lt;/span&gt;, 31; &lt;span class="citation" data-cites="merkle:millennium:2014"&gt;Benjamin L Merkle and W Tyler Krug, “Hermeneutical Challenges for a Premillennial Interpretation of Revelation 20,” &lt;em&gt;The Evangelical Quarterly&lt;/em&gt; 86, no. 3 (2014): 210–26&lt;/span&gt;, 224.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;&lt;span class="citation" data-cites="beale:millennium:2013"&gt;Beale, “The Millennium in Revelation 20.”&lt;/span&gt;, 30.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;καὶ εἶδον; author’s translation. On και as sequential vs. conjunctive, see &lt;span class="citation" data-cites="beale:millennium:2013"&gt;Beale&lt;/span&gt;, 32.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;Unless otherwise noted, quotations are from the English Standard Version.&lt;a href="#fnref10" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn11"&gt;&lt;p&gt;On the fourfold pattern of both Ezekiel and John, see &lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 976–977.&lt;a href="#fnref11" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn12"&gt;&lt;p&gt;&lt;span class="citation" data-cites="beale:millennium:2013"&gt;Beale, “The Millennium in Revelation 20.”&lt;/span&gt;, 35–36.&lt;a href="#fnref12" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn13"&gt;&lt;p&gt;&lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 687–688; &lt;span class="citation" data-cites="koester:revelation:2014"&gt;Craig R. Koester, &lt;em&gt;Revelation: A New Translation with Introduction and Commentary&lt;/em&gt;, ed. John J. Collins, vol. 38A, The Anchor Yale Bible (New Haven: Yale University Press, 2014)&lt;/span&gt;, 767.&lt;a href="#fnref13" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn14"&gt;&lt;p&gt;&lt;span class="citation" data-cites="kistemaker:revelation:2001"&gt;Kistemaker, &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;&lt;/span&gt;, 536.&lt;a href="#fnref14" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn15"&gt;&lt;p&gt;The identity of the martyrs/saints is primarily significant for premillennial readings. In any case it seems most likely that John has martyrs in view, but as representatives of &lt;em&gt;all&lt;/em&gt; the saints. So &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 704; &lt;span class="citation" data-cites="koester:revelation:2014"&gt;Koester, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 771; and contra variously &lt;span class="citation" data-cites="aune:revelation.17.22:1998"&gt;David E. Aune, &lt;em&gt;Revelation 17–22&lt;/em&gt;, ed. Bruce M. Metzger and Ralph P. Martin, vol. 52C, Word Biblical Commentary (Nashville: Thomas Nelson Publishers, 1998)&lt;/span&gt;, 1104; &lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 365–366; &lt;span class="citation" data-cites="patterson:revelation:2012"&gt;Patterson, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;.&lt;a href="#fnref15" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn16"&gt;&lt;p&gt;So &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 701–702.&lt;a href="#fnref16" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn17"&gt;&lt;p&gt;&lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 985; cf. &lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 361 and &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 702.&lt;a href="#fnref17" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn18"&gt;&lt;p&gt;&lt;span class="citation" data-cites="jmford:revelation:1975"&gt;J. Massyngberde Ford, &lt;em&gt;Revelation: Introduction, Translation and Commentary&lt;/em&gt;, ed. David Noel Freedman and Raymond E. Brown, The Anchor Bible (Garden City, New York: Doubleday &amp;amp; Company, Inc., 1975)&lt;/span&gt;, 330.&lt;a href="#fnref18" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn19"&gt;&lt;p&gt;&lt;span class="citation" data-cites="koester:revelation:2014"&gt;Koester, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 785.&lt;a href="#fnref19" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn20"&gt;&lt;p&gt;&lt;span class="citation" data-cites="koester:revelation:2014"&gt;Koester&lt;/span&gt;, 783.&lt;a href="#fnref20" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn21"&gt;&lt;p&gt;&lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 706.&lt;a href="#fnref21" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn22"&gt;&lt;p&gt;&lt;span class="citation" data-cites="kistemaker:revelation:2001"&gt;Kistemaker, &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;&lt;/span&gt;, 537; &lt;span class="citation" data-cites="merkle:millennium:2014"&gt;Merkle and Krug, “Hermeneutical Challenges for a Premillennial Interpretation of Revelation 20.”&lt;/span&gt;, 224.&lt;a href="#fnref22" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn23"&gt;&lt;p&gt;&lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 366. See also the comments an ἀναστάσις in &lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 1004.&lt;a href="#fnref23" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn24"&gt;&lt;p&gt;&lt;span class="citation" data-cites="koester:revelation:2014"&gt;Koester, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 775. This assumes that the martyrs here represent in synechdochal fashion &lt;em&gt;all&lt;/em&gt; the saints; see &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 704–705; and &lt;span class="citation" data-cites="koester:revelation:2014"&gt;Koester, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 771.&lt;a href="#fnref24" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn25"&gt;&lt;p&gt;&lt;span class="citation" data-cites="boring:revelation:1989"&gt;Boring, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 208; &lt;span class="citation" data-cites="kistemaker:revelation:2001"&gt;Kistemaker, &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;&lt;/span&gt;, 539–540.&lt;a href="#fnref25" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn26"&gt;&lt;p&gt;&lt;span class="citation" data-cites="aune:revelation.17.22:1998"&gt;Aune, &lt;em&gt;Revelation 17–22&lt;/em&gt;&lt;/span&gt;, 1089–1090; &lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 370 notes the inversion of the universality and selectivity of the resurrection and death, but not the spiritual/physical duality.&lt;a href="#fnref26" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn27"&gt;&lt;p&gt;&lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 995; &lt;span class="citation" data-cites="beale:millennium:2013"&gt;Beale, “The Millennium in Revelation 20.”&lt;/span&gt;, 30–31; &lt;span class="citation" data-cites="merkle:millennium:2014"&gt;Merkle and Krug, “Hermeneutical Challenges for a Premillennial Interpretation of Revelation 20.”&lt;/span&gt;, 223.&lt;a href="#fnref27" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn28"&gt;&lt;p&gt;&lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;&lt;a href="#fnref28" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn29"&gt;&lt;p&gt;&lt;span class="citation" data-cites="boring:revelation:1989"&gt;Boring, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 206; &lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 367–368. For helpful interactions with other millennial literature of the era, see &lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 1018–1019; &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 701; &lt;span class="citation" data-cites="jmford:revelation:1975"&gt;Ford, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 352–354.&lt;a href="#fnref29" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn30"&gt;&lt;p&gt;&lt;span class="citation" data-cites="merkle:millennium:2014"&gt;Merkle and Krug, “Hermeneutical Challenges for a Premillennial Interpretation of Revelation 20.”&lt;/span&gt;, 223–224.&lt;a href="#fnref30" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn31"&gt;&lt;p&gt;Contra &lt;span class="citation" data-cites="patterson:revelation:2012"&gt;Patterson, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 353, who thinks &lt;em&gt;all&lt;/em&gt; the numbers in the book are literal.&lt;a href="#fnref31" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn32"&gt;&lt;p&gt;&lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, p. 362 n. 11. So likewise, &lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 995; &lt;span class="citation" data-cites="kistemaker:revelation:2001"&gt;Kistemaker, &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;&lt;/span&gt;, 533, 535; &lt;span class="citation" data-cites="koester:revelation:2014"&gt;Koester, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 774. A more reasonable but still flawed approach appears in &lt;span class="citation" data-cites="mangina:revelation:2010"&gt;Joseph L. Mangina, &lt;em&gt;Revelation&lt;/em&gt;, ed. R. R. Reno, Brazos Theological Commentary on the Bible (Grand Rapids, Michigan: BrazosPress, 2010)&lt;/span&gt;, 231.&lt;a href="#fnref32" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn33"&gt;&lt;p&gt;Rightly, &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 697–698; &lt;span class="citation" data-cites="koester:revelation:2014"&gt;Koester, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 776, 788; &lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 363.&lt;a href="#fnref33" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn34"&gt;&lt;p&gt;There is no demarcating καὶ εἶδον.&lt;a href="#fnref34" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn35"&gt;&lt;p&gt;Contra e.g. &lt;span class="citation" data-cites="boring:revelation:1989"&gt;Boring, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 194; Boring also includes the New Jerusalem in this sequence as well to get to a seven-part series—a rather doubtful structure. Rightly, &lt;span class="citation" data-cites="kistemaker:revelation:2001"&gt;Kistemaker, &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;&lt;/span&gt;, 531–532; &lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 980.&lt;a href="#fnref35" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn36"&gt;&lt;p&gt;Thus, &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 688 grants that 20:8b is &lt;em&gt;the&lt;/em&gt; problem for premillennial interpretations of the passage.&lt;a href="#fnref36" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn37"&gt;&lt;p&gt;See &lt;span class="citation" data-cites="beale:millennium:2013"&gt;Beale, “The Millennium in Revelation 20.”&lt;/span&gt;, 33–35; and &lt;span class="citation" data-cites="kistemaker:revelation:2001"&gt;Kistemaker, &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;&lt;/span&gt;, 532.&lt;a href="#fnref37" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn38"&gt;&lt;p&gt;&lt;span class="citation" data-cites="koester:revelation:2014"&gt;Koester, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 788 and &lt;span class="citation" data-cites="aune:revelation.17.22:1998"&gt;Aune, &lt;em&gt;Revelation 17–22&lt;/em&gt;&lt;/span&gt;, 1095; cf. &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 688, who suggests that only the &lt;em&gt;armies&lt;/em&gt; are destroyed in ch. 19 because “…there must be some present to follow the dragon when he is released in 20:7.” But nothing in the test suggests this.&lt;a href="#fnref38" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn39"&gt;&lt;p&gt;&lt;span class="citation" data-cites="kistemaker:revelation:2001"&gt;Kistemaker, &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;&lt;/span&gt;, 544.&lt;a href="#fnref39" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn40"&gt;&lt;p&gt;&lt;span class="citation" data-cites="boring:revelation:1989"&gt;Boring, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 210.&lt;a href="#fnref40" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn41"&gt;&lt;p&gt;&lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;. See also the parallels noted by &lt;span class="citation" data-cites="beale:millennium:2013"&gt;Beale, “The Millennium in Revelation 20.”&lt;/span&gt;, 33–37.&lt;a href="#fnref41" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn42"&gt;&lt;p&gt;&lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 976–977.&lt;a href="#fnref42" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn43"&gt;&lt;p&gt;&lt;span class="citation" data-cites="kistemaker:revelation:2001"&gt;Kistemaker, &lt;em&gt;Exposition of the Book of Revelation&lt;/em&gt;&lt;/span&gt;, 544; cf. &lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 373–374.&lt;a href="#fnref43" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn44"&gt;&lt;p&gt;&lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce&lt;/span&gt;, 360–361 notes the parallels to Jude and 2 Peter but rejects the implication; &lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 1030–1031, rightly notes that the nations in 19:20 go to final, not “preconsummation judgment” (1031).&lt;a href="#fnref44" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn45"&gt;&lt;p&gt;&lt;span class="citation" data-cites="r.mounce:revelation:1998"&gt;Mounce, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 378; &lt;span class="citation" data-cites="osborne:revelation:2002"&gt;Osborne, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 709.&lt;a href="#fnref45" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn46"&gt;&lt;p&gt;&lt;span class="citation" data-cites="koester:revelation:2014"&gt;Koester, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 777; contra &lt;span class="citation" data-cites="patterson:revelation:2012"&gt;Patterson, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 355, who asserts (without supporting argument) that Isaiah’s imagery &lt;em&gt;must&lt;/em&gt; precede the consummation.&lt;a href="#fnref46" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn47"&gt;&lt;p&gt;&lt;span class="citation" data-cites="merkle:millennium:2014"&gt;Merkle and Krug, “Hermeneutical Challenges for a Premillennial Interpretation of Revelation 20.”&lt;/span&gt;, 213.&lt;a href="#fnref47" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn48"&gt;&lt;p&gt;&lt;span class="citation" data-cites="beale:revelation:1999"&gt;Beale, &lt;em&gt;The Book of Revelation&lt;/em&gt;&lt;/span&gt;, 985.&lt;a href="#fnref48" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn49"&gt;&lt;p&gt;&lt;span class="citation" data-cites="boring:revelation:1989"&gt;Boring, &lt;em&gt;Revelation&lt;/em&gt;&lt;/span&gt;, 202.&lt;a href="#fnref49" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="SEBTS"></category><category term="M. Div."></category><category term="papers"></category></entry><entry><title>Tweets on Psych Medication</title><link href="http://www.chriskrycho.com/2015/tweets-on-psych-medication.html" rel="alternate"></link><published>2015-07-22T08:34:00-04:00</published><updated>2015-07-22T08:34:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-22:/2015/tweets-on-psych-medication.html</id><summary type="html">&lt;p&gt;Yesterday evening, I saw Peter Leithart (&lt;a href="https://twitter.com/PLeithart"&gt;@PLeithart&lt;/a&gt;) retweet this from the &lt;a href="https://twitter.com/_Theopolis"&gt;@_Theopolis&lt;/a&gt; account:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Psych meds are a lobotomy in a bottle. -Rich Bledsoe&lt;br/&gt; &lt;a href="https://twitter.com/_Theopolis/status/623671327447248896"&gt;∞&lt;/a&gt; July 21, 2015 21:50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I responded, because I’m a theologically conservative Christian with a high view of the value of spiritual work on our psyches …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday evening, I saw Peter Leithart (&lt;a href="https://twitter.com/PLeithart"&gt;@PLeithart&lt;/a&gt;) retweet this from the &lt;a href="https://twitter.com/_Theopolis"&gt;@_Theopolis&lt;/a&gt; account:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Psych meds are a lobotomy in a bottle. -Rich Bledsoe&lt;br/&gt; &lt;a href="https://twitter.com/_Theopolis/status/623671327447248896"&gt;∞&lt;/a&gt; July 21, 2015 21:50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I responded, because I’m a theologically conservative Christian with a high view of the value of spiritual work on our psyches, and therefore agree with much of the &lt;em&gt;intent&lt;/em&gt; of this critique—but also a Christian with a robust anthropology (of the sort I would expect Leithart to have!) which undercuts &lt;em&gt;this&lt;/em&gt; kind of response.&lt;/p&gt;
&lt;p&gt;Perhaps it is simply that I am more attuned to these things because my wife deals with clinical depression, but in any case this kind of thinking is &lt;em&gt;profoundly&lt;/em&gt; destructive, and all-too common in the church.&lt;/p&gt;
&lt;p&gt;My response:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/_Theopolis"&gt;@_Theopolis&lt;/a&gt; No. This is a horrifyingly misguided and indeed misanthropic way of stating what may be a useful critique. &lt;a href="https://twitter.com/PLeithart"&gt;@PLeithart&lt;/a&gt;&lt;br/&gt; &lt;a href="https://twitter.com/chriskrycho/status/623672572551561220"&gt;∞&lt;/a&gt; July 21, 2015 21:55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/_Theopolis"&gt;@_Theopolis&lt;/a&gt; It is one thing to say that we overmedicate—we do. It is another to say that psych meds lobotomize us—they do not. &lt;a href="https://twitter.com/PLeithart"&gt;@PLeithart&lt;/a&gt;&lt;br/&gt; &lt;a href="https://twitter.com/chriskrycho/status/623672684434599936"&gt;∞&lt;/a&gt; July 21, 2015 21:55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/_Theopolis"&gt;@_Theopolis&lt;/a&gt; To put it in these terms &lt;em&gt;at all&lt;/em&gt; is to mistake at the most fundamental level our embodied, fallen, human nature. &lt;a href="https://twitter.com/PLeithart"&gt;@PLeithart&lt;/a&gt;&lt;br/&gt; &lt;a href="https://twitter.com/chriskrycho/status/623672770069680128"&gt;∞&lt;/a&gt; July 21, 2015 21:55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/_Theopolis"&gt;@_Theopolis&lt;/a&gt; We must say “No” to the captivity of self-medication &lt;em&gt;without&lt;/em&gt; rejecting the gift of medicine for broken bodies. &lt;a href="https://twitter.com/PLeithart"&gt;@PLeithart&lt;/a&gt;&lt;br/&gt; &lt;a href="https://twitter.com/chriskrycho/status/623673129072762880"&gt;∞&lt;/a&gt; July 21, 2015 21:57&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/_Theopolis"&gt;@_Theopolis&lt;/a&gt; And our bodies include our brains; we are not conveniently separable entities, with psyches untrammeled from flesh. &lt;a href="https://twitter.com/PLeithart"&gt;@PLeithart&lt;/a&gt;&lt;br/&gt; &lt;a href="https://twitter.com/chriskrycho/status/623673258840354816"&gt;∞&lt;/a&gt; July 21, 2015 21:57&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://twitter.com/_Theopolis"&gt;@_Theopolis&lt;/a&gt; So by all means, proceed with a critique of cultural folly. But do so with pastoral sensitivity to damaged sheep. &lt;a href="https://twitter.com/PLeithart"&gt;@PLeithart&lt;/a&gt;&lt;br/&gt; &lt;a href="https://twitter.com/chriskrycho/status/623673467259518976"&gt;∞&lt;/a&gt; July 21, 2015 21:58&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="tweetstorm"></category></entry><entry><title>The Mystery of the Table</title><link href="http://www.chriskrycho.com/2015/the-mystery-of-the-table.html" rel="alternate"></link><published>2015-07-11T17:00:00-04:00</published><updated>2015-07-11T17:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-07-11:/2015/the-mystery-of-the-table.html</id><summary type="html">&lt;p&gt;The Lord’s Table—that microcosm of the great Wedding Supper of the Lamb, the celebration of the end of the age and the dawn of eternal glory—is, sadly and ironically, one of the great sources of division and contention among the people of God. While this division is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Lord’s Table—that microcosm of the great Wedding Supper of the Lamb, the celebration of the end of the age and the dawn of eternal glory—is, sadly and ironically, one of the great sources of division and contention among the people of God. While this division is tragic, it does rightly reflect the importance of the issue, reflecting as it does on central issues including a church’s or denomination’s Christology, pneumatology, and ecclesiology. It is both important enough to divide over, and central enough to warrant ongoing effort to reconcile over. However, to either rightly divide or rightly reunite, believers must have a clear understanding of the issues at stake in the discussion, as well as the Biblical, theological, reasonable, and traditional bases for those reasons.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Three major questions confront the church regarding the Lord’s Supper: &lt;em&gt;What is it?&lt;/em&gt;, &lt;em&gt;Who may administer it?&lt;/em&gt;, and &lt;em&gt;Who may receive it?&lt;/em&gt; The first question is a matter of Christology and sacramentology; the second and third questions are ecclesiological, but depend on the first.&lt;/p&gt;
&lt;section id="christology-and-sacramentology" class="level2"&gt;
&lt;h2&gt;Christology and sacramentology&lt;/h2&gt;
&lt;p&gt;The classic Catholic view, &lt;em&gt;transubstantiation&lt;/em&gt; is the idea that in the Lord’s Supper, the body and blood of Christ become truly, physically present in the elements—not in their physical makeup, but in their ontological reality.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Protestants have frequently characterized this view as a &lt;em&gt;re-sacrifice&lt;/em&gt; of Christ, in which the priest sacrifices Christ again. The actual Roman Catholic view is not a &lt;em&gt;re-offering of Christ&lt;/em&gt;, however, but a &lt;em&gt;re-presentation of Christ’s offering&lt;/em&gt;. Put another way, when the priest offers the sacrament, the congregation mystically participates in the once-for-all action that Christ accomplished at the cross in time and space.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; (Granting that the Protestant characterization accurately reflects popular Catholic piety regarding the Mass—but just as Protestants would not wish to be judged on the worst excesses of their own traditions’ popular piety, so they should interact with the best of Catholic thought and not only its worst extremes.) Catholics further believe that God provides grace to aid the believer in life and to save from the power of sin by taking the mass.&lt;/p&gt;
&lt;p&gt;The Lutheran concept of the Table is different from the Catholic position, but nearer it than most other Protestant views. Luther rejected many elements of Roman Catholic &lt;em&gt;practice&lt;/em&gt; of the mass, along with the Catholic doctrines of transubstantiation and re-presentation.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; However, he insisted that Christ’s body and blood were nonetheless physically present in the bread and wine. In support of this view, he leaned heavily on the language of the words of institution, “This is my body… this is my blood…” The simple declaration he took to be a clear indication of &lt;em&gt;reality&lt;/em&gt;, rather than &lt;em&gt;sign&lt;/em&gt; and &lt;em&gt;signified&lt;/em&gt; (as Zwingli argued in their debates). That is: “the body and blood of Christ are received through the acts of eating and drink… the consecrated bread &lt;em&gt;is&lt;/em&gt; his body and the consecrated wine &lt;em&gt;is&lt;/em&gt; his blood.”&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; (Many) Lutherans are thus inclined to take the Reformed view (see below) as of an “&lt;em&gt;unreal, fictitious&lt;/em&gt; presence” in contrast with a real, “&lt;em&gt;corporeal&lt;/em&gt; presence.”&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are variations in the Reformed tradition, most prominently Zwingli’s memorial view and Calvin’s “real” or “spiritual” presence view. Of these, Calvin’s is the most distinctive and the most widely practiced apart from Zwingli’s view, and is the dominant view among orthodox/Westminster Presbyterians. Calvin argued that Supper is a gift from God the Father, which points to Jesus Christ, as the Holy Spirit makes Christ really present to believers.&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; He took the words of institution to indicate that Jesus really is present with believers in the feast—“the incarnate, risen and ascended Jesus Christ along with the grace that God promises.”&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; For Calvin and his successors, the bread and wine are really bread and wine, and these untransformed elements are themselves part of God’s gift.&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt; At the same time, this view takes the words of institution as more than mere sign-language; it affirms that through the Spirit believers are truly partaking of Christ himself.&lt;/p&gt;
&lt;p&gt;Probably the dominant view among Western evangelicals is that the Supper is symbolic or memorial only. First articulated by Zwingli and championed by the Anabaptists and Baptists in the centuries that followed, this approach has its adherents among nearly all present-day free-church denominations and non-denominational churches, including the majority of Baptists and charismatics (of all “waves”). There is no single view among Baptists or other low-church evangelicals (Pentecostals or other charismatics included), since they have no single binding authority, whether ecclesiastical or confessional.&lt;a href="#fn10" class="footnote-ref" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; Nonetheless, some standard contours do emerge: baptist theologians tend to emphasize that the grace of God is specially present, but only in the same ways it is specially present in preaching, fellowship, or other normal means of grace. On the other hand, common piety regards the supper as purely symbolic, having no gracious content whatsoever.&lt;a href="#fn11" class="footnote-ref" id="fnref11"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt; Popular views among charismatics may modify this somewhat, however, by including the idea of healing at the Table, as an act of the Spirit for the gathered church.&lt;a href="#fn12" class="footnote-ref" id="fnref12"&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ecclesiological-practice" class="level2"&gt;
&lt;h2&gt;Ecclesiological Practice&lt;/h2&gt;
&lt;p&gt;Nearly all major traditions partake of the Lord’s Supper as gathered churches—not in individual or family settings (though there are of course exceptions). While some denominations and organizations also practice the Eucharist in parachurch contexts, this is the exception rather than the rule.&lt;a href="#fn13" class="footnote-ref" id="fnref13"&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt; The Catholic church offers the Mass daily: as the supreme sacrament and primary means of grace in the life of a Catholic believer, it must be taken frequently. Lutherans, most Reformed churches, Anglicans, and Methodists generally take the Supper weekly, usually as the climax of the Sunday service. By contrast, most other low-church evangelicals—whether denominationally affiliated or not, and whether charismatic or not—come to the table much less frequently. There is no typical pattern among such groups. Taking the supper as rarely as once or twice a year is not unheard-of, taking it weekly is rare, and monthly or quarterly perhaps the most common.&lt;/p&gt;
&lt;p&gt;Various demoninations’ restrictions on the Table vary significantly. The Catholic and Orthodox generally restrict the Table to those in communion with their traditions. Some (though by no means all) Lutherans and Reformed similarly bar from the Supper those who do not share their particular confessional stances.&lt;a href="#fn14" class="footnote-ref" id="fnref14"&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt; Among the free church traditions, practices vary widely. On the one hand, many modern baptistic churches practice fully open communion&lt;a href="#fn15" class="footnote-ref" id="fnref15"&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt;—a practice that has deep roots in the tradition, dating at least to the practice of John Newton’s church. On the other hand, the majority of Baptists historically and many today argue for closed communion, where only believers baptized &lt;em&gt;as believers&lt;/em&gt; (and usually by immersion) may take communion.&lt;a href="#fn16" class="footnote-ref" id="fnref16"&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt; Across all traditions, advocates of more “open” communion emphasize that it is a universal church institution that emphasizes Christ’s work on behalf of &lt;em&gt;all&lt;/em&gt; believers, while those in favor of “closed” communion emphasize the importance of the elements that do separate the denominations—not least their Christology.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="spiritual-presence-practiced-regularly" class="level2"&gt;
&lt;h2&gt;Spiritual Presence, Practiced Regularly&lt;/h2&gt;
&lt;p&gt;Although the Roman Catholic and Lutheran traditions are commendable for their attentiveness to the words of institution, there remain substantial problems with both their views. The Roman Catholic emphasis on priestly mediation of the mass obscures Christ’s all-sufficiency as mediator; likewise, the language of re-presentation of Christ’s sacrifice obscures the finality of Christ’s act on the cross. The Lutheran view recognizes no distinction whatsoever between sign and thing signified, and it hangs on the interpretation of the crucial “is” in the words of institution, ironically without regard for how language (sign) may convey something other than than bare sense (signified). Meanwhile, purely symbolic/memorial views fail to give due attention to either the seriousness of Christ’s words at institution or the ways in which God has always mediated his grace through physical signs and symbols. The language of both Old and New Testament ordinances is more than merely figurative: God really did something in the sacrifice of sheep and goats, and he really does something in baptism, church discipline, and the Eucharist.&lt;/p&gt;
&lt;p&gt;Calvin’s “real presence” view seems the best of the options. It maintains the immensity of Christ’s proclamation of his presence, but without insisting on a view of that presence that diminishes his corporeal ascension. It maintains a truly sacramental view of the material elements, thereby claiming the goodness of the created order and God’s right to use his created world in particular and spiritual ways, but without embracing an &lt;em&gt;ex opere operato&lt;/em&gt; interpretation of his grace along the way. Finally, it both maintains the actual presence of Christ himself and is beautifully Trinitarian, understanding that presence as effected by the Spirit, who both catches the believer up to heaven and mediates the Savior to his people in their fellowship, as believers partake of the free gift of the Father.&lt;/p&gt;
&lt;p&gt;The Lord’s Supper is a demonstration of the unity of Christ’s people, and as such it should be extended as widely as possible. On the one hand, it is important to offer the Supper only to those who are professing believers in Christ. On the other, refusing communion to those who worship the Trinitarian God in the risen Lord Jesus proclaims division in the very practice meant to display the church’s unity. Against the practice of “closed” communion, churches should welcome to the table any who trust in Christ. “It is a meal of remembrance for Jesus’ sacrifice that brought us forgiveness from sins. As such it is solely a meal for disciples…. Therefore our communion is open to all who profess to be followers and disciples of Christ.”&lt;a href="#fn17" class="footnote-ref" id="fnref17"&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As to frequency, Scripture is silent, and so it behooves Christians today not to press any position too strongly. Yet it still seems fair to say that if indeed the ordinance is a place of special meeting between Christ and his people, then his people should be eager to meet with him often. In that light, weekly communion seems best. However, this does not necessarily entail partaking of the Table in every service (though it may). Churches might also opt to leave it at its current monthly or quarterly frequency for corporate gatherings, but make it a part of the weekly gathering of small groups, for example, thus emphasizing both the broader community of the church and the particular unity of the communities within it.&lt;a href="#fn18" class="footnote-ref" id="fnref18"&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Many believers are tempted to dismiss these sorts of details as of little importance—secondary issues that do not or should not affect them or the life of their church. However, because the church’s practice of the Lord’s Supper has implications in so much of the church’s life, her doctrine and practice at the Table are in fact quite important. Rightly understood and practiced, the Table teaches the church about Christology, the communion of the saints, the work of the Spirit, the goodness of the created order, and the relationship between Christ’s work and God’s grace. These are not light matters; they are foundational in the life of the church. The high-church traditions certainly have this much right, then: the liturgies and practices of the church matter. Indeed, in many ways, the &lt;em&gt;practices&lt;/em&gt; of a community may be as profound a force in shaping her people as the &lt;em&gt;proclamations&lt;/em&gt; of her leaders.&lt;a href="#fn19" class="footnote-ref" id="fnref19"&gt;&lt;sup&gt;19&lt;/sup&gt;&lt;/a&gt; Any Christian community with deficient views or practices of communion will &lt;em&gt;necessarily&lt;/em&gt; be lacking in its worship and fellowship. Christians are called to unity, and it is around the table that their unity is most deeply proclaimed. If there is any place for ecumenism among Christian denominations, it is at the Table. Likewise, Christians are called to worship not just Christ-the-idea, but Christ-the-man, whose body and blood they spiritually receive for the nourishment of their souls: the good gift of the Father, worked in them by the Spirit. Christ the Lord is seated in heaven, and is spiritually present everywhere, but he is spiritually present &lt;em&gt;especially&lt;/em&gt; at the Table,&lt;a href="#fn20" class="footnote-ref" id="fnref20"&gt;&lt;sup&gt;20&lt;/sup&gt;&lt;/a&gt; and this is a great comfort to saints in the midst of trials and woes.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="works-cited" class="level1"&gt;
&lt;h1&gt;Works Cited&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bergman, Mike. “Why We Practice ‘Open’ Communion.” SBC Voices. Posted September 9, 2011. http://sbcvoices.com/why-we-practice-open-communion/ (accessed June 29, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Catholic Church. &lt;em&gt;Catechism of the Catholic Church: Revised in Accordance with the Official Latin Text Promulgated by Pope John Paul II&lt;/em&gt;. Vatican City: Libreria Editrice Vaticana, 1997.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Gros, Jeffrey. “The Roman Catholic View.” In &lt;em&gt;The Lord’s Supper: Five Views&lt;/em&gt;, edited by Gordon T. Smith, 13–31. Downers Grove: IVP Academic,
&lt;ol start="2008" type="1"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kärkkäinen, Veli-Matti. “The Pentecostal View.” In Smith, 117-135.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moore, Russell D. “Table Manners.” &lt;em&gt;Touchstone&lt;/em&gt;, Sept/Oct 2011. http://www.touchstonemag.com/archives/article.php?id=24-05-016-v (accessed June 29, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Olson, Roger E. “The Baptist View.” In Smith, 91–108.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smith, James K. A. &lt;em&gt;Desiring the Kingdom&lt;/em&gt;. TODO&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stephenson, John R. “The Lutheran View.” In Smith, 41–58.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Van Dyk, Leanne. “The Reformed View.” In Smith, 67–82.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The Wesleyan Quadrilateral is a helpful framework for all theological work, and perhaps especially for any sort of ecumenical work, so long as the centrality and final authority of Scripture itself over the other criteria is upheld.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Jeffrey Gros, “The Roman Catholic View,” in &lt;em&gt;The Lord’s Supper: Five Views&lt;/em&gt;, ed. Gordon T. Smith (Downers Grove: IVP Academic, 2008), 17–19; cf. Catholic Church, &lt;em&gt;Catechism of the Catholic Church: Revised in Accordance with the Official Latin Text Promulgated by Pope John Paul II&lt;/em&gt; (Vatican City: Libreria Editrice Vaticana, 1997), 1362–1367.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Gros, 19–20.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;At the least, he rejected his understanding of those views, and probably as well the Catholic church’s popular teaching at the item; leaving aside aside the issue of Roman Catholic views on tradition and authority, is is possible either that Luther was mistaken on Catholic dogma or that Catholic teaching has been clarified helpfully in the intervening centuries.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;John R. Stephenson, “The Lutheran View,” in Smith, 45.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;ibid., 48; emphasis original.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;Leanne Van Dyk, “The Reformed View,” in Smith, 75–77.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;ibid., 78.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;So, rightly, David E. Willis, &lt;em&gt;Notes on the Holiness of God&lt;/em&gt; (Grand Rapids: Eerdmans, 2002), p. 93, quoted in Smith, 35. Cf. &lt;em&gt;Catechism of the Catholic Church&lt;/em&gt;, 1333.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;Roger E. Olson, “The Baptist View,” in Smith, 93–94; Veli-Matti Kärkkäinen, “The Baptist View: A Pentecostal Response,” in Smith, 115.&lt;a href="#fnref10" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn11"&gt;&lt;p&gt;Olson, 101.&lt;a href="#fnref11" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn12"&gt;&lt;p&gt;Veli-Matti Kärkkäinen, “The Pentecostal View,” in Smith, 126–128.&lt;a href="#fnref12" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn13"&gt;&lt;p&gt;The author was very briefly an attendee of a Wesley Foundation campus organization in college where the Eucharist was a regular part of the weekly service.&lt;a href="#fnref13" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn14"&gt;&lt;p&gt;So Gros, 31; Stephenson, 56–57.&lt;a href="#fnref14" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn15"&gt;&lt;p&gt;So Olson, 37, “Withholding sacramental sharing on the basis of disagreement about the nature of the Lord’s supper seems odd to us… we are not offended by Catholics’ closed Communion, but we find it odd and exclusive”—a sentiment he reiterates on p. 64.&lt;a href="#fnref15" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn16"&gt;&lt;p&gt;So Russell D. Moore, “Table Manners,” Touchstone, Sept/Oct 2011, http://www.touchstonemag.com/archives/article.php?id=24-05-016-v (accessed June 29, 2015).&lt;a href="#fnref16" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn17"&gt;&lt;p&gt;Mike Bergman, “Why We Practice ‘Open’ Communion,” SBC Voices, posted September 9, 2011, http://sbcvoices.com/why-we-practice-open-communion/ (accessed June 29, 2015).&lt;a href="#fnref17" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn18"&gt;&lt;p&gt;This highlights the contextual nature of the practice: while regular Communion is a natural outworking of any sacramental view, the way that works out in practice naturally looks very different in a house church than in a megachurch, and different in Kenya than in Kansas.&lt;a href="#fnref18" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn19"&gt;&lt;p&gt;Cf. James K. A. Smith, &lt;em&gt;Desiring the Kingdom&lt;/em&gt;.&lt;a href="#fnref19" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn20"&gt;&lt;p&gt;A point made by Nathan A. Finn in numerous class lectures and private conversations.&lt;a href="#fnref20" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="papers"></category></entry><entry><title>More than a Watchword</title><link href="http://www.chriskrycho.com/2015/more-than-a-watchword.html" rel="alternate"></link><published>2015-06-23T08:38:00-04:00</published><updated>2015-06-23T08:38:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-23:/2015/more-than-a-watchword.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Holy Scripture is more than a watchword. It is also more than ‘light for today.’ It is God’s revealed Word for all men, for all times.&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Holy Scripture is more than a watchword. It is also more than ‘light for today.’ It is God’s revealed Word for all men, for all times.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>HTML5 Location, &lt;base&gt;, and SVG</title><link href="http://www.chriskrycho.com/2015/html5-location-base-and-svg.html" rel="alternate"></link><published>2015-06-20T10:30:00-04:00</published><updated>2015-07-02T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-20:/2015/html5-location-base-and-svg.html</id><summary type="html">Angular requires &lt;code&gt;&lt;base&gt;&lt;/code&gt; if you want to use HTML5's &lt;code&gt;location&lt;/code&gt;… but if you get it wrong, SVG things can and will break under you.
</summary><content type="html">&lt;p&gt;For quite some time, I have been frustrated by a bug in HolyBible.com: Firefox would not render SVGs using the &lt;code&gt;&amp;lt;use xlink:xhref=&amp;quot;#some-SVG-ID&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;&lt;/code&gt; pattern. Today, I set aside my ongoing work on new user-facing functionality and dedicated what working time I had to hunting down the cause of this and fixing it at last.&lt;/p&gt;
&lt;p&gt;I was surprised to find the culprit: the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag. If you don’t know what the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag is, you’re not alone. It is &lt;em&gt;not&lt;/em&gt; used all that much in general, and I had never actually seen it on a site before starting on this project last year.&lt;/p&gt;
&lt;p&gt;So what went wrong? How do these two things play together?&lt;/p&gt;
&lt;p&gt;I am using (and reusing) SVG items throughout the HolyBible.com interface, taking advantage of the ability to define symbols and reference them with the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag, like so:&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;svg version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; xmlns:ev=&amp;quot;http://www.w3.org/2001/xml-events&amp;quot; style=&amp;quot;display: none&amp;quot;&amp;gt;
  &amp;lt;symbol id=&amp;quot;logo-shape&amp;quot; viewBox=&amp;quot;0 0 256 256&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Logo&amp;lt;/title&amp;gt;
    &amp;lt;desc&amp;gt;The HolyBible.com logo: sunrise breaking over an open book (the Bible).&amp;lt;/desc&amp;gt;
    &amp;lt;path id=&amp;quot;logo-light&amp;quot; d=&amp;quot;M172.1 116.3l5.1-4.1-12.5-.5 32-26.3-41.4 18.4 11-20.1L148 96l12.2-37.5L138.8 91l.1-36.2-10.3 34.4L114 36.1l4.3 54.9-22.2-34.9 13 39.9-18.3-12.4 11 20.1-42.5-19.2 32.8 26.9-10.4.8 4.4 3.9c13.1-1.6 27.4-2.7 42.4-2.7 15.4 0 30.1 1.2 43.6 2.9z&amp;quot;/&amp;gt;
    &amp;lt;path id=&amp;quot;logo-book&amp;quot; d=&amp;quot;M199.9 219.9c-47.4-9.8-96.4-9.8-143.8 0-6-28.9-12-57.7-17.9-86.6 59.3-12.3 120.4-12.3 179.7 0-6 28.9-12 57.8-18 86.6z&amp;quot;/&amp;gt;
  &amp;lt;/symbol&amp;gt;
&amp;lt;/svg&amp;gt;

&amp;lt;!-- somewhere else on the page --&amp;gt;
&amp;lt;svg&amp;gt;
  &amp;lt;use xlink:href=&amp;quot;#logo-shape&amp;quot;&amp;gt;&amp;lt;/use&amp;gt;
&amp;lt;/svg&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Throughout all my early prototyping, this worked perfectly across all modern browsers. (For more, see &lt;a href="https://css-tricks.com/svg-sprites-use-better-icon-fonts/"&gt;CSS Tricks&lt;/a&gt;.) Now, when I started moving from the prototype phase into actually building the application in Angular last fall, I learned that you have to set the base URL for the application using the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag to use the HTML5 Location API with Angular 1.x. If you want URL-based, rather than &lt;code&gt;#&lt;/code&gt;-based navigation in an Angular app, you need this. Following the recommendation of whatever documentation and tutorials I found, I set it so:&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;base href=&amp;quot;/&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, this was the recommendation I saw in every bit of documentation and every tutorial, so I assumed it would have no problems. As it turns it, that’s not the case. (This is a &lt;a href="http://www.chriskrycho.com/2015/how-to-build-a-single-page-app-api-right.html"&gt;recurring theme&lt;/a&gt; in my experience with Angular.) In Chrome, Safari, and IE9+, this works exactly as expected. In Firefox, however, it does &lt;em&gt;not&lt;/em&gt;. The use of the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag changes the behavior of &lt;code&gt;#&lt;/code&gt;-based URLs on a page. Specifically, it makes it so that if you’re at a URL that &lt;em&gt;isn’t&lt;/em&gt; the base route, anchor links don’t behave as expected. In order to make the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag as expected, we would have to use the same URL as the base tag. Among other things, this would require making sure that any place we used the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag, we would have to set that—not exactly a good idea, given that it would entail an awful lot of changes if the base URL were ever changed.&lt;/p&gt;
&lt;p&gt;What if, instead, we did this?&lt;/p&gt;
&lt;pre class="html"&gt;&lt;code&gt;&amp;lt;script&amp;gt;document.write(&amp;#39;&amp;lt;base href=&amp;quot;&amp;#39; + document.location.origin + &amp;#39;&amp;quot; /&amp;gt;&amp;#39;);&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, when the page renders, it writes the document location based on the &lt;em&gt;current&lt;/em&gt; location. The URL history still behaves as expected with Angular, but the relative URLs for IDs behave as expected in Firefox again, while not breaking the behavior in any other browsers.&lt;/p&gt;
&lt;p&gt;But… then you’ll navigate to another page, and Firefox will be back to not working.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/angular/angular.js/issues/8934#issuecomment-56568466"&gt;solution&lt;/a&gt;, it turns out, only came into being after I’d done the initial implementation, and I have no idea how much later it found its way into the Angular docs. However, even though it now &lt;em&gt;exists&lt;/em&gt; in the docs, it’s by no means obvious why you should do it this way, and certainly no mention of SVG! This might not seem odd to you… but it should, given that the only reason that Angular introduced this API change was to account for &lt;em&gt;exactly this issue&lt;/em&gt;.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the Angular docs note, leaving out the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag means all your URLs have to be absolute if you want to use HTML5 location and the &lt;code&gt;$locationProvider&lt;/code&gt;. If you want to use SVGs with &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; and Firefox, though, that’s what you have to do (and therefore that’s what I’m doing).&lt;/p&gt;
&lt;p&gt;Fun times, right?&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The closest it gets is this reference:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Links that only contain a hash fragment (e.g. &lt;code&gt;&amp;lt;a href=&amp;quot;#target&amp;quot;&amp;gt;&lt;/code&gt;) will only change &lt;code&gt;$location.hash()&lt;/code&gt; and not modify the url otherwise. This is useful for scrolling to anchors on the same page without needing to know on which page the user currently is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even this, however, only &lt;em&gt;hints&lt;/em&gt; at the root of the SVG issue.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="angularjs"></category><category term="javascript"></category></entry><entry><title>Faithfulness</title><link href="http://www.chriskrycho.com/2015/faithfulness.html" rel="alternate"></link><published>2015-06-18T17:00:00-04:00</published><updated>2015-06-18T17:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-18:/2015/faithfulness.html</id><summary type="html">&lt;p&gt;It’s been a lot more than a month since the promised monthly update. I’ll blame it on a lack of self-discipline… or perhaps on the presence thereof.&lt;/p&gt;
&lt;p&gt;Every day, we face choices about where to spend our time. In this particular season of life, that has often meant …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It’s been a lot more than a month since the promised monthly update. I’ll blame it on a lack of self-discipline… or perhaps on the presence thereof.&lt;/p&gt;
&lt;p&gt;Every day, we face choices about where to spend our time. In this particular season of life, that has often meant not writing, even things I &lt;em&gt;want&lt;/em&gt; to write. I have a family to care for, a church to serve, work to do, and schoolwork to accomplish. Family is a daily endeavor, work and school nearly so, and church regular if not quite daily. In the midst of that, I have to decide: &lt;em&gt;What will I do today?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our culture tends to put the question in terms of balance; my friend and pastor Ashok Nachnani suggested to me a while back that it is better to think in terms of &lt;em&gt;faithfulness&lt;/em&gt;. “Balance” suggests holding all these things in equal proportion, juggling them against each other. “Faithfulness” suggests fulfilling the responsibilities as best we can, with the time we are given. The actual day-to-day outcome may not look particularly different, but it is an important shift in the way we think nonetheless. To be faithful may mean letting some desireable things go, and it may mean doing some things in a different way or to a lesser degree than we might like.&lt;/p&gt;
&lt;p&gt;Writing, for example.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; writing. I like keeping a public record for my friends and family to see how my life is. I enjoy stretching my mental muscles in the way that writing requires. I enjoy thinking through pen or keyboard. But faithfulness to the responsibilities God has given me right now means &lt;em&gt;not&lt;/em&gt; trying to balance those desires against each other, and instead doing what is best for my family and my church. For the most part, right now that means not writing.&lt;/p&gt;
&lt;p&gt;As I put it to Jaimie a while back, at this point in life I have time for one hobby—and only one. That hobby, at this point, is fitness. I run half marathons, and now I do triathlons (first one coming up in 10 days!). That takes up a non-trivial amount of time every week. It helps me in the other areas of my life, to be sure: it helps me be less physically tired, improves my focus in school and work, and serves to maintain my health. Nonetheless, it is hobby-like and it takes a substantial amount of time every day.&lt;/p&gt;
&lt;p&gt;So right now, I write a great deal less than I want, and a great deal less than I did in college or early in our marriage. I miss the days when I had time to work on poetry for hours at a stretch, or simply to muse for a few thousand words. But it is far more important for me to spend time with Ellie and Kate than it is to write poetry, or to compose music, right now. Lord willing, I have 55–60 years ahead of me. Of those years, they will be close only another 15–20, and they will be the age they are today &lt;em&gt;only for today&lt;/em&gt;. As much as writing and composing and hobby programming all look appealing to me, and as much as those really are good expressions of the ways God has gifted me, focusing on them would not be the most &lt;em&gt;faithful&lt;/em&gt; use of my time—not today.&lt;/p&gt;
&lt;p&gt;This is not to say that writing and composing and developing interesting software are not important. Rather: they &lt;em&gt;are&lt;/em&gt; good and valuable things. But they are things to focus on at other times in life. As fast as this life goes, and I am increasingly aware that it goes quickly indeed, I can expect in the ordinary course of things to have &lt;em&gt;many&lt;/em&gt; years available for those things. I can exercise my gifts faithfully in the right time and season. Today, I can learn to love my little girls well, invest deeply in their lives, and savor moments that will never come back.&lt;/p&gt;
&lt;p&gt;Most of all, I must remind myself that teaching and shaping them is easily the most significant thing I will ever do. Should I write an essay that persuaded a thousand people to change their views on the arts, or to adopt a better view of the church, still my impact on two little lives would be more important. If I can point them faithfully to Christ and help them learn to walk faithfully with him as healthy members of his body, that will be a good life to have lived. Everything else is icing on the cake.&lt;/p&gt;
&lt;p&gt;Icing is good, for the record. Sometimes, in these sorts of posts, we can mistake &lt;em&gt;relative importance&lt;/em&gt; for &lt;em&gt;absolute importance&lt;/em&gt;. I should, at various times in my life, make sure to exercise the good gifts God has given me in ways appropriate to that time and context. Right now, that means continuing to write, but less frequently. In the future, it will mean something else.&lt;/p&gt;
&lt;p&gt;And all of this must stand in the context of resurrection hope. Too often, I live—too often, we &lt;em&gt;all&lt;/em&gt; live—as though the next 60 years are all we may expect, the only time for writing and composing and so on. But it is not. I look forward to endless ages of creativity, exercising those gifts &lt;em&gt;more&lt;/em&gt; fully than I am able now. So: Lord Jesus, come soon. And in the meantime, may I be faithful in each season to do as well as I can.&lt;/p&gt;
</content><category term="family"></category><category term="writing"></category></entry><entry><title>A Leaf</title><link href="http://www.chriskrycho.com/2015/a-leaf.html" rel="alternate"></link><published>2015-06-17T16:23:00-04:00</published><updated>2015-06-17T16:23:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-17:/2015/a-leaf.html</id><summary type="html">&lt;div class="line-block"&gt;I at first mistook it&lt;br /&gt;
        for a leaf&lt;br /&gt;
    Then thought No!&lt;br /&gt;
        for that must be a moth.&lt;br /&gt;
And sure enough,&lt;br /&gt;
        as I stepped past&lt;br /&gt;
    it danced into the sky&lt;br /&gt;
        on its leafs-for-wings.&lt;/div&gt;
</summary><content type="html">&lt;div class="line-block"&gt;I at first mistook it&lt;br /&gt;
        for a leaf&lt;br /&gt;
    Then thought No!&lt;br /&gt;
        for that must be a moth.&lt;br /&gt;
And sure enough,&lt;br /&gt;
        as I stepped past&lt;br /&gt;
    it danced into the sky&lt;br /&gt;
        on its leafs-for-wings.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>Future Hope, Resurrection Bodies, and a Coming Kingdom</title><link href="http://www.chriskrycho.com/2015/future-hope-resurrection-bodies-and-a-coming-kingdom.html" rel="alternate"></link><published>2015-06-13T22:00:00-04:00</published><updated>2015-06-13T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-13:/2015/future-hope-resurrection-bodies-and-a-coming-kingdom.html</id><summary type="html">Dan C. Barber and Robert A. Peterson's &lt;cite&gt;Life Everlasting&lt;/cite&gt; is a helpful corrective to pop evangelicalism's views on heaven in some ways… but it falls profoundly short when it comes to the promises of resurrection and God's kingdom.
</summary><content type="html">&lt;p&gt;Dan C. Barber and Robert A. Peterson’s &lt;em&gt;Life Everlasting&lt;/em&gt; is an introductory look at the Biblical picture of heaven and eschatological hope. The authors, noting the prevalence of near-death experience accounts, the fascination many Christians evince with life after death, and the many misunderstandings about heaven and Christian hope that are prevalent among both Christians and non-Christians, aim to reset the focus of the discussion on what the Bible has to say about these matters. After a brief introduction, they examine in turn the ideas of Creation, Rest, Kingdom, Presence, and Glory through the lens of a Creation-Fall-Redemption-Restoration reading of Scripture. For each major idea they survey, they supply a chapter examining how how things are meant to be (Creation), how they have been distorted (Fall), how Christ’s work ushers in renewal (Redemption), and how believers may expect and hope them to turn out in the end (Restoration). In each pair of chapters, they spend the bulk of their time surveying (albeit very briefly) some of the biblical material on the topic under consideration.&lt;/p&gt;
&lt;p&gt;Barber and Peterson open with a section on Creation in order to argue that central and essential to Christian hope—and too often overlooked or misunderstood—is the idea of physical resurrection. In their opening section, they trace out this idea effectively and substantively. However, though they continue to give nods to the idea of the resurrection’s importance through the remainder of the book, they largely fall prey to one of the traps they decry in their intro: they focus almost entirely on &lt;em&gt;spiritual&lt;/em&gt; realities to the exclusion of &lt;em&gt;physical&lt;/em&gt; realities. As a result their analysis of the ideas of rest, kingdom, and presence are all substantially impoverished in various ways, and even their (better) treatment of Glory leaves a bit to be desired. It is not that what they say is incorrect; they present the Biblical picture of those spiritual elements of future hope well and fairly compellingly (albeit a bit blandly). Rather, it is that in each case, they simply fail to address key and essential repercussions of the embodied nature of Christian hope.&lt;/p&gt;
&lt;p&gt;In their discussion of rest, the authors repeatedly emphasize their view that the Christian’s hope of rest is &lt;em&gt;not&lt;/em&gt; in fact physical, but rather is simply a matter of experiencing fellowship with God. They note that Christians will rest from their labors, and give a token nod to the idea that they may continuing doing something or other in the new heavens and new earth, but spend no time whatsoever considering how that informs believers’ view of vocation in the present. Though they acknowledge that labor in the Garden was good, they say little about the continuing goodness of work, and skip almost entirely over the prospect of the restoration of work to a human &lt;em&gt;good&lt;/em&gt; in the coming age. Besides failing to account for the full biblical narrative, this has significant pastoral consequences. The fallen world alternately presents believers with the two dangers of resenting all work or of idolizing it. The answer to these solutions is not to look to a merely spiritual hope of rest, but rather to recognize that the shape of work must be understood in light of its creation and its promised eschatological renewal. Christians today are members of an outpost of the eschatological age in the here and now; believers are citizens of the future age, attempting to live out the realities of the age to come even as the world around remains broken and unrestored. Christians’ approach to their work, then, should reflect the inherent goodness of generative activity, the hope that their labors will produce real reward in the age to come, and a God-honoring delight in the goodness of that work. Barber and Peterson neatly lay the groundwork for this, but fail to do anything with that groundwork.&lt;/p&gt;
&lt;p&gt;They similarly focus entirely on spiritualized visions of &lt;em&gt;kingdom&lt;/em&gt;. While they acknowledge that the kingdom will be in the new heavens and new earth, they spend no time whatsoever on the implications of this for justice, reconciliation, or the healing of the nations—despite the fact that these are all clearly taught, and at great length, in the pages of Scripture. The consummation of God’s reign in his human agents (and specifically Jesus Christ) does have enormous spiritual implications, and Barber and Peterson’s point that Satan and his forces will be defeated and the kingdom at peace at last is well-taken. However, the Biblical pictures of the kingdom include far more than the end of deception and death; it entails the kingdoms of the world having become the kingdom of Christ, and the nations living in harmony with each other. It includes ethnic reconciliation, peace and harmony throughout the earth, the end of economic oppression, and true justice for everyone. These are not merely the concerns of this generation; they are themes that run throughout the pages of the Bible, from Jeremianic condemnations of Israelite failure to practice justice to Paul’s rebuke of ethnic divisions in the early church. No picture of the coming kingdom that misses these elements is either Biblically faithful or pastorally appropriate.&lt;/p&gt;
&lt;p&gt;In addressing &lt;em&gt;presence&lt;/em&gt;, Barber and Peterson once again do good preparatory work but then fail to capitalize on it. Their discussion of how God’s people originally experienced his presence nicely captures the reality that God would come and walk in the Garden of Eden: he was in some mysterious way physically present with them. However, as in the other sections, Barber and Peterson turn primarily to spiritual concerns after their introduction, and their discussion of restoration never even mentions on the reality of Christ’s everlasting incarnation. Still less does it derive from that one of the great hopes of the Christian life: that believers will &lt;em&gt;see&lt;/em&gt; God. Christians will be able to converse with the incarnate Son, and his humanity will forever be paradigmatic for all other resurrected saints. The resurrected Messiah figures centrally in the New Testament and especially John’s vision; it is astounding that he should be set aside for a spiritualizing discussion that minimizes the physical reality of the new Jerusalem (even if that discussion is largely accurate in its description of the intent of the “new Jerusalem” sequence in Revelation).&lt;/p&gt;
&lt;p&gt;Gladly, the authors’ treatment of &lt;em&gt;glory&lt;/em&gt; does a little better, as they devote some time to the goodness and attributes of the resurrected body. Unsurprisingly, though, given the trajectory of the rest of the book, that discussion is soon set aside for a discussion about the nature of heavenly rewards (one that ultimately concludes that there are no tangible heavenly rewards whatsoever!). This seems a fitting summary of the book’s weaknesses in this area: when the authors &lt;em&gt;do&lt;/em&gt; address the resurrection directly, it is largely on target—but they too rarely address the resurrection; even more rarely do they trace out its implications for future hope, and still less its impact on life in the time between the times. This failure to consider or apply the promise of physical resurrection and cosmic restoration in areas that are both Biblically significant and pastorally urgent makes the book much less valuable than it might otherwise be.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category></entry><entry><title>How to Build a Single-Page App API Right</title><link href="http://www.chriskrycho.com/2015/how-to-build-a-single-page-app-api-right.html" rel="alternate"></link><published>2015-06-09T22:16:00-04:00</published><updated>2015-06-09T22:16:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-09:/2015/how-to-build-a-single-page-app-api-right.html</id><summary type="html">How to write a single-page app API so that you get usable data on the first load *and* have a nice interface for your single-page application built in Ember/Angular/Knockout/Backbone/etc.
</summary><content type="html">&lt;p&gt;When I was first working on HolyBible.com, I struggled for quite a while to wrap my head around the right way to structure its API—and in truth, I actually didn’t come up with what I would call the &lt;em&gt;right&lt;/em&gt; solution. I came up with a &lt;em&gt;working&lt;/em&gt; solution, and the site performs all right, most of the time. However, our goal as developers shouldn’t be “all right, most of the time.” It should be “really well, all the time.” A big part of what I did wrong came from the bad advice I found in reading up on the issue along the way. This is my shot at helping you, dear reader, avoid making the same mistake.&lt;/p&gt;
&lt;section id="the-challenge" class="level2"&gt;
&lt;h2&gt;The challenge&lt;/h2&gt;
&lt;p&gt;When building a client-side application, we need to get the data for each view so that we can render it. In the case of HolyBible.com, that means everything from actual Bible text to study Bible notes, about pages, etc. The question is &lt;em&gt;how&lt;/em&gt; to do this: we need to be able to load an actual page from our server, and we need a way to request data (rather than whole pages) from the server.&lt;/p&gt;
&lt;p&gt;(More experienced developers already know where this is going: that last sentence there has the key to this whole thing. I know. But the internet &lt;em&gt;doesn’t.&lt;/em&gt; I learned this the hard way.)&lt;/p&gt;
&lt;section id="the-mistake" class="level3"&gt;
&lt;h3&gt;The mistake&lt;/h3&gt;
&lt;p&gt;Here’s the mistake I made: I built the Bible data API as (essentially) a &lt;em&gt;single&lt;/em&gt; endpoint. When I went looking for advice on how to build this in Angular and Node/Express, every single tutorial or blog post I found outlined the same basic solution: routes for your data endpoints, and catch-all route that returns the basic frame page for everything else. So, for HolyBible.com, that would come out with route matchers for e.g. &lt;code&gt;/data/gen.1.1&lt;/code&gt;, and for any other specific routes needed (for other views, static resources, etc.), with a default behavior of just dropping a static, basically empty template at the catchall &lt;code&gt;*&lt;/code&gt; route. Then, once the application has loaded, it can inspect the URL and load the relevant data.&lt;/p&gt;
&lt;p&gt;This works. It’s exactly what I did on HolyBible.com, in fact. But it’s &lt;em&gt;slow&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong: the time until the initial page load is actually relatively quick (though I plan to improve it substantially over the next couple months). The real problem is that the initial page load &lt;em&gt;doesn’t include any content&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;hate&lt;/em&gt; this. That’s why people are on the site: not to see my neat skills with JavaScript, just to read the Bible. And they have to wait, because once the page &lt;em&gt;does&lt;/em&gt; load, Angular has to spin up the full application, see what content &lt;em&gt;should&lt;/em&gt; have been loaded, and request it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-solution" class="level3"&gt;
&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;Don’t write &lt;em&gt;one&lt;/em&gt; API. Write &lt;em&gt;two&lt;/em&gt;. They should be structured nearly identically, but one of them will be a &lt;em&gt;page&lt;/em&gt; API endpoint, and one will be a &lt;em&gt;data&lt;/em&gt; API endpoint. In the context of HolyBible.com, here’s how that would play out.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; One endpoint would be based purely on the standard URL, something like &lt;code&gt;holybible.com/jhn.3.16&lt;/code&gt;. The other would be to retrieve a set of &lt;em&gt;data&lt;/em&gt; associated with a given address, like &lt;code&gt;holybible.com/data/jhn.3.16&lt;/code&gt;. This is only a little different from the approach suggested above, but that small difference matters—in fact, it matters a &lt;em&gt;lot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Instead of having the &lt;code&gt;/jhn.3.16&lt;/code&gt; route get handled by a catchall &lt;code&gt;*&lt;/code&gt; route on the back end, it gets its own API endpoint, which looks for URLS of this shape and hands back a full page. That API endpoint is responsible to actually render the content of the page appropriately—in this case, with something like the whole chapter of John 3.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;em&gt;That&lt;/em&gt; gets handed back to the browser, so the very first thing the user sees is not a blank page while the JavaScript framework spins up and requests data, but rather &lt;em&gt;the Bible text they asked for in the first place&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Meanwhile, the JavaScript framework &lt;em&gt;can&lt;/em&gt; spin up, and load any required session data, etc. and start managing the UI like normal. Once we get to this point, the framework can go ahead and request a data payload from the &lt;code&gt;/data/&amp;lt;reference&amp;gt;&lt;/code&gt; endpoint. So, for example, if there is a navigation control on the page (as on HolyBible.com and indeed most sites), clicking to navigate to Job 14 could, instead of requesting &lt;code&gt;/job.14.4&lt;/code&gt;, fetch the data from the other endpoint by running an AJAX request to &lt;code&gt;/data/job.14.4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The backend thus supplies &lt;em&gt;both&lt;/em&gt; a &lt;code&gt;/&amp;lt;resource&amp;gt;&lt;/code&gt; and a &lt;code&gt;/data/&amp;lt;resource&amp;gt;&lt;/code&gt; route. This might seem redundant, but we’ve just seen why it isn’t, Moreover, if you have any logic that needs to be in place—in our example here, a Bible reference parser, for example, to decide what content should be supplied—you can easily reuse it between the two routes. The differences is simply in the form of the data returned: is it a fully-rendered template, or just the data?&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="so-what" class="level2"&gt;
&lt;h2&gt;So what?&lt;/h2&gt;
&lt;p&gt;This approach has two big advantages over the catch-all approach that was frequently recommended in e.g. Angular SPA tutorials I read.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;It’s &lt;em&gt;progressive enhancement&lt;/em&gt;. If the JavaScript fails, or the user has it disabled, or it fails to load because it’s loaded asynchronously, the user still gets the page they asked for. Moreover, as long as the page content is build carefully (links built appropriately for other content, and so on), the entire application could continue to work even if the JavaScript &lt;em&gt;never&lt;/em&gt; becomes available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s &lt;em&gt;performant&lt;/em&gt;. Loading the content this way will be &lt;em&gt;much&lt;/em&gt; faster than the standard approach recommended for single-page apps. As noted above, it gets the content to the user immediately, then lets the JavaScript UI bits come into play. Since future page loads can take advantage of both caching and smaller data payloads, the whole thing can actually be faster than either a pure client-side &lt;em&gt;or&lt;/em&gt; a pure server-side approach. That is, once the client-side application is running, it can just update its views with data delivered via AJAX, rather than reloading the whole page. But &lt;em&gt;before&lt;/em&gt; that, the user doesn’t have to wait to see something useful until the JavaScript framework spins up.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s not often an approach gives you progressive enhancement and actually increases the performance of an application, but this one does. Better yet, you can apply this in just about any framework: it’s equally applicable to AngularJS with ExpressJS, Backbone with Rails, Ember with Django, Aurelia with Phoenix, or any other combination you come up with.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Note: this is &lt;em&gt;not&lt;/em&gt; the actual API structure of HolyBible.com, or even particularly close to it. Remember, I learned everything I’m writing here by doing it &lt;em&gt;wrong&lt;/em&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Or possibly a section which constitutes a semantic block of data. I have some thoughts on chunking Bible data semantically rather than by chapter and verse for this kind of thing. That’s another post for another day, though.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="javascript"></category></entry><entry><title>To Grow Older</title><link href="http://www.chriskrycho.com/2015/to-grow-older.html" rel="alternate"></link><published>2015-06-06T15:49:00-04:00</published><updated>2015-06-06T15:49:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-06:/2015/to-grow-older.html</id><summary type="html">To grow older is not to fade / unless you make it so— /
rather, to ripen slowly into wisdom / as like an aging tree.…
</summary><content type="html">&lt;div class="line-block"&gt;To grow older is not to fade&lt;br /&gt;
        unless you make it so—&lt;br /&gt;
    rather, to ripen slowly into wisdom&lt;br /&gt;
        as like an aging tree.&lt;br /&gt;
So let me dig deep in life’s passing&lt;br /&gt;
        with roots down by still streams,&lt;br /&gt;
    until I someday stand, hoary and kind,&lt;br /&gt;
        like an oak in winter.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>Corporate and Government Surveillance</title><link href="http://www.chriskrycho.com/2015/corporate-and-government-surveillance.html" rel="alternate"></link><published>2015-06-02T22:43:00-04:00</published><updated>2015-06-02T22:43:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-06-02:/2015/corporate-and-government-surveillance.html</id><summary type="html">A response to Senator Sheldon Whitehouse's address to the NSA on Americans’ greater mistrust of government collection of data than corporations’.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;&lt;a href="https://witheredgrass.wordpress.com/"&gt;Brian Auten&lt;/a&gt; shared &lt;a href="http://www.lawfareblog.com/2015/06/why-americans-hate-government-surveillance-but-tolerate-corporate-data-aggregators/"&gt;this speech&lt;/a&gt; by Sen. Sheldon Whitehouse on Facebook, and I wrote up what follows in response.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;I broadly agree with the critique of the libertarian/TP angle on government as essentially an appendage to business. I am &lt;em&gt;by no means&lt;/em&gt; hostile to the government in general or in principle, nor even to &lt;em&gt;spying&lt;/em&gt;, nor even to warranted (double entendre intended) use of data for law enforcement. The idea that all government is bad is woefully incorrect; it is better to speak of &lt;em&gt;abuses&lt;/em&gt;, either of government or of business or indeed of any sphere exceeding its right domain or acting inappropriately within its domain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a profound and important difference between corporate data collection and federal government data collection: one of them, people accede to directly (though see below); the other they accede to (at best!) indirectly through elected representatives, with whom they may profoundly disagree and against whom they have no recourse (unlike the case of, say, Google or Facebook—one &lt;em&gt;can&lt;/em&gt; simply stop dealing with them). Whatever information I have granted to a corporation, I have chosen to grant them, and I can stop doing so with future information at any time. I &lt;em&gt;cannot&lt;/em&gt; do so with the NSA, FBI, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That distinction may be relatively meaningless for most people in practice, given that the terms, means, and consequences of the data collection carried about by corporations are often obscure to the point of incomprehensibility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As such, a serious reformation ought to occur in the realm of business and the way that people’s information is handled. Treating information about customers as the primary point of transactional value has significantly deleterious costs on any number of things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For this reason, I consistently advocate for and (where possible) choose to use services which are supported by direct payment, rather than by advertising, and so on. This is not always possible, but where it is, we should consider taking that path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nonetheless, because of the government’s power of coercion—a power not held by corporations, though to be sure they can exercise significant force of a certain sort through legal machinery/chicanery—the collection of metadata by the government does pose a more potent and long-term threat to liberty than that by corporations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As such, people are &lt;em&gt;absolutely right&lt;/em&gt; to be more tolerant of corporate data collection than of federal data collection. That they ought to be less tolerant of corporate data collection by no means suggests that their hostility to unwarranted governmental data collection should be diminished: quite the contrary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Therefore, while some of the criticism of the government’s data collection may well be driven by the sorts of corporate interests he suggests, and while much of the opposition from companies like Facebook and Google is indeed hypocritical, the criticism is still warranted. The NSA has clearly and repeatedly overstepped even the extremely wide bounds granted it by the Patriot Act, and the Patriot Act itself licensed behavior that should be horrifying to people concerned with the long-term effects of mass surveillance on governance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content><category term="listicles"></category></entry><entry><title>Python Enums, ctypes.Structures, and DLL exports</title><link href="http://www.chriskrycho.com/2015/ctypes-structures-and-dll-exports.html" rel="alternate"></link><published>2015-05-28T18:00:00-04:00</published><updated>2015-05-28T18:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-28:/2015/ctypes-structures-and-dll-exports.html</id><summary type="html">Unfortunately, the official docs for &lt;code&gt;ctypes&lt;/code&gt; leaves a few things  out—namely, the most basic use case with &lt;code&gt;from_param&lt;/code&gt;! Here's a simple,  working example from my own development work.
</summary><content type="html">&lt;p&gt;For one of my contracts right now, I’m writing a &lt;code&gt;ctypes&lt;/code&gt; Python interface to existing C code. I got stuck and confused for quite a while on getting the interface to a given function to build correctly, and along the way had to try to understand the &lt;code&gt;from_param&lt;/code&gt; class method. The official docs are… fine… but the examples provided don’t cover the most common/basic use case: defining a simple, &lt;em&gt;non-ctypes&lt;/em&gt; data type as an argument to a DLL-exported function.&lt;/p&gt;
&lt;p&gt;Let’s say you have a C function exported from a DLL; for convenience we’ll make it something rather silly but easy to understand:&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;/** my_exported.h */
#include &amp;quot;exports.h&amp;quot;

typedef enum {
    ZERO,
    ONE,
    TWO
} MyEnum;

MY_API int getAnEnumValue(MyEnum anEnum);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The implementation just gives back the integer value of the function:&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;int getAnEnumValue(MyEnum anEnum) {
    return (int)anEnum;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I said, a &lt;em&gt;very&lt;/em&gt; silly example. Note that you don’t technically need the &lt;code&gt;(int)&lt;/code&gt; cast there; I’ve just put it in to be explicit about what we’re doing.&lt;/p&gt;
&lt;p&gt;How would we use this from Python? Assuming we have a DLL named &lt;code&gt;my_dll&lt;/code&gt; which exports the &lt;code&gt;getAnEnumValue&lt;/code&gt; function, we’d load it up roughly like this:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;import ctypes as c

my_dll = c.cdll.LoadLibrary(&amp;#39;my_dll&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we bind to the function like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;get_an_enum_value = my_dll.getAnEnumValue&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when you do this, you usually also supply the &lt;code&gt;argtypes&lt;/code&gt; and &lt;code&gt;restype&lt;/code&gt; values for these functions. If you’re like me, you’d think, “Oh, an enum—a perfect opportunity to use the &lt;code&gt;Enum&lt;/code&gt; type in Python 3.4+!” and then you’d do something like this:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;import ctypes as c
from enum import IntEnum

class MyEnum(IntEnum):
    ZERO = 0
    ONE = 1
    TWO = 2

my_dll = c.cdll.LoadLibrary(&amp;#39;my_dll&amp;#39;)
get_an_enum_value = my_dll.getAnEnumValue
get_an_enum_value.argtypes = [MyEnum]
get_an_enum_value.restype = c.c_int&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That seems sensible enough, but as it is, it won’t work: you’ll get an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TypeError: item 1 in _argtypes_ has no from_param method&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because &lt;code&gt;argtypes&lt;/code&gt; values &lt;em&gt;have&lt;/em&gt; to be either existing &lt;code&gt;ctypes&lt;/code&gt; types&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; or supply either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;from_param&lt;/code&gt; classmethod, or&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use &lt;code&gt;ctypes.Structure&lt;/code&gt; subclasses natively that way, because the &lt;code&gt;Structure&lt;/code&gt; class supplies its &lt;code&gt;from_param&lt;/code&gt; classmethod. The same is &lt;em&gt;not&lt;/em&gt; true of our custom enum class, though. As the docs put it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have defined your own classes which you pass to function calls, you have to implement a &lt;code&gt;from_param()&lt;/code&gt; class method for them to be able to use them in the argtypes sequence. The &lt;code&gt;from_param()&lt;/code&gt; class method receives the Python object passed to the function call, it should do a typecheck or whatever is needed to make sure this object is acceptable, and then return the object itself, its &lt;code&gt;_as_parameter_&lt;/code&gt; attribute, or whatever you want to pass as the C function argument in this case. Again, the result should be an integer, string, bytes, a &lt;code&gt;ctypes&lt;/code&gt; instance, or an object with an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, to make the enum type work, we need to add a &lt;code&gt;from_param&lt;/code&gt; class method or an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute to it. Thus, either of these options will work:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;class MyEnum(IntEnum):
    ZERO = 0
    ONE = 1
    TWO = 2

    # Option 1: set the _as_parameter value at construction.
    def __init__(self, value):
        self._as_parameter = int(value)

    # Option 2: define the class method `from_param`.
    @classmethod
    def from_param(cls, obj):
        return int(obj)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the constructor-based option, the &lt;code&gt;value&lt;/code&gt; argument to the constructor is the value of the &lt;code&gt;Enum&lt;/code&gt; instance. Since the value of anan &lt;code&gt;IntEnum&lt;/code&gt; is always the same as the integer to whcih it is bound, we can just return &lt;code&gt;int(value)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;from_param&lt;/code&gt; approach works a little differently, but with the same results. The &lt;code&gt;obj&lt;/code&gt; argument to the &lt;code&gt;from_param&lt;/code&gt; method is the object instance, in this case the enumerated value itself. &lt;em&gt;Any&lt;/em&gt; &lt;code&gt;Enum&lt;/code&gt; with an integer value can be directly cast to &lt;code&gt;int&lt;/code&gt; (though it is possible for &lt;code&gt;Enum&lt;/code&gt; instances to have other values, so be careful), and since we have an &lt;code&gt;IntEnum&lt;/code&gt; here, we can again just return &lt;code&gt;int(obj)&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;Now, let’s say we want to apply this pattern to more than a single &lt;code&gt;IntEnum&lt;/code&gt; class, because our C code defines more than one enumeration. Extracting it to be common functionality is simple enough: just create a class that implements the class method, and inherit from it.&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;class CtypesEnum(IntEnum):
    &amp;quot;&amp;quot;&amp;quot;A ctypes-compatible IntEnum superclass.&amp;quot;&amp;quot;&amp;quot;
    @classmethod
    def from_param(cls, obj):
        return int(obj)


class MyEnum(CtypesEnum):
    ZERO = 0
    ONE = 1
    TWO = 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our final (working!) Python code, then, would be:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;# Import the standard library dependencies
import ctypes as c
from enum import IntEnum


# Define the types we need.
class CtypesEnum(IntEnum):
    &amp;quot;&amp;quot;&amp;quot;A ctypes-compatible IntEnum superclass.&amp;quot;&amp;quot;&amp;quot;
    @classmethod
    def from_param(cls, obj):
        return int(obj)


class MyEnum(CtypesEnum):
    ZERO = 0
    ONE = 1
    TWO = 2


# Load the DLL and configure the function call.
my_dll = c.cdll.LoadLibrary(&amp;#39;my_dll&amp;#39;)
get_an_enum_value = my_dll.getAnEnumValue
get_an_enum_value.argtypes = [MyEnum]
get_an_enum_value.restype = c.c_int

# Demonstrate that it works.
print(get_an_enum_value(MyEnum.TWO))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output will be &lt;code&gt;2&lt;/code&gt;, just as you’d expect!&lt;/p&gt;
&lt;p&gt;An important note: The type definition we’ve provided here will work for &lt;code&gt;argtypes&lt;/code&gt; or &lt;code&gt;restype&lt;/code&gt; assignments, but &lt;em&gt;not&lt;/em&gt; as one of the members of a custom &lt;code&gt;ctypes.Structure&lt;/code&gt; type’s &lt;code&gt;_fields_&lt;/code&gt; value. (Discussing how you’d go about doing that is beyond the scope of this post; the most direct approach is just to use a &lt;code&gt;ctypes.c_int&lt;/code&gt; and note that it is intended to be used with a given &lt;code&gt;IntEnum&lt;/code&gt;/&lt;code&gt;CtypesEnum&lt;/code&gt; type.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Thanks to &lt;a href="https://alpha.app.net/oluseyi"&gt;@oluseyi&lt;/a&gt; for being my &lt;a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber ducky&lt;/a&gt; while I was working this out earlier this week!&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’m leaving out the part where we build the DLL, and also the part where we locate the DLL, and only using the Windows convention. If you’re on a *nix system, you should use &lt;code&gt;'my_dll.so'&lt;/code&gt; instead, and in any case you need to make sure the DLL is available in the search path.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; the redundancy of “&lt;code&gt;ctypes&lt;/code&gt; types,” don’t you?&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category></entry><entry><title>Strong-Group Cultures are Broken, Too</title><link href="http://www.chriskrycho.com/2015/strong-group-cultures-are-broken-too.html" rel="alternate"></link><published>2015-05-28T17:25:00-04:00</published><updated>2015-05-28T17:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-28:/2015/strong-group-cultures-are-broken-too.html</id><summary type="html">Joseph D. Hellerman's The Church Was a Family has some great things to say, but he profoundly overstates the extent to which the Bible affirms "strong-group" (or indeed, any human) cultures.
</summary><content type="html">&lt;p&gt;In &lt;em&gt;When the Church Was a Family&lt;/em&gt;, Joseph D. Hellerman argues that the health of the church depends on embracing what he describes as a strong-group culture mentality. Based on insights from sociology, he maintains that the “family” language of Scripture, and especially that of the New Testament, should lead believers to embrace the same kind of cultural norms that characterized families in the ancient Mediterranean world where the Bible was written. He first explains how that strong-group culture works, contrasting it with the individualistic (or “weak-group”) culture of the west: individual desires are sublimated to those of the group, and decisions are made both within the context of the group and with the good of the group foremost. He then defends the idea that this was how the New Testament church community was structured, before turning to a general discussion of how the practice of the Western church might need to change to accommodate this kind of cultural shift. In this practical turn, Hellerman considers a number of cases studies for how this has played out in his experience, as well as the implications for leadership.&lt;/p&gt;
&lt;p&gt;While Hellerman’s argument has much to recommend it on the whole, his treatment of the Bible’s relationship to strong- and weak-group cultures leaves a great deal to be desired. Granted that the Bible clearly rejects the kind of radical individualism that characterizes contemporary evangelicalism, and granted further that Hellerman rightly emphasizes the communal and familial language of the New Testament in particular, nonetheless he substantially overstates the case for “strong-group” communities, and in doing so partly undermines an otherwise strong and helpful book. Hellerman repeatedly argues that the Bible clearly and unabashedly appropriates and affirms the strong-group culture of the surrounding world. This is the thesis with which he opens the book, and he dedicates the first half of the book to defending it from the pages of Scripture and the early years of church history.&lt;/p&gt;
&lt;p&gt;Unfortunately, Hellerman’s thesis cannot be sustained—at least, not as he presents it. Scripture does appropriate at times from the strong-group ideas of the surrounding culture at times, but it never does so unreservedly, and it often corrects those ideas. First, while Hellerman argues repeatedly and at great length that the dominant understanding of group identity and especially family from the surrounding culture presented patrilineal family groups as primary, and sibling identity as trumping all others, including those from marriage, God rejects that approach to the family itself from the earliest pages of Scripture. Very much &lt;em&gt;unlike&lt;/em&gt; the culture Hellerman praises, with its prioritizing of blood families over a spouse, Genesis clarifies that the pattern for God’s people is that the new relationship formed in marriage takes first place (Gen. 2:24; cf. Eph. 5:31). Likewise, many of the very passages that Hellerman cites as evidence for the strength of the new community Jesus formed among his followers—and especially the most challenging passages where Jesus speaks of hating father and mother and siblings for his sake—implicitly undermine the surrounding culture’s understanding of community and systems. Hellerman rightly sees that these passages emphasized the commitment the new Christ-followers were to have to the eschatological community; he misses the inherent critique of the existing structures.&lt;/p&gt;
&lt;p&gt;The same pattern plays out in Hellerman’s readings of Acts, the Epistles, and early church history. Regarding Acts, for example, he asserts:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The radical discipline Ananias and Sapphira experienced at the hand of God demonstrates that the collectivist ‘group comes first’ conviction constitutes a central principle for New Testament social ethics. To lie about this aspect of discipleship is to undermine the very foundation for the community God is building.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In reality, as the passage itself makes clear, their sin was &lt;em&gt;lying to the Holy Spirit&lt;/em&gt;. The issue of communal responsibility was irrelevant—except, perhaps, insofar as it provoked them to act in a way that would garner group approval. In his treatment of the Epistles, Hellerman asserts but does not demonstrate that the writers approved of their culture’s view of family. Yes, the early Christians called each other brother and sister; no, they did not necessarily therefore affirm everything their culture meant in that. That the church constitutes a family is clear; that that family should behave in line with the honor-driven, insular fashion of the New Testament world is not. Ancient Mediterranean families would cut off those who stumbled and shamed them; the church gave succor to just those people. Similarly, he takes the consistent testimony to Christian love in the history of the early church as evidence for his theme. In fact, many of the examples he cites serve to demonstrate just how broken the surrounding strong-group cultures were, and how the church thrived by forging a &lt;em&gt;different&lt;/em&gt; way. In all of this, Hellerman repeatedly fails to acknowledge how thoroughly the work of God has been a work of &lt;em&gt;both&lt;/em&gt; the group and the individual. Both Old or New Testament resound with stories of personal success and failure side by side with those of God’s people. The Biblical picture is &lt;em&gt;both-and&lt;/em&gt;: individuals mutually serving each other and giving themselves up for each other, but not in the process losing their individuality or the unique insight and vision God has given them.&lt;/p&gt;
&lt;p&gt;Unfortunately, it is clear that Hellerman’s thesis drives his exegesis—he never even considers evidence that might right contrary to his thesis. This is too bad. Hellerman’s claim that the Western church needs a healthy dose of strong-group thinking does not stand or fall with the idea that strong-group culture is God’s preferred culture. Indeed, his argument would have been much stronger had he acknowledged the ways that God’s new culture takes the best of strong-group culture (as it does the best of weak-group culture!) and forms it into something new and better. Indeed, the Western church &lt;em&gt;does&lt;/em&gt; need to retreat from its comfort in highly individualistic, weak-group cultures. American evangelicals have a great deal to learn from strong-group cultures—whether those in the pages of the New Testament, or those of many Majority World cultures. Recovery of the kinds of values Hellerman outlines, and their practical application, will indeed be necessary for thriving and healthy churches. But Hellerman’s approach fails to take seriously the ways in which &lt;em&gt;all&lt;/em&gt; human cultures are broken, strong- and weak-group alike. Hellerman knows the weaknesses of weak-group cultures quite well; whether he has ever seen the failings of strong-group cultures up close seems doubtful given his lavish praise of those cultures and how little good he has to say of weak-group cultures.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category></entry><entry><title>Open Source is Neat</title><link href="http://www.chriskrycho.com/2015/open-source-is-neat.html" rel="alternate"></link><published>2015-05-17T22:52:00-04:00</published><updated>2015-05-17T22:52:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-17:/2015/open-source-is-neat.html</id><summary type="html">Link: Andrew J. Camenga took advantage of the fact that my site design is under an open-source license, and adapted it. It is truly lovely!</summary><content type="html">&lt;p&gt;I confess: my &lt;em&gt;first&lt;/em&gt; response to seeing &lt;a href="//andrewcamenga.com/"&gt;this page&lt;/a&gt; was a flash of anger: &lt;em&gt;Hey, he didn’t just learn from my site configuration, he actually stole my site &lt;/em&gt;&lt;strong&gt;design&lt;/strong&gt;_!_ And then I remembered: I open-sourced the design precisely so people could do that. This was just the first time I’ve ever actually had someone reuse something I did and shared like this. It was a strange (but ultimately wonderful) feeling. I hope to have it again many more times.&lt;/p&gt;
&lt;p&gt;In any case, I rather like the tweaks Andrew Comenga made to my design to make it his own; &lt;a href="//andrewcamenga.com/"&gt;go take a look&lt;/a&gt;!&lt;/p&gt;
</content><category term="links"></category><category term="software development"></category><category term="design"></category></entry><entry><title>These Are My People</title><link href="http://www.chriskrycho.com/2015/these-are-my-people.html" rel="alternate"></link><published>2015-05-17T22:25:00-04:00</published><updated>2015-05-17T22:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-17:/2015/these-are-my-people.html</id><summary type="html">When I went to Seattle for BibleTech 2015, I expected to put a nice mark on my résumé and learn some interesting things. I came out with something much, much more valuable.
</summary><content type="html">&lt;p&gt;At the end of April, I flew out to Seattle to &lt;a href="//www.chriskrycho.com/2015/tolle-lege.html"&gt;give a talk&lt;/a&gt; at &lt;a href="//bibletechconference.com"&gt;BibleTech&lt;/a&gt;, a conference hosted by Faithlife (the company that owns Logos Bible Software). What I found was not only a bunch of interesting content—though there was certainly plenty of that, and props to the Logos/Faithlife people for putting on a great event—but also an awful lot of people &lt;em&gt;a lot like me&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Those of you who know me well know this is rare. Finding people who share &lt;em&gt;one&lt;/em&gt; of my primary interests &lt;em&gt;and approach it the same way I do&lt;/em&gt; is relatively rare. Finding people who share an interest is not especially hard, but that qualification is extraordinarily important: I know lots of people interested in programming, and lots of people interested in theology, and not many at all who approach either the same way I do. Finding people who are interested in both software &lt;em&gt;and&lt;/em&gt; theology (still less also music and linguistics and so on) has been so rare as to be a point of quiet but significant and ongoing frustration in my life.&lt;/p&gt;
&lt;p&gt;And then I went to BibleTech, and met a lot of amazing people.&lt;/p&gt;
&lt;p&gt;I was reflecting on the experience today—thinking about why I’ve so deeply enjoyed not only the conference itself but &lt;a href="//bibletechnology-slack.herokuapp.com/"&gt;the community&lt;/a&gt; that has sprung out of it—I realized: &lt;em&gt;These are my people.&lt;/em&gt; They share a passion for software development, theology, linguistics, and in many cases even music. There may not be many of us in the world, but a substantial number were assembled in Seattle April 30–May 1, 2015. That’s no small thing.&lt;/p&gt;
&lt;p&gt;I have no idea what the future holds for me—whether it will continue to include writing software for the Bible specifically or not—but I &lt;em&gt;can&lt;/em&gt; say that this phase of my life has been enormously beneficial in this one way if in no others. It is nice to find kindred spirits in the world, and to know that, even if I am pretty strange, there are other strange people out there, too, and that we can keep working in our strange ways to make the Word of God more available and more useful to people every day.&lt;/p&gt;
&lt;p&gt;Good work, BibleTech.&lt;/p&gt;
</content><category term="software development"></category><category term="joy"></category></entry><entry><title>Easier</title><link href="http://www.chriskrycho.com/2015/easier.html" rel="alternate"></link><published>2015-05-17T11:15:00-04:00</published><updated>2015-05-17T11:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-17:/2015/easier.html</id><summary type="html">’Tis easier, I confess
    to speak of savor than
        in truth to taste…</summary><content type="html">&lt;div class="line-block"&gt;’Tis easier, I confess,&lt;br /&gt;
    to speak of savor than&lt;br /&gt;
        in truth to taste&lt;br /&gt;
            the goodness of our Savior&lt;br /&gt;
            the sweetness of our God&lt;br /&gt;
    to call to revel than&lt;br /&gt;
        in truth to dance&lt;br /&gt;
            for joy at what he’s done&lt;br /&gt;
            for hope in what he’ll do&lt;br /&gt;
    to write of change than&lt;br /&gt;
        in truth to alter&lt;br /&gt;
            habits of thought and deed&lt;br /&gt;
            patterns of word and way&lt;/div&gt;
&lt;hr /&gt;
&lt;div class="line-block"&gt;These words will not suffice—&lt;br /&gt;
no poetry alone will change produce—&lt;br /&gt;
yet as a reminder and a warning,&lt;br /&gt;
rhythm and letters on a page will do,&lt;br /&gt;
and I will strive:&lt;br /&gt;
    to savor and to taste,&lt;br /&gt;
    to revel and to dance,&lt;br /&gt;
    to alter and to change.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>A Modern Python Development Toolchain</title><link href="http://www.chriskrycho.com/2015/a-modern-python-development-toolchain.html" rel="alternate"></link><published>2015-05-16T22:40:00-04:00</published><updated>2015-05-16T22:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-16:/2015/a-modern-python-development-toolchain.html</id><summary type="html">Using homebrew, pyenv, and pip to manage Python development environments and workspaces.</summary><content type="html">&lt;p&gt;Most of my development time these days—and especially the majority of my happiest time!—is spent working in Python. As such, I’ve experimented off and on over the last few years with the best workflow, and have settled down with a set of tools that is &lt;em&gt;very&lt;/em&gt; effective and efficient for me. I’m sure I’m not the only one who’s had to wrestle with some of the issues particular to this toolchain, and I know that information like this can be valuable especially for people just starting off, so I thought I would document it all in one place.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: when talking about a given program, I will italicize it, like &lt;em&gt;brew&lt;/em&gt; or &lt;em&gt;git&lt;/em&gt; or &lt;em&gt;python&lt;/em&gt;. When talking about things to type, I will make them a code block like &lt;code&gt;git clone &amp;lt;a repository&amp;gt;&lt;/code&gt;. For any extended samples, I will make them full-on code blocks:&lt;/p&gt;
&lt;pre class="python"&gt;&lt;code&gt;import re

def a_neat_function():
    my_string = &amp;quot;Isn&amp;#39;t it cool?&amp;quot;
    if re.match(r&amp;quot;i\w+&amp;quot;, my_string, flags=re.I):
        print(my_string)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;The main tools I use are: a good text editor (I like all of &lt;a href="//www.sublimetext.com"&gt;Sublime Text&lt;/a&gt;, &lt;a href="//atom.io"&gt;Atom&lt;/a&gt;, &lt;a href="//github.com/textmate/textmate"&gt;TextMate&lt;/a&gt;, and &lt;a href="//chocolatapp.com"&gt;Chocolat&lt;/a&gt;; each has its own strengths and weaknesses) or sometimes &lt;a href="https://www.jetbrains.com/pycharm/"&gt;a full IDE&lt;/a&gt;, version control software (I appreciate and use both &lt;a href="http://www.git-scm.com"&gt;Git&lt;/a&gt; and &lt;a href="http://mercurial.selenic.com"&gt;Mercurial&lt;/a&gt;), and three dedicated tools to which the rest of this post is devoted: &lt;em&gt;pyenv&lt;/em&gt;, &lt;em&gt;pip&lt;/em&gt;, and virtual environments.&lt;/p&gt;
&lt;p&gt;Everyone is going to have their own preferences for version control tools and an editor; but the recommendations I make regarding Python installations, package management, and workspaces/virtual environments should be fairly standard for anyone doing Python development on a Unix-like system in 2015.&lt;/p&gt;
&lt;section id="python-proper" class="level2"&gt;
&lt;h2&gt;Python Proper&lt;/h2&gt;
&lt;p&gt;First up: Python itself. OS X ships with a built-in copy of Python 2; in the latest version of Yosemite, it’s running Python 2.7.6. The latest version of Python 2 is 2.7.9, so that isn’t &lt;em&gt;terribly&lt;/em&gt; far behind—but it is still behind. Moreover, OS X does &lt;em&gt;not&lt;/em&gt; ship with Python 3, and since I do all of my development in Python 3&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; I need to install it.&lt;/p&gt;
&lt;section id="homebrew" class="level3"&gt;
&lt;h3&gt;Homebrew&lt;/h3&gt;
&lt;p&gt;For a long time, I managed all my Python installations with &lt;a href="http://brew.sh"&gt;&lt;em&gt;homebrew&lt;/em&gt;&lt;/a&gt;. If you’re not familiar with it, &lt;em&gt;homebrew&lt;/em&gt; is a package manager that lets you installed tools on the command line, similar to what you get from &lt;em&gt;aptitude&lt;/em&gt; or &lt;em&gt;yum&lt;/em&gt; on Ubuntu or Fedora respectively.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; If you’re not using &lt;em&gt;homebrew&lt;/em&gt; yet, I highly recommend it for installing command-line tools. (If you’re not using command-line tools yet, then the rest of this post will either bore you to death, or prove extremely enlightening!) If you haven’t started yet, now’s a good time: &lt;a href="http://brew.sh"&gt;go install it!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While &lt;em&gt;homebrew&lt;/em&gt; is great for installing and managing packages in general, I can’t say this loud enough: &lt;em&gt;don’t manage Python with homebrew&lt;/em&gt;. It’s finicky, and really isn’t meant for all the things you have to do to manage more than one version of Python at a time.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; (There’s a reason there’s a whole &lt;a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Homebrew-and-Python.md"&gt;troubleshooting section&lt;/a&gt; devoted to it.) If you think it’s crazy that I might want more than one copy of Python installed a time, well… let’s just say I suspect you’ll change your mind after doing a bit more development. (At the most basic, most people will end up wanting both Python 2 and 3 installed, and will want to upgrade them as bug fixes and the like come out.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pyenv" class="level3"&gt;
&lt;h3&gt;pyenv&lt;/h3&gt;
&lt;p&gt;Instead of installing via &lt;em&gt;homebrew&lt;/em&gt;, use it to install &lt;a href="https://github.com/yyuu/pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;, and use that to manage your installations. &lt;em&gt;pyenv&lt;/em&gt; is a dedicated tool for managing your “Python environment,” and it excels at that. If you were on a Mac with &lt;em&gt;homebrew&lt;/em&gt; installed, your setup process to add the latest version of Python might look something like this:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ brew install pyenv
$ echo &amp;#39;eval &amp;quot;$(pyenv init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~.profile
$ source ~/.profile
$ pyenv install 3.4.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Line by line, that (a) installs &lt;em&gt;pyenv&lt;/em&gt;, (b) adds a hook to your shell profile,&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; (c) updates your current session using the updated profile, and (d) installs the latest version of Python (as of the time I’m writing this). Now you have a full version of Python 3.4.3 alongside the system install of Python 2.7.6. If you wanted to install 2.7.9, or 2.2.3, or the development version of PyPy3, you could easily do that as well.&lt;/p&gt;
&lt;p&gt;In addition, &lt;em&gt;pyenv&lt;/em&gt; lets you specify which version to use globally (&lt;code&gt;pyenv global &amp;lt;name&amp;gt;&lt;/code&gt;) and which version to use in a given directory structure (&lt;code&gt;pyenv local &amp;lt;name&amp;gt;&lt;/code&gt;). So if you prefer to use Python 3 in general, but need to use Python 2 on one project, you can just navigate to the root of that project and set it:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ pyenv global 3.4.3
$ cd path/to/my/project
$ pyenv local 2.7.9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a simple plain text file, &lt;code&gt;.python-version&lt;/code&gt;, whose contents will be just &lt;code&gt;2.7.9&lt;/code&gt;—but for everything under &lt;code&gt;path/to/my/project&lt;/code&gt;, typing &lt;code&gt;python&lt;/code&gt; will launch Python 2.7.9, while typing it &lt;em&gt;outside&lt;/em&gt; that folder will launch Python 3.4.3. (If you want, you can just create the &lt;code&gt;.python-version&lt;/code&gt; file yourself manually and give it the name of a version. There’s nothing special about it all; it’s just the place &lt;code&gt;pyenv&lt;/code&gt; looks to know which Python version to use.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="managing-python-packages" class="level2"&gt;
&lt;h2&gt;Managing Python Packages&lt;/h2&gt;
&lt;p&gt;There are four basic approaches to managing Python packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;installing them manually&lt;/li&gt;
&lt;li&gt;using a system-level package manager like &lt;em&gt;homebrew&lt;/em&gt;, &lt;em&gt;yum&lt;/em&gt;, or &lt;em&gt;aptitude&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;using &lt;em&gt;easy_install&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;using &lt;em&gt;pip&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The vast majority of the time, the right choice is using &lt;em&gt;pip&lt;/em&gt;. Over the last few years, &lt;em&gt;pip&lt;/em&gt; has become the default install tool for Python packages and it now ships natively with it on every platform. Suffice it to say: if you need to install a package, do not install it not with &lt;em&gt;homebrew&lt;/em&gt; (or &lt;em&gt;aptitude&lt;/em&gt; or &lt;em&gt;yum&lt;/em&gt;). Install it with &lt;em&gt;pip&lt;/em&gt;. It integrates with Python better, it always has access both to the latest versions of Python packages (including those only available in e.g. development repositories on GitHub or Bitbucket or wherever else) and to all previously released versions, and it’s the community’s main tool for the job.&lt;/p&gt;
&lt;p&gt;That said, occasionally it makes sense to install packages manually by downloading them and running &lt;code&gt;python setup.py install&lt;/code&gt; or to use a system-level package manager. On the other hand, given &lt;em&gt;pip&lt;/em&gt;’s ability to do everything &lt;em&gt;easy_install&lt;/em&gt; does, and its ability to do quite a few more things as well, there really isn’t a time to use &lt;em&gt;easy_install&lt;/em&gt;. Using the language-supplied tools keeps everything playing nicely together. Perhaps just as importantly, it is the only way to make sure everything behaves the way it should when you start using…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="virtual-environments" class="level2"&gt;
&lt;h2&gt;Virtual Environments&lt;/h2&gt;
&lt;p&gt;When working with a variety of different clients, or simply on different projects, it is common not only to end up with different versions of Python but also with different sets of packages or—tricker still!—different versions of the same package required for different projects. Virtual environments provide a solution: they reuse the main Python executable (by creating links on the file system to it), but create isolated “workspaces” for the various packages you might install.&lt;/p&gt;
&lt;p&gt;That way, in one workspace, you might have version 1.2 of a package installed, and in another you might have version 3.3 installed—because those are the required dependencies for something &lt;em&gt;else&lt;/em&gt; you’re doing. This isn’t a hypothetical situation. For quite a while with one of my clients, we had pinned a particular version of the Python documentation package we use because it broke our use case after an update—but I still wanted to have the latest version of that tool in my &lt;em&gt;other&lt;/em&gt; projects. Setting up virtual environments neatly solves that problem.&lt;/p&gt;
&lt;section id="venv-and-virtualenv" class="level3"&gt;
&lt;h3&gt;venv and virtualenv&lt;/h3&gt;
&lt;p&gt;If you have Python 3.3 or later, you have a built-in tool for this called &lt;a href="https://docs.python.org/3/library/venv.html"&gt;&lt;em&gt;pyvenv&lt;/em&gt;&lt;/a&gt;; if you have Python 3.4 or later, it supports &lt;em&gt;pip&lt;/em&gt; right out of the gate so you don’t have to install it yourself. If you’re on older versions, you can install &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt; (&lt;code&gt;pip install virtualenv&lt;/code&gt;) and get the same basic tooling: &lt;em&gt;pyvenv&lt;/em&gt; was inspired by &lt;em&gt;virtualenv&lt;/em&gt;. Then you can create virtual environments with the &lt;code&gt;pyvenv&lt;/code&gt; or &lt;code&gt;virtualenv&lt;/code&gt; commands, and use those to isolate different setups from each other. If you haven’t started using virtual environments yet, start now!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pyenv-with-virtualenv" class="level3"&gt;
&lt;h3&gt;pyenv with virtualenv&lt;/h3&gt;
&lt;p&gt;I know, the similarity of names for &lt;em&gt;pyenv&lt;/em&gt; and &lt;em&gt;pyvenv&lt;/em&gt; is unfortunate. If it helps, you can call the latter as &lt;code&gt;venv&lt;/code&gt; rather than &lt;code&gt;pyvenv&lt;/code&gt;. But, more importantly, one of the areas &lt;em&gt;pyenv&lt;/em&gt; is much better than &lt;em&gt;homebrew&lt;/em&gt; is its support for managing virtual environments. Install &lt;a href="https://github.com/yyuu/pyenv-virtualenv"&gt;&lt;em&gt;pyenv-virtualenv&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ brew install pyenv-virtualenv
$ echo &amp;#39;eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;&amp;#39; &amp;gt;&amp;gt; ~/.profile&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you’re off to the races: you’ll never have to type &lt;code&gt;pyvenv &amp;lt;path to a virtual environment&amp;gt;&lt;/code&gt;, because instead you can just type &lt;code&gt;pyenv virtualenv &amp;lt;version&amp;gt; &amp;lt;name&amp;gt;&lt;/code&gt; and &lt;em&gt;pyenv&lt;/em&gt; will take care of setting it up for you. Even better: all the nice tricks I listed above about setting directory-specific and global preferences for which Python version to use work equally well with virtual environments managed via &lt;em&gt;pyenv&lt;/em&gt;. In other words, you can do something like this:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ pyenv install 2.7.9
$ pyenv install 3.4.3
$ pyenv global 3.4.3
$ pyenv virtualenv 2.7.9 my-virtual-environment
$ cd path/to/my/project
$ pyenv local my-virtual-environment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.python-version&lt;/code&gt; file will contain &lt;code&gt;my-virtual-environment&lt;/code&gt;. The Python version will be 2.7.9. The environment will be isolated, just as if you had run &lt;code&gt;pyvenv&lt;/code&gt; to set up a virtual environment. Everything works together beautifully! Moreover, you can easily reuse virtual environments this way, because you can set the &lt;code&gt;local&lt;/code&gt; value in more than one place. For example, I use the same virtual environment for this site and &lt;a href="//www.winningslowly.org/" title="A podcast: taking the long view on technology, religion, ethics, and art."&gt;Winning Slowly&lt;/a&gt;, because they have slightly different site configurations but all the same Python dependencies. Creating it was simple:&lt;/p&gt;
&lt;pre class="shell"&gt;&lt;code&gt;$ pyenv install 3.4.3
$ pyenv virtualenv 3.4.3 pelican
$ cd ~/Sites/chriskrycho.com
$ pyenv local pelican
$ cd ~/Sites/winningslowly.org
$ pyenv local pelican&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I named the virtual environment after &lt;a href="//docs.getpelican.com/"&gt;the tool I use to generate the sites&lt;/a&gt;, and reused it in both sites. Both now have a &lt;code&gt;.python-version&lt;/code&gt; file that reads &lt;code&gt;pelican&lt;/code&gt;. Now, anytime I’m working anywhere under &lt;code&gt;~/Sites/chriskrycho.com&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code&gt;~/Sites/winningslowly.org&lt;/code&gt;, I have the same tooling in place.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The combination of &lt;em&gt;pip&lt;/em&gt;, &lt;em&gt;pyenv&lt;/em&gt; and virtual environments makes for a very simple, straightforward process to manage Python environments these days:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install Python versions with &lt;em&gt;pyenv&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Install Python packages with &lt;em&gt;pip&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Set up virtual environments with &lt;em&gt;pyenv-virtualenv&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you stick to those basic rules, Python itself shouldn’t give you any trouble at all.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;All the usual caveats apply, of course: this may or may not work well for you; it’s just what works for me, and I make no claim or warranty on the tools below—they’re working well for &lt;em&gt;me&lt;/em&gt;, but I don’t maintain them, so if they break, please tell the people who maintain them! Also, because I do nearly all my development on a Mac (I test on Windows, but that’s it), the following is necessarily &lt;em&gt;fairly&lt;/em&gt; specific to OS X. You can readily adapt most of it to Linux, though, or even to a &lt;a href="https://www.cygwin.com"&gt;Cygwin&lt;/a&gt; install on Windows—I do just that when I have cause. But my main tool is a Mac, so that’s what I’ve specialized for.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Lucky me, I know!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Yes, I know that those are wrappers around Debian and Arch, and I know about &lt;em&gt;apt-get&lt;/em&gt; and &lt;em&gt;rpm&lt;/em&gt;. No, that information isn’t especially relevant for the rest of this post.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;For example, if you upgrade your Python installation using homebrew and then cleanup the old version (e.g., by running the typical &lt;code&gt;brew update &amp;amp;&amp;amp; brew upgrade &amp;amp;&amp;amp; brew cleanup&lt;/code&gt; sequence)—say, from 3.4.2 to 3.4.3—and you have virtual environments which depended on 3.4.2… well, you’re in a bad spot now. A &lt;em&gt;very&lt;/em&gt; bad spot. Have fun getting back to a working state!&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;You can of course drop it directly in &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bash_profile&lt;/code&gt; or wherever else. &lt;a href="//github.com/chriskrycho/profile"&gt;My setup&lt;/a&gt; puts all common handling in &lt;code&gt;.profile&lt;/code&gt; and runs &lt;code&gt;source .profile&lt;/code&gt; as the first action in any other shell configurations.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="Software Development"></category></entry><entry><title>A Particular Way of Imagining the World</title><link href="http://www.chriskrycho.com/2015/a-particular-way-of-imagining-the-world.html" rel="alternate"></link><published>2015-05-02T03:33:00-04:00</published><updated>2015-05-02T03:33:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-02:/2015/a-particular-way-of-imagining-the-world.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Poetry, as I have been arguing throughout this study, is not just a set of techniques for saying impressively what could he said otherwise. Rather, it is a particular way of imagining the world—particular in the double sense that poetry as such has its own logic, its own ways …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Poetry, as I have been arguing throughout this study, is not just a set of techniques for saying impressively what could he said otherwise. Rather, it is a particular way of imagining the world—particular in the double sense that poetry as such has its own logic, its own ways of making connections and engendering implications, and because each system of poetry has certain distinctive semantic thrusts that follow the momentum of its formal dispositions and habits of expression.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>A Paradigmatic Instance of Treachery</title><link href="http://www.chriskrycho.com/2015/a-paradigmatic-instance-of-treachery.html" rel="alternate"></link><published>2015-05-02T03:20:00-04:00</published><updated>2015-05-02T03:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-02:/2015/a-paradigmatic-instance-of-treachery.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;What I would like to suggest about the effect of the language of poetry in this [Isa. 1:2–9] and most other Biblical prophecies is that it tends to lift the utterances to a second power of signification, aligning statements that are addressed to a concrete historical situation with …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;What I would like to suggest about the effect of the language of poetry in this [Isa. 1:2–9] and most other Biblical prophecies is that it tends to lift the utterances to a second power of signification, aligning statements that are addressed to a concrete historical situation with an archetypal horizon. The Judean contemporaries of Isaiah the son of Amoz become the archetypes Sodom and Gomorrah in respect to both their collective destiny and their moral character. If one considers, as the metaphors of the poem require one to consider, how God has treated them as beloved sons, then their exploitation of the poor and the helpless in their midst (1:23 and elsewhere), in flagrant violation of God’s commands, becomes a paradigmatic instance of treachery, of man’s… capacity for self-destructive perverseness. In this fashion, a set of messages framed for a particular audience of the eighth century B.C.E. Is not just the transcription of a historical document but continues to speak age after age, inviting members of otherwise very different audiences to read themselves into the text.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>Tolle Lege!</title><link href="http://www.chriskrycho.com/2015/tolle-lege.html" rel="alternate"></link><published>2015-05-01T10:30:00-04:00</published><updated>2015-05-01T10:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-05-01:/2015/tolle-lege.html</id><summary type="html">Designing Readable Bibles with Digital Typography (BibleTech 2015 conference talk)
</summary><content type="html">&lt;p&gt;I was delighted to be able to give a talk at &lt;a href="http://bibletechconference.com/"&gt;BibleTech&lt;/a&gt; this year. I spoke for almost exactly 40 minutes on the subject of digital typography, with a focus on some of the nitty-gritty details that make texts readable… or not. Here is the screen capture and audio from the talk!&lt;/p&gt;
&lt;div class="iframe-wrapper four-to-three"&gt;
&lt;iframe src="https://player.vimeo.com/video/126655499" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;You can also access the &lt;a href="/talks/bibletech2015/"&gt;slides&lt;/a&gt; whenever you like (though note that they were designed to be complements to the talk, &lt;em&gt;not&lt;/em&gt; the content of the talk, and as such they elide a great deal of the content).&lt;/p&gt;
</content><category term="design"></category><category term="typography"></category><category term="talks"></category></entry><entry><title>Airship</title><link href="http://www.chriskrycho.com/2015/airship.html" rel="alternate"></link><published>2015-04-30T06:05:00-04:00</published><updated>2015-04-30T06:05:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-30:/2015/airship.html</id><summary type="html">Our airship sails, / ere sunrise…</summary><content type="html">&lt;div class="line-block"&gt;Our airship sails,&lt;br /&gt;
Ere sunrise,&lt;br /&gt;
Above a foam-flecked sea&lt;br /&gt;
Which gives way, sometimes&lt;br /&gt;
To green and citied depths beneath.&lt;/div&gt;
</content><category term="[poetry]"></category></entry><entry><title>The Brutality of Police Culture in Baltimore</title><link href="http://www.chriskrycho.com/2015/the-brutality-of-police-culture-in-baltimore.html" rel="alternate"></link><published>2015-04-28T18:20:00-04:00</published><updated>2015-04-28T18:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-28:/2015/the-brutality-of-police-culture-in-baltimore.html</id><summary type="html">Link: Connor Friedersdort, writing at The Atlantic on the systemic culture of police brutality in Baltimore.</summary><content type="html">&lt;p&gt;When the police beat an 87-year-old grandmother who called 911 to get medical help for her grandson who had been shot—just because they don’t believe her—and suffer no consequences for it, the “law” as such has become wicked. This doesn’t excuse riots, but it sure as heck &lt;em&gt;explains&lt;/em&gt; them. Baltimore is broken, but primarily in a massive system of abuse. Yes, pray for peace. But remember that civic peace comes in large part through civic &lt;em&gt;justice&lt;/em&gt;; rule of law follows the law ruling justly.&lt;/p&gt;
&lt;p&gt;Connor Friedersdorf has a lot more; &lt;a href="http://www.theatlantic.com/politics/archive/2015/04/the-brutality-of-police-culture-in-baltimore/391158/"&gt;you need to read it&lt;/a&gt;, even though—or rather, precisely because—it is such a mess.&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>Why Should a Man Complain?</title><link href="http://www.chriskrycho.com/2015/why-should-a-man-complain.html" rel="alternate"></link><published>2015-04-27T13:00:00-04:00</published><updated>2015-04-27T13:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-27:/2015/why-should-a-man-complain.html</id><summary type="html">An open-ended, multi-vocal answer to a rhetorical question—demonstrated by a close analysis of the structure, verbs, and poetic devices employed by the poet.</summary><content type="html">&lt;section id="authors-translation" class="level1"&gt;
&lt;h1&gt;Author’s Translation&lt;/h1&gt;
&lt;section id="nun-נ" class="level2"&gt;
&lt;h2&gt;&lt;em&gt;Nun&lt;/em&gt; נ&lt;/h2&gt;
&lt;ol start="40" type="1"&gt;
&lt;li&gt;Let us search out our ways and examine them thoroughly and let us return to Yahweh.&lt;/li&gt;
&lt;li&gt;Let us lift our hearts with our hands to God in heaven.&lt;/li&gt;
&lt;li&gt;&amp;quot;We have transgressed and rebelled—you have not forgiven!&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="samech-ס" class="level2"&gt;
&lt;h2&gt;&lt;em&gt;Samech&lt;/em&gt; ס&lt;/h2&gt;
&lt;ol start="43" type="1"&gt;
&lt;li&gt;&amp;quot;You have shrouded yourself with anger, and you have pursued us; you have slain; you have not spared!&lt;/li&gt;
&lt;li&gt;&amp;quot;You have shrouded yourself in a cloud so no prayer can pass through.&lt;/li&gt;
&lt;li&gt;&amp;quot;You have made us refuse and waste in the midst of the peoples.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="pe-פ" class="level2"&gt;
&lt;h2&gt;&lt;em&gt;Pe&lt;/em&gt; פ&lt;/h2&gt;
&lt;ol start="46" type="1"&gt;
&lt;li&gt;&amp;quot;They have opened their mouths against us—all who are our enemies.&lt;/li&gt;
&lt;li&gt;“Dread and death have come to us—devastation and ruination.”&lt;/li&gt;
&lt;li&gt;Channels of water run down from my eyes because of the ruination of the daughter of my people.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="ayin-ע" class="level2"&gt;
&lt;h2&gt;&lt;em&gt;Ayin&lt;/em&gt; ע&lt;/h2&gt;
&lt;ol start="49" type="1"&gt;
&lt;li&gt;My eyes flow and do not cease; my eyes without respite,&lt;/li&gt;
&lt;li&gt;Until he looks down and sees: Yahweh from heaven.&lt;/li&gt;
&lt;li&gt;My eyes grieve my soul—from the state of all the daughters of my city.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="tsade-צ" class="level2"&gt;
&lt;h2&gt;&lt;em&gt;Tsade&lt;/em&gt; צ&lt;/h2&gt;
&lt;ol start="52" type="1"&gt;
&lt;li&gt;Surely they hunted me like a bird—those who hated me for no reason.&lt;/li&gt;
&lt;li&gt;They put an end to my life—in the pit!—and they cast stones at me.&lt;/li&gt;
&lt;li&gt;Waters flowed over my head; I said, “I am destroyed.”&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="qof-ק" class="level2"&gt;
&lt;h2&gt;&lt;em&gt;Qof&lt;/em&gt; ק&lt;/h2&gt;
&lt;ol start="55" type="1"&gt;
&lt;li&gt;I cried out your name, oh Yahweh, from the deepest pit.&lt;/li&gt;
&lt;li&gt;My voice you heard; you did not cover your ears to my relief—to my cry for help.&lt;/li&gt;
&lt;li&gt;You came on the day I cried out to you; you said, “Do not be afraid!”&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="resh-ר" class="level2"&gt;
&lt;h2&gt;&lt;em&gt;Resh&lt;/em&gt; ר&lt;/h2&gt;
&lt;ol start="58" type="1"&gt;
&lt;li&gt;You strove, Lord—strove even for my soul; you redeemed my life.&lt;/li&gt;
&lt;li&gt;You see, oh Yahweh, the injustice done to me; judge my case!&lt;/li&gt;
&lt;li&gt;You saw all their vengeance, all their conniving against me.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="sinshin-ש" class="level2"&gt;
&lt;h2&gt;&lt;em&gt;Sin/Shin&lt;/em&gt; ש&lt;/h2&gt;
&lt;ol start="61" type="1"&gt;
&lt;li&gt;You heard their reproach, oh Yahweh, all their conniving against me:&lt;/li&gt;
&lt;li&gt;The speech of those who rise against me, and their plots against me every day.&lt;/li&gt;
&lt;li&gt;Look at their sitting down and their rising up: I am their mockery-song.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="tav-ת" class="level2"&gt;
&lt;h2&gt;&lt;em&gt;Tav&lt;/em&gt; ת&lt;/h2&gt;
&lt;ol start="64" type="1"&gt;
&lt;li&gt;Bring back against them their due, oh Yahweh, according to the work of their hands.&lt;/li&gt;
&lt;li&gt;Give them obstinate hearts; your curse be against them.&lt;/li&gt;
&lt;li&gt;You pursue in anger, and you destroy them from beneath Yahweh’s heavens.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="introduction" class="level1"&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This essay will demonstrate that the concluding section of Lamentations 3, running from v. 40 to v. 66, constitutes an open-ended, multivocal answer to the question posed in Lamentations 3:39: “Why should a person complain, / a living man concerning his sins?” The poet did not believe Yahweh demanded silence of his people, even in the face of his judgment. Rather, his people were to trust him deeply enough to call out to him, even when all evidence suggested he would not answer. The point will be demonstrated by a close analysis of the structure, verbs, and poetic devices employed throughout the text.&lt;/p&gt;
&lt;section id="outline" class="level2"&gt;
&lt;h2&gt;Outline&lt;/h2&gt;
&lt;ol type="I"&gt;
&lt;li&gt;&lt;a href="#we-repent-but-god-has-not-forgiven-us-4051"&gt;We repent but God has not forgiven us (40–51)&lt;/a&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="#let-us-repent-4042a"&gt;Let us repent! (40–42a)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#god-is-still-hidden-42b44"&gt;God is still hidden (42b–44)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#we-are-devastated-by-our-enemies-4547"&gt;We are devastated by our enemies (45–47)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sight-and-salvation-4851"&gt;Sight and salvation (48–51)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deliver-me-from-my-enemies-5266"&gt;Deliver Me From My Enemies! (52–66)&lt;/a&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="#my-enemies!-despair-and-pleading-5255"&gt;My enemies! Despair and pleading (52–55)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yahweh-hearsmay-yahweh-hear-5658"&gt;Yahweh hears/May Yahweh hear (56–58)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#may-yahweh-judge-the-enemies-5966"&gt;May Yahweh judge the enemies (59–66)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="authorship" class="level2"&gt;
&lt;h2&gt;Authorship&lt;/h2&gt;
&lt;p&gt;Lamentations has traditionally been attributed to Jeremiah, but the poems themselves make no claim to authorship whatsoever.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Jeremianic authorship is possible, and a few commentators continue to argue for it as a reasonable assumption.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; However, while there are commonalities in style and vocabulary between the books of Jeremiah and Lamentations,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; and no outright contradictions between the two books,&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; there are also significant differences between them. Jeremiah predicted the destruction of the city and the temple while the author of Lamentations seems surprised by it, and Jeremiah strongly emphasizes the sins of the people while the author of Lamentations hardly mentions them.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; These differences in perspective might be the result of the prophet’s experience of the fall of Jerusalem as opposed to merely the anticipation thereof, but more likely whoever composed the book “was familiar with the book of Jeremiah, but had his own vocabulary to express grief over the fall of Jerusalem.”&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some commentators argue not only against Jeremianic authorship but for multiple authorship.&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; Such a reading is hardly required, however. The suggestion that variation in perspective or even poetic style can &lt;em&gt;only&lt;/em&gt; be explained by multiple authorship badly underestimates the range of human artistry.&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; Poetic voice is not the same as &lt;em&gt;authorial&lt;/em&gt; voice;&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt; the multiple voices which appear throughout the book are “poetic vehicles through which the poet speaks throughout”&lt;a href="#fn10" class="footnote-ref" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; rather than multiple authors arguing for differing theologies. Even if Lamentations is the product of multiple poets, the poems ultimately represent continuity of thought and theology, both individually and collectively.&lt;a href="#fn11" class="footnote-ref" id="fnref11"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt; Together, they present a multivocal but coherent expression of grief in the face of horrific tragedy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="context" class="level2"&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;section id="geographical-and-cultural" class="level3"&gt;
&lt;h3&gt;Geographical and Cultural&lt;/h3&gt;
&lt;p&gt;Lamentations was composed in response to the Babylonian destruction of Jerusalem and its temple and the deportation of Judean leadership in 595–587 B.C. However, it is not clear how long after the fall of Jerusalem the poems were composed, nor whether they were composed simultaneously or with some gaps between them. The book was probably composed prior to the rebuilding of the temple in 515 B.C., since the text includes no hint of such a hopeful turn of events,&lt;a href="#fn12" class="footnote-ref" id="fnref12"&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt; but the author’s imaginative and lyrical skill count for more than his proximity to the events he describes.&lt;a href="#fn13" class="footnote-ref" id="fnref13"&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt; In any case, the date of composition is largely irrelevant to the interpretation of the text.&lt;a href="#fn14" class="footnote-ref" id="fnref14"&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Like the rest of the Hebrew Bible, Lamentations adopts from but freely adapts genres from the surrounding cultures. Accordingly, it includes elements of Ancient Near East city laments, communal laments, and communal dirges.&lt;a href="#fn15" class="footnote-ref" id="fnref15"&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt; Records of city laments in the greater Mesopotamian region date to the beginning of the second millennium B.C., and the author of Lamentations joined various prophetic writers in the Old Testament in repurposing the form for his theological purposes.&lt;a href="#fn16" class="footnote-ref" id="fnref16"&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt; Whereas most city-laments appear to have been created for rededications of temples and thus include the imagery of a god’s return to the temple, Yahweh is conspicuously absent and his temple in ruins throughout Lamentations.&lt;a href="#fn17" class="footnote-ref" id="fnref17"&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt; Moreover, the theology of Lamentations differs significantly from the city-laments. Though the poet gives full voice to doubt and anger towards Yahweh throughout the book, he ultimately places moral responsibility not on Yahweh but on the sinning people of Jerusalem, very much unlike the anti-theodic bent of other city laments.&lt;a href="#fn18" class="footnote-ref" id="fnref18"&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt; The text mingles “penitence &lt;em&gt;and&lt;/em&gt; protest, confession &lt;em&gt;and&lt;/em&gt; lament.”&lt;a href="#fn19" class="footnote-ref" id="fnref19"&gt;&lt;sup&gt;19&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="literary" class="level3"&gt;
&lt;h3&gt;Literary&lt;/h3&gt;
&lt;p&gt;The book consists of five poems, each sharing the same basic acrostic structure. Chapters 1, 2, and 4 each have twenty-two multi-line verses, each beginning with a consecutive letter of the Hebrew alphabet.&lt;a href="#fn20" class="footnote-ref" id="fnref20"&gt;&lt;sup&gt;20&lt;/sup&gt;&lt;/a&gt; Chapter 3 changes the pattern, devoting three single-line verses to each letter. Finally, chapter 5 consists of another twenty-two verses of poetry, but does not include the acrostic lettering scheme. The acrostics draw the reader forward through the text&lt;a href="#fn21" class="footnote-ref" id="fnref21"&gt;&lt;sup&gt;21&lt;/sup&gt;&lt;/a&gt; and express a sense of completion at their conclusion: grief has been fully sounded and emotional and theological catharsis experienced.&lt;a href="#fn22" class="footnote-ref" id="fnref22"&gt;&lt;sup&gt;22&lt;/sup&gt;&lt;/a&gt; The poet &lt;em&gt;imposes&lt;/em&gt; order on a world in chaos by choosing to “express the inexpressible… [in poems] whose controlling structural device is the very letters that signify and give shape to language.”&lt;a href="#fn23" class="footnote-ref" id="fnref23"&gt;&lt;sup&gt;23&lt;/sup&gt;&lt;/a&gt; Moreover, the repetition of letters, as of words and ideas throughout the poem, “introduces the indispensable element of &lt;em&gt;time&lt;/em&gt;: reflection and re-reflection on the meaning of the aesthetic message.”&lt;a href="#fn24" class="footnote-ref" id="fnref24"&gt;&lt;sup&gt;24&lt;/sup&gt;&lt;/a&gt; At the same time, the frequent use of enjambment both works with the acrostic to propel the reader forward through the text&lt;a href="#fn25" class="footnote-ref" id="fnref25"&gt;&lt;sup&gt;25&lt;/sup&gt;&lt;/a&gt; and undermines the poetry’s regularity, allowing the poet to control the pace of the poem “without relying on emplottment [sic] or even strong characterization.”&lt;a href="#fn26" class="footnote-ref" id="fnref26"&gt;&lt;sup&gt;26&lt;/sup&gt;&lt;/a&gt; These large-scale poetic devices together shape not only the structure but also the message of the poetry: lines give different senses when read alone than when read in their acrostic strophe, and different again when read in the full sequence.&lt;a href="#fn27" class="footnote-ref" id="fnref27"&gt;&lt;sup&gt;27&lt;/sup&gt;&lt;/a&gt; They ultimately “draw the reader into a variety of responses… [not] one particular response.”&lt;a href="#fn28" class="footnote-ref" id="fnref28"&gt;&lt;sup&gt;28&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lamentations 3 is the theological and poetic center of the book.&lt;a href="#fn29" class="footnote-ref" id="fnref29"&gt;&lt;sup&gt;29&lt;/sup&gt;&lt;/a&gt; Although some modern commentators hesitate to affirm the centrality of the chapter because of a tendency to downplay the lament elsewhere in the book,&lt;a href="#fn30" class="footnote-ref" id="fnref30"&gt;&lt;sup&gt;30&lt;/sup&gt;&lt;/a&gt; there are good reasons to take this view. Structurally, the center is often important to Hebrew poetry, and while that importance can be overstated, the placement of the poem here should not be ignored—especially when its poetry and content differ from the others in such a notable way.&lt;a href="#fn31" class="footnote-ref" id="fnref31"&gt;&lt;sup&gt;31&lt;/sup&gt;&lt;/a&gt; The increased repetition heightens the effect and draws attention to the content of the poetry.&lt;a href="#fn32" class="footnote-ref" id="fnref32"&gt;&lt;sup&gt;32&lt;/sup&gt;&lt;/a&gt; The shorter lines are visually and aurally arresting. The chapter includes theodic content and, at times, a hopeful tone—kinds of content absent in the rest of the poems. It is also the only poem in which words are attributed to Yahweh.&lt;a href="#fn33" class="footnote-ref" id="fnref33"&gt;&lt;sup&gt;33&lt;/sup&gt;&lt;/a&gt; The literary and theological emphasis the poet placed on this chapter is not a reason to ignore the message of the other chapters, but neither should it be ignored in interpreting them.&lt;/p&gt;
&lt;p&gt;The chapter has three major sections, though commentators divide them in slightly different ways; the exegesis below analysis assumes the following division. In the first section (vv. 1–18), “the man who has seen affliction” (3:1) laments his individual suffering at God’s hands. The second section (vv. 19–39) emphasizes Yahweh’s covenant love, trustworthy character, and hatred of injustice; it is the most hopeful and theodic passage in the book. In the third section (vv. 40–66), the speaker responds to the theodic ideas outlined in the second with a complex mix of complaint, lament, hope, and imprecation. This concluding turn has led some commentators to suggest the speaker ultimately could not believe the ethical/theodic message,&lt;a href="#fn34" class="footnote-ref" id="fnref34"&gt;&lt;sup&gt;34&lt;/sup&gt;&lt;/a&gt; or that he was angrily determined to “speak in the face of Yahweh’s silence;”&lt;a href="#fn35" class="footnote-ref" id="fnref35"&gt;&lt;sup&gt;35&lt;/sup&gt;&lt;/a&gt; it has led others to suggest competing authors (see above). But “[the] speaker is not schizophrenic.”&lt;a href="#fn36" class="footnote-ref" id="fnref36"&gt;&lt;sup&gt;36&lt;/sup&gt;&lt;/a&gt; The same person may simultaneously recognize his own sinful responsibility, trust God, and yet remain long for deliverance from and be troubled by his suffering.&lt;a href="#fn37" class="footnote-ref" id="fnref37"&gt;&lt;sup&gt;37&lt;/sup&gt;&lt;/a&gt; Though all of these themes appear scattered throughout the book, Lamentations 3 alone draws them together in a single poem.&lt;/p&gt;
&lt;p&gt;The final section begins in v. 40. Although there are later topical and vocal shifts (especially in v. 42; see below), none are as strong as the one leading the נ-strophe, which is doubly marked. The speaker shifts from general statements about Yahweh to exhortation of the listening community precisely at the transition from the מ-strophe to the נ-strophe. Indeed, given the enjambment across strophe boundaries typical of the final section of the poem,&lt;a href="#fn38" class="footnote-ref" id="fnref38"&gt;&lt;sup&gt;38&lt;/sup&gt;&lt;/a&gt; the alignment here clearly indicates a major transition in the poem.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="exegesis" class="level1"&gt;
&lt;h1&gt;Exegesis&lt;/h1&gt;
&lt;section id="we-repent-but-god-has-not-forgiven-us-4051" class="level2"&gt;
&lt;h2&gt;We Repent but God Has Not Forgiven Us (40–51)&lt;/h2&gt;
&lt;p&gt;The speaker has finished his discourse on who Yahweh is and how he acts; now it is time to respond. In light of the preceding declaration of Yahweh’s covenant love and justice, and its “emphasis on confession and penitence”&lt;a href="#fn39" class="footnote-ref" id="fnref39"&gt;&lt;sup&gt;39&lt;/sup&gt;&lt;/a&gt; the speaker urges his people to turn and repent. He turns almost immediately to a lengthy lament, however: God has not forgiven. Indeed, the divine warrior has struck down his own people.&lt;a href="#fn40" class="footnote-ref" id="fnref40"&gt;&lt;sup&gt;40&lt;/sup&gt;&lt;/a&gt; Things seems hopeless.&lt;/p&gt;
&lt;section id="let-us-repent-4042a" class="level3"&gt;
&lt;h3&gt;Let us repent! (40–42a)&lt;/h3&gt;
&lt;p&gt;If Yahweh’s covenant love may be trusted and he judges rightly, and if his people have sinned, they ought to repent. The speaker employs the language of (especially Jeremianic) prophetic exhortation, calling the people to search out and examine their ways and return to Yahweh.&lt;a href="#fn41" class="footnote-ref" id="fnref41"&gt;&lt;sup&gt;41&lt;/sup&gt;&lt;/a&gt; Unlike in Jeremiah, though, the speaker includes himself in the call to repentance. The opening verbs of the section are not imperatives but cohortatives (נַחְפְּשָׂ֤ה, נַחְקֹ֔רָה, נָשׁ֖וּבָה). The speaker thus affirms that his and his people’s sin has led to their current condition; they must repent. The imperfect that follows (נִשָּׂ֤א) picks up the force of the preceding cohortatives and continues the exhortation. The language of “hearts with hands” reminds the reader that the repentance required is an act of the whole person: neither merely internal nor merely external.&lt;a href="#fn42" class="footnote-ref" id="fnref42"&gt;&lt;sup&gt;42&lt;/sup&gt;&lt;/a&gt; The reference to “God in heaven” does double duty: it marks his authority to forgive, but it also suggests his absence from Zion.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="god-is-still-hidden-42b44" class="level3"&gt;
&lt;h3&gt;God is still hidden (42b–44)&lt;/h3&gt;
&lt;p&gt;In the following verses, the author begins by confessing sin, then addresses Yahweh, who has not forgiven his people, and who has instead opposed them and hidden himself from their prayers. Israel’s divine warrior-God has now become her enemy.&lt;a href="#fn43" class="footnote-ref" id="fnref43"&gt;&lt;sup&gt;43&lt;/sup&gt;&lt;/a&gt; The God whose presence with his people was so often manifest as a cloud&lt;a href="#fn44" class="footnote-ref" id="fnref44"&gt;&lt;sup&gt;44&lt;/sup&gt;&lt;/a&gt; has now removed his presence from them with a cloud.&lt;a href="#fn45" class="footnote-ref" id="fnref45"&gt;&lt;sup&gt;45&lt;/sup&gt;&lt;/a&gt; The people may confess, but unless Yahweh hears their prayers and answers them, they will remain destitute and hopeless.&lt;a href="#fn46" class="footnote-ref" id="fnref46"&gt;&lt;sup&gt;46&lt;/sup&gt;&lt;/a&gt; In light of the speaker’s confession and the hope expressed in the preceding major section, that Yahweh has not forgiven comes as a surprise, and one intensified dramatically by the poetry.&lt;/p&gt;
&lt;p&gt;In fact, the poetry here is enjambed twice, making it one of the more prominent of the many instances of the poetic device throughout this section of the poem.&lt;a href="#fn47" class="footnote-ref" id="fnref47"&gt;&lt;sup&gt;47&lt;/sup&gt;&lt;/a&gt; First, the poet introduces the address to Yahweh at the end of the נ-strophe instead of at beginning of the ס-strophe. Second, the poet splits the line itself. The first verset continues the thought of the preceding two lines: the people’s repentance before God, in the form of confession: “we have transgressed and rebelled.” The second verset indicates God’s response: “—you have not forgiven!” There is no transition, not even a disjunctive-ו to mark the shift—just a terse pair of statements. Indeed, the effect is so jarring, especially as it leads into the next strophe, that it is tempting to read the entire rest of the poem as accusation against and anger against God.&lt;a href="#fn48" class="footnote-ref" id="fnref48"&gt;&lt;sup&gt;48&lt;/sup&gt;&lt;/a&gt; Understandable as this reading is—especially as a backlash against the inappropriate suppression of lament among Christians—it is mistaken, as will become clear.&lt;a href="#fn49" class="footnote-ref" id="fnref49"&gt;&lt;sup&gt;49&lt;/sup&gt;&lt;/a&gt; The speaker &lt;em&gt;does&lt;/em&gt; complain here and in what follows, but that is not all he does.&lt;/p&gt;
&lt;p&gt;Because of the tonal shift between v. 42a and v. 42b, it is possible to read this as the break between the second and third major sections of the book. As noted above, the major discourse boundary is between vv. 39 and 40 instead, where the speaker transitions from exposition to response. There &lt;em&gt;is&lt;/em&gt; a segue here, as the speaker turns his attention from his community to Yahweh, and begins a speech section that runs through v. 47, but this transition is within rather than between sections—from one kind of response to another.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="we-are-devastated-by-our-enemies-4547" class="level3"&gt;
&lt;h3&gt;We are devastated by our enemies (45–47)&lt;/h3&gt;
&lt;p&gt;Once again, the poet employs enjambment to drive the reader into the speaker’s experience of suffering. The transition between the ס- and פ-strophes occurs in v. 46, but already in v. 45 the speaker returns to a theme expressed in the beginning of the chapter as well as in the preceding poems: enemies attacking the people of God. Not only is Yahweh absent from Zion, but he has made her like refuse and waste&lt;a href="#fn50" class="footnote-ref" id="fnref50"&gt;&lt;sup&gt;50&lt;/sup&gt;&lt;/a&gt; in the midst of the peoples. The tribes he had chosen to be a blessing to the nations (Gen. 12:3; 18:17–19) and set apart as a kingdom of priests (Exod. 19:6; Deut. 17:18) were defilement—things to be thrown out of the camp (cf. Exod. 29:14). Moreover, rather than delivering from enemies, God has brought them against his people.&lt;a href="#fn51" class="footnote-ref" id="fnref51"&gt;&lt;sup&gt;51&lt;/sup&gt;&lt;/a&gt; They have “opened their mouths” against God’s people, an image used in the Wisdom literature both of speaking against someone and of devouring them (Job 29:23; Ps. 5:9; 22:13; 35:21). The climax of the quotation comes in verse 47, a chiasm on two pairs of words which rhyme almost completely.&lt;a href="#fn52" class="footnote-ref" id="fnref52"&gt;&lt;sup&gt;52&lt;/sup&gt;&lt;/a&gt; “Dread and death, devastation and ruination”—this is what Yahweh has accomplished in bringing these enemies against his people.&lt;/p&gt;
&lt;p&gt;This judgment may not have been unexpected—everything that happened to Jerusalem was expressly the result of a covenant curse—but the circumstances were no less horrific for that. That the judgment was deserved did not lessen the urgency of the speaker’s cry for relief.&lt;a href="#fn53" class="footnote-ref" id="fnref53"&gt;&lt;sup&gt;53&lt;/sup&gt;&lt;/a&gt; The speaker’s complaint raises the poem’s tension by pitting this lament against the theodic material which precedes it.&lt;a href="#fn54" class="footnote-ref" id="fnref54"&gt;&lt;sup&gt;54&lt;/sup&gt;&lt;/a&gt; The speaker may not be shaking his fist at the heavens, but he is certainly complaining loudly and questioning insistently. If Yahweh is loving, faithful, and just, is this judgment not too harsh? At this point, the ethical vision expressed in vv. 19–39 seems lost. Indeed, Miriam Bier and F. W. Dobbs-Allsopp both suggest that the poet &lt;em&gt;wants&lt;/em&gt; to embrace the ethical vision, but that this and the section following demonstrate his inability to do so.&lt;a href="#fn55" class="footnote-ref" id="fnref55"&gt;&lt;sup&gt;55&lt;/sup&gt;&lt;/a&gt; Were this the final note of the poem, this analysis would be basically correct. It is not, but things get worse before they get better.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="sight-and-salvation-4851" class="level3"&gt;
&lt;h3&gt;Sight and salvation (48–51)&lt;/h3&gt;
&lt;p&gt;The speaker echoes the end of v. 47 at the end of v. 48, tying the two together, but shifts in person (from “we” to “I”).&lt;a href="#fn56" class="footnote-ref" id="fnref56"&gt;&lt;sup&gt;56&lt;/sup&gt;&lt;/a&gt; The identity of the speaker shifts slightly as a result: he spoke first for himself alone, then exhorted his community, and now stands in solidarity with the community of Zion.&lt;a href="#fn57" class="footnote-ref" id="fnref57"&gt;&lt;sup&gt;57&lt;/sup&gt;&lt;/a&gt; The poet connects these verses, from the last line of the פ-strophe through the whole ע-strophe, with the idea of eyes and sight. The poet’s eyes pour out channels of water and flow without ceasing or respite, until Yahweh looks and sees. The poet and his people desperately need Yahweh’s deliverance—and Yahweh remains enthroned in heaven. The poet carefully reiterates the idea suggested in the נ-strophe, delaying the subject of v. 50 to the second half of the line to match the structure of v. 41. The inclusio emphasizes both Yahweh’s sovereignty and his distance from his people.&lt;/p&gt;
&lt;p&gt;Until Yahweh sees—until he stops shrouding himself from his people’s prayers and hears their cries as he did in Exodus 1—the poet’s eyes continue to torment him because of the sad state of the women of the city (v. 51). The final line is curiously expressive: the speaker’s eyes are harsh to his soul—a phrase that has been taken to mean that his eyes literally ache from his crying and that the things he sees torment him.&lt;a href="#fn58" class="footnote-ref" id="fnref58"&gt;&lt;sup&gt;58&lt;/sup&gt;&lt;/a&gt; In fact, the terse language suggests both: in the immediate context, the speaker’s weeping wears him out; more broadly, soul-distressing suffering is nearly omnipresent in these poems. Although he clearly hopes for change, he is no longer addressing Yahweh as of v. 48. He simply states how things are and will remain until God acts: these horrors demand grief. And perhaps Yahweh will hear these tears, even if he seems to have heard nothing else (though nothing in the context or language here suggests these tears are meant to &lt;em&gt;manipulate&lt;/em&gt; God into responding).&lt;a href="#fn59" class="footnote-ref" id="fnref59"&gt;&lt;sup&gt;59&lt;/sup&gt;&lt;/a&gt; The section closes without any such response, though; all hope seems lost.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="deliver-me-from-my-enemies-5266" class="level2"&gt;
&lt;h2&gt;Deliver me from my enemies! (52–66)&lt;/h2&gt;
&lt;p&gt;The concluding section is like an individual psalm of lament.&lt;a href="#fn60" class="footnote-ref" id="fnref60"&gt;&lt;sup&gt;60&lt;/sup&gt;&lt;/a&gt; It continues the shift begun in v. 19. The chapter (as well as the book) opens with the image of God as a divine warrior fighting against his people, but it concludes with a plea for God to act in line with his character.&lt;a href="#fn61" class="footnote-ref" id="fnref61"&gt;&lt;sup&gt;61&lt;/sup&gt;&lt;/a&gt; The speaker hopes that Yahweh will restore his people to covenant unity with him and defend them from their enemies, but refuses to collapse the tension between hope and lament that characterizes the whole poem.&lt;/p&gt;
&lt;section id="excursus-verb-tense-and-meaning-in-poetry" class="level3"&gt;
&lt;h3&gt;Excursus: Verb Tense and Meaning in Poetry&lt;/h3&gt;
&lt;p&gt;The verb tense throughout the final section of the poem is a subject of much debate. Commentators differ especially on how to take the mix of perfects and imperfects in vv. 56–58, but significant differences appear beginning as early as v. 52. Some take the verbs to be a mix of past statement and present need or imperative,&lt;a href="#fn62" class="footnote-ref" id="fnref62"&gt;&lt;sup&gt;62&lt;/sup&gt;&lt;/a&gt; but this does not account for the ongoing nature of the speaker’s distress (as indicated by the imperatives in the following section).&lt;a href="#fn63" class="footnote-ref" id="fnref63"&gt;&lt;sup&gt;63&lt;/sup&gt;&lt;/a&gt; Others read both the perfects and imperfects as a series of present-tense declarations of faith.&lt;a href="#fn64" class="footnote-ref" id="fnref64"&gt;&lt;sup&gt;64&lt;/sup&gt;&lt;/a&gt; This view rightly captures the sense of present distress, but does not account for the perfect-imperfect alternation and has no basis for distinguishing between these “present-tense” perfects and the ordinary past-tense perfects that precede them. Thus, some suggest that the perfects carry a precative sense, with the imperfects then naturally reading as more imperatives.&lt;a href="#fn65" class="footnote-ref" id="fnref65"&gt;&lt;sup&gt;65&lt;/sup&gt;&lt;/a&gt; In addition to being an unusual and debated syntactical stance, however, this also fails to answer why the poet did not use simple imperatives (as in vv. 59, 63). Even if these verbs simply represent the poet shifting to the perfect-imperfect alternation common to poetry,&lt;a href="#fn66" class="footnote-ref" id="fnref66"&gt;&lt;sup&gt;66&lt;/sup&gt;&lt;/a&gt; this is the only place in the entire final section of the poem where the pattern appears. At the least, it marks the sequence by distinction with the surrounding verses. Thus, none of the proposals satisfactorily account for all the features of the text, though perfect-as-precative is not unreasonable.&lt;/p&gt;
&lt;p&gt;It is possible, of course, that this ambiguity is a function only of modern scholars’ relative ignorance of the language—that native speakers readily took in the meaning of the poetry when Lamentations was written. It is equally plausible, however, that the poet &lt;em&gt;intended&lt;/em&gt; the meaning to remain elusive. This is one of the functions of poetry: to push the boundaries of what language can express and thereby convey feeling and sense beyond the merely literal. The poet in Lamentations employs a wide array of tools to this end in this final section of the poem, including structure (the acrostic), enjambment, rhythm, rhyme and assonance, ellipsis, and allusion. Perhaps the poet wanted audience to wonder: has Yahweh delivered already, spoken already, judged the enemies already—or is the speaker still waiting for Yahweh to hear his prayers? In the world of faith, the answer may be &lt;em&gt;both&lt;/em&gt;: the believer may be fully confident that Yahweh’s answer is assured, and still feel no less keenly the fact that experience does not yet bear out that answer. The text is open; it not only allows for but actively invites both readings.&lt;a href="#fn67" class="footnote-ref" id="fnref67"&gt;&lt;sup&gt;67&lt;/sup&gt;&lt;/a&gt; “[Both] past and future signify the ongoing present. The suffering in Lamentations is timeless, and the expression of timelessness seems to have been one of the poet’s goals.”&lt;a href="#fn68" class="footnote-ref" id="fnref68"&gt;&lt;sup&gt;68&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-enemies-despair-and-pleading-5255" class="level3"&gt;
&lt;h3&gt;My enemies! Despair and pleading (52–55)&lt;/h3&gt;
&lt;p&gt;The צ-strophe opens with a stereotyped image of the beleaguered servant of God: the person hunted like a bird (cf. Prov. 6:5; Pss. 11:1, 124:7, 140:5) by those who hated him for no reason (cf. 1 Sam. 19:15, 25:31; Ps. 35:7, 69:5). The strophe continues with a description of the enemies’ depredations. The circuitous language (literally, they put an end to his life, with the action occurring in a pit) conveys the idea of people seeking to end his life by throwing him into a pit and hurling stones at him (cf. Pss. 18:41, 73:27, 94:23).&lt;a href="#fn69" class="footnote-ref" id="fnref69"&gt;&lt;sup&gt;69&lt;/sup&gt;&lt;/a&gt; The image is not a dry pit like the ones Joseph and Jeremiah were thrown into (Gen. 38:24; Jer. 38:6). Instead, water went up over the speaker’s head (cf. Ps: 69:1–2). Besides being yet more stock lament imagery,&lt;a href="#fn70" class="footnote-ref" id="fnref70"&gt;&lt;sup&gt;70&lt;/sup&gt;&lt;/a&gt; the water language connects this sequence back to the preceding one, even as the focus has changed. So likewise with the “pit” language, whose implied metaphorical use as a substitute for death or the grave&lt;a href="#fn71" class="footnote-ref" id="fnref71"&gt;&lt;sup&gt;71&lt;/sup&gt;&lt;/a&gt; is heightened by proximity to v. 47, where it is used precisely that way. The poetry is also enjambed again much as it was at the end of the נ-strophe. The first half of the line in v. 54 continues the complaint theme of the preceding verses, but the latter half begins a recitation of speech to and interaction with Yahweh. The poet carries this theme further as he begins the ק-strophe (v. 55) with the speaker’s having cried out Yahweh’s name from the “deepest pit,” a phrase suggestive of Sheol.&lt;a href="#fn72" class="footnote-ref" id="fnref72"&gt;&lt;sup&gt;72&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nothing about these verses is particularly striking or unusual next to other laments in the Old Testament, and this is in its own way significant. The speaker has made a small but meaningful change in his language and tone: Yahweh is no longer the enemy but instead the one who might deliver &lt;em&gt;from&lt;/em&gt; the enemies.&lt;a href="#fn73" class="footnote-ref" id="fnref73"&gt;&lt;sup&gt;73&lt;/sup&gt;&lt;/a&gt; The turn to traditional, even stereotyped, language of lament and petition signals the speaker’s self-conscious identification with Israel’s history of trusting Yahweh for deliverance. This does not mark the resolution of the trial, but it does undercut the idea that the end of the poem is unrelentingly pessimistic—especially when coupled with the verses that follow.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="yahweh-hearsmay-yahweh-hear-5658" class="level3"&gt;
&lt;h3&gt;Yahweh hears/May Yahweh hear (56–58)&lt;/h3&gt;
&lt;p&gt;The next sequence (continuing the ק-strophe and running into the first line of the ר-strophe) is a striking sequence and is key to understanding the poet’s intent in the final section of the poem. The speaker proclaims Yahweh’s response to his call for help from the edge of death. Per the discussion above, this section is best read as holding together the tensions of past-and-future, actual-and-desired: “you heard my voice” and “hear my voice” (v. 56); “you came on the day I called” and “come on the day I call,” “you said to me” and “say to me” (v. 57); “you strove for my life” and “strive for my life” (v. 58). This is the climax of the final section, the place where the poet’s pleas climax and, more significantly, the only place in the entire book where Yahweh speaks. The words the poet attributes to Yahweh are simple—אַל־תִּירָֽא, “do not fear”—but pack depths into their brief syllables. For the canonically attentive reader, these words immediately call to mind all the places Yahweh tells his people not to fear, and where he inevitably promised his presence and his aid to his people against their enemies.&lt;a href="#fn74" class="footnote-ref" id="fnref74"&gt;&lt;sup&gt;74&lt;/sup&gt;&lt;/a&gt; Yet the poet elides the second part.&lt;/p&gt;
&lt;p&gt;It is impossible to take the poet’s intended sense without paying attention to “the way in which the sequence as a whole coheres and interacts, and even to how the poet articulates theological interests.”&lt;a href="#fn75" class="footnote-ref" id="fnref75"&gt;&lt;sup&gt;75&lt;/sup&gt;&lt;/a&gt; This allusion grounds the final segment of the poem in a measure of hope. At the same time, by leaving the promise of Yahweh’s presence merely an allusion, rather than stating it straight out, the poet carefully sustains the tension between &lt;em&gt;already&lt;/em&gt; and &lt;em&gt;not-yet&lt;/em&gt; that drives the conclusion of the poem. Turn the phrases one way, and the speaker is pleading for God to comfort his people by making his presence known; turn them the other and the speaker is proclaiming that this is precisely what God has already done. Both perspectives affirm the community’s need for deliverance and for Yahweh’s presence to return; but the poetry hangs between the two, unresolved. The poet has left both readings possible, perhaps even necessary. Complaint remains,&lt;a href="#fn76" class="footnote-ref" id="fnref76"&gt;&lt;sup&gt;76&lt;/sup&gt;&lt;/a&gt; yet Israel’s hope that Yahweh was and would be with them remains, too.&lt;a href="#fn77" class="footnote-ref" id="fnref77"&gt;&lt;sup&gt;77&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="may-yahweh-judge-the-enemies-5966" class="level3"&gt;
&lt;h3&gt;May Yahweh judge the enemies (59–66)&lt;/h3&gt;
&lt;p&gt;The poem concludes with the resumption of the speaker’s complaint about the enemies, followed by an imprecatory prayer against them; both the complaint and the imprecation echo the imprecatory psalms.&lt;a href="#fn78" class="footnote-ref" id="fnref78"&gt;&lt;sup&gt;78&lt;/sup&gt;&lt;/a&gt; The only two imperatives proper in vv. 40–66 appear here: the speaker pleads with God to judge his case (v. 59) and to observe his enemies’ actions (v. 63). In the complaint, which takes up the final line of the ר-strophe and the entire ש-strophe, he lists out his enemies’ offenses. They sought (unwarranted) vengeance on, connived against, reproached, rose up against, slandered, plotted against, and made a mockery of him (cf. 14:16–17, 23:7).&lt;a href="#fn79" class="footnote-ref" id="fnref79"&gt;&lt;sup&gt;79&lt;/sup&gt;&lt;/a&gt; The lines are terse and elliptical, with verbs few and far between; the result reads like a list of charges in a court case, crying out for a verdict.&lt;a href="#fn80" class="footnote-ref" id="fnref80"&gt;&lt;sup&gt;80&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The imprecatory prayer comprises the ת-strophe, where a series of imperfects take up an imperatival force. The only unusual item in the list is the phrase translated “obstinate hearts,” מְגִנַּת, a hapax which appears only here and may be derived from מָגֵן, “shield.” Literally, the speaker asks for Yahweh to give them something like “covering-of-heart”—the idea seems to be hard-heartedness (thus “obstinate”)—so that the enemies will receive the judgment they are due (cf. Exo. 7:3,13).&lt;a href="#fn81" class="footnote-ref" id="fnref81"&gt;&lt;sup&gt;81&lt;/sup&gt;&lt;/a&gt; These imprecations are not merely selfish requests for personal vengeance. Rather, they are a plea for Yahweh to execute divine justice, in line with his character as speaker described it in the middle section of the poem.&lt;a href="#fn82" class="footnote-ref" id="fnref82"&gt;&lt;sup&gt;82&lt;/sup&gt;&lt;/a&gt; It is not that the poet thinks that his proclamation of faith resolved everything. Instead, echoing both the Psalms and Jeremiah,&lt;a href="#fn83" class="footnote-ref" id="fnref83"&gt;&lt;sup&gt;83&lt;/sup&gt;&lt;/a&gt; the speaker implores Yahweh for deliverance, confident that God &lt;em&gt;can&lt;/em&gt; help but desperately needing that ability to become action.&lt;a href="#fn84" class="footnote-ref" id="fnref84"&gt;&lt;sup&gt;84&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The poem ends on an unresolved note, unlike most of the psalms of imprecation or lament (notable exceptions including Pss. 44, 60).&lt;a href="#fn85" class="footnote-ref" id="fnref85"&gt;&lt;sup&gt;85&lt;/sup&gt;&lt;/a&gt; But this is appropriate to the poet’s aims. He presents not a cheery resolve to act as though everything is better in light of the ethical and theodic vision presented in vv. 19–39, but rather an attempt to apply that vision when circumstances remain unchanged.&lt;a href="#fn86" class="footnote-ref" id="fnref86"&gt;&lt;sup&gt;86&lt;/sup&gt;&lt;/a&gt; The result is closure, but not resolution. The acrostic is complete, and the speaker’s grief has been expiated to a degree—but until things are right again, pleading and lament remain. Yahweh may be good and his judgments righteous, but that does not require his people’s silence when he punishes them. To the contrary, it allows them to express their grief and anger in the hope of a merciful and gracious response from their covenant God.&lt;/p&gt;
&lt;p&gt;This reading makes sense of the shape of the poem as a whole. Because of the brighter notes sounded in vv. 19–39, a few commentators take this poem as ending positively.&lt;a href="#fn87" class="footnote-ref" id="fnref87"&gt;&lt;sup&gt;87&lt;/sup&gt;&lt;/a&gt; Others take the final 26 verses as a negative response to the (apparently) rhetorical questions posed in vv. 36–39.&lt;a href="#fn88" class="footnote-ref" id="fnref88"&gt;&lt;sup&gt;88&lt;/sup&gt;&lt;/a&gt; Neither of these readings does justice to the tension of the poetry. Instead, the poet has played the enjambment card again, at a yet larger level. The final (originally rhetorical) question of the middle section actually received an answer: Why should a man complain about the punishment of his sins? Because even when the judgment was deserved, Yahweh may yet answer, silence the enemy, and draw near to his people. In one sense, he already has; in another, his people are still waiting—and the poet leaves it at that.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="application" class="level1"&gt;
&lt;h1&gt;Application&lt;/h1&gt;
&lt;p&gt;In recent decades, scholars have applied Lamentations to everything from Freudian grief models&lt;a href="#fn89" class="footnote-ref" id="fnref89"&gt;&lt;sup&gt;89&lt;/sup&gt;&lt;/a&gt; to massive national tragedies.&lt;a href="#fn90" class="footnote-ref" id="fnref90"&gt;&lt;sup&gt;90&lt;/sup&gt;&lt;/a&gt; The Freudian model of grief has some serious deficiencies—but applications of Lamentations 3 in that context do help people both to articulate their grief and to respond to loss.&lt;a href="#fn91" class="footnote-ref" id="fnref91"&gt;&lt;sup&gt;91&lt;/sup&gt;&lt;/a&gt; Application to national tragedies is even more appropriate. The 20th and 21st centuries have seen horrific loss of life; even in largely untouched America, community has disintegrated over the same period. Thus, “the unrelenting relevance of this poetry cries out to be heard and understood.”&lt;a href="#fn92" class="footnote-ref" id="fnref92"&gt;&lt;sup&gt;92&lt;/sup&gt;&lt;/a&gt; Reading Lamentations more frequently and deeply will help Western Christians understand the trials of fellow believers enduring persecution for the name of Christ. It will also provide a framework for sympathizing with peoples around the world facing ethnic cleansing or other such horrors.&lt;/p&gt;
&lt;p&gt;These realities are painful, but they are realities nonetheless. With some of the Psalms, Lamentations addresses human suffering head-on as few other places in Scripture do, pointing the way to a deep, rich, honest, and trusting response to tragedy. The concluding section of chapter 3 is particularly helpful: God sometimes delays his deliverance; repentance does not always lead immediately to restoration; and the enemies of God’s people go on harassing them far longer than seems right. In those moments, people and their pastors have a model to follow: crying out to God as long as his answer remains &lt;em&gt;already-but-not-yet&lt;/em&gt;. Believers ought to spend time reading, meditating on, and praying through these words. Pastors should acquaint themselves with the book deeply so they can minister to their congregants facing trials, and they should preach on it more often to equip their congregations for those trials.&lt;/p&gt;
&lt;p&gt;Lamentations 3:40–66 represents an invitation to cry out to God even in the midst of judgment—to believe that he may yet hear. In their hesitation to voice this kind of lament at in the face of life’s travails, many Christians reveal that they do not know their God as well as they ought. “The suffering is, as it were, an affirmation that God is still there and still concerned with the fate of Israel. He may hide his face, but he has not ceased to be Israel’s God.”&lt;a href="#fn93" class="footnote-ref" id="fnref93"&gt;&lt;sup&gt;93&lt;/sup&gt;&lt;/a&gt; If even God’s judgment on Israel was a painful picture of his faithfulness, how much more when he has shared our griefs, borne our sufferings in his own flesh, and been judged to the point of crying out, “My God, my God, why have you forsaken me?” And so he remains open to his people’s cries—for, until suffering ends, lament remains.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="works-cited" class="level1"&gt;
&lt;h1&gt;Works Cited&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bier, Miriam. “‘We have sinned and rebelled; you have not forgiven’: the dialogic interaction between authoritative and internally persuasive discourse in Lamentations 3.” &lt;em&gt;Biblical Interpretation&lt;/em&gt; 22, no. 2 (January 1, 2014): 146-167. &lt;em&gt;ATLA Religion Database with ATLASerials&lt;/em&gt;, EBSCO_host_ (accessed April 18, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Berlin, Adele. &lt;em&gt;Lamentations: A Commentary&lt;/em&gt;. The Old Testament Library. Louisville: Westminster John Knox Press, 2002.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dobbs-Allsopp, F. W. &lt;em&gt;Lamentations&lt;/em&gt;. Interpretation. Louisville: John Knox Press, 2002.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;–––. “The effects of enjambment in Lamentations. (part 2).” &lt;em&gt;Zeitschrift Für Die Alttestamentliche Wissenschaft&lt;/em&gt; 113, no. 3 (January 1, 2001): 370-385. &lt;em&gt;ATLA Religion Database with ATLASerials&lt;/em&gt;, EBSCO_host_ (accessed April 14, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;–––. “The enjambing line in Lamentations: a taxonomy. (Part 1).” &lt;em&gt;Zeitschrift Für Die Alttestamentliche Wissenschaft&lt;/em&gt; 113, no. 2 (January 1, 2001): 219-239. &lt;em&gt;ATLA Religion Database with ATLASerials&lt;/em&gt;, EBSCO_host_ (accessed April 14, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;–––. “Tragedy, Tradition, and Theology in the Book of Lamentations.” &lt;em&gt;Journal for the Study of the Old Testament&lt;/em&gt; no. 74 (June 1, 1997): 29-60. &lt;em&gt;ATLA Religion Database with ATLASerials&lt;/em&gt;, EBSCO_host_ (accessed April 14, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gottwald, Norman K. &lt;em&gt;Studies in the Book of Lamentations&lt;/em&gt;. Chicago: Alec R. Allenson, Inc., 1954.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Houck-Loomis, Tiffany. “Good God?!? Lamentations as a model for mourning the loss of the good God.” &lt;em&gt;Journal of Religion and Health&lt;/em&gt; 51, no. 3 (September 1, 2012): 701-708. &lt;em&gt;ATLA Religion Database with ATLASerials&lt;/em&gt;, EBSCO_host_ (accessed April 18, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;House, Paul. “Lamentations.” In &lt;em&gt;Song of Songs / Lamentations&lt;/em&gt;. Vol. 23B of Word Biblical Commentary, edited by Bruce M. Metzger and John D. W. Watts. Nashville: Thomas Nelson, 2004.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Huey, F. B. &lt;em&gt;Jeremiah, Lamentations&lt;/em&gt;. Vol. 16 of The New American Commentary. Nashville: Broadman &amp;amp; Holman Publishers, 1993.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lalleman, Hetty. &lt;em&gt;Jeremiah and Lamentations&lt;/em&gt;. Tyndale Old Testament Commentaries. Downers Grove: InterVarsity Press, 2013.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lee, Nancy C. &lt;em&gt;The Singers of Lamentations: Cities Under Siege, from Ur to Jerusalem to Sarajevo…&lt;/em&gt;. Vol. 60 of Biblical Interpretation Series. Leiden: Brill, 2002.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linafelt, Tod. &lt;em&gt;Suriving Lamentations: Catastrophe, Lament, and Protest in the Afterlife of a Biblical Book&lt;/em&gt;. Chicago: The University of Chicago Press, 2000.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Longman, Tremper, III. &lt;em&gt;Jeremiah, Lamentations&lt;/em&gt;. New International Biblical Commentary. Peabody: Hendrickson Publishers, 2008.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provan, Iain. &lt;em&gt;Lamentations&lt;/em&gt;. New Century Bible Commentary. Grand Rapids: William B. Eerdmans, 1991.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;–––. “Past, present and future in Lamentations 3:52–66 : the case for a precative perfect re-examined.” &lt;em&gt;Vetus Testamentum&lt;/em&gt; 41, no. 2 (April 1, 1991): 164–175. &lt;em&gt;ATLA Religion Database with ATLASerials&lt;/em&gt;, EBSCO_host_ (accessed April 26, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Renkema, Johan. &lt;em&gt;Lamentations&lt;/em&gt;. Translated by Brian Doyle. Historical Commentary on the Old Testament. Leuven: Peeters, 1998.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thomas, Heath A. &lt;em&gt;Poetry and Theology in the Book of Lamentations: The Aesthetics of an Open Text&lt;/em&gt;. Hebrew Bible Monographs, 47. Sheffield: Sheffield Pheonix Press, 2013.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Paul House, “Lamentations,” in &lt;em&gt;Song of Songs / Lamentations&lt;/em&gt;, vol. 23B of Word Biblical Commentary (Nashville: Thomas Nelson, 2004), 284; F. W. Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, Interpretation (Louisville: John Knox Press, 2002), 4; Tremper Longman III, &lt;em&gt;Jeremiah, Lamentations&lt;/em&gt;, New International Biblical Commentary (Peabody: Hendrickson Publishers, 2008), 328.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;So F. B. Huey, &lt;em&gt;Jeremiah, Lamentations&lt;/em&gt;, vol. 16 of The New American Commentary (Nashville: Broadman &amp;amp; Holman Publishers, 1993), 442–443, who acknowledges no biblical truth is at stake in the affirmation.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;House, 286; Hetty Lalleman, &lt;em&gt;Jeremiah and Lamentations&lt;/em&gt;, Tyndale Old Testament Commentaries (Downers Grove: InterVarsity Press, 2013), 320-–321.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Rightly, House, 289.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Adele Berlin, &lt;em&gt;Lamentations: A Commentary&lt;/em&gt;, The Old Testament Library (Louisville: Westminster John Knox Press, 2002), 31–32.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Lalleman, 322.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;So Nancy C. Lee, &lt;em&gt;The Singers of Lamentations: Cities Under Siege, from Ur to Jerusalem to Sarajevo…&lt;/em&gt;, vol. 60 of Biblical Interpretation Series (Leiden: Brill, 2002), 11, 48–49, 51; and see Heath A. Thomas, &lt;em&gt;Poetry and Theology in the Book of Lamentations&lt;/em&gt;, Hebrew Bible Monographs, 47 (Sheffield: Sheffield Pheonix Press, 2013), 10–11 and House, 295 for summaries of and responses to suggested redactive possibilities.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Rightly, Iain Provan, &lt;em&gt;Lamentations&lt;/em&gt;, New Century Bible Commentary (Grand Rapids: William B. Eerdmans, 1991), 16; Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 5.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 18.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;Longman, 329.&lt;a href="#fnref10" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn11"&gt;&lt;p&gt;Norman K. Gottwald, &lt;em&gt;Studies in the Book of Lamentations&lt;/em&gt; (Chicago: Alec R. Allenson, Inc., 1954), 20–21.&lt;a href="#fnref11" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn12"&gt;&lt;p&gt;Thomas, 8–9.&lt;a href="#fnref12" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn13"&gt;&lt;p&gt;Rightly, Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 12.&lt;a href="#fnref13" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn14"&gt;&lt;p&gt;Longman, 330.&lt;a href="#fnref14" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn15"&gt;&lt;p&gt;Thomas, 79.&lt;a href="#fnref15" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn16"&gt;&lt;p&gt;Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 9.&lt;a href="#fnref16" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn17"&gt;&lt;p&gt;Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 10–12, 29.&lt;a href="#fnref17" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn18"&gt;&lt;p&gt;House, 310–314; Lalleman, 325-326.&lt;a href="#fnref18" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn19"&gt;&lt;p&gt;Thomas, 3; emphasis original.&lt;a href="#fnref19" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn20"&gt;&lt;p&gt;Save that the order of פ and ע are flipped in chs. 2–4 (Gottwald, 24).&lt;a href="#fnref20" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn21"&gt;&lt;p&gt;Gottwald, 28–29; Thomas, 82.&lt;a href="#fnref21" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn22"&gt;&lt;p&gt;F. W. Dobbs-Allsopp, “Tragedy, Tradition, and Theology in the Book of Lamentations,” &lt;em&gt;Journal For The Study Of The Old Testament&lt;/em&gt; no. 74 (June 1, 1997), 58; Gottwald, 28–30.&lt;a href="#fnref22" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn23"&gt;&lt;p&gt;Berlin, 5.&lt;a href="#fnref23" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn24"&gt;&lt;p&gt;Thomas, 84 (emphasis original).&lt;a href="#fnref24" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn25"&gt;&lt;p&gt;F. W. Dobbs-Allsopp, “The enjambing line in Lamentations: a taxonomy. (Part 1),” &lt;em&gt;Zeitschrift Für Die Alttestamentliche Wissenschaft&lt;/em&gt; 113, no. 2 (January 1, 2001), 221–223; ibid. “The effects of enjambment in Lamentations. (part 2),” &lt;em&gt;Zeitschrift Für Die Alttestamentliche Wissenschaft&lt;/em&gt; 113, no. 3 (January 1, 2001), 370–371; cf. Berlin, 5; House, 428.&lt;a href="#fnref25" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn26"&gt;&lt;p&gt;Dobbs-Allsopp, “The effects of enjambment (part 2),” 373.&lt;a href="#fnref26" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn27"&gt;&lt;p&gt;ibid., 383–384.&lt;a href="#fnref27" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn28"&gt;&lt;p&gt;Thomas, 3.&lt;a href="#fnref28" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn29"&gt;&lt;p&gt;ibid., 5.&lt;a href="#fnref29" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn30"&gt;&lt;p&gt;So Miriam Bier, “‘We have sinned and rebelled; you have not forgiven’: the dialogic interaction between authoritative and internally persuasive discourse in Lamentations 3,” &lt;em&gt;Biblical Interpretation&lt;/em&gt; 22, no. 2 (January 1, 2014), 148–149; Dobbs-Allsopp, “Tragedy, Tradition, and Theology,” 37; Tod Linafelt, &lt;em&gt;Suriving Lamentations: Catastrophe, Lament, and Protest in the Afterlife of a Biblical Book&lt;/em&gt; (Chicago: The University of Chicago Press, 2000), 3,9,10.&lt;a href="#fnref30" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn31"&gt;&lt;p&gt;Longman, 340.&lt;a href="#fnref31" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn32"&gt;&lt;p&gt;Gottwald, 30; Lalleman, 353; Thomas, 83.&lt;a href="#fnref32" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn33"&gt;&lt;p&gt;Lalleman, 362. How to take Yahweh’s speech is an open question; see below.&lt;a href="#fnref33" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn34"&gt;&lt;p&gt;So Bier, 162–163;&lt;a href="#fnref34" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn35"&gt;&lt;p&gt;Dobbs-Allsopp, “Tragedy, Tradition, and Theology,” 55–56.&lt;a href="#fnref35" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn36"&gt;&lt;p&gt;House, 430.&lt;a href="#fnref36" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn37"&gt;&lt;p&gt;ibid.&lt;a href="#fnref37" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn38"&gt;&lt;p&gt;F. W. Dobbs-Allsopp, “The effects of enjambment (part 2),” 374.&lt;a href="#fnref38" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn39"&gt;&lt;p&gt;Thomas, 194.&lt;a href="#fnref39" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn40"&gt;&lt;p&gt;Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 30, 123; Longman, 336.&lt;a href="#fnref40" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn41"&gt;&lt;p&gt;Cf. Jer. 2:23, 3:12, 6:16, 15:19.&lt;a href="#fnref41" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn42"&gt;&lt;p&gt;House, 421.&lt;a href="#fnref42" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn43"&gt;&lt;p&gt;Dobbs-Allsopp, “Tragedy, Tradition, and Theology,” 38; ibid., &lt;em&gt;Lamentations&lt;/em&gt;, 30; Longman, 336.&lt;a href="#fnref43" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn44"&gt;&lt;p&gt;Cf. Exo. 13:21; 14:20,24; 19:9,16; 24:15–18; 33:9–10; 34:5; 40:34–38; Num. 9:15–22; 1 Ki. 8:10–11.&lt;a href="#fnref44" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn45"&gt;&lt;p&gt;Berlin, 96; Longman, 373.&lt;a href="#fnref45" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn46"&gt;&lt;p&gt;Berlin, 96.&lt;a href="#fnref46" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn47"&gt;&lt;p&gt;See Dobbs-Allsopp, “The enjambing line (part 1)” and ibid., “The effects of enjambment (part 2)” for a partial list.&lt;a href="#fnref47" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn48"&gt;&lt;p&gt;So Bier, 162–163; Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 123; ibid., “Tragedy, Tradition, and Theology,” 48; Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 84.&lt;a href="#fnref48" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn49"&gt;&lt;p&gt;So, rightly, Longman, 339.&lt;a href="#fnref49" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn50"&gt;&lt;p&gt;The word translated “waste” here is a hapax; BDB gives “scum,” but the other versions (LXX, Syriac, etc.) differ (Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 100–101).&lt;a href="#fnref50" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn51"&gt;&lt;p&gt;Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 123–124; ibid., “Tragedy, Tradition, and Theology,” 38.&lt;a href="#fnref51" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn52"&gt;&lt;p&gt;Berlin, 3; she rightly notes that most English translations exchange the rhyme for alliteration, which is a distinct poetic technique with a very different effect.&lt;a href="#fnref52" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn53"&gt;&lt;p&gt;Berlin, 18–19. On the covenant curses and Lamentations, see also Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 41; Gottwald, 47; Lalleman, 329; Longman, 337–338.&lt;a href="#fnref53" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn54"&gt;&lt;p&gt;Thomas, 195–196.&lt;a href="#fnref54" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn55"&gt;&lt;p&gt;Bier, 146–147, 153–154, 162–163; Dobbs-Allsopp, “Tragedy, Tradition, and Theology,” 48–49.&lt;a href="#fnref55" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn56"&gt;&lt;p&gt;Dobbs-Allsopp, “Tragedy, Tradition, and Theology,” 41.&lt;a href="#fnref56" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn57"&gt;&lt;p&gt;Thomas, 196, 198.&lt;a href="#fnref57" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn58"&gt;&lt;p&gt;Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 103.&lt;a href="#fnref58" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn59"&gt;&lt;p&gt;So, rightly, Longman, 374; Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 82; contra Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 125; Gottwald, 93.&lt;a href="#fnref59" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn60"&gt;&lt;p&gt;House, 425; Lalleman, 361.&lt;a href="#fnref60" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn61"&gt;&lt;p&gt;Thomas, 197.&lt;a href="#fnref61" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn62"&gt;&lt;p&gt;So House, 426; Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 83.&lt;a href="#fnref62" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn63"&gt;&lt;p&gt;Lalleman, 362; Thomas, 200–201.&lt;a href="#fnref63" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn64"&gt;&lt;p&gt;Lalleman, 361, following Renkema, 451–452.&lt;a href="#fnref64" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn65"&gt;&lt;p&gt;Berlin, 97; Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 126; Longman, 375–376; Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 105–106; ibid., “Past, present and future in Lamentations 3:52-66 : the case for a precative perfect re-examined,” &lt;em&gt;Vetus Testamentum&lt;/em&gt; 41, no. 2 (April 1, 1991): 164-175. &lt;em&gt;ATLA Religion Database with ATLASerials&lt;/em&gt;, EBSCO_host_ (accessed April 26, 2015); Thomas, 198.&lt;a href="#fnref65" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn66"&gt;&lt;p&gt;As suggested by Berlin, 3.&lt;a href="#fnref66" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn67"&gt;&lt;p&gt;See Thomas, 200–202, 210–211.&lt;a href="#fnref67" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn68"&gt;&lt;p&gt;Berlin, 3.&lt;a href="#fnref68" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn69"&gt;&lt;p&gt;Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 126; Thomas, 197.&lt;a href="#fnref69" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn70"&gt;&lt;p&gt;On the lament imagery used throughout the section, see Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 126; Lalleman, 362; Longman, 375; Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 105.&lt;a href="#fnref70" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn71"&gt;&lt;p&gt;Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 127; Thomas, 197.&lt;a href="#fnref71" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn72"&gt;&lt;p&gt;Cf. Ps. 86:13, where תַּחְתִּיּֽוֹת is used in an identical construction with שְּׁא֥וֹל substituted for בּ֖וֹר.&lt;a href="#fnref72" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn73"&gt;&lt;p&gt;Thomas, 197, 203.&lt;a href="#fnref73" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn74"&gt;&lt;p&gt;See Gen. 26:24, 46:3–4; Num. 21:34; Deut. 1:21; Jsh. 8:1, 10:8, 11:6; Jdg. 6:23; 2 Kng. 19:6–7; Isa. 41:10,14, 43:1,5; Jer. 1:8, 30:10–11, 46:27–28; and cf. Gen. 15:1; 2 Kng. 6:16; Isa. 7:4, 10:24–27, 37:6, 44:2.&lt;a href="#fnref74" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn75"&gt;&lt;p&gt;Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 6.&lt;a href="#fnref75" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn76"&gt;&lt;p&gt;So, rightly, Thomas, 200–202.&lt;a href="#fnref76" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn77"&gt;&lt;p&gt;So rightly, Thomas, 210; cf. also Berlin, 18–19.&lt;a href="#fnref77" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn78"&gt;&lt;p&gt;See Lalleman, 363; Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 108.&lt;a href="#fnref78" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn79"&gt;&lt;p&gt;Gottwald, 79–80.&lt;a href="#fnref79" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn80"&gt;&lt;p&gt;Berlin, 97; Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 127.&lt;a href="#fnref80" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn81"&gt;&lt;p&gt;See Longman, 378; Provan, &lt;em&gt;Lamentations&lt;/em&gt;, 109.&lt;a href="#fnref81" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn82"&gt;&lt;p&gt;Berlin, 98–99; Lalleman, 363.&lt;a href="#fnref82" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn83"&gt;&lt;p&gt;See Lalleman, 363.&lt;a href="#fnref83" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn84"&gt;&lt;p&gt;Berlin, 97–98; House, 429.&lt;a href="#fnref84" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn85"&gt;&lt;p&gt;Longman, 331.&lt;a href="#fnref85" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn86"&gt;&lt;p&gt;Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, 127, steps partway in this direction; cf. Thomas, 203.&lt;a href="#fnref86" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn87"&gt;&lt;p&gt;See especially Gottwald, 30, 99.&lt;a href="#fnref87" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn88"&gt;&lt;p&gt;See e.g. Bier, 162–163; Dobbs-Allsopp, &lt;em&gt;Lamentations&lt;/em&gt;, ; ibid., “Tragedy, Tradition, and Theology,” 34–38; Linafelt, 3–9.&lt;a href="#fnref88" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn89"&gt;&lt;p&gt;See e.g. Tiffany Houck-Loomis, “Good God?!? Lamentations as a model for mourning the loss of the good God,” &lt;em&gt;Journal Of Religion And Health&lt;/em&gt; 51, no. 3 (September 1, 2012): 701–708.&lt;a href="#fnref89" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn90"&gt;&lt;p&gt;See e.g. the application to the Bosnian conflict in Lee, or the application to the Holocast in Linafelt.&lt;a href="#fnref90" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn91"&gt;&lt;p&gt;Rightly, Houck-Loumis, 702–703, though much of the rest of her analysis must be discarded.&lt;a href="#fnref91" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn92"&gt;&lt;p&gt;Lee, 3.&lt;a href="#fnref92" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn93"&gt;&lt;p&gt;Berlin, 19.&lt;a href="#fnref93" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="SEBTS"></category><category term="M. Div."></category><category term="papers"></category></entry><entry><title>An Uncomfortable Fit</title><link href="http://www.chriskrycho.com/2015/an-uncomfortable-fit.html" rel="alternate"></link><published>2015-04-25T10:00:00-04:00</published><updated>2015-04-25T10:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-25:/2015/an-uncomfortable-fit.html</id><summary type="html">A Complex, Post-Denominational Ecclesiastical Identity: or, how I'm still just a Presmatic Bapterian.</summary><content type="html">&lt;p&gt;I grew up in a small, non-denominational, baptistic, charismatic church. Speaking in tongues, the use of private prayer languages, claims to words of knowledge and prophecies, and the expectation of miraculous healings were common. Unfortunately, even granting a continuationist view of the gifts, the church’s practice was never in line with New Testament guidelines for the gifts—no translation of tongues, for example, or requirement that prophecy be fulfilled for the prophet to be judged true. I grew disillusioned with the charismatic approach to the gifts by late high school, and spent several of the following years as a near-cessationist. I remain skeptical of most charismatic churches’ practice of the gifts, but am not a cessationist: I see no compelling exegetical argument for the position. I am especially open to the likelihood of the miraculous gifts in frontier missions context, where they serve to validate the proclamation of the gospel over and above demonic powers worshipped in polytheistic, animistic, and shamanistic cultures.&lt;/p&gt;
&lt;p&gt;In college, I spent two years attending a fairly traditional Southern Baptist church. For the latter half of my time in college and the three years following, I was a member of a non-demoninational, baptistic, broadly evangelical church with my wife Jaimie. During that time, I remained baptistic, but began to become concerned with the lack of confessional moorings in most baptistic churches (denominational or non-denominational alike). Along the way, I shifted from the non-Calvinistic views held by most charismatics and Baptists to an Edwardsian Calvinism and developed stronger convictions about church polity. Finally, since moving to North Carolina, we have been committed members at First Baptist Church of Durham—a healthy, elder-led, Calvinistic Southern Baptist church that we love.&lt;/p&gt;
&lt;p&gt;However, even here, we find that we are not totally “at home”; it is not quite right to call even Calvinistic Southern Baptists “my tradition”. Indeed, it is perhaps most accurate to say that I have not yet &lt;em&gt;found&lt;/em&gt; my tradition. What I have found instead are points to appreciate in a number of traditions, and an increasing identification (at least from the outside) with many elements of the Presbyterian tradition. A friend once described me as a “Pres-matic Bapt-erian”, and he seems to have been right. I find much to appreciate in the charismatic background from which I sprang, and much to value in the Baptist tradition where I currently live—but at the end of the day, it is only my credobaptist convictions keeping me within the Baptist world, rather than transitioning into Presbyterianism.&lt;/p&gt;
&lt;p&gt;From the charismatic tradition in which I grew up, I learned the value of affections oriented toward Christ. It is not enough to &lt;em&gt;understand&lt;/em&gt; the things of God; we must also love him and one another. Our faith must be true &lt;em&gt;and&lt;/em&gt; experiential. John reminds us that “this is eternal life, that they know you the only true God, and Jesus Christ whom you have sent” (John 17:3) and that “Whoever says he is in the light and hates his brother is still in darkness” (1 John 2:9). Moreover, they emphasized that walking in the Holy Spirit is essential to the healthy Christian life. Though I might now characterize the Spirit’s primary work differently from the church of my childhood, I still affirm whole-heartedly that the Christian life is deeply and profoundly dependent on the Holy Spirit. Paul enjoins us, “But I say, walk by the Spirit, and you will not gratify the desires of the flesh…. If we live by the Spirit, let us also keep in step with the Spirit” (Galatians 5:16, 25). Likewise, John reports Jesus’ shocking statement that it is &lt;em&gt;better&lt;/em&gt; for us that he left and sent the Spirit than that he should have remained with us (John 16:7ff.). The life of the Christian must be a Spirit-filled and Spirit-empowered life. We can never overemphasize the work of the Spirit in our lives (though we may sometimes articulate that work inaccurately).&lt;/p&gt;
&lt;p&gt;From the Southern Baptist churches I have attended I have gained a deeper appreciation for the importance of evangelism and missions. Whether from the Great Commission in Matthew 28:18–20 or the similar notes sounded in Luke 24:45–49 and then throughout the book of Acts, it is clear that God’s people are called to evangelize wherever we go. (Closely related to the above point, however, this is not mere salesmanship. As Luke points out in Acts 1:8, the power for the church’s missionary work is the Holy Spirit, not human wisdom.) If the church forgets that her first and foremost calling is the proclamation of the gospel to all the nations, she will rapidly fall off the cart in one direction or another.&lt;/p&gt;
&lt;p&gt;The historic Baptist emphasis on regenerate church membership and the congregation’s responsibility for discipline are also essential ingredients to healthy, flourishing churches (and therefore for flourishing individual Christians). The countless “one another” passages of the New Testament ( e.g. John 13:34–35, Ephesians 4:25–32) emphasize mutual service as an essential mark of Christian fellowship. Moreover, the well-known church discipline passages (Matthew 18:15–20) indicate clearly that the members of a congregation are to look out for each other’s spiritual well-being. Although this care has sometimes been twisted to abuse in other churches, we are blessed to participate in a context where the passages’ emphasis on forgiveness and restoration is kept front and center. Meaningful membership and congregational care through church discipline are not universally popular, but they are among the hallmarks of our particular corner of the Southern Baptist convention. This kind of care for the saints is not only necessary: it is &lt;em&gt;beautiful&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;From my Presbyterian friends I have increasingly come to appreciate a more thoroughly confessional identity and the value of churches connected not only by sharing funds but also by polity. Acts 15 highlights that the early church resolved its most significant outstanding tension not by letting each church go its own way doctrinally, but by issuing a decision that was binding on &lt;em&gt;all&lt;/em&gt; the churches. Granted: the presence of the apostles then means our situation is not identical. Still, the event demands attention. Even a church with the illustrious history and (apostolic!) leadership of the congregation at Antioch did not feel equipped to make serious doctrinal decisions without consulting the rest of the church. This is not to deny that there are clear marks of local congregational responsibility throughout the epistles, only that the New Testament pattern was of churches in active contact, cooperation, and doctrinal dependence with each other in a way that appears &lt;em&gt;very&lt;/em&gt; similar to a proto-presbytery, and quite unlike the radical autonomy of Baptist churches.&lt;/p&gt;
&lt;p&gt;I also find the historic Reformed articulation of the relationship between the various spheres of life extremely compelling. Calvin and his heirs often advocated clearly and coherently for the goodness of the created order and for human activity therein. Here, vocation (including the arts) is taken not merely as a means to gospel proclamation, but as genuinely good in itself. This theme runs throughout Scripture: God commanded man to work before the Fall ( cf. Genesis 2:5,15), and though work has been corrupted and made toilsome by the Fall, it remains good. The world itself was created good (Genesis 1), and though it groans with us for redemption (Romans 8:19–23) it still proclaims the glory of God (see Psalm 19 for just one of many examples). Many evangelicals pay lip service to the goodness of creation and vocation, but few outside the high church traditions (especially Anglican, Lutheran, and Presbyterian) carry the doctrine through in their practice. This leaves me hungry for the kind of intellectual, vocational, and artistic engagement I see in those traditions.&lt;/p&gt;
&lt;p&gt;From late modern evangelicalism more broadly I have imbibed both my essential Christian temperament—my unsettled, “post-denominational” eccesiastical identity included!—and two other essential ingredients: a sense of catholicity, and a desire to do more and better in caring for “the least of these.” Set against Jesus’ “new command” in John 13, the divisions within the church are painful realities we should strive to see undone wherever possible. Our disagreements are not trivial; we cannot simply toss them aside. We can, however, glory in our common experience of “mere Christianity” and take opportunities where possible to worship our risen Lord together. We can also work together across denominational boundaries to care for the orphans and widows (James 1:27), to confront injustice in this age. The needs of the world around us are severe and painful; the various wings of the church can and should unite to bring what tastes we can of the justice and mercy of Christ’s kingdom into the present age—in the church, and everywhere else (Micah 6:8).&lt;/p&gt;
&lt;p&gt;Finally, and perhaps most importantly, I have found in &lt;em&gt;all&lt;/em&gt; of these movements a consistent emphasis on the centrality, authority, and sufficiency of Scripture. From my charismatic, Arminian-leaning youth minister to the pastors of the middle-America Bible church I attended during and after college to the elders of Calvinistic Baptist church we now call home, all have pointed consistently to God’s word as his ultimate self-revelation. These churches have &lt;em&gt;all&lt;/em&gt; lived out a commitment to the idea that God’s word is living and active (Hebrews 4:12) and profitable in every way (2 Timothy 3:16–17).&lt;/p&gt;
&lt;p&gt;Perhaps unsurprisingly, given the number of shifts in my past, the transition to another tradition would be relatively straightforward; apart from the issue of believer’s baptism, Presbyterianism looks quite appealing even now. Even beyond these more important convictional differences, I do not fit comfortably within the Baptistic tradition culturally. Its populism often verges on (and sometimes crosses into) anti-intellectualism. Its broadly helpful focus on evangelism and missions too often translates into a reductive approach that reduces all spheres of life to vehicles for gospel-proclamation—not recognizing that while in God’s providence they often serve as such, the myriad spheres of life are good in their own right. The Southern Baptist identification with the culture of the South is also problematic for someone culturally not a Southerner.&lt;/p&gt;
&lt;p&gt;Discussions on the nature of the church and the history of the Baptist movement in this class have largely solidified my pre-existing discomfort within the Baptist tradition and somewhat intensified the struggle to define my ecclesiastical identity. The theological commitments and cultural habits of (especially Southern) Baptists trouble me deeply. Reading &lt;em&gt;The Baptist Way&lt;/em&gt; had precisely the opposite effect Norman intended: his polemical rhetoric bore the marks of profound ignorance of other traditions. Much of the reading on believers’ baptism was similarly dismissive—arguing not against the substance of other positions, but instead against caricatures thereof. Dockery’s call for renewal and consensus was more helpful, but it, too, had a sectarian bent. The denomination’s (and the broader tradition’s) deep anti-intellectualism and lasting suspicion of creeds and confessions make it unlikely that Southern Baptists will be able to claim the confessional identity or theological consensus they need.&lt;/p&gt;
&lt;p&gt;It is an unfortunate reality that my experience of Baptists has too often been marked by denominational sectarianism, anti-intellectualism and anti-creedalism, and reductionistic and utilitarian approaches to God’s world. To be sure, there are exceptions to these trends, and I am grateful for them. But it means that, credobaptist though I am, “Baptist” and especially “Southern Baptist” are not and cannot be my ecclesiastical &lt;em&gt;identity&lt;/em&gt; unless they comes to mean something very different than they have for many years. In the meantime, I will remain a “Pres-matic Bap-terian”, and deeply grateful for the traditions that have shaped me and especially our current church—even when they are not a “perfect fit”.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS"></category><category term="papers]"></category></entry><entry><title>Seeds of Comfort</title><link href="http://www.chriskrycho.com/2015/seeds-of-comfort.html" rel="alternate"></link><published>2015-04-20T09:57:00-04:00</published><updated>2015-04-20T09:57:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-20:/2015/seeds-of-comfort.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;No matter that Deuteronomy had envisioned it and the prophets had foretold it; nothing could prepare one for the ruel reality and the apparently finality of the situation. The burden of Lamentations is not to question why this happened, but to give expression to the fact that it did. At …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;No matter that Deuteronomy had envisioned it and the prophets had foretold it; nothing could prepare one for the ruel reality and the apparently finality of the situation. The burden of Lamentations is not to question why this happened, but to give expression to the fact that it did. At certain moments the book seems to look beyond the destruction, to hold out hope for the future, but in the end despair overcomes hope. Past and future have little place in the book. It centers on the “present”—the moment of trauma, the interminable suffering. The book is not an explanation of suffering but a re-creation of it and a commemoration of it.&lt;/p&gt;
&lt;p&gt;Why immortalize this moment of destruction? Because in its own way it signals the truth of the Bible’s theology, and it points to the continuation of the covenant between God and Israel….&lt;/p&gt;
&lt;p&gt;This explains why the poet can cry out to God and expect a response, why can vent his anger at God, why he can declare that God continues to exist even though his temple does not (Lam 5:18–19), why God is portrayed as so strong and the enemy gets no credit for the destruction. The suffering is, as it were, an affirmation that God is still there and still concerned with the fate of Israel. He may hide his face, but he has not ceased to be Israel’s God. Lamentations contains the seeds of comfort and religious rebuilding that the exilic prophets (especially Second Isaiah) developed more fully in the aftermath of the destruction.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>April Is</title><link href="http://www.chriskrycho.com/2015/april-is.html" rel="alternate"></link><published>2015-04-19T14:25:00-04:00</published><updated>2015-04-19T14:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-19:/2015/april-is.html</id><summary type="html">April is—
    blue and gray and blue and gray and…</summary><content type="html">&lt;div class="line-block"&gt;April is—&lt;br /&gt;
    blue and gray and blue and gray and&lt;br /&gt;
        darker gray and deeper blue and&lt;br /&gt;
&lt;br /&gt;
April is—&lt;br /&gt;
    gold and green and gold and green and&lt;br /&gt;
        richest green and brightest gold and&lt;br /&gt;
&lt;br /&gt;
April is—&lt;br /&gt;
    verdant, daily changing, sometimes&lt;br /&gt;
        silent, sometimes&lt;br /&gt;
        cantillating, always&lt;br /&gt;
            altering and new&lt;br /&gt;
                again.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>Artistry and Humanity</title><link href="http://www.chriskrycho.com/2015/artistry-and-humanity.html" rel="alternate"></link><published>2015-04-18T09:05:00-04:00</published><updated>2015-04-18T09:05:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-18:/2015/artistry-and-humanity.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;… Lamentations more than anything is about formation: discovering what it means to be human in a world where things often times seems [sic] upside down. Lamentations squares off with this reality and responds with artistry and humanity before God.&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;… Lamentations more than anything is about formation: discovering what it means to be human in a world where things often times seems [sic] upside down. Lamentations squares off with this reality and responds with artistry and humanity before God.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>Lessons Learned</title><link href="http://www.chriskrycho.com/2015/lessons-learned.html" rel="alternate"></link><published>2015-04-12T13:49:00-04:00</published><updated>2015-04-12T13:49:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-12:/2015/lessons-learned.html</id><summary type="html">&lt;p&gt;Since mid July 2014, I have been working on a complete redesign and re-build of &lt;a href="//holybible.com"&gt;HolyBible.com&lt;/a&gt;. The good folks at &lt;a href="//prts.edu"&gt;Puritan Reformed Theological Seminary&lt;/a&gt; who own the site wanted to replace its previous content with a Bible reading tool. While there’s still a lot to wrap up, the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since mid July 2014, I have been working on a complete redesign and re-build of &lt;a href="//holybible.com"&gt;HolyBible.com&lt;/a&gt;. The good folks at &lt;a href="//prts.edu"&gt;Puritan Reformed Theological Seminary&lt;/a&gt; who own the site wanted to replace its previous content with a Bible reading tool. While there’s still a lot to wrap up, the project is &lt;em&gt;nearing&lt;/em&gt; its conclusion, and I thought I’d note a few things I’ve learned (in some cases, learned &lt;em&gt;again&lt;/em&gt;) along the way. I want to say up front, lest these be taken the wrong way: I’m extremely proud of the work I’ve done, and the application I’ve delivered &lt;em&gt;does&lt;/em&gt; work to the specifications I was hired to meet. More than that, it does it well. But, of course, it could do it &lt;em&gt;better&lt;/em&gt;. The following thoughts are therefore not, “How I failed” but rather “How I will do this &lt;em&gt;even better&lt;/em&gt; next time around.”&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Single page apps are great, but not always the right choice.&lt;/em&gt; I made the decision, based on my expectations and understandings of what I would need, to develop the site as a single-page web application. This was a mistake. Not the worst mistake ever: it has its upsides, including performance &lt;em&gt;once the app spins up&lt;/em&gt;, but for the kind of content I have here, I would take a different tack today. Better in this case to deliver static content and &lt;em&gt;update&lt;/em&gt; it dynamically as appropriate than to try to load all the content dynamically every time.&lt;/p&gt;
&lt;p&gt;At a technical level, that would probably mean supplementing standard HTML with &lt;a href="//backbonejs.org"&gt;Backbone&lt;/a&gt; instead of developing it as a single-page app in &lt;a href="//angularjs.org"&gt;Angular&lt;/a&gt;. For the backend, while I did it in Node.js and that would work fine, I’d probably do a straight Django app (especially with a few of the goals I learned about &lt;em&gt;after&lt;/em&gt; the project was well along in development).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Progressive enhancement or graceful degradation are hard in web applications, but they still matter.&lt;/em&gt; In the past, I’ve always taken a hard line on making sure things either degrade gracefully or are simply enhanced by JavaScript content. In the architecture decisions I made for this app, I failed to take that into account (largely because I thought it would just &lt;em&gt;need&lt;/em&gt; to work as a web app, but see above). I regret that enormously at this point; it would be much better in this particular case to have content available even if the additional functionality doesn’t work. Even if you &lt;em&gt;are&lt;/em&gt; doing something where you are building an &lt;em&gt;app&lt;/em&gt;, finding ways to make it work on poor connections, older browsers, etc. matters. I’m still thinking a &lt;em&gt;lot&lt;/em&gt; about the best way to do this in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;More popular doesn’t mean better.&lt;/em&gt; Angular has a ton of traction and uptake, and that was deceptive early on. I won’t so easily be fooled in the future. Angular is so very popular in part because Google can put serious money behind its development—and its marketing. But it’s &lt;em&gt;not&lt;/em&gt; the best for many applications; if you’re not in the business of developing your own custom framework, it’s not even &lt;em&gt;close&lt;/em&gt; to the best. Use Ember or Knockout or any number of other full-stack frameworks rather than a meta-framework.&lt;/p&gt;
&lt;p&gt;How to avoid making that mistake? Well, for my part since then, I’ve learned to look not just as the &lt;em&gt;quantity&lt;/em&gt; of material in a given community, but its &lt;em&gt;quality&lt;/em&gt;. For example, &lt;a href="//emberjs.com"&gt;Ember&lt;/a&gt; has &lt;em&gt;incredible&lt;/em&gt; documentation (far better than Angular’s), and they also have a much clearer vision and a more dependable approach to development (strict semantic versioning, etc.). Had I taken the time to read &lt;em&gt;both&lt;/em&gt; sets of docs more carefully and think through the consequences of their designs more thoroughly, I could have recognized this before starting. Next time, I will do just that.&lt;/p&gt;
&lt;p&gt;I will also look at the way the community behaves. The Ember community is &lt;em&gt;far&lt;/em&gt; friendlier for newcomers from what I’ve seen than the Angular community—no slam meant on the Angular crowd, but the Ember folks are just doing that really well. That matters, too. (I can’t speak for other communities, of course; these are just the groups I’ve watched the most.)&lt;/p&gt;
&lt;p&gt;All in all, Ember would have been the better fit between these two (even though, as noted above, it also wouldn’t have been the &lt;em&gt;best&lt;/em&gt; fit).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Unit tests really are the best.&lt;/em&gt; I did a vast majority of this project with unit tests—the first time I’ve ever been able to do that for a whole project. In other projects, I’ve been able to do it for parts, but never this much. It saved my bacon a &lt;em&gt;lot&lt;/em&gt;. Where I got in a hurry and felt like I didn’t have time to write the tests, I (inevitably and predictably!) ended up spending a lot of time chasing down hard-to-isolate bugs—time I could have avoided by writing well-tested (and therefore better-factored) code in the first place. Lesson learned &lt;em&gt;very&lt;/em&gt; thoroughly. Server- and client-side unit tests are &lt;em&gt;really&lt;/em&gt; good. They’re also sometimes &lt;em&gt;hard&lt;/em&gt;; getting mocks set up correctly for dealing with databases, etc. can take a while. That difficulty pays for itself, though.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Unit tests &lt;strong&gt;really&lt;/strong&gt; don’t replace API documentation.&lt;/em&gt; I have seen people advocate test-driven-development as a way of obviating the need to do major documentation of an API. This is, in a word, ridiculous. Having to read unit tests if you want to remember how you structured an API call is a pain in the neck. Don’t believe it. Design your API and document it, &lt;em&gt;then&lt;/em&gt; do test-driven development against that contract.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Sometimes ‘good enough’ is enough.&lt;/em&gt; There is always more to be done, and inevitably you can see a thousand things that could be improved. But ‘good’ shipping code is far more valuable than ‘perfect’ code that never ships. You should never ship &lt;em&gt;bad&lt;/em&gt; code, but sometimes you do have to recognize ‘good enough’ and push it out the door.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Full-stack development is fun, but it’s also really hard.&lt;/em&gt; I wrote every scrap of code in HolyBible.com proper (though of course it relies on a lot of third-party code). It was very, very difficult to manage that all by myself; it’s a lot to hold in one’s head. (One of the reasons I chose Node was because keeping my implementation and testing all in one language helped reduce that load somewhat.) Would I do it again? Sure. But very much chastened about the difficulties involved. It has been enormously rewarding, and I &lt;em&gt;like&lt;/em&gt; being a full-stack developer. But it’s a lot of work, and now I know more clearly just how much.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could say a great deal more about the technical side of things especially, but my biggest takeaway here is that a lot of the hardest and most important work in developing software has nothing to do with the code itself. Architecture and approach shape &lt;em&gt;far&lt;/em&gt; more than the implementation details (even if those details still matter an awful lot). And popularity is not at all the same as either &lt;em&gt;quality&lt;/em&gt; or (especially) &lt;em&gt;suitability for a given task&lt;/em&gt;. In the future, I will be better equipped for the necessary kinds of evaluation, and will hopefully make still better decisions accordingly.&lt;/p&gt;
</content><category term="software development"></category><category term="javascript"></category><category term="angularjs"></category></entry><entry><title>The NSA wants tech companies to give it 'front door' access to encrypted data</title><link href="http://www.chriskrycho.com/2015/the-nsa-wants-tech-companies-to-give-it-front-door-access-to-encrypted-data.html" rel="alternate"></link><published>2015-04-12T13:16:00-04:00</published><updated>2015-04-12T13:16:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-12:/2015/the-nsa-wants-tech-companies-to-give-it-front-door-access-to-encrypted-data.html</id><summary type="html">&lt;p&gt;The Verge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I don’t want a back door,” Rogers said. “I want a front door. And I want the front door to have multiple locks. Big locks….”&lt;/p&gt;
&lt;p&gt;Rogers suggests the adoption of “front door” access will allow for essential security measures while keeping data safe from hackers or an …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The Verge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I don’t want a back door,” Rogers said. “I want a front door. And I want the front door to have multiple locks. Big locks….”&lt;/p&gt;
&lt;p&gt;Rogers suggests the adoption of “front door” access will allow for essential security measures while keeping data safe from hackers or an outside attack. But opponents of the idea note that even broken into pieces, a master digital key creates security flaws. “There’s no way to do this where you don’t have unintentional vulnerabilities,” Donna Dodson, chief cyber­security adviser at the Commerce Department’s National Institute of Standards and Technologies, told the Post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That last bit is absolutely true. The government basically wants to make sure it can spy on anyone, any time it wants. That’s a bad, bad plan.&lt;/p&gt;
</content><category term="[links]"></category></entry><entry><title>Unsurprisingly, In Flux</title><link href="http://www.chriskrycho.com/2015/unsurprisingly-in-flux.html" rel="alternate"></link><published>2015-04-08T16:05:00-04:00</published><updated>2015-08-28T19:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-04-08:/2015/unsurprisingly-in-flux.html</id><summary type="html">The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone – React &amp; Angular – Ember – Meteor.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;This started as a &lt;a href="https://alpha.app.net/chriskrycho/post/57102562"&gt;series of posts&lt;/a&gt; on App.net. I &lt;a href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html"&gt;resolved&lt;/a&gt; a while ago that if I was tempted to do that, I should just write a blog post instead. I failed at that resolution, but at a friend’s &lt;a href="https://alpha.app.net/jws/post/57108281"&gt;suggestion&lt;/a&gt;, am adapting it into a blog post anyway. You can see the posts that prompted it &lt;a href="https://alpha.app.net/keita/post/57096585"&gt;here&lt;/a&gt; and &lt;a href="https://alpha.app.net/jws/post/57096838"&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The state of JavaScript frameworks today is a scale, really, from not-at-all-monolithic to totally-monolithic, in roughly this order: Backbone – React &amp;amp; Angular – Ember – Meteor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backbone and related library Underscore are really collections of common JS tools and patterns you can use to write apps, but they’re not &lt;em&gt;frameworks&lt;/em&gt;, per se. You’ll write all your own boilerplate there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React and Angular supply much &lt;em&gt;more&lt;/em&gt; of the functionality, but Angular is a “meta-framework” that aims to do &lt;em&gt;some&lt;/em&gt; boilerplate but let you construct your own custom app framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is very powerful, but it’s kind of like Git: wires are exposed; you have to understand a &lt;em&gt;lot&lt;/em&gt; about the internals to get it to do what you want. Its routing functionality is pretty limited out of the box, too—so much so that there’s a near-standard third-party router.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React, as I understand it, supplies a paradigm and associated tools oriented primarily at view state management, though with capabilities via extensions for routing, etc. These tools are &lt;em&gt;extremely&lt;/em&gt; powerful for performance in particular. It’s not a full framework, and the docs expressly note that you can &lt;em&gt;just&lt;/em&gt; use React for the view layer with other tools if you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In any case, Angular and React do &lt;em&gt;different&lt;/em&gt; things from each other, but both do substantially more than Backbone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember is a full framework, strongly emphasizing shared conventions (with a lot of common developers from Rails). It’s perhaps less adaptable than React or Angular, but is much more full-featured; you have very little boilerplate to do.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meteor is like Ember, but does server-side Node as well as client-side stuff, with the goal being to minimize code duplication, sharing assets as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of all of those, Ember has easily (easily!) the best-explained roadmap, most articulate leadership, and best development path. They are also aggressively adopting the best features of other frameworks wherever it makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angular is currently in flux, as Google has announced Angular 2.0 will be basically a completely different framework; there will be &lt;em&gt;no&lt;/em&gt; direct migration path for Angular 1.x apps to Angular 2.0+. Total rewrite required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ember uses a steady 6-week release schedule with very careful regression testing and semantic versioning, with clear deprecation notices and upgrade paths, and is therefore both rapidly iterating &lt;em&gt;and&lt;/em&gt; relatively stable for use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you just need a set of tools for enhance functionality on otherwise relatively static pages, Backbone+Underscore is a great combo. If you already have a bunch of things in place but want a dedicated view layer, React is good.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re writing a new, full-on web &lt;em&gt;application&lt;/em&gt; (SPA, or organized in whatever other way), I think Ember is the very clear winner at this point. I have good confidence in their leadership and they’re firing on all cylinders.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding Angular, &lt;a href="https://alpha.app.net/mikehoss"&gt;@mikehoss&lt;/a&gt; &lt;a href="https://alpha.app.net/mikehoss/post/57105656"&gt;posted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the record they are doing that to make it more mobile-friendly. The Ang1 has abysmal performance on mobile. Besides a time machine, this maybe the best option. And Miško is a bit of a jerk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can’t speak to his comment about Miško (Miško Hevery, one of the leads on AngularJS), but I agree about Angular itself: the rewrite needs to happen. Angular 1.x is a mess—as are its docs. It’s just not a good time to be using 1.x for any new projects.&lt;/p&gt;
&lt;p&gt;I’ll add to these points that I’ve used Angular for the last 9 months on HolyBible.com development. As I noted: the documentation is pretty rough, and in a lot of cases you really do have to understand what the framework is doing and how before you can get it to do the things you want. This is, in one sense, exactly the &lt;em&gt;opposite&lt;/em&gt; of what I’m looking for in a framework—but it makes sense given Angular’s goal of being a meta-framework.&lt;/p&gt;
&lt;p&gt;Rather like Git, though, which was originally going to be infrastructure for version control systems which would have their own interface, but eventually just had a “good enough” interface that we’re all now stuck with, Angular is being used &lt;em&gt;as&lt;/em&gt; a framework, not just as a &lt;em&gt;meta-framework&lt;/em&gt;, and it’s unsurprisingly not great for that.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;i class="editorial"&gt;Take this for what it’s worth: not the final word (by a long stretch) on JavaScript frameworks, but rather the perspective of one guy who notably &lt;em&gt;hasn’t used all of the frameworks&lt;/em&gt;, but has spent some time looking at them. Moreover, I haven’t particularly edited this; it’s more a summary in the kind of short-form posts that I originally created than a detailed analysis. The only things I’ve done are expand some of the notes on Angular and React, and add the footnote on React.&lt;/i&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; don’t know a ton about React, but I do think a lot of what I do know about it is cool from a programming perspective. From a designer perspective, however, it’s a bit of a pain: React’s “JSX” domain-specific language is &lt;em&gt;much&lt;/em&gt; less friendly to developers than standard HTML, and therefore than either Ember or Angular, both of which implement their templating via HTML templating languages. There’s a substantil tradeoff there: React’s model is interesting not only academically but in practice because of the performance results it produces. It’s worth note, though, that others have recognized this and are adopting it to varying degrees; notably, Ember is incorporating the idea of minimizing changes to the DOM by keeping track of state and updating only differences, rather than refreshing the whole tree, in the new rendering engine (HTMLBars) they’re rolling out over the past several and future several releases.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category><category term="javascript"></category><category term="angularjs"></category><category term="emberjs"></category><category term="react"></category></entry><entry><title>Repent and Be Baptized</title><link href="http://www.chriskrycho.com/2015/repent-and-be-baptized.html" rel="alternate"></link><published>2015-03-28T22:00:00-04:00</published><updated>2015-03-28T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-03-28:/2015/repent-and-be-baptized.html</id><summary type="html">Who should be baptized, and how, and by whom? Is rebaptism ever allowed? How does baptism affect church membership or the Lord's Supper?</summary><content type="html">&lt;section id="baptismal-theology-and-practice" class="level2"&gt;
&lt;h2&gt;Baptismal Theology and Practice&lt;/h2&gt;
&lt;p&gt;There are only two practices embraced universally throughout the Christian church: baptism and the Lord’s Supper. Even with these, serious differences remain, reflecting deeper distinctions in the theology and practice of the church. In the case of baptism, the questions of its meaning and mode tend to reflect the believer’s views on the nature of God’s saving work, the covenant community, and the church. Who should be baptized, and how, where, and under what circumstances are difficult, important questions. Believers must consider them carefully and hold their conclusions humbly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="baptismal-theology" class="level2"&gt;
&lt;h2&gt;Baptismal Theology&lt;/h2&gt;
&lt;p&gt;Baptism should be applied to believers, and is best carried out by immersion. However, while Baptist churches have often tended toward a dogmatic position on these, leading to a frequent practice of rebaptism, more caution is necessary—especially on the second point.&lt;/p&gt;
&lt;section id="meaning" class="level3"&gt;
&lt;h3&gt;Meaning&lt;/h3&gt;
&lt;p&gt;Baptism is the covenant sign of one’s entrance into the Christian faith, and also a means of grace in the life of the Christian—not &lt;em&gt;saving&lt;/em&gt; grace, but real grace nonetheless, in the same way that fellowship with the saints, the preaching of the word, and the Lord’s supper are.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; God works grace in the life of believers in their obedience to his commands, of which baptism is among the clearest in the New Testament (Matt. 28:18–20, Acts 2:38). Moreover, it is the symbol and in some mysterious way also a means of the believer’s union with Christ in his death and resurrection (Rom. 6:3–4, Col. 2:8–14), an element of his union with Christ’s church (Eph. 4:4–6), and his appeal to God for a pure conscience (1 Pet. 3:21–22).&lt;/p&gt;
&lt;p&gt;Baptism is not merely a symbolic ordinance&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; but, as these passages make clear, a place in which God works uniquely in the life of the believer. Neither is paptism a work necessary for salvation, as is clear from the salvation of the thief on the cross (Luke 23:42–43, as well as from many other places that teach that faith alone is necessary for salvation). Nor is there warrant in Scripture for the idea that baptism is a means of regeneration or cleansing from original sin. Nonetheless, paptism is ordinarily a part of God’s saving work in his people’s lives. The reality that some are saved who are never baptized does not mean it plays no part in the believer’s life, but rather that its part is in &lt;em&gt;sanctification&lt;/em&gt; rather than in &lt;em&gt;justification&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="mode" class="level3"&gt;
&lt;h3&gt;Mode&lt;/h3&gt;
&lt;p&gt;Nearly all Baptists historically have argued on the basis of the New Testament language that baptism &lt;em&gt;must&lt;/em&gt; be by immersion. The word βαπτίζω, usually transliterated to English as “baptize” rather than translated, is a secondary verb derived from the root βάπτω, broadly meaning simply “to dip or immerse.” While a full exegetical treatment is beyond the scope of this essay, two points must be remembered in any discussion of baptism. First, the normal meaning of both these words &lt;em&gt;is&lt;/em&gt; dipping or immersion, and there are a number of examples which strongly suggest going down into and coming up out of standing water (Matt. 3:6–17, Mark 1:4–11, John 3:22, Acts 8:36–39). Second, however, the lexical domain of these verbs and of the various words derived from them within the New Testament alone is broader than dipping or immersion, and certainly includes the notion of washing.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Moreover, its figurative uses throughout the New Testament range far more broadly than “immersion” alone: it includes partaking of trials (Mark 10:38, Luke 12:50); the transfoming work of the Spirit (Matt. 3:11, Acts 1:5, Acts 11:16), and even the Israelites’ passing through water without getting wet (1 Cor. 10:2). The most significant of these metaphorical texts is Paul’s argument that in baptism believers have been united with Christ in his death and resurrection (Rom. 6:3–4, Col. 2:8–14). The parallel imagery between the two is clear and potent: baptism visualizes death and resurrection. However, Paul’s parallel uses of the word “baptism” and “baptize” (e.g. 1 Cor. 12:13, Gal. 3:27) with “in Christ” demonstrate that the point of these passages is union with Christ—not mode of baptism. Immersion illustrates this reality most effectively, but immersion is not commanded.&lt;/p&gt;
&lt;p&gt;It should be granted, then, that the primary meaning of the word group is of dipping or immersion, but that it also includes a broader sense of washing or transformation. Likewise, given what documents there are from the first and second century, it seems safe to say that baptism was normally by immersion in the early church. However, it is too much to say that immersion is &lt;em&gt;demanded&lt;/em&gt; by the language used or by the examples in the New Testament. Rather, it should be preferred as the &lt;em&gt;best&lt;/em&gt; way of expressing visually the death, burial and resurrection of the believer with Christ as well as the cleansing and transformative elements of the practice. At the same time, those who practice baptism by immersion should not reject baptisms by sprinkling or pouring as false or unbiblical baptisms.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="subject" class="level3"&gt;
&lt;h3&gt;Subject&lt;/h3&gt;
&lt;p&gt;The debate over the &lt;em&gt;subject&lt;/em&gt; of baptism is similarly heated. There are essentially two positions on who should be baptized (with some variations in each position): that only new believers should be baptized, or that new believers and the children of believers should be baptized. While there are some important differences regarding the &lt;em&gt;meaning&lt;/em&gt; of the baptism of believers, it is the universal practice of all Christian churches. The baptism of infants or as-yet-unbelieving children of newly converted parents, however, has been attributed a wide number of meanings, ranging from cleansing from original sin and the beginning of the individual’s own work of salvation (the Catholic view) to entrance into the covenant community conditioned on personal faith (the Presbyterian view).&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On the one hand, the vast majority of Christians throughout all history prior to the 20th century baptized infants. On the other hand, the believer is responsible finally to submit to the Bible, tradition notwithstanding; if the Scriptures teaches credobaptism, even the weight of so much tradition must be set aside. Nonetheless, church history is often illuminating for difficult interpretive issues.&lt;/p&gt;
&lt;p&gt;The earliest unambiguous mention of infant baptism is Tertullian’s condemnation of the practice in 198 A.D. Less than two decades later, though, Hippolytus advocated the baptism of children incapable of answering for themselves less than two decades later (parents or other relatives were to speak on behalf of their children).&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; Some argue that the commands for those baptized in earlier documents such as the &lt;em&gt;Didache&lt;/em&gt;&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; precludes children’s having been baptized, but this is an argument from silence—and these same kinds of commands appear in the “Apostolic Tradition” following the instruction regarding children. In any case, practice in the church was mixed by the end of the second century at the latest.&lt;/p&gt;
&lt;p&gt;The evidence from New Testament practice is also ambiguous.&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; It is true that in the cases where the recipients of baptism are clearly delineated, they are believers. However, any argument regarding the household baptisms is necessarily an argument from silence. There is no grounds in the text for asserting that &lt;em&gt;none&lt;/em&gt; of the households that received baptism included infants or small children incapable of professing faith.&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt; To say otherwise is to read one’s theological presuppositions into the text. By the same token, however, paedobaptists have no more warrant than do credobaptists for claiming these passages as clear evidence for their view. Believers may of course argue that these passages should be interpreted in light of their understanding of the rest of the New Testament—but without the dogmatism too often present on both sides. The passages simply do not say; indeed, no passage in the New Testament even speaks clearly about believing children.&lt;a href="#fn10" class="footnote-ref" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thus, the subject of baptism can be determined only through the passages that teach about its meaning and function in the life of the believer. Covenantal paedobaptists&lt;a href="#fn11" class="footnote-ref" id="fnref11"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt; argue that, in continuity with the pattern of the Abrahamic Covenant, children of believers—that is, children of those who are themselves members of the covenant community of faith—should be baptized. They note, rightly, that the major points of discontinuity marked off by the New Covenant are with the &lt;em&gt;Mosaic&lt;/em&gt; covenant rather than the Abrahamic Covenant. As such, they suggest that just as the (male) children of members of the Abrahamic covenant were circumcised to symbolize their entrance into the covenant community, so likewise (all) children of members of the New Covenant should be baptized. The covenant view rightly distinguishes between the role of the symbol and the necessary faith of the believer. It also rightly identifies the church with Abraham’s offspring (cf. Luke 3:7–9) and takes seriously the teaching in both Testaments that Abraham and his offspring were saved by faith, not merely by being members of the people of Israel (see esp. Gal. 3:1–6).&lt;a href="#fn12" class="footnote-ref" id="fnref12"&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, while the Abrahamic covenant led directly to the New Covenant, it nonetheless had an ethnic or national bent to it that the New Covenant does not. The Abrahamic covenant was with Abraham and his offspring in a specific nation, though for the good of all nations (Gen. 12:1–7, 15:1–21, 17:1–14). Circumcision was established for Abraham and his descendants as their act of covenant (Gen 17:9–14). Yet the New Testament unambiguously does away with circumcision as the mark of participation in God’s community (cf. Acts 10:1–48, 16:3, 1 Cor. 7:18, Gal. 2:3, 5:2). The New Covenant circumcision is one “made without hands” (Col. 2:11; cf. Deut. 30:6, Rom. 2:29) and is tied directly to baptism—“the circumcision of Christ” (Col. 2:11b–12).&lt;/p&gt;
&lt;p&gt;The covenant paedobaptist is right that baptism is to the church what circumcision was to the Jews, but wrong about how entrance into the covenant community now comes about.&lt;a href="#fn13" class="footnote-ref" id="fnref13"&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt; Again: salvation was always by faith, but the people of God are no longer constituted ethnically or nationally, but by faith alone. To become one of God’s people in the Abrahamic covenant was to join the nation of Israel; even when, as in Ruth’s case, that commitment was one of faith it was also national and ethnic. It is no longer. Those who are to be baptized are those who have become disciples (Matt. 28:18–20), repented (Acts 2:38–39), been united with Christ in his death and resurrection (Rom. 6:3, Col 2:12), put on Christ (Gal. 3:27), asked God for cleansing from sin (Acts 22:17) and for a clear conscience (1 Pet. 3:21). In the New Covenant, &lt;em&gt;only&lt;/em&gt; those who profess faith are marked as belonging to the people of God.&lt;a href="#fn14" class="footnote-ref" id="fnref14"&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In line with the practice described in the New Testament, then, only believers should be baptized today: those who have made a clear and credible profession of faith. However, those who affirm believer’s baptism should be careful not to overstate their case. While the New Testament does incline this way, there is no slam-dunk case, and no therefore warrant for sneering at those who disagree. Moreover, other convictions held in light of one’s position on baptism must be held moderately, in light of the provisional character of the doctrine.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="excursus-rebaptism" class="level3"&gt;
&lt;h3&gt;Excursus: Rebaptism&lt;/h3&gt;
&lt;p&gt;Rebaptism is a serious matter. It argues that the first baptism a person underwent was not in fact a Christian baptism at all, for one should not otherwise be rebaptized. There is only one instance of rebaptism recorded in the New Testament: that of the believers in Ephesus (Acts 19), who had not been baptized in the name of Jesus at all. If the meaning, mode, and subject of baptism as outlined above are correct, then it is appropriate to rebaptize those who have been baptized as unbelievers (including as children) or by those who are not orthodox Christians (e.g. Mormons). However, it is inappropriate to rebaptize those who were baptized by a mode other than immersion,&lt;a href="#fn15" class="footnote-ref" id="fnref15"&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt; for the mode of baptism is neither a primary issue nor a point asserted dogmatically anywhere in Scripture. Moreover, it is also inappropriate to rebaptize those who were baptized as believers, but by churches holding differing views on the meaning of baptism but which are nonetheless true Christian churches. Any baptism applied to a believer on a valid profession of faith by a true church ought to be respected by other Christian churches.&lt;a href="#fn16" class="footnote-ref" id="fnref16"&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="baptismal-practice" class="level2"&gt;
&lt;h2&gt;Baptismal Practice&lt;/h2&gt;
&lt;section id="baptism-and-the-lords-supper" class="level3"&gt;
&lt;h3&gt;Baptism and the Lord’s Supper&lt;/h3&gt;
&lt;p&gt;Many Baptists have argued that the Lord’s Supper should be reserved for those who have been baptized as believers, by immersion—a position that dates from the origin of Baptist life (in the writings of William Kiffen) to the present day (see the Baptist Faith and Message 2000 for just one example). A minority of Baptists throughout the history of the movement (famously including John Bunyan) have argued to the contrary: that the table ought to be open to any who have given a valid profession of faith, or are members in good standing of other Christian churches. Finally, a yet-smaller group has practiced local-church-only communion, in which only the members of a given congregation may partake of communion there. The first position, though most common, is perhaps least sustainable in the author’s view. The fully open and local-church-only views are more self-consistent in their interpretation of the relevant passages on the Lord’s Supper.&lt;/p&gt;
&lt;p&gt;All those answering this question are attempting to deal rightly with the reality that coming to the Table is a serious matter. The New Testament teaches that Christians are not to partake of the meal with those who are in unrepentant sin (1 Cor. 5) and warns that judgment will come on those who themselves partake of the meal while unrepentant (1 Cor. 11:20–30). Moreover, unrepentant sin is the only boundary set around the table in the New Testament. But arguing that being mistaken about even a practice so central as baptism constitutes unrepentant sin is problematic. There are other doctrines of denomination-forming importance, and which believers regard as sin issues; if this logic were to be applied consistently, Christians could never share the Table with anyone who did not share their every denominational distinctive.&lt;/p&gt;
&lt;p&gt;As Mike Bergman comments, the Lord’s Table is for disciples—for all those who will be eating the supper together when the Lord returns.&lt;a href="#fn17" class="footnote-ref" id="fnref17"&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt; The “closed” communion position wrongly restricts the practice on the basis of a doctrinal distinctive—one having little to do with the meaning of the Table itself. Baptism is important, but to be incorrect on a secondary (albeit important) issue is not remotely as unrepentant sin.&lt;/p&gt;
&lt;p&gt;Advocates of closed communion sometimes argue for a modified version of this position. Instead, they argue that participation in the Lord’s Supper requires that one already have been baptized, and that since paedobaptism or baptism by a mode other than immersion are by (their) definition not baptisms at all, such believers should not be admitted to the table.&lt;a href="#fn18" class="footnote-ref" id="fnref18"&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt; However, this is also problematic. First of all, it assumes facts not in evidence. The New Testament makes no comment on the issue whatsoever, presumably because it was not an issue (regardless of the question of credo- or paedobaptism), leaving one with no direct exegetical warrant for drawing the line here. Moreover, the result is to exclude from the table other believers whose faith in Christ one fully acknowledges and who one is confident will share in the feast at the end of ages—on the basis of a debated interpretive issue, where the New Testament draws no such line. Again, this reduces in no uncertain terms to the idea that doctrinal differences are sufficient for excluding people from the Table, and sets one rapidly on the path to sectarianism.&lt;/p&gt;
&lt;p&gt;Finally, advocates of the local-church-only position rightly note that the local church, and especially her shepherds, have a responsibility for the souls of those who partake of the Table. Again, the New Testament is clear that partaking of the talbe in known, unrepentant sin is a cause for judgment; it is likewise clear that churches are as part of the practice of church discipline remove unrepentant members from the table. Since the local church cannot ordinarily know the spiritual condition of a visitor, it is safer to restrict communion only to those about whom the congregation does have knowledge: members. However, this position is similarly hard to sustain from the New Testament. While churches are to remove from membership and access to the table those who are in unrepentant sin, there is no indication of restricting the Table only to those in the local congregation. Moreover, the text most often cited as evidence for this position (1 Cor. 11:28) actually speaks to individuals holding themselves accountable, rather than to churches holding their members accountable.&lt;/p&gt;
&lt;p&gt;Given that the New Testament pattern is indeed of baptism, the question once again is whether the issue of baptism is so certain as to warrant this kind of restriction. If, as argued above, there are grounds for holding a credobaptist position only with considerable humility, Christians must likewise take care not to draw too thick a line around other elements of the church’s practice on the basis of baptismal doctrine.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="baptism-and-the-local-church" class="level3"&gt;
&lt;h3&gt;Baptism and the Local Church&lt;/h3&gt;
&lt;p&gt;Many of the same arguments applied to the Lord’s Supper have been applied to the issue of church membership, and many of the same concerns are in play. However, many Baptist churches today practice open communion but closed membership, and a number of high-profile Baptist leaders throughout history have advocated for open membership as well as open communion.&lt;a href="#fn19" class="footnote-ref" id="fnref19"&gt;&lt;sup&gt;19&lt;/sup&gt;&lt;/a&gt; Baptists have universally argued for a regenerate church membership, and believer’s baptism by immersion has &lt;em&gt;usually&lt;/em&gt; been understood to be a prerequisite for membership, since other forms of baptism have been deemed invalid.&lt;a href="#fn20" class="footnote-ref" id="fnref20"&gt;&lt;sup&gt;20&lt;/sup&gt;&lt;/a&gt; Moreover, since a local church is not merely a group of believers who happen to come together, but a group united around common affirmations about the nature of the Christian life and the truths Scripture teaches, local churches rightly have a higher bar for membership than merely that a person appears truly to be saved.&lt;a href="#fn21" class="footnote-ref" id="fnref21"&gt;&lt;sup&gt;21&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Churches should certainly not admit to membership those who affirm their stance on baptism yet continue to refuse it. In cases where the person affirms paedobaptism, though, membership may not be wholly out of bounds—for the same reason that the Lord’s supper is not: the unity of the body of Christ matters enormously. It will &lt;em&gt;usually&lt;/em&gt; be best in such circumstances to direct the individual to another evangelical church in the area that practices paedobaptism.&lt;a href="#fn22" class="footnote-ref" id="fnref22"&gt;&lt;sup&gt;22&lt;/sup&gt;&lt;/a&gt; This best reflects the importance and seriousness of baptism. However, there may be times when the best option is to admit such an individual to membership—e.g., in cases where the baptistic church is the evangelical congregation in the area. Baptism is important, but not so important as to leave a regenerate individual or family without fellowship. Until Christ returns and finally sets all doctrines aright, people should gather with those with whom they share core doctrinal affiliations where possible—and be welcomed as brothers and sisters in Christ where it is &lt;em&gt;not&lt;/em&gt; possible. Such a practice may, by the grace of God, be used a little to knit together again the fractured body of the church catholic.&lt;/p&gt;
&lt;section id="is-baptism-a-church-ordinance" class="level4"&gt;
&lt;h4&gt;Is baptism a church ordinance?&lt;/h4&gt;
&lt;p&gt;Some believers argue that baptism is specifically a church ordinance, and as such that it should never (or only in very rare circumstances) be carried out outside the church. Since baptism is the believer’s initiation into the church, it is the right only of the church to carry it out.&lt;a href="#fn23" class="footnote-ref" id="fnref23"&gt;&lt;sup&gt;23&lt;/sup&gt;&lt;/a&gt; However, in nearly every case in the New Testament, the newly baptized believers constituted the first members of the church, and baptism is rarely mentioned outside of “church planting” narratives. In the few cases where baptisms in the local church &lt;em&gt;are&lt;/em&gt; discussed (1 Cor. 15:29), the content is simply not relevant. Indeed, Jesus himself presided over (but did not participate in) a great many baptisms prior to the formation of the local church, and evidently to a different end than “Christian baptism”—certainly the symbolism of death, burial, and resurrection with Christ remained hidden from those recipients of baptism. As with John’s baptism, this seems to have been a baptism “for repentance from sins” (Mark 1:4). Given the relative silence of Scripture on the subject, it again seems best not to stake out too strong a position on who may and may not baptize.&lt;/p&gt;
&lt;p&gt;Certainly the normal circumstance will be baptism in the context of a local church, because the local church is the home of Christian ministry. However, this is not a normative practice; should a person come to faith in the context of a parachurch ministry, there is no basis for arguing that it is &lt;em&gt;categorically&lt;/em&gt; wrong for the parachurch ministry to perform the convert’s baptism. To be sure, a parachurch ministry that consistently baptizes new converts may run the risk of usurping the church’s role—but in this case, the baptismal practice is a reflection of the problem, not itself the problem.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-age-for-baptism" class="level3"&gt;
&lt;h3&gt;The Age for Baptism&lt;/h3&gt;
&lt;p&gt;Given the credo-baptist position that only those who have made a credible profession of faith should be baptized, the question arises: how old must someone be to offer a profession that the church deems credible and therefore administers baptism? Put negatively, is there an age below which such a baptism would be more akin to paedo- than to credobaptism? Or should any profession of faith be accepted, regardless of the child’s age? There are a number of good arguments in favor of baptizing even very young children after a clear profession of faith.&lt;a href="#fn24" class="footnote-ref" id="fnref24"&gt;&lt;sup&gt;24&lt;/sup&gt;&lt;/a&gt; First, there is no evidence in Scripture for delaying baptism after clear professions of faith: baptism normally followed a profession of faith immediately.&lt;a href="#fn25" class="footnote-ref" id="fnref25"&gt;&lt;sup&gt;25&lt;/sup&gt;&lt;/a&gt; Second, delaying baptism as a sort of “litmus test” for baptism implies that something besides repentance and faith in Christ is necessary for salvation. Third, it is not giving false assurance to affirm even a child’s trust in Christ through the gospel—perhaps even to the contrary (Mark 10:13–16). Moreover, the New Testament pattern for confirmation of salvation is always a matter of encouraging those who &lt;em&gt;have&lt;/em&gt; made a profession to hold fast to it (cf. Heb. 2, 4, 6, 10), rather than discouraging people from profession or baptism.&lt;/p&gt;
&lt;p&gt;However, there are also a number of reasons to consider delaying baptism for children.&lt;a href="#fn26" class="footnote-ref" id="fnref26"&gt;&lt;sup&gt;26&lt;/sup&gt;&lt;/a&gt; One caution against baptizing young adults who have made a profession is the historic practice of baptistic churches, and that of many baptistic churches outside the United States, where baptism has been and remains a matter for adulthood. Another is the reality that young children, being easily swayed by their parents or peers, might be inclined to make false professions of faith—even apparently sincere ones. Of course, &lt;em&gt;any&lt;/em&gt; profession of faith may be made for the wrong reasons.&lt;a href="#fn27" class="footnote-ref" id="fnref27"&gt;&lt;sup&gt;27&lt;/sup&gt;&lt;/a&gt; It is not the church’s job to prevent false profession from being made, but to respond appropriately when a false profession has been made (Matt. 18, 1 Cor. 5). Moreover, as noted above, Scripture is simply silent on the age of non-adults baptized, so making a hard and fast rule is unwarranted. It may nonetheless be wise to baptize only individuals who are judged capable of making their own professions of faith—perhaps those in their early pre-teen years and onward, as judged together by parents and church leaders in each case.&lt;a href="#fn28" class="footnote-ref" id="fnref28"&gt;&lt;sup&gt;28&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="summary" class="level2"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Baptism is the sign of the New Covenant, and should be applied to the members of that covenant: believers. The preferred mode is immersion, but other modes may be allowed if circumstances demand. Similarly, the church is the ordinary context and her members the normal adminstrators of baptism, but it matters most that a person be baptized by an orthodox Christian in the Trinitarian formula. Those who have been baptized as believers ought not be rebaptized, regardless of mode. Those who have not been baptized as believers may partake of the Lord’s table, but should not ordinarly become members of a Baptist church. In all these things, the people of God ought to rejoice in their participation in the death and resurrection of Christ.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="bibliography" class="level2"&gt;
&lt;h2&gt;Bibliography&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bergman, Mike. “Why We Practice ‘Open’ Communion.” SBC Voices. Posted September 9, 2011. http://sbcvoices.com/why-we-practice-open-communion/ (accessed March 24, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dever, Mark E. “Baptism in the Context of the Local Church.” In &lt;em&gt;Believer’s Baptism: Sign of the New Covenant in Christ&lt;/em&gt;. Edited by Thomas R. Schreiner and Shawn D. Wright. Nashville: B&amp;amp;H Academic, 2007. 329–352.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finn, Nathan. “Baptism as a Prerequisite to the Lord’s Supper: A White Paper from the Center for Theological Research.” Fort Worth: The Center for Theological Research, Southwestern Baptist Theological Seminary, 2006.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;——, “A Baptist perspective on -re-baptism-”. BRNow.org. Posted February 25, 2013. http://www.brnow.org/Opinions/Guest-Columns/February-2013/A-Baptist-perspective-on-re-baptism (accessed March 28, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Freeman, Curtis W. “Analysis: Should Baptist churches adopt open membership? Yes.” The Baptist Standard. Posted on April 21, 2010. https://www.baptiststandard.com/news/faith-culture/11047-analysis-should-baptist-churches-adopt-open-membership-yes (accessed March 28, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Garrett, James Leo. “Analysis: Should Baptist churches adopt open membership? No.” The Baptist Standard. Posted on April 21, 2010. https://www.baptiststandard.com/news/faith-culture/11048-analysis-should-baptist-churches-adopt-open-membership-no (accessed March 28, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Moore, Russell D. “Table Manners.” &lt;em&gt;Touchstone&lt;/em&gt;, Sept/Oct 2011. http://www.touchstonemag.com/archives/article.php?id=24-05-016-v (accessed March 28, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Norman, R. Stanton. &lt;em&gt;The Baptist Way: Distinctives of a Baptist Church&lt;/em&gt;. Nashville: Broadman &amp;amp; Holman Publishers, 2005.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Piper, John. “How Important is Church Membership” (sermon, Bethlehem Baptist Church, July 13, 2008).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;——. “Teaching and Admonishing One Another in All Wisdom” (sermon, Bethlehem Baptist Church, July 27, 2008).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;——. “What Is Baptism, and How Important Is It?” (sermon, Bethlehem Baptist Church, July 20, 2008).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Starke, John. “Should We Baptize Small Children? Yes.” The Gospel Coalition. Posted February 23, 2011. http://www.thegospelcoalition.org/article/should-we-baptize-small-children-yes (accessed March 28, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wax, Trevin. “Should We Baptize Small Children? No.” The Gospel Coalition. Posted February 21, 2001. http://www.thegospelcoalition.org/blogs/trevinwax/2011/02/21/should-we-baptize-small-children/ (accessed March 28, 2015).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;White, Thomas. “What Makes Baptism Valid?” In &lt;em&gt;Restoring Integrity in Baptist Churches&lt;/em&gt;, edited by Thomas White, Jason G. Duesing, and Malcolm B. Yarnell, III. Grand Rapids: Kregel Publications, 2008. 107–118.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The Lord’s Supper belongs in a distinct category, insofar as it is a means of &lt;em&gt;special&lt;/em&gt; grace in the Christian life, but it fits in this list as well.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Contra Thomas White, “What Makes Baptism Valid?” in &lt;em&gt;Restoring Integrity in Baptist Churches&lt;/em&gt;, eds. Thomas White, Jason G. Duesing, and Malcolm B. Yarnell, III (Grand Rapids: Kregel Publications, 2008), 110–111.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;See e.g. Luke 11:38, where it is clear the Pharisees were not surprised that Jesus failed to take a whole-body bath; or Mark 7:4, where the same word is used of washing after returning from the market; or Hebrews 6:2, 9:10, where it refers to ritual purification&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;This was the pattern of the early church, as evidenced by the very early “Didache”, which argued for baptism by immersion if possible and by pouring if necessary (&lt;em&gt;Didache&lt;/em&gt; 7).&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;This may be taken as a secondary argument against paedobaptism—a point made to the author and others by Nathan Finn in a number of personal conversations and in several class lectures, 2013–2015.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;The Apostolic Tradition of Hippolytus of Rome 21.4.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;Didache 7.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Contra many Baptists, e.g. R. Stanton Norman, &lt;em&gt;The Baptist Way: Distinctives of a Baptist Church&lt;/em&gt; (Nashville: Broadman &amp;amp; Holman Publishers, 2005), 110–112; White, 109–110.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;Contra e.g. Norman, 110–111.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;The nearest the New Testament comes to it are: Jesus’ welcome of little children (Mark 10:13–16), Paul’s admonitions to those married to unbelievers for the sake of their spouse and children (1 Cor. 7:12–16), and Paul’s instructions to presumably believing children and their parents (Eph. 6:1–4, Col. 3:20–21) .&lt;a href="#fnref10" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn11"&gt;&lt;p&gt;For constraints of time and space, the author has left aside other views, many of which are both historically and practically significant and deserves serious interaction, but which have in the author’s view less Scriptural warrant (to varying degrees) than the covenant position.&lt;a href="#fnref11" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn12"&gt;&lt;p&gt;It is also perhaps surprising that in all the controversy stirred up by the Judaizers in the early church, there is no mention of hostility over children being excluded from the New Covenant—a fairly striking change between the two. This is especially so given that the distinction between Old and New Covenants did not preclude the Judaizers from arguing for many &lt;em&gt;other&lt;/em&gt; points of even stronger continuity between Mosaic practice and that of the church—still less Abrahamic practice and that of the church. However, this is another argument from silence and so cannot be taken as strong evidence one way or the other. (Personal conversation with Doug Serven, August 5, 2010.)&lt;a href="#fnref12" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn13"&gt;&lt;p&gt;John Piper, “What Is Baptism, and How Important Is It?” (sermon, Bethlehem Baptist Church, July 20, 2008).&lt;a href="#fnref13" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn14"&gt;&lt;p&gt;The contested passages in Acts are left aside because, as has been noted, they do not prove what either side claims they do. Lydia believed, and her household was baptized—does this mean her household had no infants in it and everyone in it converted with her? It is impossible to say.&lt;a href="#fnref14" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn15"&gt;&lt;p&gt;Contra e.g. Nathan Finn, “A Baptist perspective on -re-baptism-”, BRNow.org, posted February 25, 2013, http://www.brnow.org/Opinions/Guest-Columns/February-2013/A-Baptist-perspective-on-re-baptism (accessed March 28, 2015).&lt;a href="#fnref15" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn16"&gt;&lt;p&gt;This, of course, partly begs the question, for it leaves aside the matter of what constitutes a “true Christian church”—certainly a contested issue, and one beyond the scope of this paper. At a minimum, no group which rejects orthodox Trinitarianism and Christology may be included. At most, some major denominations may be excluded. The author is inclined to treat believers’ baptisms even by groups with serious doctrinal problems such as Roman Catholics as valid, however, so long as the specific congregation by which the believer was baptized rightly proclaimed a gospel of repentance from sins and salvation through the finished work of Christ alone.&lt;a href="#fnref16" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn17"&gt;&lt;p&gt;Mike Bergman, “Why We Practice”Open&amp;quot; Communion,&amp;quot; SBC Voices, posted September 9, 2011, http://sbcvoices.com/why-we-practice-open-communion/ (accessed March 24, 2015).&lt;a href="#fnref17" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn18"&gt;&lt;p&gt;See e.g. Nathan Finn, “Baptism as a Prerequisite to the Lord’s Supper: A White Paper from the Center for Theological Research,” (Fort Worth: The Center for Theological Research, Southwestern Baptist Theological Seminary, 2006); and Russell D. Moore, “Table Manners,” &lt;em&gt;Touchstone&lt;/em&gt;, Sept/Oct 2011, http://www.touchstonemag.com/archives/article.php?id=24-05-016-v (accessed March 28, 2015).&lt;a href="#fnref18" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn19"&gt;&lt;p&gt;Curtis W. Freeman, “Analysis: Should Baptist churches adopt open membership? Yes,” The Baptist Standard, posted April 21, 2010, https://www.bapti ststandard.com/news/faith-culture/11047-analysis-should-baptist-churches-adopt-o pen-membership-yes (accessed March 28, 2015).&lt;a href="#fnref19" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn20"&gt;&lt;p&gt;James Leo Garrett, “Analysis: Should Baptist churches adopt open membership? No,” The Baptist Standard, posted April 21, 2010, https://www.baptiststandard.com/news/faith-culture/11048-analysis-should-baptist-churches-adopt-op en-membership-no (accessed March 28, 2015).&lt;a href="#fnref20" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn21"&gt;&lt;p&gt;So rightly, Moore in his discussion of the Lord’s Table in “Table Matters.”&lt;a href="#fnref21" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn22"&gt;&lt;p&gt;Close friendships between evangelical churches and their leaders would be a boon in this sort of work—as well as in kingdom ministry in general.&lt;a href="#fnref22" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn23"&gt;&lt;p&gt;See e.g. Mark E. Dever, “Baptism in the Context of the Local Church,” in &lt;em&gt;Believer’s Baptism: Sign of the New Covenant in Christ&lt;/em&gt;, eds. Thomas R. Schreiner and Shawn D. Wright (Nashville: B&amp;amp;H Academic, 2007), 329–331; White, 112–114. Both merely &lt;em&gt;assert&lt;/em&gt; this point; neither demonstrates it. Dever rightly grants that there is no biblical instruction about &lt;em&gt;who&lt;/em&gt; should baptize (331) while failing to note that there is similarly no express statement that it is a church ordinance.&lt;a href="#fnref23" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn24"&gt;&lt;p&gt;The following was adapted from John Starke, “Should We Baptize Small Children? Yes,” The Gospel Coalition, posted February 23, 2011, http://www.thegospelcoalition.org/article/should-we-baptize-small-children-yes (accessed March 28, 2015).&lt;a href="#fnref24" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn25"&gt;&lt;p&gt;So likewise Dever, 345.&lt;a href="#fnref25" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn26"&gt;&lt;p&gt;The following was adapted from Trevin Wax, “Should We Baptize Small Children? No,” The Gospel Coalition, posted February 21, 2001, http://www.thegospelcoalition.org/blogs/trevinwax/2011/02/21/should-we-baptize-small-children/ (accessed March 28, 2015).&lt;a href="#fnref26" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn27"&gt;&lt;p&gt;“Baptism: Theology and Practice: A Statement by the Elders”, First Baptist Church of Durham, 2014, 11.&lt;a href="#fnref27" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn28"&gt;&lt;p&gt;First Baptist Church of Durham, 11–12.&lt;a href="#fnref28" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[M. Div."></category><category term="SEBTS"></category><category term="papers]"></category></entry><entry><title>Reflection demands</title><link href="http://www.chriskrycho.com/2015/reflection-demands.html" rel="alternate"></link><published>2015-03-28T07:40:00-04:00</published><updated>2015-03-28T07:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-03-28:/2015/reflection-demands.html</id><summary type="html">Reflection demands / of its practitioners, like poetry / like painting, toil, dance, or ev’ry art…</summary><content type="html">&lt;div class="line-block"&gt;Reflection demands&lt;br /&gt;
    of its practitioners, like poetry,&lt;br /&gt;
    like painting, dance, or ev’ry art,&lt;br /&gt;
    pain and toil, labor and sacrifice&lt;br /&gt;
        for—&lt;br /&gt;
    mind, like limb&lt;br /&gt;
    like bow-stroke on a violin, or brush-stroke on a page&lt;br /&gt;
    is weak by nature: dull, dim, faint&lt;br /&gt;
        for—&lt;br /&gt;
    all our faculties, like autumn leaves,&lt;br /&gt;
    like ancien régime, or crumbled-down façade,&lt;br /&gt;
    are fallen, troubled, and woe’d&lt;br /&gt;
        so—&lt;br /&gt;
    loose the mind from surly bond!&lt;br /&gt;
    set intellect free by striving hard!&lt;br /&gt;
    free from ruinous decay, and&lt;br /&gt;
    free from foolish sluggery&lt;br /&gt;
    with ev’ry breath sing higher note&lt;br /&gt;
    by ev’ry step climb further up&lt;br /&gt;
        and—&lt;br /&gt;
    so deliver to the self&lt;br /&gt;
    what wisdom may be found.&lt;/div&gt;
</content><category term="[poetry]"></category></entry><entry><title>Snow Days and Friends Moving</title><link href="http://www.chriskrycho.com/2015/snow-days-and-friends-moving.html" rel="alternate"></link><published>2015-03-14T13:30:00-04:00</published><updated>2015-03-14T13:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-03-14:/2015/snow-days-and-friends-moving.html</id><summary type="html">&lt;p&gt;Another month gone, another bunch of little changes, and a few bigger changes, too.&lt;/p&gt;
&lt;p&gt;February marked the final burst of winter here. We had a number of days of wintry weather, leading to several days where Southeastern’s campus was closed—though none on days when I had class! One …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another month gone, another bunch of little changes, and a few bigger changes, too.&lt;/p&gt;
&lt;p&gt;February marked the final burst of winter here. We had a number of days of wintry weather, leading to several days where Southeastern’s campus was closed—though none on days when I had class! One of those days included well over doc inches of snow, and marked the first time Ellie has ever been able to play in the snow. Though she was a little nervous at first, she loosened up as she watched a neighbor kid play and was soon having a blast working on snowmen and a snow fort. She even tried to throw a few snowballs, but—like her momma—she didn’t much care for having them tossed her way.&lt;/p&gt;
&lt;p&gt;Kate quite enjoyed the snow as well, even though her snow clothes were still a bit too big for her.&lt;/p&gt;
&lt;p&gt;In the meantime, I kept plugging away at work and school. His past week was Spring Break for us, but “breaks” here usually just mark an opportunity for me to get ahead on my class assignments. I wrote one of my three papers for the semester—the shortest, but it’s helpful to have it out of the way nonetheless.&lt;/p&gt;
&lt;p&gt;This week also saw our friends PJ and Katie finish packing up their apartment here to &lt;a href="http://www.adoptedbytheking.com/2015/03/from-wake-forest-with-love.html"&gt;move to Texas&lt;/a&gt;, and we helped them wrap that up and participated in a few get-togethers to give them a good send-off. We are simultaneously glad for them, because this seems like it will be a very good thing for them, and incredibly sad, because we will miss them dearly.&lt;/p&gt;
&lt;p&gt;Good friends are a rare and precious thing, and we have been blessed in ways that are hard to describe in our friendship with PJ and Katie. Having them live in the same town as us for that past couple years, and then less than a mile away for the last year, has been wonderful. We are blessed to live in a time when it is easy to stay in touch, of course, but no amount of Skype or FaceTime can make up for being unable to share a meal. Gladly, we are hoping to see them again in just a few months at the Southern Baptist Convention (which I am planning to attend for class credit at SEBTS), and that softens the blow, if only a little. Too, they are moving to be only about 90 minutes’ drive from where Jaimie’s parents live, so we will certainly see them when we visit there.&lt;/p&gt;
&lt;p&gt;Still, I am sad, and so is Jaimie. Ellie hasn’t really understood it yet, but she will no doubt be sad as it comes home to her over the next few weeks.&lt;/p&gt;
&lt;p&gt;So it goes until Christ comes again. &lt;em&gt;Maranatha.&lt;/em&gt;&lt;/p&gt;
</content><category term="family"></category><category term="Jaimie"></category><category term="Ellie"></category><category term="Kate"></category></entry><entry><title>Small Caps and Margins</title><link href="http://www.chriskrycho.com/2015/small-caps-and-margins.html" rel="alternate"></link><published>2015-03-13T23:30:00-04:00</published><updated>2015-03-13T23:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-03-13:/2015/small-caps-and-margins.html</id><summary type="html">&lt;p&gt;In addition to the various other issues I tackled in the &lt;a href="http://mereorthodoxy.com/speak-truth-beauty-review-echoes-eden/"&gt;review&lt;/a&gt; I published at Mere O a few weeks ago, there was one other secondary but to my mind non-trivial issue with Barrs’ &lt;em&gt;Echoes of Eden&lt;/em&gt;. I left it aside because it certainly wasn’t Barrs’ fault, and would …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In addition to the various other issues I tackled in the &lt;a href="http://mereorthodoxy.com/speak-truth-beauty-review-echoes-eden/"&gt;review&lt;/a&gt; I published at Mere O a few weeks ago, there was one other secondary but to my mind non-trivial issue with Barrs’ &lt;em&gt;Echoes of Eden&lt;/em&gt;. I left it aside because it certainly wasn’t Barrs’ fault, and would have seemed absurdly nitpicky to my audience there. But it bears comment nonetheless.&lt;/p&gt;
&lt;p&gt;The small caps! The divine name appeared in a number of places throughout the books, as &lt;span class="smcp"&gt;Lord&lt;/span&gt; (just as it does in the Bible). Unfortunately, Crossway chose to use a Palatino variant without real &lt;a href="http://ilovetypography.com/2008/02/20/small-caps/"&gt;small capitals&lt;/a&gt;. Yes, I know: it’s a little detail, and in the grand scheme of things it isn’t &lt;em&gt;that&lt;/em&gt; important. But it’s the little details like that which add up to the difference between a so-so printing of a book and a truly delightful printing of a book. They make a big difference in the experience of reading the book (albeit usually a subconscious one, unless like me you are a typography nerd). I think that a book on the arts, of all books, should have really delightful typesetting. (Honestly, &lt;em&gt;all&lt;/em&gt; books should have good typesetting, but the lack is even less excusable when the book is about beauty!)&lt;/p&gt;
&lt;p&gt;Today I started reading Bruce Ashford’s new book, &lt;em&gt;Every Square Inch&lt;/em&gt;. Five pages in, I’m enjoying his writing so far, but two things are making it a less-than-delightful experience. One is the typeface—the same custom serif used in Logos. It is functional, but there are many irritating details about it. Above all, it screams that it was designed for screens and has not been adjusted for use in print. The other major issue is the page margins. The inner margins are perfectly respectable; the outer margins are so narrow that my much-less-typographically-obsessive wife &lt;em&gt;also&lt;/em&gt; immediately noted and commented on them.&lt;/p&gt;
&lt;p&gt;These things matter. The old patterns of book-printing—careful designs of everything from leading to line length to the size of margins—were patterns for a reason. In the new digital-everything era, too many of these lessons have been forgotten or ignored by startup presses, and it’s making everyone’s reading experience unnecessarily worse. Typography is a skill and an art that can make an &lt;em&gt;enormous&lt;/em&gt; difference in the experience of reading a book; it is one we need publishers like Lexham Press and Crossway to reappropriate.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rant over. But please, publishers: work to make your typography &lt;em&gt;excellent&lt;/em&gt;, not just passable. Pay attention to your margins and your small capitals.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Crossway I &lt;em&gt;know&lt;/em&gt; can do it, because their ESV line includes some of the best Bible typesetting done by &lt;em&gt;anyone&lt;/em&gt;. They just need to apply that everywhere!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>The New Macbook</title><link href="http://www.chriskrycho.com/2015/the-new-macbook.html" rel="alternate"></link><published>2015-03-13T08:00:00-04:00</published><updated>2015-03-13T08:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-03-13:/2015/the-new-macbook.html</id><summary type="html">&lt;p&gt;I have seen and heard lots of discussion of the &lt;a href="http://www.apple.com/macbook/"&gt;new Macbook&lt;/a&gt; this week, and have been thinking about its appeal and Apple’s strategy a bit along the way. At first I was extremely skeptical of the only-one-port approach, but the more I’ve thought about it, the more …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have seen and heard lots of discussion of the &lt;a href="http://www.apple.com/macbook/"&gt;new Macbook&lt;/a&gt; this week, and have been thinking about its appeal and Apple’s strategy a bit along the way. At first I was extremely skeptical of the only-one-port approach, but the more I’ve thought about it, the more sense it makes to me. Why? &lt;em&gt;Market segmentation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a MacBook, not a MacBook Pro. &lt;em&gt;I&lt;/em&gt; need more ports than this. But &lt;a href="http://jaimiekrycho.com/"&gt;Jaimie&lt;/a&gt;? I don’t remember the last time I saw her plug anything into the machine besides its power cord. This is a MacBook for ordinary users, not a machine for power-users. Now, I still think that the loss of MagSafe is a bit sad; it has saved us more than once (especially with young children in the house). But in terms of the needs of ordinary users, a single port that &lt;em&gt;can&lt;/em&gt; double as video out or USB input really is perfect.&lt;/p&gt;
&lt;p&gt;In the meantime, it lets Apple cleanly differentiate between its MacBook and MacBook Pro lines. If you need the ports for expandability—because you’re a power user—you get a Pro. If you don’t, you get the MacBook. The tradeoffs with CPU make sense here, too: a computer that performs about like a 2012 MacBook Air would not be my favorite for development work. But for the writing work that Jaimie does? Again, the performance levels there are perfectly reasonable. It’ll do everything she needs, and do it &lt;em&gt;well&lt;/em&gt;. Throw in the retina screen, and it’ll be really nice for her purposes.&lt;/p&gt;
&lt;p&gt;In fact, I fully expect that we’ll end up getting her a 2nd or 3rd generation machine when we need to replace her current (a 2010 white MacBook) sometime in 2016–17.&lt;/p&gt;
&lt;p&gt;So: better done than I initially thought, Apple.&lt;/p&gt;
</content></entry><entry><title>“Optimal Equivalence”</title><link href="http://www.chriskrycho.com/2015/hcsb-thoughts.html" rel="alternate"></link><published>2015-02-28T20:30:00-05:00</published><updated>2015-03-16T20:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-02-28:/2015/hcsb-thoughts.html</id><summary type="html">&lt;p&gt;Over the past few months, I have been doing a read-the-Bible-in-90-days plan, and decided to take the opportunity to read through the Holman Christian Standard Bible. I have not &lt;em&gt;quite&lt;/em&gt; finished the plan, but I &lt;em&gt;have&lt;/em&gt; read the whole text of the Bible in that time (just not in sequence …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past few months, I have been doing a read-the-Bible-in-90-days plan, and decided to take the opportunity to read through the Holman Christian Standard Bible. I have not &lt;em&gt;quite&lt;/em&gt; finished the plan, but I &lt;em&gt;have&lt;/em&gt; read the whole text of the Bible in that time (just not in sequence!). The HCSB is a very solid and reliable translation, and I have no qualms recommending it, alongside the NLT, the NIV,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; the ESV, and the NASB as valuable and helpful modern translations. (Other translations may also be helpful, but those are the English translations with which I am most familiar.)&lt;/p&gt;
&lt;p&gt;Rather than try to do a detailed analysis and review—a task that would take a great many words indeed—I thought I would simply offer some observations on the text gleaned from this read through.&lt;/p&gt;
&lt;section id="the-translation" class="level2"&gt;
&lt;h2&gt;The Translation&lt;/h2&gt;
&lt;p&gt;Published by Holman Bible Publishers, the HCSB is a relatively recent translation, dating to 2004. (Holman is part of Lifeway, the for-profit publishing arm of the Southern Baptist Convention.) The HCSB was totally new translation, rather than a revision of an older tradition, based on the NA27/UBS4 Greek text and the BHS5 text. The translation committee called their translation strategy “optimal equivalence”, aiming for a balance between the more wooden “functional” and the more free (but also looser) “dynamic” equivalence philosophies. (On the name of their equivalence, more in a moment.)&lt;/p&gt;
&lt;section id="general-philosophy" class="level3"&gt;
&lt;h3&gt;General Philosophy&lt;/h3&gt;
&lt;p&gt;The translators described their overall philosophy as “optimal equivalence”—shooting for a balance between “formal” and “dynamic” equivalence, perhaps most popularly represented by the NASB and NIV respectively.&lt;/p&gt;
&lt;p&gt;While I find the translators’ goals admirable, and I think the results are generally fairly good, a word about their name for the philosophy is in order. To call one’s translation philosophy “optimal equivalence” is nearly tautological. &lt;em&gt;Every&lt;/em&gt; translator thinks that her approach is optimal given the goals she sets herself. Otherwise, she would pick a different strategy—one more &lt;em&gt;optimal&lt;/em&gt; for the goals of her translation!&lt;/p&gt;
&lt;p&gt;As for the results, in truth I think the come a great deal closer to “dynamic equivalence” than the translators might care to acknowledge. The difference between “optimal” and “dynamic” equivalence here is fairly lean; in truth, it seems more a matter of the particular tastes of the translation committee than of actually being more “functionally” equivalent than the NIV. If we conceived of the dynamic-functional equivalence scale as ranging from 1 to 10, with 1 being a full paraphrase and 10 being a 1st-year student’s word-for-word gloss of the original, the NIV would be about a 4 and the HSCB about a 5. (I would rate the NLT about a 2.5–3, the ESV a 7, and the NASB 8–8.5.)&lt;/p&gt;
&lt;p&gt;I have no problem with that; the result is a fairly solid reading Bible. Like the NIV and the NLT, its biggest weakness is a certain flatness of style—there is little to distinguish Paul from Peter or the Chronicler from the author of Kings. The ESV manages to bring through some of those authorial quirks and idiosyncrasies a bit more, but sometimes at the cost of clear English.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The biggest place this flattening shows up is in the poetic language: the Psalms here are not &lt;em&gt;bad&lt;/em&gt;, but they’re never especially beautiful, either. That’s a real shame. The prosaic meaning of the Psalms does come through well enough, but at the cost of precisely that element that makes them so compelling and have given them such a lasting influence: their poetic voice.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="leaving-behind-the-kjv" class="level3"&gt;
&lt;h3&gt;Leaving Behind the KJV&lt;/h3&gt;
&lt;p&gt;The HCSB, to a greater extent than many other conservative translations, demonstrates considerable willingness to diverge from the readings of the KJV. In many ways, this is good: it makes for better (modern) English, and in many cases a better translation as well, since our knowledge both of the textual basis of the Bible and of the original languages has advanced somewhat since 1611.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Occasionally, though, and especially in the poetic sections, the result is a serious flattening of the text. Compare, for example, their translation of Job 38:11. The HCSB reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;when I declared: “You may come this far, but no farther;&lt;br /&gt;
    your proud waves stop here”?&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The KJV has:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;and said, Hitherto shalt thou come, but no further:&lt;br /&gt;
    and here shall thy proud waves be stayed?&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, I am not &lt;em&gt;terribly&lt;/em&gt; sad to see the archaic pronouns go (though I do miss their precision a bit!). But “here shall thy proud waves be stayed” sings in a way that “your proud waves stop here” just… doesn’t. It’s not bad, but it isn’t particularly poetic, either. The ESV follows the KJV more closely, with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;and said, ‘Thus far shall you come, and no farther,&lt;br /&gt;
    and here shall your proud waves be stayed’?&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;That manages to keep the poetry of the KJV while using modern English, perhaps the best tradeoff under the circumstances. Given the extent to which the language and rhythm of the KJV have shaped modern English, there are times abandoning the KJV actually &lt;em&gt;hurts&lt;/em&gt; the translation. This goes back to the point above: poetics matter. This is not a failing of the HCSB alone, though; every dynamic equivalence translation I’ve read falls into the same trap. (And again: the functionally equivalent translations fall into &lt;em&gt;other&lt;/em&gt; traps; in any case no one ever accused the NASB of containing particularly &lt;em&gt;beautiful&lt;/em&gt; English—in poetry or prose!)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-divine-name" class="level3"&gt;
&lt;h3&gt;The Divine Name&lt;/h3&gt;
&lt;p&gt;The HCSB’s handling of the divine name (יהוה) is… strange. The translators chose to supply “Yahweh” in some places but &lt;span class="smcp"&gt;“Lord”&lt;/span&gt; or &lt;span class="smcp"&gt;“God”&lt;/span&gt; in others. They opted to use “Yahweh” anytime the author explicitly refers to the name (שׁמ) of God in the nearest sentences. However, they do not continue to transliterate the name in the &lt;em&gt;follwing&lt;/em&gt; context, even when that would be appropriate. As a result, it is not uncommon for a passage to include &lt;em&gt;both&lt;/em&gt; “Yahweh” and &lt;span class="smcp"&gt;“Lord”&lt;/span&gt;, which muddles things considerably. They also supply “Yahweh” from time to time when “name” is &lt;em&gt;not&lt;/em&gt; in the immediate context.&lt;/p&gt;
&lt;p&gt;This particular approach is, in my view, unhelpful at best. Those who are offended by seeing the divine name in print or hearing it read aloud will be offended. Those who are &lt;em&gt;not&lt;/em&gt; offended and find it helpful to see and hear the divine name directly will only find it some of the time. Moreover, the inconsistency within a given passage can make it even &lt;em&gt;less&lt;/em&gt; clear than in a translation that simply sticks to the small-capitals convention (&lt;span class="smcp"&gt;“Lord”/“God”&lt;/span&gt;). I am generally approve transliterating the name, but consistency is often the most important element for clarity and comprehension.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="miscellaneous-translation-notes" class="level3"&gt;
&lt;h3&gt;Miscellaneous Translation Notes&lt;/h3&gt;
&lt;p&gt;There were a number of other quirks in the translation I thought worth noting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Instead of the more usual “…declares the &lt;span class="smcp"&gt;Lord&lt;/span&gt;” or “…says the &lt;span class="smcp"&gt;Lord&lt;/span&gt;,” the tranlators opted to go with “This is the &lt;span class="smcp"&gt;Lord’s&lt;/span&gt; declaration…” and “This is what the &lt;span class="smcp"&gt;Lord&lt;/span&gt; says….” This is a perfectly defensible translation, but is another case where diverging from the traditional reading, even for more normal English, actually sounds a bit jarring. I never actually adjusted to it, even after weeks of seeing it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I’ve been spending an awful lot of time looking at the prophetic books in Hebrew lately, and I get to eat some crow on this one. Where the HCSB has “this is the &lt;span class="smcp"&gt;Lord’s&lt;/span&gt; declaration”, the original text usually has some that, brought over in an extremely wooden sense, would be “declaration of the &lt;span class="smcp"&gt;Lord&lt;/span&gt;”, so this really is &lt;em&gt;better&lt;/em&gt; than the original—even if it is a bit jarring!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The treatment of units is splendid overall. It is, however, inconsistent. Units of distance, weight, and so on are all translated directly into their modern English equivalents. (This being a very American translation, the units are all Imperial, of course.) Reading miles instead of &lt;em&gt;stadia&lt;/em&gt; and inches or feet instead of &lt;em&gt;cubits&lt;/em&gt; was quite helpful and illuminating. On the other hand, the translators treated money very differently, simply leaving them in the original units. Perhaps they were concerned about currency fluctuations or the vagaries of inflation on the value of money over time. Perhaps there is no better way to handle monetary units, but the inconsistency remained a trifle jarring.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There were a number of passages where the hermeneutical biases of the translators came through clearly. Their rendering of John 3:36, for example, supplies a great deal more than can be justified on the basis of the Greek text alone. The HCSB has:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The one who believes in the Son has eternal life, but the one who refuses to believe in the Son will not see life; instead, the wrath of God remains on him.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The translation the HCSB is certainly one possible interpretation of the text, but that interpretation must be justified on the basis of many other texts; the plain sense of the original is as the ESV has it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whoever believes in the Son has eternal life; whoever does not obey the Son shall not see life, but the wrath of God remains on him.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All translation involves some degree of interpretation, but on the whole the HCSB translators did an admirable job of leaving ambiguities in the original unresolved. That made instances like this one all the more jarring—though, given that the HCSB is more dynamic than not, perhaps unsurprising. (The NIV makes almost exactly the same move as the HCSB here.) Hopefully they will pull it back a bit in future revisions of the text.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The various issues highlighted above notwithstanding, I have enjoyed reading through the HCSB over the last few months. It is a solid, respectable translation and the men and women who worked on it are to be commended for their work. Because of the quirks listed above, however, I do not expect it will become a go-to translation for me. At the end of the day, the HCSB’s “optimal equivalence” boils down to a slightly tighter dynamic equivalence. As thigns stand, though, I would rather use either the NIV or the NLT among the dynamic equivalence translations—both are more consistent translations than the HCSB, and therefore require less explanation when teaching and less mental hoop-jumping when reading. By the same token, the ESV is a very good translation more on the functional end of the spectrum, and certainly checks off those boxes much more effectively than does the HCSB. Again: it is not so much that the HCSB is a &lt;em&gt;poor&lt;/em&gt; translation as that it does not do anything sufficiently &lt;em&gt;better&lt;/em&gt; than other existing translations as to displace them in my current reading and study habits.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, even the NIV2011. On the gendered/inclusive language controversy, I basically follow D. A. Carson in &lt;em&gt;The Inclusive-Language Debate: A Plea for Realism&lt;/em&gt;. The nature of language simply does not allow the kinds of lines that many conservatives (including myself in the past) have been inclined to draw. This becomes immediately apparent when considering translation into either languages without grammatical gender (even as in the case of English’s neuter article: “the” indicates neither masculinity nor femininity, just like the Hebrew הַ, but unlike Greek’s ὁ/ἡ/το trio) or languages with &lt;em&gt;more&lt;/em&gt; grammatical genders. (Similarly, in his discussion of the “gender” of the Holy Spirit, Dan Wallace in his &lt;em&gt;Grammar&lt;/em&gt; argues strongly against taking the gendered pronoun in Jesus’ discussion of the Spirit as indicative of personal gender.) This is simply bad linguistics, and therefore also poor theology. There is much more that could be said here, but in any case I do not have the problems many of my fellow theological conservatives do with the NIV2011.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;This is exactly what I mean about “optimal” equivalence: which of these results is &lt;em&gt;optimal&lt;/em&gt;? Neither, and both! It depends on what you’re going for!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;The fact of the matter is: the meaning of a poem is never so cleanly separable from its form. I’ve written about this—though too briefly—&lt;a href="http://www.chriskrycho.com/2014/mouths-of-poets.html"&gt;before&lt;/a&gt;.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;No Byzantine priority for me! Also, I mean no offense to the KJV translators, who did a truly phenomenal job. I happen to think, though, that &lt;em&gt;they&lt;/em&gt; would be pleased to see the work of translation continue forward, rather than remaining fixed on their particular work.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>The Tablet “Productivity” Problem</title><link href="http://www.chriskrycho.com/2015/the-tablet-productivity-problem.html" rel="alternate"></link><published>2015-02-25T21:35:00-05:00</published><updated>2015-02-25T21:35:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-02-25:/2015/the-tablet-productivity-problem.html</id><summary type="html">&lt;p&gt;I’m thinking this one through out loud. I rather hope that I can take these nascent thoughts and turn them into a more fully-fledged essay over the course of this year, so if you have thoughts, I’d &lt;em&gt;love&lt;/em&gt; to hear them. Hit me up on &lt;a href="https://twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;, &lt;a href="https://alpha.app.net/chriskrycho"&gt;ADN&lt;/a&gt;, or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m thinking this one through out loud. I rather hope that I can take these nascent thoughts and turn them into a more fully-fledged essay over the course of this year, so if you have thoughts, I’d &lt;em&gt;love&lt;/em&gt; to hear them. Hit me up on &lt;a href="https://twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;, &lt;a href="https://alpha.app.net/chriskrycho"&gt;ADN&lt;/a&gt;, or via &lt;a href="mailto:chris@krycho.com"&gt;email&lt;/a&gt;. In the meantime… consider this a rough draft of a larger idea I’m working out.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I saw a &lt;a href="https://jasonirwin.ca/2015/02/24/whats-a-tablet-for/"&gt;post&lt;/a&gt; by internet acquaintance Jason Irwin (&lt;a href="https://alpha.app.net/matigo"&gt;@matigo&lt;/a&gt; on ADN) yesterday about how he doesn’t find tablets especially compelling. There were quite a few things he said in the piece that did &lt;em&gt;not&lt;/em&gt; resonate with me (and even a few suspicions I think are out and out incorrect), but generally on technology things like this I simply say: to each his own. So what follows is not so much a response to Jason’s post as some thoughts inspired by it.&lt;/p&gt;
&lt;p&gt;Jason hit on a meme that’s been extremely common about tablets in general and iPads in particular: that you cannot do real work on them, only “consumption”. What is meant, nearly always, in such discussions, is that it is harder to write, develop software, and other keyboard-intensive activities using an iPad than a traditional laptop or desktop form factor. This is certainly true of &lt;em&gt;those&lt;/em&gt; activities. Even of a few other activities Jason mentions, iPads do &lt;em&gt;very&lt;/em&gt; well.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; But there is another, more important issue here.&lt;/p&gt;
&lt;p&gt;We (quite readonably) tend to define productivity poorly in terms of output. In that sense, there are many categories for which the iPad is &lt;em&gt;not&lt;/em&gt; as capable as a laptop. It is true, for example, that I do not do a lot of writing or software development on my iPad (a retina Mini)—I’ll start drafts of blog posts (part of this was dictated on my iPhone!), and occasionally log into and do administrative work on a server via SSH using an iPad client. That doesn’t mean it isn’t a valuable device for me, though. It simply means that “valuable” and “productive” are not synonyms.&lt;/p&gt;
&lt;p&gt;Less helpfully, however, we also tends to define “value” in terms of “productivity”. People say that iPads are not valuable to them because they do not specifically allow them to be &lt;em&gt;productive&lt;/em&gt; in the sense outlined above… but then, there are a great many valuable things that are not producing content. I use my iPad daily for a wide array of things, and find it enormously preferable to a laptop for nearly all of them. True, many of them are “consumptive”—but since when did that become a bad thing?&lt;/p&gt;
&lt;p&gt;I recognize that the answer may seem obvious against the backdrop of a consumerist culture against which many an anti-consumerism critique has rightly been levied. But think about what we mean by “consumption” in this case. Nearly every day I use my iPad both for reading and for displaying (and for learning) music. To be sure, I also watch the occasional YouTube video, interact on Twitter and App.net, and so on. But the vast majority of what I do with an iPad is best summed up as &lt;em&gt;learning&lt;/em&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Whether it is reading through a few carefully selected RSS feeds in &lt;a href="http://supertop.co/unread/"&gt;Unread&lt;/a&gt;, reading the news in &lt;a href="http://cir.ca"&gt;Circa&lt;/a&gt;,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; working through reading for school in iBooks,&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; perusing the &lt;a href="http://emberjs.com"&gt;EmberJS&lt;/a&gt; docs in preparation for a major project I’ll be starting with the tool in a few months, or reading the Bible every morning, I do a &lt;em&gt;lot&lt;/em&gt; of reading on my iPad. Add in the fact that I use it for music as I practice piano, and I get an awful lot of mileage out of it every day.&lt;/p&gt;
&lt;p&gt;Now, none of this negates Jason’s post in particular. If he doesn’t get that kind of traction out of an iPad, that’s no skin off my back. But I do think that the criticism of devices which are primarily “consumptive”—perhaps implied in Jason’s post; certainly stated outright in many other responses to the iPad—is misplaced. Whether simply for entertainment (joy in the arts is good!) or in reading (joy in the arts &lt;em&gt;or&lt;/em&gt; in self-betterment is good!) or in the myriad other ways that people put the iPad&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; to use that are not making something new, there is value in the kinds of consumption done with it.&lt;/p&gt;
&lt;p&gt;Are there valid critiques to be offered of tablets, including that certain kinds of consumptive habits are problematic? Of course. But reducing things to their productive utility is ethically flawed, and reducing human pursuits to their productive output even more so. It is just fine if &lt;a href="https://alpha.app.net/matigo"&gt;@matigo&lt;/a&gt; isn’t the sort of guy who loves an iPad. It is &lt;em&gt;not&lt;/em&gt; fine if tech pundits want to slam the iPad and other tablets because they have a misanthropic view of human flourishing—and make no mistake, the utilitarian calculus so often levied against tablets is just that. People are more than what they make; their time is valuable even (and sometimes especially) when not producing anything tangible at all.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Notably, his point about keyboards that differ for different applications has been addressed quite thoroughly in that market! Most music apps ship with music-oriented interfaces, &lt;em&gt;not&lt;/em&gt; traditional QUERTY-style keyboards.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, in theory I could do that on another, less expensive device—but I had a Nexus 7 and nothing I have seen about Android tablets since then convinces me the Android tablet ecosystem has meaningfully improved in the last couple years. The experience factor in using things really does matter to me, and iOS gives me an enormously better experience in every category, even with its foibles and flaws, and nowhere more so than in the massively better app ecosystem.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;An app my friend &lt;a href="http://independentclauses.com/"&gt;Stephen Carradini&lt;/a&gt; and I like so much that we did a &lt;a href="http://www.winningslowly.org/2015/01/take-my-money-now/"&gt;whole episode&lt;/a&gt; of &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt; on it!&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;I like ePUB way better than Kindle’s proprietary, and haven’t gotten around to finding a replacement for &lt;a href="http://readmill.com"&gt;Readmill&lt;/a&gt; yet.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;And yes, with plenty of other tablets, too! If you’re a Microsoft Surface person, that’s splendid as well.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>Facebook's "Security" Requirements</title><link href="http://www.chriskrycho.com/2015/facebooks-security-requirements.html" rel="alternate"></link><published>2015-02-21T12:35:00-05:00</published><updated>2015-02-21T12:35:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-02-21:/2015/facebooks-security-requirements.html</id><summary type="html">&lt;p&gt;I went to set up 2-step login (AKA 2-factor authentication, or what Facebook calls “Login Approvals”) on Facebook yesterday morning, and was greeted with this lovely message when I clicked “enable”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your current Firefox settings might make it hard to use Login Approvals. It’s probably because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You sometimes clear …&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I went to set up 2-step login (AKA 2-factor authentication, or what Facebook calls “Login Approvals”) on Facebook yesterday morning, and was greeted with this lovely message when I clicked “enable”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your current Firefox settings might make it hard to use Login Approvals. It’s probably because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You sometimes clear your cookies.&lt;/li&gt;
&lt;li&gt;Your browser is set to automatically clear cookies whenever it closes.&lt;/li&gt;
&lt;li&gt;You use your browser’s “private browsing” or “incognito” mode.&lt;/li&gt;
&lt;li&gt;You’re using a new browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It may take a few days after fixing these issues before you will be able to enable Login Approvals. You also may need to log out and then log in again after fixing these settings for the changes to take effect.&lt;/p&gt;
&lt;p&gt;Visit the Help Center for step-by-step directions on how to fix these settings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I use Firefox for the social media access I do online—and because I don’t like being tracked, I tell Firefox not to remember history and to delete cookies as soon as I close the browser, and I run &lt;a href="https://github.com/gorhill/uBlock"&gt;μBlock&lt;/a&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and &lt;a href="https://disconnect.me/"&gt;Disconnect&lt;/a&gt;.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you attempt to enable 2-step login, Facebook checks your security policy… and &lt;em&gt;will not let you turn it on&lt;/em&gt; if your settings are like mine. They supply the message above, with no option to proceed anyway. Of course, there is no technical issue with using 2-step login with a browser configured this way. I use it for GitHub, Google, my domain registrar, and every other service with 2-step login.&lt;/p&gt;
&lt;p&gt;Facebook probably has two motives here. The better one is user experience: it &lt;em&gt;would&lt;/em&gt; be frustrating if you are a non-tech-savvy user who doesn’t understand the consequences of setting this given the browser settings I have. But of course, if they were primarily just concerned with that, they could give the warning and then let users say, “Go ahead; I know what I’m getting into.” The second, less obvious but almost certainly more important motive from Facebook’s point of view, is to discourage people from using a browser the way I do. They want to be able to monetize my Facebook use better, and this means not just my time on Facebook, but my time all over the web. Facebook wants to know what I’m looking at any time I’m surfing &lt;em&gt;anywhere&lt;/em&gt; so that they can tailor their ads to me.&lt;/p&gt;
&lt;p&gt;I’m not interested in being tracked that way.&lt;/p&gt;
&lt;p&gt;Apparently, Facebook isn’t interested in letting people have actual, modern security unless they’re willing to be tracked that way.&lt;/p&gt;
&lt;p&gt;We have a problem here.&lt;/p&gt;
&lt;p&gt;As it turns out, of course, people like me aren’t particularly valuable customers to Facebook anyway, so they probably don’t mind the fact that they’re losing more and more of our time. But losing that time they are. My use of Facebook is diminishing at an ever-increasing rate, for countless little reasons like this, where Facebook’s ad-driven motivations push them to treat me poorly. Too bad for them.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If anyone tells you that blocking ads is “stealing”, they’re talking up nonsense. The Internet is built in such a way that if nothing else you can always just request the plain text version of a website, and that’s extremely important for many reasons, including accessibility. I &lt;em&gt;choose&lt;/em&gt; to leave ads on for any number of sites I want to support, but at the end of the day it’s every publisher’s choice how theyw ant to make money. If a newspaper supports itself with ads and coupons, I have every right to throw them in the trash without a glance; the same is true online.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, I know this isn’t foolproof and I’m still being tracked. It’s impossible &lt;em&gt;not&lt;/em&gt; to be tracked to some degree or another. What I am doing here is &lt;em&gt;decreasing&lt;/em&gt; the degree to which companies can track me.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>Speak the Truth in Beauty</title><link href="http://www.chriskrycho.com/2015/speak-the-truth-in-beauty.html" rel="alternate"></link><published>2015-02-11T07:00:00-05:00</published><updated>2015-02-11T07:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-02-11:/2015/speak-the-truth-in-beauty.html</id><summary type="html">Link&amp;mdash;my review of Jerram Barrs' Echoes of Eden at Mere Orthodoxy.</summary><content type="html">&lt;p&gt;This is sort of a &lt;a href="http://mereorthodoxy.com/speak-truth-beauty-review-echoes-eden/"&gt;hybrid review and essay&lt;/a&gt;. The review proper concludes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, Echoes of Eden says all the right things. Barrs has provided a healthy, sound theology of the arts, reiterating and synthesizing the helpful work of Schaeffer, Lewis, Tolkien, O’Connor, and Dostoevsky. What is more, his survey of English literature grounds that theology in concrete examples we can follow. This is a solid book.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But there was a bit more to say about this, because…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There was one thing it lacked, though: beauty of its own. As Barrs himself says, “A book that is not well-written, no matter how compelling the story is, will not be reread multiple times” (114). I doubt I will read Echoes of Eden again, because this is true for non-fiction as well. Form matters. It may not be quite true that the way we say things is just as important as what we say—better to say the truth boringly than a lie splendidly—but it comes a close second. The truth is beautiful, and we should always aim to present it beautifully.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think you’ll find the rest interesting! &lt;a href="http://mereorthodoxy.com/speak-truth-beauty-review-echoes-eden/"&gt;Take a look.&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A note: I actually meant to have this reviewed about 18 months ago. I got buried in Greek III and it totally slipped my mind! Gladly, the folks at Crossway who sent me the book were understanding.&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>The State of Our Family in Early 2015</title><link href="http://www.chriskrycho.com/2015/early-2015-family.html" rel="alternate"></link><published>2015-02-10T20:30:00-05:00</published><updated>2015-02-10T20:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-02-10:/2015/early-2015-family.html</id><summary type="html">&lt;p&gt;It has been a &lt;em&gt;long&lt;/em&gt; time since I wrote a family update here, and I skipped the Christmas letter this year because I was exhausted. I resolved at the beginning of the year to write at least one update every month, though. I want these updates here for &lt;em&gt;myself&lt;/em&gt;, if …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It has been a &lt;em&gt;long&lt;/em&gt; time since I wrote a family update here, and I skipped the Christmas letter this year because I was exhausted. I resolved at the beginning of the year to write at least one update every month, though. I want these updates here for &lt;em&gt;myself&lt;/em&gt;, if for no other reason. (Then, of course, I promptly missed January, but this is counting for that; there will be another post here at the end of the month.)&lt;/p&gt;
&lt;p&gt;What have we been up to, you ask? Well, quite a lot! Since the last time I wrote a blog post, we had a baby, who is now crawling around. (If you’re reading this, you probably already know that, of course.) Ellie is talking, constantly practicing saying things the right way and asking the names of things; Kate is scooting around the floor exploring everything and is increasingly verbal herself.&lt;/p&gt;
&lt;p&gt;They love playing together. Ellie and Kate are good friends—a while back Jaimie heard Ellie quietly talking to Katie in the back seat of the car, repeating, “You’re my best friend, Kate.” Sometimes when Ellie gives Kate a hug and a kiss goodnight every night, Kate goes into the most adorable squeals of delight. Indeed, no one elicits those squeals as much as Ellie. In addition to her scooting around the floor, Kate is happily eating solid foods—and the girl &lt;em&gt;loves&lt;/em&gt; her food. Today I put her in her high chair and she started laughing as I put the tray in front of her. She often thumps the tray, the table, or the floor to express her joy. And last but not least, this little gal is &lt;em&gt;strong&lt;/em&gt;. Her favorite time is getting in a bouncer and jumping for as long as we will let her.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/girls-games.jpg" title="My ladies playing Lego Star Wars"/&gt;
&lt;figcaption&gt;
My ladies playing &lt;i&gt;Lego Star Wars&lt;/i&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We have been teaching Ellie a lot. Jaimie has slowly started working through the ABCs with her. She can count to 5, and she knows her way to 10, but sometimes gets sidetracked along the way. She is learning her colors and spent a while defaulting to calling everything “pink”… except for her favorite &lt;em&gt;purple&lt;/em&gt; dress. In the last month, she has started being able to identify the colors more reliably, along with lots of shapes. She loves cars and trucks and especially buses and fire trucks. She sings to herself and dances all the time. She loves building with blocks. She is learning to say “please” and “thank you”—learning, in this case, not because she doesn’t know how but because she has started &lt;em&gt;forgetting&lt;/em&gt;. She is learning to pray and to sing to God and learning the answer to simple questions like, “Who made you, Ellie?”&lt;/p&gt;
&lt;p&gt;Jaimie has continued to write off and on, though the first many months we had Kate it was much spottier than it had been. She’s working on secret projects that are making her happy, and that makes me happy.&lt;/p&gt;
&lt;p&gt;As for why she didn’t get as much time, I was &lt;em&gt;busy&lt;/em&gt; last semester. I picked up a second contract, building the new &lt;a href="//holybible.com"&gt;HolyBible.com&lt;/a&gt;, and between that and my ongoing contract work and my one class, I pulled a lot of 50–60 hour weeks. That’s not particularly an experience we are keen to repeat, but it was the right call at the time: we were able to save up the money to fill up our six-month emergency fund and to pay for the rest of seminary. This semester is going a bit easier: I am taking Hebrew III and Baptist History and working ~30 hours a week instead of ~50–55. I &lt;em&gt;love&lt;/em&gt; my language classes; without a doubt Hebrew III and Greek III have been my very favorite classes since I started seminary.&lt;/p&gt;
&lt;p&gt;I ran another half marathon in November, and set a PR at 1:25:37—a 6:32/mile pace. I was super happy with that outcome, and I plan to run the same race again for the third year in a row this coming fall, Lord willing. In the meantime, I have started swimming and cycling regularly with the aim of completing my first triathlon early this summer. (I’m going to stick to a short “sprint” tri to start, and work up from there.) While I love running, I would like to have the use of my joints in twenty (and forty, and sixty) years, and accordingly I need to make sure I do not keep putting over 1,000 miles a year on my legs. I have been going to a spinning class to get my legs in better cycling shape for the last month (and the last two weeks Jaimie has come with me!). We have also been doing a Pilates class weekly; my back needs to be a lot stronger and my legs a lot looser, and that is helping quite a bit.&lt;/p&gt;
&lt;p&gt;We continue to be extremely happy in our church here, FBC Durham. God has used our church to encourage and challenge us in a wide variety of ways—too many (and perhaps in many cases too subtle) even to summarize. We are excited to see what the years ahead hold for us there, as the church itself continues to flourish and grow and we seek opportunities to continue serving and building up this particular outpost of the body of Christ.&lt;/p&gt;
&lt;p&gt;In short, life is &lt;em&gt;good&lt;/em&gt;. It is not perfect, of course; I long for Jesus’ return and the New Heavens and New Earth more and more all the time. But we see God’s faithfulness and goodness in the hard months no less than in the easy ones. We see the Spirit working in our hearts to make us more like Christ, and it is good.&lt;/p&gt;
&lt;p&gt;I could go on, but a thousand words is enough. More again, and sooner than the last gap!&lt;/p&gt;
</content><category term="[family"></category><category term="Ellie"></category><category term="Kate"></category><category term="Jaimie]"></category></entry><entry><title>The Joy of Good Tools</title><link href="http://www.chriskrycho.com/2015/joy-good-tools.html" rel="alternate"></link><published>2015-01-09T18:00:00-05:00</published><updated>2015-01-09T18:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-01-09:/2015/joy-good-tools.html</id><summary type="html">I started out with a post on being willing to pay for GitHub. I ended up with a meditation on vocation and delight. It's quite the journey!</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;Note: This started out as a &lt;a href="https://alpha.app.net/chriskrycho/post/47820144"&gt;series of posts on App.net&lt;/a&gt;, but as I realized that it was growing a bit, I decided to &lt;a href="/2014/a-few-theses-on-blogging.html"&gt;take my own advice&lt;/a&gt; and turn it into a short blog post. (The first four paragraphs of this post are the same as the posts that spawned it.) And then, as so often happens with my writing, it rather took on a life of its own. So much for short.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;After wrestling with Bitbucket issues again all day, I think I’ve finally hit the breaking point. Time to go ahead and drop the money on GitHub and migrate my private repos there. (Yes, GitLab is neat, but tool integrations matter, too.)&lt;/p&gt;
&lt;p&gt;I think I’m also probably going to spring for a small subscription to Pivotal Tracker. It’s cheaper to do GitHub+PivotalTracker at my scale than to host GitLab and run YouTrack on a VPS. And that’s &lt;em&gt;not&lt;/em&gt; counting my time.&lt;/p&gt;
&lt;p&gt;The big thing with Pivotal is that I &lt;em&gt;need&lt;/em&gt; the ability to estimate more effectively even than something like Trello affords (and I don’t want to spend time wrangling with Chrome plugins), and it gives me that. Totally worth the cost in saved pain.&lt;/p&gt;
&lt;p&gt;And as for GitHub as compared to the free GitLab… well, honestly, the F/OSS-copycat model bothers me on a lot of levels. The fact that their strategy is “copy GitHub as closely as possible, and charge for it” is not my idea of “winning slowly”.&lt;/p&gt;
&lt;p&gt;(“Winning slowly” is more than just the name of my &lt;a href="//www.winningslowly.org"&gt;podcast&lt;/a&gt;. In fact, it’s the opposite: we named the podcast that because it’s one of the core commitments in our lives.)&lt;/p&gt;
&lt;p&gt;So I’m going to pay for Pivotal and GitHub. My time is worth something, and the quality of the tools I use matters, too. Ongoing irritation and frustration adds up over time. Good tools can make us happier. Bad tools can make work more frustrating than it needs to be. Given just how frustrating work can be anyway, the last thing in the world I want to do is unnecessarily spend my time being even more frustrated by my tools. And you know what? $7/month for each of those tools is absolutely worth more than the frustration of wrestling with tools that do the job less well.&lt;/p&gt;
&lt;p&gt;I’m actually really excited by this. Pivotal Tracker will help me avoid making the painful mistake of underestimation in the future, by helping me see how long things actually take and giving me a way to plan out major projects with that data immediately available. GitHub will be simultaenously more functional and much lovelier than Bitbucket—no strategy tax holding it back!—and will be much nicer to use.&lt;/p&gt;
&lt;p&gt;At the end of the day, it comes down to this: I’m happy to pay for good tools that make my work more enjoyable.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;To my surprise and amusement, this leads me to a closely related point I had been writing up in a separate blog post: the value of tools that &lt;em&gt;delight&lt;/em&gt;. It is not merely that bad tools make work unpleasant. Good tools can make work a &lt;em&gt;joy&lt;/em&gt;. Indeed, because my vocations is such a significant part of my life, few things bring me as much simple pleasure as a tool that does its job well, is pleasant to use, and is beautiful, all at once.&lt;/p&gt;
&lt;p&gt;The latest example of this for me is &lt;a href="//www.neat.io/bee/index.html"&gt;Bee&lt;/a&gt;, a tool designed to make working with issue trackers like JIRA, GitHub Issues, and FogBugz easier and more pleasant. I use JIRA for one of my long-term contracts—I actually set it up for the company—and I have a love-hate relationship with it. JIRA’s power is great, but the web interface is slow and cluttered.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have used other desktop tools with JIRA before, and they were even worse than the web interface. I stumbled across Bee the other day (I cannot even remember how!), decided to try it out, and fell in love. It is simple, fast, and &lt;em&gt;elegant&lt;/em&gt;. That is a killer combination. I have been using it daily for over a week, and strange though it might be to say of a desktop client for issue trackers, I get genuine pleasure out of using it. (Yes, I know: that is a bit strange.)&lt;/p&gt;
&lt;p&gt;I have the same experience with a number of other tools I use—&lt;a href="//www.git-tower.com"&gt;Tower&lt;/a&gt;, &lt;a href="//bywordapp.com"&gt;Byword&lt;/a&gt;, and &lt;a href="//www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; to name just a few. This very post is written in Byword, and I’m &lt;em&gt;happy&lt;/em&gt; about it. I wish I felt that way about every tool I use.&lt;/p&gt;
&lt;p&gt;And this goes beyond software. I have had the same experience driving a car. The Mazda3 I drove in and after college was a delight. The MUV&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; we drive right now is sufficient. The Chevy Malibu we rented for driving to and from Texas in December was &lt;em&gt;irritating&lt;/em&gt;, with an inordinate number of small failures to consider how the thing would actually be used. I would buy another Mazda3 in a heartbeat; I would contentedly take another Lexus RX300-alike; I would avoid a Chevy Malibu like the plague.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Every&lt;/em&gt; category of tool is like this.&lt;/p&gt;
&lt;p&gt;The difference between a poor or mediocre tool and a good tool can make the difference between frustration and satisfaction. The difference between a good tool and a &lt;em&gt;great&lt;/em&gt; tool can make the difference between satisfaction and delight. That inspires me: it makes me want to make things so that they do more than &lt;em&gt;suffice&lt;/em&gt;—so that they &lt;em&gt;excel&lt;/em&gt;, so that they delight and energize their audience. Whether that is someone using a web application I write or someone listening to a piece of music I composed, I want them to experience more than good-enough. I want them to feel joy.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is something profound here, I think, something that goes even deeper than just the experience of being happy enough with a good tool to pay money to use it. I think human beings are meant for that profound joy—meant for it in every breath. That these kinds of delights are rare, and so often marred even at their best by little failures, is a mark of the imperfection—and, in human terms at least, the &lt;em&gt;imperfectibility&lt;/em&gt;—of the world in which we live. But the fact that such moments will be rare until the eschaton neither undoes nor diminishes the imperative to strive after them—especially for those of us who, as Christians, affirm the goodness and the &lt;em&gt;telos&lt;/em&gt; of the created world. Quite the contrary. We have a responsibility and a charge as subcreators always to be able to say of the work we have done, “It is good.”&lt;/p&gt;
&lt;p&gt;I am not there yet. I hope very much, though, that the work I do this year will be—for at least one person—a little sip from that deep well of delight. Whether I succeed or no, at least the bar is set where it ought to be.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Atlassian’s designers seem to be shooting for the kind of “flat” minimalism that is in right now… and missing the mark entirely. &lt;em&gt;All&lt;/em&gt; of their tools are a cluttered mess in the UI/X department.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;A “Mom Utility Vehicle”, my wry term for “SUV”-type vehicles sitting on standard car chasses.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[software development"></category><category term="design"></category><category term="joy]"></category></entry><entry><title>Public-ish Plans</title><link href="http://www.chriskrycho.com/2015/public-ish-plans.html" rel="alternate"></link><published>2015-01-02T20:15:00-05:00</published><updated>2015-01-02T20:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2015-01-02:/2015/public-ish-plans.html</id><summary type="html">A totally informal list of things I kind of hope to get done in public in 2015.</summary><content type="html">&lt;p&gt;I have not (yet) made a formal list of goals for 2015, though I think I may do so on Sunday evening. While New Years’ resolutions can be silly and get us in trouble (when we set unrealistic goals, or unhelpful goals), the turning of the year can also be a helpful time to evaluate the way we spend our time and the things we want to accomplish.&lt;/p&gt;
&lt;p&gt;What follows is a list of public-ish things I am &lt;em&gt;hoping&lt;/em&gt; to manage in 2015, in no particular order. Come the end of the year, I will Lord willing look back and see which of these I was able to pull off!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Publish at least two seasons of &lt;a href="//www.winningslowly.org"&gt;Winning Slowly&lt;/a&gt; with &lt;a href="//stephencarradini.com"&gt;Stephen Carradini&lt;/a&gt; just as we did last year—but better.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get the site for Winning Slowly updated so that it paginates between seasons! This means writing an extension for &lt;a href="//docs.getpelican.com/en/3.5.0/"&gt;Pelican&lt;/a&gt; that can paginate on something besides page count. An excuse to write Python? I call that winning.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Migrate Jaimie’s &lt;a href="//jaimiekrycho.com"&gt;Jaimie’s professional writing website&lt;/a&gt; from WordPress to &lt;a href="//ghost.org"&gt;Ghost&lt;/a&gt;. (Maybe do something similar with her current &lt;a href="//jaimiedawn.blogspot.com"&gt;personal site&lt;/a&gt;, which runs on Blogger. Yuck.) I’ve gotten a bit of a start on that already, and I hope to knock it out sooner rather than later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get to a point where I’m hosting all my own sites on my own DigitalOcean droplet (or similar). I’ve been moving that direction slowly but steadily anyway—whereas I started and ran for a long time on simple shared hosting, I’ve been using &lt;a href="https://www.webfaction.com/?aid=67929"&gt;Webfaction&lt;/a&gt; for a good chunk of the past year, and now am pretty well ready to take the plunge this year into just running my own server. No skin off their backs; Webfaction has been great, as was &lt;a href="https://billing.stablehost.com/aff.php?aff=319"&gt;StableHost&lt;/a&gt; before them. I’m just ready to be in control (even with the bit of extra maintenance that entails).&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write at least three minutes of music, and post it to my &lt;a href="//soundcloud.com/chriskrycho"&gt;SoundCloud&lt;/a&gt; account. Preferably five minutes, but at least three.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write some poetry.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a substantive essay and post it at least once a month.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Post at least a half dozen book reviews (which, among other things, means reading at least a half dozen books worth reviewing). These can be fiction or non-fiction. Personally, I’d like to get everything from Dostoevsky to Schreiner in there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a picture to my &lt;a href="/about"&gt;About&lt;/a&gt; page!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Post a &lt;a href="/family"&gt;#family&lt;/a&gt; update at least once a month. It’ll be good for &lt;em&gt;me&lt;/em&gt;, just to have a better way of tracking what’s going on with our little gals, and I know my family would enjoy it, too.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In sum, I’d like to be doing &lt;em&gt;something&lt;/em&gt; in nearly every public-facing category in which I’m interested. Maybe it won’t be a lot, but keeping my musical skills doing matters to me. Keeping my brain engaged on a wide variety of topics matters to me. Keeping my writing skills sharp matters to me. I cannot &lt;em&gt;excel&lt;/em&gt; at all of those things, certainly—especially not if I wish to be a good husband and father! But keeping them active means keeping them from further atrophying, and that is something, at least. It will hopefully leave them more available to me for times in the future when I am able to dedicate more time to them.&lt;/p&gt;
&lt;p&gt;If 2014 and 2013 were both years in which I focused primarily on software—and all to the good!—then I hope 2015 will be a year in which I am able to broaden out again and focus on a wider variety of things!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;You’ll note that there really aren’t any purely personal goals on this list. Not to worry: I have them, and I intend to formalize them in the next couple of days. But one of the things I have learned over the many years I have been blogging is that not everything needs to be public. Some things can be; indeed, some &lt;em&gt;should&lt;/em&gt; be. Some things &lt;em&gt;may&lt;/em&gt; be public but &lt;em&gt;need&lt;/em&gt; not, and yet others &lt;em&gt;should not&lt;/em&gt; be public. Right now, I am choosing to leave quite a few things in the “may be need not” category private. (This direction, I can always change my mind later. It’s essentially impossible to do the opposite in the internet era.)&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;&lt;em&gt;Slowly&lt;/em&gt;. Beat you to it.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Note: those are both affiliate links; they’ll give me a slight kickback. For StableHost, you should also use the code &lt;code&gt;krycho50percent&lt;/code&gt; to get 50% off! I’d love it if you used it if you decide to sign up for either of them.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[listicles]"></category></entry><entry><title>Startlement</title><link href="http://www.chriskrycho.com/2014/startlement.html" rel="alternate"></link><published>2014-12-29T20:00:00-05:00</published><updated>2014-12-29T20:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-12-29:/2014/startlement.html</id><summary type="html">The Incarnation is the most surprising of all the miracles. All miracles are a surprise, but this one startles more than any other.</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;This was originally published as part of James Metelak’s 2015 &lt;a href="http://headpiecestraw.blogspot.com/"&gt;25 Days of Christmas Project&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;“Startling”: this is the best word I can find for the doctrine of the Incarnation. It is the most surprising of all the miracles. Every miracle is a surprise, of course; it would not be a miracle otherwise. Still, there is something uniquely and specially striking about this one.&lt;/p&gt;
&lt;p&gt;God became a man.&lt;/p&gt;
&lt;p&gt;C. S. Lewis called this the central miracle of the Christian faith, the miracle on which all others depend: if this one happened, then of course all the others are possible. What is feeding a few thousand people with five loaves and two fish compared to the transcendent One becoming immanent? What is healing a centurion’s dead servant, set next to the Creator squealing at his mother’s breast? What is walking on water or calming a storm, for the God who took up the image of the image of God? Not to make little of these miracles—they are in no way trivial or light. But the Incarnation stands apart.&lt;/p&gt;
&lt;p&gt;Even the resurrection of the Son of God is less surprising than his birth. Now, we must never minimize Jesus’ resurrection. It is the means of our justification and the basis all our hope. It is the rock beneath our joy in the long and painful days that stand between us and our own restoration. Its enormity remains. Still, it seems to me less astonishing than the Incarnation. Death has always been an interloper; its reign was always temporary. Once God had taken up this frail form, it seems almost unthinkable that he would &lt;em&gt;fail&lt;/em&gt; to raise it from the dead. But the Creator-God wrapping himself in creature-hood was never something we could have guessed.&lt;/p&gt;
&lt;p&gt;Look closer. The wonders—the strange, delightful paradoxes—mount up.&lt;/p&gt;
&lt;p&gt;God does not change. The Father and the Son and the Spirit are as ever they have been: perfectly united, delighting in each other, needless and complete. And yet, in that marvelous moment in Mary’s womb, there was a permanent change. The Son was then, is now, and will forever be, a human being. He never ceased to be eternal God—not for a moment—but now he is also everlasting man. It was the first and only beginning in the being of God.&lt;/p&gt;
&lt;p&gt;God is spirit; he dwells in unapproachable light; no eye can see him and no hand touch him. Jesus the Messiah, though, is a human being through and through. He is David’s descendant, and Judah’s, and Abraham’s, and Noah’s, and Adam’s. He is not invisible at all. Nor is he merely a hologram, an image without the substance of the thing. Other hands touched him, in hope and in hate. His own hands grew blisters when he first learned to use a hammer at his father’s side, touched in healing and forgiveness, were pierced with real nails, still had holes Thomas could when he was raised. His feet had calluses from walking the dusty roads between Jerusalem and Judea.&lt;/p&gt;
&lt;p&gt;The Triune Godhead is not taught and does increase in understanding. All knowledge is his from forever to forever. Yet Jesus learned. He grew in wisdom and stature and favor with God and man; he learned obedience through what he suffered and so became perfect. The immortal, invisible, only wise God took up a mortal body that died, displayed prominently for all to see, in the supreme act of foolishness as the world judges such things. When it was finished, he did not cast away the body as so much detritus. He kept it and raised it gloriously new, beautiful and undying.&lt;/p&gt;
&lt;p&gt;God needs nothing. He is totally, completely self-sufficient. Everything that has ever existed or ever will exist, he created, and without his sustaining power everything would immediately cease to exist. He does not sleep, and never needs to eat. The Father worked through the Son to create all things, and it is in the Son that all things hold together. Yet when he walked this earth he ate and slept and had to put away his body’s waste. It was not the appearance but the reality of need. He was both a little boy getting thirsty as he ran around the hot streets of Egypt, and the one who ensures the water that would refresh him continued to exist.&lt;/p&gt;
&lt;p&gt;God is holy. He is unassailably good, perfectly just, unfailingly righteous—and Jesus’ family history is a series of portraits of human sin: an adulterous murderer, a Canaanite woman of ill repute, a man who slept with his daughter-in-law, and more than a few who worshipped carved-up rocks and trees instead of God. We were made in the image of God, the mirror of divinity, but the humanity the Son took up was shattered and dirtied beyond recognition. Theh body the Son took was not one crafted not to share our weaknesses; it was like ours in every way. &lt;em&gt;This&lt;/em&gt; flesh he baptized, and this flesh divinized. We have come to share truly in the nature of God because God came and shared truly all the nature of man.&lt;/p&gt;
&lt;p&gt;The Creator joined with his own being a created, broken thing. Of course every sad thing must now begin to come untrue. If that restoration comes slower than we might hope, we can sense its inevitability nonetheless, like slow-growing vines spreading cracks in some great edifice. The walls will fall—maybe not today, and maybe not tomorrow, but they will fall. Human being, has been joined once more to divinity, as it was meant to be from the beginning. Someday we will be right again—maybe not today, and maybe not tomorrow, but we will be right again.&lt;/p&gt;
&lt;p&gt;Every miracle is a surprise, but the Incarnation of the Son of God astounds us at every turn, until it makes every other surprise seem all-but-inevitable. When unchanging God has undergone a permanent change, invisible God has become forever visible, unneeding God has experienced need, unlearning God has learned, immortal God has come to die in a mortal body—what does “impossible” even mean?&lt;/p&gt;
&lt;p&gt;The Word became flesh and dwelt among us. Old things are gone. All things are new. Glory to God in the highest.&lt;/p&gt;
</content></entry><entry><title>On the Incarnation</title><link href="http://www.chriskrycho.com/2014/on-the-incarnation.html" rel="alternate"></link><published>2014-12-25T11:45:00-05:00</published><updated>2014-12-25T11:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-12-25:/2014/on-the-incarnation.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;For as when a figure painted on wood has been soiled by dirt from outside, it is necessary for him whose figure it is to come again, so that the image can be renewed on the same material—because of his portrait even the material on which it is painted …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;For as when a figure painted on wood has been soiled by dirt from outside, it is necessary for him whose figure it is to come again, so that the image can be renewed on the same material—because of his portrait even the material on which it is painted is not cast aside, but the portrait is reinscribed on it. In the same way the all-holy Son of the Father, being the Image of the Father, came to our place to renew the human being made according to himself, and to find him, as one lost, through the forgiveness, as himself says in the Gospels, “I came to seek and save the lost” (Lk 19.10)…. So, rightly wishing to help human beings, he sojourned as a human being, taking to himself a body like theirs and from below—I mean through the works of the body—that those not wishing to know him from his providence and governance of the universe, from the works done through the body might know the Word of God in the body, and through him the Father….&lt;/p&gt;
&lt;p&gt;Now then, if they ask why he did not appear through other more noble parts of creation, or use some nobler instrument, as the sun or moon or stars or fire or air, but merely a human being, let them know that the Lord came not to be put on display but to heal and to teach those who were suffering. One being put on display only needs to appear and dazzle the beholders; but one who heals and teaches does not simply sojourn, but is of service to those in need and appears as those who need him can bear, lest by exceeding the need of those who suffer he trouble the very ones in need and the manifestation of the divine be of no benefit to them….&lt;/p&gt;
&lt;p&gt;Properly, therefore, the Word of God took a body and used a human instrument, in order to give life to the body and in order that, just as he is known in creation by his works, so also he might act in a human being, and show himself everywhere, leaving nothing barren of his divinity and knowledge. Again, I repeat, resuming what we said before, that the Savior did this in order that as he fills everything everywhere by his presence, so also he might fill all things with the knowledge of himself, as the divine scriptures say, ‘The whole earth was filled with the knowledge of God’ (Isa 11.9).&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="[quotes]"></category></entry><entry><title>Boosting My Productivity</title><link href="http://www.chriskrycho.com/2014/boosting-my-productivity.html" rel="alternate"></link><published>2014-12-18T08:05:00-05:00</published><updated>2014-12-18T08:05:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-12-18:/2014/boosting-my-productivity.html</id><summary type="html">This semester, I needed to get productive, and I did. Here's how. (To-do lists, Inbox Zero, and pomodoros!)
</summary><content type="html">&lt;p&gt;This fall, I have had a lot on my plate: building HolyBible.com, continuing to work for Quest Consultants, and doing a pastoral ministry internship. I needed to be more productive—a lot more. Happily, I have been, and it only took three small changes.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section id="use-a-to-do-list" class="level2"&gt;
&lt;h2&gt;Use a To-Do List&lt;/h2&gt;
&lt;p&gt;Making a list of items to accomplish has been incredibly helpful. I started using &lt;a href="https://www.omnigroup.com/omnifocus/"&gt;OmniFocus&lt;/a&gt; in August for class due dates and any work tasks not tracked in other ways.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; At that point, I organized everything—a bit too much, actually. Over the last couple months, I took some good advice I have seen in a number of places:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not over-organize. Most tasks can go in a simple inbox.&lt;/li&gt;
&lt;li&gt;Hit your due dates. Making it a habit to hit every due date will help you not to miss important tasks.&lt;/li&gt;
&lt;li&gt;Do not put due dates on things that do not need them. You will eventually stop paying attention to them—and also to the due dates that &lt;em&gt;do&lt;/em&gt; matter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I try to knock out a few small things from my Inbox every day, and hit all the due dates I set for myself. I am missing fewer things, getting more things done, and getting them done sooner than I did before. I like my app, but I know people who have just used an old-fashioned planner. The trick is to find a strategy that works for you.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="email-is-not-a-to-do-list" class="level2"&gt;
&lt;h2&gt;Email Is &lt;em&gt;Not&lt;/em&gt; A To-Do List&lt;/h2&gt;
&lt;p&gt;At some point, I got in the habit of using my email as a to-do list. In theory, seeing a list of unanswered emails every day should have motivated me to respond to them. In reality, they just sat there and slowly piled up. At best, they nagged at me. At worst, I basically forgot them.&lt;/p&gt;
&lt;p&gt;When I started using OmniFocus, I killed this habit. Now I make a task for anything I need to act on, and I delete or archive everything else.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; If the task is time-sensitive, I put a due date on it; otherwise, my third rule above applies. I also have a repeating task reminding me to empty my inbox at the end of each day (“Inbox Zero”). Having an empty inbox at the end of every day removes a certain amount of mental baggage: I have a task for everything I &lt;em&gt;need&lt;/em&gt; to act on.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="take-breaks" class="level2"&gt;
&lt;h2&gt;Take breaks&lt;/h2&gt;
&lt;p&gt;Finally, I have started using the &lt;a href="http://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;“pomodoro”&lt;/a&gt; technique. The basic approach is to work steadily for 25 minutes, then take a 5 minute break.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; After four such cycles, I take a slightly longer break—usually 15 minutes. On each break, I walk around and do something unrelated to whatever I am working on. I also write down a brief summary of what I did on that cycle.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; There is nothing complicated about this: I just use a simple timer to track the work and break cycles.&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; I have seen a &lt;em&gt;dramatic&lt;/em&gt; improvement in my ability to sustain my concentration on my tasks throughout the day since I started.&lt;/p&gt;
&lt;p&gt;There are a few reasons for that improvement. First, I have dedicated break times, so I know that I can go check social media, read tech and news sites, etc. &lt;em&gt;later&lt;/em&gt;. That makes it easier to concentrate on work for the blocks in between; the distractions can wait. Second, it puts a limit on those break times. We have all been surprised to find we have lost an hour reading online; using a timer helps prevent that. Third, getting up and moving around helps keep my brain active—I can tell that the movement considerably improves my alertness and concentration.&lt;/p&gt;
&lt;p&gt;These breaks have other benefits, too. There is mounting evidence that sitting all day is terrible for our health. Even exercising as much as I do &lt;a href="http://www.npr.org/2011/04/25/135575490/sitting-all-day-worse-for-you-than-you-might-think" title="Sitting All Day: Worse For You Than You Might Think"&gt;cannot fully counteract&lt;/a&gt; a sedentary lifestyle. However, there is also evidence that getting up and moving on a regular basis &lt;em&gt;does&lt;/em&gt; help. Walking briskly, I usually manage a fifth or a quarter of a mile on a five-minute break. That adds up over the course of a day: if I am disciplined about walking on my breaks, I regularly walk 2–3 miles in a day, even with lunch and other non-walking breaks in the mix.&lt;/p&gt;
&lt;p&gt;I have also found the breaks spiritually helpful. One of the requirements for my pastoral ministry internship was to memorize Ephesians. Five-minute breaks are &lt;em&gt;perfect&lt;/em&gt; for memorizing and reviewing Scripture, so I was able to be productive on those breaks, even while letting my brain relax from my other work. It is similarly useful for dedicated times of prayer throughout the day. The combination of scripture memory and prayer has been invaluable in combatting sin and stirring up my affections for Christ.&lt;/p&gt;
&lt;p&gt;In short, I get a triple benefit by doing pomodoros. I am more productive when I am working, my body will remain healthier because I am less sedentary, and I am growing in holiness and intimacy with God. Of all the changes I made this semester, incorporating pomodoros into my day has been the most important, and I plan to make it a regular part of my life henceforth.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This is just what I do. It may not work for you. It may even drive you crazy.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I.e., things not covered by JIRA, Trello, Bitbucket issues, etc.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;While &lt;a href="https://www.omnigroup.com/omnifocus/"&gt;OmniFocus&lt;/a&gt; suits me, I would recommend &lt;a href="https://en.todoist.com/"&gt;Todoist&lt;/a&gt; to most people instead: it is less expensive and easier to use, and while it does not do &lt;em&gt;everything&lt;/em&gt; OmniFocus does, it can easily do everything most people need.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;I archive order confirmations, messages from friends, and work conversations, and delete everything else.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Why the 25/5 pattern? That seems to be a limit in human cognition; it lines up closely with research on student attention spans in the classroom.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;This helps me see what I have done over the course of a day and gives me a sense of progress. It is also extremely useful when writing up a weekly report for an employer.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;I have used &lt;a href="http://www.tomighty.org/"&gt;Tomighty&lt;/a&gt; and &lt;a href="https://itunes.apple.com/us/app/pomodoro-one/id907364780?mt=12"&gt;Pomodoro One&lt;/a&gt;, which are both free and work well. The app is not the point, though: an old-fashioned kitchen timer will do just as well.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="email"></category><category term="inbox zero"></category><category term="productivity"></category><category term="pomodoro"></category></entry><entry><title>Be Holy!</title><link href="http://www.chriskrycho.com/2014/be-holy.html" rel="alternate"></link><published>2014-12-10T12:00:00-05:00</published><updated>2014-12-10T12:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-12-10:/2014/be-holy.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;I would like to preface the following review by noting that Andy Davis is not just any author, and indeed not just any pastor. He is one of &lt;em&gt;my&lt;/em&gt; pastors. This makes the task of writing a critical book review somewhat strange. On the one hand, I wanted to write …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I would like to preface the following review by noting that Andy Davis is not just any author, and indeed not just any pastor. He is one of &lt;em&gt;my&lt;/em&gt; pastors. This makes the task of writing a critical book review somewhat strange. On the one hand, I wanted to write this review as I would any such. On the other hand, I wanted to take care to show respect to a man whom God has used to shepherd me and my family for the past two years since we moved to North Carolina, and whom I regard very highly for his faithfulness in serving the church gathered as First Baptist Church of Durham. I hope I have struck the balance appropriately. And as I hope will become clear, though there were a few places where this book could be stronger, it is nonetheless extraordinarily valuable. I have been challenged and indeed have grown in holiness because of having read it. I commend it to you.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;An Infinite Journey: Growing toward Christlikeness&lt;/em&gt;, by Andrew M. Davis, Greenville: Ambassador International, 2014, 480 pages.&lt;/p&gt;
&lt;section id="overview" class="level2"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Andrew Davis’ &lt;em&gt;An Infinite Journey&lt;/em&gt; is a careful, thorough, heavy exploration of the doctrine and practice of sanctification in the Christian life. Davis, the long-time pastor of First Baptist Church in Durham, North Carolina and an adjunct professor at nearby Southeastern Baptist Theological Seminary, has clearly dedicated considerable time and consideration to the topic of holiness and growth in the Christian life, and this consideration is on display throughout what is ultimately a very helpful book.&lt;/p&gt;
&lt;p&gt;Davis begins by introducing the concepts which permeate the rest of the book: the saving work of God in Christ and the Christian’s lasting dependence on the Holy Spirit. Perhaps surprisingly (at least to the casual reader), he opens not with the topic of sanctification, but with justification, arguing that all real Christian growth must be predicated on a right understanding of the gospel. Thus, he spends some time tracing out the story of salvation, culminating in Christ’s atoning death on the cross and resurrection, and his institution of the church and sending the Holy Spirit to save and then shape the internal lives of Christians throughout the ages. He further argues that all Christians are involved in two “infinite journeys”—the external journey of evangelism and discipleship, and the internal journey of growth in holiness. Both, he notes, are essential for the health of the Christian: to be deficient in either is to demonstrate either ignorance or hard-heartedness toward the things of God.&lt;/p&gt;
&lt;p&gt;After this introduction, Davis turns to a map of the second of these journeys: the internal path of growing Christ-likeness. His thesis is that sanctification is a four-part process, involving a continuous sequence of knowledge, faith, character, and action, each feeding into the next. Knowledge of God produces faith; increasing faith produces Christlike character; a more Christlike character results in more Godward actions; and those Godward actions in turn lead to a greater knowledge of God himself. Davis dedicates a section of the book to each of these ideas, examining in detail Scriptural support for the concept and then examples of the element in the lives of figures in Scripture, especially Christ. Finally, he turns to a section dedicated to application, looking at the knowledge-faith-character-action cycle as a whole in both Scripture and a variety of day-to-day scenarios.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="analysis" class="level2"&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;Davis’ treatment of the doctrines of sanctification is thorough and compelling, most of all because it is drenched in Scripture. Early in the book, Davis explicitly spells out his commitment to the centrality, sufficiency, and authority of Scripture, and the text of the book backs this up. It is common to hear authors affirm the importance of Scripture; it is rare to see it so born out so clearly in their writing. Even apart from the explicit references on nearly every page, the text bears the unmistakable imprint of Davis’ own practice of memorizing books of the Bible. Allusions, near quotes, and implicit references to Scripture appear multiple times on nearly every page.&lt;/p&gt;
&lt;p&gt;This Scriptural emphasis leads to the book’s other great strengths. First, Davis makes no point without basing the assertion on Scripture, and he draws on every section of the Bible to demonstrate the importance of each aspect of his map for growth in holiness. Moreover, he follows Scripture’s lead in grounding sanctification in the work of Christ mediated to us by the Holy Spirit. Davis’ emphasis on the work of the Spirit is especially helpful. Though he is by no means a charismatic in the modern sense of the word, it is clear that he is gripped by the reality that sanctification simply does not happen without the work of the Holy Spirit. This is an essential corrective for two kinds of churches: those tempted to ignore the Spirit, and those tempted to ignore all the works of the Spirit apart from those that result in visible signs. Rightly, Davis’ doctrine of sanctification is trinitarian: holy people whole-heartedly worship the Father in Spirit-empowered dependence on the finished work of the Son.&lt;/p&gt;
&lt;p&gt;Second, this Scriptural care allows Davis to navigate the difficult topic of Spirit-dependent human effort that characterizes Biblical sanctification. Because sanctification is the one aspect of salvation in which people are called to work (e.g. in Phil. 2:12), many believers are tempted to treat sanctification as a wholly human endeavor. Davis repudiates this notion, showing again and again that sanctification—like the justification that precedes it and the glorification that will follow it—is ultimately a work of God and one that brings him all glory. No person will be able to claim the credit for their own sanctification before God at the day of judgment. At the same time, he also rejects a Keswickian spirituality (“let go and let God”), even when dressed up as mere gospel dependence. However much in vogue the notion may be that we can do nothing and God does everything for us, it is simply not true. God requires us actively to seek him and his holiness. Davis rightly recognizes both these dangers and charts a course between them. The pursuit of holiness is empowered by the Holy Spirit, and believers must always fix their eyes on the finished work of Christ and the promise of future glory. Yet believers keep their eyes on Christ and rely on the Spirit &lt;em&gt;to work&lt;/em&gt;—not to sit still and trust God to float them toward holiness.&lt;/p&gt;
&lt;p&gt;The book does have a few weaknesses. First, although the book’s length and thoroughness are valuable in many ways, they also make this a difficult sell for anyone who is not already a dedicated reader. Moreover, while much of the length was inevitable in a work this thorough on a topic this complex, the book could be substantially shorter were it edited more carefully. Trimming the lengthy introduction and removing some repetition, unnecessary explanations, and clarifications would make the work stronger as well as shorter and more approachable. Given Davis’ goals—to stir up believers to pursuing holiness—this would be profoundly helpful, as it would allow for the book to be used in a broader variety of contexts.&lt;/p&gt;
&lt;p&gt;Second, a number of Davis’ references to words’ meanings in Greek are either extraneous or inaccurate. In particular, he regularly committed the so-called etymological fallacy, ascribing meaning to words based on their components rather than their actual use in the language. (This led him several times to disagree with every modern major translation!) He also sometimes referenced English words derived from Greek terms, but in cases where the derivation is irrelevant to the present meaning of the English word (e.g. &lt;em&gt;poem&lt;/em&gt; from &lt;em&gt;poiema&lt;/em&gt;). Gladly, no major issues in the text hung on these cases. Nonetheless, the misuses were distracting, and since in most cases they were also unnecessary, they actually &lt;em&gt;weakened&lt;/em&gt; the book for me.&lt;/p&gt;
&lt;p&gt;That these are the only significant issues in such a large and thorough book is a significant achievement, and both could readily be addressed in future editions of the work. Taken as a whole, Davis’ book shines. As Davis points out, holiness necessarily entails both knowledge of the things of God and zeal for his glory. The book drips with Davis’ passion for God and his urgent desire that God’s people seek holiness, and it lays out a thoughtful and (most importantly) Scriptural plan for how his people shall become holy. Lord willing, the volume will be a reliable guide to sanctification for the church for years to come.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Note on publication:&lt;/strong&gt; This paper was first published online on January 1, 2015. However, I wrote this and submitted it in mid-December, and have backdated it accordingly.&lt;/p&gt;
&lt;/section&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="FBC Durham"></category><category term="papers"></category><category term="book reviews"></category></entry><entry><title>Worship Leader</title><link href="http://www.chriskrycho.com/2014/worship-leader.html" rel="alternate"></link><published>2014-12-02T21:25:00-05:00</published><updated>2014-12-02T21:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-12-02:/2014/worship-leader.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;A faithful worship leader magnifies the greatness of God in Jesus Christ through the power of the Holy Spirit by skillfully combining God’s Word with music, thereby motivating the gathered church to proclaim the gospel, to cherish God’s presence, and to live for God’s glory.&lt;/p&gt;
&lt;/blockquote&gt;
</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;A faithful worship leader magnifies the greatness of God in Jesus Christ through the power of the Holy Spirit by skillfully combining God’s Word with music, thereby motivating the gathered church to proclaim the gospel, to cherish God’s presence, and to live for God’s glory.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>You Need a Plan</title><link href="http://www.chriskrycho.com/2014/bible-reading-plan.html" rel="alternate"></link><published>2014-12-02T17:50:00-05:00</published><updated>2014-12-02T17:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-12-02:/2014/bible-reading-plan.html</id><summary type="html">I need a plan for reading the Bible&amp;mdash;just like for everything else in life. Otherwise, things go downhill in a hurry.</summary><content type="html">&lt;p&gt;Sometimes I feel like an idiot.&lt;/p&gt;
&lt;p&gt;A week and a half ago, I started on a plan that will get me through the entirety of the Bible in ninety days. I’ve enjoyed it and—much more importantly—found it very helpful spiritually. My personal devotional time has been spotty the last few months, and I needed to make it a more regular part of my life.&lt;/p&gt;
&lt;p&gt;The problem was simple: I didn’t have a plan.&lt;/p&gt;
&lt;p&gt;Thus, feeling like an idiot. I’m very well aware in nearly every &lt;em&gt;other&lt;/em&gt; area of my life how important a plan is. I don’t go running without a basic idea of where I want to go, and in a larger sense I don’t train for a half marathon without a basic idea not only of what my running schedule will be like for the season but also what my strategy ought to be. Nor do I tackle a semester’s worth of work without a schedule. Nor do I try to build a significant piece of software without charting out the basic approach I’ll take (and sometimes a good deal more than just the basic course). I would be silly to think I would be successful in training for a race, passing my classes, building an application, or much else in life without a basic plan.&lt;/p&gt;
&lt;p&gt;Why, then, I have acted like I could succeed spiritually without that kind of discipline is beyond me.&lt;/p&gt;
&lt;p&gt;The truth is, when I have a plan—nearly any plan!—for reading the Bible, I can stick to it and my devotional life tends to be fairly consistent. As anyone who has been a Christian for some time knows, personal devotions are profoundly helpful. They help us see the face of God more clearly and keep in focus the spiritual realities of our lives. We &lt;em&gt;need&lt;/em&gt; that, given the tendency of the human heart to drift off into apathy toward our King. Apathy is dangerous. Sin is always ready for us to let down our guard and stop wholeheartedly pursuing God. Slacking off—in our meditations on his word, our prayer life, or our fellowship with the saints—will lead us steadily to ruin.&lt;/p&gt;
&lt;p&gt;It is not so much the details of a Bible-reading plan that matters, then. It is that I have a plan, so that I stay on target. In this case, I am reading a great many chapters a day, seeking to get a grasp on the big picture of the Bible. In another, I might be working slowly through a book, trying to understand its pieces and parts and details. In yet another, I might simply read and meditate and pray over the same psalm every day for a month. The point is to seek God— diligently, hungrily, passionately; not to let up in pursuing holiness in conformity to the image of his Son; to chase the knowledge of th eholy more than I have ever chased a half marathon PR.&lt;/p&gt;
&lt;p&gt;If I have been an idiot by failing to plan, and have been in and out of my regular devotional times, God has still been merciful to me in other means of grace: the preaching of the word, personal prayer, Scripture memory, and so on. But I am glad to have a plan. I am glad to be seeking him that much more diligently. Lord willing, I shall keep it up.&lt;/p&gt;
</content></entry><entry><title>Growing Up Together</title><link href="http://www.chriskrycho.com/2014/growing-up-together.html" rel="alternate"></link><published>2014-11-15T00:30:00-05:00</published><updated>2014-11-15T00:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-11-15:/2014/growing-up-together.html</id><summary type="html">&lt;p&gt;A few years ago, you might have caught me in a grumpy moment grousing about JavaScript. I distinctly did &lt;em&gt;not&lt;/em&gt; like writing it. Every time I sat down to deal with it, I found myself in a tangled mess of plain JavaScript, jQuery, and DOM manipulations that inevitably left me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few years ago, you might have caught me in a grumpy moment grousing about JavaScript. I distinctly did &lt;em&gt;not&lt;/em&gt; like writing it. Every time I sat down to deal with it, I found myself in a tangled mess of plain JavaScript, jQuery, and DOM manipulations that inevitably left me tearing my hair out.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I found it difficult to write in the first place, and even harder to maintain in the long run. I could not come up with good ways to organize it, especially because so much of what I was doing was so thoroughly &lt;em&gt;ad hoc&lt;/em&gt; in nature. Cobble this together over here; scrounge together those things over there; hope nothing collides in the middle.&lt;/p&gt;
&lt;p&gt;In the last four months, I have written several thousand lines of JavaScript, and I have &lt;em&gt;loved&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;For my latest major project, relaunching &lt;a href="https://holybible.com"&gt;HolyBible.com&lt;/a&gt;, I wrote the front end in &lt;a href="https://angularjs.org"&gt;AngularJS&lt;/a&gt; and the back end as an &lt;a href="http://expressjs.com"&gt;Express&lt;/a&gt; app (the most popular &lt;a href="http://nodejs.org"&gt;NodeJS&lt;/a&gt; web framework). I’ve written gobs of tests in &lt;a href="http://jasmine.github.io"&gt;Jasmine&lt;/a&gt; (using &lt;a href="https://github.com/mhevery/jasmine-node"&gt;jasmine-node&lt;/a&gt; for server-side tests) and drawn on tons of other open-source packages.&lt;/p&gt;
&lt;p&gt;And I have &lt;em&gt;loved&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;A small example: a moment ago, looking up the link for Jasmine, I noted that the latest version released today. My response was, “Ooh—cool!”&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What changed? Well, mostly I changed, but also JavaScript changed a bit. We both grew up over the last four years. On the JavaScript side of things, a lot of good design patterns and tools have come into play in that span. I’m sure there were plenty of good, disciplined web developers writing clear, careful, well-organized client-side JavaScript four years go. But in the interval, that kind of JavaScript got a lot more prominent, in part because it has had help from the rapid rise of server-side JavaScript in the form of Node.js and its flourishing ecosystem of components and tools. Build tools like &lt;a href="http://browserify.org"&gt;Browserify&lt;/a&gt; and development tools like &lt;a href="http://livereload.com"&gt;LiveReload&lt;/a&gt; and &lt;a href="https://incident57.com/codekit/"&gt;Codekit&lt;/a&gt; have combined with best practices learned from those long years of jQuery/DOM-manipulation hell so that these days, good JavaScript is a lot like good programming in any other language: highly modular, carefully designed, and well-organized.&lt;/p&gt;
&lt;p&gt;In the same period of time, I have matured enormously as a developer (just enough to see how far I still have to go, of course). At the point where I most hated JavaScript, I also really struggled to see the utility of callbacks. Frankly, it took me the better part of a month just to get my head around it—most of the tutorials out there just assumed you understood them already, and, well: I didn’t. Functions as first-class members of a language was new to me at that point. Fast-forward through several years of full-time Python development, lots of time spent reading about software development and some harder computer science concepts, and my perspective on JavaScript has shifted more than a little. Closures are beautiful, wonderful things now. Functions as arguments to other functions are delightful and extremely expressive. Prototypal inheritance—trip me up though it sometimes still does—is a fascinating variation on the idea of inheritance and one that I think I like rather better than classical inheritance.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are still things I don’t love about JavaScript. Its syntax owes far too much to the C family of languages to make me happy; I quite like the way that CoffeeScript borrows from Python (white-space-delimited blocks, use of equality words like &lt;code&gt;is&lt;/code&gt; and boolean rules like &lt;code&gt;and&lt;/code&gt; rather than &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; respectively, etc.). And I am looking forward to a number of features coming in the next version of JavaScript—especially generators and the &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; keywords, which will allow for &lt;em&gt;much&lt;/em&gt; saner patterns.&lt;/p&gt;
&lt;p&gt;But all of that is simply to say that I am now starting to know JavaScript enough to know that its &lt;em&gt;real&lt;/em&gt; issues aren’t the surface-level differences from the other languages with which I’m familiar. They’re not even the warts I noted here. They’re things like the mix of classical and prototypal inheritance in the way the language keywords and object instantiation work. But I don’t mind those. Every language has tradeoffs. Python’s support for lambdas is pretty minimal, despite the utility of anonymous functions, for example. But I &lt;em&gt;like&lt;/em&gt; the tradeoffs JavaScript makes.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In other words, I discovered the same thing so many other people have over the last few years: JavaScript isn’t just a good choice for utilitarian reasons. Beneath that messy exterior is a gem of a language. I’m having a lot of fun with it.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Thus the early balding starting by my temples.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;My wife’s bemused response: “Is that &lt;em&gt;another&lt;/em&gt; language?” Take that as you will.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;The couple weeks I got to spend &lt;a href="http://www.chriskrycho.com/2014/a-little-crazy.html"&gt;playing&lt;/a&gt; with &lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt; certainly helped! Io’s prototypal inheritance is semantically “purer” than JavaScript’s, which is quite an improvement in my view. JavaScript’s &lt;code&gt;new&lt;/code&gt; keyword and the pseudo-classical object pattern it brings along can go rot in a bog.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Truth be told, I like them even better from the perspective of CoffeeScript, which hides a lot of the rough edges of JavaScript and, as noted above, brings in quite a few things I like from Python. For my part, I intend to write as much CoffeeScript as possible going forward.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[software development]"></category></entry><entry><title>A Ridiculous Situation</title><link href="http://www.chriskrycho.com/2014/a-ridiculous-situation.html" rel="alternate"></link><published>2014-11-07T21:00:00-05:00</published><updated>2014-11-07T21:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-11-07:/2014/a-ridiculous-situation.html</id><summary type="html">An example of just how deep the rabbit-hole can go.</summary><content type="html">&lt;p&gt;One of the pieces of code I’m maintaining has an &lt;em&gt;absurd&lt;/em&gt; situation in its build structure—honestly, I’m not sure how it ever compiled. For simplicity’s sake, let us assume the four following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secondary.c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writer.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculator.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project has many more files than this, of course, but these are the important ones for demonstrating this particular piece of insanity (which shows up &lt;em&gt;many&lt;/em&gt; places in the codebase).&lt;/p&gt;
&lt;p&gt;I’m reproducing here some dummy code representing an &lt;em&gt;actual set of relationships in the codebase&lt;/em&gt;. The functions and module nameshave been changed; the relationships between the pieces of code have not.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; When I started trying to build the program that included what I am representing as &lt;code&gt;main.c&lt;/code&gt; below, this is the basic structure I found:&lt;/p&gt;
&lt;section id="main.cpp" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;main.cpp&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the main module of the program. In the actual code in which I found this particular morass, it was actually code generated by the UI builder in Visual Studio 6&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and then turned into an unholy mess by a developer whose idea of good programming involved coupling the various parts of the code as tightly as possible.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;#include &amp;quot;calculator.h&amp;quot;
#include &amp;quot;secondary.h&amp;quot;

int a=0, int b=0;

int addNumbers(a, b) {
    return a+b;
}

void doBadThingsWithGlobals(int * someNumber) {
    a = 6;
    *someOtherNumber = 5;
}

#include &amp;quot;writer.h&amp;quot;

void main() {
    a = 3;
    doBadThingsWithGlobals(&amp;amp;b);
    addNumbers(a, b);
    doStuffWithNumbers(a,b);
    subtractNumbers(b, a);
}

// More insanity follows...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, the main function and the &lt;code&gt;doBadThingsWithGlobals&lt;/code&gt; function are both modifying global state, and yes, there is an include statement midway down through the module. (Just wait till you see what it does.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="secondary" class="level3"&gt;
&lt;h3&gt;“secondary”&lt;/h3&gt;
&lt;p&gt;Here is a secondary module which has been somewhat cleaned up. It has normal relationships between header and source files, and includes all its dependency headers at the top of the file. It has a header which defines the public API for the module, and that even has inclusion guards on it.&lt;/p&gt;
&lt;section id="secondary.h" class="level4"&gt;
&lt;h4&gt;&lt;code&gt;secondary.h&lt;/code&gt;&lt;/h4&gt;
&lt;pre class="c"&gt;&lt;code&gt;#ifndef SECONDARY_H
#define SECONDARY_H

int doStuffWithNumbers();

#endif SECONDARY_H&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="secondary.c" class="level4"&gt;
&lt;h4&gt;&lt;code&gt;secondary.c&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;doStuffWithNumbers&lt;/code&gt; function here calls &lt;code&gt;addNumbers&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="c"&gt;&lt;code&gt;#include &amp;quot;secondary.h&amp;quot;
#include &amp;quot;calculator.h&amp;quot;

int doStuffWithNumbers(int x, int y) {
    addNumbers(x, y);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;But wait!&lt;/em&gt; you say, &lt;em&gt;That function isn’t defined here!&lt;/em&gt; Ah, and you would be right, except that it doesn’t refer to the &lt;code&gt;addNumbers&lt;/code&gt; function in &lt;code&gt;main.c&lt;/code&gt;. It refers to a function implementation in &lt;code&gt;calculator.h&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="calculator.h" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;calculator.h&lt;/code&gt;&lt;/h3&gt;
&lt;pre class="c"&gt;&lt;code&gt;int addNumbers(int p, int q) {
    return p + q;
}

int subtractNumbers(int r, int s) {
    return r - s;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Strangely, this &lt;code&gt;addNumbers&lt;/code&gt; function is identical to the one in &lt;code&gt;main.c&lt;/code&gt;. Even &lt;em&gt;more&lt;/em&gt; strangely, it is defined—not merely declared, actually defined—in the header file! Nor is this the only such function. Look at the details of &lt;code&gt;writer.h&lt;/code&gt;, which was mysteriously included above in the middle of the main module.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="writer.h" class="level3"&gt;
&lt;h3&gt;&lt;code&gt;writer.h&lt;/code&gt;&lt;/h3&gt;
&lt;pre class="c"&gt;&lt;code&gt;void writeStuff() {
    fprintf(stdout, &amp;quot;a: %d, b: %d&amp;quot;, a, b);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, we have a full-fledged implementation in the header file. Why, you ask? Presumably because the developer responsible for writing this code never quite got his head around how C’s build system works. The entirety of one of the central components of this software—an element that in any normal build would be a common library—was a single, approximately 2,000-line &lt;em&gt;header file&lt;/em&gt;. (Say hello to &lt;code&gt;calculator.h&lt;/code&gt; up there; that’s what I’m abstracting away for this example.)&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Worse: it is printing the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and no, I am not skipping some part of &lt;code&gt;writer.h&lt;/code&gt;. It is getting those from &lt;code&gt;main.c&lt;/code&gt;, because it was included after they were defined, and the build process essentially drops this header inline into &lt;code&gt;main.c&lt;/code&gt; before it compilation.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; So here we have a header file with the implementation of a given piece of code, included in a specific location and defined in such a way that if you change where it is included, it will no longer function properly (since the variables will not have been defined!)&lt;/p&gt;
&lt;p&gt;Worse, there are conflicting definitions for one of the functions used in &lt;code&gt;main.c&lt;/code&gt;, and because of its dependency on &lt;em&gt;other&lt;/em&gt; functions in &lt;code&gt;calculator.h&lt;/code&gt; (e.g. &lt;code&gt;subtractNumbers&lt;/code&gt; in this mock-up), it cannot be removed! Moreover, given the many places &lt;code&gt;calculator.h&lt;/code&gt; is referenced throughout the code base, it is non-trivial to refactor it.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If this sounds insane… that’s because it is.&lt;/p&gt;
&lt;p&gt;If you’re curious how I dealt with it, well… I renamed the &lt;code&gt;addNumbers()&lt;/code&gt; function in &lt;code&gt;main.c&lt;/code&gt; to &lt;code&gt;_addNumbers()&lt;/code&gt; and put a loud, angry &lt;code&gt;TODO&lt;/code&gt; on it for the current release, because the only way to fix it is to refactor this whole giant mess.&lt;/p&gt;
&lt;p&gt;The takeaway of the story, if there is one, is that people will do crazier, weirder, worse things than you can possibly imagine when they don’t understand the tools they are using and just hack at them till they can make them work. The moral of the story? I’m not sure. Run away from crazy code like this? Be prepared to spend your life refactoring?&lt;/p&gt;
&lt;p&gt;How about: try desperately &lt;em&gt;not&lt;/em&gt; to leave this kind of thing for the person following you.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;That’s actually not &lt;em&gt;wholly&lt;/em&gt; true, because these pieces of code are also duplicated in numerous places throughout the codebase. We’ve eliminated as many as possible at present… but not all of them, courtesy of the crazy dependency chains that exist. Toss in a dependency on Visual Studio 6 for some of those components, and, well… suffice it to say that we’re just happy there are only two versions floating around instead of the seven that were present when I started working with this codebase two and a half years ago.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Yes, &lt;a href="http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#Visual_Studio_6.0_.281998.29"&gt;&lt;em&gt;that&lt;/em&gt;&lt;/a&gt; Visual Studio 6. The one from 1998. Yes, that’s insane. No, we haven’t managed to get rid of it yet, though we’re close. So close.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I am not joking. Multi-thousand line functions constituting the entirety of a program are not just &lt;em&gt;normal&lt;/em&gt;, they are pretty much the only way that programmer ever wrote. When you see the code samples below, you will see why: someone was lacking an understanding of C’s build system.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Also, that’s the piece of code of which I found seven different versions in various places when I started. Seven!&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;I once ran into some code working on a different project for an entirely different client where there had been a strict 1,000-line limit to C source files, as part of an attempt to enforce some discipline in modularizing the code. Instead of embracing modularity, the developers just got in the habit of splitting the source file and adding &lt;code&gt;#include&lt;/code&gt; statements at the end of each file so that they could just keep writing their non-modular code.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;I have tried. Twice. I’m hoping that the third time &lt;em&gt;will&lt;/em&gt; be the charm.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[software development]"></category></entry><entry><title>Doctrine</title><link href="http://www.chriskrycho.com/2014/doctrine.html" rel="alternate"></link><published>2014-11-04T23:02:00-05:00</published><updated>2014-11-04T23:02:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-11-04:/2014/doctrine.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Doctrine is not merely an affair of the tongue, but of the life; is not apprehended by the intellect and memory merely, like other branches of learning; but is received only when it possesses the whole soul, and finds its seat and habitation in the inmost recesses of the heart …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Doctrine is not merely an affair of the tongue, but of the life; is not apprehended by the intellect and memory merely, like other branches of learning; but is received only when it possesses the whole soul, and finds its seat and habitation in the inmost recesses of the heart…. To doctrine in which our religion is contained we have given the first place, since by it our salvation commences; but it must be transfused into the breast, and pass into the conduct, and so transform us into itself, as not to prove unfruitful.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>Nailed It</title><link href="http://www.chriskrycho.com/2014/nailed-it.html" rel="alternate"></link><published>2014-10-22T22:15:00-04:00</published><updated>2014-10-22T22:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-10-22:/2014/nailed-it.html</id><summary type="html">Someone leaked a copy of the trailer for Avengers: Age of Ultron&amp;hellip; and Marvel didn&amp;rsquo;t throw a fit. Quite the opposite, in fact.</summary><content type="html">&lt;p&gt;Yesterday, something rather remarkable happened. Someone leaked a copy of the trailer for &lt;em&gt;Avengers: Age of Ultron&lt;/em&gt;… and Marvel, rather than throwing a hissy fit, just tweeted:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dammit, Hydra. (&lt;a href="https://twitter.com/Marvel/status/525071656306626560"&gt;October 22, 7:50 PM EST&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pitch perfect. It’s self-aware, self-&lt;em&gt;referential&lt;/em&gt; in a funny way without being too clever-seeming or coming off like it’s trying too hard, and just a generally good response. The team could have fought it (though ultimately that would have just made things worse), but instead Marvel played its hand perfectly. The response was was funny &lt;em&gt;and&lt;/em&gt; demonstrated that the folks who work there actually understand how the internet works.&lt;/p&gt;
&lt;p&gt;That alone would have been good enough to put Marvel in a league of its own when it comes to managing things &lt;em&gt;not&lt;/em&gt; going the way hoped for. But (after what I’m sure was considerable back-room wrangling), they followed it up an hour and a half later with another, equally fantastic tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here it is! Watch the &lt;a href="https://twitter.com/Avengers"&gt;@Avengers&lt;/a&gt;: &lt;a href="https://twitter.com/hashtag/AgeofUltron?src=hash"&gt;#AgeofUltron&lt;/a&gt; Teaser Trailer right NOW: &lt;a href="http://youtu.be/tmeOjFno6Do" class="uri"&gt;http://youtu.be/tmeOjFno6Do&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Avengers?src=hash"&gt;#Avengers&lt;/a&gt; (&lt;a href="https://twitter.com/Marvel/status/525093857772318720"&gt;October 22, 9:18 PM EST&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your average old-media company these days would have thrown a fit and made a stink about the release of their media. They would have done everything in their power to get the video taken down. Many companies &lt;em&gt;have&lt;/em&gt; done just that under similar circumstances, aiming to get the trailer, snippets of the movie, music, or the like removed from the internet. But that simply isn’t how the internet works: it famously “treats censorship like damage and routes around it” (&lt;a href="http://www.chemie.fu-berlin.de/outerspace/internet-article.html"&gt;John Gilmore&lt;/a&gt;). Once a video is online, it’s online. Someone, somewhere, still has a copy of it and can put it back up. So rather than fight it… Marvel just rolled with it and made the best of the situation. They cracked a joke, went ahead and put the trailer out themselves, and earned general approval from the internet. Again.&lt;/p&gt;
&lt;p&gt;Despite being a decades-old company, Marvel is clearly a new media company through and through at this point. They managed to dodge the &lt;a href="http://www.economist.com/blogs/economist-explains/2013/04/economist-explains-what-streisand-effect"&gt;Streisand effect&lt;/a&gt; quite nicely, turning what could have been an opportunity for hostility all around into a PR coup and a win that they couldn’t have scored on their own.&lt;/p&gt;
&lt;p&gt;Other old (and new!) media companies, take note. &lt;em&gt;This&lt;/em&gt; is the way you play the game. You recognize when the cat is out of the bag and you run with it. Own it. Make it your own somehow. Don’t let it own you. The internet is a big, crazy, chaotic place, and you can never hope to control it—nor even the narrative about you and your stuff, whatever that may be—like you might have been able to do twenty-five years ago. But that’s okay. If you can roll with the punches, you can still come out ahead, and you’ll look a little more human doing it. I call that winning.&lt;/p&gt;
&lt;p&gt;(Go Marvel.)&lt;/p&gt;
</content></entry><entry><title>The Next Generation of Version Control</title><link href="http://www.chriskrycho.com/2014/next-gen-vcs.html" rel="alternate"></link><published>2014-10-16T21:45:00-04:00</published><updated>2014-10-20T07:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-10-16:/2014/next-gen-vcs.html</id><summary type="html">The current state of affairs with version control is a mess. Things we can get right next time around.
</summary><content type="html">&lt;p&gt;The current state of affairs in version control systems is a mess. To be sure, software development is &lt;em&gt;far&lt;/em&gt; better with &lt;em&gt;any&lt;/em&gt; of the distributed version control systems in play—the three big ones being &lt;a href="http://git-scm.com"&gt;Git&lt;/a&gt;, &lt;a href="http://mercurial.selenic.com"&gt;Mercurial&lt;/a&gt; (&lt;code&gt;hg&lt;/code&gt;), and &lt;a href="http://bazaar.canonical.com/en/"&gt;Bazaar&lt;/a&gt; (&lt;code&gt;bzr&lt;/code&gt;), with a few other names like &lt;a href="http://www.fossil-scm.org"&gt;Fossil&lt;/a&gt; floating around the periphery—than it ever was in a centralized version control system. There are definitely a few downsides for people converting over from some standard centralized version control systems, notably the increased number of steps in play to accomplish the same tasks.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; But on the whole, the advantages of being able to commit locally, have multiple complete copies of the repository, and share work without touching a centralized server far outweigh any downsides compared to the old centralized system.&lt;/p&gt;
&lt;p&gt;That being so, my opening statement remains true, I think: &lt;em&gt;The current state of affairs in version control is a mess.&lt;/em&gt; Here is what I mean: of those three major players (Git, Hg, and Bazaar), each has significant downsides relative to the others. Git is famously complex (even arcane), with a user interface design philosphy closely matching the UI sensibilities of Linus Torvalds—which is to say, all the wires are exposed, and it is about as user-hostile as it could be.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; It often outperforms Hg or Bazaar, but it has quirks, to say the very least. Hg and Bazaar both have &lt;em&gt;much&lt;/em&gt; better designed user interfaces. They also have saner defaults (especially before the arrival of Git 2.0), and they have better branching models and approaches to history.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; They have substantially better documentation—perhaps especially so with Bazaar, but with either one a user can understand how to use the tool &lt;em&gt;without having to understand the mechanics of the tool&lt;/em&gt;. This is simply not the case with Git, and while I &lt;em&gt;enjoy&lt;/em&gt; knowing the mechanics of Git because I find them interesting, &lt;em&gt;having&lt;/em&gt; to understand the mechanics of a tool to be able to use it is a problem.&lt;/p&gt;
&lt;p&gt;But the other systems have their downsides relative, to Git, too. (I will focus on Hg because I have never used Bazaar beyond playing with it, though I have read a good bit of the documentation.) Mutable history in Git is valuable and useful at times; I have rewritten whole sequences of commits when I realized I committed the wrong things but hadn’t yet pushed.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Being able to commit chunks instead of having to commit whole files at a go is good; I feel the lack of this every time I use Hg.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; (Needing to understand the &lt;em&gt;file system&lt;/em&gt; that Git invented to make sure you do not inadvertently destroy your repository is… not so good.) A staging area is nice,&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; (even if &lt;em&gt;having&lt;/em&gt; to stage everything manually can be in the pain in the neck&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In short, then, there was no clear winner for this generation. Each of the tools has significant upsides and downsides relative to the others. Git has become the &lt;em&gt;de facto&lt;/em&gt; standard, but &lt;em&gt;not&lt;/em&gt; because of its own superiority over the alternatives. Rather, it won because of other forces in the community. Mostly I mean &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;, which is a &lt;em&gt;fantastic&lt;/em&gt; piece of software and easily the most significant driving factor in the wider adoption of Git as a tool. The competition (&lt;a href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt; and &lt;a href="https://launchpad.net"&gt;Launchpad&lt;/a&gt;) are nowhere near the same level of sophistication or elegance, and they certainly have not managed to foster the sorts of community that GitHub has. The result has been wide adoption of Git, and a degree of Stockholm Syndrome among developers who have adopted it and concluded that the way Git works is the way a distributed version control system &lt;em&gt;should&lt;/em&gt; work.&lt;/p&gt;
&lt;p&gt;It is not. Git is complicated to use and in need of tools for managing its complexity; the same is true of Hg and Bazaar, though perhaps to a slightly lesser extent because of their saner branching models. This is what has given rise to the &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;plethora&lt;/a&gt; of &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;different&lt;/a&gt; formal &lt;a href="https://about.gitlab.com/2014/09/29/gitlab-flow/"&gt;workflows&lt;/a&gt; representing various attempts to manage that complexity (which have been &lt;a href="https://bitbucket.org/yujiewu/hgflow/wiki/Home"&gt;applied&lt;/a&gt; to other systems &lt;a href="https://andy.mehalick.com/2011/12/24/an-introduction-to-hgflow"&gt;as well&lt;/a&gt;). Managing branching, linking that workflow to issues, and supplying associated documentation for projects have also cropped up as closely associated tasks— thus the popularity of GitHub issues and Bitbucket wikis, not to mention &lt;a href="http://www.fossil-scm.org"&gt;Fossil’s&lt;/a&gt; integration of both into the DVCS tool itself. None of the tools handle differences between file systems very elegantly (and indeed, it took &lt;em&gt;years&lt;/em&gt; for Git even to be useable on Windows). All of them especially struggle to manage symlinks and executable flags.&lt;/p&gt;
&lt;p&gt;So there is an enormous opportunity for the &lt;em&gt;next&lt;/em&gt; generation of tools. Git, Hg, and so on are huge steps forward for developers from CVS, Visual SourceSafe, or SVN. But they still have major weaknesses, and there are many things that not only can but should be better. In brief, I would love for the next-generation version control system to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distributed (this is now a non-negotiable);&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;well-documented—&lt;em&gt;at least&lt;/em&gt; as well as Hg is, and preferably as well as Bazaar is;&lt;/li&gt;
&lt;li&gt;well-designed, which is to say having a user interface that is actually a user-interface (like Hg’s) and not an extremely leaky abstraction around the mechanics;&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;fast;&lt;/li&gt;
&lt;li&gt;file-system oriented, &lt;em&gt;not&lt;/em&gt; diff-oriented: this is one of Git’s great strengths and the reason for a lot of its performance advantages;&lt;/li&gt;
&lt;li&gt;extensible, with a good public API so that it is straightforward to add functionality like wikis, documentation, social interaction, and issue tracking in a way that actually integrates the tool;&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and last but not least, truly cross-platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is a non-trivial task, but the first DVCS that manages to hit even a sizeable majority of these desires will gain a lot of traction in a hurry. The second generation of distributed version control has been good for us. The third could be magical.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;A point that was highlighted for me in a conversation a few months ago with my father, a programmer who has been using SVN for a &lt;em&gt;long&lt;/em&gt; time and found the transition to Git distinctly less than wonderful.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Anyone who feels like arguing with me on this point should go spend five minutes laughing at the &lt;a href="http://git-man-page-generator.lokaltog.net"&gt;fake man pages&lt;/a&gt; instead.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Few things are as hotly debated as the relative merits of the different systems’ branching models and approaches to history. At the least, I can say that Hg and Bazaar’s branching models are &lt;em&gt;more to my taste&lt;/em&gt;.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Yes, there are extensions that let you do this with Hg, but they are fragile at best in my experience, and substantially less capable than Git’s.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Yes, I know about Hg’s record extension. No, it is &lt;em&gt;not&lt;/em&gt; quite the same, especially because given the way it is implemented major GUI tools cannot support it without major chicanery.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Yes, I know about Hg’s queue extension, too. There is a reason it is not turned on by default, and using it is substantially more arcane than Git’s staging are. Think about that for a minute.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;Yes, there is the &lt;code&gt;-a&lt;/code&gt; flag. No, I do not want to have to remember it for every commit.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Let’s be honest: if Git’s abstraction were a boat, it would sink. It’s just that leaky.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;GitHub does all of this quite well… but they have had to write heaps and gobs of software &lt;em&gt;around&lt;/em&gt; Git to make it work.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category></entry><entry><title>The Genesis Debate</title><link href="http://www.chriskrycho.com/2014/earth-age-inerrancy.html" rel="alternate"></link><published>2014-08-18T22:00:00-04:00</published><updated>2014-08-18T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-08-18:/2014/earth-age-inerrancy.html</id><summary type="html">With reference to history, witness, and textual issues, an argument for greater humility in the discussion of the meaning of Genesis 1, and particular for a willingness to be charitable to those with whom we disagree.</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;A brief note on the title: I unabashedly stole it from D.A. Carson’s very helpful little book, &lt;a href="[] http://www.amazon.com/The-Inclusive-Language-Debate-Plea-Realism/dp/080105835X "&gt;&lt;cite&gt;The Inclusive Language Debate: A Plea For Realism&lt;/cite&gt;&lt;/a&gt;, which is a good read and has a title I thought apropos. Now: on to the post’s business!&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="clarifying-remarks" class="level2"&gt;
&lt;h2&gt;Clarifying Remarks&lt;/h2&gt;
&lt;section id="the-point-of-this-post" class="level3"&gt;
&lt;h3&gt;The point of this post&lt;/h3&gt;
&lt;p&gt;I want you to walk away persuaded that there is room for a (much) wider degree of disagreement on the age of the earth and the details of creation than many evangelical and fundamentalist leaders sometimes assert—and indeed, that this has been the case historically.&lt;/p&gt;
&lt;p&gt;I am &lt;em&gt;not&lt;/em&gt; particularly interested in persuading you that my particular view of the age of the earth is correct, or indeed that you ought to change your views at all. I just want you to walk away with an appreciation for the points to consider on the topic, and hopefully encouraged about the open door for future development of Christian thought on this complex and interesting issue.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-take" class="level3"&gt;
&lt;h3&gt;My take&lt;/h3&gt;
&lt;p&gt;Let me get a few things out of the way, right up front—I want you to know where I am coming from:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I believe the Bible is God’s revelation of himself to us, and that when we read the Bible we are actually reading God’s word. As such, I affirm the inerrancy of Scripture. I do &lt;em&gt;not&lt;/em&gt; necessarily affirm anyone’s favorite articulation of that important doctrine.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I am an old-earth creationist. I affirm that the universe is most likely somewhere in the neighborhood of 14 billion years old, that the earth formed about 5 billion years ago, and that there is an enormous well of geological history from which there actually are things Christians can learn.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I do not in principle have an issue with God having used nearly any means to bring about the present biological state of the world we observe.&lt;/li&gt;
&lt;li&gt;I believe that Adam and Eve really did commit original sin, leading all of humanity into the bondage from which Jesus Christ delivered us in his incarnation, life, death, resurrection, and ascension.&lt;/li&gt;
&lt;li&gt;I do not see these position as inherently contradictory—though many of my friends, peers, and even pastors disagree.&lt;/li&gt;
&lt;li&gt;I think that Christians run two serious risks in this area: capitulating to the assertions of a world that we know to be hostile to the things of God, and rejecting real God-given knowledge and wisdom in ways that unnecessarily compromise our witness and cause us to miss out on things God wanted us to know about himself and his world. While the former of these risks is indeed more serious, ignoring the second risk puts us in hot water quite regularly as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, onto the meat of the post!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-boundaries" class="level2"&gt;
&lt;h2&gt;The Boundaries&lt;/h2&gt;
&lt;p&gt;This discussion is complicated by several major issues. First, readings of Genesis 1–11 have been enormously varied over the history of the church. Second, the narratives directly intersect with scientific data in ways that much of the rest of the Scriptures do not. Closely related to this is a third point: the complexity of the essential texts themselves.&lt;/p&gt;
&lt;section id="history" class="level3"&gt;
&lt;h3&gt;History&lt;/h3&gt;
&lt;p&gt;On this first bit: suffice it to say that the church’s view of the days of creation has been extremely &lt;em&gt;varied&lt;/em&gt; over the last two thousand years. It is common today to hear evangelical leaders (notably including but not limited to Al Mohler and Ken Ham) suggesting that denial of six 24-hour days of creation is tantamount to a denial of the inerrancy of Scripture. In the history of the church, such a position is novel, to say the least. In addition to the oft-cited Augustine quote on the matter, countless others have affirmed non-24-hour day views.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; Importantly, this number includes such modern luminaries as B. B. Warfield and J. Gresham Machen—no wobbly-kneed capitulators to modernism or feeble falterers on inerrancy they, but both affirmed the “day-age” view of the days of creation, &lt;em&gt;not&lt;/em&gt; six 24-hour days.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To be sure, simply pointing to authorities’ takes on the position does not tell us what Scripture teaches (and indeed to do so is to commit the fallacy of argument from authority!), but it &lt;em&gt;should&lt;/em&gt; provide us with a degree of caution in making pronouncements about the bounds of orthodox opinion. More, it ought to give us pause when we start to identify our own interpretations with the bounds of orthodoxy or even the bounds of inerrancy. It is perfectly reasonable to suggest that those who have gone before us were mistaken (as indeed I think some of them were). It is something else entirely to suggest that they were not only mistaken but were all of them somehow rejecting the inerrancy or authority of Scripture simply because their positions do not accord with our own. In particular, when Warfield and Machen affirm an old earth, we would do well to recognize that any interpretation of inerrancy which excludes dogmatically an old earth is inherently problematic.&lt;/p&gt;
&lt;p&gt;Note well: I am not making here any comment at all on what the age of the earth is, nor even on whether we should or should not affirm an old earth view is within the bounds allowed by Scripture. I am simply calling for a dose of humility in the face of the reality of centuries of witness that differ from the line taken by many evangelicals and fundamentalists today.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scripture-and-science" class="level3"&gt;
&lt;h3&gt;Scripture and Science&lt;/h3&gt;
&lt;p&gt;There are only a few areas in which the things the Bible says intersect directly with the findings of natural science. This is one of them. To be sure, there are many ways in which God’s revelation informs (or at least, should inform!) Christians’ view of the world around us and the value of scientific undertakings. Moreover, our affirmation of a supernatural character to the world means we will reject certain ideologies—hard naturalism is simply an untenable stance for us. That being said, though, the early chapters of Genesis are one of the only places in Scripture where the natural sciences and the Bible speak directly to the same issues.&lt;/p&gt;
&lt;p&gt;In Genesis, we have an account of the creation of the world and the origin of humankind. The natural sciences&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; also give us an account of the creation of the world and the origin of humankind. Whether the two do or can be made to agree is one of the major points of contention not only among Christians but also between many secularists and believers: simply witness the barbed critiques of Christianity at the hands of the New Atheists over the last decade, many of them aimed directly at this point.&lt;/p&gt;
&lt;p&gt;In most conflict-ridden areas of our lives and public witness, Christians stand opposed to the &lt;em&gt;moral&lt;/em&gt; positions of the world around us. In this area, we stand at least potentially in opposition to an quite different aspect of the world: the pursuit of natural knowledge. True: all orthodox Christians grant that the human mind is in some ways “fallen” and therefore unable to properly apprehend all truth. At the same time, we &lt;em&gt;also&lt;/em&gt; affirm that even the fallen mind is the mind of a being made &lt;em&gt;imago dei&lt;/em&gt; and situated in a world made rationally by a wise God. We believe that we see in the “book of nature” the handiwork of our creator, and in our own minds the apex of that creation. We affirm that there is a great body of knowledge available to all human beings, that our minds still allow us to understand the world around us &lt;em&gt;rightly&lt;/em&gt; even if incompletely.&lt;/p&gt;
&lt;p&gt;More than that, we believe that it is precisely because of God’s handiwork on display that all humans stand accountable before him; Paul reminds us that we are all without excuse because creation itself points to the existence of God.&lt;/p&gt;
&lt;p&gt;We therefore ought to hesitate before suggesting that the many scientists who have read th book of nature to suggest an old earth are simply victims of the fall. It is one thing to suggest that the evidence can be misread: of course this is so. It is something else to suggest that nearly all astronomers and geologists, Christian and non-Christian alike, are simply deluded. This is an incredibly strong claim, and the evidence is on those who would advance it to back it up—not simply to assert it.&lt;/p&gt;
&lt;p&gt;The reality is that we face an area of tension here. The most straightforward reading of Genesis 1–11 is that of a young Earth which was covered in a worldwide flood. The most straightforward reading of the natural record is of an ancient Earth scarred by many catastrophes (but not, as near as we can tell, a global flood). These two readings stand in tension with each other. It is easiest to collapse the tension one way or the other: to dismiss modern science as a dangerous delusion, or to dismiss the early chapters of Genesis as mere mythology. I think &lt;em&gt;both&lt;/em&gt; of these are missteps, and both fail to do justice to the seriousness which the topic deserves.&lt;/p&gt;
&lt;section id="public-witness" class="level4"&gt;
&lt;h4&gt;Public Witness&lt;/h4&gt;
&lt;p&gt;One corollary of this is that our stance on the relationship between science and Scripture impinges on our public witness in unique ways. When as believers we suggest that all of modern science’s readings of the book of nature are delusional, we are doing more than critiquing the findings of that science. We are speaking of those who &lt;em&gt;conduct&lt;/em&gt; the science. The timbre of much discussion of non-young-earth views among evangelicals and fundamentalists is one of implicit or explicit suspicion that “those secularists” are waging a war against the truth. I heartily affirm that there really are spiritual forces at work opposing the truth of God—both internal and external to human nature itself. That being said, perhaps we ought to be careful when asserting that the &lt;em&gt;only&lt;/em&gt; reason someone might disagree with our reading of Genesis 1–11 is Satanic delusion.&lt;/p&gt;
&lt;p&gt;We unnecessarily hinder our witness when we make disagreement on this point a matter of conspiracy or willful opposition to the truth. Whether the young-earth creationist is right or wrong, the assumption that those who disagree with him are conspirators or blinded by lies is astoundingly arrogant. It leaves no room whatsoever for the notion that one &lt;em&gt;might actually be wrong&lt;/em&gt;. It is far more profitable to grapple with the tensions in our positions, whatever those positions may be.&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; Failing to do unnecessarily leaves us without any credibility at all.&lt;/p&gt;
&lt;p&gt;Let me be clear: I am willing to be taken as non-credible by the world around me. Wherever Scripture demands that we stand against the world, I will do so. My question is simply this: Does Scripture demand that here? Or is it simply &lt;em&gt;my interpretation&lt;/em&gt; that demands it? If the latter, it behooves me to offer others a more charitable interpretation.&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; Perhaps they are not hostile conspirators or pitiably deluded fools after all.&lt;/p&gt;
&lt;p&gt;As a friend of mine (who characterizes himself as ‘an empirical agnostic atheist’) put it some months ago:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would have a lot more respect for that group [Ken Ham and Anwers in Genesis] if they could just say “we believe that Earth is only a few thousand years old, and we recognize that our current scientific understanding strongly indicates otherwise, but at this time we just can’t reconcile the discrepancy” instead of “secularist have hijacked science to mislead you into thinking Earth is older than it actually is.”&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He is right: it takes a great deal more humility to say, “Look, I recognize the trouble with my position, and I hold it nonetheless” than to say, “There is no trouble with my position!” in the face of all evidence to the contrary. We can facilely pretend that any opposition we receive is simply the result of our faithfulness to the truth—or we can recognize that sometimes, we &lt;em&gt;earn&lt;/em&gt; hostility from the world because of our own lack of charity and superciliousness.&lt;/p&gt;
&lt;p&gt;(For the record, that has been me, too many times to count. I am not pointing my finger at young-earth creationists here; I am pointing it right at the man in the mirror. I have alienated my fair share and then some of non-Christians by my intransigence and my accusatory attitude. God forgive me.)&lt;/p&gt;
&lt;p&gt;The old earth creationist has to face up to the fact that his reading of the Bible is less natural than the young earth creationist’s. The young earth creationist has to face up to the fact that her reading of the world is less natural than that of the old earth creationist’s. Can we not simply be so honest as to admit as much? All of our positions have weaknesses. One of them is right (or at least, &lt;em&gt;more&lt;/em&gt; right), and we can hold them confidently and even boldly—but we do not need to assume that those with whom we differ are either the victims or the perpetrators of some conspiracy to hide the real truth.&lt;a href="#fn10" class="footnote-ref" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="textual-issues" class="level3"&gt;
&lt;h3&gt;Textual Issues&lt;/h3&gt;
&lt;p&gt;The crux of this issue in many ways is what exactly the text says in Genesis. On this, I want again to suggest not that you embrace my particular interpretation but that you recognize the need for humility in dealing with the particular passages in question.&lt;/p&gt;
&lt;p&gt;It is common among young-earth creationists to assert that the days of Genesis 1 are &lt;em&gt;obviously&lt;/em&gt; meant to be taken as literal 24-hour days. Those holding this view point to the use of the Hebrew word &lt;em&gt;yom&lt;/em&gt; translated “day” here. The word most commonly refers to 24-hour days, and all but one other time when put in context with the words for “evening” and “morning” which punctuate the text in Genesis (“and there was evening, and there was morning, the first day…”) certainly refer to such a span.&lt;/p&gt;
&lt;p&gt;However, there are a number of reasons why we should be cautious in making such an assertion with any degree of dogmatism. First, the very first time &lt;em&gt;yom&lt;/em&gt; appears after this is Genesis 2:4, where it very certainly does &lt;em&gt;not&lt;/em&gt; refer to a 24-hour period. Second, the days certainly were not all &lt;em&gt;solar&lt;/em&gt; days if we take the passage at face value. (This is not to say they were not 24 hours long, only that the first three were apparently not solar days per the straightforward reading of the text.)&lt;/p&gt;
&lt;p&gt;Third, and most important, is the question of genre. There is a clear and distinct shift in language between the elevated prose of Genesis 1 and the more normal historical narrative language of Genesis 2 and following.&lt;a href="#fn11" class="footnote-ref" id="fnref11"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt; The first chapter is not poetry, but it makes heavy use of standard Hebrew poetic devices, especially repetition, in ways that set it off from what follows. The clear shift between the two should caution us&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There is a &lt;em&gt;lot&lt;/em&gt; of room for disagreement on the specifics of this issue. While there are some lines we should not cross, those lines are much broader than some evangelical and fundamentalist leaders often suggest. One can be a thoroughgoing evangelical with a deep commitment to the inerrancy of Scripture and believe the earth old and even—dare I say it—that God used gradual means to bring about the biological diversity of the planet.&lt;a href="#fn12" class="footnote-ref" id="fnref12"&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt; Whether affirming the &lt;a href="https://en.wikipedia.org/wiki/Framework_interpretation_(Genesis)"&gt;Framework Hypothesis&lt;/a&gt;, a &lt;a href="http://biologos.org/resources/multimedia/john-walton-on-understanding-genesis" title="John Walton on Understanding Genesis"&gt;functional account of origins&lt;/a&gt; interpretation, a &lt;a href="http://www.desiringgod.org/articles/science-the-bible-and-the-promised-land"&gt;preparation of the land&lt;/a&gt; view, a &lt;a href="http://www.reasons.org/explore/topic/age-of-the-earth"&gt;day-age&lt;/a&gt; view, or with the Fathers yet other readings, there are &lt;em&gt;many&lt;/em&gt; legitimate ways of reading Genesis 1 apart from literal 24-hour days, and all of them within the bounds not only of orthodoxy but also of the affirmation of inerrancy.&lt;a href="#fn13" class="footnote-ref" id="fnref13"&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I also do not think that one must affirm inerrancy to be a healthy Christian—though I &lt;em&gt;do&lt;/em&gt; think it is quite helpful and important, I do &lt;em&gt;not&lt;/em&gt; think it is essential for salvation or indeed for a great deal of sanctification.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;In particular, I have not spent enough time thinking carefully about the ramifications of e.g. the Chicago Statement on Inerrancy to know whether I can affirm it meticulously.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;For those of you “in the know” I basically take John Sailhamer’s “preparation of the land” view of Genesis 1.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;If you want a detailed exploration of the history of the church’s intepretation of the creation account in particular for its first millennium and a half, see Robert Letham, “‘In the Space of Six Days’: The Days of Creation from Origen to the Westminster Assembly,” WTS 61:2 (1999) 149–174.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;Warfield helped formulate our modern explications of the doctrine, and Machen was one of its firmest defenders in the modernist controversy that embroiled the American denominations early in the 20th century; he quite literally stands at the head of the fundamentalist tradition that spanned the 20th century.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;And particularly, what used to be called “natural history,” as my friend &lt;a href="http://www.vernonking.org"&gt;Vernon King&lt;/a&gt; pointed out in a recent conversation.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;For my part, I have to deal with the fact that the most straightforward reading is &lt;em&gt;not&lt;/em&gt; the old-earth reading of the text, and &lt;em&gt;especially&lt;/em&gt; with the difficulty of reading something besides an actually global flood in the Flood narrative. I fully grant that this is the weakness of my position.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;More on this below in the &lt;a href="#textual-issues"&gt;Textual Issues&lt;/a&gt; section below.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;Private correspondence with Jerrad Genson, February 12, 2014.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;And yes: here I &lt;em&gt;am&lt;/em&gt; calling out Ken Ham a bit. Every time he and his fellow travelers assert that the evidence &lt;em&gt;obviously&lt;/em&gt; points to a young earth and a global flood, they are being remarkably uncharitable to anyone who disagrees with them—and remarkably arrogant.&lt;a href="#fnref10" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn11"&gt;&lt;p&gt;Note: this still very much leaves the old-earth creationist with problems with the Flood and Noah’s Ark, which are part of the latter, historical section. It is difficult, if not impossible, to draw a strong line between the literary character of Genesis 2–11 and that of Genesis 12ff.&lt;a href="#fnref11" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn12"&gt;&lt;p&gt;A final aside, with &lt;em&gt;every&lt;/em&gt; intent to be provocative: consider that given the physical limitations of the ark Noah built, God &lt;em&gt;certainly&lt;/em&gt; had to engage in a massive program of theistic evolution to repopulate the earth after a global flood. See &lt;a href="https://answersingenesis.org/natural-selection/speciation/"&gt;here&lt;/a&gt; for an example of the sort of evasion of the issue that goes on at Answers in Genesis dealing with precisely this issue. This is the worst sort of hair-splitting. Again: we should have the intellectual integrity to admit the weaknesses of our positions.&lt;a href="#fnref12" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn13"&gt;&lt;p&gt;On Michael Gungor, who sparked this whole discussion this time around— To be clear, I think Michael Gungor is mistaken about Genesis 1–11. I think a mythologizing reading of those chapters is textually misguided and spiritually unhelpful. But I also think that he might have landed in a position more like the one I embrace—a position that affirms both the inerrancy of Scripture &lt;em&gt;and&lt;/em&gt; an old earth—if such an option had been presented to him coherently, rather than ruled out by young earth creationists as just as heretical and dangerous as the mythological view. I do &lt;em&gt;not&lt;/em&gt; think Michael Gungor is a heretic; I simply think he is wrong on this in ways that may set his feet on an unhelpful trajectory—and I hope that he might have conversations with folks who can help him come to reconcile the inerrancy of Scripture with an old earth.&lt;a href="#fnref13" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>Pushing Into C's Corner Cases</title><link href="http://www.chriskrycho.com/2014/pushing-into-cs-corner-cases.html" rel="alternate"></link><published>2014-08-12T09:00:00-04:00</published><updated>2014-08-12T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-08-12:/2014/pushing-into-cs-corner-cases.html</id><summary type="html">&lt;p&gt;I’m working on a project that is all in C because of its long history and legacy. We’re slowly modernizing the codebase and writing all our new code in Python (using NumPy, C extensions, and so on for performance where necessary). Occasionally, I just want to bang my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m working on a project that is all in C because of its long history and legacy. We’re slowly modernizing the codebase and writing all our new code in Python (using NumPy, C extensions, and so on for performance where necessary). Occasionally, I just want to bang my head against the wall because there are things we can do so simply in any modern language that you just can’t do in any straightforward way in C. For example, I have file writers that all work &lt;em&gt;exactly&lt;/em&gt; the same way, with the single exception that the format string and the data that you put into it vary for each file.&lt;/p&gt;
&lt;p&gt;In Python, this would be straightforward to handle with the class machinery: you could simply specify the format string in each inheriting class and define the data points to be supplied at the top of an overriding function, call the parent function with &lt;code&gt;super()&lt;/code&gt; and be done.&lt;/p&gt;
&lt;p&gt;To do something similar in pure C is nearly impossible. You can supply a format string with each function (or module, or however you separate out the code), and if you feel especially clever you could convert all your data types to strings and pass them as a list to be printed by the standard function. The net result would be &lt;em&gt;longer&lt;/em&gt; and &lt;em&gt;less maintainable&lt;/em&gt; than simply having a set of essentially-duplicate functions, though.&lt;/p&gt;
</content><category term="software development"></category></entry><entry><title>Whiplash</title><link href="http://www.chriskrycho.com/2014/whiplash.html" rel="alternate"></link><published>2014-07-14T23:15:00-04:00</published><updated>2014-07-14T23:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-14:/2014/whiplash.html</id><summary type="html">Get a big contract&amp;mdash;jubilation! Watch your daughter almost choke to death&amp;mdash;terror!</summary><content type="html">&lt;p&gt;I have a pretty severe case of emotional whiplash&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; at the moment. In the last eight hours, I have gone from jubilant to the most worried I have ever been to simple, utter exhaustion.&lt;/p&gt;
&lt;p&gt;This afternoon, I heard back from a then-potential and now-actual client who hired me and a friend to design and build a web application for them. They are going to pay us a substantial sum to do it. This is &lt;em&gt;fantastic&lt;/em&gt;. I have been hoping this particular opportunity would come through, because everything about it is appealing to me. It is an interesting application; I like the material it involves (a &lt;em&gt;lot&lt;/em&gt;); I will learn a bit along the way; I will get to stretch my front-end design chops again; I will make some seriously good money at it. I am, in a word, stoked.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Fast forward four and a half hours. Jaimie and I are helping Ellie wrap up her evening activities and getting ready to take her upstairs and put her to bed. Kate is lying in a little sleep-rocker—her favorite spot to sleep during the day. She makes a bit of a coughing noise; we note it but think little of it (babies &lt;em&gt;often&lt;/em&gt; make that kind of noise). A few minutes later, Jaimie is walking by and glances at Kate. Our baby girl is bright red and turning purple. She grabs her. “Kate! Breathe! Breathe, little girl!” She isn’t breathing; she is getting upset but she isn’t crying. (Babies cry at the drop of a hat.) Little bubbles at her mouth. Jaimie is doing the baby variation of the Heimlich maneuver. I am nearly helpless; I keep using my finger to pull Kate’s mouth open; she finally latches onto the finger, starts sucking, and breathes.&lt;/p&gt;
&lt;p&gt;Thank God.&lt;/p&gt;
&lt;p&gt;We hold her. She breathes—&lt;em&gt;mostly&lt;/em&gt; normally. We keep paying close attention to her. The couple times I let her lay down on her back she starts seizing up and turning red again within a few minutes until I pick her up and pat her vigorously and she calms down again. We manage to get Ellie in bed. We call the doctor; she sends us to the hospital. A friend comes to watch Ellie and we run out the door. It is a 30-minute drive (and I am speeding, and Jaimie is holding Kate to make sure she keeps breathing).&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Kate wheezes off and on the whole way there. She still isn’t crying, and she should be. She hasn’t eaten in six hours; she should be hungry. Why isn’t she hungry?&lt;/p&gt;
&lt;p&gt;They admit us. They get all her vitals. The doctor is a kind, soft-spoken man with the last name Saad; I like him. He asks dozens of good questions. He tells us, “95–99% of the time, this is just reflux. We just care about that other 1% of the time.” There is no reliable way to stop a baby from choking on milk she spits up because of reflux.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; They are going to do an EKG and chest X-rays just to make sure she is okay.&lt;/p&gt;
&lt;p&gt;She seems to be okay. She is eating again—like a champ, like she normally does, like she should be.&lt;/p&gt;
&lt;p&gt;I go home to relieve the wonderful friends who are sitting in our house to make sure Ellie is fine. Ellie is still sleeping. Good.&lt;/p&gt;
&lt;p&gt;Breathe.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Whiplash. I am no less excited about that project. And my youngest daughter almost died tonight. Had she started choking while we were upstairs, or while we were all asleep tonight, God only knows what would have happened. We are grateful to God that we were feet away from Kate, that Jaimie “happened” to look at her just then. We are grateful, too, for the extra money coming in; it will help with the so-very-worth-it-but-not-easy-on-a-seminary-budget cost of an emergency room visit.&lt;/p&gt;
&lt;p&gt;Ice cream.&lt;/p&gt;
&lt;p&gt;I think I’m going to sleep now. Hopefully tomorrow is less extreme.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;So much so that I am having a hard time spelling “whiplash” correctly. I keep typing “whiplast”.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;If a police officer stops us, I will explain. He or she will understand. They will help us get to the hospital faster.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Terrifying, just a bit? Yes.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[family"></category><category term="Kate]"></category></entry><entry><title>I Wrote It Wrong</title><link href="http://www.chriskrycho.com/2014/i-wrote-it-wrong.html" rel="alternate"></link><published>2014-07-12T20:07:00-04:00</published><updated>2014-07-12T20:07:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-12:/2014/i-wrote-it-wrong.html</id><summary type="html">A few lessons I learned from a previous blog post&amp;mdash;rhetorical effectiveness in writing is a non-trivial endeavor to say the least.</summary><content type="html">&lt;p&gt;I wrote a &lt;a href="http://www.chriskrycho.com/2014/dont-be-rude.html"&gt;blog post&lt;/a&gt; earlier, and it seems I got it wrong (see the &lt;a href="http://www.chriskrycho.com/2014/dont-be-rude.html#edit-and-addendum"&gt;addendum&lt;/a&gt; at the end of the post). That is always an unpleasant experience, to say the least.&lt;/p&gt;
&lt;p&gt;The one upside to this whole affair? I took away two important lessons: The first was a reminder to read others generously, even when frustrated with them—a point I spelled out a bit in my &lt;a href="http://www.chriskrycho.com/2014/dont-be-rude.html#edit-and-addendum"&gt;edit-and-addendum&lt;/a&gt; to the original post. The other about the effect of certain rhetorical structures in my writing. The &lt;em&gt;idea&lt;/em&gt; I had here was good (even if I may have misread the trigger for writing the post in the first place), but it was badly executed, and there were &lt;em&gt;structural&lt;/em&gt; reasons for that, having to do with the weight and balance in the original piece. What follows is just me self-critiquing in public: learning about the process of writing “out loud”, as it were.&lt;/p&gt;
&lt;p&gt;Though the example I am critiquing is specifically a blog post, a lot of the principles here apply equally to other media, including forms as varied as long-form essays, preaching, lecturing, and even writing fiction.&lt;/p&gt;
&lt;section id="my-goals" class="level4"&gt;
&lt;h4&gt;My Goals&lt;/h4&gt;
&lt;p&gt;I meant the story I offered as an illustrative example of a broader point. To wit, I had had a bad customer experience with a given company, and it left a bad taste in my mouth that pushed me away from using that company’s software in the future. The story was meant to illustrate that even a single bad experience with a company can emotionally outweight a lot of positive experience with the company, and that emotions tend to fade slowly over time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-approach" class="level4"&gt;
&lt;h4&gt;My Approach&lt;/h4&gt;
&lt;p&gt;I approached the piece with a fairly typical rhetorical structure for this kind of thing: introduce a thesis or idea, detour through a specific example to illustrate it, then come back and drive the main point home. This was a good idea, but the execution failed, and it failed for fairly obvious reasons on reflection.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-problems" class="level4"&gt;
&lt;h4&gt;The Problems&lt;/h4&gt;
&lt;p&gt;The first problem was the distribution of the content. The original piece was right around a thousand words long. Of those, some six hundred words were devoted to specific details of my interaction with the company in question. Another hundred words had to do with my follow-up decisions about the products involved. In the whole piece, then, I spent over two thirds of my time talking about the specific example, and only about a third making the actual point I wanted to make. This weighted the content so that the focus was on the details of the story, rather than the bigger picture issue that I walked away with a bad taste in my mouth from my interactions with the company’s customer service representative.&lt;/p&gt;
&lt;p&gt;Second, the story itself was &lt;em&gt;far&lt;/em&gt; too specific for my aims. I put in quotes from our email exchange, which entirely distracted from the point I wanted to make. It led readers to see whether they also perceived the emails as I had. While this was helpful for leading me to reevaluate the content of the emails, it also completely undercut the point of the post—a point, I should note, whose validity is entirely independent of the details of the incident I used to illustrate it. When I am illustrating a point, I need to let the illustration do the work of &lt;em&gt;illustrating&lt;/em&gt;, without letting the details of the illustration come to the fore in this way. That means eliding all details but those actually essential to make the point. The story isn’t the point, nor are its details. It is there to serve the end of the thesis, and nothing more. The minute it does more than that, it needs to get out of the way.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lesson-learned" class="level4"&gt;
&lt;h4&gt;Lesson learned&lt;/h4&gt;
&lt;p&gt;Those two issues combined to shift the rhetorical effect from what I intended—a general discussion of the need to make sure you treat customers with respect—to something else entirely. Instead of making my point, the example distracted from it. I hope in the future to learn from this by doing two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keeping the emphasis on arguing for the thesis, &lt;em&gt;not&lt;/em&gt; on an illustration present only to personalize the thesis, especially by keeping the length of the illustration down.&lt;/li&gt;
&lt;li&gt;keeping the details of any illustration used to the minimum essential to make the point at hand (whether illustrating the whole argument or just one part of it).&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
</content></entry><entry><title>Don't Be Rude</title><link href="http://www.chriskrycho.com/2014/dont-be-rude.html" rel="alternate"></link><published>2014-07-12T15:30:00-04:00</published><updated>2014-07-12T15:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-12:/2014/dont-be-rude.html</id><summary type="html">Customer service matters. In this post, I explain how I bid a company adieu because they talked down to me. Don&amp;lsquo;t be like them.</summary><content type="html">&lt;section id="note" class="level6"&gt;
&lt;h6&gt;Note&lt;/h6&gt;
&lt;p&gt;I have left the original post here as I wrote it, but there is an important &lt;a href="#edit-and-addendum"&gt;addendum&lt;/a&gt; at the bottom of the post that you should make sure to read (and note in particular the &lt;a href="#further-addendum"&gt;further addendum&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This post came off as pretty critical of MarketCircle, and that &lt;em&gt;really&lt;/em&gt; wasn’t my point. I wanted to use a bad experience I had with MarketCircle to illustrate a general principle, &lt;em&gt;not&lt;/em&gt; to poke at any particular company. I did that poorly in this particular piece; for some follow-up on that see &lt;a href="http://www.chriskrycho.com/2014/i-wrote-it-wrong.html"&gt;this post&lt;/a&gt; which I wrote later that day, analyzing how and why this piece so spectacularly failed to accomplish my desired goals.&lt;/p&gt;
&lt;p&gt;In any case, I do not want this piece to turn people off of using MarketCircle’s software. I leave the unedited version below because I believe in having the intellectual integrity to own one’s mistakes. This was one of mine.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The quickest way to make me bid your company or product farewell is to patronize me. Don’t talk down to me. Never treat me like anything but an adult. The moment you do, I am gone.&lt;/p&gt;
&lt;p&gt;Given which: farewell &lt;a href="https://www.marketcircle.com"&gt;MarketCircle&lt;/a&gt;, and adieu &lt;a href="https://www.marketcircle.com/billingspro/"&gt;Billings&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A story: When I started working as a freelance software developer on the side a few years ago,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I looked at my options for tracking time and invoicing clients. I eventually settled on &lt;a href="https://www.marketcircle.com/billingspro/"&gt;Billings&lt;/a&gt;, by &lt;a href="https://www.marketcircle.com"&gt;MarketCircle&lt;/a&gt;. It’s solid software: it is reliable, works well, and does everything I need it to, including tracking different clients and projects easily and sending them estimates or invoices. Best of all, from my perspective, it was a local app. You &lt;em&gt;could&lt;/em&gt; sync with a server out in the cloud somewhere via Billings Pro, but you did not have to, and you could use the Mac-native application, not some web app out there. Last but not least, it had a &lt;em&gt;great&lt;/em&gt; menubar app. I was sold, and I gladly dropped $40 for a single-user license.&lt;/p&gt;
&lt;p&gt;Fast forward to June 2013. MarketCircle, like a lot of software development companies, came to the conclusion that it is &lt;em&gt;really&lt;/em&gt; hard to develop software as a series of discrete releases, for which you get people to pay over and over again. Perfectly sensibly, they &lt;a href="https://www.marketcircle.com/blog/streamlining-the-billings-product-line/"&gt;discontinued development&lt;/a&gt; on and support for their standalone software and provided &lt;a href="https://www.marketcircle.com/billingspro/offer/"&gt;a (discounted!) migration path&lt;/a&gt; for users to upgrade to the Pro (syncing, etc.) version of the software. Note that they did &lt;em&gt;not&lt;/em&gt; do anything to disable functionality in existing Billings installations—just provided an upgrade path and stopped developing it. That is the right way to handle it. So far so good.&lt;/p&gt;
&lt;p&gt;I am a software developer, and I have seen the pressures that exist in this industry. This move made good business sense to me, and I liked Billings as a product. I was quite willing to look at their Pro plan, and possibly even to invest in it, despite the fact that I did not &lt;em&gt;need&lt;/em&gt; it, because I believe in supporting the developers of the software I use.&lt;/p&gt;
&lt;p&gt;I emailed them a couple follow-up questions. One of them, and among the most important to me because of how I work for one particular client:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I note that in Billings Pro, unlike in Billings, I can’t track multiple slips simultaneously. This is problematic for me, as I often do this to keep track of hours worked against a “Personal projects” bit so I can see my hourly variations. That’s a make-or-break kind of thing for me—any chance you guys will change that behavior?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To elaborate: I like to track my total hours worked every week in a simple way, so I have a “Personal” timer going alongside the project timer for whatever I am doing. The fact that Billings let me do this was one of the selling points for me. Even so, I did not necessarily expect them to support the functionality going forward. The response I got started out reasonably enough:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We allow you to have multiple active timers, but you can only time one task at a time in both applications. In Billings, there was a bug with this, however, this was corrected in Billings Pro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus far, fair enough: they saw this as a bug. I disagreed, but I understand.&lt;/p&gt;
&lt;p&gt;Then this, though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While we all multi-task we cannot work on two billable items at once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Whoops.&lt;/em&gt; You just talked down to me.&lt;/p&gt;
&lt;p&gt;You also clearly didn’t read the original email, because you followed up by asking this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you explain a little more about what you track and how and I can see if there’s a different way to do this in Billings Pro that will give you the same result?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hmm. Let me get this straight: I told you what I track and how I use your software, and you thought the appropriate response was to instruct me on what I can and cannot do with it? Clearly not having even read the original question carefully?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nope.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let me explain: you don’t tell your customers that they can’t use your software in ways peculiar to them. You particularly do not do so as though explaining to a child that we simply cannot do certain things. If a user has a quirky way of using your software, you can of course say you don’t intend to support that quirky behavior—but you do not get to tell them that their unanticipated usage is &lt;em&gt;wrong&lt;/em&gt;, and especially not in a condescending tone&lt;/p&gt;
&lt;p&gt;I cancelled my Billings Pro trial within five minutes of receiving that email. The original software I kept: I was at a busy time in the year, switching time- tracking software is non-trivial, and it wasn’t hurting me a bit to keep using the original software anyway. As I am evaluating time tracking software again, not least because I do not know through how many OS X upgrades Billings will continue to perform properly, MarketCircle isn’t on the list. It only took one bad experience to leave a bad taste in my mouth and convince me to move on.&lt;/p&gt;
&lt;p&gt;At this point, it looks like I’m headed to &lt;a href="http://www.getharvest.com/"&gt;Harvest&lt;/a&gt;. It turns out they don’t support multiple timers, either. But they haven’t talked down to me, and that makes all the difference in the world.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There is a takeaway here for anyone paying attention. Namely: respect your customers. Do not talk down to them. Do not assume their uses for your software are wrong, or stupid, even if they are not what you intended. (If anything, that means your users have thought of use cases you didn’t.)&lt;/p&gt;
&lt;p&gt;It is going to far to say that the customer is always right. Sometimes, the customer is wrong. Sometimes, &lt;em&gt;I&lt;/em&gt; am wrong as a customer. But the customer &lt;em&gt;is&lt;/em&gt; always someone to respect. The moment you stop treating your customer with respect is the moment you cross the line into being a company with which I want to do business to one I will avoid.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;
&lt;section id="edit-and-addendum" class="level6"&gt;
&lt;h6&gt;Edit and Addendum&lt;/h6&gt;
&lt;p&gt;When I posted this on App.net, a few thoughtful acquaintances &lt;a href="https://alpha.app.net/chriskrycho/post/34459957"&gt;pushed back&lt;/a&gt;, noting that the customer service interactions did &lt;em&gt;not&lt;/em&gt; read as condescending to them. It is possible that I misread the original customer service rep’s tone in interacting in me. This is a constant danger in dealing with text-only communication. I take some responsibility for that—but I also note that the frustration had already built up in the course of a conversation that had already included a number of failures to respond to address or respond to my questions and concerns.&lt;/p&gt;
&lt;p&gt;I should also note that I didn’t mean this as a critique of MarketCircle in particular, though re-reading the post in light of the response, it is clear it comes off more that way than I intended. My interactions with MarketCircle were meant simply to illustrate the broader point: customer service matters, and even one bad customer experience can turn off a customer.&lt;/p&gt;
&lt;p&gt;But the takeaway from this addendum is a bit different: I can sympathize with the difficulties facing the customer service rep. I failed at precisely the same task of communicating my intent in writing effectively. Now, whether that rep meant it the way I took it or the way others took it in reading the post, he certainly did not accomplish what he meant to with the exchange. My sympathies are with him. I am perfectly willing (though not perhaps &lt;em&gt;happy&lt;/em&gt;; humility is rarely particularly pleasant) to say that I got it wrong here.&lt;/p&gt;
&lt;p&gt;All that being said… I still have a bad taste in my mouth, and I am still leery of doing further business with MarketCircle. And that &lt;em&gt;does&lt;/em&gt; make the original point in a way, because the emotional response from a bad experience, even one you did not intend, doesn’t fade quickly or at all, even in the face of reasonable articulations of alternative explanations for the bad experience. You have to work at a good customer experience continually.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="further-addendum" class="level6"&gt;
&lt;h6&gt;Further Addendum&lt;/h6&gt;
&lt;p&gt;MarketCircle actually saw this piece—presumably via my link on Twitter—and got back to me, looking to fix this issue, which I really appreciated. In some sense, then, they &lt;em&gt;are&lt;/em&gt; doing exactly what I advocated in this piece.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Early 2010, if you’re curious.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>Goodbye, Notifications</title><link href="http://www.chriskrycho.com/2014/goodbye-notifications.html" rel="alternate"></link><published>2014-07-11T18:50:00-04:00</published><updated>2014-07-11T18:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-11:/2014/goodbye-notifications.html</id><summary type="html">The Accidental Tech Podcast guys inspired me to change how I handle notifications for social media&amp;mdash;silencing them all. So far, I like it a lot.</summary><content type="html">&lt;p&gt;In &lt;a href="http://atp.fm/episodes/73" title="73: Notifications Duck"&gt;this week’s episode&lt;/a&gt; of &lt;a href="http://atp.fm"&gt;Accidental Tech Podcast&lt;/a&gt;, hosts Casey Liss and John Siracusa mentioned that they have the sound aspect of notifications disabled on their iDevices (Liss’ iPhone, Siracusa’s iPod Touch). Strange though it might seem, the thought hadn’t occurred to me. I like getting the notice of things having happened on my social media accounts, but I’d concluded recently that I actively disliked having the interruption even of a buzz in my pocket: it forces a mental context shift which inevitably degrades my concentration on whatever task I am about.&lt;/p&gt;
&lt;p&gt;I spent ten minutes this evening and went through my iPhone’s notification settings. The only things which have audible or vibrating notifications now are phone calls (including FaceTime) and text messages. Everything else I disabled. Now, I still have notifications on a number of other items: they can show up in Notification Center, and they can put markers on the home screen apps. After all: if I already have my phone out, it is almost certainly no problem to see a notification come in, and I definitely want to be able to glance at the app on my home screen and see that someone has interacted with me in some way. But when I &lt;em&gt;don’t&lt;/em&gt; have my phone out? It is unhelpful. It is distracting.&lt;/p&gt;
&lt;p&gt;I actually turned on app badges for a number of apps for which I had previously disabled them, because they had been extraneous when I was getting noises or buzzes for the apps and services in question. I also tweaked a number of other apps: some can show app badges but not appear in notification center. Most cannot show anything on the lock screen at all. If I want to check on notifications, I can look explicitly.&lt;/p&gt;
&lt;p&gt;We will see how the experiment goes. Even just a few hours in, though, I can already say I like it. I did &lt;em&gt;not&lt;/em&gt; get any buzzing in my pocket when a few people interacted with me on App.net, or Instagram, or anywhere else. And, social media being what it is, none of those interactions are temporally important (however much it might feel otherwise). They will still be there waiting when I get back.&lt;/p&gt;
&lt;p&gt;Now, this does not automatically make me more productive. I still need self control to be most effective in using my time. It does take away a few of the most obvious distractions and interruptions that make it hard to focus, though, and that is &lt;em&gt;definitely&lt;/em&gt; a win.&lt;/p&gt;
</content></entry><entry><title>Economies of Scale</title><link href="http://www.chriskrycho.com/2014/economies-of-scale.html" rel="alternate"></link><published>2014-07-11T10:35:00-04:00</published><updated>2014-07-11T10:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-11:/2014/economies-of-scale.html</id><summary type="html">In which I strongly critique Robert Gates' years-old comments on the cost of the B-2, because I'm a pedant.</summary><content type="html">&lt;p&gt;I was reading through an interesting Ars Technica &lt;a href=""&gt;article&lt;/a&gt; on the new Long Range Strike Bomber (LRS-B) proposal the Air Force is soliciting. It’s generally interesting to me in part because I’ve worked on a related project in the past, and we talked fairly often about how the LRS-B program might impact it. The article is worth your time. This quote from Robert Gates in the middle of the article, which touches on the program the LRS-B would replace, caught my attention, though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What we must not do is repeat what happened with our last manned bomber. By the time the research, development, and requirements processes ran their course, the aircraft, despite its great capability, turned out to be so expensive—$2 billion each in the case of the B-2—that less than one-sixth of the planned fleet of 132 was ever built.&lt;/p&gt;
&lt;p&gt;Looking ahead, it makes little sense to pursue a future bomber—a prospective B-3, if you will—in a way that repeats this history. We must avoid a situation in which the loss of even one aircraft—by accident, or in combat—results in a loss of a significant portion of the fleet, a national disaster akin to the sinking of a capital ship. This scenario raises our costs of action and shrinks our strategic options, when we should be looking to the kind of weapons systems that limit the costs of action and expand our options.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, in one sense, Gates was absolutely right. On the other hand, he seems to have committed a classic blunder in dealing with these kinds of costs: economies of scale matter. Part of the reason the per-unit price of the B-2 was so high was precisely that we only bought 20 of them. While the units were individually expensive to manufacture and maintain, because of unique materials used in their construction and so on, they were much &lt;em&gt;more&lt;/em&gt; expensive to manufacture in small numbers than they would have been in large numbers. There are basically two reasons for this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;The manufacturing process couldn’t do what it does best (turn out large numbers of standardized parts and thereby reduce costs).&lt;/li&gt;
&lt;li&gt;The costs of development—research, software development, etc.—were all distributed over a much smaller pool than they would have been had the government purchased more aircraft.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This second point is incredibly important to understand. It is certainly true that the absolute cost of buying 132 B-2s would have been high, possibly astronomically and unaffordably high. What it would &lt;em&gt;not&lt;/em&gt; have been is $264 billion. Even assuming that manufacture costs were fully half of the cost-per- plane (almost certainly not the case), it would have been barely over half that. Assume that the B-2 cost $1B per plane to build, and that the other $10B was research. Well, that’s still an expensive plan… but the total cost is something like $144B, not $264B. Those economies of scale matter.&lt;/p&gt;
&lt;p&gt;This same reality is a point made later in the article by another commentator, but I couldn’t let it go. Things like this drive me nuts, because they’re such a common failing in our political discourse. Ignorance of basic economics from the people making decisions with this kind of economic impact is profoundly unhelpful.&lt;/p&gt;
</content></entry><entry><title>A Few Theses on Blogging</title><link href="http://www.chriskrycho.com/2014/a-few-theses-on-blogging.html" rel="alternate"></link><published>2014-07-09T21:15:00-04:00</published><updated>2014-07-09T21:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-09:/2014/a-few-theses-on-blogging.html</id><summary type="html">Twelve thoughts&amp;mdash;only loosely connected&amp;mdash;on writing blog posts consisting simply of a series of loosely connected thoughts.</summary><content type="html">&lt;p&gt;I am a habitually—even chronically—long-winded blogger. I always have been. I sat down a few weeks ago to write up an explanation of my running approach, and I haven’t finished it yet… because it is over 2,500 words long and growing rapidly longer. But as I have considered my approach to blogging of late, and as I have also been posting fairly regularly on App.net (my social media locale of choice), it occurred to me:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Blog posts do not have to be the lengthy things I usually make of them.&lt;/li&gt;
&lt;li&gt;I often write up a series of thoughts—not necessarily an “argument” or indeed anything more than a series of connected thoughts—on App.net, connecting them via the ‘reply’ mechanism and enumerating them. Rather like I am here.&lt;/li&gt;
&lt;li&gt;Doing so inevitably clutters up the streams of anyone following me.&lt;/li&gt;
&lt;li&gt;That clutter may or may not be problematic: some folks may enjoy those connected thoughts. Others may not.&lt;/li&gt;
&lt;li&gt;For those that &lt;em&gt;do&lt;/em&gt; enjoy those connected thoughts, a blog post like this would probably serve just as well.&lt;/li&gt;
&lt;li&gt;For those who do &lt;em&gt;not&lt;/em&gt; enjoy them… well, this sort of thing would be a welcome way to clear their streams up without causing me any particular difficulty.&lt;/li&gt;
&lt;li&gt;Using lists does not automatically mean I have given in to the constant temptation to make my blogging about driving views.&lt;/li&gt;
&lt;li&gt;Seriously.&lt;/li&gt;
&lt;li&gt;This blog will &lt;em&gt;never&lt;/em&gt; drive substantial amounts of traffic. That is fine by me. Indeed, I would probably feel a bit odd if it did.&lt;/li&gt;
&lt;li&gt;Therefore, when I have those sorts of thoughts-in-a-line in the future, I will do as I have done here. I will write a ‘listicle’ (the shame!) and share it for others to partake of—or not!—as they please.&lt;/li&gt;
&lt;li&gt;Taking that approach will almost certainly free me up to blog more briefly when I feel like it, as well. That, too, can only be a good thing.&lt;/li&gt;
&lt;li&gt;After all: I am happier when I am writing.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;As I have so often &lt;a href="http://www.chriskrycho.com/2014/the-long-race.html"&gt;noted before&lt;/a&gt;…&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[listicles]"></category></entry><entry><title>Patriotism and the Church</title><link href="http://www.chriskrycho.com/2014/patriotism-and-the-church.html" rel="alternate"></link><published>2014-07-04T11:30:00-04:00</published><updated>2014-07-04T11:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-07-04:/2014/patriotism-and-the-church.html</id><summary type="html">&lt;p&gt;A few days ago, Trevin Wax shared a &lt;a href="http://thegospelcoalition.org/blogs/trevinwax/2014/07/02/why-younger-evangelicals-may-feel-uneasy-in-a-patriotic-church-service/" title="Why Younger Evangelicals May Feel Uneasy in a Patriotic Church Service"&gt;thoughtful article&lt;/a&gt; on younger evangelicals’ discomfort with patriotic services, noting:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the one hand, pastors want to demonstrate their gratitude toward those who have served their country well – heroes who put themselves in harm’s way for the good of their neighbors …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A few days ago, Trevin Wax shared a &lt;a href="http://thegospelcoalition.org/blogs/trevinwax/2014/07/02/why-younger-evangelicals-may-feel-uneasy-in-a-patriotic-church-service/" title="Why Younger Evangelicals May Feel Uneasy in a Patriotic Church Service"&gt;thoughtful article&lt;/a&gt; on younger evangelicals’ discomfort with patriotic services, noting:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the one hand, pastors want to demonstrate their gratitude toward those who have served their country well – heroes who put themselves in harm’s way for the good of their neighbors. They are patriotic citizens who love their country and don’t want to be seen as contributing to cynicism or apathy.&lt;/p&gt;
&lt;p&gt;On the other hand, pastors express reservations about incorporating patriotic songs and anthems into a worship service. They worry that too many people are already confused about the relationship between Christianity and the culture, the church and the country, and that such services exacerbate the problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He suggested four basic reasons for this discomfort and confusion:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Extreme Experiences in the Past&lt;/li&gt;
&lt;li&gt;Decreasing Patriotism Among Millennials&lt;/li&gt;
&lt;li&gt;Shifting Cultural Currents&lt;/li&gt;
&lt;li&gt;Failure to Fully Appreciate Time and Place&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;His analysis of the overall situation was fairly helpful, and I recommend you read it. However, in his final point, he argued:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some younger evangelicals see any patriotic expression as a compromise with worldly power. Their approach is to take the flag out of the sanctuary, never sing a patriotic song, and never mention a patriotic holiday.&lt;/p&gt;
&lt;p&gt;I think this overreaction has unfortunate and unintended repercussions. It lends itself to a Gnostic idea that downplays our embodied state (as humans) within a state (a nation). We are rooted in time and place, and this is according to God’s good plan.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Unfortunately, I think Wax gets this wrong, and younger evangelicals get it basically right, at least &lt;em&gt;in the context of the church&lt;/em&gt;. It is one thing to say that when younger evangelicals reject any sense of patriotism at all, that is an unhealthy and unhelpful move. If Wax had stopped there, I would have agreed with him. We do undervalue our embodied context and we do need a greater sense of the goodness of our geographical and temporal contexts in God’s providence. We certainly should be grateful the blessings of liberty that we enjoy, and I think as Americans we ought to celebrate those things. Independence Day (and other similar holidays such as Memorial Day and Veterans Day) are parts of our culture in which we as Christians ought to participate. We should participate in a chastened way, perhaps, recognizing the mixed legacy of our nation’s history, but we should participate.&lt;/p&gt;
&lt;p&gt;But we should not participate &lt;em&gt;when we act as the church&lt;/em&gt;. On Sunday morning, we should never be singing the Star Spangled Banner, because we gather precisely to proclaim our allegiance to a king and our citizenship to a kingdom that transcends national borders just as it transcends ethnicity and culture. It does not &lt;em&gt;blur out&lt;/em&gt; those differences, but it does not set that as ultimate or allow allegiance to them. We can see that an anthem to Asian or Caucasian or Black ethnicity would be inappropriate in the church (even as we affirm the goodness of Asian, Caucasian, Black, and other ethnicities and cultures). Singing patriotic songs in the church or preaching a sermon on American history is no less inappropriate. It divides precisely where the gospel calls us to unity.&lt;/p&gt;
&lt;p&gt;This is ultimately about a confusion of spheres. The church is the place where the kingdom of God has broken into the present age. The nation-state is the place where his reign has not yet been established. Confusing the two does no one any good. We long for the day when every nation &lt;em&gt;is&lt;/em&gt; part of the kingdom of heaven, but if we blur out the distinctions between the two &lt;em&gt;today&lt;/em&gt;, we will produce confusion and unhealthy attitudes toward on or the other.&lt;/p&gt;
&lt;p&gt;To take one obvious example: Wax notes that younger evangelicals seem uncomfortable with God-and-country language—and younger evangelicals are &lt;em&gt;right&lt;/em&gt; to be uncomfortable with such language. Whenever we have conflated the work of God in the spread of the gospel to America, we have ended up in all sorts of confusion. We end up political servants to one party or the other, making all sorts of un-Christian ethical compromises along the way. We end up affirming approaches to foreign and domestic policy that bear little resemblance to the ethic of Christ we are taught by the apostles. To pick just one specific-but-controversial example: we find it hard to remember that we have more in common with our Palestinian brothers and sisters in Christ than with our non-Christian Israeli friends.&lt;/p&gt;
&lt;p&gt;We should never hang an American flag in our churches. We should never sing the national anthem in our churches. We should never leave any doubt when we gather together that we come as one people, joined in Christ across every line that exists in this world: ethnic, cultural, linguistic, geographical, political, temporal. We should never, ever confuse our joyful embrace of our being situated in this place and time with our ultimate allegiance to a kingdom still to come. We should skip the patriotic services and take the opportunity instead to remind people both that every blessing we have in this nation is from God &lt;em&gt;and&lt;/em&gt; that this nation is but one of many lands of sojourn for his people. We should teach each other to be glad that this is our land, but to look with all the more longing toward our future home when all nations will bring their treasures into the New Jerusalem. We should &lt;a href="http://www.youtube.com/watch?v=oEiXrRmtDIk&amp;amp;feature=kp" title="Land of My Sojourn"&gt;with Rich Mullins&lt;/a&gt; say that we will call this our country and be longing for our home.&lt;/p&gt;
</content></entry><entry><title>A Just and Merciful God</title><link href="http://www.chriskrycho.com/2014/a-just-and-merciful-god.html" rel="alternate"></link><published>2014-06-30T00:00:00-04:00</published><updated>2014-06-30T00:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-06-30:/2014/a-just-and-merciful-god.html</id><summary type="html">God is holy and we ought not ignore his word. He is merciful&amp;mdash;and we ought not ignore his word!</summary><content type="html">&lt;p&gt;My devotional life has been a bit up and down the last few months. It is easy to let it drop off in the midst of all the busyness of the end of a semester, and easy, too, in the midst of caring for a new baby and a recovering wife simply not to find the time for it. But my soul needs to encounter the living God day by day.&lt;/p&gt;
&lt;p&gt;Today’s reading was not exactly scintillating in many ways: reading in Chronicles rarely is. But as I have often reflected in the past several years, Paul had in mind the Old Testament—books like this and Numbers and Leviticus, those we find hardest!—when he told us that &lt;em&gt;all&lt;/em&gt; Scripture is breathed out by God and profitable for us (2 Tim. 3:16). That is no less true of Chronicles’ recounting of the deeds of David’s mighty men or the assembly of Israel to anoint him king than it is of the gospel accounts of Jesus’ life and death. We need all of these pieces to fully understand the work of God.&lt;/p&gt;
&lt;p&gt;A few points I take away from my reading this morning:&lt;/p&gt;
&lt;section id="god-is-holy." class="level4"&gt;
&lt;h4&gt;God is holy.&lt;/h4&gt;
&lt;p&gt;There are two accounts that make this abundantly clear in the section I read today: the death of Uzzah, the judgment on David for his sin with the census. In the case of Uzzah, God brooked no deviation from his clearly articulated correct way for the transportation of the Ark of the Covenant. That Uzzah meant well did not change the reality that he (and indeed all of David’s initial foray to bring the Ark to Jerusalem) had ignored what God had said. Ignoring God’s word is no light matter. We sometimes blanch at the severity of this judgment, but to ignore when God speaks is to make light of his speech—to insult him and quietly rebel in precisely the same way our first parents did in the Garden. It is to say our own wisdom is sufficient when he has expressly given us &lt;em&gt;his&lt;/em&gt; wisdom.&lt;/p&gt;
&lt;p&gt;The second case, God’s judgment for David’s census, is interesting in that the text does not expressly tell us what David’s sin was, yet it is obvious that he did sin and in such a way as to anger God profoundly. Joab, who was instructed to carry out the census, clearly understood that it was wrong; so did David. Given the backdrop of the regulations of censuses in the Pentateuch, it seems that David was going about it for the wrong reasons, and without following the pattern God had laid out.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Yet David went ahead anyway. God responded in judgment. Again: it came down to a simple refusal to do as God had instructed.&lt;/p&gt;
&lt;p&gt;These two accounts remind me that I must obey God. It is as plain and simple as that—whatever the circumstances, whatever apparent justification I might muster for doing otherwise, I need to obey. God is holy; he does not brook unrighteousness. Yes, he has atoned for my unrighteousness, but this was true of David as well (see below). I am still called to live in obedience to him, and insofar as I lead, I am responsible to lead others to do so as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="god-is-merciful." class="level4"&gt;
&lt;h4&gt;God is merciful.&lt;/h4&gt;
&lt;p&gt;This second passage of judgment also highlights God’s mercy. Yahweh sent the angel to bring destruction on the people for David’s sin, but Yahweh &lt;em&gt;relented&lt;/em&gt;, too—and this before David did anything at all. Sometimes we can make the mistake in reading the Old Testament of thinking that Yahweh had always to be appeased &lt;em&gt;before&lt;/em&gt; he would turn back from his righteous judgments, but the reality is the opposite. The vast majority of the time, Yahweh relented simply because of his forbearance and mercy and patience. Many times when the people clearly had not yet relented, the pleas of one righteous person on their behalf led him to stay his hand. Other times, like here, he stayed his judgment without &lt;em&gt;anyone&lt;/em&gt; standing in that position—simply because he is merciful.&lt;/p&gt;
&lt;p&gt;It was this reality with whicih Paul wrestled “out loud,” so to speak, in Romans: how can a just God overlook sins? How can he just pass over and &lt;em&gt;not&lt;/em&gt; execute judgment when judgment is so clearly deserved?&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The answer for Paul was not to make less of the sin God passed over, but to make that much more of Christ. The Old Testament believers like David were saved by the death and resurrection of Christ just as we are. We are called to faith and trust in the one who has made it possible for the righteousness of God to be cause for our &lt;em&gt;hope&lt;/em&gt; rather than despair. And here is the flipside of the call to obey God’s word inherent in those earlier passages: the call to &lt;em&gt;trust&lt;/em&gt; God as he has spoken to us. This is good news, if we will but believe it and cling to it.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;See J. A. Thompson, &lt;em&gt;1, 2 Chronicles&lt;/em&gt;, vol. 9, The New American Commentary (Nashville: Broadman &amp;amp; Holman Publishers, 1994), 160.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;What a contrast to our own reasoning, in an age when we can hardly conceive of the notion of deserved judgment.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Three Month Cycles.</title><link href="http://www.chriskrycho.com/2014/three-month-cycles.html" rel="alternate"></link><published>2014-05-27T20:45:00-04:00</published><updated>2014-05-27T20:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-27:/2014/three-month-cycles.html</id><summary type="html">My general pattern of active focus in one particular area for months at a time, followed by a switch to a different area. I wish I could identify the pattern.</summary><content type="html">&lt;p&gt;Over the past few years, Jaimie and I have observed that I tend to go in cycles in my time-spending habits. The issue is not so much whether I spend my time well, but where I spend it. I will go on a blogging kick for a few months, as I did at the beginning of this year, then not write much at all for a few months—but in the interval spend gobs of time reading, or writing software, or so on. I am not sure what it is that triggers the change, but it has been a fairly regular fixture of my life for at least the length of our marriage.&lt;/p&gt;
&lt;p&gt;Every once in a while, I will even go on a weeks-long video games or television kick. This is bliss for Jaimie, as she finds spending time together playing video games or watching television shows we both enjoy to be one of our best connecting activities. But then the spell comes to an end, and I’m back off to a reading kick, or designing a new website, or embarking on some crazed software development scheme or another. It somewhat drives Jaimie crazy, I suspect.&lt;/p&gt;
&lt;p&gt;I am not entirely sure what makes me tick this way. I do know that in those dedicated phases of work I can knock out significant tasks in the given area where I am motivated at any given time. (I have no doubt, for example, that I could pull off the 50,000 words needed for National Novel Writing Month some November, if I were in a writing mode.) Being able to predict these things would be nice, though. I could make a plan for the year and have a good idea what projects I would accomplish. Instead, I find myself extraordinarily productive in &lt;em&gt;some&lt;/em&gt; area at any given time—but never sure what it will be a month later. That’s not a &lt;em&gt;problem&lt;/em&gt;. It is, however, a bit perplexing.&lt;/p&gt;
&lt;p&gt;To be sure, I can and do force myself to continue on with certain tasks even when they are not particularly holding my interest. Sometimes that discipline is really helpful, and I eventually break through to another extended session of productivity in the same area. Sometimes, though, the interval—whether it is switching from writing to software and back again, or from software to Doctor Who and back again—brings me back fresher and more energized to complete the tasks. That is no surprise; I see the same patterns play out on the time scale of hours and days with my paid work (where just taking a month off is not particularly workable). Again: I just wish I could get a handle on the timing, so I could take advantage of that in making plans.&lt;/p&gt;
&lt;p&gt;Right now, I seem to be in a video games and general blogging mode. I &lt;em&gt;want&lt;/em&gt; to dig back in on my software projects, and I expect I’ll do so soon. And by “soon” I mean: whenever I quit playing more &lt;em&gt;Skyrim&lt;/em&gt;. Probably in about two weeks.&lt;/p&gt;
&lt;p&gt;In the meantime, I think I’m going to start tracking the particular moods I am in so that I can see if there is an established pattern throughout the year. Whether it correlates with the season, my other activities, or nothing at all would be helpful to know. For Jaimie’s sanity, if nothing else.&lt;/p&gt;
</content></entry><entry><title>The Long Race</title><link href="http://www.chriskrycho.com/2014/the-long-race.html" rel="alternate"></link><published>2014-05-24T00:07:00-04:00</published><updated>2014-05-24T00:07:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-24:/2014/the-long-race.html</id><summary type="html">&lt;p&gt;It has been too long since I have written anything—too long not for my audience (small as it is), but for my soul. The last few weeks of class were of course even busier than the rest of the semester, courtesy of a couple major assignments I wrapped up …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It has been too long since I have written anything—too long not for my audience (small as it is), but for my soul. The last few weeks of class were of course even busier than the rest of the semester, courtesy of a couple major assignments I wrapped up and studying for and taking finals, all while doing my normal work as a software developer on the side. Writing simply fell by the wayside, alas. Even my devotions posts simply didn’t happen. And that is all right; there are seasons for all of these things, and it is not as if I didn’t write many thousands of words in late April and early May. They simply were not &lt;em&gt;blogging&lt;/em&gt; words.&lt;/p&gt;
&lt;p&gt;So here I am tonight, writing simply to unwind. I spent much of the day working on various software projects—a pattern I expect to carry throughout the summer. In addition to my regular work for Quest Consultants Inc. back in Norman, I am picking up various web design and development jobs over the summer. God has been gracious in answering prayers for opportunities to pick up extra contracting work, and I have several really excellent opportunities to supplement my 20 hours a week for Quest with other work. That is nice not only financially, but also intellectually. The change of pace between different kinds of work helps me stay fresh on all of them. My own personal &lt;a href="http://www.chriskrycho.com/2014/a-little-crazy.html"&gt;side projects&lt;/a&gt; are coming along slowly, but that is all right. Slow but steady is the best way to go about those kinds of projects anyway.&lt;/p&gt;
&lt;p&gt;That lesson is one I have learned more and more from my ongoing and ever-increasing delight in running. So far in May I have run about 125 miles; I expect to run over 150 miles this month in total (though of course all such plans are always subject to revision, and never more so than when one’s wife is 37 weeks pregnant). I am now running easy, aerobic miles ten to fifteen seconds faster per mile than I could manage in my personal best half marathon time a few years ago. I run so (relatively) quickly now not because of any particular innate athleticism—quite the contrary, as anyone who has known me since high school can attest. I can run as far and fast as I do only because I have stuck with it and used a &lt;a href="http://markallenonline.com/maoArticles.aspx?AID=2" title="Working Your Heart"&gt;smart training plan&lt;/a&gt;. And really, as in most parts of life, it is that sticking-with-it that leads to getting somewhere. Of course, sticking with it is no guarantee that things will work out. It is usually a requisite step along the way, though—a necessary-though-insufficient condition. That is simply the way God built the world.&lt;/p&gt;
&lt;p&gt;Little Ellie is quickly wrapping up her second year of life in this big world. She is saying lots of words (at last!), whining until she has driven Jaimie a bit crazy (in too-typical toddler fashion), and growing up in big ways and small. We are having a great deal of fun watching her start to be more socially aware and active, even if it is a little strange to have a daughter old enough that she has friends whom she loves and who love her in turn. She has also discovered a deep love of &lt;em&gt;Star Wars&lt;/em&gt;—no surprise for a daughter of ours, though the intensity of her delight in the movies, for a girl who is not yet two years old, did surprise both Jaimie and me a bit. You should hear her try to say “Darth Vader” or “Dark Side” or “Star Wars.” It is impossibly adorable.&lt;/p&gt;
&lt;p&gt;Jaimie is, as noted above, some 37 weeks pregnant and quite ready to be done carrying our second little gal on the inside. She is still plugging away slowly at the &lt;a href="http://jaimiekrycho.com/shaking-epheria-pt-1/" title="Bloodlines: The Shaking of Epheria, Part I"&gt;second novella&lt;/a&gt; in her &lt;a href="http://www.amazon.com/Bloodlines-Epheria-The-Trilogy-ebook/dp/B00HY478QO/" title="Get Bloodlines of Epheria on Kindle!"&gt;Bloodlines&lt;/a&gt; fantasy trilogy. She manages to keep Ellie entertained—no small feat—and does a remarkable job taking care of things around the house so that I can focus on work and school. Her struggle with &lt;a href="http://2012-2013.chriskrycho.com/theology/marriage-depression/" title="Marriage and Depression"&gt;depression&lt;/a&gt; has not diminished, but God has given us grace to carry on and she and I have both learned to respond in better, healthier, more helpful ways when the slumps come.&lt;/p&gt;
&lt;p&gt;As for the future, we really have no idea what the next several yeras will hold. I plan to finish my Master of Divinity—Lord willing, around December 2016. In the meantime, we will keep raising our little girls, I will keep writing software, and we will keep exploring and seeing what we want to do and how best to pursue those desires in a way that honors God. Who knows what those years will hold? God only, and certainly not us.&lt;/p&gt;
</content><category term="[software development"></category><category term="family"></category><category term="fitness]"></category></entry><entry><title>Bundling!</title><link href="http://www.chriskrycho.com/2014/bundling.html" rel="alternate"></link><published>2014-05-13T14:35:00-04:00</published><updated>2014-05-13T14:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-13:/2014/bundling.html</id><summary type="html">The world of ebook pricing is sometimes a bit crazy. A smart bundling strategy might make it a bit less so.</summary><content type="html">&lt;p&gt;&lt;a href="http://www.digitalbookworld.com/2012/why-do-we-have-to-choose-between-print-and-digital/"&gt;“Why do we have to choose between print and digital?”&lt;/a&gt; asked Richard Curtis at Digital Book World last week, before tackling the topic of bundling—getting ebooks at reduced cost or even free when buying a physical copy of the book. Drawing an analogy from music purchases that have moved in the same direction, he suggests that publishers &lt;em&gt;ought&lt;/em&gt; to be bundling, and then poses the query: When you purchase a print book you should be able to get the e-book for…&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;the full combined retail prices of print and e-book editions&lt;/li&gt;
&lt;li&gt;an additional 50% of the retail price of the print edition&lt;/li&gt;
&lt;li&gt;an additional 25% of the retail price of the print edition&lt;/li&gt;
&lt;li&gt;$1.00 more than the retail price of the print edition&lt;/li&gt;
&lt;li&gt;free&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;He suggests that this proves to be something of a conundrum for decision-makers in the publishing industry. With respect, and while recognizing that it probably &lt;em&gt;feels&lt;/em&gt; like a conundrum to the publishers, I think the answer is really quite simple. Publishers can dramatically increase their profits, and do it in a way that readers will &lt;em&gt;love&lt;/em&gt;. (This is the part where you call me crazy. Up next is the part where I show you why I’m not.)&lt;/p&gt;
&lt;section id="all-or-nothing" class="level2"&gt;
&lt;h2&gt;All or nothing&lt;/h2&gt;
&lt;p&gt;First, we should note that while readers would always choose (e) and publishers would love it if they could get away with (a), the reality is that both of these leave one party out in the cold. Publishers need readers, and readers need publishers. Publishers need readers or they die. Readers need publishers as providers of quality content—not only as the gatekeepers but also as polishers who take good books and make them great. Any system that will pan out well must therefore respect &lt;em&gt;both&lt;/em&gt; sides of that equation. Both (a) and (e) fail that test immediately.&lt;/p&gt;
&lt;p&gt;In the case of (a), the consumer can rightly point out that the cost of distribution of a book is minimal, trivial even, in the grand scheme of book production. That goes double for ebooks: the cost of running a server is a pittance compared to the cost of writing, editing, and proofing a book. “So,” any smart reader says, “I’ve already paid for the book. Why should I have to pay &lt;em&gt;just as much again&lt;/em&gt; for the ebook?”&lt;/p&gt;
&lt;p&gt;In the case of (e), the consumer is getting something of real value—the ebook, with its associated portability, the ability to create [communal interactions][craigmod] around the content through shared marginalia, and so forth—but without recognizing any infrastructure costs this poses to the publisher. As always, there is no free lunch, and that is as it should be.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The worker deserves his wages, and that includes the editor who turns a manuscript into ebook form—especially for &lt;em&gt;good&lt;/em&gt; ebooks, which entail a great deal of work beyond simply running the print manuscript through a conversion script. That involves real people’s time, and therefore costs real money.&lt;/p&gt;
&lt;p&gt;Neither of these options, then, is ultimately good for the market. The readers will rightly reject paying the full price again for a book in a different form; they’ve been conditioned by too many interactions on the internet not to recognize that digital transmission of files the size of a book is, while not costless, not costly either. On the other hand, publishers still need to make money, and they do sink real time and money into the ebook—not at the distribution point, but in the infrastructure involved in the preparation of the manuscript and readying it for digital and physical publication.&lt;/p&gt;
&lt;p&gt;Again: publishers need readers and readers need publishers.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="percentage-games" class="level2"&gt;
&lt;h2&gt;Percentage games&lt;/h2&gt;
&lt;p&gt;Percentage-based cuts—like Curtis’ options (b) and (c)—are much more sensible and reasonable from the perspective of both the consumer and the publisher. In each of these cases, the publisher is granting that the customer has already made a purchase—perhaps a significant one, in the case of a hardcover fiction book. Indeed, when we move out into the realm of reference books or textbooks, the consumer has already given the publisher quite a lot of money. Thus, options (b) and (c) are much friendlier to the consumer than choice (a), while still affording the publisher some profits, unlike (e). This is clearly a step in the right direction.&lt;/p&gt;
&lt;p&gt;The percentage option quickly runs into issues when we start thinking about how such a scheme would work in practice, though. Is it 25% of the hardcover but 50% of the paperback, so that the publisher can recoup more of the costs? In this scheme, it is difficult to match the actual cost of the ebook sale to its relative value compared to the physical copy. Moreover, it’s difficult to standardize. When purchasing a textbook at $150, should someone have to pay another $37.50 or $75 to have a digital copy? It seems unlikely that preparing an ebook of a textbook is really 5-6 times more costly than the preparation of a fiction ebook, which on a percentage basis would come out around $6.50 or $13 for the hardcover at those rates, or $2 or $4 for paperbacks.&lt;/p&gt;
&lt;p&gt;Equally important: &lt;em&gt;will&lt;/em&gt; people pay that much for a digital copy? Publishers may want to study the question in depth by testing the market, but this is a waste of time. The answer is obvious to anyone under the age of 30: &lt;em&gt;no&lt;/em&gt;. The market simply won’t support those kinds of costs on the upper end of the spectrum.&lt;/p&gt;
&lt;p&gt;Again, customers may recognize that they are subsidizing more than simply the cost of distribution, but the preparation and distribution of the ebook don’t justify an additional percentage on these scales beyond some point. I suspect that most customers are willing to pay extra to get the ebook in addition to the physical copy—just not, in most cases, &lt;em&gt;that&lt;/em&gt; much extra.&lt;/p&gt;
&lt;section id="aside-on-reasonability-and-trained-markets" class="level3"&gt;
&lt;h3&gt;Aside: on reasonability and trained markets&lt;/h3&gt;
&lt;p&gt;We must recognize that markets can be &lt;em&gt;trained&lt;/em&gt;. People have come to see $0.99 as a reasonable price for individual songs. There was nothing inevitable about that outcome; it is a direct result of the success of the iTunes store. Had prices been set at $1.49 or $0.33, it’s likely we would have settled on that number as a reasonable price. Similarly, TV show episodes sell at $1.99,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and people seem to treat that as a reasonable price: the perceived value matches the cost well. They could have been $1 or $2.50, and consumers probably would have settled in with those numbers equally well.&lt;/p&gt;
&lt;p&gt;Of course, had the price been too high, we would have rejected it entirely: markets can be trained, but they’re not capable of stretching into just any shape at all.&lt;/p&gt;
&lt;p&gt;Admittedly, the music market remains volatile, but consumers on the whole don’t seem to balk at spending a dollar on a song. While the piracy rate remains high, iTunes and similar markets provide an outlet for those who are interested in purchasing their music legitimately.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This outcome results from the combination of a trained market and a sensible cost/value relationship that allowed the training to occur in the first place. Book publishers should aim for the same outcome: profitability on the basis of perceived reasonability of their prices. This will require training the market, but that is possible so long as their expectations are reasonable.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="a-reasonable-target" class="level2"&gt;
&lt;h2&gt;A reasonable target&lt;/h2&gt;
&lt;section id="price-points" class="level3"&gt;
&lt;h3&gt;Price points&lt;/h3&gt;
&lt;p&gt;Curtis’ final suggested price point is close to the mark, but I think some revision is in order. Remember: the aim is to buoy both customer satisfaction &lt;em&gt;and&lt;/em&gt; publisher profitability. Here’s my proposed pricing scheme for fiction (which could be adapted to other parts of the market fairly straightforwardly):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standalone ebook: $4.99&lt;/li&gt;
&lt;li&gt;Paperback:
&lt;ul&gt;
&lt;li&gt;Book: $7.99&lt;/li&gt;
&lt;li&gt;Bundle: $9.99&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Trade paperback:&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Book: $14.99&lt;/li&gt;
&lt;li&gt;Bundle: $15.99&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hardcover:
&lt;ul&gt;
&lt;li&gt;Book: $26.99&lt;/li&gt;
&lt;li&gt;Bundle: $26.99&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m basing these on the current pricing schemes in the market—these are the normal suggested retail prices for paperbacks, trade paperbacks, and hard covers—and on the assumption that the publisher’s goal is to maximize revenue, while the consumer’s goal is to get the most content at a price he feels is reasonable. I’m also taking into account the existing profit curves for publishers: paperbooks are relatively low margin, while hardcovers are the major profit points, at least when they’re successful.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="rationale" class="level3"&gt;
&lt;h3&gt;Rationale&lt;/h3&gt;
&lt;p&gt;First, and most importantly, I believe the market will support these price points. The standalone ebook is less expensive than the paperback, as it should be, since its distribution costs are much lower than the costs of printing and shipping paperbacks. At the same time, ebooks sales will still generate revenue for the publisher; $5 is not a meaningless amount of money.&lt;/p&gt;
&lt;p&gt;For each tier upwards, the cost of the bundled ebook drops. The publisher thus acknowledges the increasing profitability of each tier as well as the increasing cost to the reader. At the same time, the lowered bundling cost incentivizes the user toward the higher profit items. In each case, the bundling cost is sufficiently low as to be in the “impulse purchase” range for most users.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Readers will be far more likely to front the cost of a hardcover if an ebook comes bundled with it, because the value proposition is so much better. At the same time, this is unlikely to decrease the profits of the publisher, because the margins are much higher for hardcovers.&lt;/p&gt;
&lt;p&gt;In fact, bundling at these rates will likely increase publisher profits from ebooks, as most readers currently choose between ebook and physical books. The price of a hardcover is simply too high to allow for the purchase of both. (Even when this is not actually true, it &lt;em&gt;seems&lt;/em&gt; true to consumers, which is equally important in determining their behavior.) With a sufficiently lower barrier to getting the additional content, the likelihood that the reader purchases both goes up substantially.&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This potential for increased profitability is compounded by the availability of the bundle at initial purchase time. A consumer who has already committed to spending $8 on a book is unlikely to balk at $10, and even less to balk at the transition from $15 to $16. In many cases, the publisher will earn more money from the book purchase than before, but the reader is still getting a good deal on the ebook. This is &lt;em&gt;exactly&lt;/em&gt; the combination that makes for a flourishing market.&lt;/p&gt;
&lt;p&gt;Finally, the simplicity of these numbers is extremely helpful. Standardizing these prices will decrease the friction inherent in making the purchase decision, which increases the likelihood that a purchase will be made. I’m not suggesting a cartel—price standardization is natural in this sort of market—and I believe the price points I’ve suggested are where the market will settle in the long run. The publishers who get there first will earn enormous goodwill from their readers in the short term, as well as demonstrating their leadership in the industry in ways that set them up for long term success.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="bundle-up" class="level2"&gt;
&lt;h2&gt;Bundle up&lt;/h2&gt;
&lt;p&gt;A smart approach to bundling could be enormously beneficial to the publishing industry. In addition to the pure numerical profitability of the approach outlined above—no small detail in an industry struggling to adapt to the realities of the new economy—it establishes that the publishers are responsive to customers in a way that other large media have not seemed to be. Nothing is so helpful to a company’s long-term sustainability as for consumers to &lt;em&gt;like&lt;/em&gt; it. Reasonable bundling prices would go a long way toward helping readers see publishers as friends, rather than enemies.&lt;/p&gt;
&lt;p&gt;Obviously these numbers work best in the context of fiction. The value propositions are entirely different in other contexts; a cookbook is an entirely different thing than a copy of &lt;em&gt;The Hobbit&lt;/em&gt;. Across the board, though, publishers should keep the same goals in mind: profitability by means of reasonability and approachability. Be allies of the readers, not their enemies. Make it easy and affordable for them to pay you for your work, and they will.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My thanks to &lt;a href="http://stephencarradini.com"&gt;Stephen Carradini&lt;/a&gt; for invaluable contributions to this piece in two forms: many long conversations about this very topic, and a helpful edit of the actual content.&lt;/p&gt;
&lt;p&gt;[craigmod]: http://craigmod.com/journal/post_artifact/#section_4 “Post Artifact Books and Publishing, Section 4: The post-artifact system” from Craig Mod&amp;quot;&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Additionally, there is a signaling problem here: “free” suggests “low value” in a way that publishers rightly want to avoid. See &lt;a href="http://informationarchitects.net/blog/ia-writer-on-prices-and-features/"&gt;“iA Writer: On Prices and Features”&lt;/a&gt;, Section 2: Cost, by Oliver Richtenstein for a lengthy and sensible exploration of this issue. The issue of signaling value should be taken into account in my suggestions later, as well. But more on that below.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;When they sell at all, of course. I’ve written about this problem [before][piracy]: piracy explodes when there is demand without supply. It also tends to grow at a higher rate when the cost is perceived as unreasonable. TV shows priced at $5/episode wouldn’t do well; they seem to sell quite briskly at $1.99. Publishers run the risk of fomenting piracy by setting their prices too high.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I have never seen someone complain that a song is too expensive at a dollar who was willing to pay &lt;em&gt;anything&lt;/em&gt;. A penny would be too pricey from the pirates’ point of view.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Trade paperbacks (TPBs) are similar in size to hardcovers, but have soft covers similar to those in a paperback. Fiction TPBs typically go for around $15. Over the last few years, publishers have started shifting away from the low-margin paperback market into these trade paperbacks, which provide a bit higher profit for them. Personally, I don’t mind, because these books tend to be higher quality paper and bindings. If I’m sitting down with a monster like one of the books in &lt;cite&gt;The Wheel of Time&lt;/cite&gt;, this is far and away the best format for a physical copy.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;On the signaling issue: the price of the ebook is sufficiently high as to continue to signal real value here, I think. However, in the case of other kinds of books, this scheme should be revisited. A complex EPUB3 with embedded videos or interactive content should signal that it offers a higher value proposition than other ebooks with a higher price point; in some cases, if that content is sufficiently central to the value proposition of the book, it might be more expensive than the physical copies.&lt;/p&gt;
&lt;p&gt;Similarly, a textbook might sell for $150, its ebook at $50, and the bundle at $165—because the cost of preparing a textbook ebook may be substantially higher than that of preparing a fiction ebook. Signaling matters, but overpricing is as much a risk here as underpricing.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;This has the added benefit of making the purchase of new books over used books more attractive to the consumer: if the coupon for ebook at reduced rate is only available at new book purchase, a $3 used book suddenly has a much lower value proposition relative to the original when the reader is interested in having an ebook copy as well, since the cost of having both is still $8.&lt;/p&gt;
&lt;p&gt;Of course, this leads us to the question of ebook resale, which is currently a legally murky area at best, and requires considerable legal and intellectual development.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>The "New" Covenant</title><link href="http://www.chriskrycho.com/2014/the-new-covenant.html" rel="alternate"></link><published>2014-05-11T20:00:00-04:00</published><updated>2014-05-11T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-11:/2014/the-new-covenant.html</id><summary type="html">Although it is tempting to view the New Covenant promised by Jeremiah as marking a sharp break with what came before, a careful reading of the text points us in another direction.</summary><content type="html">&lt;p&gt;It is common for pastors, popular teachers, and even some scholars to treat the ‘New Covenant’ of Jeremiah 31 as something wholly distinct from the previous covenants. In this reading, the New Covenant is specific to the work of Christ in the New Testament age, and was never experienced by any “Old Testament believers”. Those believers remained under the previous (Abrahamic and especially Mosaic and Davidic) covenants, while New Testament believers are New Covenant believers. For this view, they draw on the ways that the New Covenant language was picked up by the authors of the New Testament, especially in Hebrews.&lt;/p&gt;
&lt;p&gt;Though this reading has an ancient pedigree, going back at least as far as Jerome, it is ultimately incorrect. First, it fails to take the content of Jeremiah’s vision on its own terms. As Jeremiah traces out his vision of the New Covenant in chapters 31–33, he explicitly includes the language of law-keeping, temple working and priests, and a Davidic king over the land of Israel. These were not merely symbolic expectations, but fully fleshed out hopes for and visions of a restoration of the covenant God made with Israel at Sinai. Indeed, the terms of priestly temple sacrifice and law-keeping used throughout the section presuppose the covenant language of Deuteronomy and the discussion in Deuteronomy 30 of the circumcised heart. Thus, Hill and Walton note (and likewise Thomas suggested) that in many ways it is more appropriate to speak of a &lt;em&gt;renewed&lt;/em&gt; covenant than of a totally &lt;em&gt;new&lt;/em&gt; covenant.&lt;/p&gt;
&lt;p&gt;Second, the reading of the ‘New Covenant’ as &lt;em&gt;wholly&lt;/em&gt; new misses the ways the other authors of the Old Testament responded to this promise. In particular, Ezra’s prayer in Ezra-Nehemiah makes it abundantly clear that he considered the people’s return to the land after their 70-year-exile a fulfillment of the prophecy. If it was not a complete fulfillment—as indeed that same prayer acknowledges, for the people’s hearts were still wayward—it nonetheless represented at least a partial fulfillment. There were once again Jewish people living in the land, performing temple sacrifice and following Yahweh. Though the Davidic king had not yet been reinstated, and though the people’s hearts had not yet had the law so thoroughly stamped on them that they no longer needed teachers, the promise was partly fulfilled.&lt;/p&gt;
&lt;p&gt;Third, even in the age after Christ’s coming it is clear that the vision remains only fulfilled in part. True: there was a significant break in the shape of history in the incarnation, life, death, resurrection, and ascension of the Son. Yet God’s law is not yet written so thoroughly on anyone’s heart that no man needs to teach his neighbor. Christians still wrestle with sin. Moreover, as the author of Hebrews notes, this Davidic king who fulfills the New Covenant hopes has not yet put everything in subjection under his feet (Heb. 2). He is seated at the right hand of God, exalted above the heavens, and has inaugurated his reign, but he has not yet &lt;em&gt;consummated&lt;/em&gt; reign. The same author who affirms so strongly that Jesus is the fulfillment of the New Covenant hope affirms as well that the New Covenant is not yet fully completed. The ancient Jews lived in an “already but not yet” after the return from Exile. In the work of Christ, that “already” is significantly advanced—but the “not yet” remains until he returns.&lt;/p&gt;
&lt;p&gt;This is not to say that there is &lt;em&gt;nothing&lt;/em&gt; new about the New Covenant. Unlike in Deuteronomy 30, where the people were enjoined to repent and circumcise their own hearts, the work in Jeremiah’s vision is wholly God’s. Too, the New Testament’s embrace of New Covenant language in terms of Jesus’ work means that Christians &lt;em&gt;should&lt;/em&gt; understand that something new has happened in Christ. Specifically, Christ has done what Israel could not. Jesus kept the law perfectly, needing no one to teach him; he served as both priest and sacrifice to make atonement for the sins of the people; he rules and judges righteously as the Davidic Branch who represents Yahweh; he even reconstituted Israel in his twelve disciples. Jesus Messiah &lt;em&gt;is&lt;/em&gt; the fulfillment of the New Covenant. He is the hope toward which the Old Testament saints looked.&lt;/p&gt;
&lt;p&gt;Augustine, not Jerome, had the right of it. All the Old Testament saints were participants in the New Covenant. They looked forward to that which they did not see, but they too were saved by faith in Christ. They did not have the full revelation with which New Testament saints are blessed. They saw from far off that of which Christians now enjoy the fullness. But Jesus’ work in bringing about the New Covenant was not something foreign to the covenants that had gone before; it was the fulfillment of all of them. Here was the offspring of the woman who would crush the serpent’s head, the offspring of Abraham in whom all nations would be blessed, the prophet like Moses who would give the law anew, the true Israel who would keep the law rightly, the offspring of David who would do justice for his people and for the nations. Jeremiah’s New Covenant promised the fulfillment of what had gone before. It was new in that Jesus finally accomplished what no Israelite ever had. It was the renewal of the old in that what Jesus accomplished was precisely the hope set before Israel from the beginning.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>The Uniqueness of the Incarnation</title><link href="http://www.chriskrycho.com/2014/the-uniqueness-of-the-incarnation.html" rel="alternate"></link><published>2014-05-06T08:15:00-04:00</published><updated>2014-05-06T08:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-06:/2014/the-uniqueness-of-the-incarnation.html</id><summary type="html">The Incarnation itself is essential and central in God's work in the life of believers. It must never be obscured, diminished, or denied.
</summary><content type="html">&lt;section id="i.-the-centrality-and-uniqueness-of-the-incarnation" class="level2"&gt;
&lt;h2&gt;I. The Centrality and Uniqueness of the Incarnation&lt;/h2&gt;
&lt;p&gt;The Incarnation of the Son of God is the ground of all Christian hope. It is the “central miracle asserted by Christians.”&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Without the Incarnation, there would be no salvation. Not only would the other aspects of redemption (Christ’s life, teaching, death on the cross, resurrection, and ascension) not be possible, but parts of the restoration of humanity hinge on the Incarnation itself. The Incarnation was a unique event in history, with unique theological significance. At no other time has God manifested himself as a human being. The Spirit’s present indwelling of all believers is a direct result of and carries forward the reconciliation of divinity and humanity that occured in the person of Jesus Christ. A healthy church depends on a healthy Christology, for it is only in Christ and by Christ’s Spirit that the church exists—and there can be no healthy Christology without a robust doctrine of the Incarnation. It is in the Incarnation that Jesus the Messiah must be understood: a single person uniting all that it is to be God and all that it is to be human.&lt;/p&gt;
&lt;section id="a.-biblical-affirmations" class="level3"&gt;
&lt;h3&gt;A. Biblical Affirmations&lt;/h3&gt;
&lt;p&gt;Each of the Gospels opens in a way that emphasizes the unique nature of Jesus Christ. Matthew begins with a genealogy that situates him in the story of Israel, then immediately shows in narrative that from his conception he was also divine (Matt. 1–2, esp. 1:1, 1:23). Mark, ever brief, introduces the Messiah with the astounding words, “Jesus Christ, the Son of God” (Mark 1:1).&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Luke inverts Matthew’s order: miraculous birth first, genealogy second. He situations Jesus not only in Israel’s story but in humanity’s, tracing his lineage to Adam (Luke 1:26–28, 2:8–38, 3:23–38). John reaches out to Greek philosophy and turns it on its head, proclaiming the coming of the uncreated &lt;em&gt;logos&lt;/em&gt; into creation (John 1:1–18). The sum effect of the gospel-tellers is to emphasize that in Jesus Christ, something profoundly unique had happened.&lt;/p&gt;
&lt;p&gt;Perhaps nowhere are the importance and uniqueness of the Incarnation more evident than in the Epistle to the Hebrews. The anonymous letter emphasizes from its first words the uniqueness of Jesus’ incarnation and ministry (Heb. 1:1–2). It argues that the Incarnation was essential to his roles as priest (2:17–18, 4:15, 5:5–10, 7:26–8:2), destroyer of death (2:14–15), and propitiatory sacrifice (2:9, 7:27, 9:11–28, 10:12–14, 10:19–22). It is not only that Jesus died to save people from their sins, but that he became human and lived to that end and more besides—a consistent theme throughout the New Testament. Thus, Zechariah’s prophecy (Luke 1:76–79) includes salvation from sin, but also light coming into the world, death’s power coming to an end, and peace reigning in the cosmos. Likewise, John couples the Incarnation to the doctrine of adoption (John 1:12). Paul exults in the Incarnation as the grounds of the reconciliation of all things, humanity included (Col 1:19–20). Moreover, he explicitly couples the Messiah’s full humanity to humans being filled in him in turn (Col. 2:9–10)—a theme Peter picks up as well, noting that the saints actually become “partakers of the divine nature” (2 Peter 1:4).&lt;/p&gt;
&lt;p&gt;In short, the New Testament affirms that the Incarnation itself was an essential element in the salvation of humanity—not merely as a prerequisite for other parts of Christ’s work. The Incarnation is the means by which human nature is brought once again into fellowship with the Godhead. Christ is the eschatological firstfruits of this restoration. As he is, so will all the saints be in glory: restored to unbroken fellowship between humanity and humanity’s Creator.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="b.-the-theology-of-the-church" class="level3"&gt;
&lt;h3&gt;B. The Theology of the Church&lt;/h3&gt;
&lt;p&gt;The importance of the Incarnation has been affirmed by the church throughout her history. The Church Fathers fleshed out the orthodox doctrine of the Incarnation over the first four centuries of the history of the church, with various controversies erupting every century.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; This work culminated in the lasting affirmations and denials of the Chalcedonian formula.&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; In fact, nearly every theological controversy in the early church was a Christological controversy, and every such controversy hinged on issues pertaining to the nature of the Incarnation. The Fathers recognized that the details of God’s becoming man were essentials of the faith. The hope of human salvation would be lost entirely if Jesus were not a single person in whom “all the fullness of deity dwells bodily” (Col. 2:9) and who “likewise partook of [flesh and blood]” (Heb. 2:14).&lt;a href="#fn6" class="footnote-ref" id="fnref6"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Incarnational thoelogizing did not end in the patristic period; it has remained foundational for further reflection on the natures of God and humanity. Indeed, patristic theology has been influential on nearly every major orthodox theologian since the Reformation—whether directly or mediated by the Reformers. Athanasius’ Christology, with its emphasis on the transformational effect of the Incarnation itself on humanity’s state,&lt;a href="#fn7" class="footnote-ref" id="fnref7"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt; has proven particularly influential. If advocates of “incarnational” theologies have sometimes pressed this recovery in unhelpful directions (see below), they have also provided a helpful reminder of what God’s becoming man has &lt;em&gt;already&lt;/em&gt; accomplished: the first step of the eschatological transformation of humanity. “The crucified Christ stands in solidarity with humanity, not merely as ane xample of confrontation with the world to be imitated by us &lt;em&gt;but as the reality of new humanity in which we may and must participate&lt;/em&gt;.”&lt;a href="#fn8" class="footnote-ref" id="fnref8"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt; Jesus’ humanity is an essential ingredient in human salvation and in the sanctified life of the believer in the present—the Spirit mediating Christ’s humanity to the believer’s—as well as of a glorified reality in the future.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="ii.-in-life-and-ministry" class="level2"&gt;
&lt;h2&gt;II. In Life and Ministry&lt;/h2&gt;
&lt;p&gt;Given the importance—indeed, the essential character—of the doctrine of the Incarnation, it is clear that the church must strive to maintain the doctrine. It is insufficent only to affirm it in principle; the church must cherish this reality in practice and protect it from loss. Unfortunately, both in the Western church broadly and in evangelicalism in particular, the centrality and uniqueness of the Incarnation have sometimes been lost through neglect or abuse.&lt;/p&gt;
&lt;section id="a.-absence" class="level3"&gt;
&lt;h3&gt;A. Absence&lt;/h3&gt;
&lt;p&gt;The church may first of all fail with regard to its theology of the Incarnation by losing it, whether by doctrinal negation or by simple unobservance. The threat of outright denial of the doctrine has been dangerously common in church history. As noted above, many of the early Christological heresies relted directly to the nature of the Incarnation, and variations on these heresies have continued to arise to the present day. In the Reformation era, for example, the Anabaptist movement included many who affirmed a “heavenly flesh” view in which Jesus was not Mary’s descendant but sent from heaven without human parentage whatsoever—a loss of Christ’s full humanity. More recently, both Mormons and Jehovah’s Witnesses have affirmed adoptionist views—a loss of Christ’s full deity.&lt;/p&gt;
&lt;p&gt;The anti-supernatural bent of many liberal theologies in the last several centuries has similarly resulted in a rejection of the doctrine of the Incarnation. For many liberals theologians, Jesus was representative of the God-consciousness in us all at its best and adopted by God as a special figure in human history accordingly.&lt;a href="#fn9" class="footnote-ref" id="fnref9"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt; Any such outright rejection clearly results in the loss of all that the doctrine entails—not least any hope of real salvation. If Jesus was merely a man who was particularly helpful or holy, he could not redeem other humans. He could at best set others a good example. His death and his resurrection&lt;a href="#fn10" class="footnote-ref" id="fnref10"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt; can have symbolic power only. They do not save. They inspire or impress at best, and intimidate with their inimitability at worst.&lt;/p&gt;
&lt;p&gt;All such views leave those who embrace them without ultimate salvific hope. As Gregory Nazianzen commented during the Arian controversy, “For that which He has not assumed he has not healed; but that which is united to His Godhead is also saved. If only half Adam fell, then that which Christ assumes and saves may be half also; but if the whole of his nature fell, it must be united to the whole nature of Him that was begotten, and so be saved as a whole.”&lt;a href="#fn11" class="footnote-ref" id="fnref11"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Though no conservative scholars would actively deny the importance of the Incarnation, their passive neeglect can be nearly as problematic. Sadly, the doctrine receives receives little attention among evangelicals. The crucicentric bent of the evangelical movement has often led to other aspects of the Son’s work being overlooked, so that the Incarnation, Resurrection, and Ascension of Christ are all often treated as mere prerequisites for or accessories to his atoning death.&lt;a href="#fn12" class="footnote-ref" id="fnref12"&gt;&lt;sup&gt;12&lt;/sup&gt;&lt;/a&gt; Even when unintentional, this loss-by-neglect results in real problems in the church’s understanding of God’s work in Christ and humanity. Many of the borderline gnostic tendencies latent in evangelical theology eschatology, and the corresponding spiritualization and de-physicalization of evangelical eschatology, must be laid at least in part at the feet of a deficient theology of the Incarnation. This can only lead to a dimming of future hope—who really wants to be a disembodied spirit somehow strumming a harp forever?—which in turn produces real challenges in the life and faith of believers.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="b.-incarnational-theology-a-two-fold-error" class="level3"&gt;
&lt;h3&gt;B. “Incarnational Theology”: A Two-Fold Error&lt;/h3&gt;
&lt;p&gt;The church may also err by misapplying its theology of the Incarnation. It has become increasingly common to speak of “incarnational theology” as a way of describing the Christian mission to the world: Christians ought to “incarnate” Christ to the world as Christ “incarnated” the Godhead to humanity.&lt;a href="#fn13" class="footnote-ref" id="fnref13"&gt;&lt;sup&gt;13&lt;/sup&gt;&lt;/a&gt; There is much to appreciate in this sentiment. It represents an appropriate recognition that humans are God’s image-bearers. It pays heed to the New Testament’s assertion that Christians are representatives of Christ. It takes seriously Paul’s shocking language of “filling up what is lacking in Christ’s afflictions” (Col. 1:24). It rightly points to the synthesis of missionary activity and social activism that represents the best of evangelicalism.&lt;a href="#fn14" class="footnote-ref" id="fnref14"&gt;&lt;sup&gt;14&lt;/sup&gt;&lt;/a&gt; Yet for all that, applying the language of incarnation to believers is a serious mistake in two ways.&lt;/p&gt;
&lt;p&gt;First, this kind of “incarnational” language is a misapplication of Paul’s “body” metaphor for the church, contra the proponents of “incarnational theology”, and notwithstanding Scripture’s many calls to imitate Christ.&lt;a href="#fn15" class="footnote-ref" id="fnref15"&gt;&lt;sup&gt;15&lt;/sup&gt;&lt;/a&gt; Paul uniformly used the language to teach the unity of the people of God—never evangelism. The authors of the New Testament chose other images for proclaiming Christ instead: fishermen (Matt. 4:19), harvest workers (Luke 10:2), servants working in the absence of their master (Matt. 24:45–51), or ambassadors and representatives (2 Cor. 5:20)—to name just a few. At no point, though, does the Bible use the metaphor of the body to describe Christian witness to the world. Nor does it support the idea that ordinary men and women can mediate the presence of God to people. The Incarnation may (and indeed should) prompt evangelism, but this response is not itself “incarnational.” The people of God do not incarnate God the Son, but represent him in other ways. That does not negate the helpful instincts expressed in the incarnational theologizing of the last few years. It simply means that this doctrine can be expressed more accurately and helpfully.&lt;/p&gt;
&lt;p&gt;Second, the church loses a great deal when incarnational theology is about anyone other than Jesus. God becoming man was an astounding and singular event. As Lewis commented, “It was the central event in the history of the Earth—the very thing that the whole story has been about.”&lt;a href="#fn16" class="footnote-ref" id="fnref16"&gt;&lt;sup&gt;16&lt;/sup&gt;&lt;/a&gt; When theologians speak of “incarnating” Christ, the sheer shock of the event fades. The focus shifts from the Son’s work in humanity to the human response to the Son. The doctrine of the Incarnation above all ought to lead to worship born of reflection not on human endeavors, but on divine intervention to undo human brokenness.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="iii.-conclusion" class="level2"&gt;
&lt;h2&gt;III. Conclusion&lt;/h2&gt;
&lt;p&gt;Both the centrality of the Incarnation and its uniqueness are essential to healthy Christian theology. A robust doctrine of the Incarnation leads to greater worship and deeper future hope. Understood rightly, it leads to deeper faith in the Word who “became flesh and dwelt among us” (John 1:14), and so to more faithful obedience to the gospel. The believer seeks peace and justice and above all that others may know Christ not because the he himself incarnates Christ, but because the Incarnation has produced a radical transformation in his life (and in the lives of all who believe). “Christ gives his sanctified humanity to us, so that we may partake of him and his goodness…. God assumed our umanity in Jesus of Nazareth, healed our humanity with his own being, and gave our sanctified humanity back to us.”&lt;a href="#fn17" class="footnote-ref" id="fnref17"&gt;&lt;sup&gt;17&lt;/sup&gt;&lt;/a&gt; The church must therefore take care to protect the doctrine, both from reject or loss through neglect and from misappropriations of the language of incarnation that distract from the work of the Son. The Incarnation itself is essential and central in God’s work in the life of believers. It must never be obscured, diminished, or denied.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="appendix-the-chalcedonian-definition" class="level1"&gt;
&lt;h1&gt;Appendix: The Chalcedonian Definition&lt;/h1&gt;
&lt;p&gt;&lt;a href="#fn18" class="footnote-ref" id="fnref18"&gt;&lt;sup&gt;18&lt;/sup&gt;&lt;/a&gt;For the synod is opposed to those who presume to rend asunder the mystery of the Incarnation into a double Sonship, and it deposes from the priesthood those who dare to say that the Godhead of the Only-begotten is passible; and it withstands those who imagine a mixing or confusion of the two natures of Christ; and it drives away those who erroneously teach that the form of a servant which he took from us was of a heavenly or some other substance; and it anathematizes those who feign that the Lord had two natures before the union, but that these were fashioned into one after the union.&lt;/p&gt;
&lt;p&gt;Wherefore, following the holy Fathers, we all with one voice confess our Lord Jesus Christ one and the same Son, the same perfect in Godhead, the same perfect in manhood, truly God and truly man, the same consisting of a reasonable soul and a body, of one substance with the Father as touching the Godhead, the same of one substance with us as touching the manhood, like us in all things apart from sin; begotten of the Father before the ages as touching the Godhead, the same in the last days, for us and for our salvation, born from the Virgin Mary, the Theotokos, as touching the manhood, one and the same Christ, Son, Lord, Only-begotten, to be acknowledged in two natures, without confusion, without change, without division, without separation; the distinction of natures being in no way abolished because of the union, but rather the characteristic property of each nature being preserved, and concurring into one Person and one subsistence (ὑπόστασις), not as if Christ were parted or divided into two persons, but one and the same Son and only-begotten God, Word, Lord, Jesus Christ; even as the Prophets from the beginning spoke concerning him, and our Lord Jesus Christ instructed us, and the Creed of the Fathers has handed down to us.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bibliography" class="level1"&gt;
&lt;h1&gt;Bibliography&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Barnes, Kenneth A. “‘And the Word Became Flesh’: The Incarnation: A Model For Evangelism.” DMin diss., Southeastern Baptist Theological Seminary,
&lt;ol start="1990" type="1"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bultmann, Rudolf. “New Testament and Mythology: The Mythological Element in the Message of the New Testament and the Problem of its Reinterpretation.” In &lt;em&gt;Kerygma and Myth: A Theological Debate&lt;/em&gt;. Edited by Hans Werner Bartch. Revised and translated by Reginald H. Fuller. 1953. Reprint, New York: Harper Torchbooks, 1961.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clifford, Ross and Philip Johnson. &lt;em&gt;The Cross Is Not Enough: Living as Witnesses to the Resurrection&lt;/em&gt;. Grand Rapids: Baker Books, 2012.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Darbyshire, David L. “Incarnational Evangelism: An Intentional Approach to Sharing the Good News in a Boundary Environment.” DMin diss., Southeastern Baptist Theological Seminary, 1989.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Langmead, Ross. &lt;em&gt;Word Made Flesh: Towards an Incarnational Missiology&lt;/em&gt;. Lanham: University Press of America, Inc., 2004.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Letham, Robert. &lt;em&gt;The Holy Trinity: In Scripture, History, Theology, and Worship&lt;/em&gt;. Phillipsburg: P&amp;amp;R, 2004.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lewis, C. S. &lt;em&gt;Miracles: A Preliminary Study&lt;/em&gt;. London: Geoffrey Bless, 1947.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Morris, Leon. &lt;em&gt;The Atonement: Its meaning and significance&lt;/em&gt;. Downers Grove: Inter-Varsity Press, 1983.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;William E. Pannell. “Evangelism: Solidarity and Reconciliation.” In &lt;em&gt;Incarnational Ministry: The Presence of Christ in Church, Society, and Family: Essays in Honor of Ray S. Anderson&lt;/em&gt;, edited by Christian D. Kettler and Todd H. Speidell. Colorado Springs: Helmers &amp;amp; Howard, 1990.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Speidell, Todd H. “Incarnational Social Ethics.” In Speidell, 140–152.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stevenson, James and B. J. Kidd, eds. &lt;em&gt;Creeds, Councils, and Controversies: Documents Illustrative of the History of the Church A.D. 337-461&lt;/em&gt;. New York: Seabury Press, 1966.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;C. S. Lewis, &lt;em&gt;Miracles: A Preliminary Study&lt;/em&gt; (London: Geoffrey Bless, 1947), 131.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Scripture citations throughout from the English Standard Version.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Athanasius &lt;em&gt;On the Incarnation&lt;/em&gt; 14, 20.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Cf. Justin Martyr &lt;em&gt;First Apology&lt;/em&gt; (second century), Irenaeus &lt;em&gt;Against Heresies&lt;/em&gt; (third century), Athanasius &lt;em&gt;On the Incarnation&lt;/em&gt; (fourth century), Cyril of Alexandria, multiple volumes of works against Nestorianism (fifth century).&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;See Appendix: The Chalcedonian Definition.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn6"&gt;&lt;p&gt;Gregory Nazianzen &lt;em&gt;Epistle CI&lt;/em&gt;.&lt;a href="#fnref6" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn7"&gt;&lt;p&gt;Athanasius &lt;em&gt;On the Incarnation&lt;/em&gt; 14, 44.&lt;a href="#fnref7" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn8"&gt;&lt;p&gt;Todd H. Speidell, “Incarnational Social Ethics,” in &lt;em&gt;Incarnational Ministry: The Presence of Christ in Church, Society, and Family: Essays in Honor of Ray S. Anderson&lt;/em&gt;, eds. Christian D. Kettler and Todd H. Speidell (Colorado Springs: Helmers &amp;amp; Howard, 1990), 143. Emphasis mine.&lt;a href="#fnref8" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn9"&gt;&lt;p&gt;Cf. Rudolf Bultmann, “New Testament and Mythology: The Mythological Element in the Message of the New Testament and the Problem of its Reinterpretation,” in &lt;em&gt;Kerygma and Myth: A Theological Debate&lt;/em&gt;, ed. Hans Werner Bartch, rev. and trans. Reginald H. Fuller (1953; repr., New York: Harper Torchbooks, 1961), 33–35.&lt;a href="#fnref9" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn10"&gt;&lt;p&gt;The resurrection is of course customarily denied in such theologies as well.&lt;a href="#fnref10" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn11"&gt;&lt;p&gt;Gregory Nazianzen &lt;em&gt;Epistle CI&lt;/em&gt;.&lt;a href="#fnref11" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn12"&gt;&lt;p&gt;Cf. the reduction of all of Christ’s works to aspects of the atonement in Leon Morris, &lt;em&gt;The Atonement: Its meaning and significance&lt;/em&gt; (Downers Grove: Inter-Varsity Press, 1983); and see the similar critique in Ross Clifford and Philip Johnson, &lt;em&gt;The Cross Is Not Enough: Living as Witnesses to the Resurrection&lt;/em&gt; (Grand Rapids: Baker Books, 2012).&lt;a href="#fnref12" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn13"&gt;&lt;p&gt;Cf. Ross Langmead, &lt;em&gt;Word Made Flesh: Towards an Incarnational Missiology&lt;/em&gt; (Lanham: University Press of America, Inc., 2004), 9, 20, 36, 47–58; David L. Darbyshire, “Incarnational Evangelism: An Intentional Approach to Sharing the Good News in a Boundary Environment” (DMin diss., Southeastern Baptist Theological Seminary, 1989), 46–50; Kenneth A. Barnes, “‘And the Word Became Flesh’: The Incarnation: A Model For Evangelism” (DMin diss., Southeastern Baptist Theological Seminary, 1990), 32–43, 48, 50, 57.&lt;a href="#fnref13" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn14"&gt;&lt;p&gt;Cf. William E. Pannell, “Evangelism: Solidarity and Reconciliation,” in Speidell, 203.&lt;a href="#fnref14" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn15"&gt;&lt;p&gt;Barnes (36–38) rightly notes that imitating Christ is an essential element in the Christian life, but makes numerous hermeneutical missteps in his attempt to extend those texts to justify an “incarnational” theology.&lt;a href="#fnref15" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn16"&gt;&lt;p&gt;&lt;em&gt;Miracles&lt;/em&gt;, 131.&lt;a href="#fnref16" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn17"&gt;&lt;p&gt;Speidell, 149.&lt;a href="#fnref17" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn18"&gt;&lt;p&gt;“The Chalcedonian Definition of the Faith,” in &lt;em&gt;Creeds, Councils, and Controversies: Documents Illustrative of the History of the Church A.D. 337-461&lt;/em&gt;, eds. James Stevenson and B. J. Kidd (New York: Seabury Press, 1966), 352–353.&lt;a href="#fnref18" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category><category term="papers"></category></entry><entry><title>Communicatio Idiomatum</title><link href="http://www.chriskrycho.com/2014/communicatio-idiomatum.html" rel="alternate"></link><published>2014-05-03T14:00:00-04:00</published><updated>2014-05-03T14:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-03:/2014/communicatio-idiomatum.html</id><summary type="html">The "communication of attributes" between the divine and human natures in Jesus is one of the most important affirmations of the faith. In Jesus were united all that it is to be God and all that it is to be man.</summary><content type="html">&lt;p&gt;The “communication of attributes” (Latin &lt;em&gt;communicatio idiomatum&lt;/em&gt;) is a summary of one of the essential Christian affirmations about the Incarnation of the Son of God: that in the Incarnation, the person Jesus shared both divine and human attributes. The properties of divinity and humanity &lt;em&gt;both&lt;/em&gt; fully existed in Jesus the Messiah; they did not cross into each other, but were united in the Son. The Son then could choose to use whichever attributes were appropriate to him at a given time: he could both ride in a boat (consistent with being a human being) or forgive sins (consistenly only with being God). This carries through to all aspects of the Son’s work upon his incarnation: he has a human will and a divine will, neither of which overrides the other but both of which are exercised together as appropriate. The divine will is already in line with the will of the Father; the human will he chooses to subject to the Father. By analogy: one may know both English and French, and if so one speaks each language as appropriate—there is no implied division in a person simply because he knows more than one language.&lt;/p&gt;
&lt;p&gt;This communication of attributes was accomplished so that no part of either the Son’s pre-existing humanity divinity or newly-embraced humanity was either changed or diminished in the Incarnation. The two were &lt;em&gt;united&lt;/em&gt;, but they were not altered or subsumed. This important reality was articulated in the four negations of the Chalcedonian definition:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;In Jesus, the two natures were united &lt;em&gt;without confusion&lt;/em&gt;. The Incarnation was not like mixing wine and water to produce a &lt;em&gt;tertium quid&lt;/em&gt;, a third thing like both of the others but not actually either of them, even while no longer distinguishable from each other. Jesus was both God and man, not a new thing that was neither wholly God nor wholly man.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Jesus, the two natures were united &lt;em&gt;without diminishing&lt;/em&gt;. The Incarnation was not like putting a drop of wine in the ocean so that the wine simply dissipates and is meaningless. Thus Apollinarian view that the Son’s divine nature subsumed and overwhelmed the human nature was rejected. In Jesus both human and divine natures were fully present, and neither overwhelmed the other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Jesus, the two natures were united &lt;em&gt;without mixture&lt;/em&gt;. The Incarnation was not the result of combining two things that were unlike to produce a new thing which could still be separated into the old things. In other words, the Son’s becoming man was not like sodium joining with chloride to produce salt, which is entirely different from either sodium or chloride.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Jesus, the two natures were united &lt;em&gt;without separating&lt;/em&gt;. The Incarnation was not like bundling together a pair of sticks which could just as easily be pulled apart. The Son did not shed his humanity upon his resurrection or his ascension; he remains now and forever a human being as well as divine. Thus all the experiences, actions, and sayings of Jesus are attributable to one person (rather than suggesting that the divine Son did some things and the human being did another—one stick and another stick acting in distinct ways). Rather, one person, Jesus, walked (and walks) with both natures, lived (and lives) both kinds of lives, existed (and exists) in both ways.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, the attributes of God and of humanity were both &lt;em&gt;communicated&lt;/em&gt;—they had communion—in Christ. In Jesus, the human and divine did not mingle into a distinctionless soup, did not overwhelm each other, cannot be separated, and did not create some new thing unlike human or God. Jesus is fully God and fully man, forever.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Perfectionism</title><link href="http://www.chriskrycho.com/2014/perfectionism.html" rel="alternate"></link><published>2014-05-03T14:00:00-04:00</published><updated>2014-05-03T14:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-03:/2014/perfectionism.html</id><summary type="html">The classic Wesleyan doctrine of moral perfectionism in this life is tempting on some fronts&amp;mdash;but profoundly unhelpful.</summary><content type="html">&lt;p&gt;The theory of perfectionism suggests that believers ultimately come to a point in their &lt;em&gt;present&lt;/em&gt; walk with God where they stop willfully sinning. This stands in contrast to non-perfectionistic views which believe the end of willful sin comes only at &lt;em&gt;glorification&lt;/em&gt; after one’s death.&lt;/p&gt;
&lt;p&gt;Modern perfectionism was advocated by John Wesley at some points during his ministry and adopted as a hallmark of the Wesleyan tradition (though Wesley himself abandoned the view late in life). In the Wesleyan view, the believer at some point during his life experiences a “second blessing” in which the Holy Spirit supernaturally empowers the believer to overcome the rest of his natural (fleshly) tendency toward sin. This moment must be apprehended by the believer in faith—it is not guaranteed to all believers but is granted to those who seek it in faith. The Wesleyans draw this view primarily from the apostle John’s note that “No one who lives in [Christ] keeps on sinning” (1 John 3:6), as well as from various other passages which suggest that Christians may &lt;em&gt;stop&lt;/em&gt; sinning. Moreover, they note the biblical commands to holiness and argue that these strongly imply (if not demand) that believers be able actually to live truly holy lives. Thus, believers should pray regularly for this empowering act of the Spirit in their lives so that they may fulfill God’s will that they be truly holy.&lt;/p&gt;
&lt;p&gt;The view has some significant and serious problems, not least in the &lt;em&gt;rest&lt;/em&gt; of the book from which they primarily draw their support: John himself notes that when (not if) believers sin, they have an advocate with the Father in the person of Jesus himself (1 John 2:1). Similarly, the testimony of Paul and his ongoing struggles with sin after conversion and his explicit denial of having reached perfection (cf. Romans 7, Philippians 2) indicates that even for extraordinarily faithful believers, perfection will remain an unfilled but longed-for state until death.&lt;/p&gt;
&lt;p&gt;Practically, the view readily leads to frustration and even despair on the one hand or profound hubris on the other. Those who, despite their pleading and (true!) faith do not have any experience of “second blessing” and instead remain aware of their ongoing struggle with sin may find themselves thinking they are simply weak in the faith and that they will never accomplish God’s plan for their holiness. This could not be further from the truth: those most faithfully walking with God are in fact those &lt;em&gt;most&lt;/em&gt; aware of their own sinfulness. On the other hand, those who think they have found this holiness end up self-deceived. They proclaim their own sinlessness, and prove hypocrites. They may end up holding themselves up as superior to others (even if only in their own minds). They certainly will not go on as they ought in the process of mortifying their own sins, because they are convinced they have none.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>The Divinity of Jesus</title><link href="http://www.chriskrycho.com/2014/the-divinity-of-jesus.html" rel="alternate"></link><published>2014-05-03T14:00:00-04:00</published><updated>2014-05-03T14:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-03:/2014/the-divinity-of-jesus.html</id><summary type="html">Failing to affirm the divinity of Christ means failing to affirm one of the essentials of the faith. Without Christ's divinity, there is no salvation for any of us.</summary><content type="html">&lt;p&gt;The divinity of Jesus is and has been from the beginning a core component of the Christian faith. There are several reasons why Christians have always affirmed and indeed &lt;em&gt;must&lt;/em&gt; affirm the deity of Christ. First, Scripture itself clearly testifies to the fully deity of Jesus as the Son of God. To name just a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Incarnation passage in John&lt;/li&gt;
&lt;li&gt;Thomas’ outburst of faith, “My lord and my God!” to Jesus upon his resurrection&lt;/li&gt;
&lt;li&gt;Thomas’ outburst of faith, “My lord and my God!” to Jesus upon his resurrection&lt;/li&gt;
&lt;li&gt;the quotes throughout the New Testament but especially in Hebrews where God is quoted as addressing Jesus as God&lt;/li&gt;
&lt;li&gt;the quotes throughout the New Testament but especially in Hebrews where God is quoted as addressing Jesus as God&lt;/li&gt;
&lt;li&gt;the obvious reality that the early church prayed to and worshipped Jesus&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the Christian is first of all obliged by the Scriptures to acknowledge Jesus as God. Beyond this, however, is the reason that it had to be God Incarnate who saved human beings and not merely another human being (still less any other created thing). First, salvation entails reconciliation between God and humanity. That is, the salvation Christ accomplished was not only between God and human beings as individuals, but between God and &lt;em&gt;human nature&lt;/em&gt; which was broken in the fall and separated from God in whose image it was made. That Christ is the image of the invisible God (Colossians 1:15, Hebrews 1:3) is not only an affirmation of the nature of the divine Son but an affirmation of the restored humanity of Jesus the Messiah.&lt;/p&gt;
&lt;p&gt;Second, Jesus was a substitution for human sins. For this he of course had to be a human being (as the author of Hebrews notes: the blood of sheep and goats could not make purification for human sins). However, he had also to be God. Even if one mere human lived a perfectly sinless life, this perfect life would not be transferrable to another human being: it would be his alone, and would have no extra righteousness to give to another. But Jesus is fully God, and has &lt;em&gt;all&lt;/em&gt; righteousness. Indeed, it is the righteousness of God—infinite, boundless, untainted by sin—that Christians receive by faith. It is not one man’s righteousness somehow wafted across a courtroom (to borrow N. T. Wright’s metaphor), but the righteousness of God in which humans participate because they are united with Christ.&lt;/p&gt;
&lt;p&gt;Finally, Jesus came to overcome death. To die, he had to be a man, but to bring life he had to be God. Human beings do not have in themselves the power of life (still less to overcome death)—but God whose very name is “I AM”/“HE IS” has life in himself. Jesus the divine Son had and has life &lt;em&gt;in himself&lt;/em&gt;, and he therefore can and did overcome death. In his restored humanity, death no longer has any power. His resurrection was the first moment when this divine power of life broke into the fallen reality and gave a formerly mortal human body immortality. Believers have in one sense already died and been raised in him, and in another sense look forward to a fuller participation in that divine reality of life that does not end. Death died in the resurrection because Christ was &lt;em&gt;not&lt;/em&gt; merely a man, because his return from the grave was not like Lazarus’ a mere rescuscitation but the triumph of divine life over human frailty.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>The Nature of Justification (redux)</title><link href="http://www.chriskrycho.com/2014/the-nature-of-justification-redux.html" rel="alternate"></link><published>2014-05-03T14:00:00-04:00</published><updated>2014-05-03T14:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-03:/2014/the-nature-of-justification-redux.html</id><summary type="html">Justification is one of the essential elements of our salvation, and while it is not less than judicial right standing before God, it is more&amp;mdash;much more.</summary><content type="html">&lt;p&gt;Put most simply, to be justified is to be &lt;em&gt;right&lt;/em&gt; with God—to be “righteous”.&lt;/p&gt;
&lt;p&gt;Being right with God is a complex and multifaceted reality. To understand it, however, one must understand how &lt;em&gt;God&lt;/em&gt; is just and righteous, because Christian righteousness is &lt;em&gt;Christ’s&lt;/em&gt; righteousness (2 Corinthians 5:21). God’s righteousness is intrinsic to him; it is expressed in his righteous deeds, most especially in judging justly. His justice, in turn, is expressed in the most gracious and merciful manner imaginable: he punished sin and defeated death in himself, rather than in the people who deserved punishment and had brought death on themselves. Moreover, he also removes the power of sin in their lives so that they ultimately may &lt;em&gt;stop&lt;/em&gt; breaking fellowship with him and each other and may stop acting in such a way as to earn the penalty of sin (death). So God’s justice and righteousness are seen in that he restores people to unbroken relationship with him, removes from them not only their guilt but their brokenness and inevitable tendency toward sin.&lt;/p&gt;
&lt;p&gt;If this is the righteousness that is granted to Christians in Christ, then it is more than (though not less than) a change in judicial state before God. Christians have forensic justification in Christ—they are declared “not guilty” in him—because they are united with him. Colossians 2:9–14 drives home this connection clearly: believers are filled in Christ, buried in death and raised to life with him in baptism. This new life and participation in Christ is then the grounds of God’s setting aside the legal demands that stood against the believer: they are nailed to the cross because Christ was nailed to the cross and the believer &lt;em&gt;is in Christ&lt;/em&gt;. All trespasses are forgiven, because the believer is no longer operating under his own nature but is full of Christ, and in Christ the fullness of God dwells bodily.&lt;/p&gt;
&lt;p&gt;So then to be justified, to be made right with God, is to have all of Christ’s righteousness as &lt;em&gt;actually&lt;/em&gt; one’s own. It is not a legal fiction, but a spiritual reality. The believer is right with God; he may not always live in accord with this reality, but he is. By analogy: a husband is always married to his wife; even if he strays by cheating on her, he remains truly married to her.&lt;/p&gt;
&lt;p&gt;This view of justification cuts off at its core any kind of works-righteousness view of righteousness. The righteousness that believers possess is always entirely God’s righteousness mediated to them by the Spirit through their participation in the resurrected Son. It is not, as in the Roman Catholic view, participatory righteousness in which the believer contributes his own righteousness (even if by faith and the Spirit’s power) and the remainder is accomplished by God. Nor is it that God &lt;em&gt;chooses&lt;/em&gt; to see the believer as if he is righteous when in actuality he is not (yet) righteous because sanctification is incomplete. Rather, no part of the believer’s righteousness—right state, and not only right standing—is his own. Rather, it is always all of God. When acting righteously, one &lt;em&gt;demonstrates&lt;/em&gt; that one is justified, but whoever is in Christ is already truly righteous.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>The Spirit's Work in Conversion (redux)</title><link href="http://www.chriskrycho.com/2014/the-spirits-work-in-conversion-redux.html" rel="alternate"></link><published>2014-05-03T14:00:00-04:00</published><updated>2014-05-03T14:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-03:/2014/the-spirits-work-in-conversion-redux.html</id><summary type="html">The Spirit brought about the Incarnation, and raised Jesus from the dead; now the Spirit makes the Son's work efficacious in the hearts of believers. The Father originated the work of salvation; the Son was and is the means of salvation; the Spirit is the one who guarantees and accomplishes salvation.</summary><content type="html">&lt;p&gt;The Holy Spirit’s work in conversion, as in all the works of the Spirit, is the part of executing the will of the Father in the person of the Son. The Spirit brought about the Incarnation, and raised Jesus from the dead; now the Spirit makes the Son’s work efficacious in the hearts of believers. The Father originated the work of salvation; the Son (in his incarnation, life, death, resurrection, and ascension) was and is the means of salvation; the Spirit is the one who guarantees and accomplishes salvation.&lt;/p&gt;
&lt;p&gt;To begin, the Spirit opens unbelievers’ eyes to their need for salvation. Sinners apart from the Spirit are lost and hopeless, with either no awareness of need for God (passivity) or an active rejection of God (rebellion). The Spirit opens an unregenerate individual to see his need for salvation, providing an awareness of sinfulness and separation from God, and prompting desire for restored relationship and righteousness. This all happens in the preaching of the gospel, which the Spirit makes effective in the person’s mind—even as the Spirit was responsible for the existence of the gospel in Scripture to begin with. Thus the Spirit inspired the words of the gospel and then brings them to fruition: the Spirit is executor of God’s will.&lt;/p&gt;
&lt;p&gt;Moreover, the Spirit enables faith in Jesus Christ as the resurrected Son of God, as savior and lord.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In this recognition of one’s need and decisive change in the will—toward rather than away from God—the Spirit brings about the regeneration of the human heart. Regeneration unites the new believer to Jesus Christ: he comes to participate in the Son’s perfected, divinized humanity. Indeed, believers “become partakers of the divine nature” (2 Peter 1:4). Where once the believer’s heart rejected God, God now appears good and delightful and worthy of worship and trust. Where once one thought nothing of engaging in sin, one now increasingly hates and rejects sin and strives to sin no more. The Spirit replaces a heart of stone with a heart of flesh, and moves believers from darkness to light.&lt;/p&gt;
&lt;p&gt;Having accomplished the salvation of an individual soul, the Spirit brings the believer into the community of faith. No person’s salvation is singular or independent. Maturity and completion happen as one participates in the restoration of relationship not only with God but with other human beings. The people of God all participate &lt;em&gt;together&lt;/em&gt; through the Spirit in Jesus the Son. It is the Spirit who makes the people of God the body of Christ. And the Spirit seals the people of God for redemption, keeping them steadfast in their faith as they build one another up through fellowship and the proclamation of the word and participation in the ordinances—all of which are Spirit-empowered to continue God’s gracious work in the believer’s life, leading ultimately to final salvation.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Believers have differed on the particulars of this enabling throughout history, but all affirm that the Spirit does indeed enable faith as a minimum assertion. My own position is that the Spirit does not only &lt;em&gt;enable&lt;/em&gt; faith but &lt;em&gt;supplies&lt;/em&gt; it to hearts which would otherwise reject God. That is, the Spirit is not merely the ultimate ground but also the proximate cause of regeneration.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Why the Smart Reading Device of the Future May Be … Paper</title><link href="http://www.chriskrycho.com/2014/why-the-smart-reading-device-of-the-future-may-be-paper.html" rel="alternate"></link><published>2014-05-03T10:45:00-04:00</published><updated>2014-05-03T10:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-05-03:/2014/why-the-smart-reading-device-of-the-future-may-be-paper.html</id><summary type="html">Link&amp;mdash;I enjoy Kindle and iPad, but I still love books best. Turns out I'm not alone... and there might just be reason for it.</summary><content type="html">&lt;p&gt;One thing I didn’t talk about in comparing reading experiences on a Kindle and on an iPad the other day is the elephant in the room: old-fashioned books. I enjoy Kindle and iPad, but I still love books best. Turns out I’m not alone… and there might just be reason for it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wired.com/2014/05/reading-on-screen-versus-paper/"&gt;Brandon Keim at Wired:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Paper books were supposed to be dead by now. For years, information theorists, marketers, and early adopters have told us their demise was imminent. Ikea even redesigned a bookshelf to hold something other than books. Yet in a world of screen ubiquity, many people still prefer to do their serious reading on paper.&lt;/p&gt;
&lt;p&gt;Count me among them. When I need to read deeply—when I want to lose myself in a story or an intellectual journey, when focus and comprehension are paramount—I still turn to paper. Something just feels fundamentally richer about reading on it. And researchers are starting to think there’s something to this feeling.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="links"></category></entry><entry><title>iPad vs. Kindle</title><link href="http://www.chriskrycho.com/2014/ipad-vs-kindle.html" rel="alternate"></link><published>2014-04-30T21:20:00-04:00</published><updated>2014-04-30T21:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-30:/2014/ipad-vs-kindle.html</id><summary type="html">&lt;p&gt;I’ve been a happy owner of both a Kindle and an iPad Mini for the last several months, and it occurred to me tonight that I use them &lt;em&gt;very&lt;/em&gt; similarly in some ways. Both are primarily reading devices for me. What is different is the kinds of material I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve been a happy owner of both a Kindle and an iPad Mini for the last several months, and it occurred to me tonight that I use them &lt;em&gt;very&lt;/em&gt; similarly in some ways. Both are primarily reading devices for me. What is different is the kinds of material I read on each.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My Kindle is a first generation Paperwhite, in fairly good condition. (It has one significant quirk in that it sometimes turns on without the power button being pushed. Alas.) I use it nearly every day right now. I have most of my school books on it, and several of my favorite novels. I’m rereading Patrick Rothfuss’ &lt;em&gt;The Wise Man’s Fear&lt;/em&gt; right now, and so I spend a good half a hour a day on the Kindle for that alone. I also get a lot of my seminary reading done on the device.&lt;/p&gt;
&lt;p&gt;On the iPad, on the other hand, I read a lot of web pages, nearly all via &lt;a href="https://www.instapaper.com"&gt;Instapaper&lt;/a&gt;. I had sometimes had Instapaper items delivered to my Kindle, and that worked &lt;em&gt;fairly&lt;/em&gt; well, but I much prefer the experience of using the app on the iPad. I opt to do pretty much any technical reading on the device: its screen just works much better for dealing with things like code samples embedded in a blog post—not least because I can scroll easily if I need to! I also do basically all my Bible reading on the iPad. It is far easier to navigate to different parts of the text, switch translations (or original languages!) while keeping my place there on any of the top-tier iPad apps than on the Kindle. And I sometimes read comics on the iPad—something I would not try in a million years on the current Kindle screen!&lt;/p&gt;
&lt;p&gt;A friend asked a few months ago if I thought one would obviate the other. Given the qualification that neither is in any sense truly a &lt;em&gt;necessity&lt;/em&gt;—we could quite easily get along without either—my answer after several months with both is &lt;em&gt;no&lt;/em&gt;. Though the devices are similar in a number of ways, they fit into very different niches. The things I actively enjoy on each are very different. The Kindle is good for much longer-form reading, and its lack of distractions is nice (though I often take advantage of the Do Not Disturb mode on the iPad when I actually want to accomplish things besides talking on social media). The iPad is better for anything with color, for technical documents, and for anything where navigation more complex than one-page-after-another is important. I would not particularly want to read a novel on it, though!&lt;/p&gt;
&lt;p&gt;I will be curious to see if the devices converge at some point in the future.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; At present, no technology gives both the responsiveness and gorgeous color of the iPad &lt;em&gt;and&lt;/em&gt; the low-contrast, pleasant long-form reading experience offered by the Kindle’s e-ink. If at some point we get a technology that does both, it will be pretty amazing. In the meantime… we still have pretty amazing pieces of technology, and I enjoy them both a lot.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I also use the iPad for a number of other things: App.net and Twitter and so on, &lt;a href="http://www.fiftythree.com"&gt;Paper&lt;/a&gt;, starting some ideas for blog posts, etc. But mainly I read on it!&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;No, Amazon’s Kindle Fire series of tablets are nothing like that convergence: they are &lt;em&gt;functionally&lt;/em&gt; just poor-man’s-iPads hooked into Amazon’s ecosystem. Note that I’m not making a comment about the quality or lack thereof on the devices—only that they’re much reduced in capabilities compared to an iPad or Android (e.g. Nexus 7).&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content></entry><entry><title>A Little Crazy</title><link href="http://www.chriskrycho.com/2014/a-little-crazy.html" rel="alternate"></link><published>2014-04-29T19:30:00-04:00</published><updated>2014-04-29T19:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-29:/2014/a-little-crazy.html</id><summary type="html">I am going to write a static site generator in Io. Oh, and also the Markdown parser and HTML templating engine required to go with it.
</summary><content type="html">&lt;p&gt;I’m going to do something a little crazy, I’ve decided. I’m going to go ahead and do like I wrote &lt;a href="http://www.chriskrycho.com/2014/doing-it-myself.html"&gt;a bit back&lt;/a&gt;, and make &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt; actually a thing over the course of the rest of the year. Not so crazy. What is a bit nuts is the way I’ve decided to go about that process. In short: as close to the hardest way possible as I can conceive.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Over the last couple weeks, I’ve been spending a fair bit of time toying with &lt;a href="http://iolanguage.org"&gt;Io&lt;/a&gt;. It’s a neat little language, very different in its approach to a &lt;em&gt;lot&lt;/em&gt; of things than the languages I’ve used previously. My programming language history is very focused on the “normal” languages. The vast majority of real- world code I’ve written has been in one of C, PHP, or Python. I’ve done a good bit of Javascript along the way, more Fortran than anyone my age has any business having done, and a little each of Java and Ruby. Like I said: the normal ones. With the exception of Javascript, all of those are either standard imperative, object-oriented, or mixed imperative and object-oriented languages. Python and Ruby both let you mix in a fair bit of functional-style programming, and Javascript does a &lt;em&gt;lot&lt;/em&gt; of that and tosses in prototypal inheritance to boot.&lt;/p&gt;
&lt;p&gt;But still: they’re all pretty mainstream, “normal” languages. Io isn’t like that at all. For one thing, it’s hardly popular in any sense at all. Well-known among the hackers&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I know, perhaps, but not popular by any measure. It’s small. And it’s very &lt;em&gt;alien&lt;/em&gt; in some ways. It’s &lt;a href="http://en.wikipedia.org/wiki/Prototype-based_programming"&gt;prototypal inheritance&lt;/a&gt;, not normal inheritance. Courtesy of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain"&gt;Javascript&lt;/a&gt;, I have a &lt;em&gt;little&lt;/em&gt; familiarity with that, but it’s definitely still not my default way of thinking about inheritance. Python’s inheritance model (the one I use most frequently) is &lt;em&gt;essentially&lt;/em&gt; the same as that in C++, Java, PHP, and so on—it’s normal class-driven inheritance. Io goes off and does full-blown prototypal inheritance; even just the little I’ve played with it has been fun.&lt;/p&gt;
&lt;p&gt;Io also does a bunch of other things a &lt;em&gt;lot&lt;/em&gt; different from the other languages I’ve used. First, there are no keywords or—formally speaking—even operators in the language. Every action (including ones like &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;) is simply a message. Every value is an object (so &lt;code&gt;1.0&lt;/code&gt; is just as fully an object as an arbitrarily-defined &lt;code&gt;Person&lt;/code&gt;). The combination means that writing &lt;code&gt;1 + 2&lt;/code&gt; is actually just interpreted as the object &lt;code&gt;1&lt;/code&gt; receiving the &lt;code&gt;+&lt;/code&gt; message carrying as its “argument” the &lt;code&gt;2&lt;/code&gt; object (really just the message contents). This is &lt;em&gt;completely&lt;/em&gt; different at a deep paradigm level from the normal object-oriented approach with object methods, even in a language like Python where all elements are objects (including functions). The net result isn’t necessarily particularly different from calling methods on objects, but it is a &lt;em&gt;little&lt;/em&gt; different, with have some interesting consequences. Notably (though trivially—or at least, so it seems to me at this point), you can pass a message to the null object without it being an error. More importantly, the paradigm shift is illuminating.&lt;/p&gt;
&lt;p&gt;Io also has far more capabilities in terms of concurrency than any of the other languagues with which I’m familiar, because it actively implements the &lt;a href="http://en.wikipedia.org/wiki/Actor_model"&gt;Actor Model&lt;/a&gt;, which means its implementation of messaging instead of object method calls can behave in concurrent ways. (I’d say more if I understood it better. I don’t yet, which is one of the reasons I want to study the language. Concurrency is very powerful, but it’s also fairly foreign to me.) It’s also like Lisp in that its code can be inspected and modified at runtime. I’ve wanted to learn a Lisp for several years for this kind of mental challenge, but the syntax has always just annoyed me too much ever to get there. Io will give me a lot of its benefits with a much more pleasant syntax. It has coroutines, which are new to me, and also helpful for concurrency.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The long and short of it is that the language has a ton of features not present in the languages I have used, and—more importantly—is &lt;em&gt;paradigmatically&lt;/em&gt; different from them. Just getting familiar with it by writing a goodly amount of code in it would be a good way to learn in practice a bunch of computer science concepts I never had a chance to learn formally.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;By now, as long as I’ve rambled about Io, you’ve probably figured out where I was going in that first paragraph. I’ve decided to stretch my brain a bit and write Step Stool in Io. There are bunches of static site generators out there in Python already, many of them quite mature. (This site is running on &lt;a href="https://github.com/getpelican"&gt;one of them&lt;/a&gt; as of the time I write this post—it’s quite solid, even its quirks and limitations occasionally annoy me.) The point of Step Stool has always been twofold, though. First, I’ve wanted to get to a spot where I was really running my own software to manage my site, letting me do whatever I want with it and guaranteeing I always understand it well enough to make those kinds of changes. Second, I’ve just wanted to &lt;em&gt;learn&lt;/em&gt; a whole bunch along the way. Third, it’s right there in the website link: &lt;a href="http://step-stool.io"&gt;step-stool.io&lt;/a&gt;! How could I pass up such an opportunity?&lt;/p&gt;
&lt;p&gt;It is that second goal that has pushed me to do this crazy project this crazy way. It’s crazier than just teaching myself a language in order to do the static site generator itself, too, because there are a few other pieces missing that I’ll need to write to make this work… like a Markdown implementation and an HTML templating language. I’ve never written anything remotely like either before, so I’m going to take the chance to learn a &lt;em&gt;lot&lt;/em&gt; of new things. For the Markdown implementation, rather than relying on regular expression parsing (like most Markdowns do), I’m going to use a Parsing Expression Grammar. That will certainly be more efficient and reliable, but—more importantly—it is also outside my experience. I have yet to start thinking through how to tackle the HTML templating language implementation (though I know I am going to make it an Io implementation of &lt;a href="http://slim-lang.com"&gt;Slim&lt;/a&gt;, which I quite like).&lt;/p&gt;
&lt;p&gt;In any case, I’m going to be taking a good bit longer to get Step Stool finished. That is all right: I am going to learn a ton along the way, and I am quite sure I will have a blast doing it. And that is &lt;em&gt;exactly&lt;/em&gt; what these kinds of projects are for.&lt;/p&gt;
&lt;p&gt;I’ll post updates as I go, with the things I’m learning along the way. Hopefully they’ll be interesting (or at least entertaining).&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Hackers in the original sense of the world. Not “crackers”, but people who like hacking on code, figuring things out the hard way.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Python 3.5 is actually adding coroutines, and I’m excited about that. I’ll feel much more comfortable with them there having used them in Io, I’m sure!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I got here backwards, as it were—by way of an undergraduate degree in physics. I don’t regret that for a second: I got a much broader education than I could have managed while getting an engineering degree, and most importantly learned &lt;em&gt;how to learn&lt;/em&gt;: easily the most important skill anyone gains from any engineering degree.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="software development"></category></entry><entry><title>Further Upward and Further In</title><link href="http://www.chriskrycho.com/2014/further-upward-and-further-in.html" rel="alternate"></link><published>2014-04-29T08:15:00-04:00</published><updated>2014-04-29T08:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-29:/2014/further-upward-and-further-in.html</id><summary type="html">The Christian life  the life of growing sanctification&amp;mdash;increasing in Christlikeness and so in humanity as it was meant to be.</summary><content type="html">&lt;p&gt;Humanity was meant for something more than its current state. Those of us who are in Christ are, by the grace of God, slowly being transformed into that &lt;em&gt;something more&lt;/em&gt;. We are being made like God. This is the essential nature of the process of sanctification: slow transformation from our current state into the image of God. Sanctification is one of the most important ideas in the Bible, and many things besides people were sanctified in the course of salvation history. Sanctification is being set apart for service to God, being made “holy” —including especially the various elements used in the pre-Christ sacrificial system. This kind of holiness entails both moral uprightness and distinction from the mundane.&lt;/p&gt;
&lt;p&gt;We first recognize that moral failure is a reality—a sad and tragic reality, but a reality nonetheless—in the life of the Christian. Even after experiencing regeneration and justification, we remain &lt;em&gt;simultus justus et peccator&lt;/em&gt;, to borrow Luther’s famous phrase: simultaneously justified and yet sinners. We remain in the world &lt;em&gt;and&lt;/em&gt; of the world, rather than in it but not of it. We are not yet wholly set apart for God’s works, but too often continue to pursue fallen ends via fallen means. We need to be transformed so that we pursue God’s ends (ultimately: God himself) as he has called us, rather than the things of the earth.&lt;/p&gt;
&lt;p&gt;But God in his wisdom has ordained that we &lt;em&gt;grow&lt;/em&gt; into this. We are justified at a single moment by faith in Christ, and our sanctification will ultimately be finished in a single moment when we are glorified upon our death. In the interval, though, God has called us to pursue him, to strive for the holiness which Christ exemplified for us. As we do, we learn to trust him more and rely more thoroughly on his power and wisdom rather than our own, and this too is part of the process of sanctification. When we are perfected, it will not be a matter of suddenly being able to do on our own what we could not before, but rather that we will finally depend wholly on God.&lt;/p&gt;
&lt;p&gt;In this we are growing into the full maturity of humanity. Our model is Jesus Christ: the God-man who shows us what it means to be a perfect human being. He taught us over and over again not only by example but by direct affirmation that his life was characterized above all by dependence on his Father and that he acted not on his own power but that of the Spirit. In our sanctification, we learn to walk the same way. As in our justification, this comes about because we are being united to Christ by the indwelling Spirit—so our growing humanity is also growing to participate in the life of the Trinity. We pursue the Father and his ways, empowered by the Spirit to partake of Christ’s risen, divinized humanity.&lt;/p&gt;
&lt;p&gt;This way of putting it is often jarring to western theologians, but is fully orthodox and has been part of the Eastern Orthodox tradition for sixteen centuries and more. It draws directly on the language of 2 Peter 1:4, which reminds us that we are partakers of the divine nature. It was on that very basis that Peter laid out his enjoinder to grow in the various measures of sanctification: faith, virtue, knowledge, self-control, steadfastness, godliness, brotherly affection, and love (a list that bears what is surely not a coincidental similarity to Paul’s fruit of the Spirit). Sanctification is our wholehearted pursuit of the things of God, not on our own power but by his gracious work in us, until we someday attain to full maturity and depend wholly on the Spirit’s uniting us to Christ.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>We Are Not Alone</title><link href="http://www.chriskrycho.com/2014/we-are-not-alone.html" rel="alternate"></link><published>2014-04-23T06:52:00-04:00</published><updated>2014-04-23T06:52:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-23:/2014/we-are-not-alone.html</id><summary type="html">Psalms 77 and 78 help us see how to respond to suffering and pain in our lives: by looking (even when it is hardest to do so) to the God who made everything and who has saved his people.</summary><content type="html">&lt;p&gt;I came to the end of Psalm 77 and knew that the editors of the Psalms must have had the same feeling I did. “And then what happened?”&lt;/p&gt;
&lt;p&gt;This Psalm of Asaph is one of those laments that does not hesitate to ask hard questions of God.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;I cry aloud to God,&lt;br /&gt;
    aloud to God, and he will hear me.&lt;br /&gt;
In the day of my trouble I seek the Lord;&lt;br /&gt;
    in the night my hand is stretched out without wearying;&lt;br /&gt;
    my soul refuses to be comforted.&lt;br /&gt;
When I remember God, I moan;&lt;br /&gt;
    when I meditate, my spirit faints. Selah&lt;br /&gt;
&lt;br /&gt;
You hold my eyelids open;&lt;br /&gt;
    I am so troubled that I cannot speak.&lt;/div&gt;
&lt;p&gt;(Psalm 77:1–4 ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think every person who lives long enough comes to know this feeling. We face hard times in this fallen world. We ourselves suffer, and we watch the people around us suffer. We see our communities—our churches, our neighborhoods, our nations—stumble and falter. We long for things to be set right, and they have &lt;em&gt;not&lt;/em&gt; yet been set right. Even the thought of God is hard (v. 3).&lt;/p&gt;
&lt;p&gt;But Asaph looks to God anyway. The rest of the Psalm turns and faces the character and history of God. It asks the hard questions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt; Has his steadfast love forever ceased?&lt;br /&gt;
     Are his promises at an end for all time?&lt;br /&gt;
 Has God forgotten to be gracious?&lt;br /&gt;
     Has he in anger shut up his compassion?&amp;quot;&lt;/div&gt;
&lt;p&gt;(Psalm 77:8–9, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Asaph’s answer is straightforward: “I will remember the deeds of Yahweh” (v. 11). And the rest of the Psalm is just that: a reflection on the creative power of God—with a turn just twice to God’s work in his people (vv. 15, 20). Our God is the God who made the heavens and the earth, to whom belong storms and seas and every mighty, awesome thing we see around us. From him comes salvation.&lt;/p&gt;
&lt;p&gt;And then, with “You led your people like a flock / by the hand of Moses and Aaron” (v. 20) the Psalm simply comes to an end. We are left hanging. The editor of the Psalms (and perhaps Asaph himself) recognized that there is more to say into our sorrows and our grief—more to say about who God is and has been not only in the structure of the world but in the history of his people. So the answer continues: Psalm 78 takes up that theme of God’s leading his people by the hand of Moses and Aaron and expands it into a full-fledged poetic history of Yahweh’s work in the people of Israel (one of several such in the Psalms).&lt;/p&gt;
&lt;p&gt;Psalm 77 reminds us that our God owns the thunderbolts, and punctuates that sentiment with the reminder that he saves his people. It stands as a monument to the reality that God has all the power he could possibly need to save his people, to show them the steadfast love and compassion that seemed absent when Asaph penned the lament.&lt;/p&gt;
&lt;p&gt;Psalm 78 in turn reminds us that Yahweh is more than a sugar-daddy who dances to our whims. He is the God who saves us, yes; he is also the God who judges us and brings righteousness about &lt;em&gt;in&lt;/em&gt; his people as well as &lt;em&gt;for&lt;/em&gt; his people. The people sin (just as we sin!) and &lt;em&gt;God&lt;/em&gt; atones for them (and for us!) even as he judges them (even as he judges us!). It also reminds us that we are not alone. It situates our suffering and struggles against the backdrop of God’s work with his people, of whom we are a part. We are not individuals drifting through life alone, but part of the people of God, both immediately in our local church and broadly in the history of the world. We must situate our struggles and our challenges and our pains against that broader story—not diminishing them, but recognizing that they are part of a larger tapestry. And that tapestry is from the hands of a master weaver. He knows what he is about.&lt;/p&gt;
&lt;p&gt;When we face the hard realities of life, then, these Psalms are standing stones that point us back to our rock. Even when the thought of God itself makes us weary and bitter, we must look to him. Who is he? What has he done? Is he not powerful enough to save, and has his work before not shown that he will indeed save? Is he not trustworthy? He is.&lt;/p&gt;
&lt;p&gt;We do not always know the reasons God allows and ordains the struggles and travails we face. Indeed: often we do not. We do know the God who is with us in those trials, though. He is the God who has atoned for us when we were still in the act of rebelling against him, and who did so by taking up humanity himself, walking this broken world to heal our hurts. As Hebrews reminds us: the high priest we have is one who &lt;em&gt;can&lt;/em&gt; sympathize with our weaknesses. We are not alone: not even in the darkest night, when prayer itself makes us faint. God is with us. Immanuel. The Spirit indwells. Thanks be to God.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Right Standing Before God</title><link href="http://www.chriskrycho.com/2014/right-standing-before-god.html" rel="alternate"></link><published>2014-04-22T08:15:00-04:00</published><updated>2014-04-22T08:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-22:/2014/right-standing-before-god.html</id><summary type="html">Any discussion of the work of God in Christ has to include the idea of justification. It is a central theme in Bible's picture of salvation.</summary><content type="html">&lt;p&gt;Any discussion of the work of God in Christ has to include the idea of justification: it is an important throughout the Bible, and is especially prominent in Paul’s writings on salvation (which comprise a substantial part of the New Testament and most of our systematically theological reflection on salvation arises). The word “justify” and its nominal forms are used to translate words from the &lt;em&gt;dikaoō&lt;/em&gt; (δικαιόω) word group in Greek, which includes a number of related concepts, all circling in various ways around the notion of justice and right action and just and righteous character. Since “justification”—being justified—before God is a central idea in Scripture and an essential element of our salvation, we should be careful to understand what exactly this concept means.&lt;/p&gt;
&lt;p&gt;Most basically, for a person to be justified is for him or her to be righteous, and correspondingly to have acted rightly—in the eyes of God. At a bare minimum, this of course requires both the performance of good works and the rejection of sin. However, justification means more than simply having checked off a series of boxes corresponding to specific good works while having avoided other boxes corresponding to bad or sinful actions. It means being regarded as having done righteously and justly by God, and God sees our hearts, so even doing what is right and shunning what is wrong may not be sufficient: we often have entirely the wrong motives in such actions. We seek the approval of men instead of to please God; we want the social or personal benefits that follow from doing nice things for others; we enjoy stoking the fires of our own pride. In any case, we do not even act rightly, still less do so for the glory of God. So the idea that we might be justified on our own merits is hopeless.&lt;/p&gt;
&lt;p&gt;Second, we should note that ordinary notions of justification often tend to include many of the right (that is, Biblical) concepts of justification in them, but in shallower forms than Scripture supplies. In particular, the use of the term has shifted somewhat from when it was used to translate the word group from Greek into English. When we say, “he was justified,” we do not mean that someone did the right thing, but that whatever someone did, he had grounds for doing. We can of course turn this back to our needs by noting that we have grounds only for right-hearted obedience and none for sinning. Still, this is less than the biblical idea of justification—of being considered to have done rightly in every way.&lt;/p&gt;
&lt;p&gt;For the “Christian” to be justified, we must be able to stand before God and he consider us righteous in every word and deed and thought and attitude of the heart. This happens in two ways (inseparable from each other): forensic justification and imputed righteousness through union with Christ. In “forensic justification,” God legally acquits us of guilt for committed sin and righteous deeds left undone. The list of offenses we committed was nailed to the cross (cf. Colossians 2:13–15). This can happen because we are united with Jesus the Son of God by the Spirit of God. As Paul notes in 2 Corinthians 5:21, the sinless Christ became sin that we might become the righteousness of God. All that is Christ’s is ours; we are one with him and so we have all his righteousness. (The word “righteousness” here derives from the same root as we translate “justification”—these ideas are inextricably linked.) Finally, God himself justifies us, calling us righteous, because Jesus Christ has both lived in perfect righteousness and paid the penalty for our sins, propitiating the wrath of God (cf. Romans 3).&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>More Than We Could Have Hoped</title><link href="http://www.chriskrycho.com/2014/more-than-we-could-have-hoped.html" rel="alternate"></link><published>2014-04-17T13:35:00-04:00</published><updated>2014-04-17T13:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-17:/2014/more-than-we-could-have-hoped.html</id><summary type="html">Hebrews points us to the wonder of what we have as those who live when Christ has already come&amp;mdash;and it is wonderful indeed.</summary><content type="html">&lt;p&gt;The past week was something of a bumpy ride. I got sick—the kind of sick that makes you feel terrible and want to do nothing but sleep for days on end. The kind of sleep that makes you long for a resurrection body. Then my lovely wife got sick at the beginning of this week. Accordingly, I have not written these posts, nor (much worse) been as consistent in my readings as I would like. Still: here I am again, diving back in. The discipline of writing these posts continues to prove fruitful for me as an exercise in thinking rightly about God and in being consistent in my devotional reading. It also helps keep my wordsmithing at least a little fresh, even if I have noted that writing these little notes is a very different skill than writing academically or even longer-form blog posts. Still: much of four months in (and far too many days missed), this remains a valuable use of my time.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Reading in Hebrews is always a source of enormous spiritual encouragement to me. I am not sure I could picka favorite book in the Bible: every time I read a bok again, Ifind new depths and treasures in it. A few do stand out, though: Isaiah, several of the minor prophets, Colossians, and Hebrews tend to speak to me with particular force. Whatever the reason—some mix of my personality and temperament with the things God desires to accomplish in me—Hebrews simply delights me time and again.&lt;/p&gt;
&lt;p&gt;Reading through these chapters, I am captured by the author’s emphasis on two realities. The first is the central thrust of the book: the supremacy of Jesus Christ over every would-be religious competitor, even the religious competitors of the tradition from which he came. For the author of this epistle, none of the trappings of Judaism—glorious and good though they were—could measure up to Jesus. But this is because of the second thing that always comes home in reading this letter: the author saw Jesus as the perfect fulfillment of all the things toward which Old Testament belief had pointed. The temple, the priesthood, the old kingship… all of these things were aiming for Jesus. When he came, there was no need for those old things: not because they were bad, but because they had been replaced by something impossibly better. The symbol had been supplanted by the reality.&lt;/p&gt;
&lt;p&gt;It is easy to take that for granted, living this side of the incarnation of God and this side of the inauguration of his kingdom. But we ought not. We ought to look at the Old Testament with joy that we see clearly what the prophets longed to see but &lt;em&gt;did not&lt;/em&gt;. We ought to read those pages of expectation and longing and exult that the longing has been satisified. Yes, we live still in the time between the times, when Christ has come but has yet to come again—but we live in the time between the times: Christ &lt;em&gt;has&lt;/em&gt; come. All those pointers and prophecies and hints and hopes that ran from Adam through Noah down to Abraham and on past David’s kingdom into the words of the prophets and even in exile and return to the land—we see them clear as can be in God-the-Son who died on our behalf and lives on our behalf.&lt;/p&gt;
&lt;p&gt;We have a high priest who never dies again, and who therefore never has to lay aside his priesthood, never has to cease his prayers. We have a priest who had no need to atone for his own sin, but in his own self atoned for all our sin once and for all. We need no further sacrifices. We have a perfect intercessor. We have Jesus, author and perfector of our faith. We have everything we need, and more than we ever could have hoped. Hallelujah.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Halfway to His Own Thesis</title><link href="http://www.chriskrycho.com/2014/halfway-to-his-own-thesis.html" rel="alternate"></link><published>2014-04-12T08:00:00-04:00</published><updated>2014-04-12T08:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-12:/2014/halfway-to-his-own-thesis.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Five Smooth Stones for Pastoral Work&lt;/em&gt;, by Eugene H. Peterson. Grand Rapids: Eerdmans, 1980. 241 pp. $20.&lt;/p&gt;
&lt;section id="overview" class="level2"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In &lt;em&gt;Five Smooth Stones for Pastoral Work&lt;/em&gt;, Eugene Peterson advocates for a biblically grounded rather than psychologically-driven approach to pastoral work. He argues that the idea that pastors must first of all …&lt;/p&gt;&lt;/section&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Five Smooth Stones for Pastoral Work&lt;/em&gt;, by Eugene H. Peterson. Grand Rapids: Eerdmans, 1980. 241 pp. $20.&lt;/p&gt;
&lt;section id="overview" class="level2"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In &lt;em&gt;Five Smooth Stones for Pastoral Work&lt;/em&gt;, Eugene Peterson advocates for a biblically grounded rather than psychologically-driven approach to pastoral work. He argues that the idea that pastors must first of all be up to date and current has things precisely backwards: the pastor’s responsibility is to lead his congregation back to timeless realities, not into the hippest fads of the day. He suggests that the &lt;em&gt;Megilloth&lt;/em&gt;, the “five scrolls” of Songs of Songs, Ruth, Lamentations, Ecclesiastes, and Esther, have particular lessons to teach pastors as they seek to bring “what is essential in the human condition, not what is accicental” (p. 2) down into the “idiosyncrasies of the local and the personal” (p. 5). A failure either to hold fast to the eternal word and will of God, or to bring it home to those to whom the pastor ministers, will leave the people without what they most deeply need: a shepherd through the vagaries and trials of life.&lt;/p&gt;
&lt;p&gt;Peterson provides a substantial introduction to the book (some ten percent or so of the book’s text), in which he traces out his thesis in detail. He then divides the rest of the book into five discussions of pastoral work, grounding each in one of those “five scrolls.” In each, Peterson interacts with the psychologizing tendency of the present day, the history of the interpretation of the Biblical book in question, and how pastors might learn from and apply the lessons of the book to their own work in their own congregations. For Peterson, Song of Songs is a model for directing God’s people into richer prayer, Ruth is a picture of situating individual stories in the context of salvific history, Lamentations is a guide to walking with people through their suffering, Ecclesiastes is a help in rejecting false religion in place of the fear of God, and Esther is a pointer to the essentially communal nature of the people of God.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="analysis" class="level2"&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;Curiously, the most significant problem with the book might at first appear to be one of its great strengths. Peteron’s skill as a writer is such that he can sometimes carry the reader along by sheer rhetorical effect—but this is in some sense a result antithetical to the purpose of the text. In a text explicitly and self-consciously aiming to point pastors away from technique and the tendency to mistake emotion for changed lives, the contrast with what Peterson actually does in large swaths of the book is striking and unfortunate. There are too many places where Peterson relies on the emotional impact of his words rather than on the text itself. Nearly the whole chapter on Esther falls into this trap, as do large swaths of the chapters on Ecclesiastes.&lt;/p&gt;
&lt;p&gt;It is not so much that the points Peterson makes in these chapters are wrong: many of them are quite on target. It is that, disconnected from the text from which he purports to draw them, they become mere floating assertions about the world—assertions that, however beautifully made, we may take or leave as they strike us. There is too much technique in Peterson’s theologizing and too little of the Scripture to which he enjoins his readers to return.&lt;/p&gt;
&lt;p&gt;Granted that Peterson makes no claim to be writing exegetical commentaries on the text, but he opens the book with the reminder that “we don’t, and we must not, lay our own foundations” (p. 11). Indeed, he (quite rightly) spends the whole introduction pleading for pastors to ground their work not in the trends of the day but in the “eternal will and word of God” (p. 5). It is a strange thing that he should then spend so much of the book on his own ruminations and not wrestling with the particulars of those texts. This is a significant loss, because when Peterson does remain more closely engaged with the text, as in his chapters on Ruth and Lamentations, and as in some parts of his treatment of Ecclesiastes, the effect is marvelous. The reader is drawn into wonder at the way God’s word guides us effectively for pastoral ministry. The pastor is reminded that the circumstances and trials he and his flock face are not things newly sprung up in the late twentieth or early twenty-first century, but the sorts of things for which God has already supplied guides and instruction in the Scriptures.&lt;/p&gt;
&lt;p&gt;But this is no surprise: this is Peterson’s own thesis. The power of our faith, the fruitfulness of pastoral ministry (and the effectiveness of our books thereon) is not in our technique but in grappling deeply with the word of God in our own situations. The more he grapples with the Scriptures, the more his technique serves the text, the better Peterson’s book is—and vice versa. Where technique serves exposition, the reader is built up. Where exposition falls aside and rhetoric reigns, the reader may be moved emotionally, but little remains when that glow fades.&lt;/p&gt;
&lt;p&gt;Thus, for four of the five chapters in the book, Peterson’s success in advancing his thesis may largely be measured by the extent to which he engages the text. In Ruth and Lamentations, the narrative and poetry respectively drive the discussion, and so the chapters are profoundly helpful. The discussion of Ruth helps the pastor see his peoples’ personal stories rightly—and thus, to help his people see their own stories rightly. They are not the end-all and be-all that modern psychology might make them out to be, but neither are they insignificant. Indeed, they are all the more significant precisely &lt;em&gt;because&lt;/em&gt; they are part of something much bigger than themselves. The discussion of Lamentations helps a pastor to see the necessity both of walking &lt;em&gt;through&lt;/em&gt; suffering and sorrow with his flock and of helping them come to resolution in the right time. Petersons’ treatment of Ecclesiastes, as a guide to saying &lt;em&gt;no&lt;/em&gt; to false religion, seems to be an accurate analysis of the book, but Peterson veers away from the Text. He deals too little with the specific ways in which &lt;em&gt;Qoheleth&lt;/em&gt; confronts our culture and too much in the sweeping generalizations about the value of those confrontations. Least helpful of all is his treatment of Esther, in which he rightly diagnoses severe problems in the culture around us but leaves aside almost everything in the book itself. We desperately need the kind of rebuke to individualism he suggests here. Whether Esther can support that kind of rebuke, still less offer an alternative vision of the people of God, is left aside in favor of a good but largely-unrelated discussion of Saul and Amalek and the shape of ministry.&lt;/p&gt;
&lt;p&gt;Peterson’s treatment of the Song of Songs deserves its own analysis. The text is notoriously hard to interpret, and has been subject to countless different readings. Peterson falls squarely into the allegorical camp, though he gives the allegorical reading something of a twist. The urgency of romantic (both emotional and sexual) desire so prominent in the book he transmutes into a picture of the Christian’s right desire for communion with God. This was the chapter in which Peterson hewed &lt;em&gt;most&lt;/em&gt; closely to the text, and so it was the chapter least susceptible to the problems outlined above. As with all treatments of the Song, though, the effectiveness of the chapter hinges on whether one finds Peterson’s interpretation accurate. (I did not.) Insofar as one grants Peterson’s interpretation, though, the chapter is an effective argument for the necessity of prayer, and especially of the pastor leading his people to pray with greater fervency.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion" class="level2"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Five Smooth Stones for Pastoral Work&lt;/em&gt; is in some ways a very good book, but in others it falls short—an especially unfortunate reality given the very real problems at which it aimed. That Peterson wants to see pastors grounding their &lt;em&gt;pastoring&lt;/em&gt; in the Scriptures as well as their preaching and teaching is clear. Less clear is whether this book will be as effective as it could have been in accomplishing that end. Good pastoral work does not run aground only on the rocks of psychology. Rhetoric is an equally deadly reef, and it may be the more tempting to a skilled writer passionate for the recovery of Biblical pastoral work.&lt;/p&gt;
&lt;p&gt;The chapters on Ruth and Lamentations were excellent and profoundly helpful treatments of the topics they addressed, and Peterson’s treatment of Song of Songs was at least interesting. Because he exchanged exposition for effect in his treatments of Ecclesiastes and Esther, though, the book falters. Though his words never failed to pack an emotional punch, they were too often hollowed out by their lack of a connection to the text. In this, these chapters serve as an accidental and unfortunate illustration of the necessity of Peterson’s own thesis. We need not more effective psychology, nor more powerful lnaguage, but a deeper reliance on and connection to the word of God.&lt;/p&gt;
&lt;/section&gt;
</content><category term="[M. Div."></category><category term="SEBTS"></category><category term="book reviews]"></category></entry><entry><title>Learning QML, Part 1</title><link href="http://www.chriskrycho.com/2014/learning-qml-part-1.html" rel="alternate"></link><published>2014-04-11T15:30:00-04:00</published><updated>2014-04-11T15:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-11:/2014/learning-qml-part-1.html</id><summary type="html">&lt;p&gt;For part of my work with Quest Consultants, I’ve been picking up Qt’s QML toolkit to use in building out the UI. The declarative syntax and ability to define one’s own model in non-C++- or Python-specific ways is quite nice. That said, the learning process has had …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For part of my work with Quest Consultants, I’ve been picking up Qt’s QML toolkit to use in building out the UI. The declarative syntax and ability to define one’s own model in non-C++- or Python-specific ways is quite nice. That said, the learning process has had more than a few bumps along the way. I decided to go ahead and write those up as I go, both for my own reference and in the hope that it may prove useful to others as I go.&lt;/p&gt;
&lt;p&gt;QML is a &lt;em&gt;Javascript-like&lt;/em&gt; language for &lt;em&gt;declarative programming&lt;/em&gt; of a user interface. So it’s a Javascript-based language that sort of behaves like HTML. In fact, it behaves like Javascript in terms of how you define, access, and update properties, and you can embed full-featured (mostly) Javascript functions and objects in it.&lt;/p&gt;
&lt;p&gt;But when you have nested QML Types, you end up with them behaving more like HTML.&lt;/p&gt;
&lt;p&gt;The weirdest bit, and the thing that I’m having the hardest time adjusting to, is that you can only edit properties of root Types when you’re working with an instance of that Type. And those Types are defined by &lt;em&gt;documents&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, to give the simplest possible example, let’s say I defined a new type called &lt;code&gt;Monkey&lt;/code&gt;, in the &lt;code&gt;Monkey.qml&lt;/code&gt; file, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Monkey.qml
import QtQuick 1.1

Item {
    id: monkey_root
    property int monkey_id: -1
    property string monkey_name: &amp;quot;I don&amp;#39;t have a name!&amp;quot;

    Item {
        id: monkey_foot
        property string monkey_foot_desc: &amp;quot;The monkey has a foot!&amp;quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can use that in another file. If they’re in the same directory, it’s automatically imported, so I can just do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//main.qml
import QtQuick 1.1

// Rectangle is exactly what it sounds like. Here we can display things.
Rectangle {
    id: the_basic_shape
    height: 400
    width: 400
    color: green

    Monkey {
        id: monkey_instance
        monkey_id = 42
        monkey_name = &amp;quot;George&amp;quot;  // he&amp;#39;s kind of a curious little guy
    }

    Text {
        text: monkey_instance.monkey_name
        color: &amp;quot;red&amp;quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That creates a (really ugly) rectangle that prints the &lt;code&gt;Monkey&lt;/code&gt;’s name in red text on a green background. It’s impossible to access directly the &lt;code&gt;monkey_foot&lt;/code&gt; element, though, which means that composing more complex objects in reusable ways is difficult. In fact, I haven’t come up with a particularly good way to do it yet. At least, I should say that I haven’t come up with a good way to create high-level reusable components yet. I can see pretty easily how to create low-level reusable components, but once you start putting them together in any &lt;em&gt;specific&lt;/em&gt; way, you can’t recompose them in other ways.&lt;/p&gt;
&lt;p&gt;From what I’ve gotten my head around so far, this ends up being less flexible than either HTML templating languages (which are, or at least can be, completely declarative) or normal Javascript (which is obviously &lt;em&gt;not&lt;/em&gt; declarative). Mind you, it’s all sorts of &lt;em&gt;interesting&lt;/em&gt;, and I have a pretty decent idea what I’m going to do to implement our UI with it, but it’s taken me most of the day to get a good handle on that, and my head still feels a bit funny whenever I’m trying to see how best to create composable components.&lt;/p&gt;
&lt;p&gt;Note, too, that this is the &lt;em&gt;only&lt;/em&gt; way to create a new basic type of object in QML: it has to be the root level object in a QML document. I would &lt;em&gt;really&lt;/em&gt; like to be able to access internal declarations—to have named internal types/objects. Unfortunately, QML doesn’t let you do this. I suspect this has to do with how the QML type system works: it actually binds these types to C++ objects behind the scenes. This is a non-trivially helpful decision in terms of the performance of the application, but it certainly makes my brain a little bit twitchy.&lt;/p&gt;
&lt;p&gt;There are two basic consequences of this structure. First, any types you need to be able to use in other QML objects have to be defined in their own QML documents. Second, it is (as near as I can see so far, at least) difficult to create good generic QML types of more complex structures that you can then use to implement specific variations. For example: if you want to create accordions, you can create a fair number of the low-level elements in generic ways that you can reuse, but once you get to the relationships between the actual model, delegate, and view elements, you will need to create them in custom forms for each distinct approach.&lt;/p&gt;
&lt;p&gt;This is more like creating HTML documents than Javascript, which makes sense, &lt;em&gt;if&lt;/em&gt; you remember that QML is Javascript-based but &lt;em&gt;declarative&lt;/em&gt;. You just have to remember that while you can define some reusable components, the full-fledged elements are like full HTML pages with a templating system: you can include elements, but not override their internal contents. In QML, you can override &lt;em&gt;some&lt;/em&gt; of their contents, which is nice—but that is not the primary way to go about it.&lt;/p&gt;
</content><category term="[software development]"></category></entry><entry><title>The Spirit and Christian Formation</title><link href="http://www.chriskrycho.com/2014/the-spirit-and-christian-formation.html" rel="alternate"></link><published>2014-04-09T09:00:00-04:00</published><updated>2014-04-09T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-09:/2014/the-spirit-and-christian-formation.html</id><summary type="html">Our focus on the obviously miraculous gifts can blind us to the astounding reality of the role played by the Spirit in our Christian formation.</summary><content type="html">&lt;p&gt;Discussions of the person of the Holy Spirit in modern Christianity tend to focus on the third person of the Trinity’s obviously miraculous activity in the world—the “gifts” that characterize the charismatic movement and the associated controversy. Though these gifts are certainly part of the recorded history of the Spirit’s work, the church’s focus thereupon (whether positive or negative) on the gifts has had the unfortunate side effect of hiding many of the other, arguably more central and essential actions of the Spirit in the life of the believer. Just as the Spirit is the person who mediates to us the work of Christ in our salvation and brings about our conversion, the Spirit is the one who leads us into greater participation in the renewed humanity the Son has accomplished in his incarnation, life, death, resurrection, and ascension. The Spirit is the one who progressively deepens our union with Christ and reshapes us to be like Him who saved us.&lt;/p&gt;
&lt;p&gt;The Spirit accomplishes these ends in a variety of ways, all of which are themselves worthy of further reflection. First of all, it was the Spirit who superintended the writing of Scripture, the self-revelation of the Triune Godhead for our salvation and sanctification. If Christian formation is in no small measure a matter of growing to know our Creator—if we are being restored to active relationship with one who made us for that very relationship—then the ways in which our Creator has revealed himself are supremely important. Without Scripture, we would know little of God; through it we enter in the deep mysteries. The first part the Spirit plays in our formation, then, is in having guided every hand from Moses’ to John’s in the writing of the word of God. Upon this foundation comes the Spirit’s second work: opening our eyes to understand that Scripture. The things of God are foolishness to unregenerate people, but beautiful and savory to those who have been given spiritual life. The word of God can seem dense and opaque to those who do not believe, but every believer in Christ finds that more and more these mysteries unfold: this is the Spirit at work.&lt;/p&gt;
&lt;p&gt;As we come to understand the person of God and the things he has commanded us in his word, we find that we are still weak and struggle to do them. Here, too, the Spirit is at work, for it is the Spirit who empowers our obedience. We know that the same Spirit that raised Christ from the dead is at work in us—and this is the only hope we have of overcoming sin and growing in holiness. Part and parcel of this, the Spirit empowers us to endure the suffering that God uses to make us more dependent on him and more faithful to him. Likewise, when in the course of our lives we are tempted to fall away, it is the Spirit who helps us continue to hold fast to the faith. Moreover, the Spirit intercedes for us when we do not know how to pray ourselves. When we are beset by temptation, when tempted to fall away, when exhausted from the battle, when wearied of the pursuit of holiness, the Spirit prays for us. Nor is the Spirit’s work directed solely to individuals. All of these realities are corporate, and in all of them we grow in unity and kindness toward one another. The Spirit is our bond of peace.&lt;/p&gt;
&lt;p&gt;In summary, then, we have both the Spirit and the Son praying for us to the Father who delights to answer those prayers, and the Spirit empowering us walk in the Son’s life with the Father—hallelujah!&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Noah: A Theological-Aesthetic Rorschach Test</title><link href="http://www.chriskrycho.com/2014/noah-a-theological-aesthetic-rorschach-test.html" rel="alternate"></link><published>2014-04-08T19:35:00-04:00</published><updated>2014-04-08T19:35:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-08:/2014/noah-a-theological-aesthetic-rorschach-test.html</id><summary type="html">Link: Over at Mere Orthodoxy, I write at some length about how our responses to &lt;i&gt;Noah&lt;/i&gt; says a great deal about us as well as about the movie itself.
</summary><content type="html">&lt;p&gt;I spent a good bit of time working on this over the last week, and I hope you’ll find it helpful.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Last week saw the premiere of Darren Aronofsky’s &lt;em&gt;Noah&lt;/em&gt;, and with it a (predictable) storm of controversy from the evangelical community. Reviews have ranged from &lt;a href="http://www.albertmohler.com/2014/03/31/drowning-in-distortion-darren-aronofskys-noah/"&gt;predictably critical&lt;/a&gt; to &lt;a href="http://www.patheos.com/blogs/churchofthemasses/2014/03/the-utter-embarrassing-mess-of-noah-and-why-everybody-is-lying-about-it/"&gt;outright disdain&lt;/a&gt; to &lt;a href="http://drbrianmattson.com/journal/2014/3/31/sympathy-for-the-devil"&gt;hostile readings&lt;/a&gt;, and from &lt;a href="http://www.christianitytoday.com/ct/2014/march-web-only/noah.html?paging=off"&gt;strongly (though not unreservedly) positive&lt;/a&gt; to &lt;a href="http://convergemagazine.com/noah-film-12561/"&gt;more restrained restrained affirmation&lt;/a&gt; of the film on &lt;a href="http://www.relevantmagazine.com/culture/film/noah"&gt;aesthetic and spiritual&lt;/a&gt; grounds to especially measured &lt;a href="http://www.catholicworldreport.com/Item/3036/inoahi_a_theological_reflection.aspx"&gt;theological&lt;/a&gt; and &lt;a href="http://christandpopculture.com/stars-strange-review-noah/"&gt;artistic engagement&lt;/a&gt;. In short, the responses spanned exactly the range one would expect from the evangelical community, which is itself deeply divided on the purpose, value, and meaning of the arts—decades of conversation on the topic notwithstanding. &lt;em&gt;Noah&lt;/em&gt; works as a sort of theological-artistic Rorschach test. We seem to find it in what we expect given its origins and our disposition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Rather than offer another review (which would add nothing to the conversation at this point), or decry once again the predictable evangelical response to the arts, or even critique reviews with which I disagreed, I thought it might be useful instead to ask where we stand today and point to a few places we might grow from this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think you’ll find &lt;a href="http://mereorthodoxy.com/noah-theological-aesthetic-rorschach-test/"&gt;the rest of the piece&lt;/a&gt; salient and helpful.&lt;/p&gt;
</content><category term="links"></category><category term="my writing elsewhere"></category></entry><entry><title>Death Before the Fall</title><link href="http://www.chriskrycho.com/2014/death-before-the-fall.html" rel="alternate"></link><published>2014-04-08T19:25:00-04:00</published><updated>2014-04-08T19:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-08:/2014/death-before-the-fall.html</id><summary type="html">Link: In which Alastair Roberts suggests that physical death was not a result of the Fall, but something from which humans were always meant to be saved to something better.</summary><content type="html">&lt;p&gt;This bit by Alastair Reynolds is an &lt;em&gt;excellent&lt;/em&gt; summary of the position to which I have slowly come over the last few years of reflection on the question of physical death before the Fall. It shows the influence of patristic thought in the best way possible, and also demonstrates a great handle on the bigger picture of salvation history in the whole of the canon.&lt;/p&gt;
&lt;p&gt;A few salient quotes. First, on moral and physical perfection:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perfection was not the creation’s natural state, but its intended destiny (and salvation is not a ‘rebooting’ of creation to its primary state, but the restoring of creation to the future that God originally intended for it)….&lt;/p&gt;
&lt;p&gt;With perfection, our wills will be so capable of apprehending our good that we will no longer be capable of willing to do evil, not by virtue of some external compulsion, but by virtue of mature wills and natures and their appropriate mutual correspondence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And then from the conclusion, which I positively &lt;em&gt;loved&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;First, Christ’s obedience is not about ‘innocence’ but about ‘perfection’. Christ brings humanity to the height and fullness of its divinely intended moral stature. He gives us, not merely innocence or obedience, but full maturity.&lt;/p&gt;
&lt;p&gt;Second, humanity was always intended to die and rise again to a more glorious form of life. Christ death and resurrection achieves this destiny.&lt;/p&gt;
&lt;p&gt;Third, as the last Adam, Christ will pacify and tame the entire creation, ruling until every enemy is placed under his feet.&lt;/p&gt;
&lt;p&gt;Fourth, as we are in Christ, the bad character of death is minimized. We are not unclothed to be left naked, but in order to be more fully clothed, to have death swallowed up in life. We are still subject to the hostile attacks of the world and to the possibility of death within it, but Christ is the Tree of Life and we have unrestricted access to him. Death is no longer the alienating power that it once was.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a great read, start to finish. &lt;a href="http://alastairadversaria.wordpress.com/2014/04/08/death-before-the-fall/"&gt;“Death Before the Fall”&lt;/a&gt;&lt;/p&gt;
</content><category term="[links]"></category></entry><entry><title>Bind It On Your Forehead</title><link href="http://www.chriskrycho.com/2014/bind-it-on-your-forehead.html" rel="alternate"></link><published>2014-04-07T06:30:00-04:00</published><updated>2014-04-07T06:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-07:/2014/bind-it-on-your-forehead.html</id><summary type="html">Memorizing a book of the Bible yields remarkable fruit. It shapes us and transforms our thinking.</summary><content type="html">&lt;p&gt;One of the real joys of memorizing Scripture is the way that—by the grace of God—it slowly shapes you and (trans)forms the way you think. Jaimie and I have been memorizing Colossians this spring, and we will have finished the book by the end of April, Lord willing. I read through the book this morning, and found great joy in that I can see the contours of Paul’s letter much more clearly and understand the book much more deeply. Even more, though, I am extremely glad for the ways I can see that the book is shaping me.&lt;/p&gt;
&lt;p&gt;Several days last week, I woke up with various verses from the book echoing in my mind—Col. 1:23’s encouragement to hold fast to the faith, Col. 1:15–19’s magnificent and beautiful Christology, Col. 2:20–23’s admonition to lean on Christ and not on worldly asceticism, Col. 1:29’s picture of Paul’s hard work for the sake of the gospel… It is difficult to overstate the impact it has on one’s life to have a book like this constantly ringing in one’s mind. Its contents are now always ready to be drawn upon as I encounter opportunities and trials.&lt;/p&gt;
&lt;p&gt;Colossians’ sweep from the doctrine of Christ and salvation to our eminently practicable response is typical of Paul, and reminds me that we cannot ever separate the two. When the book enjoins men like me, “Husbands, love your wives, and do not be harsh with them… Fathers, do not provoke your children, lest they become discouraged” (Col. 3:19,21), this is entirely dependent on the reality that I have been raised with Christ and know that I will appear with him in glory when he returns (Col. 3:1–4).&lt;/p&gt;
&lt;p&gt;My ethical response (Col. 3:5–4:2) finds its foundation in the assurance of what God &lt;em&gt;has&lt;/em&gt; done and the hope of what he &lt;em&gt;will&lt;/em&gt; do. My ability to carry out that response is wholly based on my unity with Christ: that in him spiritually I died and have been raised (cf. Col. 2:20, 3:1). He is my life (Col 3:4). There is no separating our obedience, our pursuit of holiness, from his gracious work on our behalf. He did and does and will do, and we respond. Neither can we fail to respond and say that we are truly in Christ nor perform moral acts of any worth if we reject Christ.&lt;/p&gt;
&lt;p&gt;And daily I find myself meditating on and turning to these realities and commands. I am led to worship, and led to obedience. Praise God for Colossians, for his command to know his word by heart.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Theology is Essential</title><link href="http://www.chriskrycho.com/2014/theology-is-essential.html" rel="alternate"></link><published>2014-04-06T20:30:00-04:00</published><updated>2014-04-06T20:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-06:/2014/theology-is-essential.html</id><summary type="html">Chatting with a seven-year-old is one sure way to highlight the need for all of us to be better theologians.
</summary><content type="html">&lt;p&gt;Today, I spent a good part of my afternoon talking theology with a seven-year- old. I was watching some friends’ little girl, who is not yet a Christ-follower, and our discussion ranged all over. We talked about everything from the bush- climbing groundhog who appeared out the back door midway through our conversation to the reason for the “blood” langauge throughout the Bible (“Eww! Blood is disgusting!”), and from what happened in the Incarnation and the nature of the Trinity to how hard it is to obey one’s parents.&lt;/p&gt;
&lt;p&gt;The conversation highlighted for me the necessity of learning theology. These kinds of questions will come up in any family whose parents are seeking to point their children to Jesus. The Bible has a lot of initially perplexing material in it. Many of its concepts are foreign to &lt;em&gt;our&lt;/em&gt; culture by dint of antiquity and sociological differences between the ancient Hebrews and Greeks and modern Westerners. Others are foreign to &lt;em&gt;all&lt;/em&gt; cultures because of the Fall, and require all of us to undergo the transformation that occurs in the renewal of our minds as the Spirit sanctifies us. No surprise, then, that a seven-year-old would be asking questions about these things: they are hard and confusing.&lt;/p&gt;
&lt;p&gt;What is a surprise to me is how often I have heard these topics brushed aside as inessential or secondary. The Trinity? Too complicated for ordinary folks. The Incarnation? Just kind of a thing that had to happen so Jesus could die for us. The blood language? Well, that’s mostly just the Old Testament anyway. The really important bits are that we tell people about Jesus and live basically right!&lt;/p&gt;
&lt;p&gt;Of course, the obvious questions are who this Jesus is and what it means to “live right,” and to answer these questions &lt;em&gt;at all&lt;/em&gt; we have to deal in some rather deep theological concerns. To live right is to live in accord with the way of God in the world he made—but who is God, and how did he shape the cosmos? As for the person of Jesus, any answer at all that wrestles with the text of the Bible must soon confront both the ideas of the Trinity and the Incarnation in short order.&lt;/p&gt;
&lt;p&gt;And that’s just for talking to a seven-year-old!&lt;/p&gt;
&lt;p&gt;I wish that the picture I presented above were a caricature, an over- simplification of more nuanced positions designed to make a rhetorical point with some flourish, but it is not. In the Baptistic circles in which I travel, there are &lt;em&gt;many&lt;/em&gt; churches with explicitly anti-doctrinal stances. To be sure, we have our share of churches that focus on doctrine to the exclusion of right practice, but these are much less common in low-church contexts than their opposite. “Doctrine divides,” and we want “deeds not creeds,” and that is all there is to it—only it cannot be.&lt;/p&gt;
&lt;p&gt;As has often been said, the question is not whether we are theologians, but what sort of theologians we will be. All of us have our own understandings of God, and these ideas are more or less in line with what Scripture says. Because God is truly great, his revelation of himself pushes us to &lt;em&gt;think&lt;/em&gt;. We refuse to engage our critical faculties at our own peril.&lt;/p&gt;
&lt;p&gt;I am not for a moment suggesting that my own particular brand of nerdiness ought to be the standard by which Christians are judged. I am, however, deeply and increasingly persuaded that a failure to think seriously about the contents of our faith will result only in ruin and calamity in our people. We need blue- collar men and women no less than erudite scholars to be comfortable explaining the Trinity to their children and coworkers. We need not all be intellectual sophisticates (Lord help us if we were), but we do all need to be a people shaped by the intellectual depths of our faith. We need to be able to explain our faith both so that we may teach outsiders and so that we may build one another up and guard one another in the faith.&lt;/p&gt;
&lt;p&gt;We need to be able to tell our seven-year-olds how it is that God became man and why that would even matter. We need to understand ourselves how the one who was totally pure became “disgusting” on our behalf in order to undo the brokenness our rebellion introduced so we can tell that story to our children. We need to grasp that the Trinity is not an ancillary doctrine to our faith, but one of its bedrock affirmations, so that we can proclaim to our children and our neighbors the God who is unending love within his own being—they will need this to make sense of any of the other things we say about Jesus. And this I say not in some abstract sense, but because I needed to be able to talk about all of those to help my friends’ little girl make a little more sense of the gospel &lt;em&gt;today&lt;/em&gt;.&lt;/p&gt;
</content></entry><entry><title>Feels Right</title><link href="http://www.chriskrycho.com/2014/feels-right.html" rel="alternate"></link><published>2014-04-04T21:30:00-04:00</published><updated>2014-04-04T21:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-04:/2014/feels-right.html</id><summary type="html">Little details in how things work can make all the difference when it comes to the experience of using software. So be diligent, and do it right.</summary><content type="html">&lt;p&gt;I had spent most of the last week and a half working on getting &lt;a href="http://www.firebirdsql.org"&gt;FirebirdSQL&lt;/a&gt; configured and ready to use for a project I’m working on with &lt;a href="http://www.questconsult.com"&gt;Quest Consultants&lt;/a&gt;. It was slow going. The tool is decent, but the documentation is spotty and it felt like everything was just a bit of a slog—to get it working correctly, to get it playing nicely with other pieces of the development puzzle, to get it working across platforms.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Then, because I had done something a &lt;em&gt;little&lt;/em&gt; bit silly in my eagerness to get up and going last week and written code without a testable configuration, I hit a wall today. The queries weren’t working. I had made a &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception"&gt;bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I spent a substantial part of the day chasing down that bug, and then a conversation with user &lt;em&gt;agronholm&lt;/em&gt; on the &lt;a href="http://docs.sqlalchemy.org/en/rel_0_9/"&gt;SQLAlchemy&lt;/a&gt; IRC channel (&lt;a href="irc://irc.freenode.net/sqlalchemy"&gt;freenode/#sqlalchemy&lt;/a&gt;) got me thinking. The Firebird team describes one of their options as an “embedded” server, but &lt;em&gt;agronholm&lt;/em&gt; pointed out that what they really mean is &lt;em&gt;portable&lt;/em&gt;. It’s running a standalone server and client, but it’s not part of the same thread/process (like SQLite is). Then &lt;em&gt;agronholm&lt;/em&gt; very helpfully asked—my having mentioned my preference for &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; earlier—“Does Postgres not have a portable version?” Two minutes later, we had both found &lt;a href="http://sourceforge.net/projects/postgresqlportable/"&gt;PostgreSQL Portable&lt;/a&gt;, and I rejoiced.&lt;/p&gt;
&lt;p&gt;It took me less than half an hour to get it downloaded and set up and to confirm that it would work the way we need for this particular piece of software. (Firebird had taken me a good three hours, what with digging through badly organized and not terribly clear documentation.) It took me less than half an hour more to get PostgreSQL to the same point that I’d finally gotten Firebird to after multiple hours working with it. And I was so &lt;em&gt;very&lt;/em&gt; happy. What had been an especially frustrating work day now had me quietly smiling to myself constantly for the last two and a half hours as I &lt;a href="http://stackoverflow.com/questions/22865573/sqlalchemy-successful-insertion-but-then-raises-an-exception/22872598#22872598"&gt;finished&lt;/a&gt; tracking down the bug that had set me on this path in the first place.&lt;/p&gt;
&lt;p&gt;Several years ago, when I first started doing web development, I got my feet wet in database work with MySQL—probably the single most common starting point for anyone going that route, courtesy of the ubiquity of the standard Linux-Apache- MySQL-PHP stack.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; A year after that, I picked up some work that was already using PostgreSQL and fell in love almost immediately.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Something just felt &lt;em&gt;better&lt;/em&gt; about running &lt;code&gt;psql&lt;/code&gt; than running &lt;code&gt;mysql&lt;/code&gt; on the command line. Postgres’ implementation of the SQL standard felt more natural. Even the tiniest little details like the way tables display when you query them in &lt;code&gt;psql&lt;/code&gt; was nicer. In less than a week, I was sold and haven’t looked back. While I’ve used MySQL out of convenience on shared hosting from time to time, PostgreSQL is unquestionably my preferred database target.&lt;/p&gt;
&lt;p&gt;Today’s experience brought that all home again. That grin on my face all afternoon felt a bit silly, but it highlights the difference that really good software design makes. I am not just talking about how it looks here—though, to be sure, PostgreSQL is prettier than FirebirdSQL—but how it works. PostgreSQL feels responsive, its command set makes a lot of sense and is easy to use, and it is &lt;em&gt;extremely&lt;/em&gt; well documented. In fact, I would go so far as to say that it is the best documented open source software I have ever used, as well as among the very most robust. (The only other open source software I find to be as incredibly rock-solid and reliable as PostgreSQL is the Linux kernel. I am by no means an expert on either, or on open source software in general, but the Linux kernel is an unarguably amazing piece of work. So is PostgreSQL.) All those tiny little details add up.&lt;/p&gt;
&lt;p&gt;It’s a good reminder for me as I write software that yes, the things I care about—the small matters that would be so easy to overlook when customers express no interest in them—really do matter. People may not know that things like typography make a difference in their experience, but those subtle, often imperceptible things matter. They may not consciously notice the differences in your interface design (even a command line interface), but it will change their experience of the software. Do it poorly, or even in a just-good-enough-to-get- by fashion, and you’ll annoy or simply bore them. Do it well, and you might just delight them—even if they can’t tell you why.&lt;/p&gt;
&lt;hr /&gt;
&lt;section id="examples" class="level2"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;To make my point a little more visible, I thought it might be useful to post samples of SQL to accomplish the same task in the two different database dialects.&lt;/p&gt;
&lt;section id="firebirdsql4" class="level3"&gt;
&lt;h3&gt;FirebirdSQL:&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id INT NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);
CREATE SEQUENCE project_id_sequence;
SET TERM + ;
CREATE TRIGGER project_id_sequence_update
  ACTIVE BEFORE INSERT OR UPDATE POSITION 0
  ON projects
AS
BEGIN
  IF ((new.id IS NULL) OR (new.id = 0))
    THEN new.id = NEXT VALUE FOR project_id_sequence;
END+
SET TERM ; +&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="postgresql" class="level3"&gt;
&lt;h3&gt;PostgreSQL&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE projects (
  id SERIAL NOT NULL PRIMARY KEY,
  title VARCHAR(32) NOT NULL,
  file_name VARCHAR(32) NOT NULL,
  file_location VARCHAR(256) NOT NULL,
  CONSTRAINT unique_file UNIQUE (file_name, file_location)
);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not just that the PostgreSQL example is shorter and clearer—it is that it is shorter and clearer because its designers and developers have taken the time to make sure that the shorter, cleaner way works well, and have documented it so you can know how to use that shorter cleaner way without too much difficulty.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I do most of my development on a Mac, but do all the testing on the target platform (Windows) in a VM.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;At this point, I would only use one of those by default if I were building a web app: Linux. I’d use &lt;a href="http://wiki.nginx.org/Main"&gt;nginx&lt;/a&gt; instead of Apache, &lt;a href="http://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; instead of MySQL, and &lt;a href="https://www.python.org"&gt;Python&lt;/a&gt; (though &lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt;, Javascript via &lt;a href="http://nodejs.org"&gt;node.js&lt;/a&gt;, &lt;a href="http://msdn.microsoft.com/en-us/vstudio/hh341490"&gt;C# and the .NET stack&lt;/a&gt;, or just about anything &lt;em&gt;but&lt;/em&gt; PHP would do fine).&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;&lt;em&gt;Almost&lt;/em&gt; immediately because at that point configuration on OS X was a bit of a pain. That is &lt;a href="http://postgresapp.com" title="Postgres.app"&gt;no longer the case&lt;/a&gt;.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;To be perfectly fair to Firebird, it is improving. The upcoming 3.0 series release will make these two a lot more similar than they are at present, and clean up a number of other issues. What it won’t do is get the &lt;em&gt;feel&lt;/em&gt; of using Firebird more like that of using Postgres, or make the installation procedure smoother or easier, or make the documentation more complete.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[software development"></category><category term="design]"></category></entry><entry><title>The Spirit and Conversion</title><link href="http://www.chriskrycho.com/2014/the-spirit-and-conversion.html" rel="alternate"></link><published>2014-04-03T08:15:00-04:00</published><updated>2014-04-03T08:15:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-03:/2014/the-spirit-and-conversion.html</id><summary type="html">&lt;p&gt;The Holy Spirit is the member of the Triune Godhead who actively brings about our conversion. It is the Spirit who regenerates a person, indwells him, and seals him for the day of salvation. The spirit makes the gospel powerfully effective for salvation so that those who hear it may …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Holy Spirit is the member of the Triune Godhead who actively brings about our conversion. It is the Spirit who regenerates a person, indwells him, and seals him for the day of salvation. The spirit makes the gospel powerfully effective for salvation so that those who hear it may believe and be saved. On these points all are agreed, since they are backed by straightforward statements in Scripture. The particulars, however, are a matter of some controversy, and so bear further consideration.&lt;/p&gt;
&lt;p&gt;There are two broad views of the Spirit’s work in regeneration. In the non- Calvinist view (whether Arminian, Roman Catholic, or variations thereon in other streams of Christian tradition), the Spirit does preparatory work in the hearts of the unregenerate and provides God’s grace to enable people to choose whether to respond to the gospel or not. However it is articulated (most commonly as “prevenient grace” in Baptist circles), this view emphasizes that the Spirit’s work is essential in making available the effects of Christ’s work on the cross to whomever will believe. Without the Spirit’s work, regeneration through faith is impossible, because no one will believe. With the Spirit’s work, men are enabled to choose freely whether to follow God or no.&lt;/p&gt;
&lt;p&gt;In the Calvinist view, by contrast, the Spirit not only works in a preparatory sense, but is also the active agent in bringing about conversion. People choose as they will, and people dead in their trespasses always choose sin over God—this is the essence of our fallen nature. What is needed, in this view, is not only the grace-given ability to choose (as in a prevenient grace view) but a grace-changed heart so that we will freely choose God. No matter how free our choice, unless the effects of original sin in us are undone, we continue freely to choose sin and to reject God. The Spirit, then, takes away hearts of stone and gives instead beating hearts of flesh that can respond to God. He gives eyes to see the light he shines as well as the light itself.&lt;/p&gt;
&lt;p&gt;The essential disagreement between the two views is to whom the Spirit gives such eyes: to all men who hear the gospel, or only to the elect. Based on Paul’s arguments in 1 Corinthians, Ephesians, and elsewhere, I take it to be the latter. If the Spirit opened everyone’s eyes to see truly the goodness of God, if he gave to everyone hearts of flesh rather than hearts of stone all would believe. Regeneration logically precedes (but temporally coincides with) faith: the unregenerate heart cannot and does not believe. So the Spirit gives hearts that can and do believe, and in that very moment, we believe. The Spirit gives us not only the opportunity to exercise faith, but also the faith that we exercise.&lt;/p&gt;
&lt;p&gt;However the act of regeneration is accomplished, the Spirit is efficaciously at work. In both views, the gospel &lt;em&gt;is&lt;/em&gt; powerful for salvation—whether by tilling the soil or by actually causing the seed to sprout. People hear the gospel and the Spirit uses that mightily. Then, once people have believed, the Holy Spirit continues to work. He immediately indwells the believer, giving our mortal bodies spiritual vitality. Thus Paul says that the same Spirit who raised Christ from the dead is now at work in all believers. This indwelling seals our conversion, ensuring we hold fast until we die or Christ returns. He increasingly shapes our behaviors and attitudes to be more in line with those of God, making us holy as God is holy.&lt;/p&gt;
&lt;p&gt;In short, the Spirit is the one who makes Christ’s work effective for salvation. He enables and empowers the gospel to produce conversion.&lt;/p&gt;
</content><category term="M. Div."></category><category term="SEBTS"></category></entry><entry><title>When My Great-(×80)-Grandparents Lived</title><link href="http://www.chriskrycho.com/2014/when-my-great-x80-grandparents-lived.html" rel="alternate"></link><published>2014-04-03T07:00:00-04:00</published><updated>2014-04-03T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-03:/2014/when-my-great-x80-grandparents-lived.html</id><summary type="html"></summary><content type="html">&lt;p&gt;One of the more astonishing doctrines we Christians advance is the idea that documents written to a group of people almost wholly other than us millennia ago are relevant to our own lives today. Today, for example, I read from 2 Corinthians (mid first century A.D.), Proverbs (written early in the 10th century B.C. and mostly likely compiled into its final form sometime around the 6th century B.C.), and Psalms (similar to Proverbs, perhaps in this particular case with a slightly earlier date of composition and later date of completion). In other words, I am reading a words penned anywhere from about 3,000 to about 2,000 years ago.&lt;/p&gt;
&lt;p&gt;About twenty years separate me from my father, and he from his. A “generation” is something like twenty to twenty-five years. Call it twenty-five for good measure. Then it has been between 80 and 120 human lives since these books were written. That distance in time is almost unfathomable.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; And yet we have the audacity to say the Paul’s letters, Solomon’s proverbs, and David’s poetry have something to say to us today. More than that, we claim that God expressly intended that we read these books as his revelation of himself to us &lt;em&gt;today&lt;/em&gt;. Not, to be sure, in the sense that we act as if 2 Corinthians is a letter addressed to us (though I have heard this articulation bandied around in simplistic fashion, usually in the context of trying to motivate people into reading their Bibles) but in the sense that God’s work in &lt;em&gt;those&lt;/em&gt; people’s lives at &lt;em&gt;that&lt;/em&gt; time was recorded in such a way as to be a comprehensible revelation of the character and desires of the living God whom we serve &lt;em&gt;today&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We are not without warrant in making this claim. Those intervening centuries have seen the church flourish and grow under the guidance of the Scriptures, and never more so than when listening most carefully to the ways God has revealed himself in the Scriptures themselves. New light is &lt;em&gt;always&lt;/em&gt; shining forth into the church from these ancient pages, because the Spirit of God is always at work using these old words to confront new people.&lt;/p&gt;
&lt;p&gt;There are two realities here: a lesser and a greater one. The lesser is that people have not changed. Many of the particulars of our circumstances have, of course. I read these words from a tablet this morning, and I am typing on a laptop—a pair of devices that certainly would have astounded anyone in the original audiences. Modernity is extraordinarily different from all that preceded it &lt;em&gt;many&lt;/em&gt; ways. But these are mere externals; the human heart is the same as it has ever been. We are still troubled, broken, rebels against the King of the universe, desperately in need of salvation from both the guilt and the power of sin in our lives and of reconciliation with our maker and with each other.&lt;/p&gt;
&lt;p&gt;The greater reality is that God has not changed, and it is the Holy Spirit that makes these vintage texts work life among us. The same God who put his breath in man put his breath in these texts&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; He breathes through them into the life of his people today, so that what was said then means something now. This is miraculous on many levels: that the words penned then were able to be profitable for so long, that they were so well preserved, and that we are enabled to hear them. The work of the Spirit is often reduced to his visibly and obviously miraculous doings—healings, tongues, etc.—but I think this is one of the greatest works done at the Spirit’s hand. This reality leads us to worship, as it should, and as it is meant to.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;If we write out all the greats in the chain back to my ancestors who lived when these words were being written, the &lt;em&gt;shorter&lt;/em&gt; version comes to this: roughly my great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-great-grandparents were walking around then.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;We translate from the Greek &lt;em&gt;theopneustos&lt;/em&gt; to “inspired” because the Authorized Version did—but “God-breathed” would be equally accurate. That is exactly what “inspired by God” meant when King James was alive: to be “inspired” is simply to be breathed into, from Latin &lt;em&gt;in-&lt;/em&gt; (‘in/into’) + &lt;em&gt;spirare&lt;/em&gt; (‘breathe’).&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Suffering in the Lives of the Saints</title><link href="http://www.chriskrycho.com/2014/suffering-in-the-lives-of-the-saints.html" rel="alternate"></link><published>2014-04-02T07:00:00-04:00</published><updated>2014-04-02T07:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-02:/2014/suffering-in-the-lives-of-the-saints.html</id><summary type="html">Psalm 69 and 2 Corinthians 4&amp;ndash;6 point us to a truly Christian way of thinking about suffering: neither pretending it is nothing, nor making it everything, but calling it terrible but God greater.</summary><content type="html">&lt;p&gt;The confluence of Psalm 69 and 2 Corinthians 4–6 in my reading this morning highlighted quite profoundly the reality of struggle and pain in the lives of those who follow Yahweh.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In both cases, the authors deal plainly with the reality of suffering in their lives, and in both cases, they ultimately turn the audience’s eye away from that suffering to God—not diminishing the suffering, but putting a terminus on it and giving it clarity.&lt;/p&gt;
&lt;p&gt;In the Psalm, we see David (quite rightly) walking the line we all so often walk between complaint and praise. He calls out to God for help and deliverance and points out the unjust nature of their attack on him. He repeatedly points to God’s character and pleads for justice. He calls on God to act in line with his steadfast love and his mercy (Ps. 69:16), because it was for God that David suffered. And he praises God for his goodness, even though the structure of the poem seems to leave David still in his suffering. The conclusion of the psalm is the turn from “But I am afflicted and in pain; / let your salvation, O God, set me on high!” (Ps. 69:29) to “I will praise the name of God with a song…” (Ps. 69:30)—not, it seems, because God &lt;em&gt;had&lt;/em&gt; delivered but because David trusted that he &lt;em&gt;would&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Likewise, in 2 Corinthians Paul repeatedly emphasizes the extent to which suffering characterized his ministry and indeed dominated his life. These passages are some of the dearest in the New Testament to believers suffering for the sake of Christ, because they deal truly and honestly with the pain, but also deal in hope. God shone light in our hearts, Paul rejoices, but we have his treasure in earthen vessels that are “afflicted in every way” and which are “always carrying in the body the death of Jesus” (2 Cor. 4:6,7–12). Paul can see the purpose of this suffering clearly—it is that the Corinthians and all the other believers will have the life of Jesus (2 Cor. 4:11)—but this does not for a moment diminish the reality of the suffering he and his companions endured. Nor does Paul feel the need to diminish his sufferings in order to point to God’s goodness; quite the contrary, in fact! In chapter 6, he goes on to describe at length all the &lt;em&gt;kinds&lt;/em&gt; of suffering he had endured for the sake of the gospel.&lt;/p&gt;
&lt;p&gt;For those who, like David and Paul, hope in Yahweh and seek to do his will, there will be suffering. Those who preach the gospel will find rejection, pain, and toil everywhere. Even ordinary believers—those of us less outsized in our endeavors than the Davids and Pauls of the story—will find in our lives suffering that pushes us to decide how we will answer. Will we follow David’s example and conclude our lament and our pleading with praise (Ps. 69:30–36)? Will we follow Paul’s example and hold fast to the hope of an “eternal weight of glory” (2 Cor. 4:17–18) being prepared for us? Will we refuse to diminish the extent of our suffering but also refuse to let our suffering diminish God? Or will we take the easy paths out: to make little of the pains of the age on the one hand (quite dishonestly) or to refuse to praise God because we experience suffering (blasphemously)?&lt;/p&gt;
&lt;p&gt;The call, for all of us, is to look the sufferings of the present age head on, to recognize them in all their horror, and to call God greater still. Not to pretend the sufferings are small things, but to see that they are “light and momentary” (2 Cor. 4:17) by comparison with what God is doing &lt;em&gt;eternally&lt;/em&gt;. Not to act as those the situations in our lives do not pain us our trouble us, but to call God good and to lead others to worship him &lt;em&gt;anyway&lt;/em&gt;.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Much of my thinking here is shaped quite actively by Eugene Peterson’s &lt;em&gt;Five Smooth Stones for Pastoral Work&lt;/em&gt;, especially the chapter on Lamentations. The volume is well worth your time.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>A Repeated Call to Humility</title><link href="http://www.chriskrycho.com/2014/a-repeated-call-to-humility.html" rel="alternate"></link><published>2014-04-01T06:40:00-04:00</published><updated>2014-04-01T06:40:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-04-01:/2014/a-repeated-call-to-humility.html</id><summary type="html">Every time I come back to Proverbs 1, I am confronted again with the necessity of humbling myself before our transcendently wise God.</summary><content type="html">&lt;p&gt;Every time I come back around to Proverbs 1 I find myself all the more challenged to pursue wisdom. This month will be my third time through the book this year, since I have been reading it start to finish each month (save February, where I read through some of the other Wisdom literature). I had not spent much time with the Proverbs over the past few years, in part because I had struggled to and not known how to integrate them with the broader flow of the Scriptures. Several things persuaded me to integrate them into my daily reading this year. First of all, this is the word of God! All of it is profitable for us—enough said. Second, as I have walked further into adulthood, I have increasingly recognized the need for wisdom, whether in my own life or in caring for other believers. The world is a hard and complicated place this side of the New Jerusalem, and it is only by having deep, sound, Godly wisdom that we can walk it well.&lt;/p&gt;
&lt;p&gt;The book tells us its purpose from the outset:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;To know wisdom and instruction,&lt;br /&gt;
    to understand words of insight,&lt;br /&gt;
to receive instruction in wise dealing,&lt;br /&gt;
    in righteousness, justice, and equity;&lt;br /&gt;
to give prudence to the simple,&lt;br /&gt;
    knowledge and discretion to the youth—&lt;br /&gt;
Let the wise hear and increase in learning,&lt;br /&gt;
    and the one who understands obtain guidance,&lt;br /&gt;
to understand a proverb and a saying,&lt;br /&gt;
    the words of the wise and their riddles.&lt;/div&gt;
&lt;p class="citation"&gt;
—Proverbs 1:2–6
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then it tells us how this will all be accomplished:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;The fear of the &lt;span class="smcp"&gt;Lord&lt;/span&gt; is the beginning of knowledge;&lt;br /&gt;
    fools despise wisdom and instruction.&lt;/div&gt;
&lt;p class="citation"&gt;
—Proverbs 1:7
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So here I am again, being reminded that “the fear of Yahweh is the beginning of knowledge; fools despise wisdom and instruction.” (In some sense, that made me bordering on a fool for several years as I skipped over this simply because I did not understand it. Shouldn’t the response be exactly the opposite?) If I want to understand mysteries and riddles, to understand proverbs and sayings, to receiving instruction in wise dealing, righteousness, justice, and equity, to become prudent and knowledgeable and wise, to increase in learning, to obtain guidance—and who would not want these things?—then I start by fearing Yahweh.&lt;/p&gt;
&lt;p&gt;Situated against the backdrop of the canon, this opening is all the more compelling. It is not fear of God generically that is the beginning of wisdom, nor even knowledge that there is a creator. It is personal knowledge of the &lt;span class="smcp"&gt;Lord&lt;/span&gt;, of &lt;em&gt;Yahweh&lt;/em&gt;, the covenant God of Israel. This cannot be separated from knowing who Yahweh is as he is revealed in the rest of Scripture. Yet if I am truly to grow in knowledge and understanding of righteousness—one of the chief topics of the Bible!—then I must come time and again to these words, and seek wisdom. I must time and again humble myself before our Creator-Savior-God and recognize that my own wisdom and the wisdom of the world around me is ultimately bankrupt. I have nothing to teach God; from him I have everything to learn.&lt;/p&gt;
&lt;p&gt;And it can only be learned in that posture of humility before transcendent wisdom that surpasses human understanding. That is the lesson of &lt;em&gt;Qoheleth&lt;/em&gt; (Ecclesiastes): as we turn and begin to seek wisdom on our own, we will increasingly fall into folly. No wonder, then, that immediately following the invitation to be wise here in Proverbs 1, in Lady Wisdom’s first monologue, comes a rebuke and a warning to fools and simpletons who do not seek true wisdom. It is an easy enough course to take—the easiest, the most natural for us as fallen people—but it is deadly. There is a cost when I fail to fear Yahweh and keep his ways.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Let The Peoples Praise You</title><link href="http://www.chriskrycho.com/2014/let-the-peoples-praise-you.html" rel="alternate"></link><published>2014-03-31T20:00:00-04:00</published><updated>2014-03-31T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-31:/2014/let-the-peoples-praise-you.html</id><summary type="html">A setting of Psalm 67 for choir, harpsichord, harp, and two guitars ("stringed instruments," as the title suggests). Alas, all digital voices, but I've attached the score as well.</summary><content type="html">&lt;p&gt;I read Psalm 67 for my &lt;a href="http://www.chriskrycho.com/2014/no-resurrection-no-dice.html"&gt;devotions&lt;/a&gt; today, and was reminded that I had set the text to music several years ago during my studies in music composition at OU. Unfortunately, I have never been able to have the piece performed (even with a piano reduction)—the position of choral director was in transition the semester I composed it, and I simply never got around to it afterward. Nonetheless, I think you may enjoy this digital version. You can, however, &lt;a href="/downloads/psalm-67.pdf"&gt;download the score&lt;/a&gt; so you can follow the text setting if you like.&lt;/p&gt;
&lt;iframe title="Let the Peoples Praise You (Psalm 67)" style="width: 100%; max-height: 6.556em; padding-top: 1em; padding-bottom: 1em;" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/142432628&amp;amp;color=5592c9&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_artwork=false"&gt;
&lt;/iframe&gt;
</content><category term="[music]"></category></entry><entry><title>No Resurrection, No Dice</title><link href="http://www.chriskrycho.com/2014/no-resurrection-no-dice.html" rel="alternate"></link><published>2014-03-31T07:20:00-04:00</published><updated>2014-03-31T07:20:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-31:/2014/no-resurrection-no-dice.html</id><summary type="html">Paul&amp;rsquo;s hammer-stroke at the end of 1 Corinthians reminds us that without the resurrection, Christians have nothing&amp;mdash;but with it, everything.</summary><content type="html">&lt;p&gt;After quietly but insistently weaving the theme through the whole book, Paul comes at the end of 1 Corinthians to one of the most resounding statements of gospel hope anywhere in the Bible in chapter 15. And this proclamation of the gospel centers on the &lt;em&gt;risen&lt;/em&gt; Lord.&lt;/p&gt;
&lt;p&gt;Every since reading N. T. Wright’s magnificent &lt;a href="http://www.christianbook.com/Christian/Books/product?event=AFF&amp;amp;p=1179430&amp;amp;item_no=26794"&gt;&lt;em&gt;The Resurrection of the Son of God&lt;/em&gt;&lt;/a&gt; a few years ago, I have become increasingly aware of the way that the resurrection pervades the New Testament. As evangelicals, we are mostly a crucicentric people, focused quite &lt;a href="http://www.chriskrycho.com/2014/the-atonement-leon-morris.html"&gt;narrowly and specifically&lt;/a&gt; on the atoning work of Jesus on the cross. This is good, to an extent: if we &lt;em&gt;lose&lt;/em&gt; the atonement, we have lost the gospel. On the other hand, I am ever more aware, as I listen to sermon after sermon, that we simply do not preach the resurrection of Christ enough. Certainly, we do not follow closely the example of the church in Acts and the apostles in their writings, where the resurrection is always front and center, and where as Paul puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And if Christ has not been raised, then our preaching is in vain and your faith is in vain. We are even found to be misrepresenting God, because we testified about God that he raised Christ, whom he did not raise if it is true that the dead are not raised. For if the dead are not raised, not even Christ has been raised. And if Christ has not been raised, your faith is futile and you are still in your sins.&lt;/p&gt;
&lt;p&gt;—1 Corinthians 15:14–17 ESV&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over and over again, Paul hammers home the reality that we are saved from our sins—we are justified—by the resurrection of Christ no less than by his death (cf. Romans 4:25). Indeed, with his death alone we would be lost, trapped, dead just as we were before his coming. But with his resurrection we participate in the life of the Godhead. He has died the death we ought to die, and in this we rejoice. But we rejoice all the more that he is the firstfruits of the final triumph over both sin and death in the resurrection from the dead. In Jesus we do not have merely an exemplary martyr for the cause of right living—we have a risen Lord.&lt;/p&gt;
&lt;p&gt;Paul in 1 Corinthians 15 refuses to let us take the death of Christ as sufficient on its own. He refuses to let us think that things end when we die. He refuses to let people embrace a view of life that ends with the here and now. As ever, he points to eschatalogical&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; hope. The bodies we inhabit will be made new—not replaced, but transformed into something glorious. We walk in the light of the age to come, in the world which with us groans for redemption but not for a moment believing that the here-and-now is all there is.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;As a side note, can we please stop saying this like “scatalogical” with an ‘e’ tacked onto the front? The ‘e’ gets the emphasis, just as it does in “eschaton”, and the ‘a’ sounds roughly like “uh” (or if you want to sound precise, “ah”).&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Submitting to Scripture</title><link href="http://www.chriskrycho.com/2014/submitting-to-scripture.html" rel="alternate"></link><published>2014-03-28T20:45:00-04:00</published><updated>2014-03-28T20:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-28:/2014/submitting-to-scripture.html</id><summary type="html">Twice today I thought about the Spirit's inspiration of Scripture. One of those times I had to repent&amp;mdash;and the other, I got to worship.</summary><content type="html">&lt;p&gt;It is shocking how easy is to fall into our culture’s unbiblical ways of thinking in little ways—little ways that add up over time. Today’s reading in 1 Corinthians brought that home to me in a very real way. In the middle of 1 Corinthians 11, Paul comments that the reason that some of the Corinthians had become ill and others had even died was because they had been taking communion in a manner unworthy of Christ (1 Cor. 11:30). Just after reading it, I thought something like, &lt;em&gt;Paul is just spiritualizing, because that’s not really what happened.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And then I stopped, rather shocked by the thought that had just run through my head. What Paul asserts is &lt;em&gt;exactly&lt;/em&gt; what happened; to say it was otherwise is flatly to deny the inerrancy and authority of Scripture. I am not for an uncareful doctrine of inerrancy any more than were those who carefully articulated it for in the latter part of the 19th century. I am all for a thorough doctrine of inerrancy, and I think we lose a great deal the moment we begin to think ourselves wiser than the Spirit of God who superintended the writing of the Scriptures. So I had opportunity immediately to repent and to submit my mind again to what God says.&lt;/p&gt;
&lt;p&gt;Were there many things Paul did not know about how illness worked? Yes. But whatever the means of God’s effecting those Corinthian believers’ illnesses and deaths, they were nonetheless the judgment of our all-powerful God on his church so that we would know that he requires us to regard highly the sacraments he instituted. Whenever we find ourselves in a place where our minds butt up against the clear teaching of Scripture, we need to be willing to change our minds, plain and simple. We submit to Scripture; we do not require that Scripture submit to us.&lt;/p&gt;
&lt;p&gt;Indeed, the contrast between my two separate times of personal reflection on the nature of the word of God today could not be starker. There, in my devotional reading, I was second-guessing Paul and the Spirit of God. Later in the day, as I worked on a short reflection paper (to be published in late April after it is due in class), I spent a substantial section of the paper focusing on the Spirit’s work of preparing the Scriptures and opening our eyes to see them. There, I was led to grateful worship in awe of what the Helper whom the Father sent us has done on our behalf so that we might see God.&lt;/p&gt;
&lt;p&gt;It was a matter of just a few hours between these two radically different encounters with the authority of Scripture. A few hours and a lot of much-needed repentance and much-needed grace from the Spirit to open my eyes and transform my understanding so that I could see the Holy One’s revelation and worship instead of seize up with skepticism. May it be so more and more in my life.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Soul History</title><link href="http://www.chriskrycho.com/2014/soul-history.html" rel="alternate"></link><published>2014-03-28T13:05:00-04:00</published><updated>2014-03-28T13:05:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-28:/2014/soul-history.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;The short story is the pastoral form for narrating &lt;em&gt;Heilsgeschichte&lt;/em&gt; (salvation history) in the vocabulary of &lt;em&gt;Seelsgeschichte&lt;/em&gt; (soul history). In the &lt;em&gt;Heilsgeschichte&lt;/em&gt; of Judges, for instance, the enmity of the Midianiites is kerygmatically integrated into the historical narrative and shown to be a part of salvation; in the &lt;em&gt;Seelsgeschichte&lt;/em&gt; of …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;The short story is the pastoral form for narrating &lt;em&gt;Heilsgeschichte&lt;/em&gt; (salvation history) in the vocabulary of &lt;em&gt;Seelsgeschichte&lt;/em&gt; (soul history). In the &lt;em&gt;Heilsgeschichte&lt;/em&gt; of Judges, for instance, the enmity of the Midianiites is kerygmatically integrated into the historical narrative and shown to be a part of salvation; in the &lt;em&gt;Seelsgeschichte&lt;/em&gt; of Ruth the bitter emptiness of Naomi is pastorally attended to under the dynamics of providence and guided to a concluding fullness. In the &lt;em&gt;Heilsgeschichte&lt;/em&gt; of Exodus the formidable and unyielding Egyptians are judged and defeated in the catastrophic plagues and miraculous sea crossing; in the &lt;em&gt;Seelsgeschichte&lt;/em&gt; of Ruth the everday ordinariness of gleaning in the barley fields is used as a means for accomplishing redemption. In the &lt;em&gt;Heilsgeschichte&lt;/em&gt; of Joshua the gigantically walled fortress Jericho is surrounded and conquered by the total community of God in colorful parade, accompanied by brilliantly sounding trumpets, and the promised land is entered; in the &lt;em&gt;Seelsgeschichte&lt;/em&gt; of Ruth an old levirate law is patiently and quietly worked through by some old men at the city gates of provincial Bethlehem, and a link is forged in the genealogical chain of the Messiah.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="quotes"></category></entry><entry><title>FirebirdSQL and IntelliJ IDEA (etc.)</title><link href="http://www.chriskrycho.com/2014/firebirdsql-and-intellij-idea-etc.html" rel="alternate"></link><published>2014-03-28T09:00:00-04:00</published><updated>2014-03-28T09:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-28:/2014/firebirdsql-and-intellij-idea-etc.html</id><summary type="html">Configuration instructions for FirebirdSQL JDBC with JetBrains IntelliJ IDEA platform (including PyCharm, RubyMine, WebStorm, etc.).
</summary><content type="html">&lt;p&gt;Setting up IntelliJ IDEA’s built-in database tools to work with FirebirdSQL requires a particular setup configuration, which I’m documenting here for public consumption.&lt;/p&gt;
&lt;p&gt;These setup tools &lt;em&gt;should&lt;/em&gt; be applicable to any of JetBrains’ other Java-based IDEs which include database support (e.g. PyCharm, RubyMine, WebStorm, etc.). &lt;em&gt;Note:&lt;/em&gt; the following apply to IntelliJ IDEA 12 and the associated platforms, but &lt;em&gt;not&lt;/em&gt; to the IDEA 13 platform, which made substantial changes to how databases are configured. The underlying details are consistent, but the interface has changed. I have tested on PyCharm 3.1 to confirm that.&lt;/p&gt;
&lt;p&gt;This was all done on OS X 10.9, so I also make no guarantees that this works on other platforms, though the likelihood that it behaves the same on Linux is fairly good. I will update the post if and when I have confirmed that it does.&lt;/p&gt;
&lt;p&gt;Steps to configuring a database correctly for use with IDEA/etc. Note that steps 1–3 are fairly obvious; the real point of interest is in steps 4 and 5, which took me the longest time to figure out.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;Download the latest version of the Firebird &lt;a href="http://www.firebirdsql.org/en/jdbc-driver/"&gt;Java drivers&lt;/a&gt; for your operating system and your Java version. (You can check your Java version by running &lt;code&gt;java -version&lt;/code&gt; at the command line.) Extract the downloaded zip file. The extracted folder should include a file named &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt; (&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is currently 2.2.4).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In IDEA, in the database view, add a new data source: in the Database view (accessible via a menu button on the right side of the screen), right click and choose &lt;strong&gt;New -&amp;gt; Data Source&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;JDBC driver files&lt;/strong&gt;, browse to the location where you extracted the Jaybird driver files and select &lt;code&gt;jaybird-full-&amp;lt;version&amp;gt;.jar&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;JDBC driver class&lt;/strong&gt;, choose &lt;code&gt;org.firebirdsql.jdbc.FBDriver&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;Database URL&lt;/strong&gt;, specify &lt;code&gt;jdbc:firebirdsql://localhost:3050/&lt;/code&gt; followed by &lt;em&gt;either&lt;/em&gt; the full path to the database in question or a corresponding alias.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; A full path might look like this on Windows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/C:/my_project/the_database.db&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With an alias, you would instead have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:firebirdsql://localhost:3050/the_alias&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then specify valid values for the &lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;Password&lt;/strong&gt; fields from your existing configuration of the database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;strong&gt;Test Connection&lt;/strong&gt; button and make sure the configuration works.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should do it. Note that the driver choice and path configuration both matter. On OS X, I found that only the &lt;code&gt;FBDriver&lt;/code&gt; with this (and one other, older-style and therefore not recommended) path setup worked successfully.&lt;/p&gt;
&lt;p&gt;Observations, corrections, additional information, and miscellaneous comments welcomed on &lt;a href="https://alpha.app.net/chriskrycho"&gt;App.net&lt;/a&gt; or &lt;a href="https://www.twitter.com/chriskrycho"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I strongly recommend configuring an alias in the aliases.conf file in the Firebird home directory (usually set as &lt;code&gt;$FIREBIRD_HOME&lt;/code&gt; during installation on *nix systems). This lets you move the database around at will, update just the configuration file, and not have to update any references to the database file whatsoever.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="Software Development"></category></entry><entry><title>From Redemption to Creation</title><link href="http://www.chriskrycho.com/2014/from-redemption-to-creation.html" rel="alternate"></link><published>2014-03-27T07:27:00-04:00</published><updated>2014-03-27T07:27:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-27:/2014/from-redemption-to-creation.html</id><summary type="html">Psalm 65&amp;rsquo;s move from redemption to creation&amp;mdash;instead of the other way around&amp;mdash;surprised me in the best way possible.</summary><content type="html">&lt;p&gt;The structure of Psalm 65 surprised me. The psalm opens with a declaration of God’s worthiness of praise and a statement of his atonement&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and righteousness on behalf of his saints, then moves to a depiction of his power in creation. For some reason, I expected the Psalmist to move the other direction if he were going to bring these two things together in a single Psalm. Perhaps it is the way we often tell the story in explaining the gospel—creation, fall, redemption, restoration—but moving from salvation from sins and reconciliation with God to creation caught me off guard.&lt;/p&gt;
&lt;p&gt;So often, I fall into a bad habit of separating the attributes of God—as though God were a collection of properties and not &lt;em&gt;persons&lt;/em&gt; who all share in the same nature. We cannot separate his creative nature from his saving love for us any more than we can separate the same kinds of things in ourselves. Do I write poetry for my wife because I am creative,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; or because I am loving? Both, of course: any split between the two is a false disjunction. When I write her a poem, I am drawing on multiple facets of my personality and exercising multiple faculties and bending my will to accomplish one end &lt;em&gt;through&lt;/em&gt; another end. One can write poetry for its own sake, and one can love one’s wife without poetry, and one can write poetry for one’s wife. Bringing the two together is no strange thing.&lt;/p&gt;
&lt;p&gt;So it is with God, and so this psalm reminds us. God creates because he is creative, and also he creates because of his love for his creatures. He delighted to make a good world for us. In creation he demonstrates his power and his wisdom, and in creation he also demonstrates his deep and abiding affection for those whom he created. The particularity of God’s relationship to his covenant people (“God in Zion,” Psalm 65:1) is inseparable from his relationship to all the world (“the hope of all the ends of the earth,” 65:5). Then, when the Psalmist moves from the specificity of God-in-Zion’s redemption for iniquities to the fact that he created the world and maintains it, he shows us the unity of God’s love and the inseparability of his actions. It is not as if God provides rain for all the world out of duty or obligation; he does so because he delights to do good toward we his children—even in our rebellion! The result is that “those who dwell at the ends of the earth are in awe at [his] signs” (65:8). God’s atonement, reconciling his people, doing righteousness and justice, and his creative and sustaining power in creation all come around to the same end: the world worshipping him, the world in right relation with him.&lt;/p&gt;
&lt;p&gt;So with David, and with the meadows, I want to “shout and sing together for joy” (65:13) at all the works of the God in Zion. It is good to be surprised.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Not the point of today’s meditations, but nonetheless worth note: contra many an overly simplified evangelical presentation of the relationship between the eras before and after the Incarnation, Old Testament believers relied on God for their salvation from sins just as we do. They knew that he was the one who atoned for them (Psalm 65:3) and that it was he who brought them near, not the other way around (Psalm 65:4).&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;No claim here that I am particularly &lt;em&gt;good&lt;/em&gt; at poetry, mind, but Jaimie seems to like it, and that is good enough for me.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>The End of Surfing</title><link href="http://www.chriskrycho.com/2014/the-end-of-surfing.html" rel="alternate"></link><published>2014-03-26T20:00:00-04:00</published><updated>2014-03-26T20:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-26:/2014/the-end-of-surfing.html</id><summary type="html">Tabbed browsers killed "surfing." You only thought it was Facebook to blame.</summary><content type="html">&lt;p&gt;Sometime in the last few months it occurred to me that I no longer “surf” the internet. I read, to be sure, and every once in a long while I even go on a spree where I follow links from one site to another (or just in a long trail on Wikipedia). In general, however, I no longer surf. I suspect I am not alone in this: if we took a straw poll I would venture that most of my friends offline and acquaintances online alike spend rather less time in “browsing” mode than they do reading Facebook or Twitter or Instagram. Motion from link to link has been replaced by individual hops out onto Buzzfeed or a viral cat picture website.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The obvious explanation for all of this is already there in what I’ve written: Facebook and Twitter and all the rest of the social media web. To be sure, the advent of social media and the increasing degree to which social media have captured user attention on the web are a significant factor in the end of the old surfing/browsing behavior. This is a dream come true for those social media giants which have found ways to deliver ads to their many millions of users and thereby turn enormous profits.&lt;/p&gt;
&lt;p&gt;At the same time, I think there is an oft-overlooked factor in the shifting nature of the web over the last decade: the browser. In fact, if there is any single cause behind the death of old-fashioned surfing, I would point to Firefox 1.0: the browser which popularized tabbed browsing to increasingly large sections of the internet-using public.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The open-source browser steadily ate away at Internet Explorer’s then absurd levels of dominance, until Internet Explorer 8 included of tabs itself. By the time that Chrome came on the scene, tabbed browsing had long since become a given.&lt;/p&gt;
&lt;p&gt;So why do I think that &lt;em&gt;tabbed browsing&lt;/em&gt; of all things contributed to the end of “browsing” and “surfing” as our dominant mode of reading the internet? Simply put: it broke linearity. Previously,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; one’s experience of the web was single- stranded, leaping from one point to another in a line that however contorted was always connected by the forward and backward buttons on the browser. The moment tabbed browsing came on the scene, that line was broken. Following a link might mean it opened in a new tab instead of moving the whole view forward to it.&lt;/p&gt;
&lt;p&gt;Surfing as I remember it in the late ’90s and early ’00s was inherently the experience of getting lost along that timeline, finding myself dozens of links along the chain and wondering how I had ended up there, and then being able to trace my way back. With tabs, that traceability was gone. With it went the inherent tension that we faced with every link: to follow, or not? To get sucked down into &lt;em&gt;this&lt;/em&gt; vortex or &lt;em&gt;that&lt;/em&gt;? Because in all likelihood, we knew, we were not going to be coming back to this page. With tabs, though, I could open both of those pages without ever leaving this one. I could start new journeys without ending the old. But there was a hidden cost: that newly opened tab had no history. It was a clean slate; before that newly opened link there was only a blank page. If I closed the original from which I had opened it, there was no going back.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; If I closed this new tabs, there was no going forward to them. The line was broken.&lt;/p&gt;
&lt;p&gt;From there it was only a short step to the idea of a single site being the center from which one ventured out to other points on the web before returning: the Facebooks and Twitters of the world. In some sense, Facebook’s entire model is predicated on the idea that it is natural to open a new tab with that juicy Buzzfeed content while keeping Facebook itself open in a background tab. Would it work in that old linear model? Sort of. Would it feel natural? Never.&lt;/p&gt;
&lt;p&gt;All of this because of tabs. Invention’s most significant results are rarely those the minds behind it expect. When we are designing things—whether a piece of furniture or a piece of the web—we have to remember that design decisions all have repercussions that we may not see. Technology is never neutral. Particular innovations may or may not be &lt;em&gt;morally&lt;/em&gt; significant, but they always produce changes in people’s behavior. Design has consequences.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;For the record, lots of that hopping from link to link was on Buzzfeed- like and viral-cat-picture-like sites, too. I am not concerned with the &lt;em&gt;kind&lt;/em&gt; of content being read here, so much as the way it is being read.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Note that I am not crediting Firefox 1.0 with &lt;em&gt;creating&lt;/em&gt; the tabbed browser—only with popularizing it. That distinction matters.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Excepting having multiple browser windows open, which I am sure people did—but to a much lesser extent.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;Yes, yes, browser history and re-open closed tab commands. But the &lt;em&gt;experience&lt;/em&gt; of those is different, and that’s what we’re talking about here.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[design"></category><category term="software development]"></category></entry><entry><title>Miscellanies, 26 March 2013</title><link href="http://www.chriskrycho.com/2014/miscellanies-26-march-2013.html" rel="alternate"></link><published>2014-03-26T06:30:00-04:00</published><updated>2014-03-26T06:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-26:/2014/miscellanies-26-march-2013.html</id><summary type="html">Some devotional thoughts on Psalm 64, Proverbs 26, and 1 Corinthians 4&amp;ndash;6.</summary><content type="html">&lt;p&gt;Today’s passages did not connect in any particular way in my head, but all bear some reflection. Perhaps by the time I am done writing, I will see a connection.&lt;/p&gt;
&lt;section id="psalm-64" class="level6"&gt;
&lt;h6&gt;Psalm 64&lt;/h6&gt;
&lt;p&gt;Reading through the Psalms often serves as a reminder for me that the easy way of life I enjoy is not normal either in historical terms or in normative terms for the people of God. Suffering and opposition are &lt;em&gt;ordinary&lt;/em&gt;, so much so that prayers for deliverance from the plots of the enemies of God are themselves ordinary in the Psalms. Certainly for David such things were a regular part of his life, and so it has been for many believers throughout the ages, and so it is today for many around the world.&lt;/p&gt;
&lt;p&gt;The Psalm does not stop with the acknowledgement that there are people in the world would do God’s people harm, though. It moves immediately on to the reality that God delivers his people. The inversion is striking: those who lay in ambush, who “shoot arrows” at the innocent find &lt;em&gt;God’s&lt;/em&gt; arrows coming for them (Psalm 64:4,7). In the small narrative arc this song traces out, the ambushers who set out to destroy the righteous are themselves destroyed. Their destruction leads all the world to magnify God. The righteous rejoice in Yahweh, take refuge in him, and exult.&lt;/p&gt;
&lt;p&gt;It strikes me that in a way, this arc is a very short telling of the arc of history itself. The enemies of God have a time in which they can work, but ultimately they will be ended, and all the earth will be filled with the glory of Yahweh.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="proverbs-26" class="level6"&gt;
&lt;h6&gt;Proverbs 26&lt;/h6&gt;
&lt;p&gt;The first half of this chapter is a sequence of comparisons: increasingly terrible or ridiculous things with a fool.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The fact that the fool comes off looking absurd is the point—so that when we get to Proverbs 26:12, the conclusion is all the more forceful:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you see a man who is wise in his own eyes?&lt;br /&gt;
There is more hope for a fool than for him.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As bad as it is to be a fool—a point that both the book as a whole and the preceding ten verses have labored to make clear—being wise in one’s own eyes is even worse.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; The book has made clear over and over again that there is basically no hope for a fool, though Wisdom is still inviting even fools to turn from their ways (Proverbs 8:5). But for the man who is wise in his own eyes, what recourse is there?&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="first-corinthians-46" class="level6"&gt;
&lt;h6&gt;First Corinthians 4–6&lt;/h6&gt;
&lt;p&gt;What better picture of reliance on one’s own wisdom than the church at Corinth? One can nearly see Paul tearing his hair out over this church, which seemed determined to run off into the weeds in every possible way. By the end of chapter 6, he has already addressed factionalism, sexual immorality of an extraordinary sort, and Christians suing each other in court. Moreover, he has had to deal with the fact that they considered themselves wiser than the apostles (basically throughout all of chapter 4). Following this so-called wisdom was destroying them.&lt;/p&gt;
&lt;p&gt;A few highlights that particularly caught my attention here:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Paul admonished his audience to judge themselves rightly, but to remember that even in their own self-judgment they had to acknowledge that God alone knows all our faults.&lt;/li&gt;
&lt;li&gt;As for outsiders, the church was not to “judge” them, leaving that to God. Judgment here must imply something besides moral assessment, however, because Paul explicitly calls out the follies of the unregenerate world (e.g. sexual immorality, greed, swindling, idolatry—see 1 Corinthians 5:10). It means rather that the Corinthians’ response was not to be the rejection enjoined of them as regarded unrepentant people in their own midst. The church exercises discipline on its members, not on the world.&lt;/li&gt;
&lt;li&gt;When Paul encourages the Corinthians to reject sexual immorality, he grounds it in the resurrection. Indeed, Paul turns to the resurrection about as often (and perhaps more often) as to the cross in this book—a point N. T. Wright’s delightful and excellent &lt;em&gt;The Resurrection of the Son of God&lt;/em&gt; makes forcefully. God raised Jesus from the dead, and he will raise us from the dead, so we ought to regard our bodies accordingly. They are temples of God indwelt by the Spirit, and ultimately destined for glory. &lt;em&gt;That&lt;/em&gt; is why we ought to flee sexual immorality.&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Interrupting the sequence is the classic wisdom paradox of the book: Proverbs 26:4–5, withits paired injunctions to answer and not to answer a fool according to his folly.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;The rhetorical force of the placement of this particular set of proverbs near the end of the book, as well as the structure of this section, is one of many arguments for a coherent editorial strategy in the creation of Proverbs. All you have to do is read the book to get this.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;This verse is one of the keys in my understanding of Ecclesiastes: &lt;em&gt;Qoheleth&lt;/em&gt; was wise in his own eyes, and it nearly destroyed him.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>God Become Man: Toward a Richer Theology of the Incarnation</title><link href="http://www.chriskrycho.com/2014/god-become-man-toward-a-richer-theology-of-the-incarnation.html" rel="alternate"></link><published>2014-03-25T08:00:00-04:00</published><updated>2014-03-25T08:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-25:/2014/god-become-man-toward-a-richer-theology-of-the-incarnation.html</id><summary type="html">Link: My latest piece over at Mere Orthodoxy, on the Incarnation.</summary><content type="html">&lt;p&gt;My latest piece over at Mere Orthodoxy (and the first such in too long):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It has been common these past few years to speak of “incarnational theology” as a way of describing the Christian mission to the world: we ought to “incarnate” Christ to the world as Christ “incarnated” the Godhead to us. There is much to appreciate in this sentiment…. Yet for all that, I think that applying the language of incarnation to believers is a serious mistake.&lt;/p&gt;
&lt;p&gt;The Incarnation matters, and it matters as more than a means of getting Jesus to the cross so that he could die for our sins. We evangelicals too often reduce everything to penal substitutionary atonement. Yes, the atonement is incredible and amazing. It is one of the central affirmations and joys of the Christian faith: our sins are paid for! Glory to God! But Jesus did more than that, and he is worthy of yet more praise. He did not stop at paying the price for our sins while leaving our bodies subject to corruption. He did not content himself with performing a judicial act while leaving our wills broken, certain to turn again to the same sin that led to our death in the first place.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think &lt;a href="http://mereorthodoxy.com/god-become-man-richer-theology-incarnation/"&gt;this&lt;/a&gt; is the best thing I’ve written so far this year; I hope you find it stimulating.&lt;/p&gt;
</content><category term="[links"></category><category term="my writing elsewhere]"></category></entry><entry><title>Surprising Unity</title><link href="http://www.chriskrycho.com/2014/surprising-unity.html" rel="alternate"></link><published>2014-03-25T07:10:00-04:00</published><updated>2014-03-25T07:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-25:/2014/surprising-unity.html</id><summary type="html">The fount of the "surprising unity" that should characterize the church is the work of the Triune God.</summary><content type="html">&lt;p&gt;The surprising unity&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; of the church has been a recurring theme on my mind lately. Reading through 1 Corinthians was sure to bring the notion back to the forefront, of course: the book has several prominent topics, but unity is the one to which Paul returns again and again and the one with which he opens the book. The first few chapters are an indictment of the Corinthians for their factionalism, punctuated&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; by a theological grounding for that indictment.&lt;/p&gt;
&lt;p&gt;In terms of structure, Paul’s epistles to the Corinthians are fairly unique among his writings. Unlike the normal structure of his letters, in which there are fairly clear divisions between expository and hortatory material (though with the requisite qualification that he is often including some exhortations during the exposition and vice versa), his letters to the Corinthians are constantly jumping back and forth between the two. He makes a point, grounds it in the nature of the gospel, and then repeats. First Corinthians circles back to the theme of unity over and over again in this fashion.&lt;/p&gt;
&lt;p&gt;In 1 Corinthians 1:18–2, Paul explains the call to unity he laid out in chapter 1 and to which he returns in chapter 3 in terms of Christ’s and the Spirit’s work. What Christ did looked like an incomprehensible weakness to the Jews who were expecting their messiah to come in power, and incomprehensible folly to the Greeks who expected any true leader to come in a demonstration of wisdom. Both of these Jesus set on their heads. In this surprising inversion—so typical of Christ’s work—is forged the grounds for Christian unity. None of us have cause for boasting; God is our wisdom and our power, our righteousness and sanctification and redemption.&lt;/p&gt;
&lt;p&gt;All of this is accomplished in our midst by the Spirit. Not only do we have nothing apart from Jesus Christ, but we cannot even rightly appropriate him and what he offers on our own. This strength and wisdom we have in Christ is mediated by the Spirit of God. What Paul taught, he taught not in human wisdom by “by the Spirit” (1 Corinthians 2:13), and only those who were empowered by the Spirit could understand them. They were (and are) folly to anyone who is operating in human understanding alone.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The unity of the church, which is one of the ways that the world knows us as Christ’s (per the Gospel of John) is, like everything in our faith ultimately a gift from the Triune God. We must actively obey the call to unity, and it will not happen without our effort, but it is Father-given, Son-mediated, Spirit- empowered obedience to walk in a Father-given, Son-mediated, Spirit-empowered way. In some sense, this is &lt;em&gt;all&lt;/em&gt; of our sanctification: learning more and more to obey in humble dependence on God who is our all in all.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;A phrase I borrowed from one our pastors at First Baptist Durham, Dr. Andy Davis.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;You can almost think of the structure as analogous to a sentence with content set off by an em-dash—like so, with some explanatory comment here in the middle—and then continuing to a conclusion. Yes, that’s an absurdly nerdy comparison.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;One might suggest that the issue is &lt;em&gt;fallen&lt;/em&gt; human understanding, and this is right so far as it goes… but the reason fallen human understanding fails is because it is not reliant on God. Unfallen, or restored, human understanding is wise precisely because it fears Yahweh (cf. Proverbs 1:7).&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Almost Too Good To Be Believed</title><link href="http://www.chriskrycho.com/2014/almost-too-good-to-be-believed.html" rel="alternate"></link><published>2014-03-24T07:10:00-04:00</published><updated>2014-03-24T07:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-24:/2014/almost-too-good-to-be-believed.html</id><summary type="html">The final chapters of Luke are absolutely packed with material. They show us our fallen humanity and the wonder of our Lord's work side by side.</summary><content type="html">&lt;p&gt;The final chapters of Luke are absolutely &lt;em&gt;packed&lt;/em&gt; with material. The chapters sweep from the Jewish leaders’ plot with Judas to get Jesus’ turned over to them, through Jesus’ celebration of the Passover with his disciples,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; through his prayers in the garden and betrayal by Judas, through his multiple farcical trials, through his brutal crucifixion and death, to his resurrection from the dead and revelation of himself as the Anointed One of God to his disciples. Luke’s narrative up to this point has a fairly measured pace, with a great deal of time devoted to long stretches of Jesus’ teaching, but here at the climax event piles on event in a way that seems designed to take one’s breath away. &lt;em&gt;Here&lt;/em&gt; is the finale toward which Jesus had been pointing ever since the &lt;a href="http://www.chriskrycho.com/2014/lukes-hinge.html"&gt;hinge in the book&lt;/a&gt; back in the ninth chapter: his death and resurrection.&lt;/p&gt;
&lt;p&gt;A few observations that particularly stood out to me today. First, when Jesus instituted the Lord’s Supper, he also told his disciples of the betrayal that would shortly come at one of their hands, and they were troubled. They “began to question one another, which of them it could be who was going to do this” (Luke 22:23). What Luke drops in next is a surprise:&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; at the same time, they started arguing about who was the greatest (22:24). They did not recognize that the same basic impulse that would motivate one of them to betray the one they confessed as Lord and Messiah—fallen human self-absorption and self-interest—also motivated this discussion of greatness. Jesus upends this, pointing out here that he had come “as the one who serves” (22:7). Their reward would be greater than any of them could wish: being enthroned beside him to judge the twelve tribes of Israel—but because they had stayed with him in his trials, not because of their own inherent greatness (22:28–30).&lt;/p&gt;
&lt;p&gt;Jesus instructed the disciples to sell a cloak to buy a sword, learned that they had a pair of swords, and told them that it was enough (22:37–38). Then, when the disciples actually went to use those swords, Jesus forbade them, and undid what they had done. It is almost as if he made sure that they had the swords there precisely so that he could teach this object lesson. The Anointed One of God came not to kill but to be killed, just as he had come not to be served but to serve.&lt;/p&gt;
&lt;p&gt;In his trial, Jesus simply did not answer his accusers. They took his silence, and his acknowledgment that they were accusing him, as all the proof they needed. Why? Because they needed no more proof than their accusations. Interestingly, both Herod and Pilate clearly abuse their authority, causing Jesus to be mocked and beaten even while admitting that they found nothing for which he ought to be punished (still less crucified). Pilate in particular comes off looking terrible: he repeatedly tells the crowd that he can see no reason why Jesus ought to be crucified, and that he intends to let him go, but caves to the pressure of the crowd (23:1–25). The fear of man can lead us to do wretched things. Pilate decided to release a murderer and insurrectionist—the latter being precisely the crime of which Jesus was accused!—instead of an innocent man, because of the demands of a crowd.&lt;/p&gt;
&lt;p&gt;Barabbas himself strikes me as an interesting figure in Luke’s narrative. He was what Jesus was accused of being, and he went free with Jesus taking his place. Every time I read through this passage, it strikes me again that Luke gave us here a clear picture of the substitutionary work of Christ on our behalf. Here we have a man who clearly deserved his punishment under the law of his day, going free with Jesus being punished instead. I have no idea whether Barabbas ever truly appreciated what happened to him, by which I mean whether he repented of his sins and believed in the one who was his substitute in more ways than one. I do know that the picture, especially when set side by side with Paul’s teaching on the topic, reminds me that &lt;em&gt;I&lt;/em&gt; am like Barabbas in the story: set free because of Jesus’ going in my stead.&lt;/p&gt;
&lt;p&gt;Finally, I love reading the narratives of the resurrection. It was then as it is now: too good to be true, almost too good to be believed. The disciples, though Jesus had taught them that he would die and be resurrected, simply did not grasp his meaning. Even when they were told that he had been raised, they did not believe it until he showed himself to them—and then they thought they saw a ghost until he convinced them by eating some fish! The resurrection was in no one’s game plan but God’s. But now it is our future hope and our joyful expectation as well. And it is because of the resurrection from the dead that they went, and that we go to proclaim repentance and forgiveness of sins in Jesus’ name to all nations (Luke 24:46–47).&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Apparently a couple days early, based on Luke’s comments in chapter 23 and John’s narrative.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Though yet again one obscured by the &lt;a href="http://www.chriskrycho.com/2014/money-parables-and-divorce-and-remarriage.html"&gt;blasted heading markers inserted in the text&lt;/a&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Doing It Myself</title><link href="http://www.chriskrycho.com/2014/doing-it-myself.html" rel="alternate"></link><published>2014-03-21T22:14:00-04:00</published><updated>2014-03-21T22:14:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-21:/2014/doing-it-myself.html</id><summary type="html">Working with Pelican&amp;mdash;the static site generator I use for my blog currently&amp;mdash;has reinforced my desire to write my own such software. Sometimes, you just have to do it yourself.</summary><content type="html">&lt;p&gt;Last summer, I started work on a project I named &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;—aiming to make a static site generator that would tick of all the little boxes marking my desires for a website generator. In due time, the project got put on hold, as I started up classes again and needed to focus more on my family than on fun side projects.&lt;/p&gt;
&lt;p&gt;Come the beginning of 2014, I was ready to bit WordPress farewell once and for all, though. While &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; looks interesting, since I do all my writing in Markdown files, there is something tempting about the canonical version of the documents being the version on my computer (and thus also on my iPad and iPhone and anywhere I have Dropbox and/or Git access). I did not have time at the beginning of the year to finish writing Step Stool, and I knew as much,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; so instead I moved to &lt;a href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; as a stop-gap. There were lots of good reasons to pick Pelican: it has an active development community, fairly thorough documentation,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and it’s in Python and uses Jinja2 templates—the same basic approach I had taken with Step Stool, and the same toolset.&lt;/p&gt;
&lt;p&gt;Unfortunately, while I have been glad to be away from WordPress, my experience with Pelican so far has only reinforced my desire to get Step Stool done. There are &lt;em&gt;lots&lt;/em&gt; of little things that it does in ways that just annoy me. Many of them have to do with configuration and documentation. On the latter, while the documentation is &lt;em&gt;fairly&lt;/em&gt; complete, there are quite a few holes and gaps. (Yes, yes, open source software and anyone can add to the docs. That’s great—it really is—but if I’m going to use someone else’s solution, it had better &lt;em&gt;just work&lt;/em&gt;. Otherwise, I’d rather spend my time getting my own going.)&lt;/p&gt;
&lt;p&gt;For example, if you want to see how the pagination actually works, good luck figuring it out from the documentation. You’ll need to go looking at the way the sample themes (yes, both of them) are implemented to start getting a feel for it. Along the same lines, many of the objects that get handed to the templates are not fully documented, so it is difficult to know what one can or cannot do. I do not particularly want to spend my time adding debug print statements to my templates just to figure out what options I have available.&lt;/p&gt;
&lt;p&gt;The same kinds of things hold true for configuration options. Moreover, the configuration is done through a Python module. While that makes the module easier to integrate on the code side of things, it makes its actual content much less transparent than one might hope. Python is not really well optimized for writing configuration files—nor is any normal programming language. Configuration is inherently declarative, rather than imperative.&lt;/p&gt;
&lt;p&gt;This is not to say that Pelican is bad software. It is not. It is, however, a fairly typical example of open source software implemented by committee. It has holes (some of them serious), bumps, and quirks. Here is the reality: so will Step Stool, though they will be the quirks that come from an individual developer’s approach rather than a group’s. But the one thing I can guarantee, and the reason I am increasingly motivated to get back to working on Step Stool. And yes, I do have a couple other projects on my plate as well—contributions to the Smartypants and Typogrify modules, my own &lt;a href="https://bitbucket.org/chriskrycho/spacewell"&gt;Spacewell typography project&lt;/a&gt;, and quite possibly a &lt;a href="https://bitbucket.org/chriskrycho/markdown-poetry/"&gt;Markdown Poetry extension&lt;/a&gt;. But I would like very much to just get back to doing this myself. There is freedom in rolling my own solution to things. I will not always have time to do these kinds of things; I figure I should do them when I can.&lt;/p&gt;
&lt;p&gt;So here’s to &lt;a href="http://step-stool.io"&gt;Step Stool&lt;/a&gt;, and—more importantly—to writing your own software just to scratch that itch.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I spent quite a bit of time tweaking my friend Vernon King’s &lt;a href="http://www.vernonking.org"&gt;Jekyll-powered site&lt;/a&gt;, I got Winning Slowly off the ground, including designing the site from scratch and implementing it (also in Pelican), and I did some substantial redesign work on this site. That was more than enough for my three week break—as evidenced by the fact that I didn’t get to the sort of 1.0 version of this site until just a week or so ago.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Emphasis on “fairly.” More on &lt;em&gt;that&lt;/em&gt; in a moment as well.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[software development]"></category></entry><entry><title>Spinning!</title><link href="http://www.chriskrycho.com/2014/spinning.html" rel="alternate"></link><published>2014-03-20T19:10:00-04:00</published><updated>2014-03-20T19:10:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-20:/2014/spinning.html</id><summary type="html">As she so often does, Ellie simply delighted me tonight, in two wonderful moments&amp;mdash;both of which involved spinning to classical music.</summary><content type="html">&lt;p&gt;As she so often does, Ellie simply delighted me tonight, in two wonderful moments:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;As I was cleaning up the dishes and playing Max Richter’s &lt;a href="https://itunes.apple.com/us/album/memoryhouse/id545010150"&gt;&lt;em&gt;Memoryhouse&lt;/em&gt;&lt;/a&gt; album, I saw Ellie dancing, and encouraged her to keep going. After a moment, I looked over to see her spinning in circles. And spinning in circles. And spinning in circles. When she finally stopped, she started freaking out as she couldn’t get her balance. I swooped in and picked her up, laughing with her once she recovered.&lt;/li&gt;
&lt;li&gt;After she calmed down, she started tugging on my shirt. It took me a few seconds to realize what she wanted, but then it clicked: she was trying to turn me by twisting my shirt. “You want to spin?” I asked her. She nodded vigorously. “Is this a spinning song?” Again, the vigorous nod. So I started spinning around and around with her in my arms, and the sheer joy in the grin plastered across her face was something to behold. We spun first one way, then the other, all the way through &lt;a href="http://www.youtube.com/watch?v=BfoSv8iWA_I"&gt;“The Twins (Prague)”&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Moments like these are worth remembering.&lt;/p&gt;
</content><category term="[family"></category><category term="Ellie]"></category></entry><entry><title>Money Parables and Divorce and Remarriage</title><link href="http://www.chriskrycho.com/2014/money-parables-and-divorce-and-remarriage.html" rel="alternate"></link><published>2014-03-19T21:56:00-04:00</published><updated>2014-03-19T21:56:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-19:/2014/money-parables-and-divorce-and-remarriage.html</id><summary type="html">Luke 16:18 points us to something beyond just divorce and remarriage&amp;mdash;though it is hard to see for all the heading markers in the text.</summary><content type="html">&lt;p&gt;I have said it before and I will say it again: I really quite detest the heading text in modern English Bible translations. That might seem a strange way to open a devotions post, but it connects. Trust me.&lt;/p&gt;
&lt;p&gt;I was reading through Luke 14, 15, and 16 this morning, trying to put the various pieces of the narratives together in the way that Luke intended. Whenever I am reading, I am always trying to understand the text &lt;em&gt;as a text&lt;/em&gt;, because that is how it was created and how God inspired it. The words we read are not abstract things, magic talismanic elements we can mix together as we please. The authors did things intentionally, as any good author does, and if we are paying attention, we will learn things from the construction of the books as we read them.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So there I was, working my way through Luke 16, and I came to a verse about which I have thought a great deal because of its implications for pastoral ministry, laid out thus in the ESV:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…it is easier for heaven and earth to pass away than for one dot of the Law to become void.&lt;/p&gt;
&lt;h4 id="divorce-and-remarriage"&gt;Divorce and Remarriage&lt;/h4&gt;
&lt;p&gt;“Everyone who divorces his wife and marries another commits adultery, and he who marries a woman divroced from her husband commits adultery.”&lt;/p&gt;
&lt;h4 id="the-rich-man-and-lazarus"&gt;The Rich Man and Lazarus&lt;/h4&gt;
&lt;p&gt;“There was a rich man…”&lt;/p&gt;
&lt;p&gt;—Luke 16:17–19a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On its face, Luke 16:18 is fairly straightforward—granting that the amount of ink spilled over the issues of divorce and remarriage means it is not &lt;em&gt;totally&lt;/em&gt; straightforward. But the straightforwardness of the statement is much diminished if we separate out those headings and situate the verse in its broader context. Here is the whole chapter (which is &lt;em&gt;perhaps&lt;/em&gt; just enough context). I have bolded 16:18 below, and removed all the headings. To feel the full force of the issue, I really do recommend you read the whole thing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He also said to the disciples, &amp;quot;There was a rich man who had a manager, and charges were brought to him that this man was wasting his possessions. And he called him and said to him, ‘What is this that I hear about you? Turn in the account of your management, for you can no longer be manager.’ And the manager said to himself, ‘What shall I do, since my master is taking the management away from me? I am not strong enough to dig, and I am ashamed to beg. I have decided what to do, so that when I am removed from management, people may receive me into their houses.’ So, summoning his master’s debtors one by one, he said to the first, ‘How much do you owe my master?’ He said, ‘A hundred measures of oil.’ He said to him, ‘Take your bill, and sit down quickly and write fifty.’ Then he said to another, ‘And how much do you owe?’ He said, ‘A hundred measures of wheat.’ He said to him, ‘Take your bill, and write eighty.’ The master commended the dishonest manager for his shrewdness. For the sons of this world are more shrewd in dealing with their own generation than the sons of light. And I tell you, make friends for yourselves by means of unrighteous wealth, so that when it fails they may receive you into the eternal dwellings.&lt;/p&gt;
&lt;p&gt;“One who is faithful in a very little is also faithful in much, and one who is dishonest in a very little is also dishonest in much. If then you have not been faithful in the unrighteous wealth, who will entrust to you the true riches? And if you have not been faithful in that which is another’s, who will give you that which is your own? No servant can serve two masters, for either he will hate the one and love the other, or he will be devoted to the one and despise the other. You cannot serve God and money.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The Pharisees, who were lovers of money, heard all these things, and they ridiculed him. And he said to them, &amp;quot;You are those who justify yourselves before men, but God knows your hearts. For what is exalted among men is an abomination in the sight of God.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The Law and the Prophets were until John; since then the good news of the kingdom of God is preached, and everyone forces his way into it. But it is easier for heaven and earth to pass away than for one dot of the Law to become void.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Everyone who divorces his wife and marries another commits adultery, and he who marries a woman divorced from her husband commits adultery.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“There was a rich man who was clothed in purple and fine linen and who feasted sumptuously every day. And at his gate was laid a poor man named Lazarus, covered with sores, who desired to be fed with what fell from the rich man’s table. Moreover, even the dogs came and licked his sores. The poor man died and was carried by the angels to Abraham’s side. The rich man also died and was buried, and in Hades, being in torment, he lifted up his eyes and saw Abraham far off and Lazarus at his side. And he called out, ‘Father Abraham, have mercy on me, and send Lazarus to dip the end of his finger in water and cool my tongue, for I am in anguish in this flame.’ But Abraham said, ‘Child, remember that you in your lifetime received your good things, and Lazarus in like manner bad things; but now he is comforted here, and you are in anguish. And besides all this, between us and you a great chasm has been fixed, in order that those who would pass from here to you may not be able, and none may cross from there to us.’ And he said, ‘Then I beg you, father, to send him to my father’s house—for I have five brothers—so that he may warn them, lest they also come into this place of torment.’ But Abraham said, ‘They have Moses and the Prophets; let them hear them.’ And he said, ‘No, father Abraham, but if someone goes to them from the dead, they will repent.’ He said to him, ‘If they do not hear Moses and the Prophets, neither will they be convinced if someone should rise from the dead.’”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What in the &lt;em&gt;world&lt;/em&gt; is this passage on divorce and remarriage doing in the middle of a discussion about handling wealth? Every other piece here fits together in a fairly obvious fashion. The parable about the rich man and Lazarus is clearly a rejoinder to the Pharisees attitude toward money. That attitude in turn was exposed by the Pharisees’ response to another parable about the relatively value of wealth in this life. Sandwiched between the two is this statement about divorce and remarriage—one that would seem perfectly clear on its own, but which set against the backdrop of this discussion on money seems to be aiming at something other than divorce and remarriage alone.&lt;/p&gt;
&lt;p&gt;In truth, I am not entirely sure &lt;em&gt;what&lt;/em&gt; Luke is doing here. My first guess, and one that Jaimie suggested as well when I pointed this out to her this morning, is that he is highlighting the way Jesus takes the law in contrast to the Pharisees. Whereas they were concerned with keeping the law in letter, he was concerned with the principle of the law. This is the same rhetorical move he makes in Matthew’s recounting of the Sermon on the Mount with this same issue, heightening the sense of the law by sharpening its demands on the listeners. “Here, you ‘righteous’ Pharisees,” Jesus seems to be saying, “I’ll see your legal requirements and raise you double that”—just before he goes on to hammer away yet more at their self-righteousness. That, in turn, makes the parables before and after this that much more convicting, that much more of a &lt;a href="/2014/sell-your-possessions-and-give-to-the-needy.html"&gt;heart check&lt;/a&gt;. That is to the good.&lt;/p&gt;
&lt;p&gt;In truth, I am still not &lt;em&gt;sure&lt;/em&gt; that is what is going on here; tomorrow I intend to spend some time looking at this issue in the commentaries. But the heading obscures that there is even a point to be seen here. I nearly missed it this morning. I &lt;em&gt;have&lt;/em&gt; missed it in the past, nearly every time I read through this section. I am therefore all the more strongly resolved to read the books of the Bible as books—to find ways to get away from the headings, whenever possible, and let the text be the text, as it was written and as it was inspired.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;To make the point a bit more forcefully: Can you imagine taking apart Shakespeare and trying to understand one couplet from a sonnet apart from the rest of the sonnet? Or trying to understand Eliot’s &lt;em&gt;Four Quartets&lt;/em&gt; by reading a line here and a line there? It would be absurd and laughable, and rightly so.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>North Korea Execution Fact Check</title><link href="http://www.chriskrycho.com/2014/north-korea-execution-fact-check.html" rel="alternate"></link><published>2014-03-19T21:25:00-04:00</published><updated>2014-03-19T21:25:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-19:/2014/north-korea-execution-fact-check.html</id><summary type="html">The story on the execution of 33 Christians in North Korea may not have been true&amp;hellip; it is hard to tell, because we have a hard time getting information about anything in the country.</summary><content type="html">&lt;p&gt;Christ and Pop Culture has some great follow-up on the link &lt;a href="http://www.chriskrycho.com/2014/north-korea-set-to-execute-33-christians.html"&gt;I posted&lt;/a&gt; last week:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you run in certain Facebook circles, you’ve likely already read that North Korean leader Kim Jung-un has called for the execution of 33 North Korean Christians. According to the widely circulated reports, these 33 people were detained after it was discovered they had ties to Kim Jung-wook, a South Korean missionary whose arrest for religious activity last year has made international headlines….&lt;/p&gt;
&lt;p&gt;But here’s the thing: No one can verify this call for executions actually took place.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A great example of journalism done right, and of how Christians ought to carry ourselves in the public square. It matters whether our facts are right or not— even when the “message” might be right either way. The &lt;a href="http://christandpopculture.com/33-christians-north-korea-really-execution/"&gt;whole thing&lt;/a&gt; is worth your time.&lt;/p&gt;
</content><category term="[links]"></category></entry><entry><title>Sell Your Possessions and Give to the Needy</title><link href="http://www.chriskrycho.com/2014/sell-your-possessions-and-give-to-the-needy.html" rel="alternate"></link><published>2014-03-18T22:00:00-04:00</published><updated>2014-03-18T22:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-18:/2014/sell-your-possessions-and-give-to-the-needy.html</id><summary type="html">Jesus tells us to sell our possessions and give to those in need. Most of us are not exactly doing that. Time for a heart check.</summary><content type="html">&lt;p&gt;I was reading Luke 12 during my devotions this morning, and was struck again by the force of verses 32–34, where Jesus tells his gathered disciples:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fear not, little flock, for it is your Father’s good pleasure to give you the kingdom. Sell your possessions, and give to the needy. Provide yourselves with moneybags that do not grow old, with a treasure in the heavens that does not fail, where no thief approaches and no moth destroys. For where your treasure is, there will your heart be also.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those words are compelling and troubling. “Sell your possessions and give to the needy.” These are not difficult to understand. Nor, in truth, are they particularly difficult to put into practice. The early church clearly saw that they should behave this way, and did so: just look at Acts 2:44–45, 4:32–35. This is not the pattern I see in the church around me today, for the most part. Nor, more worrisome, is it exactly the pattern of my own life.&lt;/p&gt;
&lt;p&gt;To be sure, Jaimie and I have long since established habits of sacrificial giving.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; We aim to be generous with our things, not holding them tightly, as well as with our time and our home. We have aimed to be hospitable, to open our home to those who need space, and so on. But I am not sure that I would say we are always characterized by this. I do not think we have ever sold one of our things &lt;em&gt;in order&lt;/em&gt; to be willing to give it to someone in need. As I ponder, I have no doubt that if one of our brothers or sisters in Christ were in great need—and especially one of those in our church—we would be willing to do so. But we have &lt;em&gt;not&lt;/em&gt; done so, and so this passage forced me to think about a Christ-following ethic regarding our possessions.&lt;/p&gt;
&lt;p&gt;I am sitting here typing this on a very nice computer, in a very nice home, with many niceties around me. I have no doubt that we could sell some of these things in order to have money to give to others. I am left wondering: &lt;em&gt;should&lt;/em&gt; we? It does not seem to me to be possible always to be selling the things we have to give them to others. Eventually one would simply run out of things to sell.&lt;/p&gt;
&lt;p&gt;I note, too, that the context here shows us that Jesus is addressing a very specific fault: worry about and pursuit of wealth. In this section he takes aim at dependence on material possessions for security, pointing us to trust in God instead of our things. He hammers away at the idea that we could somehow provide for ourselves better than God does. We reminds us that all we have will be destroyed in the end. He undercuts all our idolatry in this area. It would be easy, then, to say that his words here are illustrative to that end, and not really meaning quite what they seem to say. I think any such move would do the text an injustice. Jesus said what he said, and we had better pay attention. More: we had better obey.&lt;/p&gt;
&lt;p&gt;It is not the having of things that is the problem, it seems to me. It is clinging to them. It is seeing them as more important than people. The question I pondered earlier is the important one: &lt;em&gt;Would Jaimie and I gladly part with possessions to serve others who are in need?&lt;/em&gt; The answer to that is certainly yes—and indeed, we &lt;em&gt;have&lt;/em&gt; parted generously with our money and our things in the past. We have not &lt;em&gt;sold&lt;/em&gt; possessions to give the proceeds to others, but have at times foregone purchases to give the money to others, and we have given items themselves to others in need. We are moving in the right direction here. Nonetheless, the heart check is an important one, and one to which we prosperous Americans should return regularly. It is too easy for us to justify sitting in our comfort without regard to the needs around us, and to fail thereby to obey Jesus’ clear commands.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I thought about listing the ways we give, then thought better of it in light of &lt;em&gt;another&lt;/em&gt; of Jesus’ commands about how we should think about and act about money.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>The Resurrection is Essential</title><link href="http://www.chriskrycho.com/2014/the-resurrection-is-essential.html" rel="alternate"></link><published>2014-03-18T08:00:00-04:00</published><updated>2014-03-18T08:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-18:/2014/the-resurrection-is-essential.html</id><summary type="html">Without the resurrection, we are simply not saved. We are not justified, not delivered from death, and will not be resurrected.</summary><content type="html">&lt;p&gt;Paul tells us that if Jesus was not raised from the dead, then we are still dead in our trespasses (1 Corinthians 15:17). This simple statement uncovers a great deal about the necessity of Christ’s resurrection as well as his death on our behalf, as does much of the rest of the New Testament’s view of the resurrection. Paul tells us, for example, that Christ died for our trespasses and was raised for our justification (Romans 4:25). Likewise, he notes Jesus’ resurrection from the dead is intrinsically linked to our own life (e.g. Romans 8:11). Moreover, we know that if Jesus was not raised from the dead, then neither will we be (1 Corinthians 15:16). We know that it was in the resurrection that Jesus was shown to be the Son of God in power (Romans 1:4) and thus the one who reigns over all things. Moreover, we note that the preaching of the apostles as recorded in Acts refers to the resurrection of Christ as the evidence that he is indeed the Jewish messiah and the judge of the earth— indeed, from Acts we see that the apostolic message &lt;em&gt;centered&lt;/em&gt; on the resurrection of Christ. Likewise, the very shape of the gospels is such that each in its own way climaxes not with Jesus’ death but with his resurrection, as if to say that the central issue of our faith is not the death of Christ but his being raised from the dead.&lt;/p&gt;
&lt;p&gt;As we put together all these pieces, it becomes clear that the resurrection is integral in our salvation. It is not merely the “seal” upon the work Jesus did at the cross, the evidence that the cross accomplished what it needed to. It is part and parcel of our salvation, in and of itself. It is true that the resurrection does indeed ratify the elements of the saving work of Christ that were accomplished on the cross, but this is not all that it does. It seems clear from the evidence of the New Testament that the resurrection itself is efficacious in saving us.&lt;/p&gt;
&lt;p&gt;If our mortal bodies are corrupted by sin, as we know they are, and if the penalty of sin is death, as we know it is, then something more than payment for sin must happen. Payment for sin is necessary, and so Jesus’ substitutionary atonement in death on the cross is essential to our salvation. However, there is more that is essential to our salvation. Reconciliation between God and man began in the Incarnation, as in Jesus the Son of God united humanity and deity in perfect fellowship once again, and it was accomplished (though not yet finished) in the resurrection as Jesus took up a restored body in which the power of sin and death were finally broken: an image of what our bodies will be in the age to come.&lt;/p&gt;
&lt;p&gt;Likewise, we know that if we die as things were before the Resurrection, even were our sins paid for, we remain mortal and would never rise again of our own merits. In his resurrection, Jesus triumphed over death—the last enemy—and we know that the same Spirit that raised him from the dead will raise us from the dead. We know that Jesus’ resurrection is the means of our justification. He paid for our sins in his atoning death, but he sets us right with God in his triumphant new life. We know that his reign as the rightful heir of all things was inaugurated in his resurrection, not in his death.&lt;/p&gt;
&lt;p&gt;In short, essential as was his death for our salvation, the resurrection of Christ is no less important in our being restored to life with God.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Luke's Hinge</title><link href="http://www.chriskrycho.com/2014/lukes-hinge.html" rel="alternate"></link><published>2014-03-17T08:00:00-04:00</published><updated>2014-03-17T08:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-17:/2014/lukes-hinge.html</id><summary type="html">Luke's narrative&amp;mdash;and his depiction of Jesus&amp;mdash;changes direction in surprising ways in the middle of Luke 9: there he starts the long walk to Calvary.</summary><content type="html">&lt;p&gt;Luke structures his narrative in an interesting way. From his introduction and the beginning of Jesus’ ministry, he moves along through a fairly short section of material before he describes Jesus’ turn toward Jerusalem. Starting as early as chapter 9—less than halfway through the book—Jesus begins predicting his death and discussing his plans to go to Jerusalem. In the sequences that follow, Jesus experiences the transfiguration, begins outright attacking the Pharisees and lawyers, and grows increasingly impatient with the crowds.&lt;/p&gt;
&lt;p&gt;Even as many times as I have read these chapters, the force of them hit me anew today. Jesus remains the compassionate shepherd of the sheep, but with a startling suddenness he manifests his impatience with the people whom Paul would later describe by noting that “not all Israel is Israel” (see Romans 9:6ff.). The crowds who gathered around were not all true followers; the Pharisees and lawyers who knew best the word that spoke of him were those who most failed to understand him.&lt;/p&gt;
&lt;p&gt;I have long found Jesus’ post-Transfiguration response to the man seeking healing for his son puzzling. Ordinarily, Jesus had been quick to compassion toward people like this. Only a chapter earlier, he had been praising the faith of a woman who had touched him and been healed, and responding to the earnest pleas of a family for the healing of their daughter. But here, he complains:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;O faithless and twisted generation, how long am I to be with you and bear with you?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;/em&gt; what we expect.&lt;/p&gt;
&lt;p&gt;In Luke’s narrative, there is a hinge in 9:21–36. Here, Jesus first predicts his death, then tells his disciples that they must take up their cross daily and follow him, and then experiences the Transfiguration. Afterward, this new impatience, which comes bubbling out not only in this encounter but in woes against unrepentant cities and against the teachers and lawyers. It is not that his compassion ceases, but that his frustration shows up alongside it.&lt;/p&gt;
&lt;p&gt;The turn here highlighted several things for me. First, Jesus saw what I too easily miss, even in having read these passages so often. When he complains about bearing with a twisted and faithless generation, it is because that generation &lt;em&gt;was&lt;/em&gt; twisted and faithless, even if to my eyes the difference is not immediately obvious. But the contrast &lt;em&gt;should&lt;/em&gt; be clear, and it becomes clearer given this broader setting for the various confrontations. Luke sets up this encounter with a man seeking healing for his demoniac son against the backdrop of a gathered crowd, and only a few verses after Jesus has said, “The Son of Man must suffer many things and be rejected by the elders and chief priests and scribes, and be killed, and on the third day be raised.” He knew full well that the hearts of the crowd were not turned to him as the Messiah whom they should worship. They were people who wanted miracles and nothing more. The moment they were given the right opportunity, these same people could and would turn on him—as they did. So when we see Jesus acting in ways that surprise us, it points us back to the ways that his divinity and humanity mingled. He knew their hearts, as he knew what they would be doing to him soon enough.&lt;/p&gt;
&lt;p&gt;This also highlights the reality of how Jesus partakes in the same attitude toward faithless generations that we see in the Godhead throughout the Old Testament. So often, we separate the two Testaments functionally, even if we consciously affirm their unity. But the same compassion we see in Christ is present in every interaction of God with his people and with the nations throughout the Old Testament. The same bubbling impatience that turns eventually to woe and judgment in the Old Testament is on display here in Christ. He is the loving savior who was marking the path toward Calvary, and he is the righteous judge who pronounced woe on those who rejected him.&lt;/p&gt;
&lt;p&gt;It would be easy to make the same mistake that the crowds did in those days: to celebrate Jesus for what he does for us, without worshipping him as the Son of God or kneeling to him as the Anointed King. Indeed, so often this is &lt;em&gt;exactly&lt;/em&gt; what we do. We want to take the blessings of salvation, the help of the indwelling Holy Spirit, while continuing to go our own ways. We want to use God. Instead, we ought to humbly worship the one who calls us to leave behind everything to follow him and proclaim the kingdom (see Luke 9:57–62). We ought to rejoice that our names are written in the book of life, come what trials may, and worship the Christ of God who is risen and seated at the right hand of God.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>The Atonement, Leon Morris</title><link href="http://www.chriskrycho.com/2014/the-atonement-leon-morris.html" rel="alternate"></link><published>2014-03-16T19:50:00-04:00</published><updated>2014-03-16T19:50:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-16:/2014/the-atonement-leon-morris.html</id><summary type="html">Morris' book could have been a helpful volume; a robust doctrine of the atonement is a wonderful thing. I am sad to say that _The Atonement_ simply wasn't very good.
</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;I wrote the following review after reading the book when it was assigned for my Christian Theology II class, covering Christology and soteriology, at Southeastern Baptist Theological Seminary. Most of my readings for that class were &lt;em&gt;great&lt;/em&gt;. This one? Well, you’ll see.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Leon Morris’ &lt;em&gt;The Atonement&lt;/em&gt; is, as near as I can tell, fairly well regarded. Given the importance of the doctrine of the atonement to our faith, I had hoped that the book would be a profitable read when I saw that it was assigned as reading for one of my classes this semester. Unfortunately, the book fell far short of my hopes.&lt;/p&gt;
&lt;p&gt;The problems with the book are manifold. To begin, Morris is simply not a very good writer. Run-on sentences crop up regularly. He seems to be aiming for both a friendly conversational tone and erudition. (Conversational and scholarly writing are both fine; the combination fails miserably for nearly anyone but G.K. Chesterton or C.S. Lewis. Take it from me: I should know.) Most importantly, Morris’ chapters are essentially thesis-less, and the “conclusions” to which he comes rarely follow from the material presented in the rest of the chapter. The section on redemption was particularly egregious in this regard: he turned from a long discussion of redemption practices in the ancient world to a short summary focusing on the Christian view of sin in contrast to the modern world’s view of the human situation—with no transition or connection between the two.&lt;/p&gt;
&lt;p&gt;This is one of the two basic problems with the book, in fact. His chapters are essentially aiming to do two different things. On the one hand, Morris is clearly interested in laying out the historical and linguistic background of the various ideas associated with the atonement (the sacrificial system, Passover, redemption, etc.). On the other hand, he clearly wants to find points of application to the Christian life. In each chapter, he spends most of his time on the first, then makes a rushed switch to the second for the final pages of the chapter. At no point is this transition well-written, and in no chapter does the application follow closely from the points he made in the background material. Even within the background material which dominates each chapter, Morris wanders. It is as if he is not sure whether he wanted to provide an informative overview of the context, to argue against various views others have offered regarding that background,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; or to make some sort of theological argument. Thus, he bounces between each of these modes rather haphazardly, sometimes even within a single paragraph.&lt;/p&gt;
&lt;p&gt;This emphasis on background also rather defeats the purpose of the book. If the aim is to help people see and savor the glory of Christ’s atoning work on their behalf—a noble and worthy goal—then Morris simply did the wrong thing. He spends most of his time in the book on word studies, historical context, and so on. When he does get to his “application” sections,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; he usually has said very little about Scripture’s teaching on the atonement. Telling people what words mean, or explaining the rabbis’ records of Second Temple Judaism practice, is not the same as explaining the Scriptures. The book reads like a sermon series from the historical-grammatical school where the background has been mistaken for the content instead of as a helpful tool where the content is not clear.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; Morris wastes his readers’ time with secondary matters and speeds over the riches of the text itself.&lt;/p&gt;
&lt;p&gt;When Morris &lt;em&gt;does&lt;/em&gt; pay attention to the actual content of Scripture rather than its background, he tends to dwell on his hobby-horses instead of letting Scripture speak for itself. He often writes things like, “Of course, Scripture &lt;em&gt;does&lt;/em&gt; include (one idea), but really we should take it (in some other way).”— where the latter is his preferred reading, and the former the way the text actually reads. Unsurprisingly, then, the best chapters in the book are those where his hobby-horses are nearest the actual point of the text in question. In the final three chapters of the book, he veers away into secondary matters much less and focuses on the text much more. It made for a significant improvement.&lt;/p&gt;
&lt;p&gt;Alas, even this improvement did nothing to help resolve the other significant problem with the book. In short, Morris’ approach to New Testament doctrine is hopelessly reductionistic. Everything comes down to the idea of payment for the guilt of sin, even in chapters where he tries to talk about other things. Morris set out to write a book on the atonement, and instead of spending his time tracing out the atonement itself, he tried to make every other aspect of our salvation a part of the atonement. The book might have worked had it been titled &lt;em&gt;Salvation&lt;/em&gt;, but in seeking to make every part of God’s saving work into a mere aspect of atonement, Morris both diminished those other parts and failed to spend much time discussing the atonement itself.&lt;/p&gt;
&lt;p&gt;In this Morris is very much typical of evangelicalism, sad to say. We are a crucicentric people, and though this has its upsides, it also means we tend to rewrite all of our doctrines in terms of penal subtitutionary atonement, rather than letting them all work together as they do in the Bible. Atonement is one central and crucial (pun intended) part of our salvation, but it is not the whole of our salvation.&lt;/p&gt;
&lt;p&gt;Morris’ book could have been a helpful volume; a robust doctrine of the atonement is a wonderful thing. I am sad to say that &lt;em&gt;The Atonement&lt;/em&gt; simply wasn’t very good. There are helpful bits scattered throughout, but to find them one must wade through a great deal of poorly written, unnecessarily polemical, disorganized, distracted meandering about things that are &lt;em&gt;not&lt;/em&gt; the atonement (though they are themselves wonderful). I cannot recommend it.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Including, unfortunately, the occasional joke about the Church Fathers’ views on aspects of the atonement are. At one point, he goes so far as to describe the Fathers’ “ransom view” of the atonement as silly and only worth laughing at. We might &lt;em&gt;disagree&lt;/em&gt; with the Fathers’ ransom view of the atonement, with God paying Satan—I do—but we hardly ought to laugh at them. This is chronological snobbery of the worst sort.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Usually focusing on the shape of the Christian life—an odd choice in a book one would think would focus on the gospel itself. To be sure, I think that the atonement has enormous implications for the Christian life. Morris never shows &lt;em&gt;how&lt;/em&gt; they connect, though, and he doesn’t spend any time talking about the marvel of the atonement itself for the Christian, either. It is just strange.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;This is the way that the historical-grammatical approach normally goes wrong. Other approaches have their own typical foibles, of course.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="book reviews"></category></entry><entry><title>Combatting Generational Poverty Through Early Childhood Intervention</title><link href="http://www.chriskrycho.com/2014/combatting-generational-poverty-through-early-childhood-intervention.html" rel="alternate"></link><published>2014-03-16T17:00:00-04:00</published><updated>2014-03-16T17:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-16:/2014/combatting-generational-poverty-through-early-childhood-intervention.html</id><summary type="html">Link: It seems inevitable that our country will try to combat generational poverty and all its great harms by investing heavily in early childhood intervention. The question for the church is, will we allow the state to take the initiative, or will we take up this task and engender the kind of deep, redemptive healing that the state can only dream of?</summary><content type="html">&lt;p&gt;Great piece here from Alan Noble, who is increasingly showing himself to be one of the sharpest guys around.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It seems inevitable that our country will try to combat generational poverty and all its great harms by investing heavily in early childhood intervention. We already see signs of the State moving towards such programs with President Obama’s 2013 State of the Union address and Mayor de Blasio’s expanded pre-K. Tragically and despite enormous costs, de Blasio’s pre-K initiative in New York will most likely have very modest results, particularly since it begins intervention at age four, so late in the child’s mental development. The question for the church is, will we allow the state to take the initiative, or will we take up this task and engender the kind of deep, redemptive healing that the state can only dream of?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should (1) &lt;a href="http://www.canonandculture.com/combatting-generational-poverty-through-early-childhood-intervention/"&gt;read the rest of this piece&lt;/a&gt; and (2) read lots more by him and other sharp guys at his homebase &lt;a href="http://christandpopculture.com"&gt;Christ and Pop Culture&lt;/a&gt;.&lt;/p&gt;
</content><category term="links"></category></entry><entry><title>The Servant of God</title><link href="http://www.chriskrycho.com/2014/the-servant-of-god.html" rel="alternate"></link><published>2014-03-11T15:45:00-04:00</published><updated>2014-03-11T15:45:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-11:/2014/the-servant-of-god.html</id><summary type="html">&lt;p&gt;The Servant pictured in Isaiah is one of the most famous images in the Old Testament for Christians. The language applied to him in Isaiah 53 in particular has long been understood by Christians to point directly to Jesus as the atoning savior. The role of the Servant in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Servant pictured in Isaiah is one of the most famous images in the Old Testament for Christians. The language applied to him in Isaiah 53 in particular has long been understood by Christians to point directly to Jesus as the atoning savior. The role of the Servant in the book is somewhat more complex than a simple prediction of Jesus as subtitutionary atonement however: it encompasses that idea, but does much more as well.&lt;/p&gt;
&lt;p&gt;The label of Servant is applied to two (or possibly three) different roles in Isaiah: the nation of Israel, and one who suffers and works on behalf of Israel. This latter role certainly contains messianic overtures, but may also include poetic references to Isaiah’s own suffering on behalf Israel.&lt;/p&gt;
&lt;p&gt;The theme of the Servant first appears in chapter 40, and is immediately and directly applied in reference to Israel/Jacob. The same is true of its appearance in chapters 41 and 43, though the language used of the servant in chapter 42 suggests an individual and not the nation, and should perhaps be taken as pointing to a king who represents the nation given the national context. Beginning in chapter 45 and moving forward, the Servant increasingly appears as the individual who acts for Israel on Yahweh’s behalf.&lt;/p&gt;
&lt;p&gt;Whether the Servant-Israel or the Servant-for-Israel (as we might label them), the Servant exists to be God’s agent in bringing about the obedience of the nations. The Servant-Israel experiences cleansing and purification to that end, while the Servant-for-Israel experiences suffering in place of Israel, for her sins and to save her from her unrighteous ways.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In both cases, the suffering is part of God’s plan to lead the nations out of their idolatry to participate in his covenant with Israel. The shape of the role taken by the Servant differs, though, and as the book progresses the need for the Servant-for-Israel becomes more and more clear, because the Servant-Israel is simply not up to the task (as was made clear by the first 39 chapters of the book!).&lt;/p&gt;
&lt;p&gt;Thus, the Servant-for-Israel acts on behalf of Israel in the latter parts of chapters 40–55. He picks up kingly responsibilities of doing justice and righteousness in the earth (a theme Isaiah seems to take up from the Psalms and elaborate). He stands as Israel’s representative in dealing with her sin. He brings the nations in to participate in Israel’s covenant life with God. In some sense, the messianic king figure becomes True Israel on Israel’s behalf.&lt;/p&gt;
&lt;p&gt;The transition between Servant-Israel and Servant-for-Israel not only picks up messianic overtones, but also hints at autobiographical elements for Isaiah himself. Lest Christian readers be skittish at this notion, wanting to preserve the text’s unique way of pointing to Jesus: it is hardly uncommon for figures in the Old Testament to prefigure the messiah in various ways. Here it is Jesus’ role as Prophet we see prefigured, just asthe entire Levitical system prefigured him as Priest and David prefigured him as King. Isaiah’s suffering on behalf of Israel is a clear parallel to Jesus’ ministry, and Jesus himself makes this clear in his teaching in the New Testament, where he emphasizes that he came in part to close eyes and ears as well as open them.&lt;/p&gt;
&lt;p&gt;The result of the progression is that the reader moves from seeing Israel as God’s servant to recognizing the need for a servant who will work as God’s agent on Israel’s behalf, to seeing that even Isaiah was an incomplete picture of this servant. The one of whom Isaiah prophesied would be not only Prophet but also king and both priest and sacrifice on behalf of the people. He would not only speak of the nations coming to participate in fellowship with God in the Zion of Israel, he would bring it about himself.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Notably, the redemption pictured in Isaiah goes beyond subtitution for sins, and includes restoration to a holy nature—a theme that is picked up clearly in the New Testament but too often overlooked by modern readers.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Wisdom and Folly</title><link href="http://www.chriskrycho.com/2014/wisdom-and-folly.html" rel="alternate"></link><published>2014-03-11T15:00:00-04:00</published><updated>2014-03-11T15:00:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-11:/2014/wisdom-and-folly.html</id><summary type="html">&lt;p&gt;The book of Proverbs opens with a lengthy introduction to the topic of wisdom, expounding its virtues and necessity and contrasting them with the costs of folly, before moving into the proverbs for which it is named. After a short introductory statement, the book moves into a series of extended …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The book of Proverbs opens with a lengthy introduction to the topic of wisdom, expounding its virtues and necessity and contrasting them with the costs of folly, before moving into the proverbs for which it is named. After a short introductory statement, the book moves into a series of extended metaphors for wisdom and folly to illustrate the point. These metaphors are those of the two women, the two houses, and the two ways—with the choices between the two illustrated in each case by the simple youth who may choose one or the other and become either wise or a fool.&lt;/p&gt;
&lt;p&gt;The two women of the book are the Ladies Wisdom and Folly. Throughout the first nine chapters, the two stand in opposition to each other everywhere. Wisdom calls out on the streets, by the gates, and in the highest point of the city. She represents the first aspect of God’s order in the world, that foundational principle on which the world is built. She is an attribute of the creation God made and a reflection of his desires and character. By contrast, the adulteress (or “foreign woman”) who leads astray a simple youth and destroys him in chapter 7 is a picture not only of the particular follies of adultery but a personification of all that is foolish: wherever wisdom stands and calls out, so too does the adulteress—Lady Folly in one of her most deceptive forms. She is an image of what it means to go against the grain of God’s created order, and the consequence of going with her is death. No surprise, that: going against the structure of God’s reality has &lt;em&gt;always&lt;/em&gt; led to death, beginning in Genesis 3.&lt;/p&gt;
&lt;p&gt;The two ways and two houses pick up this same motif and trace it out further. One way leads to life, the other to death. One house is steadfast and sure, while the other crumbles. One belongs to Wisdom, the other to Folly. These images Jesus picks up again in his own teaaching in the New Testament: The way that leads to life is narrow, and few find it, but the way that leads to destruction is wide and many walk it. The wise man builds his house on the rock that is Jesus’ word, but the foolish man builds his house on the sand that is worldly wisdom. The naïve youth may answer Lady Wisdom’s invitation and follow her along the way of wisdom to the house of wisdom and so become wise, or he may answer Lady Folly’s call, walk down folly’s road to the house of destruction and so become a fool.&lt;/p&gt;
&lt;p&gt;The idea of the “wise person” and the “fool” then come up time and again throughout the rest of the book. Whatever one decides has the enormous consequences that the book traces out: fools become insolent, ignorant, murderous rebels against God, while wise people become gracious, temperate, gentle followers of God.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Job—The Mourner</title><link href="http://www.chriskrycho.com/2014/job-the-mourner.html" rel="alternate"></link><published>2014-03-11T14:30:00-04:00</published><updated>2014-03-11T14:30:00-04:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-11:/2014/job-the-mourner.html</id><summary type="html">&lt;p&gt;The book of Job has most commonly been read as theodicy, i.e. as a defense of God’s goodness in the face of human suffering and the existence of evil in the world. This reading has a number of difficulties, not least in that though the characters in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The book of Job has most commonly been read as theodicy, i.e. as a defense of God’s goodness in the face of human suffering and the existence of evil in the world. This reading has a number of difficulties, not least in that though the characters in the book raise this question, neither God in his appearance nor the narrator offer an answer to it. Indeed, the final shape of the book is such that the reader has some understanding of why &lt;em&gt;Job&lt;/em&gt; suffered as he did—but only some. God’s reasons for acting in the particular ways he did remain hidden, and (more importantly) the answers we see in Job’s specific case are clearly not applicable to every case of human suffering.&lt;/p&gt;
&lt;p&gt;One possible way out of this problem is to approach the text from a different angle. Supposing that Job was not written as a theodicy, but as an exploration of an entirely different need, how might we read the book more profitably? One suggestion is that the central issue in the text is how Job might move from a position of ritual mourning back into a position of ritual life—and this approach does indeed yield significant exegetical fruit.&lt;/p&gt;
&lt;p&gt;All of Job’s troubles experienced in the first two chapters of the book warranted his entering a state of ritual mourning: he experienced calamity in the loss of his possessions, the death of his sons and daughters, and the onset of a skin disease. The Levitical law proscribed the kinds of mourning an Israelite would undergo under each of these circumstances, and none were trivial. Though Job as a non-Israelite would not have lived under the Levitical law, he &lt;em&gt;did&lt;/em&gt; live in a culture that embraced that pattern of ritual mourning in response to these problems, and the Israelite audience would have recognized his behavior as such. Thus, in Job 1–2, we see Job respond to his great calamity by tearing his clothes, going out of the town and sitting on the trash heap, and scraping his skin with a shard of pottery. These were not merely expressions of his grief (though, to be sure, he was grieved) but symbolic statements that he had entered a state of ritual death in a period of mourning.&lt;/p&gt;
&lt;p&gt;Job now needed a way to move back to ritual life, the ordinary state of affairs. Culturally, “comforters” were the means afforded him for this end, and this explains the efforts of Eliphaz, Bildad, Zophar, and (eventually) Elihu. Each in his way sought to help Job come to terms with his loss, become right with God, and return to ordinary life. Since the three each embraced both the so-called “retribution principle” and its corollary—that God rewards the righteous and punishes the wicked, and that accordingly prosperity and suffering are indicators of righteousness and wickedness respectively—they all tried to convince Job that he ought to repent of his apparent sin.&lt;/p&gt;
&lt;p&gt;Notably, however, none could persuade Job of any sin warranting such suffering as he endured, and moreover the book agrees with Job: the narrative prologue first chapters tells us that Job was “blameless and upright” and that “in all this [his initial response to loss] he did not sin.” Job’s bitter response midway through the book (“Miserable comforters are you all!”) makes perfect sense in this context: they were not relieving him of his state of ritual death, for their words offered no way forward. Thus, Job increasingly turns away from answering his friends to pleading with God to appear and answer him, though as Job acknowledges, no one can contend with God. Still: even against the largely accurate answers Elihu provides in chapters 32–36, Job was unmoved. He needed something else.&lt;/p&gt;
&lt;p&gt;When God appears, he does not answer Job’s questions, but neither does he accuse him of sin. Rather, he shows Job his wisdom, and how greatly his wisdom exceeds Job’s understanding. This, it seems, &lt;em&gt;is&lt;/em&gt; what Job needed in order to move from mourning back to life. He is able to say, “Before, I had heard of you, but now my eyes have seen you,” and &lt;em&gt;this&lt;/em&gt; is what triggers his return to normal life at the end of the book. Moreover, his statement of repentance in Job 42 makes a great deal more sense this way: he now turned away (“repented” in the bare sense) &lt;em&gt;from&lt;/em&gt; dust and ashes—not repenting of some unnamed sin &lt;em&gt;in&lt;/em&gt; dust and ashes. Indeed, this (the common reading) would hardly make sense, given that Job immediately puts off his dust and ashes and returns to his life. Job was able to move from ritual death to ritual life because he had encountered God. As a result, Job did return to all the ordinary parts of life. Whereas the mourner was forbidden from feasting, worshipping, and sexual activity, Job participates in all three in the conclusion of the book. His friends and family come and eat with him. He offers sacrifice for his friends. He fathers more children.&lt;/p&gt;
&lt;p&gt;Thus, taking Job in light of ancient near eastern mourning ritual helps us understand the book’s message and structure far more clearly than taking it as a theodicy. The text does not seek to answer why God allows evil. Indeed, it inverts the question: who are we to think we could understand? In Job we have instead a recognition that the only thing that will really satisfy the soul of one experiencing the deep suffering that life brings is an encounter with the living God. The only thing that could move Job from ritual death to ritual life is the only thing that can move us from spiritual death to spiritual life—not mere academic knowledge of facts about God, but encountering him as one who may be known.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>North Korea Set to Execute 33 Christians</title><link href="http://www.chriskrycho.com/2014/north-korea-set-to-execute-33-christians.html" rel="alternate"></link><published>2014-03-08T22:20:00-05:00</published><updated>2014-03-08T22:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-08:/2014/north-korea-set-to-execute-33-christians.html</id><summary type="html">Link: North Korea tyrant Kim Jong-un has reportedly ordered that 33 Christians believed to be working alongside South Korean Baptist missionary Kim Jung-wook be put to death.</summary><content type="html">&lt;p&gt;The Washington Times reports:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;North Korea tyrant Kim Jong-un has reportedly ordered that 33 Christians believed to be working alongside South Korean Baptist missionary Kim Jung-wook be put to death.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;N.b. the source is Breitbart, which I usually take with a very large grain of salt—but this is not exactly surprising for Kim Jong-un or North Korea, so it is deserving of further investigation and prayer in any case.&lt;/p&gt;
</content><category term="[links]"></category></entry><entry><title>Redeemed For (As Well As From)</title><link href="http://www.chriskrycho.com/2014/redeemed-for-as-well-as-from.html" rel="alternate"></link><published>2014-03-08T22:15:00-05:00</published><updated>2014-03-08T22:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-08:/2014/redeemed-for-as-well-as-from.html</id><summary type="html">Paul's letter to Titus is more than just a list of things for the church to do. It helps us situate ourselves in church history and understand our responsibilities in this age—it helps us understand our salvation more clearly.</summary><content type="html">&lt;p&gt;One of the great joys of the Scripture reading I have been doing so far this year is that it covers a lot of ground. Besides reading all of the historical books last semester for my Old Testament I survey class and all of the wisdom literature and prophets this semester for my Old Testament II survey class, I am also reading through the Psalms and the Proverbs regularly (I expect to cover the Psalms twice and the Proverbs at least ten times this year), and going over various parts of the New Testament as well. Among other things, this really helps me see the bigger picture and integrate my readings more effectively.&lt;/p&gt;
&lt;p&gt;Indeed, I am increasingly convinced that many evangelicals need not more of the detailed word studies of which we are so fond,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; but a broader understanding of the ways that the various books and parts of books fit into their canonical and salvation-historical contexts. We need to understand the epistle to Titus, for example, not just as a series of instructions for polity disconnected from salvation history (apart from the parts where Paul refers to salvation history) but as an integral part of that history. The same is true of books we often find difficult to integrate into such a reading, especially the wisdom literature but even including the Psalms.&lt;/p&gt;
&lt;p&gt;How &lt;em&gt;does&lt;/em&gt; Paul’s letter to Titus fit into the rest of the canon, and into salvation history? We have of course one of Paul’s typically succinct and incisive summaries of the gospel:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But when the goodness and loving kindness of God our Savior appeared, he saved us, not because of works done by us in righteousness, but according to his own mercy, by the washing of regeneration and renewal of the Holy Spirit, whom he poured out on us richly through Jesus Christ our Savior, so that being justified by his grace we might become heirs according to the hope of eternal life. (Titus 3:4-7, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even beyond this explicit pointer to salvation history, though, we must recognize that the book sits in the canon as it does for a reason. We are meant to learn from the needs of the early church, and to remember that the work of God did not stop with the ascension of Christ, nor even with the apostles. We are meant to come away both understanding how we ought to do things ourselves in our own churches better and understanding what God is about in the church more clearly. Paul gets at this quite explicitly, albeit briefly, along the way:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the grace of God has appeared, bringing salvation for all people, training us to renounce ungodliness and worldly passions, and to live self-controlled, upright, and godly lives in the present age, waiting for our blessed hope, the appearing of the glory of our great God and Savior Jesus Christ, who gave himself for us to redeem us from all lawlessness and to purify for himself a people for his own possession who are zealous for good works. (Titus 2:11-14, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The church exists not only as a lifeboat for those drowning in their sins (though of course it is that), but as a distinctive, united group of people called together to live in a specific way. We are called to live in a particular way, to be a peculiar people: self-controlled, upright, and godly. Jesus gave himself for us&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; not only to pay for our sins, but to make something new of us. He redeemed us from lawlessness; no more should we walk in our own ways. He purified us for himself as a people—not merely a disparate group of persons, but as a united people who are characterized above all by belonging to him. Moreover, as a people we are to be &lt;em&gt;zealous&lt;/em&gt; for good works. As I wrote &lt;a href="/2014/work-hard.html"&gt;yesterday&lt;/a&gt;, this is a view we could use a great deal more of.&lt;/p&gt;
&lt;p&gt;We need to see clearly our own place in salvation history. We are not people saved in the abstract, or saved as lone-standing individuals, or so that we may have license to do whatever we like. We have been saved with an end in mind: that we might do good and so make much of Christ in the world around us. The result, as Paul points out elsewhere in the book, will be that people will have no cause to revile us and may be led to repentance. In short, we are part of God’s work in history, and our Spirit-empowered pursuit of corporate and personal holiness and good works in the world we inhabit is an important, meaningful part of that work in history.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I might also point out that, from a linguistics perspective, the idea of “word studies” is fundamentally broken. Think about all the ways that the word “conceive” is used, for example—it would be a fallacy to think that every time we use the word in its cognitive sense, we mean to include all the connotations of a child coming into a being. We inevitably indulge in many such fallacies in our usual approach to word studies, and the amount of technical language skill needed to avoid such things is high. I usually recommend that people simply not do word studies at all for this reason alone—but there are other good reasons, too, not least that such studies tend to distract us from the point being made in a particular place as we try to see what the words mean in all the &lt;em&gt;other&lt;/em&gt; places. That, too, misunderstands how language works.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I find it telling that Paul says Jesus &lt;em&gt;gave&lt;/em&gt; himself for us rather than only that he &lt;em&gt;died&lt;/em&gt; for us. We know from Philippians that the Son gave to us in the act of the Incarnation as well as in his death.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Work Hard!</title><link href="http://www.chriskrycho.com/2014/work-hard.html" rel="alternate"></link><published>2014-03-07T22:55:00-05:00</published><updated>2014-03-07T22:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-07:/2014/work-hard.html</id><summary type="html">Paul's list of exhortations in Romans 12 could lead us to despair—or it could lead us to worshipful obedience.</summary><content type="html">&lt;p&gt;Paul doesn’t pull punches, and he is not interested in making things easy on Christians. As soon as he has finished his theological foundation in Romans— the most lengthy of any such argument he makes in any of his letters—he moves immediately into some remarkably profound exhortations. They are worth quoting at length and pondering at length:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let love be genuine. Abhor what is evil; hold fast to what is good. Love one another with brotherly affection. Outdo one another in showing honor. Do not be slothful in zeal, be fervent in spirit, serve the Lord. Rejoice in hope, be patient in tribulation, be constant in prayer. Contribute to the needs of the saints and seek to show hospitality.&lt;/p&gt;
&lt;p&gt;Bless those who persecute you; bless and do not curse them. Rejoice with those who rejoice, weep with those who weep. Live in harmony with one another. Do not be haughty, but associate with the lowly. Never be wise in your own sight. Repay no one evil for evil, but give thought to do what is honorable in the sight of all. If possible, so far as it depends on you, live peaceably with all. Beloved, never avenge yourselves, but leave it to the wrath of God, for it is written, “Vengeance is mine, I will repay, says the Lord.” To the contrary, “if your enemy is hungry, feed him; if he is thirsty, give him something to drink; for by so doing you will heap burning coals on his head.” Do not be overcome by evil, but overcome evil with good. (Romans 12:9–21)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This list of exhortations is stunning in its breadth and depth. It is impossibly difficult. We could easily become discouraged, and recognizing our own hypocrisy despair and give up,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; but this was clearly not Paul’s intent. Rather, he was setting before his audience—and thus, before us—a picture of the true Christian life and calling us to pursue it. He was no fool; he had spent much of the book discussing the very challenges that face every would-be follower of God and knew well the weakness of our own flesh. Moreover, immediately after this list, he turned from these instructions to deal with the kinds of weaknesses that have come up in every congregation from his day to ours.&lt;/p&gt;
&lt;p&gt;Paul knew we would fail at this list, yet he gave it to us anyway. The authors of the New Testament do not shy away from this move. Jesus told us flatly that we must be perfect as our heavenly father is perfect, and the apostles picked up this theme and ran with it. Why in the world would they do this, knowing we would never meet such a standard (most of all our Lord, who alone has lived righteously)? Is this merely more Law designed to point us back to the Gospel and show us that even as believers, we can do nothing, or are these real instructions—and if the latter, how are we to respond without being crushed by our inability?&lt;/p&gt;
&lt;p&gt;I think it &lt;em&gt;is&lt;/em&gt; the latter: a geniuine call to a righteous life. The idea that these kinds of instructions exist &lt;em&gt;only&lt;/em&gt; to point us back to the gospel does not do justice to the text, and in fact leads us fairly quickly to a quiet antinominianism. Where we think that we are unable to fulfill God’s law and that even aiming to do so is somehow wrong, we quickly stop pursuing real holiness. This cannot be right.&lt;/p&gt;
&lt;p&gt;Still, the problem remains: even for the faithful Christian who &lt;em&gt;wants&lt;/em&gt; to fulfill these commands, we recognize our failure. Here, the gospel &lt;em&gt;is&lt;/em&gt; the answer—just not in the way so many antinomian-tending believers take it. The gospel reminds us first of what Christ Jesus has done on our behalf and removes the weight of thinking that we must meet these standards to stand before a righteous God. We never could. We can stand before him only because we are clothed with the righteousness of the Incarnate Son of God who clothed himself in all our sins and bore every drop of the Godhead’s wrath on our sin already. Second, the gospel reminds us that we are &lt;em&gt;presently&lt;/em&gt; united with Christ by the indwelling of his Spirit. The Spirit that raised Christ from the dead—the third person of the Trinity who empowered Jesus to perform his earthly ministry without sinning—lives in us. It is God who works in us both to will and work for his good pleasure. Third, we remember that we have an advocate before the throne of the Father who is always interceding for us, and that the Spirit prays for us when we do not know how to pray for ourselves.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; We have not been left alone.&lt;/p&gt;
&lt;p&gt;So we look at the gospel over and over again, and in so doing are empowered to press on when we do not love perfectly, when we are wise in our sight, when we fail to do what we ought and when we do what we ought not to do. We remember what Christ has done, how he stands now before the Father on our behalf, and how we will stand righteous in him come the final day.&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; We remember how the Spirit indwells us and empowers us just as he did Christ. We remember that we &lt;em&gt;have&lt;/em&gt; been raised with Christ even as we &lt;em&gt;will&lt;/em&gt; be raised with Christ. And we can press on. We can work hard, knowing God is at work in us.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I was talking with an acquaintance recently who took precisely this course. It broke my heart. We need not despair.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Do not miss this! All Christians have two members of the Trinity always speaking to the third on our behalf, and the third is delighting to respond!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;A small point of wonder: the final day will also be the &lt;em&gt;first&lt;/em&gt; day in many ways. It will be the end of this age, and the beginning of an age without sorrow or tears or calamity. Hallelujah.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Why Is American Internet So Slow?</title><link href="http://www.chriskrycho.com/2014/why-is-american-internet-so-slow.html" rel="alternate"></link><published>2014-03-07T19:55:00-05:00</published><updated>2014-03-07T19:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-07:/2014/why-is-american-internet-so-slow.html</id><summary type="html">&lt;p&gt;Pretty damning of the current (lack of a) regulatory regime, if you ask me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to a recent study by Ookla Speedtest, the U.S. ranks a shocking 31st in the world in terms of average download speeds. The leaders in the world are Hong Kong at 72.49 Mbps …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Pretty damning of the current (lack of a) regulatory regime, if you ask me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to a recent study by Ookla Speedtest, the U.S. ranks a shocking 31st in the world in terms of average download speeds. The leaders in the world are Hong Kong at 72.49 Mbps and Singapore on 58.84 Mbps. And America? Averaging speeds of 20.77 Mbps, it falls behind countries like Estonia, Hungary, Slovakia, and Uruguay.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="[links]"></category></entry><entry><title>Salvation is Beautiful</title><link href="http://www.chriskrycho.com/2014/salvation-is-beautiful.html" rel="alternate"></link><published>2014-03-05T23:00:00-05:00</published><updated>2014-03-05T23:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-05:/2014/salvation-is-beautiful.html</id><summary type="html">Paul's treatment of justification in Romans is astounding and beautiful and marvelous&amp;mdash;for here he proclaims the risen lord Jesus Christ. Hallelujah!</summary><content type="html">&lt;p&gt;Romans is just flat &lt;em&gt;packed&lt;/em&gt; with theological profundities. Word for word, I am hard pressed to think of any other document with such depths. Not for nothing has it often been called the greatest letter ever written. Paul’s incredible intellect is on full display throughout the letter, dedicated entirely to one end: that his readers would see and delight in the work of God in Jesus, the Jewish Messiah through whom salvation came to all nations.&lt;/p&gt;
&lt;p&gt;I read Romans 4–6 tonight, and I hardly know where to begin in responding to all the truths layered throughout these chapters. Paul spends most of these first chapters dwelling on the doctrine of justification. &lt;em&gt;How,&lt;/em&gt; he asks, &lt;em&gt;can unrighteous people stand before a holy God? And how can a holy God let them?&lt;/em&gt; These are not new questions for the Scriptures—they are, in some sense, some of the &lt;em&gt;oldest&lt;/em&gt;. From the moment that Adam and Eve disobeyed God and ate of the fruit of the tree of the knowledge of good and evil and in so doing sundered themselves from their maker, God has been showing mercy and restraint toward we people who are ever in rebellion against him. He made a way for often-failing Israel to nonetheless be in a covenant relationship with him throughout the Old Testament years, and he laid out the pattern: blood for blood, life for life, every sin requiring payment. Yet the blood of bulls and goats was not exactly a perfect substitute for a human being. God passed over sins because he was merciful and kind and longsuffering—but he is also just, and justice must be done.&lt;/p&gt;
&lt;p&gt;It is with all this as a(n often-referenced) backdrop that Paul lays out his doctrine of justification. Having shown in chapter 3 that Jesus is the answer to the problem of sinful people standing before a righteous God, Paul arcs out and back again over and over again through these chapters to the glorious reality that in Christ, we stand perfectly justified before God. God counts us righteous because Christ was righteous on our behalf, died on our behalf, and was raised on our behalf.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Paul goes out to Abraham’s justification by faith in God, hammering away at any notion that Abraham was justified by his circumcision or any other good deed and pointing instead to his trust in God, born out by obedience. Then he arcs back in to look at Jesus’ death and resurrection and our response of faith. Then he zooms back out again to the history of salvation in Adam’s trespass and back in to Christ’s work to redeem humanity in every way that it was cursed in Adam. In chapter 6, he applies these truths at a doctrinal level: justification is not license to sin, but grounds for and the basis of empowerment to obey. Paul returns to this theme at length in the end of the book, but he wants it made clear here: the death and resurrection of Christ do not give us cause to embrace antinomianism, but instead lead us to the obedience of faith, just as it did in Abraham.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of this discussion of what Paul says—good though it is—can mask the beauty and the magnificence of his proclamations, though. As John Piper has commented: the God revealed in these pages is worthy of more than mere intellectual analysis. He must be proclaimed, and Paul is proclaiming him—&lt;/p&gt;
&lt;p&gt;Romans 4:24–25:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It will be counted to us who believe in him who raised from the dead Jesus our Lord, who was delivered up for our trespasses and raised for our justification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Romans 5:6–11:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For while we were still weak, at the right time Christ died for the ungodly. For one will scarcely die for a righteous person—though perhaps for a good person one would dare even to die—but God shows his love for us in that while we were still sinners, Christ died for us. Since, therefore, we have now been justified by his blood, much more shall we be saved by him from the wrath of God. For if while we were enemies we were reconciled to God by the death of his Son, much more, now that we are reconciled, shall we be saved by his life. More than that, we also rejoice in God through our Lord Jesus Christ, through whom we have now received reconciliation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Romans 6:5–11:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For if we have been united with him in a death like his, we shall certainly be united with him in a resurrection like his. We know that our old self was crucified with him in order that the body of sin might be brought to nothing, so that we would no longer be enslaved to sin. For one who has died has been set free from sin. Now if we have died with Christ, we believe that we will also live with him. We know that Christ, being raised from the dead, will never die again; death no longer has dominion over him. For the death he died he died to sin, once for all, but the life he lives he lives to God. So you also must consider yourselves dead to sin and alive to God in Christ Jesus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Christ is risen from the dead! He has trampled down sin and death. He has made atonement for us. He has been born and lived and died a man, tempted like us in every respect yet without sin, but dying he did not stay dead! He has been declared the Son of God with power (Romans 1:4) and raised from the dead to show the surety of our faith and our hope. Hallelujah!&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Romans 4:25 is one of those verses that surprises we crucicentric evangelicals: it says that Jesus was delivered up (i.e. to the cross) for our trespasses and &lt;em&gt;raised&lt;/em&gt; for our justification. We have no justification before God apart from Jesus’ resurrection from the dead. Indeed, the resurrection of Christ is woven through Romans as one of the central themes, too often overlooked by evangelicals, from the very introduction of the book (cf. Romans 1:4).&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;This theme of obedience also runs throughout the book. Again, evangelicals can be quick to point to the idea that we are saved by faith, apart from any work of the law, and given the rest of the book of Romans, this is a truth we heartily embrace, and in which we should rejoice. But the faith in view, as James reminds us in his epistle, is not a sort of abstract, intellectual affirmation or an emotional rush of good feeling toward God. It is belief that produces obedience; if it does not produce obedience, &lt;em&gt;it is not real faith and we remain unjustified&lt;/em&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>What He Did Not Assume</title><link href="http://www.chriskrycho.com/2014/what-he-did-not-assume.html" rel="alternate"></link><published>2014-03-05T15:30:00-05:00</published><updated>2014-03-05T15:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-05:/2014/what-he-did-not-assume.html</id><summary type="html">Nearly every major heresy the church confronts (and no few of its littler skirmishes) revolve around issues of the nature of the Incarnate Son of God.</summary><content type="html">&lt;p&gt;There have been many broken and flawed Christologies over the years, and in truth many of them continue to crop up in mainstream evangelicalism. Nearly every major heresy the church confronts (and no few of its littler skirmishes) revolve around issues of the nature of the Incarnate Son of God. From the earliest days of the church, there has been a tension between those emphasizing Jesus’ humanity at the cost of his deity and those emphasizing his deity at the cost of his humanity. The clear testimony of Scripture, however, is that Jesus was everything that it is to be God and also everything that it is to be human.&lt;/p&gt;
&lt;p&gt;When we say, then, that in the Incarnation the Son of God ‘took his flesh from Mary’, we are emphasizing that he inherited from her all that it means to be a human being. Nothing was missing or absent. The Word who was from the beginning, and through whom the Father created the world, and indeed for whom the world exists, took upon himself human body and soul/mind/spirit.&lt;/p&gt;
&lt;p&gt;He participated fully in all the weaknesses of human existence. He became subject to common colds and the need to expel waste from his body. He experienced teething pains, and he needed to eat and sleep. He experienced real temptation to sin, more fully than has any other human because he resisted it to the last. He bore the sorrows of life in a world filled with suffering and war and death. He was in everything the word means &lt;em&gt;human&lt;/em&gt;. As the author of Hebrews puts it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since therefore the children share in flesh and blood, he himself likewise partook of the same things, that through death he might destroy the one who has the power of death, that is, the devil, and deliver all those who through fear of death were subject to lifelong slavery. For surely it is not angels that he helps, but he helps the offspring of Abraham. Therefore he had to be made like his brothers in every respect, so that he might become a merciful and faithful high priest in the service of God, to make propitiation for the sins of the people. For because he himself has suffered when tempted, he is able to help those who are being tempted. (Hebrews 2:14–18)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We share in flesh and blood; he shared in flesh and blood. He became like us in every respect—not partially, not in some respects, but in every respect. He suffered when he was tempted; the lures and draws of the world did not simply pass by him without any challenge whatsoever. He took from Mary &lt;em&gt;everything&lt;/em&gt; about humanity.&lt;/p&gt;
&lt;p&gt;This matters because, as the Fathers pointed out, what he has not assumed has not been redeemed. Redemption is more than (though of course not less than) propitiation for sins. It is the re-uniting of humanity with God, so that all the myriad ways in which human nature has been broken may be set once again how it ought to be. It is the restoration of &lt;em&gt;all&lt;/em&gt; the things that were broken in humanity by the Fall. There is no part of humanity that was not broken by the Fall, no part that does not need restoration, no part that was not cut off from fellowship with God. Thus, there is no part of humanity that is not in need of redemption, and so anything the Son did not take up of our humanity when he became Jesus the Christ is still broken.&lt;/p&gt;
&lt;p&gt;If Jesus had only the mind of God and not a human mind, then our minds are still unredeemed. If Jesus’ body was not the Son’s body but a drone-like extension of his will, then our minds remain unredeemed. If Jesus’ will was not a human will but purely and only a divine will, then our wills remain unredeemed. In each case, if Jesus was not both God and man in his nature, we are lost. In this sense, then, few things are of more theological import than the nature of the incarnation. The cross and resurrection, powerful though they are, do not have their intended effect of redeeming lost women and men unless the Incarnation was the complete joining of God and man in Jesus. And so: praise be to God! For when Jesus took his flesh from Mary, he took up humanity whole and entire, leaving nothing out, and joined it with his deity whole and entire, leaving nothing out. So now we through him participated in the divine nature (2 Peter 1:4), just as he participated in human nature.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Adam's Sin and Our Death</title><link href="http://www.chriskrycho.com/2014/adams-sin-and-our-death.html" rel="alternate"></link><published>2014-03-05T15:00:00-05:00</published><updated>2014-03-05T15:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-05:/2014/adams-sin-and-our-death.html</id><summary type="html">How exactly human beings' guilt relates to Adam's guilt is a question of no small theological import, and it has unsurprisingly been the topic of much theological discussion---not to say debate---over the past many hundreds of years.</summary><content type="html">&lt;p&gt;How exactly human beings’ guilt relates to Adam’s guilt is a question of no small theological import, and it has unsurprisingly been the topic of much theological discussion—not to say debate—over the past many hundreds of years. The central passage is Romans 5:12–14:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Therefore, just as sin came into the world through one man, and death through sin, and so death spread to all men because all sinned—for sin indeed was in the world before the law was given, but sin is not counted where there is no law. Yet death reigned from Adam to Moses, even over those whose sinning was not like the transgression of Adam, who was a type of the one who was to come.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The basic historic, orthodox&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; views of this position may be summarized as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All humans are guilty of Adam’s sin because they were in his loins when he sinned, and so have not only been contaminated with his sinful nature but also actively sinned when he sinned, and so are guilty and under judgment of death from their very conception—a position most famously and forcefully articulated by Augustine.&lt;/li&gt;
&lt;li&gt;All humans are born guilty of Adam’s sin because he acted as the federal head of the human race and so we are imputed guilty in him, just as when we partipate in the humanity of the new federal head of humanity—Jesus Christ—his righteousness is imputed to us. In this view, humans are born subject to the punishment of sin (including death) because all of us are &lt;em&gt;counted&lt;/em&gt; guilty in Adam, just as we experience the blessings of holiness when in Christ because we are &lt;em&gt;counted&lt;/em&gt; righteous in him (the historic Reformed view).&lt;/li&gt;
&lt;li&gt;All humans are born innocent of Adam’s guilt, but by dint of descent from him have the same corrupted sinful nature he did, and therefore all &lt;em&gt;do&lt;/em&gt; sin and incur guilt before a holy God. Furthermore, as Adam’s descendants, all are born separated from God and therefore mortal. In this view, humans are born innocent of guilt but inevitably sin because of their fallen humanity and die because of their separation from God. This is the view articulated by the Baptist Faith and Message 2000.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most basic logic of the passage seems to run most closely in line with this last articulation. Paul argues that “sin came into the world through one man, and death through sin, and so death spread to all men because all sinned”. While Augustine and the Reformers both took this latter phrase to mean “all sinned &lt;em&gt;in Adam&lt;/em&gt;” it must be recognized that the idea that all sinned “in Adam” is foreign to the text. Indeed, the sentence that follows immediately on the heels of this first declaration suggest that it is individuals’ sins committed in their own lives, and not Adam’s sin, that is in view here. Otherwise, the distinction between the sins that some committed before the law came and the sins that others committed after the law came makes little sense. So likewise does the distinction between Adam’s sin and that of those who followed him, even those whose sin was not like his.&lt;/p&gt;
&lt;p&gt;The most significant textual challenge to this understanding comes in Paul’s statement that “death spread to all men because all sinned”—a statement that is hard to reconcile with the notion of the lack of conscious sin in infants or the mentally handicapped. Certainly many humans die in infancy, and indeed many die &lt;em&gt;in utero&lt;/em&gt; long before the cognitive ability to make any choice whatsoever has developed. Thus, there is at least some sense in which Paul’s argument entails the death of human beings who have not yet come under condemnation for their own sin because of Adam’s sin.&lt;/p&gt;
&lt;p&gt;None of the views outlined above resolve this tension perfectly. The Augustinian view seems overly bound up in Augustine’s views on sexual intercourse as the means of the transmission of sin to human nature. The federal headship view places more emphasis on the idea of imputation than this passage seems to support, but deals forthrightly with the issue of death in the lives of those who have committed no sins. The idea that humans are born innocent of specific guilt but subject to a sin nature that leads inevitably to sin seems to do justice to the basic flow of Paul’s argument, but struggles with the application of death to those who have not sinned.&lt;/p&gt;
&lt;p&gt;Integrating the latter two options seems the best solution. People die because Adam corrupted human nature, and all participate in his corrupted human nature—a nature separated from the fellowship with God essential to human immortality—unless united to a &lt;em&gt;different&lt;/em&gt; human nature. People are guilty for their own sins, not for Adam’s, but they die because they share Adam’s basic nature, which came out of his guilt. In due time, they themselves sin they &lt;em&gt;earn&lt;/em&gt; the death in which they already shared by dint of their broken humanity. Even this solution, it must be admitted, remains somewhat messier than we might like, but it is to be preferred as best dealing with all the evidence before us.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I leave aside non-orthodox positions such as the Pelagian view that people are born able to live perfectly righteous lives, with uncorrupted natures, which runs against the clear teaching of Scripture that all sin and moreover that all &lt;em&gt;inevitably&lt;/em&gt; sin because of the fallenness of our humanity.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>The Name of Sin</title><link href="http://www.chriskrycho.com/2014/the-name-of-sin.html" rel="alternate"></link><published>2014-03-05T14:30:00-05:00</published><updated>2014-03-05T14:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-05:/2014/the-name-of-sin.html</id><summary type="html">Sin is described in various ways in the Old and New Testaments, and these various descriptions and names tell us much about how the authors of the Bible conceived of the power than enslaves us apart from Christ.</summary><content type="html">&lt;p&gt;Sin is described in various ways in the Old and New Testaments, and these various descriptions and names tell us much about how the authors of the Bible conceived of the power than enslaves us apart from Christ.&lt;/p&gt;
&lt;p&gt;The Old Testament has several terms its authors often use to describe the broad concept of sin:&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;‘avah&lt;/em&gt;, meaning “bent” or “crooked”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;‘aval&lt;/em&gt;, which includes the idea of a lack of integrity, so is often given as “iniquity”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;‘avar&lt;/em&gt;, meaning “to cross over” or “transgress”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ra‘&lt;/em&gt;, meaning “the rule of evil”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ma‘al&lt;/em&gt;, meaning “breach of trust”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pasha‘&lt;/em&gt;, meaning “to revolt” or “refuse subjection to a rightful authority”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From these we see that humanity’s brokenness before God in the Old Testament was often conceived of in terms of doing things the wrong way, or in rejection of the rightful authority, or a mix of the two. Rebellion against the creator and his created order are essential ingredients of the concept of sin for the Old Testament authors. To do evil is to be in rebellion against the right way God established for things to be done, to reject his &lt;em&gt;shalom&lt;/em&gt; and replace it with destruction and disharmony.&lt;/p&gt;
&lt;p&gt;The most common term for sin in the Old Testament, however, and the one usually translated into the English “sin” is &lt;em&gt;chatha&lt;/em&gt;, meaning “to miss the mark”. Sinning was thus not necessarily always a matter of active, willful rejection of God. It was also simply failing, by dint of corrupted human nature, to do as God called humanity to do, in any and all spheres of life. Sin was thus a pervasive and corrupting influence on &lt;em&gt;all&lt;/em&gt; of human existence, not only on those who were consciously rebelling against God.&lt;/p&gt;
&lt;p&gt;Unsurprisingly, the New Testament picks up on many of these same ideas. Though the specific terms used have different semantic ranges than those in the Old Testament, as a group they cover much of the same territory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;parabasis&lt;/em&gt;, “the transgression of a boundary”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;parakoe&lt;/em&gt;, “disobedience to a voice”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;paraptoma&lt;/em&gt;, “falling where one should have stood upright”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;agnoema&lt;/em&gt;, “failing to know what one should have known”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;hettema&lt;/em&gt;, “diminishing what should have been fully rendered”&lt;/li&gt;
&lt;li&gt;&lt;em&gt;anomia&lt;/em&gt;, failing to observe a law&lt;/li&gt;
&lt;li&gt;&lt;em&gt;plemmeleia&lt;/em&gt;, “a discord in the harmonies of God’s universe”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To the Old Testament range, they add this final notion of discord in the created order—a concept that was present in the Old Testament, to be sure, in the notion of lost &lt;em&gt;shalom&lt;/em&gt;, but which was not so directly expressed. Again, as in the Old Testament, these emphasize both failure to do and active rejection of what is right. And, as in the Old Testament, the New Testament authors’ concept of sin is most commonly expressed in a single word meaning “missing the mark”: &lt;em&gt;hamartia&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This congruence between the Old and New Testament views of sin emphasizes the fundamental unity between the various authors’ understanding of the issues at stake. Sin is everything about humanity’s failure to follow God’s ways and live in accord with his design for the universe. It encompasses the whole range of human foibles, from accidental failure and ignorance to the kind of rebellion that shakes its fist at the heavens or boldly (and foolishly) proclaims that there is no God. Sin is getting it wrong—or, to put it another way that better captures the breadth of Scriptural language on the issue, not getting it &lt;em&gt;perfectly&lt;/em&gt; right, for whatever reason.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;List drawn from Stanley Grenz, &lt;em&gt;Theology for the Community of God&lt;/em&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>In the Day That You Eat of It</title><link href="http://www.chriskrycho.com/2014/in-the-day-that-you-eat-of-it.html" rel="alternate"></link><published>2014-03-05T14:00:00-05:00</published><updated>2014-03-05T14:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-05:/2014/in-the-day-that-you-eat-of-it.html</id><summary type="html">God told Adam that if he ate of the tree of the knowledge of good and evil he would die on that day. Since Adam did not physically die that day, God must have made a mistake, lied, changed his mind—or been speaking of something other than physical death.</summary><content type="html">&lt;p&gt;When God placed Adam in the Garden of Eden, he told him he could eat freely of any fruit in the garden except one: the tree of the knowledge of good and evil. If he ate from that tree, however, he would die the very day he ate of it (Genesis 2:17). When, in Genesis 3, Adam and Eve ate the fruit of the tree of the knowledge of good and evil, however, they did &lt;em&gt;not&lt;/em&gt; die—at least, not physically. Indeed, Adam lived to be over nine hundred years old.&lt;/p&gt;
&lt;p&gt;What, then, did God mean when he told Adam that he would sure die the very day he ate of the tree? Did he lie, or make a mistake, or change his mind after the fact? Plainly put, no: none of these are true. Rather, all of them mistake the nature of the death entailed in God’s word to Adam. The death Adam immediately experienced was not physical death but spiritual death. Physical death was a consequence—a symptom, as it were—of his spiritual death.&lt;/p&gt;
&lt;p&gt;This spiritual death was multifold, and we see the various elements of it traced out in the explanation of the fall given in Genesis 3. First of all came separation from God. Rather than being in right relationship with the creator, Adam now needed restoration. Whereas he had enjoyed fellowship and relationship with his maker, now Adam experienced fear at the thought of encountering him, so that he hid himself when God came walking in the garden in the cool of the day. The rest of the Old Testament traces this theme out in great detail; it is constantly asking the question, “How may these unrighteous people come before a holy God?”&lt;/p&gt;
&lt;p&gt;Second, God removed Adam from the means of grace he had supplied to sustain his mortal body. He had provided a tree of life from which Adam could eat so that his body would go on living without fail. After the fall, Adam was removed from this supply, and so his body began to fall apart. He began to experience the first phase of physical death: aging and decay. He no longer had access to the supernatural sustenance he required not to die.&lt;/p&gt;
&lt;p&gt;Third, he immediately experienced relational brokenness. The previously holy and mutually delightful relationship he had experienced with his wife would now be characterized by mutual blame and recriminations. Likewise, his sons would not be loving brothers: one would kill the other. No more would he live in a world characterized by peace and harmony, but one shaped by conflict and war.&lt;/p&gt;
&lt;p&gt;Of all of these, though, it was the first that was most important and deepest. Adam’s separation from God was at the root of all the other problems he now faced. It was the lack of God’s spirit in him that led to his physical death. It was the lack of God’s presence in their midst, and the brokenness of his image in them, that led men and women to be in conflict rather than mutually supporting one another. With this separation came a warp in the character of humanity that comprised the final part of Adam’s immediate death: no more would his will be ready to obey God. Instead, he (and all his descendants) would be quick to turn aside to go against the grain of God’s universe. Given the opportunity, all would sin, and no one would turn away from sin without God’s intervention.&lt;/p&gt;
&lt;p&gt;Thus, Adam &lt;em&gt;did&lt;/em&gt; experience death the very day, indeed the very moment, that he ate of the tree of the knowledge of good and evil. The death was more profound and more horrifying than physical death alone would have been, though, because it was a death that stretched to every point of his life, from his family and the tasks with which God had entrusted him, to his very connection with God. Everything became broken in him, and he no longer knew God. In gaining the knowledge of good and evil, he lost the knowledge of the one of whom knowledge matters most.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Call and Response</title><link href="http://www.chriskrycho.com/2014/call-and-response.html" rel="alternate"></link><published>2014-03-04T23:50:00-05:00</published><updated>2014-03-04T23:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-04:/2014/call-and-response.html</id><summary type="html">The ways in which the Bible draws on itself are sometimes astounding. Psalm 53 and Romans 1–3 play off each other in beautiful, hopeful, helpful ways.</summary><content type="html">&lt;p&gt;The ways in which the Bible draws on itself are sometimes astounding. A case in point: as is so often the case in my readings, the New Testament reading seems almost as though drawing explicitly on the Old Testament reading. I should note: I am not following a lectionary or any particular plan, so it is not as though this is an intentional thing. Indeed, my reading plan right now is basically: Psalms, Proverbs, wherever I need to be reading for my Old Testament survey class, and wherever I feel like reading in the New Testament. Not particularly complicated! The reason is simpler than a formal plan: it is that the authors were aware of each other, and later authors clearly drew quite consciously on the material left behind by those who went before them.&lt;/p&gt;
&lt;p&gt;A case in point: Romans 1–3 and Psalm 53 both show us the state of humanity quite clearly. They get there in different ways, of course. The Psalm arrives by way of poetic rhythm and the steadily building refrain that there are those who reject God, culminating in the expectation of judgment on the enemies of God and blessings for his people (typical enough themes of the Psalms, in some ways.) In his letter to Rome, Paul builds up this notion by carefully measured argument (which is not to suggest any lack of &lt;em&gt;verve&lt;/em&gt; in said argument—this is Paul we are talking about!) until he comes to the oft-cited and less-often-really-grasped reality that “all have sinned and fall short of the glory of God” (Romans 3:23).&lt;/p&gt;
&lt;p&gt;What was most striking about Psalm and epistle alike to me was not only their congruity on the state of humanity, but also their agreement on the answer to that problem. (This is not &lt;em&gt;surprising&lt;/em&gt;. Just &lt;em&gt;striking&lt;/em&gt;. Note well the difference between the two!) Both look not to human accomplishment or restitution for undone deeds and deeds that ought to have been left undone, but to the God who can save his people. The Psalmist cried out, praying, “Oh, that salvation for Israel would come out of Zion!” (Psalm 53:6). Paul answers:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But now the righteousness of God has been manifested apart from the law, although the Law and the Prophets bear witness to it—the righteousness of God through faith in Jesus Christ for all who believe. For there is no distinction: for all have sinned and fall short of the glory of God, and are justified by his grace as a gift, through the redemption that is in Christ Jesus, whom God put forward as a propitiation by his blood, to be received by faith. This was to show God’s righteousness, because in his divine forbearance he had passed over former sins. It was to show his righteousness at the present time, so that he might be just and the justifier of the one who has faith in Jesus.&lt;/p&gt;
&lt;p&gt;Then what becomes of our boasting? It is excluded. By what kind of law? By a law of works? No, but by the law of faith. For we hold that one is justified by faith apart from works of the law. Or is God the God of Jews only? Is he not the God of Gentiles also? Yes, of Gentiles also, since God is one—who will justify the circumcised by faith and the uncircumcised through faith. (Romans 3:21-30)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Salvation &lt;em&gt;did&lt;/em&gt; come for Israel, from Israel, but not only to Israel. Salvation came also to the nations. For that, I am profoundly grateful: &lt;em&gt;I&lt;/em&gt; am the nations, as is almost everyone reading this. We stood condemned under the law of our conscience just as the Jewish people stood condemned by the law God had given them. All of us stood in desperate need of intervention, and so God intervened. All peoples sin, and all peoples&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; are justified by God’s grace. God is perfectly just, and he does not just overlook sin. He judges it. But he has judged it &lt;em&gt;in Christ&lt;/em&gt;, and not in you or me.&lt;/p&gt;
&lt;p&gt;Hallelujah.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The plurals here are important. It is very different to say that all &lt;em&gt;peoples&lt;/em&gt; will be saved than it is to say that all &lt;em&gt;people&lt;/em&gt; will be saved.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Wisdom From God</title><link href="http://www.chriskrycho.com/2014/wisdom-from-god.html" rel="alternate"></link><published>2014-03-03T20:55:00-05:00</published><updated>2014-03-03T20:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-03-03:/2014/wisdom-from-god.html</id><summary type="html">The famous admonition in Proverbs 3 to trust Yahweh and not to lean on one's own understanding is one of the lynchpins of the book.</summary><content type="html">&lt;p&gt;Proverbs 3, as part of the first third or so of the book focused on laying out the two paths which the remainder of the book traces out in greater detail, highlights the value of wisdom and gives the first few details as to what it looks like to walk in wisdom. First and foremost, wisdom is a matter of walking with Yahweh, in accord with his revelation of himself. Verses 3–4 make this abundantly clear, echoing as they do Moses’ words to Israel in giving them the law. Just as the people of God were to bind his law on their bodies and their hearts, so the author of the Proverbs exhorts his son to remember “steadfast love and faithfulness”—the very attributes with which Yahweh characterized himself in that climactic moment on the mountain in &lt;cite class="bibleref"
title="Ex 34.6"&gt;Exodus 34&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;So although some scholars have asserted that the Proverbs (and indeed the rest of the literature) developed totally separately from the Law of Israel, such a proposition looks to me more like wishful thinking on the part of secularists than an accurate acknowledgement of the shape of the text. Proverbs is not separate from the Torah. It is &lt;em&gt;commentary&lt;/em&gt; on the Torah. Indeed, there is no part of the moral Law given to Israel that does &lt;em&gt;not&lt;/em&gt; come up for discussion in the course of the book. Worshipping Yahweh is front and center. Murder and adultery both come in for repeated admonition. Rejection of not only covetousness and envy but also of the roots beneath them is pervasive. To put it as Dr. Heath Thomas did in my Old Testament class several weeks ago: the Torah told Israel &lt;em&gt;what&lt;/em&gt; to do, and the Proverbs taught them &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So Proverbs 3 sits as part of this project. Its famous admonition to trust Yahweh and not to lean on one’s own understanding is one of the lynchpins of the book.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; The whole book must be taken in light of this admonition. Human wisdom is not God’s wisdom.&lt;/p&gt;
&lt;p&gt;It is no coincidence that the author of the book turns almost immediately from exhorting his audience to trust in Yahweh rather than in human wisdom to a picture of divine wisdom. Nor is it mere happenstance that he includes the notion that Yahweh created the earth &lt;em&gt;by&lt;/em&gt; wisdom and established the heavens &lt;em&gt;by&lt;/em&gt; understanding.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; This is essential to understanding the shape and argument of Proverbs. God made the world to work in a certain way, and we either walk in that way or we do not. The way we have chosen—our broken, sinful path—is not in line with the way the universe was designed. The way he has set before us—the way of reconciliation in Christ Jesus—is the way of shalom. And Proverbs thus is a guide for the Christian for what it means to follow Christ. It is the light to our path as we seek to keep God’s law, recognizing that he who made all things has also shown us how to walk in line with the way he made those things—indeed, with how he made &lt;em&gt;us&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is why we should not lean on our own understanding: because it is not only flawed, but forever incomplete. Even when we are sanctified—perhaps &lt;em&gt;especially&lt;/em&gt; when we are sanctified—we will not lean on our own understanding, but rest in the wisdom of the one who &lt;em&gt;is&lt;/em&gt; wisdom, and who shaped the universe to his wisdom.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;And, I would note, the key to understanding the entire book of Ecclesiastes. If we take Proverbs 3:5–8 as a guide and then we read Ecclesiastes, the problem that &lt;em&gt;Qoheleth&lt;/em&gt; had becomes clear rather quickly, and then is reiterated throughout that book: the Preacher trusted his own wisdom instead of God’s. Proverbs is the foundational text for biblical wisdom, and other wisdom books must be understood in light of it.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It is impossible not to note the connection that New Testament authors made to this concept in Christ, from John’s description of Jesus as the &lt;em&gt;Logos&lt;/em&gt;—which has in its semantic range not only the idea of “word” but of “reason”—to Paul’s straightforward declaration that “Christ Jesus… became for us wisdom from God” (1 Cor. 1:30), and to the New Testament’s oft-repeated refrain that Christ was the agent of creation (cf. Col. 1:16, Heb. 1:10–12, 2:10).&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>A Broken and Contrite Heart</title><link href="http://www.chriskrycho.com/2014/a-broken-and-contrite-heart.html" rel="alternate"></link><published>2014-02-27T07:40:00-05:00</published><updated>2014-02-27T07:40:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-27:/2014/a-broken-and-contrite-heart.html</id><summary type="html">Psalm 51 is often taken as a model for our own prayers of repentance. It is that, but it is much more: it is the self-revelation of God—and it is amazing.</summary><content type="html">&lt;p&gt;Most often when reading through the Psalms in the past, I have taken them primarily as a model for my own interactions with God—not least when coming to Psalms like Psalm 51. Here, David’s extended prayer of repentance and supplication to God has long seemed a good model for my own prayers of like kind, and so it is—but there is more to see in this passage than a model for us. While the question, &lt;em&gt;Is there something to imitate (or something &lt;/em&gt;not* to imitate) in this passage?* is a good one, there is always another fruitful question to ask of any text in the Bible: &lt;em&gt;What does this tell us about the person and nature of God himself?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It can often be easy to let this question fall aside, and not only in the Psalms. The temptation to miss this central issue in Scripture is no less strong when working through narratives like those in Acts. In both cases, however, we must remind ourselves that the scriptures are not merely the record of man’s response to God: they are God’s revelation of himself to man. That distinction will prevent us from running off in all sorts of unhelpful directions.&lt;/p&gt;
&lt;p&gt;From Psalm 51, I learned today not only what a contrite response to God looks like, but many things about the character of God himself. First and foremost, in inspiring the editor of the Psalms to place this particular song of repentance in the Bible at all, God emphasizes to us the need for real repentance. This theme is doubly clear given the organization of the Psalms. David says here just as Asaph had said in Psalm 50: God does not delight in burnt offerings in and of themselves, but he does delight in hearts that worship God (cf. Psalm 50:8–12, 51:16–17). In fact, the two Psalms together make it abundantly clear that God detests sacrifices offered &lt;em&gt;without&lt;/em&gt; the right heart—a theme that appears time and again not only in the Psalms but also throughout the Prophets. God is not the sort of being who is appeased by getting fragrant smoke or the scent of barbecue in his nostrils.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; He is instead the kind of being who is pleased by genuine repentance—turning from evil to righteousness, and by righteousness we must mean dependence on him.&lt;/p&gt;
&lt;p&gt;The Psalm also draws forth several more salient points about the character of God in the structure of the prayer. If God calls us to imitate this prayer, as indeed he does, then it is because it speaks rightly and reflects right thought about him. So we can take away from it that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;he has mercy on people according to his steadfast love, and out of that mercy he “blots out” our transgressions (Ps. 51:1,9)&lt;/li&gt;
&lt;li&gt;he washes people of iniquity and cleanses us from our sin—not only &lt;em&gt;forgiving&lt;/em&gt; our sin, but also &lt;em&gt;removing&lt;/em&gt; it from us (Ps. 51:2,7)&lt;/li&gt;
&lt;li&gt;he is the one against whom all sin finally is committed—even our sins against others are also sins against him (Ps. 51:4)&lt;/li&gt;
&lt;li&gt;he is (and ought to be seen as) fully justified in his words&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and blameless in his judgment—that is, that the way he rules and judges are completely right, and no one can have cause to find fault with them (Ps. 51:4)&lt;/li&gt;
&lt;li&gt;he delights in truth in the depths of our souls, and by implication hates hypocrisy (Ps. 51:6)&lt;/li&gt;
&lt;li&gt;he is the source of wisdom (Ps. 51:6)&lt;/li&gt;
&lt;li&gt;he is the source of any joy and gladness we have, &lt;em&gt;especially&lt;/em&gt; when we confront our own sin (Ps. 51:8,12)&lt;/li&gt;
&lt;li&gt;he is the one who can and does give us clean hearts and right spirits where we have fouled our own hearts and broken our spirits (Ps. 51:10)&lt;/li&gt;
&lt;li&gt;he may be far from us and may take his Spirit from us, but he desires that we be near to him and filled with his Spirit (Ps. 51:11)&lt;/li&gt;
&lt;li&gt;he upholds us (Ps. 51:12)&lt;/li&gt;
&lt;li&gt;he delivers us from guilt (Ps. 51:14)&lt;/li&gt;
&lt;li&gt;his goodness ought to be proclaimed to others and he ought to be praised (Ps. 51:13,14–15)&lt;/li&gt;
&lt;li&gt;he does not despise broken-heartedness or contrition—as did, say, the Greek philosophers (Ps. 51:17)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, the end of the Psalm highlights that personal repentance has corporate consequences, and so reminds us that God’s work in our lives is not about us alone. He is at work in his people. His work in restoring David impacted Zion/Jerusalem. David’s prayer did not stop with his own being set in right relation with God, but extended to the people of God being in right relation with God as well. The king &lt;em&gt;ought&lt;/em&gt; to have such a concern for his people—and here we have a pointer to the greater king who not only had such a concern but who achieved it himself once and for all.&lt;/p&gt;
&lt;p&gt;Glory to God, and thanksgiving to him for his self-revelation.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;To be sure, the Old Testament sacrificial system did please God—he instituted it!—and it culminated in the sacrifice of God the Son on our behalf. But as the author Hebrews makes clear: the burnt offerings of the Old Testament were never sufficient to save, and were always meant to point to something greater than themselves. They were present to teach the Israelites (and us) the necessity of God’s salvation, and to point to the greater sacrifice to come.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Probably including his law and his decrees about life.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Joyfully Humbling</title><link href="http://www.chriskrycho.com/2014/joyfully-humbling.html" rel="alternate"></link><published>2014-02-26T19:55:00-05:00</published><updated>2014-02-26T19:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-26:/2014/joyfully-humbling.html</id><summary type="html">The book of Acts is joyfully humbling. It is convicting of the need for deeper faith, and it is convincing of the need to depend on God.</summary><content type="html">&lt;p&gt;Watching the story of the book of Acts unfold is simultaneously incredibly challenging and incredibly encouraging. The book is challenging because it shows Christians facing extraordinary challenges and committing to proclaim Christ no matter the cost to themselves. (In these chapters, for example, Paul is dragged outside the city and stoned, after which he gets up and goes on proclaiming the gospel.) So often I find myself wishing that even the ordinary trials of my life would pass more quickly and am all too quick to complain about them (internally even when I am too socially savvy to do so out loud). Looking at Peter sitting in prison, fully expecting to die at the hands of Herod just as his master had, or at Paul and Barnabas nearly everywhere they went, I am challenged to grow deeper in my own faith and my own commitment to Christ. I am convicted that I ought to complain less and praise God more, that I ought indeed to be thankful to God for the opportunity to show that I value him more than the passing comforts and pleasures of this world (even as I offer heartfelt lament to him at the brokenness of this world).&lt;/p&gt;
&lt;p&gt;At the same time, the record of Acts is encouraging because it is abundantly clear throughout the book that the church advanced because the Spirit of God was empowering otherwise ordinary men and women to do great things for him. As Paul himself put it to a crowd who tried to worship him and Barnabas, “We are also men!” (Acts 14:15). As extraordinary as the faith these men and women demonstrated was, they were just people like you and me who God used. This is encouraging looking at myself, and looking around at the state of the church. Though we are all frail and broken, often quick to seek the world’s favor on the one hand and insular and unwilling to engage the lost on the other, hesitant and fainting in our proclamation of the gospel, hungry for men’s affirmation over God’s, little in faith, weak or inarticulate in speech, insufficiently thoughtful, unkind and sometimes overly politic, licentious and legalistic—still God can use us, and still it is ultimately he who saves and not we. Paul had his sharp edges, Peter his fear of man, and the early church no small number of legalistic ascetics and licentious antinomians, but God was at work nonetheless. His Spirit drew people to Christ through these earthen vessels, and he is doing the same today. God uses us in spite of our foibles, and in truth sometimes he uses us in the particular ways he does because our foibles highlight that it is he and not we who are really at work.&lt;/p&gt;
&lt;p&gt;In short, then, the book of Acts is joyfully humbling. It is convicting of the need for deeper faith, and it is convincing of the need to depend on God. Both of these are cause for joy, though. Deeper faith and greater commitment to make much of Christ will bear great fruit in our lives and in the world around us when it is coupled in greater dependence on the Spirit of God to work rather than on our own techniques. Hallelujah. Go and make disciples.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Wisdom Literature and Death</title><link href="http://www.chriskrycho.com/2014/wisdom-literature-and-death.html" rel="alternate"></link><published>2014-02-25T21:30:00-05:00</published><updated>2014-02-25T21:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-25:/2014/wisdom-literature-and-death.html</id><summary type="html">Psalm 49 is wisdom literature, and it spends quite a bit of its time on death—but it also points us to hope in God's salvation.</summary><content type="html">&lt;p&gt;The Psalms contain a remarkable breadth of material. They range from Messianic and &lt;a href="/2014/the-city-of-god.html"&gt;Zionic&lt;/a&gt; songs to hymns of ovation and from laments to songs of Ascent. And they include, as here in Psalm 49, wisdom literature not so different from that which we find in Proverbs or Job or Ecclesiastes. Life is brief, these sons of Korah remind us, and when we come to the end of it, we can take nothing with us. No accumulated wealth, no pomp or prosperity, can pass death’s forbidding gates.&lt;/p&gt;
&lt;p&gt;It is especially striking that this comes as part of the Psalmists’ answer to the question of how to respond to the apparent victories of cheaters and evildoers in the world around them. The very point that so perplexed the author of Ecclesiastes—that righteous and unrighteous men alike die when all is said and done—is here a point of comfort to the Psalmists. It is as if the same reality, understood differently, carries with it an entirely different meaning. And so it is. We have here one of the keys to understanding the way that the Scriptures teach us to think about the world in which we live. It is not only that the righteous and the unrighteous both die, coming sometimes without any judgment in this life to the end of their days and so passing away in seeming injustice. It is also that the injustice that they perpetrate does not and cannot endure forever; it will come to an end in the finality with which death greets all our doings.&lt;/p&gt;
&lt;p&gt;Whether that end is a cause for despair or for hope comes down to a matter of wisdom. The fool looks and says, “The wicked prosper—I shall join them!” The seemingly wise person looks and says, “The wicked prosper—let us all despair!” The truly wise person looks and says, “The wicked prosper—but not forever!”&lt;/p&gt;
&lt;p&gt;There are two notes that are all the more noteworthy in Psalm 49 for the way it otherwise fits into the context of ancient Israelite wisdom literature, and both relate to this same theme of coming death. In verses 7–9, and again in verse 15, there are words that cannot but make the attentive Christian reader think of things beyond the Old Testament’s vision of death. Verses 7–9 remind us:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Truly no man can ransom another,&lt;br /&gt;
    or give to God the price of his life,&lt;br /&gt;
for the ransom of their life is costly&lt;br /&gt;
    and can never suffice,&lt;br /&gt;
that he should live on forever&lt;br /&gt;
    and never see the pit.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;This, as I have noted, was a cause for hope for these songwriters, strange though that seems at first blush. But it also speaks to the reality we all face in a way that seemes aimed directly at the hope we see in some of the Prophets and brought fully to light in the New Testament. Someone &lt;em&gt;did&lt;/em&gt; ransom men and gave to God the price of his life, paid fully the ransom that did suffice so we might live on forever and never see the pit. No man indeed could do this. But God himself could, and did. And the Psalmists seems to have seen this coming (verse 15):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;But God will ransom my soul from the power of Sheol,&lt;br /&gt;
    for he will receive me. Selah.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is exactly what has happened to us all. God has ransomed our souls from the power of death, and he is the one who will receive us.&lt;/p&gt;
&lt;p&gt;Hallelujah.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Sufficiency and Efficacy</title><link href="http://www.chriskrycho.com/2014/sufficiency-and-efficacy.html" rel="alternate"></link><published>2014-02-25T08:30:00-05:00</published><updated>2014-02-25T08:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-25:/2014/sufficiency-and-efficacy.html</id><summary type="html">It is most appropriate to speak of Jesus' atonement as unlimited in extent but limited in effect.</summary><content type="html">&lt;p&gt;The extent of the atonement is one of the most debated topics in the history of the church for centuries. Whether Jesus Christ’s death provided substition for the sins of all people or just some has been the cause of many dissensions and denominational splits in the Protestant world ever since the Reformation. Most famously, Arminius and his followers were expelled from the Calvinistic churches over this very issue and the way they worked out their stance in other areas of doctrine.&lt;/p&gt;
&lt;p&gt;For the most part, though, what is at issue is not whether Jesus’ death was of sufficient merit to save all people. Jesus the incarnate Son of God provided a sacrifice of infinite worth, undoubtedly of sufficient worth to cover all the sins of all mankind in all of history. Rather, the question is to whom the atonement is applied and how—or, to put it differently, to whom its benefits are available. Thus, the phrases of “limited atonement” and “unlimited atonement” are best understood as referring to the availability and effect of the atonement, &lt;em&gt;not&lt;/em&gt; to its value.&lt;/p&gt;
&lt;p&gt;Second, it must be recognized that all orthodox Christians affirm that the effects of the atonement are limited in at least one important sense: not all people are redeemed, and therefore not all people benefit from the atonement of Christ. To put it as many have before, all orthodox believers affirm that the atonement was “sufficient for all, but efficient for some,” for if it was “efficient” for all, then all would be saved. (To affirm any lesser effect is to diminish the atonement. This is not to say that there may not be other, broader effects of Christ’s death on the cross—e.g. the notion of prevenient grace enabling all to respond to the preached word—only that the atonement itself is not applied universally.) The question then is only who those “some” are and the terms under which the atonement is available to them.&lt;/p&gt;
&lt;p&gt;The simplest answer is simply to say, “the elect!” and have done, leaving aside the tendentious question of who is elect—but this question is precisely where the rubber meets the road on the issue of the atonement. After all, everyone agrees that the only the sins of those who believe are actually removed in Christ, regardless of how election works out. Thus, when people speak of “limited” or “unlimited” atonement, they are usually speaking of the issue of general or specific election. Does the work of Christ mean that all are equally able to hear and respond to the gospel, or does it mean that only the elect are enabled to hear and respond?&lt;/p&gt;
&lt;p&gt;I think the most faithful articulation of the matter is to speak of the atonement in three ways. First, we affirm that Jesus’ death was sufficient to atone for the sins of the world—&lt;em&gt;all&lt;/em&gt; the world. Second, we offer the atonement freely to everyone. Although the only the elect will be saved (however we understand that to play out), the Scriptures clearly enjoin us to proclaim Christ’s subtitutionary death and justifying resurrection to sinners everywhere and to urge everyone to repent and trust in him. Third, we affirm that the saving work of the atonement is applied to the sins of those who confess Christ as Savior and Lord and obey him. We need not perfectly understand or agree upon the means by which people come to confess Christ as Lord to affirm that it is only in that affirmation and obedience that one’s sins are covered in the atonement.&lt;/p&gt;
&lt;p&gt;It is thus most appropriate to speak of Jesus’ atonement as unlimited in extent but limited in effect.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Goodbye, Chrome</title><link href="http://www.chriskrycho.com/2014/goodbye-chrome.html" rel="alternate"></link><published>2014-02-24T15:20:00-05:00</published><updated>2014-02-24T15:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-24:/2014/goodbye-chrome.html</id><summary type="html">Opting people into Google Now in the browser is bad enough. Doing it when they're signed out? Beyond creepy.
</summary><content type="html">&lt;p&gt;Last week, Chrome crossed the line for me. I deleted it from my system to clean up its many hooks into my system—I searched out every trace of it I could find—and will put it back on my system only for testing websites. Why? Because it’s just too creepy now.&lt;/p&gt;
&lt;p&gt;Here’s the story: two weekends ago, I was sitting at a coffee shop working on a friend’s website, when up popped a series of Google Now OS X desktop notifications from Chrome, informing me of the weather, a package having recently shipped, and so on.&lt;/p&gt;
&lt;p&gt;There were just two problems with this:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;I never gave Chrome permission to do anything of the sort.&lt;/li&gt;
&lt;li&gt;I was not signed into Chrome or any Google service at the time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Number 1 is bothersome. Number 2 is so far beyond bothersome that I took the nuclear option. Let’s walk through them.&lt;/p&gt;
&lt;p&gt;Google apparently decided to start opting people into Google Now on the Chrome 33 Beta. Opting people into anything new is nearly always a bad idea in my view; opting someone into something that actively integrates with email, calendar, etc. without asking them is just creepy. Now, full disclosure: I had previously granted Google access to some of this data for Google Now on my Android phone (though I have since moved to an iPhone). However, as is usual for Google these days, the company took that permission in one context and treated it as global permission in all contexts.&lt;/p&gt;
&lt;p&gt;No doubt the box I checked when I gave them access to that data in the first place legally allowed them to continue touching it. That did not particularly bother me. Rather, it was the assumption that I wanted the same kind of interactions from the service in a different context. This is typical of Google —typically un-human-friendly, that is. People do different things with their phones than with their browsers, and have different expectations of what each will do. More importantly, though, even if we might &lt;em&gt;want&lt;/em&gt; our browsers to start supplying us the kinds of sometimes-valuable information that we get from Google Now (or Apple or Microsoft’s similar tools), we generally want the opportunity to make that decision. Increasingly, Google is making that decision for its users, leaving them to opt out and turn it off if they so desire. That is not a policy I particularly like. So: strike one. Or rather: strike several dozen, of the sort that had me moving away from Google’s services for quite some time— but it probably still wouldn’t have pushed me across the line to this kind of hard kill-it-with-fire mentality.&lt;/p&gt;
&lt;p&gt;What did? That would be the part where Chrome started sending me desktop Google Now notifications. Without asking me. In a browser to which I was not logged in, nor logged into any Google services.&lt;/p&gt;
&lt;p&gt;I will say that again to be clear: I was not signed into Chrome. I was not signed into any Google services in the browser. I had not allowed the browser to create desktop notifications. And it started sending me Google Now notifications for my main Google account. Worse: nothing I could do with the browser itself changed that behavior. (Unsurprising: there was no way Chrome should have been able to do that in the first place, logged out of all Google services as I was.)&lt;/p&gt;
&lt;p&gt;Goodbye, Chrome. You’re just too creepy.&lt;/p&gt;
&lt;p&gt;This was not the first time I have seen Chrome engage in behavior that does not respect its users. I have repeatedly run into cases where clearing the cache and deleting browsers… doesn’t. Cookies sometimes still stick around. Private browsing sessions inherit cookies from the main window (and sometimes vice versa). Closing a private session and launching a new one would sometimes still include cookies and cache from a previous session (bank accounts still logged in, etc.). Chrome had thus long been untrustworthy to me. But this was a bridge too far. This was not just slightly unnerving. It was creepy.&lt;/p&gt;
&lt;p&gt;Call it a bug if you like. It is likely that it was, in fact, a bug. So, most likely, were the other cases I saw above. But these are the kinds of bugs that make a browser fundamentally untrustworthy, and they are the kinds of bugs that are that much creepier coming from a company whose profit comes almost entirely from selling advertising—that is, from selling user information to advertising companies. The deal was that we trusted Google not to abuse that information. Unfortunately, that deal just keeps getting worse all the time. (Pray they do not alter it further.)&lt;/p&gt;
&lt;p&gt;I will have a copy of the browser on my system for testing purposes, but for nothing else. Goodbye, Chrome. And for that matter: goodbye, Google services. Over the course of the rest of this year, I will be moving myself completely off of all Google services (mail, calendar, etc.), with the sole exception of (non- logged-in) search. You’re just too creepy now.&lt;/p&gt;
</content></entry><entry><title>The City of God</title><link href="http://www.chriskrycho.com/2014/the-city-of-god.html" rel="alternate"></link><published>2014-02-24T07:50:00-05:00</published><updated>2014-02-24T07:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-24:/2014/the-city-of-god.html</id><summary type="html">Meditating on Zion&amp;mdash;that is, on Jerusalem both old and new&amp;mdash;does not seem at first blush a fertile ground for worship. But that is exactly where the Psalmist takes us in Psalm 48.</summary><content type="html">&lt;p&gt;As I work through the Psalms after having covered them in my Old Testament survery class, a few themes are much more apparent to me than they had been before. Notably, looking at Psalm 48, the prominence of Zion throughout the Psalms and in this Psalm in particular is striking. It is of course not Zion itself that is the cause for note and rejoicing, but the presence of Yahweh within the city. (The temple in this city is where God makes his dwelling place on earth—a striking thought!) But the city does come in for special notice because Yahweh dwells there, and does so often throughout the Old Testament.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Great is the &lt;span class="smcp"&gt;Lord&lt;/span&gt; and greatly to be praised&lt;br /&gt;
    in the city of our God!&lt;br /&gt;
His holy mountain, beautiful in elevation,&lt;br /&gt;
    is the joy of all the earth,&lt;br /&gt;
Mount Zion, in the far north,&lt;br /&gt;
    the city of the great King.&lt;/div&gt;
&lt;p&gt;(Psalm 48:1–2)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The temple of God, his dwelling place with and among us, comes up over and over again throughout the Scriptures. It is there from the very beginning, from Eden where God would walk with his people in the cool of the day. It is there in the end, in the New Jerusalem where the dwelling place of God is with man and there is no temple at all because God himself is the temple. It is here, now, in the time when the people of God have replaced a building and become a temple of living stones.&lt;/p&gt;
&lt;p&gt;The Psalmist’s call to survey Zion (Psalm 48:12–13a) does what all such calls in the Scriptures do: it points the listener to the God whose dwelling place Zion is (48:13b–14). Yahweh will establish this city forever (48:8) as a mark of his triumph over the (rebellious) nations, and as a result his name—that is, knowledge of him and his character—and his praise will fill the ends of the earth. And the end of people coming to this city will be that all will know that “this is our God, / our God forever and ever. He will guide us forever.”&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Meditating on Zion—that is, on Jerusalem both old and new—does not seem at first blush a fertile ground for worship. But that is exactly where the Psalmist has taken us. The old Jerusalem was the city that rejected the prophets and finally rejected the prophet like Moses, the promised Davidic king (a point driven home rather forcefully in Stephen’s monologue in Acts 7, which I also read today). Though it was the dwelling place of God, it was also the city that rejected God—much as Adam and Eve had done in Eden. That even so God dwelt there, that even so God dwells with us who are so often so very sinful, is nothing short of astounding. That he will someday bring down a new Jerusalem that he has made, and in which he will be both the spiritual center and the righteous ruler, is the more astounding yet.&lt;/p&gt;
&lt;p&gt;So with the Psalmist, I thank God for his city. And with the Psalmist, I look forward to the day when God shows his glory to all the earth through his city.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;And the New. But I’ll get to that.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;“Forever” here has sometimes been read as “beyond death.” There’s a striking image in the Old Testament, opaque about the fate of men and women after death as it usually is!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>On Days Off</title><link href="http://www.chriskrycho.com/2014/on-days-off.html" rel="alternate"></link><published>2014-02-23T10:30:00-05:00</published><updated>2014-02-23T10:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-23:/2014/on-days-off.html</id><summary type="html">&lt;p&gt;These past few days I have completely missed my normal writing times—no devotions, and certainly not the other few pieces I had been planning to write. This was disappointing: I have enjoyed the habit of writing regularly, and I intend to keep it up. As I have often noted …&lt;/p&gt;</summary><content type="html">&lt;p&gt;These past few days I have completely missed my normal writing times—no devotions, and certainly not the other few pieces I had been planning to write. This was disappointing: I have enjoyed the habit of writing regularly, and I intend to keep it up. As I have often noted in the past (in more blog posts on previous versions of the site than I can count, still less dig up at the moment), writing serves to focus my thoughts as little else does. Moreover, though my &lt;a href="/devotions"&gt;#devotions&lt;/a&gt; posts are not especially excellent as writing goes, the discipline of writing is like many other things: sometimes it matters most that you &lt;em&gt;do&lt;/em&gt; it more than the doing of it be particularly magnificent.&lt;/p&gt;
&lt;p&gt;Most of my running is this way. The vast majority of my runs are entirely unexceptional and become notable only in their consistency. They are not tiring and not particularly fast—for me, at least! This is an important qualification, I recognize, though one that is nonetheless closely tied to the very ordinary nature of these runs. They become interesting, and are effective, only in the aggregate. My entire training plan is built on going slowly and training the “easy” side of my physiological response to running. The effect over time is extraordinary, though: my easy runs with a toddler in a stroller today are faster than my best runs alone were a few years ago.&lt;/p&gt;
&lt;p&gt;My hope for this year is to do something the same with my writing. I do not expect that the majority of my words will be particularly elegant or well-put-together. I expect most of my posts to go largely unread and unnoticed, and that is perfectly fine with me—indeed, &lt;em&gt;more&lt;/em&gt; than fine, because I am writing them first of all as a double act of self-discipline. From those devotional posts I hope to gain not an audience but the benefit of thoughtful reflection the Scriptures I read and the helpful effect of regular writing on my &lt;em&gt;other&lt;/em&gt; writing.&lt;/p&gt;
&lt;p&gt;So when, as in the last few days, I simply cannot get to that writing because other things intrude, I have a double response. First, I recognize that this is totally all right, under the circumstances. Jaimie and I have been spending time with friends and each other, and my normal writing times in the evenings have simply been elided by those other activities. Second, though, I recognize that such things are likely to come up often, and as such am motivated to commit once again to doing this writing in the mornings as much as possible.&lt;/p&gt;
&lt;p&gt;For several weeks in the beginning of the semester this spring, I was able to get up, do my reading, and do my writing before I went to class at 8am. A few weeks ago, Jaimie’s grandmother passed away and we flew her out for the funeral, and that weekend completely tossed my habits and schedule out of alignment. Instead of my two normally scheduled tasks for the weekend (school and work), I had three—and one of them in the form of a teething toddler. The other two slipped. I have only just finally caught up, and as such I am hoping that in the week ahead I shall be able to resume my previously very effective habits of doing all these things to &lt;em&gt;start&lt;/em&gt; the day rather than to finish them.&lt;/p&gt;
&lt;p&gt;That, of course, assumes I get over this blasted cold that I seem to have caught last night… Life is a funny thing, sometimes.&lt;/p&gt;
</content></entry><entry><title>A Mighty Change</title><link href="http://www.chriskrycho.com/2014/a-mighty-change.html" rel="alternate"></link><published>2014-02-19T23:12:00-05:00</published><updated>2014-02-19T23:12:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-19:/2014/a-mighty-change.html</id><summary type="html">The work done in our hearts by the Holy Spirit is nothing short of breathtaking.</summary><content type="html">&lt;p&gt;One of the most remarkable transformations in history comes in the beginning of the second chapter of Acts. A group of obviously-still-confused men and women were gathered for prayer, and the Holy Spirit came like fire on them and set the world on its head. The epoch-making change in this group of people is shocking to consider. In Acts 1, only a few weeks earlier, these same disciples had been expecting the resurrected Jesus to restore the kingdom to Israel. This is truly marvelous: Jesus the Christ had risen from the dead, and all his teachings had still not sunk in. They still did not understand that what he was about was the restoration of &lt;em&gt;all&lt;/em&gt; things, not only the restoration of Israel. This was why they needed the Holy Spirit: although they had been given explanation after explanation, some of them incredibly clear (as to the disciples on the road to Emmaus after Jesus’ resurrection from the dead). It did not matter: they still did not understand.&lt;/p&gt;
&lt;p&gt;And then the Holy Spirit came, and as promised (see Acts 1:5 and cf. John 14ff.) the Spirit gave them understanding and wisdom like they could scarcely have imagined before. The external changes are notable in many ways: suddenly these disciples were speaking in languages they did not know and performing astonishing miracles. But the internal changes are what really tell us what happened. Peter and the others transformed from people dominated by fear to people characterized by bold confidence in the Lord—and not just any “lord”, but his Lord Jesus Christ. Likewise, whereas before they had still mistakenly been looking foran earthly rule, Peter and the others now recognized that Christ demanded allegiance no less when reigning beside his father in Heaven than he would have taking up a kingship here on earth. “Repent and believe,” they cry out to all, “and your sins will be forgiven and the Lord God will be your God.”&lt;/p&gt;
&lt;p&gt;And each of us is filled with this self-same Holy Spirit, the means of the Son’s work for the Father in the Trinity. We have in us the same spirit that raised Jesus Christ from the dead, animated the early church, and has given life to his people ever since. This is not small thing. Indeed, though we tend in intellectual Reformed circles largely to overlook the work of the Spirit, and though our Charismatic brothers tend to emphasize points that Scripture does not, we need to invest more time in understanding the Spirit and his work rightly. But in any case, we have this glorious treasure: Christ formed in us by the very means of the salvation of the world, his Spirit.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>A Commentary on the Rest of the Bible</title><link href="http://www.chriskrycho.com/2014/a-commentary-on-the-rest-of-the-bible.html" rel="alternate"></link><published>2014-02-18T23:00:00-05:00</published><updated>2014-02-18T23:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-18:/2014/a-commentary-on-the-rest-of-the-bible.html</id><summary type="html">In fact, in many ways, Revelation reads like a summary and recapitulation of the rest of the Bible, set in apocalyptic terms that herald the end of the age and the consummation of all things.</summary><content type="html">&lt;p&gt;Once again, reading the Psalms in conjunction with Revelation is a striking experience. Psalm 46 could be a meditation on the prophecies of Revelation 14– 22, in many ways… but of course, this has it backwards. It is not surprising that the Psalms (or indeed almost any other part of the Bible) should sound like a complement to Revelation when held up next to the final book. Reading through Revelation this week hammered home just how familiar John was with the rest of the Bible. Whether he knew the Pauline corpus to quote it is hard to say,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; but he certainly quotes and alludes to sayings of Jesus that are &lt;em&gt;not&lt;/em&gt; in the gospel of John but are in the other gospels, and of course his command of the Old Testament is astounding. In fact, in many ways, Revelation reads like a summary and recapitulation of the rest of the Bible, set in apocalyptic terms that herald the end of the age and the consummation of all things.&lt;/p&gt;
&lt;p&gt;Revelation can be confusing, to be sure, but after having spent several years away from the book,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and now coming back to it again much more familiar with the rest of the Bible,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; its confusing points dim in light of what is clear to me. That is: for all that John records many visions, he spends at least as much time repeating themes and statements and phrases from the rest of the Scripture, tying together what had previously been disparate elements into a unified whole. In the course of the book, I think John quotes every major prophet and references every (or nearly every) major apocalyptic image presented throughout the Old Testament and many or most of those in the New. He certainly also references Psalms and the Pentateuch; I would feel confident guessing that there are references to the historical writings and wisdom literature that I simply missed.&lt;/p&gt;
&lt;p&gt;In short, John’s command of the rest of the Scriptures is simply astounding. John was not only the recipient of visions; he was also a masterful expositor of the word of God. The revelation was given to him, I think, at least in part because he had so thoroughly learned the rest of the Bible and could rightly situate the visions he was given in the rest of salvation history. As each page fills up with quote after quote and allusion after allusion to the rest of the great book of God’s work, Revelation becomes more and more comprehensible.&lt;/p&gt;
&lt;p&gt;To be sure, some of the details remain fuzzy.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; But what comes through clearly —not least through the constant references to the rest of Scripture—is that the Lord God, the All-Powerful,&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; will in the end bring justice on the earth. He will destroy Satan and crush evil and end the cosmic rebellion against the only good and true one. He will establish righteousness and justice and peace on the earth. He will give eternal life to those who worship him. God will dwell with man. Hallelujah.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He who testifies to these things says, “Surely I am coming soon.” Amen. Come, Lord Jesus!&lt;/p&gt;
&lt;p&gt;The grace of the Lord Jesus be with all. Amen. (Revelation 22:20–21, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;At least, for this non-expert who hasn’t explicitly looked for quotes from or allusions to Paul in Revelation.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;The last time I read through Revelation was sometime in 2012, I believe, as I read through the whole Bible that year.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;I have spent a great deal of time reading and re-reading the Prophets and the Gospels over the course of 2013 and early 2014.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;As indeed at least some of them likely did to the original audience; I strongly suspect that we are not &lt;em&gt;meant&lt;/em&gt; to understand perfectly all that is shown in Revelation.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;A rendering I picked up from the &lt;a href="http://lexhamenglishbible.com"&gt;Lexham English Bible&lt;/a&gt;, and which I rather like.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>The Greater Messiah</title><link href="http://www.chriskrycho.com/2014/the-greater-messiah.html" rel="alternate"></link><published>2014-02-17T21:40:00-05:00</published><updated>2014-02-17T21:40:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-17:/2014/the-greater-messiah.html</id><summary type="html">It is nearly impossible to read Psalm 45 as a New Covenant believer in Yahweh without seeing its contents in terms of Christ and his bride, the church.</summary><content type="html">&lt;p&gt;It is nearly impossible to read Psalm 45 as a New Covenant believer in Yahweh without seeing its contents in terms of Christ and his bride, the church. That the Psalm was written with an ordinary bride for a normal king of Israel in mind is a trifle mind-boggling, in fact, given how perfectly the Psalm ends up picturing the Messianic realities in which we now live and whose final fulfillment we now await. It is, in short, a perfect picture of how the Holy Spirit superintended the composition of Scripture so that over time (and especially with the Advent of Jesus the Messiah) all the words have been filled up with more meaning.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are many Messianic poems in the Psalter, and few (if any) of them were originally written with a clear expectation of a future God-man Messiah. They speak of normal human kings—the “anointed ones” of Israel—in hopeful and prayerful terms, terms that God then filled up in himself when he came and dwelt among us.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; They speak of the aspirations of Israel that were always dashed on the rocks of human fallibility, and which were finally fulfilled by inversion in a king who died at the hands of oppressors rather than toppling them. They speak of the King who, though his reign has been inaugurated since he rose from that death, has still not put his enemies under his feet. Israel waited, and we wait.&lt;/p&gt;
&lt;p&gt;Reading the Psalm next to the Revelation given to John only makes these thematic ties more apparent. The Psalmist writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Gird your sword on your thigh, O mighty one,&lt;br /&gt;
    in your splendor and majesty!&lt;br /&gt;
In your majesty ride out victoriously&lt;br /&gt;
    for the cause of truth and meekness and righteousness;&lt;br /&gt;
    let your right hand teach you awesome deeds!&lt;br /&gt;
Your arrows are sharp&lt;br /&gt;
    in the heart of the king’s enemies;&lt;br /&gt;
    the peoples fall under you. (Psalm 45:3-5, ESV)&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;And John writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Then the seventh angel blew his trumpet, and there were loud voices in heaven, saying, “The kingdom of the world has become the kingdom of our Lord and of his Christ, and he shall reign forever and ever.” And the twenty-four elders who sit on their thrones before God fell on their faces and worshiped God, saying,&lt;/p&gt;
&lt;div class="line-block"&gt;&amp;quot;We give thanks to you, Lord God Almighty,&lt;br /&gt;
    who is and who was,&lt;br /&gt;
for you have taken your great power&lt;br /&gt;
    and begun to reign.&lt;br /&gt;
The nations raged,&lt;br /&gt;
    but your wrath came,&lt;br /&gt;
    and the time for the dead to be judged,&lt;br /&gt;
and for rewarding your servants, the prophets and saints,&lt;br /&gt;
    and those who fear your name,&lt;br /&gt;
    both small and great,&lt;br /&gt;
and for destroying the destroyers of the earth.&amp;quot; (Revelation 11:15-18, ESV)&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Anointed King that Israel was looking for will reign. He will put all his enemies under his feet. His bride will come to him in splendor, and be radiant and beautiful beyond measure. It is not exactly what the Psalmist had in mind, because it is better. So it often is in our lives, I think. We look for lesser things. We look for only what we can imagine and conceive, and our imaginations and conceptions are extraordinarily small and limited by comparison with the things of God. To be sure, in my own life I have often been limited to a very small view of God’s plans and purposes. More and more I recognize that his wisdom is greater than I can begin to grasp, and from that see the necessity of trusting and worshipping him all the more fully.&lt;/p&gt;
&lt;p&gt;Part of that is looking with expectancy to Jesus’ return—recognizing that even the truest and best longings of my heart are but the shallowest hint of what he willbring about when he returns. That the dwelling place of God will be with man, that every evil will be crushed under his justice, and that the garden will have become a glorious city where God will dwell with us and we with him? This is more than I can grasp. But I can hope, and dream, and pray: “Lord come soon.”&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;It is no coincidence that the author of Hebrews quotes Psalm 45 at length, explicitly applying vv. 6–7 to Jesus as the one who is above all others.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;“Anointed one” is, for example, the term David uses to describe Saul when explaining why he would not kill him. This was the standard term for Israel’s kings. And just like so many other things, the Spirit filled it up with far more meaning when Jesus came as &lt;em&gt;the&lt;/em&gt; Anointed One.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="devotions"></category></entry><entry><title>Martyr-Saints</title><link href="http://www.chriskrycho.com/2014/martyr-saints.html" rel="alternate"></link><published>2014-02-14T23:55:00-05:00</published><updated>2014-02-14T23:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-14:/2014/martyr-saints.html</id><summary type="html">The kingdom of heaven does not come by accident; it comes because men and women sacrifice their lives and die for the gospel.</summary><content type="html">&lt;p&gt;As we were praying this evening, I spent a few minutes praying for our brothers and sisters in North Korea. I was deeply moved by the reality that they face every day—persecution, imprisonment, death. There is nothing quite like it in the Western experience of Christianity over the last 1700 years, and little like it elsewhere in the world right now. To be sure, there is persecution that saints around the world face, throughout both the Middle and Far East especially. But North Korea is the harshest and most brutal place in the world —and there are men and women suffering and dying there for the name of Christ. So we prayed for the end of the wicked tyranny of the country’s current leadership, and for the gospel to flourish there, and for those faithful saints to be rewarded and delivered.&lt;/p&gt;
&lt;p&gt;Then I read tonight in Revelation 4–7. Two things stood out. The first I have written about before in these devotional reflections: there is a clearly articulated expectation of judgment on the eart. Chapter 6 is a fairly dreadful picture of the wrath of God poured out on a sinful world, and it stands all the more starkly for the reality tha t the majority of the content in these four chapters is &lt;em&gt;not&lt;/em&gt; on judgment, bu ton God and his people. Indeed, these chapters contain some of the most beautiful praises offered to God anywhere in Scripture.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Worthy are you to take the scroll&lt;br /&gt;
    and to open its seals,&lt;br /&gt;
for you were slain, and by your blood you ransomed people for God,&lt;br /&gt;
    from every tribe and language and people and nation,&lt;br /&gt;
and you have made them a kingdom and priests to our God,&lt;br /&gt;
    and they shall reign on the earth.&lt;br /&gt;
…&lt;br /&gt;
Worthy is the Lamb who was slain,&lt;br /&gt;
    to receive power and wealth and wisdom and might,&lt;br /&gt;
and honor and glory and blesing!&lt;br /&gt;
…&lt;br /&gt;
To him who sits on the throne and to the Lamb&lt;br /&gt;
    be blessing and honor and glory and might forever and ever!&lt;/div&gt;
&lt;p class="citation"&gt;
(Revelation 5:9b–10,12b, 13b)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Set in the midst of this, and against the backdrop of praise and judgment, is this striking image:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When he opened the fifth seal, I saw under the altar the souls of those who had been slain for the word of God and for the witness they ahd borne. They cried out with a loud voice, “O Sovereign Lord, holy and true, how long before you will judge and avenge our blood on those who dwell on the earth?” Then they were each given a white robe and told to rest a little longer, until the number of their fellow servants and their brothers should be complete, who were to be killed as they themselves had been. (Revelation 6:9–11)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The martyrs of God are asked to wait a bit longer, to be yet more patient, before God executes judgment on the earth. And why? Because the number of martyrs is not yet full. This is a shocking, challenging statement. The kingdom of heaven does not come by accident, or by those who are willing to just let it come on its own time. It comes because men and women sacrifice their lives and die for the gospel. It comes because many of our sisters and brothers over the centuries have not counted their lives more precious than Christ, but have counted the souls of the lost more valuable than their own comfort or short-term physical existence. You and I are believers because of such men and women, who have advanced the kingdom of God through the proclamation of the gospel to hard places since the time of the apostles.&lt;/p&gt;
&lt;p&gt;The very least we can do for our brothers and sisters who are helping to fill up that number is pray for them: for their ministry to be effective, for them to be delivered from death, for them to remain faithful in the face of such harsh persecution, and for their governments to cease thte oppression and the gospel to go forth in power. So shall I remembere to do going forward, Lord willing.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>The Question and Its Answer</title><link href="http://www.chriskrycho.com/2014/the-question-and-its-answer.html" rel="alternate"></link><published>2014-02-13T23:10:00-05:00</published><updated>2014-02-13T23:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-13:/2014/the-question-and-its-answer.html</id><summary type="html">Reading Revelation and Ecclesiastes side by side is like reading the answer to a question.</summary><content type="html">&lt;p&gt;Here is the great mystery of our faith:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I saw him, I fell at his feet as though dead. But he laid his right hand on me, saying, “Fear not, I am the first and the last, and the living one. I died, and behold I am alive forevermore, and I have the keys of Death and Hades.” (Revelation 1:17–18)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jesus is the one who was before all, and he is and forever will be. And Jesus is also the one who died. And Jesus is also the firstborn from the dead (Revelation 1:5)—he who died now lives again.&lt;/p&gt;
&lt;p&gt;As Jesus said of another truth of our faith: with man, these things are impossible, but with God, all things are impossible.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In Revelation 3:11, Jesus said, “I am coming soon.” Now, some take this to mean that the book is a lie; others take it to mean that Jesus came back in some mystical way and will not return physically to reign on the earth. I take it to mean that “soon” in the eyes of the Almighty who is first and last and reigns forever and ever is not exactly the same as “soon” in the eyes of feeble humans with our limited understanding. The Lord may return any day now—and so it has been these past twenty centuries. We wait expectantly, calling out in our hearts (and sometimes with our lips as well) “Lord, come soon!” And in the interval, this time between the times, we do our best to wait faithfully so that he does not come like a thief and surprise us (Rev. 3:3).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Psalm 43 serves as another reminder that the Psalms are not some haphazard collection. They were put together in the order they are for a reason. Psalms 42 and 43 are distinct, but they share a refrain and a common line. Whereas 42 functioned as a lament and stated the troubles facing the author, 43 turns and asks justice of God. The contrast is helpful. There is a time simply to let God know our sorrows and our frustrations, and then to instruct our souls to praise him in the midst of those sorrows and frustrations. There is also a time to plead with him to deliver us, and to instruct our souls to praise him as we wait for that deliverance to come. Those may seem like small distinctions, but they matter. We &lt;em&gt;know&lt;/em&gt; they matter; else the Spirit-inspired editor of the Psalms would not have placed these two here next to each other to contrast with each other in this way.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Reading the final chapter of Ecclesiastes and the first chapters of Revelation together is like reading the question and its answer all at once. Ecclesiastes 12 contains some of the most evocative language on the close of life and the vanity of this-worldly existence to be found anywhere in all the literature of all the world. It is a sad passage, meditating on the way all things fade away. Revelation 1, on the other hand, is as clear a declaration that this world is not all there is as anyone could ask. The eternal king of all rulers stands forth to declare that he—he who died and now lives again—is coming soon and will set the world aright, and those who trust in him will receive eternal rewards and even reign alongside him. The world around us is fading, it is true, but there will come a day when it is renewed, when all the things that faded blossom again into gloriously new life. The Preacher could not see that day, but that he longed to could not be clearer from the text.&lt;/p&gt;
&lt;p&gt;So together with him we say, “Lord, come soon.”&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>The God Who Is Near</title><link href="http://www.chriskrycho.com/2014/the-god-who-is-near.html" rel="alternate"></link><published>2014-02-12T22:40:00-05:00</published><updated>2014-02-12T22:40:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-12:/2014/the-god-who-is-near.html</id><summary type="html">For the authors of Psalm 42, God's salvation remained far off in many ways. For us, God's salvation has come, and we participate in him and partake of him.</summary><content type="html">&lt;p&gt;Psalm 42 comes in three parts: two statements of woe, and a refrain. It is an interesting open to the second of five “books” that make up the Psalms, and the first of the psalms of the sons of Korah. The Psalm includes many of the most evocative images in the whole book, and many of those we quote most often:&lt;/p&gt;
&lt;p&gt;Psalm 42:1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;As a deer pants for flowing streams,&lt;br /&gt;
    so pants my soul fo ryou, O God.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Psalm 42:5 (also 11, which repeeats it):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Why are you cast down, O my soul,&lt;br /&gt;
    and why are you in turmoil within me?&lt;br /&gt;
Hope in God; for I shall again praise him,&lt;br /&gt;
    my salvation and my God.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Psalm 42:7:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Deep calls to deep&lt;br /&gt;
    at the roar of your waterfalls;&lt;br /&gt;
all your breakers and your waves&lt;br /&gt;
    have gone over me.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Psalm is true to life, evocative, and profoundly moving to me. So often we confront a world in which it seems that all God’s waves have gone over us. Yet the Psalm teaches us both the right response to such circumstances (“Hope in God; for I shall again praise him”) but also about who God is. As I have noted before, the Psalms are not merely our response to God: they are also his inspired revelation of himself.&lt;/p&gt;
&lt;p&gt;He is the God upon whom we may call in such times. He is the one who “commands his steadfast love, and at night his song is with [us]” (verse 7). He is the God of our lives (verse 7 again). He is the one who alone can quench the thirst of our souls. It is his presence that will satisfy us, and nothing else. Being removed from him is death to us, though we often forget it in the callousness of life in a dead world (verses 1–2). He is the God who made and owns the waterfalls and the sea and all the lands (verses 6–7). He is the God who calls his people to go with glad shouts and songs of praise, keeping festival (verse 4). He is the God who knows our tears, even when it seems he does not, for he is the God who has &lt;em&gt;shared&lt;/em&gt; our tears.&lt;/p&gt;
&lt;p&gt;For the author(s) of this Psalm, God’s salvation remained far off in many ways. For us, God’s salvation has come, and we participate in him and partake of him. It is not only that God has given us salvation; it is that God &lt;em&gt;is&lt;/em&gt; our salvation, and for us that salvation has become quite specific. He is Jesus, the Messiah, the anointed king who does justice and righteousness and peace on the earth. When the enemies of God’s people taunt and say, “Where is your God?” (verses 3, 10), and when our lives are filled with tears and mourning (verses 3, 9), we know where our God is. He is enthroned; and seated at the right hand of that throne; and enthroned in our hearts. He is in all and through all and over all. He is near to us, even in the times when he is silent and seems far away.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Why are you cast down, O my soul,&lt;br /&gt;
    and why are you in turmoil within me?&lt;br /&gt;
Hope in God; for I shall again praise him,&lt;br /&gt;
    my salvation and my God.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Amen.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>“God is Love”</title><link href="http://www.chriskrycho.com/2014/god-is-love.html" rel="alternate"></link><published>2014-02-11T22:00:00-05:00</published><updated>2014-02-11T22:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-11:/2014/god-is-love.html</id><summary type="html">&lt;p&gt;Summary: God is love—but God is not corrupted human sentimentality. He is holy, and his love and justice run hand in hand.&lt;/p&gt;
&lt;p&gt;Our culture has a fixation on the idea that “God is love.” I remember a conversation I had the first weekend I arrived at the University of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Summary: God is love—but God is not corrupted human sentimentality. He is holy, and his love and justice run hand in hand.&lt;/p&gt;
&lt;p&gt;Our culture has a fixation on the idea that “God is love.” I remember a conversation I had the first weekend I arrived at the University of Oklahoma, most of a decade ago, in which I was discussing with others how God could possibly be a God of love and yet still judge anyone. Likewise, I had another conversation with a friend a few years later in which he argued that this statement in 1 John was the central statement of the character of God. In both cases (as in many others since), it seemed the idea was that this statement was a trump card that overruled anything that contradicted the idea of love held by those pointing to this view.&lt;/p&gt;
&lt;p&gt;There are of course many problems with the idea that “God is love” trumps everything else in the Scriptures. First of all, it is not the only statement of God’s character. Quick to mind for anyone familiar with the scriptures are other statements. Right here in the same book, we have “God is light, and in him there is no darkness at all” (1 John 1:5). And of course we have passages throughout the Bible reminding us emphatically that “Holy, holy, holy is Yahweh Almighty” (see e.g. Isaiah 6:3). So yes, God &lt;em&gt;is&lt;/em&gt; love… and he &lt;em&gt;is&lt;/em&gt; light, and he &lt;em&gt;is&lt;/em&gt; holy, and so on. Indeed, it is his holiness that comes on display throughout the Scriptures most often.&lt;/p&gt;
&lt;p&gt;But there is another problem with the idea that God’s love is somehow in tension with historic Christian ideas about sin and the need of salvation. That problem is the entire rest of the book of 1 John—and for that matter, the rest of &lt;em&gt;this verse&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyone who does not love does not know God, because God is love. In this the love of God was made manifest among us, that God sent his only Son into the world, so that we might live through him. In this is love, not that we have loved God but that he loved us and sent his Son to be the propitiation for our sins. (1 John 4:8–10)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;God’s love is not a mushy, sappy thing easily turned to overlook sins. It is the kind of love that pursues reconciliation fiercly, and which does not brook rejection lightly. It is the kind of love that dies on behalf of the beloved— but to what end? &lt;em&gt;To make propitiation for sins.&lt;/em&gt; Our sins needed to be propitiated. So yes, God is love—but God is &lt;em&gt;not&lt;/em&gt; corrupted human sentimentality. The same author who wrote that God is love half a chapter later says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whoever does not believe God has made him a liar, because he has not believed in the testimony that God has borne concerning his Son. And this is the testimony, that God gave us eternal life, and this life is in his Son. Whoever has the Son has life; whoever does not have the Son of God does not have life. (1 John 5:10b–12)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is not the sort of thing that fits nicely in a hyper-“tolerant” view of the world, in which no offense may be condemned (save perhaps condemnation). It is, however, a beautiful and magnificent picture of a God who loves so fiercely he would die to deal with his beloved’s offense, though that offense be against him. It is a picture of a God whose love does not conflict with his justice but runs hand in hand with it. It is a picture of a Savior who laid down his life for his sheep &lt;em&gt;and&lt;/em&gt; who will not lightly see that salvation scorned. It is a picture of a real God who really is reigning over all in wisdom and goodness— goodness that is not mere fondness or tolerance, but which passionately seeks the good of the whole universe, including every man and woman.&lt;/p&gt;
&lt;p&gt;Hallelujah. We have a great God.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Like His Brothers in Every Way</title><link href="http://www.chriskrycho.com/2014/like-his-brothers-in-every-way.html" rel="alternate"></link><published>2014-02-11T08:30:00-05:00</published><updated>2014-02-11T08:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-11:/2014/like-his-brothers-in-every-way.html</id><summary type="html">If Jesus could not have sinned, then he was not really like us in every way. And that&amp;mdash;to put it mildly&amp;mdash;is a really serious problem.</summary><content type="html">&lt;p&gt;Whether Jesus could have sinned or not is a question to tangle the mind. On the one hand, we affirm that he was fully human, and this affirmation binds us to affirm that he could indeed sin: all humans are capable of sinning, and apart from Jesus, all humans &lt;em&gt;have&lt;/em&gt; sinned. The author of Hebrews reminds us forcefully that Jesus was made like his brothers—which is to say, &lt;em&gt;us&lt;/em&gt;—in every respect, being tempted like them, yet without sin. On the other hand, we recognize that the Godhead is sinless and that, as James reminds us, he neither tempts nor can be tempted with evil. As with many issues relating to the Incarnation, we face the challenge of holding together both Jesus’ full deity and his full humanity. When either is lost (or even simply diminished) in order to emphasize or preserve the other, important aspects of our faith break in serious ways.&lt;/p&gt;
&lt;p&gt;Difficult (mysterious even) the question may be, but the author of Hebrews leaves little doubt. Jesus was tempted like us in &lt;em&gt;every&lt;/em&gt; way—not only in some ways, but in every way. This is an essential affirmation for the Christian faith. If Jesus could not sin, then he was not fully human, and his perfect life is unsurprising and not particularly meaningful. If he &lt;em&gt;could&lt;/em&gt; sin, then his perfect life is extraordinary and especially meaningful.&lt;/p&gt;
&lt;p&gt;At the same time, we must integrate the things that Hebrews and James (and the rest of the Scriptures) teach us. If the Godhead cannot be tempted by sin and Jesus &lt;em&gt;was&lt;/em&gt; tempted by sin, does this make Jesus somehow &lt;em&gt;not&lt;/em&gt; God? No, for this misses the rest of the witness of the New Testament, including those selfsame books. James himself calls Jesus Lord in terms that, set against a Jewish background, can only be understood to refer to God himself (see especially James 5:11, perhaps the most direct quote of Exodus 34:6 in the whole New Testament and an unmistakable reference to Yahweh God). Neither can we admit the notion that James and Hebrews disagree with each other—at least, not and maintain our affirmation of the unity of Scripture, which is a non-negotiable from where I stand.&lt;/p&gt;
&lt;p&gt;As with many things in the Trinity and the Incarnation, then, we are left making a dual (and apparently conflicting affirmation). Jesus’ humanity was perfectly capable of sinning, and his divinity was incapable of sinning. The Incarnation holds the two together in a single person, and so we affirm that Jesus could have sinned, but did not. We note, too, that he did not precisely because he did as all humans are called to do (and what glorified humans &lt;em&gt;will&lt;/em&gt; do) and perfectly trusted the Father by obeying the Holy Spirit. Jesus’ perfect life was not the domination of his humanity by his divinity, but the submission of his humanity to the divinity of the Trinity.&lt;/p&gt;
&lt;p&gt;Thus we affirm that Jesus’ not sinning on our behalf was a real moral victory, not a hollow thing we can only look at bemusedly from afar. He lived as a real second Adam, doing what the first Adam failed to do while beset by many more and far greater temptations than the first Adam. He really did overcome the world— not only its powers, but its temptations. He really did demonstrate true and perfect holiness that we might follow his example. He really did triumph over every power of sin, that we might be transformed into his likeness. Though the triune God is never tempted to sin, the triune God mysteriously partook of everything it is to be human in the Incarnation, and that humanity &lt;em&gt;could&lt;/em&gt; be tempted—and he overcame.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Joy Comes… After Pleading</title><link href="http://www.chriskrycho.com/2014/joy-comes-after-pleading.html" rel="alternate"></link><published>2014-02-10T22:50:00-05:00</published><updated>2014-02-10T22:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-10:/2014/joy-comes-after-pleading.html</id><summary type="html">Psalm 40 is a beautiful picture of rejoicing in God's salvation—and it is much sweeter set against the pleading of Psalm 39.</summary><content type="html">&lt;p&gt;In addition to the devotional reading I have been recording here, I have been working through large stretches of the Old Testament in my second Old Testament survey class, which covers everything after Job in your English Bible—the Psalms, the Wisdom literature, and all the Prophets. To cover all that ground in a single semester requires moving quickly—so quickly that I both skip over details I might otherwise be attentive to, and pick up on overarching themes I might otherwise miss. This is particularly evident in the Psalms, and having just gone through them at a high pace makes the flow and the context of each individual Psalm more apparent as I come to them for the details again in my ordinary devotional reading. Reading large chunks and then coming back through the same section more slowly is such a helpful practice that I expect I shall try to keep it up.&lt;/p&gt;
&lt;p&gt;Coming to Psalm 40, I am right in the middle of the Psalms of David—a whole stretch focusing on&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; David’s life and circumstances. Reading this particular Psalm on its own is illuminating in its own ways, of course. It is easy to come away with a sense of the joy of salvation from the exultant verses here. The poem leaps from one triumphant note to another, rejoicing in how Yahweh delivers his people and his anointed one. Hallelujah to that!&lt;/p&gt;
&lt;p&gt;The Psalm’s meaning is much, much richer when situated in the broader context of the book, though. When we turn back a single song and look at Psalm 39, we see that not every moment is so rosy and joyful. As I noted in my &lt;a href="/2014%20/with-confidence/"&gt;last post&lt;/a&gt;, the prayer in Psalm 39 is bold and leans hard on God— because David &lt;em&gt;needed&lt;/em&gt; God profoundly. He needed salvation from his sins; he recognized the brevity of his own life and especially its fragility before the almighty maker of heaven and earth;&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; he knew that only Yahweh could accomplish what he needed. The (Spirit-inspired!) editor of the Psalms took these two poems on David’s life and set them next to each other to teach us something about the contours of a life devoted to Yahweh. Not every moment is either sorrowful &lt;em&gt;or&lt;/em&gt; rejoicing. More often, each one leads into the other as the seasons of our life ebb and flow.&lt;/p&gt;
&lt;p&gt;This ebb and flow is &lt;em&gt;good&lt;/em&gt;. We see the beauty of our salvation the more clearly because it is set against the backdrop of our great need for salvation. All too often, we recognize that need only because we have been forced to by our circumstances—by the travails of human life that range from parenting a teething toddler to staring death full in its cancerous face (and we ought not make little or too much of either, different scales though they be). We sometimes find the joy of our salvation sweeter and more savory when we have wrestled through the pain of loss and the wrestling with God that ensues. We sometimes treasure God’s answer more when has required us to wait for it—to wait for &lt;em&gt;him&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is not to say that every trial is aimed at this end. It is to say that the contrast between Psalms 39 and 40 helps us see that &lt;em&gt;sometimes&lt;/em&gt; our trials work out to deepen our joy in salvation. That in turn helps us hold on to God all the more in the face of those trials, because it stands as one more picture of his goodness and wisdom, and thus of his trustworthiness.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Whether written &lt;em&gt;by&lt;/em&gt; or written &lt;em&gt;about&lt;/em&gt;—the grammar in the headings is a bit ambiguous; “of” here can mean “about” or “by”.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Why, yes, that is a reference to the creed, and no, I can’t think of those words without hearing Rich Mullins sing them.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>The Lamb Rampant</title><link href="http://www.chriskrycho.com/2014/the-lamb-rampant.html" rel="alternate"></link><published>2014-02-10T12:30:00-05:00</published><updated>2014-02-10T12:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-10:/2014/the-lamb-rampant.html</id><summary type="html">Come and rest! Come and heal! Ev’ry traitor 
        Ev’ry wretch and stinking fiend: lay down your arms...</summary><content type="html">&lt;div class="line-block"&gt;Come and rest! Come and heal! Ev’ry traitor&lt;br /&gt;
         Ev’ry wretch and stinking fiend: lay down your arms&lt;br /&gt;
    Find comfort here, and respite, rest, rapport&lt;br /&gt;
         All are welcome here, not one refused, none barred&lt;br /&gt;
&lt;br /&gt;
She wearied, wounded, sorrowed, battle-sore&lt;br /&gt;
         Bids her children yet another weary soul embrace&lt;br /&gt;
    Offer care and proffer aid, render service to her foes&lt;br /&gt;
         As—though her progeny—once were as they&lt;br /&gt;
&lt;br /&gt;
Her march to war is ever triumph by defeat&lt;br /&gt;
         Her shields and banners ’blazoned not with martial sign&lt;br /&gt;
    Not lion proud nor weapons bright; instead a bleeding sheep&lt;br /&gt;
         The lamb which piercèd, bruised and bloodied, died&lt;br /&gt;
&lt;br /&gt;
No stranger, prouder heraldry to march beneath&lt;br /&gt;
         But under it she conquers all, so waves she bold&lt;br /&gt;
    The lamb rampant! Dancing proud on trampled death&lt;br /&gt;
         On mort laid low by low-laid, somehow mortal God&lt;br /&gt;
&lt;br /&gt;
Come and rest! she calls— Come and heal! Ev’ry traitor&lt;br /&gt;
         Ev’ry wretch and stinking fiend: lay down your arms&lt;br /&gt;
    Find comfort here, and respite, rest, rapport&lt;br /&gt;
         All are welcome here, not one refused, none barred&lt;br /&gt;
         Beneath the dancing banner: the piercèd, rampant lamb.&lt;/div&gt;
</content><category term="poetry"></category></entry><entry><title>With Confidence</title><link href="http://www.chriskrycho.com/2014/with-confidence.html" rel="alternate"></link><published>2014-02-08T23:27:00-05:00</published><updated>2014-02-08T23:27:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-08:/2014/with-confidence.html</id><summary type="html">David prayed with shocking boldness for deliverance from his own sin and the consequences thereof. We ought to follow his example.</summary><content type="html">&lt;p&gt;The Psalms simultaneously model for us and teach us. They show us how we ought to approach God, and teach us who God is. Psalm 39 is no exception: it does both, through and through. David opens the Psalm by expressing a sentiment we have all shared at some time or another: holding our tongue around those who are actively causing us grief or harm, lest we sin, and finally coming to a point when we can hold back our frustration no longer. Unlike my typical response, though, David did not lash out at those who frustrated him. As is typical of the response the Psalms record, David turned instead to God. It is a striking turn:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;As I mused, the fire burned&lt;br /&gt;
    then I spoke with my tongue:&lt;br /&gt;
O Yahweh…&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The rest of the Psalm is addressed not to David’s enemies (mentioned in verse 1) as a rebuke, but to the one who can deliver him from those enemies and from his own sin. It is not a quiet, passive Psalm, but a loud and forceful request (though not, notably, a demand) that Yahweh be gracious and deliver David from his own transgressions. There is acknowledgement, to be sure, of fault, but also bold importuning of the sovereign God of the universe to act in a certain way in David’s life &lt;em&gt;when David had sinned&lt;/em&gt;. Even to those of us who stand on this side of the cross—we who are enjoined to come confidently before the throne of grace (Hebrews 4:16)—this kind of boldness is a bit shocking.&lt;/p&gt;
&lt;p&gt;The Psalms are full of this kind of thing—and frankly, it tends to make most of us uncomfortable. The idea that we could thus address God seems out of line or inappropriate. It seems remarkably bold to say to God, “Hear my prayer, O &lt;span class="smcp"&gt;Lord&lt;/span&gt;, / and give ear to my cry; / hold not your peace at my tears!” More: it seems on the verge of untrusting, not to recognize that God always has his right and wise reasons for acting as he does and allowing (even ordaining) the things we experience. David has no qualms about this, though; in fact, it typifies the way he and the other Psalmists address God in the midst of trouble.&lt;/p&gt;
&lt;p&gt;I wonder if perhaps we struggle with these kinds of prayers precisely because &lt;em&gt;we&lt;/em&gt; do not know or trust God as we ought. (And that we? It points mostly at me here.) David could come beseech God to be merciful and kind to him by delivering him from his own sin because he knew God to be merciful and gracious. He could plead boldly with God because he knew that God is both all-good and all-wise, and that God’s answer would be &lt;em&gt;right&lt;/em&gt;. In short, he could come boldly before the throne of Yahweh Almighty because he &lt;em&gt;knew&lt;/em&gt; Yahweh Almighty. How much more can we who have seen Yahweh’s mercy writ large in the grotesque humiliations of the incarnation, death, and resurrection of Jesus be confident in his goodness and wisdom and mercy toward us? When we see our own sin, and when we taste discipline for that sin, are we able to go to our Father in heaven and plead for deliverance from our own folly with this kind of confidence?&lt;/p&gt;
&lt;p&gt;If not, it is only because we do not know him or trust him as we ought.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Imperatives and Indicatives</title><link href="http://www.chriskrycho.com/2014/imperatives-and-indicatives.html" rel="alternate"></link><published>2014-02-07T21:30:00-05:00</published><updated>2014-02-07T21:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-07:/2014/imperatives-and-indicatives.html</id><summary type="html">Colossians opens with amazing, beautiful indicatives and then moves to marvelous, impossible imperatives.</summary><content type="html">&lt;p&gt;Paul’s typical format for his letters is to lay out a series of doctrinal statements in the first half of the epistle and then follow it up with a series of exhortations flowing out of those truths in the second half. This is not a hard rule with him. He has letters like 1 and 2 Corinthians in which the content moves back and forth more freely between the two kinds of material, and he also mixes imperatives in with indicatives and vice versa in all his letters. On the whole, though Colossians follows this pattern fairly closely: chapter 1 and the first part of chapter 2 are statements of theological truth (and among the highest and weightiest such in Scripture), and the rest of the book moves into the Christian response to these truths.&lt;/p&gt;
&lt;p&gt;In a mere 44 verses (fewer if one leaves out the introduction), Paul traverses enormous depths of theology. Christ is the author of Creation, the one in whom all things hold together. He is before all things. He is the head of the church. He is the image of the invisible God. He is the heir (“firstborn”) of creation; it belongs to him in its entirety. He is the firstborn (and heir) of the resurrection from the dead.&lt;/p&gt;
&lt;p&gt;It is no surprise, then, that the consequences range over all aspects of human life. There is nothing that goes untouched: not our family life, nor our economic behavior, nor our religious activity, nor our thoughts or actions in any area. Paul enjoined the Colossians to set aside all “sexual immorality, impurity, passion, evil desire, and covetousness, which is idolatry…. anger, wrath, malice, slander, and obscene talk from your mouth” (Colossians 3:5,8). As Abraham Kuyper put it of culture, there is no part of life over which Christ does not shout, “Mine!” So it is in our lives as well: we are his wholly and utterly, fight it though we often do at times. We may foolishly cling to our sins, or we may seek to be sanctified in every area of our lives.&lt;/p&gt;
&lt;p&gt;Note well the constant return to the foundational truths on which that call to holiness is built. Paul not only lays out these exhortations as following the indication of all Christ has already done, but points again and again to the reality that sanctifiaction can happen only as we are joined with Christ. We died with Christ (2:20) and have been raised with Christ (3:1). He is our life (3:4) and our life is hidden with God in Christ (3:3). Christ is all, and in all (3:11). His peace rules in our hearts (3:15); his word dwells in us richly in the context of song and psalm (3:16).&lt;/p&gt;
&lt;p&gt;These are not small things, or light matters. These are magnificent and holy, and they call us to be holy likewise. God is very great—very far beyond us— but he draws us near in his loving kindness and calls us out of our selfishness and sin and into his holy ways. Hallelujah.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>The Wicked Perish</title><link href="http://www.chriskrycho.com/2014/the-wicked-perish.html" rel="alternate"></link><published>2014-02-06T22:41:00-05:00</published><updated>2014-02-06T22:41:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-06:/2014/the-wicked-perish.html</id><summary type="html">One of the reasons I sometimes struggle with passages speaking of God's judgment on the wicked is because I do not face persecution or active hostility from those who hate God. I have a lot to learn.</summary><content type="html">&lt;p&gt;It is apparent to me that one of the reasons I sometimes struggle with passages speaking of God’s judgment on the wicked is because I do not face persecution or active hostility from those who hate God. I might get called names or insulted occasionally (though only occasionally), but I have never been at risk of loss of property, much less of health or life, because I follow Christ. Believers in other places and other times are not so at ease among those who do not follow God. For those who are not so at ease, the prosperity and success of those who oppress them are much larger concerns—much nearer to home, and much more urgently in need of justice.&lt;/p&gt;
&lt;p&gt;Thus, in both of Paul’s letters to the Thessalonians, he encourages them to remain steadfast in part by pointing to God’s future judgment on the enemies of Christ. He points them to the future return of Jesus not to remove the believers from this world, but to judge those who reject God and to rule in righteousness over the world. That is a cause for rejoicing for believers: all of us want to see the world put right, with an end to poverty and war, cancer and rape, tornadoes and abortion, Alzheimers and murder, oppression and death. Nearly &lt;em&gt;everyone&lt;/em&gt; wants this kind of world, in theory. But in practice, we are either children of God or people who “refused to love the truth and so be saved” (2 Thessalonians 2:10). And those who refuse to love the truth and be saved oppress and murder the people of God (and everyone else, but &lt;em&gt;especially&lt;/em&gt; the people of God).&lt;/p&gt;
&lt;p&gt;Our fellow believers in Saudi Arabia and Iran and North Korea are not reading these passages of judgment and wondering how God could judge so harshly. They are reading them and holding fast to the hope that this day will come &lt;em&gt;soon&lt;/em&gt;, when those who grind underfoot the poor, the widow, and the orphan, who throw Jesus’ followers in jail and execute their pastors, will get justice at the hands of God. Many of our fellow believers look forward to the day when &lt;em&gt;they&lt;/em&gt; will get justice from God, because in this present life injustice has often been their lot.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;In just a little while, the wicked will be no more;&lt;br /&gt;
    though you look carefully at his place, he will not be there.&lt;br /&gt;
But the meek shall inherit the land&lt;br /&gt;
    and delight themselves in abundant peace.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;This points me forward in several ways. First, it reminds me that this is an area in which I need to be sanctified. Contrary to everything the surrounding world says, a lack of judgment on the part of God would be grotesquely unrighteous. We can see this clearly in the most egregious cases: none of us think it would be right for Charles Manson or Stalin to get off without punishment. But God’s justice is deeper than ours, and truer, and that is &lt;em&gt;good&lt;/em&gt;. Lord willing, I will come to understand more and more the goodness of his doing justice and righteousness on the earth, not least as I understand that his &lt;em&gt;shalom&lt;/em&gt; will not come—could not come—apart from his doing justice. And his doing justice means crushing evil.&lt;/p&gt;
&lt;p&gt;Second, it reminds me (again) that we Westerners, much though we have to offer to our brothers and sisters around the world, also have much to learn from them. The persecuted church is not so easily led astray in this area as we in our comfort are. Likewise, we have much to learn from those who have gone before us. Whatever their faults, many of our forebears in the faith got &lt;em&gt;this&lt;/em&gt; right where we get it wrong. We would do well to listen more humbly to our fellow saints of every age and every tribe—and not to arrogate to ourselves the right to judge God’s justice.&lt;/p&gt;
&lt;p&gt;Third, it reminds me to pray for God to work his justice in the world: to deliver suffering saints in lands hostile to the gospel, and to end the oppression of the wicked either by saving them from their sins or by ruining them. This is not a comfortable prayer, but it is a good and right prayer. It reminds me, too, to pray all the more fervently: “Lord, come soon!”&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Big Enough for Mystery</title><link href="http://www.chriskrycho.com/2014/big-enough-for-mystery.html" rel="alternate"></link><published>2014-02-05T22:00:00-05:00</published><updated>2014-02-05T22:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-05:/2014/big-enough-for-mystery.html</id><summary type="html">Solomon's conclusion in Ecclesiastes 5—like the conclusion to which he eventually comes in the end of the book—is simpler than we might expect, given the travails of his heart.</summary><content type="html">&lt;p&gt;Ecclesiastes is challenging book, to be sure. Like the rest of the Scriptures, though, it does yield its treasures as we seek the face of God there. Remembering that Scripture is the self-revelation of one who wants to be known helps us situate the hard passages and find their meaning. We are not left wandering in the dark; we can see God here. This is no less true of the pages of Zechariah than of the letters of Paul. The latter, it is true, may be more direct and explicit—but the fact that Ecclesiastes gets at the character of God sideways, as it were, tells us something about God. It tells us that not everything about him can be learned from looking straight on, from direct propositions.&lt;/p&gt;
&lt;p&gt;Sometimes it is only in travail, in the “dark night of the soul” that we learn who our Maker really is. Sometimes it is only in poetry. Sometimes it is when the pursuit of wisdom turns to folly that we learn that wisdom is not some reified artifact to be apprehended, but a living person who is always Other and Above—Holy.&lt;/p&gt;
&lt;p&gt;Solomon went running after every kind of good in this world and for answers to all his questions. The more he searched, the more he gained, the more lost he was and the more he lost. The problem was not seeking the goods of this world, nor in seeking answers to questions. It was partly in seeking them where they could never be found, and partly in failing to be silent before the face of God who has not chosen to answer every question, and partly in succumbing to the notion that the depths of reality can be plumbed. Some things are forever out of our grasp; some knowledge is always too high for us.&lt;/p&gt;
&lt;p&gt;That does not mean we ought not seek after wisdom. It means we ought to seek Wisdom himself, to go after the one who has become to us wisdom from God along with righteousness and peace. It means we ought to revel in what can be known, and revel too where God says, “This is mystery. Trust me.” The world is big enough for mystery. Humans, too, are big enough for mystery. Too often we shrink ourselves down, shrink down the world around us, shrink down God himself, so that we may all fit in conveniently sized packages with regular shapes. But God is always bursting out of our bounds, surprising us with his fierce love and his sharply tender grace.&lt;/p&gt;
&lt;p&gt;Solomon’s conclusion in chapter 5—like the conclusion to which he eventually comes in the end of the book—is simpler than we might expect, given the travails of his heart.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Behold, what I have seen to be good and fitting is to eat and drink and find enjoyment in all the toil with which one toils under the sun the few days of his life that God has given him, for this is his lot. Everyone also to whom God has given wealth and possessions and power to enjoy them, and to accept his lot and rejoice in his toil—this is the gift of God. For he will not much remember the days of his life because God keeps him occupied with joy in his heart. (Ecclesiastes 5:18–20)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Small things, these: to eat and drink and find enjoyment in all our toil. Or perhaps not so small, when we look at them again. For Solomon has already told us that these are vanity when not given and received as gifts from God. They will not satisfy. They are just wind and emptiness. But then God fills them up, and they are suddenly good. God brings joy in these simple things. Is this not what all of us desire? Is it not what Solomon chased and failed to find (the confession of the preceding and following chapters of the book)? Is it not the original promise of the world: to work it and enjoy the fruit of one’s labor as a gift from God’s hand? No, these are not small things. They are very great. And they come from God, with joy. Hallelujah.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>The Mother of God</title><link href="http://www.chriskrycho.com/2014/the-mother-of-god.html" rel="alternate"></link><published>2014-02-04T08:30:00-05:00</published><updated>2014-02-04T08:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-04:/2014/the-mother-of-god.html</id><summary type="html">Is it right to call Mary the Mother of God? The historic, orthodox answer is a resounding &amp;ldquo;yes&amp;rdquo;&amp;mdash;though a clearly qualified and well articulated &amp;ldquo;yes.&amp;rdquo;</summary><content type="html">&lt;p&gt;Is it right to call Mary the Mother of God? The historic, orthodox answer is a resounding “yes”—though a clearly qualified and well articulated “yes.” This is not just the historic, orthodox position; it is the &lt;em&gt;right&lt;/em&gt; position. Mary was indeed the “mother of God”. She was the mother of Jesus. Jesus was (and is) fully God &lt;em&gt;and&lt;/em&gt; fully man, completely and truly, both at once without loss of the full measure of either. He did not cease being totally divine upon his incarnation, but he did assume full humanity. The argument is as simple as it first seems: Mary is the mother of Jesus, and Jesus is God, therefore Mary is the mother of God.&lt;/p&gt;
&lt;p&gt;Evangelicals tend to shy away from following the broader tradition and affirming that Mary is the mother of God. There are many reasons for this, not least our general discomfort with things having to do with Mary born of the over- referencing of Mary in the Catholic tradition and the actual Mariolatry that is too often evinced in Catholic lay practice throughout the world. However, our response ought not be to reject this view, but to speak carefully and clearly and reject what is mistaken while keeping what is true.&lt;/p&gt;
&lt;p&gt;It is true that we must be nuanced in our handling of this issue. The word “mother” brings with it implications that we must avoid, and we must remember Jesus’ statements on what it meant to be his mother and brothers and sisters in the gospels (i.e. that those who followed him were those really deserving of the titles). However, simply to set aside the title is to lose important aspects of the reality of the incarnation. If we say that Mary was &lt;em&gt;not&lt;/em&gt; the mother of God, we are really saying either that she was not truly the mother of Jesus, or that Jesus was not fully God. Neither of these is a tolerable option.&lt;/p&gt;
&lt;p&gt;Now, to those qualifications. When we say that Mary is the mother of God, we are not saying that God in any sense has his source in her. All of the humanity of Jesus finds its source equally in Mary and in the Spirit’s divine intervention —but Mary was created by the Son, rather than the Son originating in her. Mary is the mother of God in Christ, but she is not to the Son exactly as ordinary mothers are to ordinary sons, for Jesus was not an ordinary son.&lt;/p&gt;
&lt;p&gt;Nor do we mean that Mary has special prerogatives because of her relationship to Jesus. As noted above, Jesus made clear that he was concerned above all with obedience to the will of God (see e.g. Matthew 12:46–50). Thus, the devotions offered to Mary by our Catholic and Eastern Orthodox brothers and sisters is misplaced, as is the notion that her prayers are somehow more effective in touching Jesus’ heart than are those of the ordinary saint who is seeking to honor God.&lt;/p&gt;
&lt;p&gt;These qualifications notwithstanding, we must still be willing and ready to affirm that Mary was in fact the Mother of God. To do otherwise is to reduce in one way or another the mystery of the incarnation. It is not so much that &lt;em&gt;Mary&lt;/em&gt; is important here as that affirming her motherhood of God helps us affirm the important points to which we must hold fast in terms the full deity and full humanity of &lt;em&gt;Christ&lt;/em&gt;. Mary is important because Jesus humanity came by means of Mary’s body. Everything that it is to be man, Jesus always was from conception, and everything that it is to be God, Jesus always was from the moment of his conception.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Resolved to Pray</title><link href="http://www.chriskrycho.com/2014/resolved-to-pray.html" rel="alternate"></link><published>2014-02-04T07:40:00-05:00</published><updated>2014-02-04T07:40:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-04:/2014/resolved-to-pray.html</id><summary type="html">Paul's prayerful openings to letters are a good reminder that I ought to pray more and of how I ought to pray.</summary><content type="html">&lt;p&gt;Paul’s letters all open with a common pattern: he gives the typical introduction of his era with his own name and those of his co-authors, and then proceeds to explain how he prays for the people to whom he is writing. I read once of someone who went through and looked at all the things Paul prays for people in his epistles and used those as a basis for his own prayers for others. That seems a remarkably good idea to me. Paul’s heart for each and every church to which he ministered is readily apparent.&lt;/p&gt;
&lt;p&gt;I hope and pray that as I step more and more into ministry, my own heart would be so dedicated to the good of those whom I serve, and that I would be so faithful as Paul was to pray regularly for them. I have a long way to go in this; I do not pray as much even for my own family and friends as I would like. Jaimie and I have made prayer a regular part of our lives by sitting down as a family together to pray every night before we put Elayne to bed, and I pray at times throughout the day. These are good things. I am glad we have taken these steps to make prayer a regular part of our lives. Even so, I am much less dedicated and disciplined in prayer than many I know and especially than the many heroes of the faith who distinguished themselves in large part through the faithfulness of their prayers and their trust that God would answer.&lt;/p&gt;
&lt;p&gt;The content of Paul’s prayers is just as important as their frequency, though. Reading 1 Thessalonians 1 reminded me of the &lt;em&gt;kinds&lt;/em&gt; of things I ought to be praying, as well as &lt;em&gt;that&lt;/em&gt; I ought to be praying. In this particular introduction, Paul is above all grateful to God for the Thessalonians’ “work of faith and labor of love and steadfastness of hope in our Lord Jesus Christ.” This faithfulness before God resounded throughout the early church; these believers had a reputation for their perseverance in the face of persecution and their love of God. What a thing to start praying for the believers I know, and especially for my church and the missionaries we have sent out: that we would be known for our faith, love, and steadfast hope in Jesus Christ; that we would persevere in the face of challenges to our faith and even outright persecution; that the testimony of our deeds would go forth and be an encouragement to the rest of the Church.&lt;/p&gt;
&lt;p&gt;Resolved, then: to pray more faithfully for my fellow saints, first of all at First Baptist Church of Durham and then in the other churches I know and love and then throughout the world as I hear of them; and to pray more thoughtfully and wisely for God to make of us all the kinds of people over whom Paul was rejoicing in these early verses of this letter. Amen.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>The Horror of Sin</title><link href="http://www.chriskrycho.com/2014/the-horror-of-sin.html" rel="alternate"></link><published>2014-02-03T22:00:00-05:00</published><updated>2014-02-03T22:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-03:/2014/the-horror-of-sin.html</id><summary type="html">Matthew 26:3--7 contains one of the most horrifying illustrations of human depravity anywhere in the Bible. It is such a simple passage, but the human wickedness on display is profound.</summary><content type="html">&lt;p&gt;Matthew 26:3–7 contains one of the most horrifying illustrations of human depravity anywhere in the Bible. It is such a simple passage, but the human wickedness on display is profound. The scene is this: Jesus has already been condemned by the Jews. Judas—expecting &lt;em&gt;some&lt;/em&gt; other outcome than Jesus’ death, or simply turned back from the plan to which he had previously agreed—comes, seeking to make right what he had done wrong. The priests respond by rejecting him, and he throws the money down on the floor before he goes and hangs himself.&lt;/p&gt;
&lt;p&gt;The priests then note that it would be &lt;em&gt;wrong&lt;/em&gt; to put the money in the temple treasury, since it was after all blood money. Here these men were, having just plotted the death of a man they knew to be innocent, a man they could condemn only on trumped up charges after a farce of a trail, worried about whether they should put a few pieces of silver in the treasury or not. Their conclusion, that the money could not be used for the temple because it was “blood money”, still did not make them realize the horror of their sin—that they had bought a man’s life! That they should do this with &lt;em&gt;any&lt;/em&gt; man is a horror; that they would do it with their long-awaited Messiah, the incarnate Son of God, is a horror beyond words. That they could not see the disjunction between their scruples about where the money was used and the very reason they had the money should put the fear of sin in us all.&lt;/p&gt;
&lt;p&gt;This is human depravity. We can look our sin square in the face and not see it for what it is sometimes. We become inured to its power and its hold on us. We think we can just deal with it in some way or another—and we are profoundly wrong. We cannot deal with our sin apart from the saving work of Chris ton our behalf. We cannot even see it clearly without the illuminating power of the Holy Spirit. No divine intervention means no holiness on our part; without the work of God we would remain forever trapped in the darkness that shrouds our eyes from seeing our sin aright and from seeing our great and awesome God as he is.&lt;/p&gt;
&lt;p&gt;Yet this is also the hand of God at work. So often God takes what men meant for evil and works it for good. Often we cannot see his means &lt;em&gt;or&lt;/em&gt; his ends, but we know from the gospels that the greatest evil ever perpetrated by men—the only innocent man dead at the hands of hardenered human hearts—was used of God to accomplish the greatest good ever provided to men. This lets us trust that God is likewise at work in our own lives. We know that he is all-wise and all-good. We do not know what he aims to accomplish with every act (nor indeed with many of his acts), but we know that those aims will be for the good of all those who love him and (most importantly) are loved by him.&lt;/p&gt;
&lt;p&gt;Hallelujah.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Vanity! Vanity!</title><link href="http://www.chriskrycho.com/2014/vanity-vanity.html" rel="alternate"></link><published>2014-02-02T22:15:00-05:00</published><updated>2014-02-02T22:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-02:/2014/vanity-vanity.html</id><summary type="html">Ecclesiastes is one of the most interpretively challenging books in the whole Bible—but there is real wisdom to be found in reading it with the rest of the canon.</summary><content type="html">&lt;p&gt;Ecclesiastes is one of the most interpretively challenging books in the whole Bible. &lt;a href="/2014/ordinary-means-the-silence-of-god/"&gt;Like Esther&lt;/a&gt;, its inclusion in the canon was much debated. Unlike Esther, the book mentions God plenty—but its approach to theology is challenging, to say the least. The author, generally understood to be Solomon, is not exactly a cheerful fellow and is his approach to life can be summed up in the single word that is the refrain of the whole book: “Vanity!”&lt;/p&gt;
&lt;p&gt;Chapter 2 gives us this bleak outlook applied to pleasure and possessions on the one hand and vocation on the other. In both cases, the Preacher (Heb. &lt;em&gt;qoheleth&lt;/em&gt;) comes to the same conclusion: “Then I considered all tha tmy hands had done and the toil I had expended in doing it, and behold, all was vanity and a striving after wind, and there was nothing to be gained under the sun” (Ecclesiastes 2:11). This is so bleak as to border on despair, and therefore no few Christians of my acquaintance find the book difficult to integrate with their theology.&lt;/p&gt;
&lt;p&gt;The problem, as near as I can tell, is one of genre.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Ecclesiastes is wisdom literature, and it serves as an extended meditation on the world that Solomon found around him. And taken without the context of redemptive history, Solomon’s proclamation that everything is vanity is perfectly accurate. Life is a grind. We cannot keep the things we earn or buy, no matter how magnificent. If we are perfectly wise in our dealings, we will nonetheless die and leave everything we have to others, and who knows whether they will be geniuses, mediocrities, or idiots? We can have a thousand pleasures at our command, and we will find them all unsatisfactory in the end. We can work hard, and have nothing to show for it when we return to dust.&lt;/p&gt;
&lt;p&gt;But all these things are observations of the world as it is—not statements on what it ought to be. It is easy to mistake description for prescription. The Preacher never suggests that life in this world &lt;em&gt;should&lt;/em&gt; be mere vanity. To the contrary: the very fact that he was asking the questions he asked is indicative of the real shape of reality. We all ask the same questions with him at some point or another: Does my work matter? Would I be satisfied if I had every material thing I could desire? Would having (functionally) infinite sexual choice&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; bring me contentment? Solomon discovered the answer: no.&lt;/p&gt;
&lt;p&gt;And there we leave it, for chapter 2. But my other reading tonight was in Matthew and in Psalms, and they do &lt;em&gt;not&lt;/em&gt; leave it there. Psalm 33 points us to the ways that Yahweh works justice in the world and calls us to rejoice in him, not in the things of this age. Matthew 22–25 reminds us that the kingdom of heaven is &lt;em&gt;coming&lt;/em&gt;; it is not here yet. The age to come will be so &lt;em&gt;very&lt;/em&gt; much better than this one. No more will our existence be nothing but vanity. Hallelujah.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I am looking forward to seeing this covered in my Old Testament II class this semester, as I suspect that the coverage there will prove illuminating. It certainly was helpful for my grasp of Job!—but more on that another time.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Think about the fact that Solomon is reported to have had some 1,000 wives and concubines (see 1 Kings 11:3). This may not be infinite in the strictest sense of the word… but it is close enough.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Infant Guilt—Purest Speculation</title><link href="http://www.chriskrycho.com/2014/infant-guilt-purest-speculation.html" rel="alternate"></link><published>2014-02-01T08:30:00-05:00</published><updated>2014-02-01T08:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-02-01:/2014/infant-guilt-purest-speculation.html</id><summary type="html">&lt;p&gt;Whether people are born guilty of sin, or simply inherit a nature so predisposed to sin that the actual act is inevitable has been a much debated topic for generations. In my view, however, the question is impossible to answer. I do not think Scripture speaks with sufficient clarity on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Whether people are born guilty of sin, or simply inherit a nature so predisposed to sin that the actual act is inevitable has been a much debated topic for generations. In my view, however, the question is impossible to answer. I do not think Scripture speaks with sufficient clarity on the matter. We know on the one hand that all are “by nature children of wrath” (Ephesians 2:3), and that “all have sinned and fall short of the glory of God” (Romans 3:23). What neither of these texts tell us, though, and what indeed &lt;em&gt;no&lt;/em&gt; text tells us, is whether people are guilty at birth or whether they are simply sinful and become guilty.&lt;/p&gt;
&lt;p&gt;We could reason to a conclusion that accords with our other theological commitments with little difficulty. We know that God is just, and punishes for the wrongs we commit, but we have no evidence that he punishes wrongs we &lt;em&gt;might&lt;/em&gt; commit, and therefore we might conclude that he would therefore not find guilty any newly conceived or newly born person. On the other hand, we also must reckon with the reality that the Scriptures treat questions of progeny far differently than do individually-minded modern Westerners.&lt;/p&gt;
&lt;p&gt;Scripture points us to the God who “will by no means clear the guilty, visiting the iniquity of the fathers on the children and the children’s children, to the third and the fourth generation” (Exodus 34:7) as well as the God who proclaims that “The soul who sins shall die. The son shall not suffer for the iniquity of the father, nor the father suffer for the iniquity of the son” (Ezekiel 18:20). Paul did write that “one trespass led to condemnation for all men,” but he immediately follows up this provocative statement by arguing that “one act of righteousness leads to justification and life for all men” (Romans 5:18)—yet we know that Paul does not (and cannot) here mean that all men are saved, for we know that he believes that those who do not repent and believe the gospel perish in their sins under the expectation of judgment.&lt;/p&gt;
&lt;p&gt;We cannot from the evidence that God has given us decide this question. We are left without an answer. If we grant the sufficiency of Scripture, then we must recognize that if there are questions God has in his wisdom opted not to answer, it is for a reason, and we should cease with our speculations and be silent. We may not know whether infants are &lt;em&gt;guilty&lt;/em&gt;, but we do know two other things that are far more important than that: First, God is merciful and gracious and just. We will not in the final reckoning find his justice lacking or his treatment of (for example) those who died in infancy to be lacking. Second, all are born under the dual curse of sin’s hold and death’s certainty.&lt;/p&gt;
&lt;p&gt;These truths give us clear and straightforward points of application. First, we must preach the gospel clearly to people of every age and intellectual ability, for even little children sin and death is awaiting us all. Whether or not we are born guilty, we &lt;em&gt;become&lt;/em&gt; guilty very quickly. Second, much of the speculation on this question—and many churches practices such as infant baptism—seems to be rooted in worry about the fate of those who die young, without having made a credible profession of faith. Yet even if we &lt;em&gt;did&lt;/em&gt; know the answer to the question of their guilt, we still might not know God’s response. Even did we know the answer, still we would need learn to trust in the goodness and wisdom of God in this matter.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>Not Simple</title><link href="http://www.chriskrycho.com/2014/not-simple.html" rel="alternate"></link><published>2014-01-31T20:55:00-05:00</published><updated>2014-01-31T20:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-31:/2014/not-simple.html</id><summary type="html">Jesus is not simple. He never was. We too often try to fit him into a neat box—but he will not be boxed in.</summary><content type="html">&lt;p&gt;Sometimes, I hate the heading markers in my Bible. While they can be helpful for some people at some times, I find more and more that they simply distract. They make it difficult to see—or to remember—that the books are &lt;em&gt;books&lt;/em&gt;. Nowhere is this more distracting than in the gospels. The gospels are coherent books. They are not mere collections of stories, arranged haphazardly or tossed together willy-nilly; the authors had a point and purpose in what they were doing, and that point and purpose is hard to see for the constant interruptions in the text. These interruptions, not present in the original, mask the way the pieces fit together—and they mask the surprising ways they do &lt;em&gt;not&lt;/em&gt; obviously fit together, too.&lt;/p&gt;
&lt;p&gt;Because these are the kinds of questions we should be asking as we read through the book: Why does Matthew transition from Jesus’ rather shocking encounter with his family—the one where he proclaims that his disciples are his family in a way that his biological family is not—to the death of John the Baptist? And why from there to the feeding of the five thousand? And why thence to interactions with the scribes and Pharisees? He is going somewhere with this narrative; where? What does he want us to see?&lt;/p&gt;
&lt;p&gt;In John 14, Jesus leaves the crowds behinds to seek respite on hearing of the death of his cousin and fellow servant of Yahweh, John the Baptizer. But then a crowd finds him, and he has compassion on them; he goes out of his way to care for them. Then, a few hundred words later, he compares a Canaanite woman to a dog, using the racially charged language of the Jews. (This should shock the reader, given how Matthew has already had Jesus praise outsiders and proclaim that the kingdom will be composed of those who were far off as well as of those who were near.) But then he blesses her for her faith. Then Matthew follows this story with another case of his feeding a multitude because of his compassion for them. Scattered through all these narratives are his interactions with the Pharisees, whom he repeatedly criticizes in the harshest terms.&lt;/p&gt;
&lt;p&gt;Why these particular stories? Why these particular contrasts?&lt;/p&gt;
&lt;p&gt;I think it is because Matthew aims to confound his readers in precisely the ways the disciples (Matthew himself included) were confounded. We see that they were often confused. We see that they failed to understand who he was, and then even as they began to grasp that he was the Messiah (14:32, 16:16), they continued to misunderstand what he was about. His teachings confused them, and they had to learn over and over again the same lessons. Matthew has structured his narrative so that the reader is faced with the same kinds of confounding contrasts that the disciples faced. We, too, must wrestle with this Son of Man who both overflows with compassion on the crowds and repeatedly evinces his frustration with the faithlessness of the people. We, too, must come to terms with a king who planned from the first to die rather than than to conquer. We, too, must read the riddles rightly—and marvel though we do at the disciples who did not understand his parables, if we are honest we must admit how we struggle to interpret them ourselves.&lt;/p&gt;
&lt;p&gt;Jesus is not simple. He never was. We too often try to fit him into a neat box: the social revolutionary, or the compassionate healer, or the righteous firebrand, or the gentle savior. Take your pick, according to your social and political preferences. But he will not be so boxed in. He is all of these and more, and he is none of these insofar as none of them circumscribe him. He is righteousness and justice and peace&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;—which means that he thunders forth judgment, and he tenderly comforts those in need. It means that he offers sharp edges and delighted praise to the same people. It means that he marveled at the faith and the faithlessness of people whose hearts he knew before they spoke. It means that he is a mystery even as he reveals himself plainly. It means that he cannot be comprehended, but invites us to know him.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;A trio I borrowed from J. Clinton McCann Jr.’s description of Yahweh’s “anointed one” (that is, “messiah”) in the Psalms. See Chapter 12: Hearing the Psalter in &lt;cite&gt;Hearing the Old Testament&lt;/cite&gt;, eds. Craig G. Bartholomew &amp;amp; David J. H. Beldman.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Basic Human Folly</title><link href="http://www.chriskrycho.com/2014/basic-human-folly.html" rel="alternate"></link><published>2014-01-30T08:15:00-05:00</published><updated>2014-01-30T08:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-30:/2014/basic-human-folly.html</id><summary type="html">Psalm 30 stands as one of the most evocative pictures of our human propensity for self-congratulatory folly in all of Scripture.</summary><content type="html">&lt;p&gt;Psalm 30 stands as one of the most evocative pictures of our human propensity for self-congratulatory folly in all of Scripture. It is a splendid poetic demonstration of an arc we have all traced out. David opens the Psalm by telling us where he is going. The first two stanzas declare that Yahweh saves and enjoins his saints to praise him, “For his anger is but for a moemnt, / and his favor is for a lifetime. / Weeping may tarry for the night, / but joy comes with the morning” (Psalm 30:5).&lt;/p&gt;
&lt;p&gt;Then David tells us how he got there. I cannot do better in summing up the third stanza than simply quoting it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;As for me, I said in my prosperity,&lt;br /&gt;
    “I shall never be moved.”&lt;br /&gt;
By your favor, O &lt;span class="smcp"&gt;Lord&lt;/span&gt;,&lt;br /&gt;
    you made my mountain stand strong;&lt;br /&gt;
you hid your face;&lt;br /&gt;
    I was dismayed.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is one of the most basic human follies. As God cares for us and provides for us, we take credit for it ourselves. But it was &lt;em&gt;Yahweh&lt;/em&gt; who made David’s “mountain stand strong”—not David. The moment Yahweh took away his presence, David was in ruin. How often do we all fall prey to exactly this sort of nonsense? How often do I trust in my own capabilities or my own wisdom, and credit my own hard work and talents for where I stand in life? Certainly, I am too clever to do so openly, even to myself: I know that I should not be resting on my own merits. But deep down, we all make that dreadful move sometimes.&lt;/p&gt;
&lt;p&gt;The other significant point of interest in this third stanza is what it was that dismayed David. He does not emphasize here whatever external consequences he may have experienced in his pride (though the next stanza suggests that there were some). Rather, he points to the Yahweh’s withdrawal of his presence: “you hid your face” (Psalm 30:7b) as the basis for his dismay. Would that I were so sensitive to God that I recognized his presence as far more important than any other situational reality. We are offered the privilege of fellowship with the divine, and so often we—so often &lt;em&gt;I&lt;/em&gt;—turn away from it for other, lesser things. So often, we are more frustrated by the difficulties of our trials than we are by a lack of relationship with our heavenly Father. David has the right of it, though.&lt;/p&gt;
&lt;p&gt;There is much that could be said of the fourth stanza on questions of theological development, Old Testament understandings of death, and so on. More interesting to me—in a devotional context, at least!—is the point of the stanza: a simple plea for help from Yahweh. Again, David’s response is a model for us. When faced with the removal of God’s presence and the looming consequences, he prayed for salvation. The result, coming in the fifth and final stanza, is the restoration of David’s state. Yahweh moved him from the ritual death of lament (“mourning” and “sackloth”) to ritual life (“dancing” and “gladness”).&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Importantly, David does not make again the mistake that took him down this road in the first place. He recognizes that Yahweh had restored him for a reason:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;that my glory may sing your praise and be not silent,&lt;br /&gt;
    O &lt;span class="smcp"&gt;Lord&lt;/span&gt; my God, I will give thanks to you forever!&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;His “glory”—his mountain standing strong—was not for his own pleasure, but for the honor of the one who made him stand strong.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;This insight courtesy of Dr. Heath Thomas, who has pointed out similar motifs in Job. Matters of ritual state are important in all cultures, but were much more explicit in the Ancient Near East than they are in modern western societies. More on this some other time.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>You Must Be Perfect</title><link href="http://www.chriskrycho.com/2014/you-must-be-perfect.html" rel="alternate"></link><published>2014-01-29T08:14:00-05:00</published><updated>2014-01-29T08:14:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-29:/2014/you-must-be-perfect.html</id><summary type="html">The Sermon on the Mount both tells us of our need for Christ because we cannot be perfect, and requires us to genuinely pursue perfection to honor our Savior.</summary><content type="html">&lt;p&gt;It is common right now in some circles of evangelicalism to so emphasize the dialectic of law and gospel that every moral exhortation or command in the Bible is turned into mere evidence of our inability and God’s grace toward us. This is a tragedy.&lt;/p&gt;
&lt;p&gt;As I was reading through Matthew 5–9 this morning, I was struck again by the force of Jesus’ moral teaching here. He takes major categories of sin and intensifies the Old Testament’s teaching on it: murder, adultery, penury, and self-righteousness all come in for his condemnation here. Now, it is true that the standard he sets is perfection: “You therefore must be perfect, as your heavenly Father is perfect,” he says (Matthew 5:48, ESV). To be sure, none of us can measure up to this standard. In one sense, then, those who point out that this teaching shows us our need for Christ’s salvation are absolutely right.&lt;/p&gt;
&lt;p&gt;However, there is more going on here than merely highlighting our need for Christ. There is a picture of kingdom ethics that we are too quick to step over. “Ah,” we say, “I can never be perfect, but thank God for covering my imperfections!” and we move along through our lives. This is &lt;em&gt;not&lt;/em&gt; what the text requires of us; it is not what God requires of us. The resurrection of Christ was like the first crack in a piece of glass, and our participation in his resurrection is like the spidering of that crack out until the whole glass is shattered completely. The old world has not yet passed away, but the new one is pushing its way through the cracks, visible more and more in our lives as we pursue holy Christlikeness.&lt;/p&gt;
&lt;p&gt;At least, that is how it ought to be. But this in-breaking of the new age is hard work, and it is far easier to empty the Sermon on the Mount of its binding force on our lives. It is easier to look at the moral instruction of Scripture and see only one use of the Law: condemning sinners where they stand so they will look to Christ. Yet the Law does more than this. It also teaches us what God is like, and what his people ought to be like. So when Jesus says to us that we must put aside our anger at our brothers and sisters, that we must do whatever it takes to deal with lust, that we must not retaliate but instead go above and beyond in serving those who do us harm, we must &lt;em&gt;obey&lt;/em&gt;. When he tells us how to pray, how to fast, how to give to the needy (and, for that matter, that we &lt;em&gt;are&lt;/em&gt; to give generously to the needy), we must &lt;em&gt;obey&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Jesus said both:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“For I tell you, unless your righteousness exceeds that of the scribes and Pharisees, you will never enter the kingdom of heaven.” (Matthew 5:20)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Not everyone who says to me, ‘Lord, Lord,’ will enter the kingdom of heaven, but the one who does the will of my Father who is in heaven.” (Matthew 7:21)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Sermon on the Mount both tells us of our need for Christ because we cannot be perfect, and requires us to genuinely pursue perfection to honor our Savior.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>The New Testament Needs the Old (and So Do You)</title><link href="http://www.chriskrycho.com/2014/the-new-testament-needs-the-old-and-so-do-you.html" rel="alternate"></link><published>2014-01-28T22:10:00-05:00</published><updated>2014-01-28T22:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-28:/2014/the-new-testament-needs-the-old-and-so-do-you.html</id><summary type="html">It is difficult if not impossible to understand Matthew's gospel apart from its Old Testament background—but then, it is hard to understand any of the New Testament without the Old as background.</summary><content type="html">&lt;p&gt;Having just finished reading through the Chronicles, it is readily apparent how Matthew self-consciously situated himself against the backdrop of the Old Testament as he began composing his gospel. Just as the Old Testament carefully preserved the lineages of the people—most notably in Numbers and Chronicles— so Matthew carefully laid out the descent of Christ, showing that his (adoptive) father’s line ran true back through David.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; If, as some scholars of the canon have speculated, Matthew’s Old Testament canon concluded with Chronicles,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; this beginning seems especially fitting, but in any case Matthew was clearly interested in establishing continuity between his work and the Hebrew Bible.&lt;/p&gt;
&lt;p&gt;We pick up this same thread in his constant use of the word “fulfill.” The way Matthew uses the word has been much discussed among scholars, since many of the passages he quotes are clearly &lt;em&gt;not&lt;/em&gt; talking about the Messiah in particular. While some see this as evidence of either Matthew’s exegetical failure or the validity of purely allegorical readings, I think&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; the solution is simpler. Matthew is using the word in a &lt;em&gt;simpler&lt;/em&gt; fashion. He means not “fulfill” in the sense in which we use the word of formal prophecies, but “fill up”. The Greek word &lt;em&gt;pleróō&lt;/em&gt; (πληρόω) covers both.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; When Matthew says that some event “fulfills” something from the Old Testament, he is not arguing that the Old Testament bit he references was originally written about Jesus, but rather that Jesus takes that original thing and fills it up with &lt;em&gt;more&lt;/em&gt; meaning than it originally had.&lt;/p&gt;
&lt;p&gt;The combination of these two things, in any case, is to point us to the Jewishness and the Old Testament background against which Jesus did his entire ministry, and in which the church was born. Last semester and this semester, I have been taking survey classes of the Old Testament, and I find them extremely valuable. The Old Testament is underpreached in most churches, because (I think) it is undervalued in most churches. Whether because of a simplistic and misguided notion that the Old Testament has only law and the New Testament only grace, or because the texts are harder to read for propositionally oriented Westerners,&lt;a href="#fn5" class="footnote-ref" id="fnref5"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; or simply because of unfamiliarity on the part of many pastors, we skip over the Old Testament. We might draw on it for moral statements from time to time, or to give some extra explanation for the atonement—but when was the last time you heard someone preach through Isaiah, or Malachi, or 2 Chronicles?&lt;/p&gt;
&lt;p&gt;This is a catastrophic loss to th echurch. Paul wrote that &lt;em&gt;all&lt;/em&gt; Scripture was breathed out by God and is profitable for us—and the only canon he had at the time was the Old Testament; he and his fellow apostles were still in the process of composing the pieces that became the New Testament! The early church’s Bible, the texts from which they read, sang, and preached week in and week out, were those of the Old Testament. They read the Psalms together, learned from the Proverbs, chewed on Job, sought to imitate the saints of old, and above all looked for the many ways their Messiah had been proclaimed and prefigured in the pages of their book. They found there ample instruction in walking with God and worshipping their risen Lord. Matthew found there the ground of his entire gospel. Perhaps we would do well to do better in our love of the Old Testament, too.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;There is much argument about the differing genealogies in Luke and Matthew. This is an interesting discussion… for something besides a devotional post. Contrary to many a scholar, evangelical and dissenting alike, the so- called synoptic problem comes &lt;em&gt;after&lt;/em&gt; dealing with each book on its own terms.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;All the same books would have been present, just in a different order.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;Following an article by G. K. Beale from several decades ago, a link to which I do not have at hand at the moment and which would undoubtedly bore the vast majority of you to stupor in any case.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;There is an important issue here for issues of translation, and especially for the idea of “word studies”: namely, that they’re basically unhelpful. Words in different languages have different ranges of meanings. We can see this at the most basic level in the Spanish word “mesa”, which partly overlaps with the English word “table”, but extends to include things (like bluffs) which the English word does not include. This happens all the time, and accordingly just looking up all the places where a particular Greek word is used can often produce more heat than light—it will make you think that authors mean the same thing in places where the context demands that they do not. I really, really recommend that you avoid word studies for this reason.&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn5"&gt;&lt;p&gt;A factor undergoing rapid change in many parts of the West, as story becomes central again in large parts of the population.&lt;a href="#fnref5" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Hey, Look—A Podcast!</title><link href="http://www.chriskrycho.com/2014/hey-look-a-podcast.html" rel="alternate"></link><published>2014-01-28T20:20:00-05:00</published><updated>2014-01-28T20:20:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-28:/2014/hey-look-a-podcast.html</id><summary type="html">&lt;p&gt;Today, I was happy to be able to finally go public with a project on which I have been working for the last couple months (and for which I have been planning since mid-fall): &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt;. Winning Slowly is a biweeklypodcast by yours truly and my good friend &lt;a href="http://stephencarradini.com"&gt;Stephen Carradini …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, I was happy to be able to finally go public with a project on which I have been working for the last couple months (and for which I have been planning since mid-fall): &lt;a href="http://www.winningslowly.org/"&gt;Winning Slowly&lt;/a&gt;. Winning Slowly is a biweeklypodcast by yours truly and my good friend &lt;a href="http://stephencarradini.com"&gt;Stephen Carradini&lt;/a&gt; offering thoughtful commentary on trends in culture, technology, religion, ethics, and art.&lt;/p&gt;
&lt;p&gt;Of possible interest to my readers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can listen to the first episode, &lt;a href="http://www.winningslowly.org/2014/01/we-need-some-context/"&gt;We Need Some Context!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You can &lt;a href="http://www.winningslowly.org/feed.xml"&gt;subscribe to the feed&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can follow and get updates via all sorts of social networks:
&lt;ul&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.som/winningslowly"&gt;@winningslowly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;App.net: &lt;a href="http://app.net/winningslowly"&gt;@winningslowly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://broadcast.app.net/40022/winning-slowly-episodes/"&gt;App.net broadcast&lt;/a&gt; – notifications on your phone or emails as you like&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plus.google.com/u/0/+WinningslowlyOrgCast/"&gt;Google+&lt;/a&gt; (yes, shockingly enough)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re still very much in a “beta” phase. The audio quality needs significant improvement, our back-and-forth needs to get smoother (and, at times, more back- and-forth!), and so on. We’d love to hear your feedback. But be gentle.&lt;/p&gt;
</content><category term="podcasting"></category></entry><entry><title>Ordinary Means: The Silence of God</title><link href="http://www.chriskrycho.com/2014/ordinary-means-the-silence-of-god.html" rel="alternate"></link><published>2014-01-27T08:05:00-05:00</published><updated>2014-01-27T08:05:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-27:/2014/ordinary-means-the-silence-of-god.html</id><summary type="html">God's silence does not imply his absence; nor does the ordinary nature of our lives imply his uninvolvement. Quite the contrary: most of the time, in most people's lives, in most places, God works by ordinary rather  than extraordinary means.</summary><content type="html">&lt;p&gt;Esther is one of the most unusual books in the Old Testament—so much so that it was one of several books that almost did not end up in the canon. As has often been noted, it includes no mention of God, nor even a reference to prayer. The closest one comes to typical Jewish religious observance is the practice of fasting under dire circumstances and the tearing of clothes and donning sackloth and ashes in their place. But these were hardly unique to the worship of Yahweh; they were common practice throughout the Ancient Near East. Moreover, the book endorsed the practice of a feast beyond those listed in the Mosaic law: a questionable practice at &lt;em&gt;best&lt;/em&gt; from the perspective of many observant Jews.&lt;/p&gt;
&lt;p&gt;Yet here it is, in most Jewish and all Christian canons.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Again: as many commentators have noticed, Yahweh may not be mentioned by name, but his handiwork is evident throughout the book. He is not mentioned, but he is still present. His sovereignty is clear even in the absence of a prophetic declaration of his intent or activity. Indeed, for this reason I think that the book is also one of the most important books for understanding how God’s actions in ordinary life play out.&lt;/p&gt;
&lt;p&gt;The Scriptures are filled with records of God’s speech to his people, and of his miraculous intervention in their lives. From this, it can be easy to draw the notion that this is the normal and ordinary course of affairs. In other words, we might after reading through the histories of Israel conclude that we should expect God to be sending prophetic messages and miracles our way on a regular basis. Indeed, large parts of the charismatic movement today are built around that very expectation. When life remains ordinary, we are inevitably disappointed. When we do not hear distinct, prophetic messages from God, we inevitably go looking for substitutes, whether in the pronouncements of famous Christians or our own “inner sense” of the Spirit’s actions—neither of which are reliable guides, as I have &lt;a href="http://2012-2013.chriskrycho.com/theology/will-of-god/"&gt;argued before&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the one hand, it is helpful to remember the circumstances under which those prophets spoke and those miracles happened. Always, they were associated with specific events in the redemptive history of the nation. Though they occasionally impinged on the life of ordinary people (like the family with whom Elisha repeatedly interacted, from miraculously overflowing oil to the resurrection of a dead child), for the most part they involved the spiritual and political leadership of the people of God. All this is true—but true &lt;em&gt;statements&lt;/em&gt; do not always communicate in the same way as do true &lt;em&gt;stories&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It is this gap that Esther fills.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Here we have a story of God’s saving his people with no divine speech, and no obvious miraculous intervention. In their place are ordinary people doing as best they can with the wisdom they have in the (dreadful) circumstances they face. Here was a moment in redemptive history, no less, with the fate of thousands of men and women hanging in the balance… where all the sorts of things we sometimes erroneously expect for the not-so- significant moments in our own lives were simply absent.&lt;/p&gt;
&lt;p&gt;It is not that God was absent; we see from the outcomes that his concern for his people remained (he saved them) and his judgment on their enemies remained (he destroyed them). We even see that “many from the peoples of the country declared themselves Jews, for the fear of the Jews had fallen on them” (Esther 8:17b, ESV)—not exactly a typical event in Jewish history, but certainly part of the end for which Yahweh had set them among the nations! Yet in all this, God remains behind the scenes. So it most often is in our own lives. God’s silence does not imply his absence; nor does the ordinary nature of our lives imply his uninvolvement. Quite the contrary: most of the time, in most people’s lives, in most places, God works by ordinary rather than extraordinary means. We get up, go about our day, honoring him as best we may in our various vocations, and he works &lt;em&gt;all&lt;/em&gt; things to the praise of his glory and the good of those who love him.&lt;/p&gt;
&lt;p&gt;Thank God for Esther and Mordecai.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The existence of various canons is less troubling than many critics would suggest—not least because the core of all these canons is the same, and the extra material in them rarely leads to significant doctrinal variations. This is not to say that the distinctions are entirely unimportant, but rather to say that it is less an issue for the reliability and authority of Scripture than many naysayers would have you believe. More on this… some other day.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Not to say that this is the &lt;em&gt;only&lt;/em&gt; thing Esther is doing, but that it is &lt;em&gt;one&lt;/em&gt; of the significant things the book does.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Nehemiah's Exhortation</title><link href="http://www.chriskrycho.com/2014/nehemiahs-exhortation.html" rel="alternate"></link><published>2014-01-25T22:30:00-05:00</published><updated>2014-01-25T22:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-25:/2014/nehemiahs-exhortation.html</id><summary type="html">Some thoughts on the way Nehemiah exhorted the people to follow God, and on expositional preaching.</summary><content type="html">&lt;p&gt;This week, I did most of my devotional reading early in the morning. Though I have gone back and forth on the time of day in which I am best able to spend time reading the Scriptures and praying, in &lt;em&gt;this&lt;/em&gt; season of life it is undeniably mornings. Our evenings are quite varied, for one thing. For another, these days I am for more awake at 6:15 in the morning than I am at 9:15 (or, as now, 10:15) at night. Thus, devotedly doing my devotions means doing them in the morning for the most part, lest I have a hard time keeping my eyes open.&lt;/p&gt;
&lt;p&gt;Tonight’s readings in Nehemiah covered passages with which I am quite familiar, having looked at them many times. A few of them are proof texts for certain views of preaching—in particular, the way thtat the Levites gave the meaning of the text so that the people could understand it is often used to buttress support for expositional preaching. This, however, is a thoroughly ironic move hermeneutically speaking. The passage is actually indicating that the Levites were basically &lt;em&gt;translating&lt;/em&gt;, not offering explanatory commentary. Thus, it is a failure of exposition to derive proof for expository preaching from the text.&lt;/p&gt;
&lt;p&gt;Of at least equal interest to me has always been the way Nehemiah responded to the people’s repentant reaction to hearing the Law of God proclaimed by Ezra. Nehemiah encouraged the people not to focus on the sorrow of what they had done, but on the joy of who their God was and what he had done on their behealf. The same exhortation, it seems to me, is one that we should think about more often. To be sure, it is good to be reminded of our sin and our failings. It is even better, however, for us to turn from looking at ourselves and to look at the Messiah who has saved us &lt;em&gt;from&lt;/em&gt; those sins and failings. Too easily do many of us fixate on the magnitude of our sin—either thinking it too big for God to really deal with, or too small for God to concern himself with, but in any case focusing on the sin—instead of on the one who has conquered sin once and for all.&lt;/p&gt;
&lt;p&gt;May we instead learn, like Nehemiah exhorted the people, to &lt;em&gt;rejoice&lt;/em&gt; at what God has done on our behalf, and to celebrate the ways in which he has worked salvation in the midst of and through our sorrows and our foibles.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>What Was Their Sin?</title><link href="http://www.chriskrycho.com/2014/what-was-their-sin.html" rel="alternate"></link><published>2014-01-25T08:00:00-05:00</published><updated>2014-01-25T08:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-25:/2014/what-was-their-sin.html</id><summary type="html">&lt;p&gt;As Christians, we all recognize that Adam and Eve’s first sin in the garden of Eden prompted the catastropic Fall of all humanity, and that their eating of the fruit of the tree of the knowledge of good and evil was the &lt;em&gt;act&lt;/em&gt; of sin that produced such horrific …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As Christians, we all recognize that Adam and Eve’s first sin in the garden of Eden prompted the catastropic Fall of all humanity, and that their eating of the fruit of the tree of the knowledge of good and evil was the &lt;em&gt;act&lt;/em&gt; of sin that produced such horrific results in human history. What is perhaps less clear is why that particular act was sinful. Was it disobedience? gaining knowledge? pride? idolatry? The most straightforward reading of Genesis 3 makes it clear that the act was sinful at the most basic level because it was disobedience, a direct rejection of the stated will of God. God tells Adam that the consequences he receives are because he ate of the tree from which he was commanded not to eat (3:17).&lt;/p&gt;
&lt;p&gt;Perhaps the more interesting question, then, is why disobedience to God is a sin. As Christians, we acknowledge that the Bible teaches us this truth. Digging deeper is helpful in understanding many things about God and the nature of both humanity and the shape of the world we inhabit. To describe why disobedience is sinful, though, requires that we first define what sin &lt;em&gt;is&lt;/em&gt;. Sin is, at the most basic level, failure—missing the mark, as the Greek word would have it. The next question, then, is: &lt;em&gt;Failure at what?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sin is failure to be what humans were (and still are) meant to be—a mystery of ages, to which we have the answer. Genesis tells us exactly who we humans are. We are made in the image of God. We are to be small icons of divine glory. The divinity we are meant to recapitulate in miniature exists in perfect harmony, is completely wise and wholly good, and exercises utter sovereignty. Women and men are meant likewise to exist in true harmony, to be wise in right measure and truly good, and to exercise sovereignty in our appointed spheres. This is what it &lt;em&gt;is&lt;/em&gt; to be human: to do as God does in the ways he appoints in the world he made.&lt;/p&gt;
&lt;p&gt;Thus, to &lt;em&gt;fail&lt;/em&gt; at that task is no small thing. It is to fail in the most significant way possible. Worse still, to fail as Adam and Eve did (and as we all have ever since) can only happen in a conscious act. Yes, our natures are now so corrupted that we all sin incidentally, too. But we all of us sin on purpose. Our first father and mother did not fail accidentally. They willfully rejected the very reason for their existence and spat in the face of the author of that existence. (Here is the source of the human struggle for existential meaning and the dread of meaningless that plagues us.) They rejected both the shape of reality and the one who made reality. They rebelled. They became traitors against the universe’s God.&lt;/p&gt;
&lt;p&gt;Their sin, then, was not only disobedience. There are times when disobedience might be right: one &lt;em&gt;should&lt;/em&gt; reject unjust commands. This, however, was not such a command. Their act of disobedience included both mistrust of most trustworthy God and self-exaltation over and against the only exalted God. God does not only demand our allegiance, he &lt;em&gt;deserves&lt;/em&gt; it. He requires our worship not because he is vain, but because to worship anything else, however lovely, is to do injury to the object of that worship, to ourselves, and to the Triune Godhead. Adam and Eve’s eating of the fruit of the tree of the knowledge of good represented precisely that offense. They rejected God’s sovereignty, his wisdom and goodness, and even fellowship with him. They rejected their own sphere of sovereignty, chose quick knowledge over wisdom, deceit over goodness, and treachery over communion.&lt;/p&gt;
</content><category term="[M. Div."></category><category term="SEBTS]"></category></entry><entry><title>From Creation to Consummation</title><link href="http://www.chriskrycho.com/2014/from-creation-to-consummation.html" rel="alternate"></link><published>2014-01-24T22:05:00-05:00</published><updated>2014-01-24T22:05:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-24:/2014/from-creation-to-consummation.html</id><summary type="html">The structure of Psalm 24 is not obvious—but the journey is profoundly rewarding. David beautifully leads us from creation to  consummation.</summary><content type="html">&lt;p&gt;Some texts are a bit more mysterious than they might at first appear. One such is Psalm 24, at least for me. The poem has three basic sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a declaration of Yahweh’s possession of and sovereignty over the world he made (vv. 1–2)&lt;/li&gt;
&lt;li&gt;a reflection on the character of one who may approach Yahweh (vv. 3–6)&lt;/li&gt;
&lt;li&gt;a call to and an act of exultation in the glory of Yahweh (vv. 7–10)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At first glance, there is no obvious connection between these three elements. The third might seem to follow from the first to some extent, but the emphases are all different. The first section addresses Yahweh’s rule over creation; the last enjoins gates and doors&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; to worship him on the basis that he —Yahweh of hosts—is the king of glory. The middle section, on the character of those who can approach him, seems completely disconnected from either.&lt;/p&gt;
&lt;p&gt;Yet David, the author of the Psalm, was not an idiot. When we find passages like this in Scripture and cannot at first see how to put them together, it behooves us to take a step back and consider them at further length.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; David intended his poem to be understood, and not by God only. The pieces &lt;em&gt;do&lt;/em&gt; relate; the question is simply &lt;em&gt;how&lt;/em&gt; they fit. As is the way of all good poetry, there are holes here, and they require of the audience a bit more engagement than would a direct statement of David’s intent.&lt;/p&gt;
&lt;p&gt;Sure enough, these pieces do relate. Each points us to a different aspect of Yahweh’s nature. Indeed, the outline I wrote out above is actually a good summary of David’s intent here. In verses 1–2, we see that Yahweh owns the world he made. He is both creator and ruler. He is sovereign over creation, including the men and women who live in this world. Then, in verses 3–6, we see his moral character. The requirements for anyone to approach Yahweh’s holy place tell us just as much about Yahweh as about those who seek him: he is holy, he has clean hands (meaning he has not done nothing wrong), he is pure in heart, he rejects all idolatry, and he is utterly trustowrthy. Moreover, he blesses those who are like him; he makes them righteous and saves them. Finally in verses 7– 10, we see that he is glorious, strong and mighty, a king. He is not just &lt;em&gt;any&lt;/em&gt; king, but &lt;em&gt;the&lt;/em&gt; King of glory. He owns glory; it is his and no other’s. He is stronger than any who would oppose him. He will triumph over his enemies. He will come into the city and take up his reign.&lt;/p&gt;
&lt;p&gt;In short, the Psalm moves us from creation to consummation. Yahweh made and rules over the world. He calls his people to be holy, as he is holy, and he makes them righteous and saves them. He will come into his glory as the King. And David gets us there without ever coming out and saying those bare facts; the poem moves our hearts the more thoroughly because he makes us work for us, and because he does so with such aching beauty.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Lift up your heads, O gates!&lt;br /&gt;
    And lift them up, O ancient doors,&lt;br /&gt;
    that the King of glory may come in.&lt;br /&gt;
Who is this King of glory?&lt;br /&gt;
    Yahweh of hosts,&lt;br /&gt;
    he is the King of glory! Selah. (Psalm 24:9–10)&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hallelujah.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Over-familiarity with the text has also perhaps dulled us to the curiosity of this exhortation. Perhaps there was something going on culturally we are missing today, but this is the only place in Scripture that anyone addresses gates and doors, to my knowledge.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Of course, that assumes we are paying enough attention to recognize that the poem is doing something unusual in the first place—and, dare I say it, we too rarely are paying heed so closely.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Foreign Wives and Real Devotion</title><link href="http://www.chriskrycho.com/2014/foreign-wives-and-real-devotion.html" rel="alternate"></link><published>2014-01-23T07:28:00-05:00</published><updated>2014-01-23T07:28:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-23:/2014/foreign-wives-and-real-devotion.html</id><summary type="html">The latter half of Ezra explains how it is that the people of Israel turned away from their pattern of idolatry—and it wasn't pretty or easy. Becoming holy rarely is.
</summary><content type="html">&lt;blockquote&gt;
&lt;div class="line-block"&gt;My son, give me your heart,&lt;br /&gt;
    and let your eyes observe my ways.&lt;br /&gt;
For a prostitue is a deep pit;&lt;br /&gt;
    a foreign woman is a narrow well.&lt;/div&gt;
&lt;p&gt;(Proverbs 23:26–27, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;The latter half of Ezra explains how it is that the people of Israel &lt;a href="/2014/justice-mercy-same-stroke/"&gt;turned away&lt;/a&gt; from their pattern of idolatry—and it wasn’t pretty or easy. After the people began building the temple again under the leadership of Haggai and Zechariah, after the favor shown to the Jews by the kings Darius and Artaxerxes, and after Ezra made his God-favored journey from Babylon to Jerusalem bearing more gifts and entrusted to teach the people the law, everything once again nearly went wrong because of an old pattern the Jews were embracing. Despite the clear instruction of the Law of Yahweh, they were intermarrying with the people around them.&lt;/p&gt;
&lt;p&gt;The instruction not to intermarry was not racism, even if some abused it to that end. Those who did missed the point entirely, for Yahweh had always welcomed the outsider into his people. Indeed, the very existence of Israel was predicated on Yahweh’s choosing for himself someone who was &lt;em&gt;not&lt;/em&gt; following him. Likewise, the kingly line had in it multiple outsiders (most notably Rahab and Ruth). No, the point was not the superiority of the Jews over the people around them—a notion that their history should have made clear was laughable in any case—but the protection of their &lt;em&gt;worship&lt;/em&gt;. Every time that Israelites began intermarrying with the people around them, they also began following the worship practices of the people around them. They started worshipping idols, every single time.&lt;/p&gt;
&lt;p&gt;Thus, the prohibition on intermarriage was not a matter of racial distinction, but of religious distinction, and Israel’s history bore out the necessity of the policy. Yet in Ezra 9, we find that once again they were slipping into the same old pattern. Ezra’s response might be startling without that history. Even apart from a pattern of this same folly, though, his response is the right one from a shepherd when God’s people disobey him. There is a lesson here for pastors and ministers: Ezra’s first response was grief and a prayer of corporate repentance. Only after offering that prayer did he move to deal with the sin.&lt;/p&gt;
&lt;p&gt;The mundane&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; response Ezra made is interesting and has been much debated, given God’s stated opposition to divorce. While we might speculate about the outcomes of the decision for the women and children affected by requiring these Israelite men to put them away, we have no grounds to do so. Certainly we can say that the right thing for these men to do would have been to provide for the families they had created, even while no longer having them as spouses. As to what they actually did, though, we simply have no basis for speaking one way or another. What we can say with confidence is that Ezra’s actions here underscore the seriousness with which he took keeping the Law of God. Holiness mattered to him—and not just his own personal holiness, but the holiness of the people of God.&lt;/p&gt;
&lt;p&gt;So it ought to be for us, especially those of us who seek to be teachers and leaders within the church. If we are to be the bride of Christ, we must seek to be &lt;em&gt;wholly&lt;/em&gt; pure. A bride does not care only that her face and one of her dress sleeves are white; she cares that her whole appearance is radiant and beautiful when she meets her groom. So let us diligently pursue both our own holiness and that of our brothers and sisters in Christ.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I’ve chosen the Hebrew original rather than the usual translation of “adulteress”—you’ll see why momentarily.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I have chosen “mundane” rather than “practical” because the two are not the same, and the latter would imply that Ezra’s prayer was not practical, when in fact prayer is often the most practical thing we can do.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="devotions"></category></entry><entry><title>Justice and Mercy in the Same Stroke</title><link href="http://www.chriskrycho.com/2014/justice-mercy-same-stroke.html" rel="alternate"></link><published>2014-01-22T07:40:00-05:00</published><updated>2014-01-22T07:40:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-22:/2014/justice-mercy-same-stroke.html</id><summary type="html">&lt;p&gt;The first four chapters of Ezra make for an interesting contrast with all the chapters of the Chronicles that immediately precede it. Though some of the pages are taken up with similar, &lt;a href="/2014/grappling-%20with-genealogies/"&gt;uninteresting(-at-least-to-us)&lt;/a&gt; details of the number of people who returned from the Exile to rebuild the temple of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The first four chapters of Ezra make for an interesting contrast with all the chapters of the Chronicles that immediately precede it. Though some of the pages are taken up with similar, &lt;a href="/2014/grappling-%20with-genealogies/"&gt;uninteresting(-at-least-to-us)&lt;/a&gt; details of the number of people who returned from the Exile to rebuild the temple of God under the command of Cyrus, other parts of this passage indicate the significant change that had taken place in the people of Judah and Benjamin and Levi during their sojourn far from their homes. In short: they had learned not to worship other gods. This becomes increasingly clear throughout Ezra-Nehemiah, and as one comes to the New Testament it is obvious that the lesson did indeed stick.&lt;/p&gt;
&lt;p&gt;This is not to say that the Jews had no ongoing religious issues. They did, to be sure. But these issues were not the issue of idolatry, at least in the strict sense of the word. Tim Keller would likely argue that the issues they had were still matters of idolatry of a sort, and I would be inclined to agree with him; but in any case, they were no longer putting up Asherah poles or making sacrifices to Baal or Molech. There were many consequences of the Exile, including the end of the Davidic line of kings over Judah, the loss of the Ark of the Covenant, and the destruction of the First Temple. Most important of all, though, was this reality that the Jews never again engaged in large-scale worship of gods besides Yahweh. Their functional henotheism gave way at last to true monotheism.&lt;/p&gt;
&lt;p&gt;It is amazing to me—and wonderful—that the result of God’s judgment was not only the punishment of the judged but also their hearts being changed. He used a dreadful consequence to bring about real, lasting change in his people. It strikes me that sometimes we see exactly this, albeit on a smaller scale, in our own lives. There are times when we run far astray, and in his &lt;em&gt;mercy&lt;/em&gt; he judges us, so that we will return to him. Now, there is a final judgment beyond which there is no return, but in the interval, how great his grace! This is a double blessing to us who follow Christ: First, it reminds us that if we stray, he is faithful to send opportunity after opportunity (usually increasingly &lt;em&gt;painful&lt;/em&gt; opportunity) for our repentance. Second, it gives us reason not to go astray at all, realizing that the further we run, the more difficult will be our judgment. In both, we are reminded to worship our God: who judges justly and mercifully in the same stroke.&lt;/p&gt;
&lt;p&gt;*[henotheism]: the belief in and worship of a single God while accepting the existence or possible existence of other deities that may also be worshipped. (see Wikipedia: http://en.wikipedia.org/wiki/Henotheism)&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Generation by Generation</title><link href="http://www.chriskrycho.com/2014/generation-by-generation.html" rel="alternate"></link><published>2014-01-21T12:05:00-05:00</published><updated>2014-01-21T12:05:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-21:/2014/generation-by-generation.html</id><summary type="html">&lt;p&gt;The concluding chapters of 2 Chronicles are just as mixed a bag as all the chapters that preceded them. Over and over again, kings rise and fall; generation to generation, the fortunes of the people rise and fall with their fidelity to Yahweh. From Hezekiah’s reliance on Yahweh and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The concluding chapters of 2 Chronicles are just as mixed a bag as all the chapters that preceded them. Over and over again, kings rise and fall; generation to generation, the fortunes of the people rise and fall with their fidelity to Yahweh. From Hezekiah’s reliance on Yahweh and God’s corresponding triumph over the armies of Sennacherib of Assyria, to the final end of the Judaic kingdom&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; in the rebellions of Jehoiakim and Jehoiachin, the same themes that dominated the rest of the book are on full display here. Reliance on Yahweh leads to salvation and deliverance. Abandoning Yahweh leads to destruction. The narrative of human history, personal and corporate, played out time and again in the public history of Israel.&lt;/p&gt;
&lt;p&gt;There are many things that could be said of these chapters, but two points in particular caught my attention, both of which have been present throughout the book and so warrant some remarks here at the end.&lt;/p&gt;
&lt;p&gt;First, the transition from generation to generation was rarely smooth. I do not mean merely the actual intrigues of the courts, of which there were clearly quite a few, what with multiple kings suffering assassination at the hands of their promptly-executed servants. Rather, I mean the spiritual succession. There are a few generations recorded here where multiple successive kings followed Yahweh wholeheartedly. Mostly, though, the kings bounced back and forth between fidelity and faithlessness (with no few examples of simple vacillation). Each father’s son charted his own course. As a father myself, this is simultaneously a cause for hope and reason to pray the more faithfully for my own children. I must pray for them and seek earnestly to make disciples of them because there is no guarantee that they will follow Christ simply because I do. By the same token, there is hope that they will walk with God despite my own failings and follies. No child is doomed or blessed to walk her father’s path; she makes her own choices.&lt;/p&gt;
&lt;p&gt;Second is the sheer efficacy of the Scriptures. Every time that the people were confronted with the word of God, they moved to repentance. They tore down idols, repaired the temple, and engaged once again in the practices outlined by the Law for purification and sacrifices. Time and again, it was the word of God that convicted people. It is tempting to try to stir people up to love and good works by our own efforts, but nothing we do will ever be as effective as the word of God, which is the Spirit’s appointed means for sanctifying his people. For every minister in the world, and indeed for every believer in the world, this ought to be an enormous encouragement. We do not need to be people of unusual skill at public speaking, or especially effective debators. We simply need to know the word of God and lean hard on it, trusting that the Holy Spirit will use it. Yes, we should grow in our knowledge and understanding, and seek to become more skillful in the ways in which we interact with others. Ultimately, though, it is God’s words that prove effective for turning people to him. That is good news indeed.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Yes, there was a “king” in Judea later, but the domain of which Herod was a representative was not Judaic or Davidic but instituted by outsiders for their own ends.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Ending Badly</title><link href="http://www.chriskrycho.com/2014/ending-badly.html" rel="alternate"></link><published>2014-01-20T23:30:00-05:00</published><updated>2014-01-20T23:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-20:/2014/ending-badly.html</id><summary type="html">&lt;blockquote&gt;
&lt;div class="line-block"&gt;Who can say, &amp;quot;I have made my heart pure;&lt;br /&gt;
    I am clean from my sin&amp;quot;?&lt;/div&gt;
&lt;p&gt;(Proverbs 20:9, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yet again, the annals of the kings of Judah point to the need for a different kind of king—one who is faithful in the long run. Joash was a boy …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;div class="line-block"&gt;Who can say, &amp;quot;I have made my heart pure;&lt;br /&gt;
    I am clean from my sin&amp;quot;?&lt;/div&gt;
&lt;p&gt;(Proverbs 20:9, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yet again, the annals of the kings of Judah point to the need for a different kind of king—one who is faithful in the long run. Joash was a boy when he became king, rescued from the threat of death at the hands of his own power-mad grandmother by a faithful priest. For the days of that priest, he remained faithful, but after his death, he fell so far that he had that priest’s son murdered for daring to “speak truth to power” in pointing out the folly of Joash’s idolatry. How far must one fall to kill the son of the man who saved your life and put you on the throne? Yet this is how idolatry works. It corrupts and twists our senses, until we call evil good and good evil.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But when he was strong, he grew proud, to his destruction. For he was unfaithful to the &lt;span class="smcp"&gt;Lord&lt;/span&gt; his God and entered the temple of the &lt;span class="smcp"&gt;Lord&lt;/span&gt; to burn incense on the altar of incense. (2 Chronicles 26:16, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Uzziah follows the same pattern laid out by so many kings of Judah before him. He started well, but finished badly. Of the many themes of the book of Chronicles, one that comes home time and again is the risk of setting out to follow God and being turned aside in the course of life. Deadliest of all the lures for these kings was always the temptation to pride and confidence in their own strength. I see this, watching successful men and women today. How often do we choose people to lead us because we recognize their godliness and character, and then see them stumble into folly as pride consumes them? Too often. The example stands as a warning to all of us, but especially to any who wish to lead. If God grants us success—especially the kind of success so prized by the world and by our flesh—we must be doubly wary against the poisonous seeds of pride that so easily take root in our hearts.&lt;/p&gt;
&lt;p&gt;Perhaps most striking here is the particular way in which Uzziah fell. In this case, it was not as in so many others a matter of folly in battle. Rather, it was folly in worship. Uzziah seems to have come under the impression that his military victories indicated such a degree of God’s favor—such a degree of his own righteousness before God—that he could disregard the ways God had commanded his people to approach him. He disregarded the supreme holiness of God, and took lightly the laws that Yahweh had laid out. It cost him everything on which he had prided himself; he spent the end of his life a leper alone. God’s response to Uzziah’s actions here serve as a stark reminder to me not to take worship lightly, and not to dishonor God by taking &lt;em&gt;him&lt;/em&gt; lightly. He is holy, and we ought never dare to trifle with him.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Steadfast love and faithfulness preserve the king&lt;br /&gt;
    and by steadfast love his throne is upheld.&lt;/div&gt;
&lt;p&gt;(Proverbs 20:28)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whose steadfast love and faithfulness preserve a king, and whose steadfast love upholds the throne of a king? It is Yahweh: a God merciful and gracious, abounding in steadfast love and faithfulness. It is the king who is above all the other kings. Proverbs points in unison with the Chronicles to the Messianic king. Praise be to God for his work in Christ Jesus. Hallelujah for a king who will &lt;em&gt;not&lt;/em&gt; turn his back on his God or on his people, who will not lead the people into idolatry or presumptuous worship, but who is himself &lt;em&gt;able&lt;/em&gt; to serve as priest, prophet, and king.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Invest!—Memorizing Scripture</title><link href="http://www.chriskrycho.com/2014/invest-memorizing-scripture.html" rel="alternate"></link><published>2014-01-19T23:05:00-05:00</published><updated>2014-01-19T23:05:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-19:/2014/invest-memorizing-scripture.html</id><summary type="html">&lt;p&gt;Tonight, I am pausing from my normal discussion of the passages I’ve been reading, to discuss instead how Jaimie and I have begun memorizing Scripture together this spring.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Both of us have been persuaded of the value of memorizing Scripture for a long time (since before we met …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tonight, I am pausing from my normal discussion of the passages I’ve been reading, to discuss instead how Jaimie and I have begun memorizing Scripture together this spring.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Both of us have been persuaded of the value of memorizing Scripture for a long time (since before we met, and indeed since before we were in college).&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Jaimie’s private Christian school included Scripture memorization as part of its curriculum, and the church at which I grew up likewise emphasized it as a useful discipline. Accordingly, both of us learned at relatively young ages to practice memorizing verses from the Bible. We may not have been AWANA champions, but both of us have a good bit of the Bible stored in our memories.&lt;/p&gt;
&lt;p&gt;During college, as I studied the Bible and studied hermeneutics, I became increasingly convinced that the approach I had been taking to memorizing Scripture was, if not exactly &lt;em&gt;unhelpful&lt;/em&gt; (learning the Bible is a good move, full stop), nonetheless not nearly as helpful as it could be. Specifically, my emphasis on memorizing a verse here and a verse there—even when I went so far as to memorize the whole sentence—seemed to me to prevent me from really remembering the full meaning of the passage in question. Several times, I discovered that a verse I had memorized meant something other than what I had thought, as I studied its context carefully. It did not take but a few of these incidents for me to decide that I wanted to try something different. Accordingly, I decided to stoip memorizing individual verses or short passages, and to try instead to memorize a book of the Bible. That way, every single verse would automatically be in context for me.&lt;/p&gt;
&lt;p&gt;You are probably thinking I was crazy, and/or (for those of you who know me well) that it is a typically over-the-top Chris Krycho thing to do. In some ways that might be true, at least in the details of my implementation: I jumped in with Hebrews, since it is one of my favorite books in the Bible. Things were actually going fairly well with that project; I had succesfully memorized up through chapter 7 and was working on verse 8… and then I graduated from college. Suddenly, the 15–20 minutes each day in which I had been accustomed to walking around on campus—the time in which I had been practicing my Scripture memory—was gone. I fell out of the habit, and never finished memorizing the book.&lt;/p&gt;
&lt;p&gt;Fast forward three and a half years. Jaimie and I moved to North Carolina, and we started attending and soon joined &lt;a href="http://www.fbcdurham.org/"&gt;First Baptist Church of Durham&lt;/a&gt;. During our membership class, we received an interesting little booklet written by our senior pastor, Andy Davis, &lt;a href="http://www.fbcdurham.org/wp-content/uploads/2012/05/Scripture-Memory-Booklet-for-Publication-Website-Layout.pdf"&gt;&lt;em&gt;An Approach to Extended Memorization of Scripture&lt;/em&gt;&lt;/a&gt;. Curious, I read through it that evening. Pastor Davis outlined there both the benefits of memorizing Scripture and—to my surprise and interest—basically the same concerns I had had about memorizing individual passages out of context. But then he did something profoundly helpful: he also provided a practical, straightforward system to help people learn to memorize extended sections of Scripture (i.e. &lt;em&gt;books&lt;/em&gt;). And not just crazy, over-the-top, intense people like Chris Krycho. Ordinary, not so strange people.&lt;/p&gt;
&lt;p&gt;Last fall, Jaimie and I started trying to memorize Philippians together. However, we did not have a system or a plan, and the attempt ended up going off the rails. We were moving at different paces, we were not helping each other review, and the whole thing eventually just sort of slid to a halt in the face of our busy lives and our lack of a plan. As part of our start to the new year, though, I suggested that we look at Pastor Davis’ materials and see if they would work for us. As it turns out, they do—they work really, really well.&lt;/p&gt;
&lt;p&gt;Jaimie and I are 12 verses into Colossians 1, two weeks along. The system, simple as it is, has been easy to keep up each day, and has helped us stay in sync. We review together pretty much every day, and it has been a real joy. Picking a shorter book helps a lot, too: it feels more doable. By the time our next child is born in early June (Lord willing), we will have finished the book and be reviewing it.&lt;/p&gt;
&lt;p&gt;The basic system itself is simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pick a book. (Start short. Dr. Davis recommends Ephesians, and I certainly wouldn’t go longer than that.)&lt;/li&gt;
&lt;li&gt;Day 1: read 1:1 ten times out loud, then repeat it ten times from memory.&lt;/li&gt;
&lt;li&gt;Day 2: repeat 1:1 ten times from memory, checking the text if you need to. Once you finish that, read 1:2 ten times out loud, and then repeat it ten times from meory.&lt;/li&gt;
&lt;li&gt;Days 3 and following: repeat all previously memorized verses once from memory. Then repeat the previous day’s verse 10 times from memory. Then read the next verse ten times out loud, and then repeat it ten times from memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way, one always reviews previous material in the book, but without it taking overly long. For example, on day 6, one would review 1:1–5 from memory, say 1:5 another 9 times out loud from memory, read 1:6 out loud ten times, and then repeat 1:6 ten times from memory.&lt;/p&gt;
&lt;p&gt;To be honest, this system works &lt;em&gt;far&lt;/em&gt; better than the approach I had been taking on my own, both when I was memorizing Hebrews years ago and when I was working on Philippians last fall. The specific, active repetition helps solidify the verses in my head, which is important, especially because there are some verses that are just hard.&lt;/p&gt;
&lt;p&gt;Pastor Davis outlines a good deal more in his &lt;a href="http://www.fbcdurham.org/wp-content/uploads/2012/05/Scripture-Memory-Booklet-for-Publication-Website-Layout.pdf"&gt;booklet&lt;/a&gt;, including arguing for the value of memorizing Scripture, why tackling longer stretches is helpful, and discussing both how to learn longer books and how to remember the books one has already learned. I commend this approach to you, even as I urge you strongly to consider making Scripture memory a regular spiritual discipline.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;We actually tried starting this in the fall. It didn’t work out so well. Keep reading.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;If you are not persuaded, I am not here going to make a full attempt to persuade you. Suffice it to say that I find it enormously helpful to have God’s revelation stored up in my mind—I find that the Holy Spirit often uses it to convict me or encourage me throughout the day, and that it is incredibly valuable in interacting with others, whether building up fellow believers or speaking with those who do not believe.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="devotions"></category></entry><entry><title>The Life and Death of Words</title><link href="http://www.chriskrycho.com/2014/life-and-death-of-words.html" rel="alternate"></link><published>2014-01-18T22:55:00-05:00</published><updated>2014-01-18T22:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-18:/2014/life-and-death-of-words.html</id><summary type="html">&lt;p&gt;It is no exaggeration to say that I have spent more time thinking on the words Proverbs assigns to warning fools about the quantity of their speech than to almost any other part of the Proverbs.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I have many faults, but one of the most significant and ongoing is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is no exaggeration to say that I have spent more time thinking on the words Proverbs assigns to warning fools about the quantity of their speech than to almost any other part of the Proverbs.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; I have many faults, but one of the most significant and ongoing is a tendency to be quick to speak and slow to hear (and yes, quick to become angry)—to invert the order commended by James in the New Testament. This is no small thing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Death and life are in the power of the tongue,&lt;br /&gt;
    and those who love it will eat its fruits. (Proverbs 18:21)&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Though I have sometimes heard this verse misused (as though to suggest a mystical power in our speech—a view for which I think there is no warrant), the plain meaning alone is enough to give a person with my proclivities pause. If my one of my chief follies is the tendency to speak too freely and without sufficient consideration, what death have I wrought? Where might I have brought life instead? When I speak with Jaimie or with Ellie, when having long talks with friends, when offering my thoughts publicly, my words matter. &lt;em&gt;All&lt;/em&gt; words matter. Jesus warned the Pharisees (and warns us, lest we be like them):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I tell you, on the day of judgment people will give account for every careless word they speak, for by your words you will be justified, and by your words you will be condemned. (Matthew 12:36–37, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The words one chooses to use—the words &lt;em&gt;I&lt;/em&gt; choose to use—can build others up or cut them down. They can encourage, or they can wound. They can bring life or death.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;A fool takes no pleasure in understanding,&lt;br /&gt;
    but only in expressing his opinion.&lt;br /&gt;
&lt;br /&gt;
A fool’s lips walk into a fight,&lt;br /&gt;
    and his mouth invites a beating.&lt;br /&gt;
A fool’s mouth is his ruin,&lt;br /&gt;
    and his lips are a snare to his soul.&lt;br /&gt;
&lt;br /&gt;
If one gives an answer before he hears,&lt;br /&gt;
    it is his folly and shame.&lt;/div&gt;
&lt;p&gt;(Proverbs 18:2, 6–7, 13)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is a bit painful to think how often I have been a fool in these terms. It is a caution to me in writing these very posts. Yes, it is good to take time to reflect on the things I am learning from the Scriptures. It is, I think, profitable to post these particular reflections publicly.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; There is, however, a serious danger that my writing could be an act of folly, and the more so the quicker I am to write before carefully considering the matter at hand.&lt;/p&gt;
&lt;p&gt;When I write on Scripture, I have one sort of responsibility: to honor the text, and in so doing to honor the one who authored the text. Few of us should seek to be teachers, because we will be held to a higher standard of judgment for our words. If I speak falsely of Scripture, there is a real chance that I will do harm to others’ spiritual health. When I write on other topics, I have a different sort of responsibility, but one no less weighty for that. If I publicly opine on politics, address personal situations in our lives, or discuss the contours of evangelical Christianity, my words will undoubtedly be read by people who stand either to benefit or to be injured by those words. Again: to write without careful consideration would be to risk bringing spiritual harm. In both cases, I would be in danger of dishonoring the God who gave us words.&lt;/p&gt;
&lt;p&gt;This is particularly important for those of us who love words. I am obsessed with the beauty and power of human language, awed by the gift God bestowed on us in the creative potential of phonemes and clauses and sentences and paragraphs. I can (and, my friends can all wearily attest, &lt;em&gt;do&lt;/em&gt;) wax eloquent at the drop of a pin. This delight is a good thing; it is a part of the &lt;em&gt;imago dei&lt;/em&gt; in me. Yet my words are not to be their own ends. They, like I myself, exist for a cause greater than that. They are meant to serve God. If they do not, they will bring death. If they do, they will bring life.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;The only other repeated warning I have considered as carefully is that on sexual immorality—an area in which all young people are especially tempted.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It would not necessarily be profitable to post &lt;em&gt;every&lt;/em&gt; reflection publicly. Some of them would do the public no good, and posting them would be only a way of seeking attention in a way that would feed those selfsame sins. Confession is good. But confession is done with brothers and sisters in close fellowship—not with the world at large.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="devotions"></category></entry><entry><title>Every King Broken</title><link href="http://www.chriskrycho.com/2014/every-king-broken.html" rel="alternate"></link><published>2014-01-17T23:55:00-05:00</published><updated>2014-01-17T23:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-17:/2014/every-king-broken.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;The attentive reader will no doubt have noted that I missed a night last night, and am accordingly skipping over the relevant chapters. I fell asleep just after reading said chapters—so the &lt;em&gt;most&lt;/em&gt; important aspect of this project, I still accomplished. Huzzah. As for why I got to it …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;The attentive reader will no doubt have noted that I missed a night last night, and am accordingly skipping over the relevant chapters. I fell asleep just after reading said chapters—so the &lt;em&gt;most&lt;/em&gt; important aspect of this project, I still accomplished. Huzzah. As for why I got to it so late (and why I am again tonight)… that will have to wait for next Tuesday to explain.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;A great deal of the latter parts of the Chronicles—as in Kings—are concerned with the deeds men who decided &lt;em&gt;not&lt;/em&gt; to submit to Yahweh. Solomon’s son, Rehoboam, set the tone for much of what followed. He began by obeying and worshiping God, but all too soon he went his own way. The Chronicler summarizes Rehoboam’s turn in a single sentence that I found strikingly provocative:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the rule of Rehoboam was established and he was strong, he abaondoned the law of the &lt;span class="smcp"&gt;Lord&lt;/span&gt;, and all Israel with him. (2 Chronicles 12:1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;His deeds bore this out. Whereas in the beginning of his reign Rehoboam was sensible enough to obey Yahweh when God spoke to the king through a prophet and warned him not to go to war with Jeroboam of Israel, his habits had changed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There were continual wars between Rehoboam and Jeroboam (2 Chronicles 12:15b)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Right there we have a perfect summary not only of the folly of so many kings of Judah in the years that followed Rehoboam, but of many of us as well. We turn to God in desperation in times of trouble, or when we are seeking security, but as soon as times are good and things seem to be going well with us, we are quick to abandon him. We begin to disobey, deciding our way is better and relying on our own wisdom. Never mind that we came to whatever point of success we have achieved only because God granted it to us in his grace.&lt;/p&gt;
&lt;p&gt;The next chapter records the reign of Rehoboam’s son Ahijah—a man who, it seems, recognized the power of Yahweh but did not fully submit to his rule. He happily relied on Yahweh when waging war, but (like his father, grandfather Solomon, and great-grandfather David before him) he rejected God’s law when it came to taking multiple wives.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; This sort of going halfway &lt;em&gt;also&lt;/em&gt; seems to characterize us all too frequently. We are happy to accept God’s help, and may even be zealous for him in some ways, but too often are unwilling to submit to his law.&lt;/p&gt;
&lt;p&gt;Ahijah’s son Asa provides one more picture of a way that we often go wrong. He began exceedingly well. He relied on Yahweh for victory in war, and he also faithfully pursued his ways at home. He led Judah to break down their altars to other gods and pledge themselves to the worship of Yahweh, the one true God. He exiled even his own grandmother because of her devotion to idols. In short, if we had only chapter 15, we would think Asa a model king—but the Chronicler adds an unhappy ending to the story. As Asa grew old, he turned away from the wisdom of his youth and decided to rely not on the strength of God for his country’s defense but on his own political machinations and the strength in arms of neighboring nations.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; That he was now going thoroughly off the rails becomes quite clear as one reads that he tortured the priest who told him that Yahweh disapproved of his treaty, and that he refused even in his illness to seek God’s aid. There is a warning here: starting well does not guarantee one will finish well.&lt;/p&gt;
&lt;p&gt;Over and over again, as one reads through the Chronicles with Yahweh’s resounding promise to David in mind—that promise of a son whose throne would be established forever—one is left disappointed. Beginning with Solomon, every single king misses the mark in some way. Either he flatly rejects Yahweh, or he simply finds an area in which he will not obey, or he falls away from wisdom as he ages. On and on go their follies—the defects in character and failings in every virtue. But in this way, Rehoboam, Ahijah, and Asa all serve us still. They point us to the one king who did &lt;em&gt;not&lt;/em&gt; fail, the man from the line of David, of the tribe of Judah, the great-grandson of Abraham, the offspring of the woman, born of a woman. That king never sinned. No matter how many years passed, he remained steadfast in the face of temptation to err (and remains steadfast in his prayers for us). He has but one bride, whom he awaits still. Jesus the Messiah is that King.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Perhaps it is just me, but the idea of having multiple wives is somewhat terrifying. Jaimie is more than enough mystery for one lifetime. I think two women would leave me confounded without ceasing.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Note that making alliances is not an inherently ungodly thing to do. The trick was that here it &lt;em&gt;clearly&lt;/em&gt; demonstrated Asa’s lack of faith in Yahweh to save Judah, standing in rather stark contrast to his behavior in his youth.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Who Can Dwell With God?</title><link href="http://www.chriskrycho.com/2014/who-can-dwell-with-god.html" rel="alternate"></link><published>2014-01-15T23:55:00-05:00</published><updated>2014-01-15T23:55:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-15:/2014/who-can-dwell-with-god.html</id><summary type="html">&lt;p&gt;Psalm 15, like many of the Psalms, has a double purpose. It points us simultaneously to whom we ought to aim to be as we strive to be holy as God is holy, and to Christ, the only one who has ever perfectly walked out these words. Walking through the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Psalm 15, like many of the Psalms, has a double purpose. It points us simultaneously to whom we ought to aim to be as we strive to be holy as God is holy, and to Christ, the only one who has ever perfectly walked out these words. Walking through the passage tonight provided an opportunity both to pray for the Holy Spirit to make me more like these words, and to worship the Holy One of God who has actually fulfilled them.&lt;/p&gt;
&lt;p&gt;David opens with a provocative, challenging question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Oh &lt;span class="smcp"&gt;Lord&lt;/span&gt;, who shall sojourn in your tent?&lt;br /&gt;
    Who shall dwell on your holy hill?&lt;/div&gt;
&lt;p&gt;(Psalm 15:1, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Who indeed? The Psalms have already shown us&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; the image of a holy God who will brook no injustice and who hates sin passionately, but who is also the covenant-keeper and salvation of Israel.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;He who walks blamelessly and does what is right&lt;br /&gt;
    and speaks truth in his heart; …&lt;/div&gt;
&lt;p&gt;(Psalm 15:2, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is quite the target to hit already. Who &lt;em&gt;always&lt;/em&gt; walks blameless and does what is right? Not I. Who is &lt;em&gt;never&lt;/em&gt; self-deceived (still less never deceitful toward others)? Again, not I.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;…who does not slander with his tongue&lt;br /&gt;
    and does no evil to his neighbor,&lt;br /&gt;
    nor takes up a reproach against his friend; …&lt;/div&gt;
&lt;p&gt;(Psalm 15:3, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All of us have slandered our neighbors and taken up a reproach against friends. We have spoken cruelly of those we love, been harsh in our assessments of people over whom we have no such right to stand in judgment. We have been unkind to friends and held against them their sins. All of us have done evil to our neighbors—there is no one among us who has escaped and managed to avoid ever harming anyone near us.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;…in whose eyes a vile person is despised,&lt;br /&gt;
    but who honors those who fear the Lord…&lt;/div&gt;
&lt;p&gt;(Psalm 15:4a, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How many of us can truly say that we have this kind of heart—that we always earnestly oppose those who rebel against God, and honor those who fear Him? Again: not I. Too often I make excuses for those who do not know God, rather than call their idolatrous and treacherous way of life as it is. Too often I am impatient and unkind and derogatory toward those who &lt;em&gt;do&lt;/em&gt; walk with God.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;who swears to his own hurt and does not change;&lt;br /&gt;
    who does not put out his money at interest&lt;br /&gt;
and does not take a bribe against the innocent.&lt;br /&gt;
    He who does these things shall never be moved.&lt;/div&gt;
&lt;p&gt;(Psalm 15:4b–5, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How many of us have made a promise and then gone back on it because it became inconvenient? How many of us have, if not literally charged interest, then held it against people when it took them a long time to pay us back on money we lent them? To what extent are we &lt;em&gt;all&lt;/em&gt; complicit in crimes against the innocent, even when we ourselves have kept our hands clean—just by dint of our lives in a fallen world, as part of a fallen nation, where every year sees innocent lives lost at our hands?&lt;/p&gt;
&lt;p&gt;There is not much hope for any of us to stand on God’s holy hill even for a moment—still less to dwell there forever. But Christ has measured up to every line that David raised, and gone beyond them. He stands in our stead, his righteousness granted to us, our failings taken on his own body. His Spirit empowers us to pursue this kind of life: fleeing sin and pursuing the holiness of God. May we seek to look more like Christ, who alone has the right to sojourn in Yahweh’s tent and who alone has the right to dwell on his holy hill —but who has invited all of us in to the feast in that temple and to sit at his feet and eat the bread that satisfies on his mountain.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I take the view that the Psalms, in addition to being valuable in their own right individually, were organized by an editor who knew what he or she was about. That editor’s decisions about where to put the Psalms is often illuminating—much as it is with any other collection.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Practical Wisdom</title><link href="http://www.chriskrycho.com/2014/01-14-practical-wisdom.html" rel="alternate"></link><published>2014-01-14T23:10:00-05:00</published><updated>2014-01-14T23:10:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-14:/2014/01-14-practical-wisdom.html</id><summary type="html">&lt;p&gt;The Proverbs contain a striking mix of profound theological statements and practical, down-to-earth wisdom. Often the two come right next to each other,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and are both made all the more illuminating by way of the juxtaposition. The book’s pages also include no few beautiful gems of insight into …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Proverbs contain a striking mix of profound theological statements and practical, down-to-earth wisdom. Often the two come right next to each other,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and are both made all the more illuminating by way of the juxtaposition. The book’s pages also include no few beautiful gems of insight into the human condition. Some of each caught my attention tonight as I read through Proverbs 14.&lt;/p&gt;
&lt;section id="on-the-human-condition" class="level2"&gt;
&lt;h2&gt;On the human condition&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;The heart knows its own bitterness,&lt;br /&gt;
    and no stranger shares its joy.&lt;/div&gt;
&lt;p&gt;(Proverbs 14:10, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Even in laughter the heart may ache,&lt;br /&gt;
    and the end of joy may be grief.&lt;/div&gt;
&lt;p&gt;(Provebs 14:13, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both of these speak to realities we have all experienced. To be human in a fallen world is to be lonely at times—to know that one’s heart can never be shared perfectly with another. There are times when our hearts ache with this knowledge: because our grief is so deep that we wish another could partake of it with us and so ease the ache, and because our hearts are so full of gladness that we wish another could partake of it with us and so share the merriment. But we cannot. We are sundered from one another. But not finally so. We were made for better than this. Some day we will taste of it. In the long wait until that day, we may content ourselves with this: that very God of very God has drunk the bowl of our grief and supped with us in joy-making—we are known.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="practical-insights" class="level2"&gt;
&lt;h2&gt;Practical insights&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;A truthful witness saves lives,&lt;br /&gt;
    but one who breathes out lies is deceitful.&lt;/div&gt;
&lt;p&gt;(Proverbs 14:25, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This one seems both straightforward and obvious to me. It is interesting, though, that the author makes the point that the truthful witness &lt;em&gt;saves lives&lt;/em&gt;. It reminds me that our lenient age, with death a rare punishment for any crime, no matter how severe, is very different from almost every other. The word of a witness, in those days, meant the difference between a man being stoned to death and his going home to his family. Yet it is no less important today. I read recently of a case of wrongful conviction—a man sentenced to prison for a crime he did not commit, which it is now &lt;em&gt;known&lt;/em&gt; he did not commit, and still he cannot get out of jail—and all this because of a false testimony delivered on the stand many decades ago.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Our words still have the power to make or ruin lives. Sometimes these are dramatic moments; other times they are the many little moments that add up to a larger shift in the course of one’s life. Either way, telling the truth matters.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="theological-profundities" class="level2"&gt;
&lt;h2&gt;Theological profundities&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;In the fear of the &lt;span class="smcp"&gt;Lord&lt;/span&gt; one has strong confidence,&lt;br /&gt;
    and his children will have a refuge.&lt;br /&gt;
The fear of the &lt;span class="smcp"&gt;Lord&lt;/span&gt; is a fountain of life,&lt;br /&gt;
    that one may turn away from the snares of death.&lt;/div&gt;
&lt;p&gt;(Proverbs 14:26–27, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These verses remind me in the sharpest terms that fearing Yahweh is essential to my own spiritual health and that of my family. Fearing him is confidence, refuge, life, escape from the snares of death. What would it mean, then, &lt;em&gt;not&lt;/em&gt; to fear God? And make no mistake: fear here is more than mere reverence. God is holy, and his wrath burns hot against sin; we &lt;em&gt;should&lt;/em&gt; fear him. Not in contradistinction to loving him, though. Note that it is precisely in fearing Yahweh that one has confidence and refuge and life and salvation!&lt;/p&gt;
&lt;p&gt;The next one is of a rather different kind, but its anthropological theology is striking:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Whoever oppresses a poor man insults his Maker,&lt;br /&gt;
   but he who is generous to the needy honors him.&lt;/div&gt;
&lt;p&gt;(Proverbs 14:31, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;God so cares about the poor, that to oppress poor people is to insult him. He so loves the needy that being generous to them is to honor him. I think many Christians who are both theologically and politically conservative fail to take these kinds of words sufficiently seriously. Whatever the case may be for others, I know &lt;em&gt;I&lt;/em&gt; have failed to take them with all the gravity these words carry.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="striking-contrasts" class="level2"&gt;
&lt;h2&gt;Striking contrasts&lt;/h2&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;The poor is disliked even by his neighbor,&lt;br /&gt;
    but the rich has many friends.&lt;br /&gt;
Whoever despises his neighbor is a sinner,&lt;br /&gt;
    but blessed is he who is generous to the poor.&lt;/div&gt;
&lt;p&gt;(Proverbs 14:20-21, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first stanza is one of those straightforward, practical observations on the way things are in this broken world. It is simply &lt;em&gt;true&lt;/em&gt; that people look down on those who are poor, and that wealth earns friendship (of a sort). It is not &lt;em&gt;right&lt;/em&gt; that this is so. But still it is so. The second stanza shows up this reality for what it is, though: a reflection of a broken reality. The man who scorns his neighbor—no matter the cause, but as we have seen perhaps &lt;em&gt;especially&lt;/em&gt; if for poverty—sins in doing so. The man who gives generously to the poor is blessed. The contrast between the broken world in which we live and the holy ways of God to which we are called could not be clearer.&lt;/p&gt;
&lt;p&gt;In summary, I am increasingly grateful for the Proverbs. I appreciate more and more Solomon’s (and others’) skill in composing them, and the editor’s skill in arranging them so thoughtfully. Praise God.&lt;/p&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;It strikes me that we evangelicals—ever jetting between the poles of abstruse dogmatics and applied pragmatics—would do well to spend a bit more time on the way the Proverbs marry the two.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;To be sure, this indicates flaws in our justice system, as well.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="devotions"></category></entry><entry><title>When God Built David a House</title><link href="http://www.chriskrycho.com/2014/when-god-built-david-a-house.html" rel="alternate"></link><published>2014-01-13T22:15:00-05:00</published><updated>2014-01-13T22:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-13:/2014/when-god-built-david-a-house.html</id><summary type="html">&lt;p&gt;First Chronicles 16–17 marks one of the hinges in the progression of salvation history. Of all the great turns in the march of God’s plan, this one is right up there with those that happened in the lives of Adam and Eve, Noah, Abraham, and Moses. David brought …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First Chronicles 16–17 marks one of the hinges in the progression of salvation history. Of all the great turns in the march of God’s plan, this one is right up there with those that happened in the lives of Adam and Eve, Noah, Abraham, and Moses. David brought the ark of the covenant to Jerusalem and instituted the ritual&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; of worship that was to characterize the place where God’s presence would dwell thenceforth—a ritual that would produce many of the psalms and that would shape the best of the life of faithful Hebrews for generations to come. Then, Yahweh God blessed David with a covenant promise that far exceeded anything David did (or could have done) for his creator.&lt;/p&gt;
&lt;p&gt;It is worth quoting Yahweh’s promise to David at length, to see just how central this promise was to be in the history of God’s plan for saving the world:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Moreover, I declare to you that the &lt;span class="smcp"&gt;Lord&lt;/span&gt; will build you a house.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; When your days are fulfilled to walk with your fathers, I will raise up your offspring&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; after you, one of your own sons, and I will establish his kingdom. He shall build a house for me, and I will establish his throne forever. I will be to him a father, and he shall be to me a son. I will not take my steadfast love from him, as I took it from him who was before you, but I will confirm him in my house and in my kingdom forever, and his throne shall be stablished forever.” (1 Chronicles 17:10b–14)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Much of this finds its first fulfillment in David’s son Solomon, of course. Solomon built a temple for God, and Yahweh did fill it with his presence. Solomon, despite his wandering ways, continued to receive the blessings of God. However, even a casual reading of the rest of &lt;em&gt;this book&lt;/em&gt;—the Chronicles— immediately raises the question: How, exactly, will this promise be fulfilled if the Davidic line of kings ended when the Jews were exiled to Babylon?&lt;/p&gt;
&lt;p&gt;The New Testament makes it clear, of course: this promise finds its ultimately fulfillment in Jesus Christ. The Messiah &lt;em&gt;fills up&lt;/em&gt; a promise that had its first satisfaction in Solomon, but which was left unfinished in that king, great though he was. Jesus is the king whose throne is and will be established forever, from whom the Father’s steadfast love with never be removed, and who indeed &lt;a href="/2014/temple-for-god.html" title="A Temple For God"&gt;built a house&lt;/a&gt; for God. Jesus is the one of whom the Father said, “I will be to him a father, and he will be to me a son” (see Hebrews 1:5).&lt;/p&gt;
&lt;p&gt;But of course, just as the Hebrews were waiting with longing for a Messiah to come and fulfill this promise in the long years between the Exile and the coming of Christ, so we are awaiting the Messiah’s coming in these long years between the Ascension and the Eschaton. The King is seated at the right hand of the Majesty on high (Hebrews 1:3), but he has not yet come to claim the whole of his kingdom. But in the interval, we follow David’s lead:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Sing to the &lt;span class="smcp"&gt;Lord&lt;/span&gt;, all the earth!&lt;br /&gt;
    Tell of his salvation from day to day.&lt;br /&gt;
Declare his glory among the nations,&lt;br /&gt;
    his marvelous works among all the peoples!&lt;br /&gt;
For great is the &lt;span class="smcp"&gt;Lord&lt;/span&gt;, and greatly to be praised,&lt;br /&gt;
    and he is to be held in awe above all gods.&lt;br /&gt;
For all the gods of the peoples are idols,&lt;br /&gt;
    but the &lt;span class="smcp"&gt;Lord&lt;/span&gt; made the heavens,&lt;br /&gt;
Splendor and majesty are before him;&lt;br /&gt;
    strength and joy are in his place.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hallelujah. Maranatha.&lt;a href="#fn4" class="footnote-ref" id="fnref4"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Used here in the purely descriptive sense. Though we can all fall into &lt;em&gt;dead&lt;/em&gt; ritual, where we practice the mere outward forms of things with no motion of our will in line with the motions of our bodies, not all ritual is dead. Nor is all ritual bad. When our worship is &lt;em&gt;reduced&lt;/em&gt; to ritual, we have a problem, but ritual-less worship is anarchy and chaos at best.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;I’m skipping over this for the sake of brevity, but I find it really remarkable that when David plans to build God a house, God sends a prophet and tells David, “No, &lt;em&gt;I&lt;/em&gt; am going to build &lt;em&gt;you&lt;/em&gt; a house.” Here is a small picture of the gospel: God does for us what we are not worthy to do for him.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;“Offspring” here is the same word (“seed”) used in the promise that the “offspring” of the woman would bruise the serpent’s head and that the through “offspring” of Abraham the nations would be blessed.&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn4"&gt;&lt;p&gt;“Come soon!”&lt;a href="#fnref4" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Scriptural Miscellanies</title><link href="http://www.chriskrycho.com/2014/scriptural-miscellanies-jan-12-2014.html" rel="alternate"></link><published>2014-01-12T23:30:00-05:00</published><updated>2014-01-12T23:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-12:/2014/scriptural-miscellanies-jan-12-2014.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;Tonight, rather than doing a single, longer, extended piece, I am simply going to respond to a number of indidivual verses or passages, and more briefly than usual. Sleep is calling, but diligence in seeking God is a good I will not be quick to overlook.&lt;/i&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Whoever loves discipline hates …&lt;/div&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;Tonight, rather than doing a single, longer, extended piece, I am simply going to respond to a number of indidivual verses or passages, and more briefly than usual. Sleep is calling, but diligence in seeking God is a good I will not be quick to overlook.&lt;/i&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Whoever loves discipline hates knowledge&lt;br /&gt;
    but he who hates reproof is stupid. (Proverbs 12:1, ESV)&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;It strikes me that this verse could serve as a heading for much of Proverbs, and unfortunately for much of many of our lives. It is easy to hate reproof, because it is easy to hate being wrong, because it is easy to be prideful and resistant to correction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Deceit is in the heart of the wicked,&lt;br /&gt;
    but those who plan peace have joy. (Proverbs 12:20, ESV)&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;This verse—and many like it throughout the Psalms—makes it clear that the &lt;em&gt;many&lt;/em&gt; things may contrast with wickedness. Though wickedness has a relatively short list of characteristics in the Proverbs (murder and deception above all), the things contrasted with the behavior of the wicked is nearly infinite. The list includes wisdom, righteousness, peace, joy, and life, to name but a few.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Because the poor are plundered, because the needy groan,&lt;br /&gt;
    “I will now arise,” says the &lt;span class="smcp"&gt;Lord&lt;/span&gt;;&lt;br /&gt;
    “I will place him in the saftey for which he longs.”&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Though I do not buy into “liberation theology”, thinking as I do that its proponents tend to dramatically oversell their own case while ignoring entirely the Biblical witness toward the individual nature of redemption and the salvific work of Christ at Calvary, verses like this (and indeed: Psalms like this) remind us that the liberation position &lt;em&gt;does&lt;/em&gt; have something going for it. Namely, it takes seriously something that Scripture takes seriously: God’s particular and especial concern for the poor and needy, not least those abused by people with more power than them. We would do well to integrate this thread more thoroughly into our evangelical conception of the world and our responsibilities thereto. We need not diminish our clear proclamation of the gospel nor mute our insistence on the centrality, supremacy, and sufficiency of Christ in order to set our hands to work diligently for the good of the poor and needy. We need not throw out penal substitutionary atonement to acknowledge that God &lt;em&gt;does&lt;/em&gt; show particular concern for the poor and downtrodden.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Prayer of Thanksgiving</title><link href="http://www.chriskrycho.com/2014/prayer-thanksgiving-jan-12-2014.html" rel="alternate"></link><published>2014-01-12T11:15:00-05:00</published><updated>2014-01-12T11:15:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-12:/2014/prayer-thanksgiving-jan-12-2014.html</id><summary type="html">&lt;p&gt;Oh God—our creator and father; our savior-king, lord, and friend; our helper, teacher, and comforter—thank you for your unfailing love toward us. We marvel: you are the lord of light and of life, the maker of heaven and earth; you have set your glory above the heavens, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Oh God—our creator and father; our savior-king, lord, and friend; our helper, teacher, and comforter—thank you for your unfailing love toward us. We marvel: you are the lord of light and of life, the maker of heaven and earth; you have set your glory above the heavens, and yet you are mindful of men and women like us. And not only mindful! You delight in us and love us in spite of our rebellion against you. You gave infinitely of yourself that we might be redeemed. Oh Lord, how majestic is your name in all the earth!&lt;/p&gt;
&lt;p&gt;As we have gathered here to worship, and as we bring you these gifts, we remember that everything we give to you is yours already. You do not &lt;em&gt;need&lt;/em&gt; anything of us; everything in all the world is yours already. All that we have we have from you—not only our possessions, but even our lives—so we pray that you be exalted in our giving, in our singing, and in the preached word. May we be those who in our giving gladly demonstrate that you are more precious to us than the things of this world. May Christ be exalted in our own hearts, in the work of this congregation, in the lives of the members of this church, in the community around us, and in the efforts of missionaries around the world as we give. Thank you so much for your steadfast love toward us!&lt;/p&gt;
&lt;p&gt;We pray all these things in the name of Jesus Christ our risen Lord. Amen.&lt;/p&gt;
</content><category term="[prayers]"></category></entry><entry><title>Saul and David/Righteousness and Folly</title><link href="http://www.chriskrycho.com/2014/saul-david-righteousness-folly.html" rel="alternate"></link><published>2014-01-11T20:50:00-05:00</published><updated>2014-01-11T20:50:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-11:/2014/saul-david-righteousness-folly.html</id><summary type="html">&lt;p&gt;The books of Chronicles serve as something of a parallel and supplementary account to the books of 1 and 2 Samuel and 1 and 2 Kings.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; There are a few significant differences between the books, though. First, Samuel and Kings take considerable time to trace out Saul’s history …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The books of Chronicles serve as something of a parallel and supplementary account to the books of 1 and 2 Samuel and 1 and 2 Kings.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; There are a few significant differences between the books, though. First, Samuel and Kings take considerable time to trace out Saul’s history and then divided their attention fairly evenly between Judah and Israel, with a slight emphasis on Israel because of Elijah and Elisha’s ministries there. The Chronicles skip almost entirely over Saul and focus predominantly on the Davidic line in Judah.&lt;/p&gt;
&lt;p&gt;Second, Samuel and Kings generally let events speak for themselves, with little commentary. Yahweh is always in control, but the author rarely provides explicit theological interpretation of the events recorded. The Chronicles, rather strikingly, &lt;em&gt;often&lt;/em&gt; make straightforward claims about divine action and provide moral commentary on the events they record. After its long list of &lt;a href="/theology/grappling-with-genealogies.html"&gt;genealogies&lt;/a&gt;, 1 Chronicles turns to a narrative of the history of the Hebrews in the kingdom era, picking up with Saul’s death—and immediately offers a theological interpretation of the events (2 Samuel and 1 Kings simply report the events and a few people’s responses):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So Saul died for his breach of faith. he broke faith with the &lt;span class="smcp"&gt;Lord&lt;/span&gt; in that he did not keep the command of the &lt;span class="smcp"&gt;Lord&lt;/span&gt;, and also consulted a medium, seeking guidance. He did not seek guidance from the &lt;span class="smcp"&gt;Lord&lt;/span&gt;. Therefore the &lt;span class="smcp"&gt;Lord&lt;/span&gt; put him to death and turned the kingdom over to David the son of Jesse. (1 Chronicles 10:13–14, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No ambiguity, no reason to misunderstand what happened. Kings made it clear by literary structure. The Chronicles just come out and say it: Yahweh took the kingdom away from Saul because he was unfaithful to him, and he gave it to a man who—whatever his faults, and they were indeed many—would follow Yahweh.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In Psalm 11, David evinces the very trust in Yahweh Saul lacked. He proclaims his confidence that Yahweh will save him. To the warning that “the wicked bend the bow; / they have fitted their arrow to the string / to shoot in the dark at the upright in heart” (Psalm 11:2, ESV), David has a simple reply: “The &lt;span class="smcp"&gt;Lord&lt;/span&gt; is in his holy temple; / the &lt;span class="smcp"&gt;Lord&lt;/span&gt;’s throne is in heaven; his eyes see, his eyelids test the children of man” (Psalm 11:4, ESV). David’s confidence was not in his own strength. His hope was not in being free and clear of anyone who would oppose him, but in the one whose throne is in heaven. Saul spent his days troubled and afraid because he was never secure in Yahweh.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Proverbs 11:28 (ESV) comments:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Whoever trusts in his riches will fall,&lt;br /&gt;
    but the righteous will flourish like a green leaf.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The whole chapter resounds with the contrast between trust in riches or power or mortal plans and righteousness. Righteousness, it seems, is in trusting and obeying Yahweh. There is no righteousness that trusts in one’s own strength. There is only the righteousness “which comes through faith in Christ, the righteousness from God that depends on faith” (Philippians 3:9, ESV). I am reminded tonight not to trust in my own abilities, nor in the provision God has given us,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; but in God himself.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Originally these four books were a single book, just as 1 and 2 Chronicles were a single book; it is rather unfortunate the modern divisions obscure this.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;What folly to put our trust in the material things we have, when they are not ours save by the generous gift of God!&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Grappling With Genealogies</title><link href="http://www.chriskrycho.com/2014/grappling-with-genealogies.html" rel="alternate"></link><published>2014-01-10T22:17:00-05:00</published><updated>2014-01-10T22:17:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-10:/2014/grappling-with-genealogies.html</id><summary type="html">&lt;p&gt;&lt;i class="editorial"&gt;A brief note ahead of the rest of the post: this month, &lt;a href="http://christianaudio.com"&gt;ChristianAudio.com&lt;/a&gt; is giving away the ESV “Hear the Word” Audio Bible. Really, &lt;a href="http://christianaudio.com/free"&gt;for free&lt;/a&gt;. You give them an email address, you get the whole Bible, read &lt;em&gt;extremely&lt;/em&gt; well. I highly recommend that you follow up on this …&lt;/i&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class="editorial"&gt;A brief note ahead of the rest of the post: this month, &lt;a href="http://christianaudio.com"&gt;ChristianAudio.com&lt;/a&gt; is giving away the ESV “Hear the Word” Audio Bible. Really, &lt;a href="http://christianaudio.com/free"&gt;for free&lt;/a&gt;. You give them an email address, you get the whole Bible, read &lt;em&gt;extremely&lt;/em&gt; well. I highly recommend that you follow up on this, because it is normally not inexpensive, though even so a good audio Bible is a very good investment. Now, back to the regularly scheduled post.&lt;/i&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;As &lt;a href="/2014/temple-for-god/"&gt;challenging&lt;/a&gt; as it can be to apply 2 Chronicles 1—5 correctly, finding the substance in a passage like 1 Chronicles 1—5 is even harder, I think. The entire sequence is a list of names: fathers, sons, occasional wives and daughters in the mix. Genealogies are one of the most challenging sections in the Bible for Western readers, because they seem enormously dry and pointless. (I saw a non-Christian comment on finding the Bible incredibly boring the other day; I have no doubt that passaages like this one contributed substantially to that assessment.) Truth be told, though I am making a game effort at it, I still find these chapters difficult, too.[^sped- up]&lt;/p&gt;
&lt;p&gt;There are two things I hold onto as I consider these challenging chapters, though. The first is Paul’s affirmation that “All Scripture is breathed out by God and profitable for teaching, for reproof, for correction, and for training in righteousness, that the man of God may be complete, equipped for every good work” (2 Timothy 3:16—17, ESV). That “all” is important, because Paul included 1 Chronicles 1—5 and Numbers 1 and Zechariah 4, challenging though they are in their different ways. He did not exclude them because they might not make as much sense to a future generation in another part of the world. Indeed, I would go so far as to say that under the inspiration of the Holy Spirit, Paul explicitly affirmed the value of these books in part &lt;em&gt;because&lt;/em&gt; they would be foreign to us.&lt;/p&gt;
&lt;p&gt;Too often, we privilege our own cultural views as inherently correct in some way. We assume that because genealogies do not matter &lt;em&gt;to us&lt;/em&gt;, they do not matter &lt;em&gt;at all&lt;/em&gt;. Few of us, it is true, would be so bold as to say this out loud, but deep down, that is what we really believe. (For what we really believe to be true is what drives our actions.) The presence of these lengthy genealogies in the very word of God stands as a clear rebuke to our cultural snobbery–and to our chronological snobbery, too. These genealogies remind us that we are not the first people in God’s story, and that we will not be the last. We are not the main characters in this narrative: even of those named in these chapters, how many are familiar to us now?&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; How many men and women, faithful followers of God, simply go unnamed in these passages? Likewise, who will know our names a thousand years hence, should the Lord tarry?&lt;/p&gt;
&lt;p&gt;This genealogy stands as a rebuke to our self-adulation and our emphasis on our own value. It stands as a record of God’s dealings with people who went long before us, and thus as a testament to the historical character of God’s salvific work. It functions as a reminder that God’s plan involves many a flawed hero, and not a few villains. It points us back to the need for a king who would &lt;em&gt;not&lt;/em&gt; fit the pattern of all the kings named in this line. It highlights God’s faithfulness to keep his promises to Abraham and Isaac and Jacob, and to David, even in the face of Israel’s and Judah’s rebellious ways. It ultimately points us to God himself, the one constant in all these names and relationships. He oversaw their history, as he oversees ours. We ought to reflect more often on those who have gone before us in the faith, and to thank God for them and for his work in history. We ought to be ever more dedicated to worshiping the God in whose hands history flows like a watercourse.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Even having read through these chapters a number of times, it had escaped me until tonight that David’s generals, Joab, Asahel, and Abishai, were his nephews–the sons of his sister Zeruiah (see 1 Chronicles 2:16). This detail sheds interesting light on many of their interactions, especially on David’s reticence to remove them from authority even when they were unruly. Yet it had previously been lost on me entirely.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>A Temple for God</title><link href="http://www.chriskrycho.com/2014/temple-for-god.html" rel="alternate"></link><published>2014-01-09T07:45:00-05:00</published><updated>2014-01-09T07:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-09:/2014/temple-for-god.html</id><summary type="html">&lt;p&gt;&lt;i class=editorial&gt;Note: today’s comments are a bit out of order on the sequence I’ve been reading. I accidentally started &lt;em&gt;Second&lt;/em&gt; Chronicles rather than &lt;em&gt;First&lt;/em&gt;. I’ll go back and start with First Chronicles tomorrow.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;At first blush, the first five chapters of 1 Chronicles do not seem to be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;i class=editorial&gt;Note: today’s comments are a bit out of order on the sequence I’ve been reading. I accidentally started &lt;em&gt;Second&lt;/em&gt; Chronicles rather than &lt;em&gt;First&lt;/em&gt;. I’ll go back and start with First Chronicles tomorrow.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;At first blush, the first five chapters of 1 Chronicles do not seem to be particularly scintillating material on the whole. Solomon’s request for wisdom, and God’s answer, are notable, but otherwise the entire section is taken up by details of the construction of the temple. It is at points like this that read- the-Bible-in-a-year plans tend to get bogged down, and it is because of points like this that most read-the-Bible-in-a-year plans include readings from the New Testament as well as the Old. We struggle–or at least, &lt;em&gt;I&lt;/em&gt; have historically struggled–to make much of these passages. Why does it matter that there were “four hundred pomegranates for the two latticeworks, two rows of pomegranates for each latticework, to cover the bowls of the capitals that were on top of the pillars”?&lt;/p&gt;
&lt;p&gt;As I read the parallel passage in 1 Kings a little while back, it struck me that what we have there—and thus, also what we have here—is enough information to get a sense of the beauty and majesty of this building. The enormous quantitites of precious metals that went into its construction, the attention paid to such fine details of every single aspect of the building and its adornments, the specially chosen timber brought in from a neighboring land: they all show us that this temple was magnificent.&lt;/p&gt;
&lt;p&gt;We are not a temple-building people, and our monuments tend to be austere and formal. Think of the Lincoln or Washington memorials in Washington, D. C.: they are not exactly &lt;em&gt;lively&lt;/em&gt; places. Though celebratory and laudatory, they seek to impress rather than to delight, focusing on clean, simple lines and shapes with little ornamentation. The Solomonic temple, and before it the tabernacle, were &lt;em&gt;not&lt;/em&gt; like that. They were full of color and decoration, even as they were built at striking physical scales. They were designed to engage every sense, sight and smell especially. They were &lt;em&gt;beautiful&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So: beautiful the temple may have been. We are still left asking why the beauty of a temple built in ancient Jerusalem almost three millennia ago matters to Christians today. The answer, I think, lies in two passages in the New Testament. First:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So then you are no longer strangers and aliens, but you are fellow citizens with the saints and members of the household of God, built on the foundation of the apostles and prophets, Christ Jesus himself being the cornerstone, in whom the whole structure, being joined together, grows into a holy temple in the Lord. In him you also are being built together into a dwelling place for God by the Spirit. (Ephesians 2:19-22, ESV)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Then I saw a new heaven and a new earth, for the first heaven and the first earth had passed away, and the sea was no more. And I saw the holy city, new Jerusalem, coming down out of heaven from God, prepared as a bride adorned for her husband. And I heard a loud voice from the throne saying, “Behold, the dwelling place of God is with man. He will dwell with them, and they will be his people, and God himself will be with them as their God. He will wipe away every tear from their eyes, and death shall be no more, neither shall there be mourning, nor crying, nor pain anymore, for the former things have passed away.”&lt;/p&gt;
&lt;p&gt;And he who was seated on the throne said, “Behold, I am making all things new….”&lt;/p&gt;
&lt;p&gt;And I saw no temple in the city, for its temple is the Lord God the Almighty and the Lamb. And the city has no need of sun or moon to shine on it, for the glory of God gives it light, and its lamp is the Lamb. (Revelation 20:1—5, 22—23)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do you see? As magnificent and beautiful as that old temple was, it has been supplanted. The &lt;em&gt;church&lt;/em&gt; is the temple, a dwelling place for God that is yet more beautiful. People are more stunning than the loveliest stones. And there will come a day when the dwelling place of God is with man, not only in spirit but in physical, at th econsummation of all things. That temple, filled as it was with the awesome presence of God, was but the tiniest taste of &lt;em&gt;this&lt;/em&gt; age, when God indwells every believer. And this age is but the tiniest taste of &lt;em&gt;that&lt;/em&gt; age, when the Lord God the Almighty and the Lamb come down from heaven and make their dwelling place with man.&lt;/p&gt;
&lt;p&gt;Hallelujah. Our Lord, come!&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Out of the Mouths of Poets</title><link href="http://www.chriskrycho.com/2014/mouths-of-poets.html" rel="alternate"></link><published>2014-01-08T22:37:00-05:00</published><updated>2014-01-08T22:37:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-08:/2014/mouths-of-poets.html</id><summary type="html">&lt;p&gt;Sometimes, the core idea of a passage–especially when in poetic forms like in the Psalms–cannot be understood apart from the structure of the passage itself. Tonight I was reading Psalm 8, and thinking about the aims of reading the Bible. Specifically, my aim is to know God and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes, the core idea of a passage–especially when in poetic forms like in the Psalms–cannot be understood apart from the structure of the passage itself. Tonight I was reading Psalm 8, and thinking about the aims of reading the Bible. Specifically, my aim is to know God and worship him more as I read Scripture. Thus, my goal is that each time I read through a section I would come away both more aware of who God is and more set in both my will and my affections&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; to honor him.&lt;/p&gt;
&lt;p&gt;As I read Psalm 8, I was wondering, “Okay, how does this lead me to worship?” Echoing the psalm is a good start, of course, as it opens and closes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Oh Yahweh, our Lord,&lt;br /&gt;
    how majestic is your name in all the earth!&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;But the rest of the psalm is a meditation not only on Yahweh’s majesty, but on the people he made. This is an interesting turn, and it caught me off guard as I started thinking more carefully about it. The key, I soon realized, is in the fact that this is a Psalm, not a letter or a sermon or a treatise. David felt free to get at his point sideways, as it were, and as is the fashion of poetry.&lt;/p&gt;
&lt;p&gt;The whole poem turns back and forth between the God who made the heavens, who set his glory above them, and the people he made. The contrast is striking, and the more so because of the wonderful turns of phrase.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;When I look at your heavens, the work of your fingers,&lt;br /&gt;
        the moon and the stars, which you have set in place,&lt;br /&gt;
    what is man that you are mindful of him,&lt;br /&gt;
        and the son of man that you care for him?&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, I can sum up the point David is making here. One could say simply, “Humans are small compared to the universe, so it is surprising that God would pay attention to them.” But to do so without further reflection is to miss some of the beauty of what David does in the &lt;em&gt;poetry&lt;/em&gt;, and therefore to miss the force of the passage. It is to miss an opportunity to have my emotions interact with this truth, and not only my mind. We have all felt the awe of staring at a night sky full of lights, a billion miles away and burning brighter than our own sun so that we can see them here across the aeons. We have all felt small against that vastness.&lt;/p&gt;
&lt;p&gt;And if we stop for a moment and feel that here with David, and then are caught by the sudden turn—“what is man?”—we can feel with him the wonder that the God who set his glory above the heavens is the God who gave man dominion over creation. We can feel with him the surprise that God would not only establish his strength before the nations and before those who rebel against him, but that he would do it through babies and infants. We can feel with him the greatness of a God who is not limited by our feeble strength and our mortality, whose majesty goes beyond the tinyness of humanity and yet is somehow the greater for the ways he uses us, little beings that we are.&lt;/p&gt;
&lt;p&gt;How majestic is the name of Yahweh in all the earth, indeed.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;My desires, ambitions, emotions–all the pieces of me that include but are not limited to my thoughts and feelings, and which are distinct from though closely interacting with my will.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>A Study in Contrasts: 2 Kings 16–20</title><link href="http://www.chriskrycho.com/2014/study-in-contrasts-2-kings-16-20.html" rel="alternate"></link><published>2014-01-07T23:40:00-05:00</published><updated>2014-01-07T23:40:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-07:/2014/study-in-contrasts-2-kings-16-20.html</id><summary type="html">&lt;p&gt;One of the recurring themes of the books of Kings (1 and 2 Samuel, 1 and 2 Kings) is the distinction between those who “did what was right in the eyes of Yahweh” and those who “did what was evil in the sight of Yahweh”, e.g. 15:34, 17 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the recurring themes of the books of Kings (1 and 2 Samuel, 1 and 2 Kings) is the distinction between those who “did what was right in the eyes of Yahweh” and those who “did what was evil in the sight of Yahweh”, e.g. 15:34, 17:2 respectively–to name just two of the &lt;em&gt;many&lt;/em&gt; passages echoing this refrain in these books. Whereas 1 and 2 Samuel zoomed in on the contrast between Saul and David, 1 and 2 Kings take nearly all their successors at a very high level, often sparing them few more words than necessary to note their parentage, whether they did what was right or what was evil in the eyes of Yahweh, and a reference to other records of their deeds.&lt;/p&gt;
&lt;p&gt;One of the dominant themes of these books, then, is that doing what is right in Yahweh’s eyes has an enormous reward, while doing what is evil in his eyes eventually brings a great judgment. 2 Kings 17—19 brings this message home, and hard. Centuries of rebellion on Israel’s part culminated in the Assyrian capture of Samaria and the forcible exile of the Jews of Israel from their homeland. The author pauses from his otherwise quick-moving narrative to explain this point in detail for the better part of a chapter. Israel’s fall was not the mere ordinary turn of regional political events it might have seemed. It was, instead, God’s final judgment on a people who had continuously rebelled against him generation after generation, worshiping in a way they &lt;em&gt;knew&lt;/em&gt; was abhorrent to him.&lt;/p&gt;
&lt;p&gt;By contrast, when the same mighty king with his mighty army came to take Jerusalem, the city stood. Judah had its share of wicked kings, to be sure–but unlike Israel, it also had many kings who “did what was right in the eyes of Yahweh” and in particular it had Hezekiah, who “trusted in Yahweh, the God of Israel, so that there was none like him among all the kings of Judah after him, nor among those who were before him” (18:5).&lt;/p&gt;
&lt;p&gt;The armies of the greatest power in the region–unstoppable Assyria–surrounded the capital city en masse. Their leaders boasted in their victories, tried to bully Hezekiah and the people into surrendering without a fight, and insulted the name of Yahweh. Attacking the people of God is always a bad idea; attacking him directly is an even &lt;em&gt;worse&lt;/em&gt; idea. The Scriptures are a long record of the lengths to which God will go to defend his name: he will quite literally die to defend the glorious reality that he is most righteous and most powerful being there is, most worthy of worship. When Sennacherib boasted, “Who among all the gods of the lands have delivered their lands out of my hand, that Yahweh should deliver Jerusalem out of my hand?” (18:35), he missed something. Hezekiah points it out in his prayer: “[They] were not gods, but the work of men’s hands, wood and stone. Therefore they were destroyed. So now, O Yahweh our God, save us, please, from his hand, that all the kingdoms of the earth may know that you, O Yahweh, are God alone” (19:18b—29).&lt;/p&gt;
&lt;p&gt;God has &lt;em&gt;always&lt;/em&gt; been about the business of making his name known to the ends of the earth. Not because he is a braggart, but because he is the end for which all things exist–the end for which &lt;em&gt;we&lt;/em&gt; exist. In setting ourselves against that, we are setting ourselves against reality. We are trying to fly by pushing away from the ground with the hairs on our head–and for some reason, gravity comes out victorious. So when God brings judgment on blasphemers, that is a &lt;em&gt;mercy&lt;/em&gt; to the nations who have a chance to repent and kneel before the king of all.&lt;/p&gt;
&lt;p&gt;What is amazing to me is just how profoundly longsuffering God is. Were I so often insulted, ignored, and injuriously assaulted in character, I would not wait hundreds of years, sending prophet after prophet to give people opportunity after opportunity to respond. I sometimes have a hard time restraining my impatience for a few minutes with my wife or my child. And yet the God who ultimately struck down 185,000 Assyrians waited generation upon generation to bring his judgment on Israel–and he likewise gave the Assyrians the opportunity to repent (c.f. Jonah). This God is shockingly merciful, even as he brings judgment.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>Five Things Proverbs 6 Teaches</title><link href="http://www.chriskrycho.com/2014/five-things-proverbs-six.html" rel="alternate"></link><published>2014-01-06T20:30:00-05:00</published><updated>2014-01-06T20:30:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-06:/2014/five-things-proverbs-six.html</id><summary type="html">&lt;p&gt;Proverbs 6 makes 5 points, rather distinctly and sharply. First a summary and then a few thoughts on each.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verses 1–5:&lt;/strong&gt; &lt;em&gt;Being security for your neighbor—still less for a stranger—is a bad idea.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This first point is perhaps the least obviously applicable to me today. I don …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Proverbs 6 makes 5 points, rather distinctly and sharply. First a summary and then a few thoughts on each.&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verses 1–5:&lt;/strong&gt; &lt;em&gt;Being security for your neighbor—still less for a stranger—is a bad idea.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This first point is perhaps the least obviously applicable to me today. I don’t make a habit of pledging money or possessions for a friend’s (still less a stranger’s) poor money decisions. I might &lt;em&gt;give&lt;/em&gt; a friend (or even a stranger) money, but I can’t imagine putting myself in the position of guaranteeing a loan for someone else. That just seems like a terrible idea. Of course, that’s the point of these verses: it &lt;em&gt;is&lt;/em&gt; a terrible idea. The counsel here is to get out of that kind of situation as fast as possible (and, by implication, to avoid getting into such a situation in the first place).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verses 6–11:&lt;/strong&gt; &lt;em&gt;Laziness will prove ruinous. Industriousness will produce good results.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I have seen this proven true time and again in the lives of those around me. As a general rule, people who work hard do well for themselves, and people who are lazy do very poorly for themselves. As a rule, I say, because there are times when this is not true—there really are times when systemic injustices undermine even people’s best efforts. This proverb is a proverb, not an iron-clad guarantee, and we would all do well to remember as much. That said: we would &lt;em&gt;all&lt;/em&gt; do well to remember as much: if the political conservative’s typical response is to simply point to this verse as a promise (which it is not), the political liberal’s typical response is to act as though this verse has no bearing whatsoever. Sometimes, poverty has complex, structural, societal roots—but sometimes, people are just lazy. God calls us &lt;em&gt;not&lt;/em&gt; to be lazy; work is a good thing that was instituted before the Fall.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verses 12–15:&lt;/strong&gt; &lt;em&gt;The ultimate fate of a wicked person is calamity.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is nothing terribly complicated here. There is, however, a great deal of hope here for those of us who have watched wicked people go around behaving wickedly and seemingly coming off no worse for wear every time. There will come a day of recompense for every wicked deed. Lord willing, for some of those people, that day came when Christ came, and they will join us in the company of saints as they abandon their wickedness and turn to God. But for those who don’t, justice will come, and it will come swiftly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verses 16–19:&lt;/strong&gt; &lt;em&gt;There are some things God truly hates.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is almost &lt;em&gt;passe&lt;/em&gt; to note how distasteful this idea is in our culture today, but the words on the page could not be clearer. There are things that Yahweh hates, things that are an abomination to him. He hates pride. He abominates deceit. He hates the shedding of innocent blood. He abominates the plotting of wickedness. He hates the doing of evil. He abominates false witness to be borne. He hates dissension between brothers.&lt;/p&gt;
&lt;p&gt;But more than this: he hates those who &lt;em&gt;do&lt;/em&gt; these things. This is dreadful —apart from the grace he shows us in Christ.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verses 20–35:&lt;/strong&gt; &lt;em&gt;Adultery is folly. Wisdom runs the other way.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/2014/01/folly-of-sin"&gt;Once again&lt;/a&gt;, the proverbs hammer home the folly of adultery. It is not only that it does not give what it promises and brings spiritual ruin. It is that it also produces, at a purely practical level, destruction. A spouse’s jealousy is (rightly) a fearful thing. Who in his right mind would sleep with another man’s wife, knowing what the response would be? What woman would sleep with another woman’s husband, knowing how her own rage would be? The implications just for one’s own health—still less any other part of one’s life—ought to be enough to warn us away.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Proverbs remind me again and again that God cares about my life at every level. He is not distant or unengaged with these details; he cares about every aspect of human flourishing, and takes pains to make clear to us what that flourishing looks like—and what it doesn’t.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>The Folly of Sin</title><link href="http://www.chriskrycho.com/2014/folly-of-sin.html" rel="alternate"></link><published>2014-01-05T23:00:00-05:00</published><updated>2014-01-05T23:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-05:/2014/folly-of-sin.html</id><summary type="html">&lt;p&gt;Adultery. It has torn countless families and destroyed innumerable ministries over the years. Over and over again, the refrain is the same: “I never thought it would happen to me!” and “I never meant for it to go this far!”&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Given the evidence of the years, though, no one …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Adultery. It has torn countless families and destroyed innumerable ministries over the years. Over and over again, the refrain is the same: “I never thought it would happen to me!” and “I never meant for it to go this far!”&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Given the evidence of the years, though, no one should ever cavalierly say, “I’ll never do that.” Say it, yes. But back it up by making concrete choices every day not to break vows to your spouse.&lt;/p&gt;
&lt;p&gt;Proverbs 5 couldn’t be clearer: adultery &lt;em&gt;looks&lt;/em&gt; good from the outside and feels good at the outset:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;For the lips of a forbidden woman drip honey,&lt;br /&gt;
    and her speech is smoother than oil,&lt;br /&gt;
but in the end she is bitter as wormwood,&lt;br /&gt;
    sharp as a two-edged sword.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;No one commits adultery because it looks so dreadful. People commit this sin— like every other—because it looks good. The trick, of course, is that it is &lt;em&gt;not&lt;/em&gt;. The Proverb highlights the contradiction of sin powerfully: sin looks sweet, but proves bitter. It seems smooth, but only proves smoothly destructive as it slices away at everything you value. Sin always produces the opposite of what it promises. Adultery promises intimacy, but adultery &lt;em&gt;destroys&lt;/em&gt; intimacy. Drugs promise liberated minds; instead they produce addiction. Covetousness promises satisfaction; instead it produces only an ever-gnawing emptiness. Sin is like a sweet-tasting infection that rots us from the inside out.&lt;/p&gt;
&lt;p&gt;But it is more than that. Sin is not bad only because it proves so ruinous to us —though certainly it is bad for that reason. Sin is bad because it is high treason, because it is at its core a rejection of the good, the true, the beautiful in that it is a rejection of God in the exaltation of self. Sin is ruinous to us in part because it is the undoing of everything of what we are: beings made to worship the Triune God, instead kneeling to our own reflection in the mirror instead of the one we were meant to reflect.&lt;/p&gt;
&lt;p&gt;But God is a righteous judge. He is holy. He does not tolerate sin. Psalm 5 puts it in sharp relief:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;For you are not a God who delights in wickedness;&lt;br /&gt;
    evil may not dwell with you.&lt;br /&gt;
The boastful shall not stand before your eyes;&lt;br /&gt;
    you hate all evildoers.&lt;br /&gt;
You destroy those who speak lies;&lt;br /&gt;
    Yahweh abhors the bloodthirsty and deceitful man.&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;God detests sin.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; Not just the hot-button sin issues of our day (though those are not excluded), but our pettiness and jealousy, our deceptions great and small, our boasting and pride. We are &lt;em&gt;all&lt;/em&gt; evildoers. And yet, wonder of wonders, we live still. Though God who made us and at whom we have all shaken our fists in rebellion would be perfectly within his rights to end us without a thought; he does not. He shows mercy. He forbears long. He waits to bring judgment.&lt;/p&gt;
&lt;p&gt;He provides a way of escape. We, like David, can enter his house “through the abundance of [his] steadfast love.” That steadfast love, that covenant love, that almight love, has reached down and partaken of frail humanity and death and even of divine wrath, so that God might be glorified in his holiness. We are saved not because God is sentimental or sappy, but because he is righteous, and has already paid the price for our sins.&lt;/p&gt;
&lt;p&gt;Hallelujah.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;And yes, sometimes also (even more sadly), “I don’t care; why shouldn’t I be happy?”&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;For more on all of this, I commend to you the &lt;a href="http://www.sermonaudio.com/sermoninfo.asp?sermonID=15141146471"&gt;sermon&lt;/a&gt; our primary preaching pastor delivered today.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>A Note to RSS Subscribers</title><link href="http://www.chriskrycho.com/2014/a-note-to-rss-subscribers.html" rel="alternate"></link><published>2014-01-05T09:00:00-05:00</published><updated>2014-01-05T09:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-05:/2014/a-note-to-rss-subscribers.html</id><summary type="html">&lt;p&gt;A note to anyone who has subscribed to this RSS feed: you should resubscribe by adding &lt;a href="http://www.chriskrycho.com/feed.xml" class="uri"&gt;http://www.chriskrycho.com/feed.xml&lt;/a&gt; to your reader, as this feed location is now defunct. Thanks!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;A note to anyone who has subscribed to this RSS feed: you should resubscribe by adding &lt;a href="http://www.chriskrycho.com/feed.xml" class="uri"&gt;http://www.chriskrycho.com/feed.xml&lt;/a&gt; to your reader, as this feed location is now defunct. Thanks!&lt;/p&gt;
</content></entry><entry><title>Elijah and Elisha</title><link href="http://www.chriskrycho.com/2014/elijah-elisha.html" rel="alternate"></link><published>2014-01-04T23:45:00-05:00</published><updated>2014-01-04T23:45:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-04:/2014/elijah-elisha.html</id><summary type="html">&lt;p&gt;One cannot help but notice, reading through 1 and 2 Kings, how much Elijah and Elisha echo Moses and foreshadow the Messiah. They perform miracles that show up the limitations of other so-called deities, part the Jordan, make clean what was impure, give miraculous children, raise the dead, multiply food …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One cannot help but notice, reading through 1 and 2 Kings, how much Elijah and Elisha echo Moses and foreshadow the Messiah. They perform miracles that show up the limitations of other so-called deities, part the Jordan, make clean what was impure, give miraculous children, raise the dead, multiply food for a meal for the hungry.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; These men were prophets like Moses, but Israel knew that they were not &lt;em&gt;the&lt;/em&gt; prophet like Moses that the first savior of Israel had promised.&lt;/p&gt;
&lt;p&gt;Reading through these books, it is interesting that Israel was eagerly awaiting another prophet like Elijah when Jesus came. Indeed, it is interesting that a later prophet would speak of Elijah coming again. Reading through this material —which was originally all a single book covering all of 1 Samuel through 2 Kings—one would not necessarily be inclined to call Elijah the greater of the pair. Indeed, Elisha both asked for and apparently received a double portion of the miraculous gift that Yahweh had given to Elijah. The text records far more miracles performed by Elisha than by Elijah. (Indeed, most of that list above belongs to Elisha and not to Elijah.)&lt;/p&gt;
&lt;p&gt;Clearly, though, there was something special about Elijah.&lt;/p&gt;
&lt;p&gt;I think it was his passion for the name of Yahweh, and I think the text makes this abundantly clear. It is not that Elisha was &lt;em&gt;not&lt;/em&gt; passionate for the glory of Yahweh; it is that this is the main (and nearly the only) thing in view in Elijah’s ministry. Elijah’s responsibility was to point the people to repentance for their sins and to show up false religion for what it was. This he did. He stood for the name of Yahweh under the threat of death and all alone. Other faithful Yahweh-worshippers though there were in Israel at the time, it was Elijah alone on the mountain confronting the four hundred priests of Baal, and he alone who saw the mighty hand of Yahweh raised in triumph against Baalism. He, like John the Baptizer, was the lone voice in the wilderness, calling the people of Israel back to God.&lt;/p&gt;
&lt;p&gt;Elisha’s role was different: he was the man of miracles and the fierce judge. He did the greatest miracles recorded in the Bible prior to the coming of the Messiah; only in Jesus himself was there a greater provider, healer, or resurrector. He pointed to the greatness of Yahweh through these miracles; unlike Elijah, he did so in a time when many others worshipped Yahweh. He stood on Elijah’s shoulders, as it were.&lt;/p&gt;
&lt;p&gt;I have often pondered over the last year or so that often it is the case that younger leaders can seem (and perhaps are) more effective than their elders— but that even when this is so, there is a foundation present &lt;em&gt;because&lt;/em&gt; of the elders that is too easily overlooked. Many young men’s pastoral ministries are successful not only because of their own faithfulness, but because of the work of the pastors who preceded them. Many young men can be more doctrinally sound than or more effective preachers than their predecessors &lt;em&gt;because&lt;/em&gt; of their predecessors. Elisha did his miracles in a land that had already seen Baalism humbled under fire from Yahweh. I do my writing, ministry (such as it is), and even thinking in the context set for me by faithful Christians who have gone before, women and men who have diligently sought Christ and laid a foundation on which I might build.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;To say nothing of cursing mockers to be attacked by bears, in one of the stranger passages in the old Testament.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry><entry><title>Finding God in Proverbs</title><link href="http://www.chriskrycho.com/2014/finding-god-proverbs.html" rel="alternate"></link><published>2014-01-03T23:00:00-05:00</published><updated>2014-01-03T23:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-03:/2014/finding-god-proverbs.html</id><summary type="html">&lt;p&gt;One of the most helpful patterns I have developed in the last few years of Scripture reading is asking one simple question as I read: &lt;em&gt;What does this passage reveal about God?&lt;/em&gt; There are many other questions—good, important questions—to ask of the text. But this one, I find …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the most helpful patterns I have developed in the last few years of Scripture reading is asking one simple question as I read: &lt;em&gt;What does this passage reveal about God?&lt;/em&gt; There are many other questions—good, important questions—to ask of the text. But this one, I find, yields the most fruit. The Bible is not just a book of moral teachings, nor a mere practical guide for our lives. It is the revelation of the living God to his people.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So what do we do when we get to, say, Proverbs? At first blush, the question seems a good deal less tractable here than in many other places. However hairy, most narratives &lt;em&gt;do&lt;/em&gt; show us the character of God. Propositional content, whether in letters or sermons or parables or prophecies, likewise tends to make clear, succinct statements about the person and nature of God. The Proverbs, though? Well, sometimes they do, and sometimes they say things like, “Do not contend with a man for no reason, when he has done you no harm.” That’s helpful, to be sure, but when you first read it, it’s not obvious how that gets us back to God. We could try to hammer the Proverbs into some framework for understanding God, try to reduce their presence in the canon to a role in some theme or another.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; In the end, though, any such reductive effort is going to run aground on the shoals of misunderstanding—quite the opposite of the intent of the author.&lt;/p&gt;
&lt;p&gt;The Proverbs often show us God’s character sideways. If we believe that the counsel offered by the Proverbs really is wise—that the glowing promises here in Proverbs 3 of blessing, gain, and profit from wisdom are true, that there really is nothing better than to have understanding—then we believe that they are insights into reality. And reality was made &lt;em&gt;by God&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;Yahweh by wisdom founded the earth;&lt;br /&gt;
    by understanding he established the heavens;&lt;br /&gt;
by his knowledge the deeps broke open,&lt;br /&gt;
    and the clouds drop down the dew. (Proverbs 3:19–20)&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we then start asking good questions of the text we find very quickly that we do have a path back to the person and nature of God. For example: &lt;em&gt;why&lt;/em&gt; should we not contend with a man when he has done us no harm? Well, we ought not do so because it will certainly stir up trouble, and we know God does not delight in strife. Moreover, picking a fight with someone without cause is unjust, and this same author has told us that wisdom comports with justice and righteousness, and that &lt;em&gt;God&lt;/em&gt; is just.&lt;/p&gt;
&lt;p&gt;Taking a further step back, we can ask why this proverb is included in the inspired Scriptures. Then we see even more: God cares about the way people interact with one another. He values human flourishing, and so has provided enormous guidance for us in the form of hundreds upon hundreds of practical insights into the way the world is. He delights in people so greatly that he crosses the boundary between transcendence and immanence to give us his very words.&lt;/p&gt;
&lt;p&gt;It turns out there is an awful lot to learn about God in the Proverbs—even the ones that do no mention him.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;That final phrase, “to his people,” is an important one for all hermeneutics; reading the Scriptures with faith makes a difference. &lt;a href="http://mereorthodoxy.com/"&gt;Matthew Lee Anderson&lt;/a&gt; makes this point helpfully and at some length in his excellent &lt;a href="http://www.amazon.com/End-Our-Exploring-Questioning-Confidence-ebook/dp/B00BUP1BQQ/?tag=krycho-20"&gt;&lt;em&gt;The End of Our Exploring&lt;/em&gt;&lt;/a&gt;.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;It is right here that many Biblical theologies—that’s a specific discipline in theology, though admittedly poorly named—go amiss.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="devotions"></category></entry><entry><title>Kings in Contrast</title><link href="http://www.chriskrycho.com/2014/kings-contrast.html" rel="alternate"></link><published>2014-01-02T21:00:00-05:00</published><updated>2014-01-02T21:00:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-02:/2014/kings-contrast.html</id><summary type="html">&lt;p&gt;Tonight’s reading in 1 Kings, Psalms, and Proverbs had some surprising overlaps. The material in 1 Kings covered a series of kings whose courses were largely &lt;em&gt;away&lt;/em&gt; from worshipping Yahweh and toward worshipping other gods. With only one exception, in fact, every single king listed in these five chapters …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tonight’s reading in 1 Kings, Psalms, and Proverbs had some surprising overlaps. The material in 1 Kings covered a series of kings whose courses were largely &lt;em&gt;away&lt;/em&gt; from worshipping Yahweh and toward worshipping other gods. With only one exception, in fact, every single king listed in these five chapters rejected the God of Israel in favor of the gods of the nations which the Hebrews had driven out of Canaan. That exception, Asa, stands in sharp contrast to the litany of rebellious kings who preceded and followed him as being a man who followed God with his whole heart. Others, it seems, included Yahweh in their list of gods to worship, but never reverenced him as supreme and only. This list of wicked kings of both Israel and Judah climaxes with the appearance of Elijah, the righteous prophet who confronts the &lt;em&gt;most&lt;/em&gt; wicked king in the list, and who ultimately demonstrates Yahweh’s superiority over the other gods the Hebrews worshipped.&lt;/p&gt;
&lt;p&gt;Proverbs 2 continues Solomon’s exhortation to seek wisdom wholeheartedly, and his corresponding encouragement that Yahweh gives wisdom to those who seek it. But Solomon did not stop with the idea that knowledge and understanding are good —though this he certainly affirms. Rather, he continued on to emphasize that God’s knowledge and discernment go hand in hand with his integrity and justice. Those who seek this wisdom walk in righteousness and justice and equity. A person of wisdom is kept safe from both evildoers and from doing evil him- or herself. That Solomon’s own line, beginning with his own son and continuing on down through every king but Asa in these chapters in 1 Kings, went so far astray indicates how little these words were heeded.&lt;/p&gt;
&lt;p&gt;The picture painted by Psalm 2 stands in impossibly sharp contrast to these depraved kings. The Anointed One of the psalm is a messianic figure: those who take refuge in him find shelter, but those who rebel against him are broken under his rule. There is a king in view here who laughs at the rebellion of the rulers of every nation (Israel included), who scorns the folly of plotting against the Most High God. The king that Yahweh calls his Son will receive those same nations as his inheritance. He will be the king above all other kings. He will be both wrathful against rebellion and merciful to those who “take refuge in him” (v. 11–12).&lt;/p&gt;
&lt;p&gt;So we have set before us the history of wicked men rebelling against the very God who gave them their thrones, and a call to that same line of the kings to humbly seek wisdom from that God, and a poetic picture of the true king against whom any rebellion is folly. And running through all of these are both the wrath of God against the folly and sin of those rebelling against him, and his mercy. Yahweh saves his people from following other gods in that magnificent confrontation on the mountain, Elijah on one side and the priests of Baal on the other. He is the source of wisdom, and the one who keeps his people from walking in folly or wickedness. And he is the righteous king who gives his people peace and security. Not because he does not do justice or cares little about sin, but precisely &lt;em&gt;because&lt;/em&gt; he does justice and cares about sin. That Anointed One, that Son of the Most High, is Jesus Christ, who died in order that everything would be put under his feet. Every wicked king in 1 Kings points to the need for Jesus. He is the fulfillment of the wisdom promised in Proverbs 2. He is the Anointed One, the Son of Yahweh, who reigns the nations in righteousness. Hallelujah.&lt;/p&gt;
</content><category term="[devotions]"></category></entry><entry><title>A New Year of Devotions</title><link href="http://www.chriskrycho.com/2014/new-year-devotions.html" rel="alternate"></link><published>2014-01-01T23:25:00-05:00</published><updated>2014-01-01T23:25:00-05:00</updated><author><name>Chris Krycho</name></author><id>tag:www.chriskrycho.com,2014-01-01:/2014/new-year-devotions.html</id><summary type="html">&lt;p&gt;I have found, over the years, that writing is a remarkably helpful tool for thinking through the things I am learning. I have also found that I am often better able to remain consistent in my study of Scripture if I am writing regularly about it. That could be in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have found, over the years, that writing is a remarkably helpful tool for thinking through the things I am learning. I have also found that I am often better able to remain consistent in my study of Scripture if I am writing regularly about it. That could be in a journal, or on a blog, or just about anywhere. In 2014, I am going to experiment with posting this writing on my blog —something I have done &lt;a href="http://2012-2013.chriskrycho.com/theology/topics/devotions/index.html"&gt;before&lt;/a&gt; to good effect for myself, and which a number of acquaintances seemed to like. After talking it through with my wonderful wife, I have set myself a limit of half an hour &lt;em&gt;total&lt;/em&gt; devoted to writing these posts. Hopefully it will prove profitable.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If it seems like 1 Kings 9–13 is a funny place to start this sort of thing, that’s because it is. But 1 Kings is where I am, and thus it is the place from which I will continue—I do not see a good reason to start over at the beginning &lt;em&gt;again&lt;/em&gt; just a few months after having done so before.&lt;/p&gt;
&lt;p&gt;A number of points stuck out at me as I worked through this passage. First, and most important, is one of the recurring themes of the whole book: the question of obedience to Yahweh,&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; and the consequences of rejecting him. From the promise God offers Solomon in chapter 9 through the death of a prophet in chapter 13, the issue is clear. Obedience to God brings everlasting favor, and disobedience brings death.&lt;/p&gt;
&lt;p&gt;This is not exactly a new theme for the Bible as a whole: it shows up all the way back in Genesis 3. Nor does it stop here (nor even under the New Covenant with Christ): submission to God is characteristic of all who believe. Why? Not because God is some cruel dictator, but because he is both omniscient and omnibenevolent. He knows what is best for us. Defying his ways is like defying gravity: it might make for a &lt;a href="http://www.youtube.com/watch?v=FlMBcTGJ4YM&amp;amp;name=DefyingGravity"&gt;catchy tune&lt;/a&gt;, but the net result is always crashing hard to the ground.&lt;/p&gt;
&lt;p&gt;So: Yahweh promised Solomon great things if he would simply follow him alone and not worship other gods. Solomon did exactly the opposite of what God had commanded the kings of Israel, though: he married multiple foreign women who themselves worshiped other gods,&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; and ultimately he built altars to and sacrificed to those other gods himself. We see the same thing in Jeroboam’s life: God made him promises of really marvelous import, if he would simply walk with Yahweh. Instead, as soon as he became king he led the people &lt;em&gt;away&lt;/em&gt; from Yahweh, reasoning that Yahweh-worship was a threat to his own power, even though it was a prophet of Yahweh who had first told him all that would happen and that it was Yahweh who would do it. A righteous prophet ends up dead because he disobeyed God’s clear instructions.&lt;/p&gt;
&lt;p&gt;In short: God means business, and we ought to pay attention when he commands us in a certain area. Again, not because he is a tyrant, but because he loves us and he is righteous. When we defy him, we are simultaneously wronging ourselves and committing cosmic treason. It’s a bad move, and he rightly responds in judgment. That, in turn, though, takes me back to his &lt;em&gt;decisive&lt;/em&gt; act of judgment: the one the Godhead executed on itself, in the sacrificial, atoning death of Christ on my behalf. My motivation for obedience, then, is not only fear, but joyful gratitude.&lt;/p&gt;
&lt;p&gt;It’s a good start to the year.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I know it is a bit unusual to spell out the name of God used in the Old Testament like this, but it is my preference. I think it makes many passages much clearer to read Yahweh instead of &lt;span style="font-variant: small-
caps"&gt;Lord&lt;/span&gt;, and it’s simply what’s there in the original (even if the Jews historically have chosen not to say it—there’s something interesting here, but I shall pass over it today).&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Note that the reason for the prohibition on marrying foreigners was always religious, not ethnic. Solomon’s own lineage (and thus, Jesus’ too) includes several foreign women—each of whom worshiped Yahweh.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="[devotions]"></category></entry></feed>