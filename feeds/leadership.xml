<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Chris Krycho - leadership</title><link>http://www.chriskrycho.com/</link><description></description><lastBuildDate>Mon, 06 Aug 2018 21:15:00 -0400</lastBuildDate><item><title>Building Things</title><link>http://www.chriskrycho.com/2018/building-things.html</link><description>&lt;p&gt;I’m not quite sure how to begin this post, or where it will go. Another &lt;a href="https://www.chriskrycho.com/2018/a-meander.html" title="A Meander"&gt;meander&lt;/a&gt; I suppose it will be. This one is on the tensions I feel about certain kinds of “leadership” roles I have found myself in.&lt;/p&gt;
&lt;section id="i." class="level2"&gt;
&lt;h2&gt;I.&lt;/h2&gt;
&lt;p&gt;For almost three years, now, I have been more or less steadily—sometimes more, sometimes less!—putting out episodes of New Rustacean. It’s fairly popular. I’ve had really smart people tell me how helpful it was in getting them up to speed with the language. I have had the surprising and slightly weird (if also somewhat gratifying) experience of walking into a room and seeing people respond in recognition of my voice.&lt;/p&gt;
&lt;p&gt;I’m grateful for the impact the podcast has had, and as I tell people often: this is far and away the most significant thing I could have done in the Rust ecosystem in the last three years. There are a lot of people better-equipped than I to write top-notch libraries and applications in the ecosystem. People well-equipped for podcasting by dint of already being active in the space, and well-equipped for teaching specifically by dint of background and training? There are a lot fewer of those. I don’t think there is anywhere at all I could have made a bigger dent in the same time for Rust.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;If I went and applied for a job today, where actual Rust &lt;em&gt;experience&lt;/em&gt; was desired, the vast majority of my show’s listeners would have substantially more to show than me. A command line tool here, a little experiment there. My &lt;a href="https://github.com/chriskrycho/lightning-rs" title="lightning (lx)"&gt;one real project&lt;/a&gt; has been on hold almost since I started it. Another project, my original inspiration for learning Rust at all, I’ve never even started. My actual lines of Rust code written in the last three years top out somewhere under 3,000. It’s a pittance. As well as I know the language’s &lt;em&gt;ideas&lt;/em&gt;, and indeed as well as I can explain them… I actually haven’t gotten to &lt;em&gt;build&lt;/em&gt; much of anything with it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ii." class="level2"&gt;
&lt;h2&gt;II.&lt;/h2&gt;
&lt;p&gt;The last few months at work, I’ve spent a lot of my time—and an increasingly large proportion of it—on mentoring, code reviews, and leading the team and effort I’m on. This is genuinely wonderful in a lot of ways. I &lt;em&gt;love&lt;/em&gt; teaching, and it’s a pleasure to help shape the overall direction of a project and a codebase.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; In many ways, I’m right in line with the goals I set explicitly with my manager at the beginning of the year.&lt;/p&gt;
&lt;p&gt;That’s really good, and really important. I recently saw someone tweet the pithy remark that the &lt;em&gt;definition&lt;/em&gt; of a senior engineer is that they are mentoring a more junior engineer. I don’t think that’s quite right—there is a lot of room for really outstanding technical contributors who don’t have the gift of teaching, but whose technical chops mean they genuinely &lt;em&gt;are&lt;/em&gt; senior people on the team.&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; One of the reasonable insights under the hyperbole is that enabling others can often be far more effective than merely doing work yourself.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;Over the last several months, the amount of code I have written myself has dropped substantially. Not to nothing, of course; I’m still doing the actual work of designing and implementing pieces of the application I work on a majority of the time. But I’m not sure how much more than 50% of my time it is on any given week at this point. As much as I’ve enjoyed helping drive this particular project forward,&lt;a href="#fn3" class="footnote-ref" id="fnref3"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; I haven’t actually gotten to &lt;em&gt;build&lt;/em&gt; as much during this phase of it.&lt;/p&gt;
&lt;section id="iii." class="level3"&gt;
&lt;h3&gt;III.&lt;/h3&gt;
&lt;p&gt;These two things have a great deal in common, for all their superficial differences. Both are places where my most valuable contributions are not what I can build myself, but what I can enable &lt;em&gt;others&lt;/em&gt; to build.&lt;/p&gt;
&lt;p&gt;Thousands and thousands of people have listened to New Rustacean. For some non-trivial number of them, the podcast was an important part of their wrapping their heads around the language. I know this because they tell me, in emails and conversations and tweets that are genuinely my favorite parts of doing the show! I have done far, far more with the podcast than I possibly could have by building another library in Rust.&lt;/p&gt;
&lt;p&gt;Similarly, albeit on a much smaller scale, my role in my team at Olo matters. I’ve been able to help set the overall technical direction of a number of our front-end initiatives at the company in important ways. I’ve been able to help more junior developers ramp up their skills. I have done far more in this kind of role than I could possibly have done by just quietly shipping features.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;Being a “force multiplier” (what a terrible phrase!) isn’t always what it’s cracked up to be. It can be both &lt;em&gt;worth it&lt;/em&gt; and also &lt;em&gt;profoundly frustrating and boring&lt;/em&gt; at times. I was drawn to software in no small part because of the joy of being able to make things—to start with nothing but an idea or a sketch and a few hours later have something people can interact with, that solves a problem for them. I still love that side of it, and it’s clear to me if nothing else that (for the foreseeable future, anyway) I have no desire whatsoever to go into management roles, “force multiplier” or not.&lt;/p&gt;
&lt;p&gt;There’s a real trick here, because it’s not that I’m &lt;em&gt;not&lt;/em&gt; building things in these roles. It’s just that building a team or a community is not quite the same thing—it does not scratch the same itch—as building a really elegant user interface component with an elegant and communicative animation. They’re both good; and they’re very, very different from each other.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;I separate those on purpose: a project and a codebase are &lt;em&gt;related&lt;/em&gt;, but they’re far from identical. A project can succeed—at least in the short term—with a terrible codebase; an excellent codebase is no guarantee of project success. Getting them aligned is rare, difficult, and rewarding.&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;This seems like a typical overcorrection: against the idea that teaching is &lt;em&gt;unimportant&lt;/em&gt;, it now comes into vogue to say that teaching is the &lt;em&gt;most&lt;/em&gt; important. Imagine if we simply noted that teaching is some people’s gift and vocation, and not others; and that we can complement one another’s strengths by sharing our own—that it is not a zero-sum game but one in which &lt;a href="https://www.esv.org/1+Corinthians+12+12/" title="1 Corinthians 12:12 and following"&gt;we are like hands and feet and elbows and ears, each one needing the other, none able to do without the others&lt;/a&gt;.&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn3"&gt;&lt;p&gt;much of the time anyway; the &lt;a href="https://www.chriskrycho.com/2018/some-mild-burnout.html" title="Some Mild Burnout"&gt;burnout&lt;/a&gt; I’m experiencing is related to some of the dynamics of this particular project&lt;a href="#fnref3" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Mon, 06 Aug 2018 21:15:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-08-06:/2018/building-things.html</guid><category>software development</category><category>leadership</category><category>podcasting</category><category>New Rustacean</category></item><item><title>#EmberJS2018, Part 3</title><link>http://www.chriskrycho.com/2018/emberjs2018-part-3.html</link><description>&lt;p&gt;Following &lt;a href="https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html"&gt;the example&lt;/a&gt; of the Rust community, the &lt;a href="https://emberjs.com"&gt;Ember.js&lt;/a&gt; team has &lt;a href="https://emberjs.com/blog/2018/05/02/ember-2018-roadmap-call-for-posts.html" title="Ember&amp;#39;s 2018 Roadmap: A Call for Blog Posts"&gt;called for blog posts&lt;/a&gt; as the first step in setting the 2018 roadmap (which will formally happen through the normal &lt;a href="https://github.com/emberjs/rfcs"&gt;&lt;abbr title="Request for Comments"&gt;RFC&lt;/abbr&gt; process&lt;/a&gt;). This is my contribution.&lt;/p&gt;
&lt;p&gt;There are three major themes I think should characterize the Ember.js community and project for the rest of 2018:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;a href="http://www.chriskrycho.com/2018/emberjs2018-part-1.html"&gt;&lt;strong&gt;Finishing What We’ve Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-2.html"&gt;&lt;strong&gt;Doubling Down on Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Defaulting to Public for Discussions&lt;/strong&gt; (this post)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chriskrycho.com/2018/emberjs2018-part-4.html"&gt;&lt;strong&gt;Embracing the Ecosystem&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;One of the small changes I think would substantially improve the Ember.js ecosystem is: &lt;strong&gt;defaulting to public for discussions&lt;/strong&gt; among the core team. Indeed: for any open-source project with community involvement like Ember.js has, that should be the default. Not the &lt;em&gt;only&lt;/em&gt; option, just the default option.&lt;/p&gt;
&lt;p&gt;There is plenty of value in having private channels for discussion in contexts like this. Sometimes you have to deal with something awkward or socially difficult. Sometimes you have already taken the community’s input and just have to come to a decision about what to do on something. Private channels are useful.&lt;/p&gt;
&lt;p&gt;But: they shouldn’t be the default. They should be what you turn to when you’re in one of those particular kinds of situations which require it. The default should be public discussion and interaction.&lt;/p&gt;
&lt;p&gt;Over the last year, the maintainer-ship (and therefore decision-making) of ember-cli-typescript and the surrounding TypeScript ecosystem has grown from being pretty much just me to being a small group of four of us: Derek Wickern, Dan Freeman, James Davis, and me. We have the “final say,” so to speak, on the things we’re doing with the addon and the typings and so on. (What that actually means in practice is mostly just we all try to shoulder the burden of staying on top of pull requests.) And we have a private channel for discussions as a “core team” for projects in the &lt;a href="https://github.com/typed-ember"&gt;typed-ember&lt;/a&gt; organization.&lt;/p&gt;
&lt;p&gt;But: it’s not the default. It’s what we turn to when we’re in one of those particular kinds of situations which require it. The default is public discussion and interaction.&lt;/p&gt;
&lt;p&gt;And this isn’t just an unspoken norm or something. As a team, we all explicitly agreed that we default to public. Pretty much the only times we chat in our private channel is if we’re figuring out how to diffuse an awkward situation kindly, or if we’re adding someone else to the team. Otherwise, we try to have all our discussions in the GitHub issues for the projects or the &lt;code&gt;#topic-typescript&lt;/code&gt; room in the Ember Community Slack.&lt;/p&gt;
&lt;p&gt;This has a few major effects, as I see it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No one should feel left out or in the dark about what we’re up to. Even if we’re hashing out crazy-seeming ideas for how to move stuff forward, it’s all there for everyone to see. This includes neat things like Dan Freeman’s proof-of-concept on &lt;a href="https://twitter.com/__dfreeman/status/994410180661170177"&gt;type-checked templates&lt;/a&gt;, or our mad sprint (as a team!) to get some core improvements landed before I gave a workshop at EmberConf, or anything else we’re going after.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’re obviously available for input on things as people have questions, because we’re interacting with &lt;em&gt;each other&lt;/em&gt; in those public forums. And if we’d like to start moving some of the oft-repeated questions over to the &lt;a href="https://discuss.emberjs.com"&gt;Ember Discourse&lt;/a&gt; or to &lt;a href="https://stackoverflow.com/questions/tagged/ember.js"&gt;Stack Overflow&lt;/a&gt;, it’s still really helpful for people who &lt;em&gt;are&lt;/em&gt; on the Slack to see that we’re there and available for help.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We get to see the regular pain points others run into. That often turns into issues, priorities, etc. for us as a group. The slowly growing issue &lt;a href="https://github.com/typed-ember/ember-cli-typescript/issues/170"&gt;tracking things we need to document&lt;/a&gt; is essentially a direct product of that constant cycle of interaction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We get the benefit of input from others! If we’ve missed something, or simply failed to think of something, others in the community often haven’t. One prime example of this: the “registry” strategy we use for making things like Ember Data store, adapter, etc. lookups work came out of conversations with a community member (&lt;a href="https://github.com/maerten"&gt;Maarten Veenstra&lt;/a&gt;) which happened many months before we were in a spot where we could land that kind of thing—and initially I was pretty skeptical of it, but they were totally right, and it’s now core to how Ember’s typings work!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I recommend—very strongly—that the Ember.js core team adopt the same strategy. Teams &lt;em&gt;do&lt;/em&gt; need private channels sometimes. But they shouldn’t be the default. They should be for those particular circumstances which &lt;em&gt;require&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;The biggest things I think could come out of this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A greater confidence from within the Ember.js community about what the core team is up to and where we’re going. Technical leadership seems to me to be about 10% technical brilliance and 90% clear communication. We have loads of technical brilliance; we need more communication!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More confidence in the trajectory of Ember.js from &lt;em&gt;outside&lt;/em&gt; its existing community. Seeing that there is active leadership is essential for people to have confidence that choosing Ember.js is a good choice both today and for the medium-to-long-term.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we need both of those—a lot—for Ember.js to continue to grow and thrive in the years ahead!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Krycho</dc:creator><pubDate>Wed, 23 May 2018 07:30:00 -0400</pubDate><guid isPermaLink="false">tag:www.chriskrycho.com,2018-05-23:/2018/emberjs2018-part-3.html</guid><category>emberjs</category><category>emberjs2018</category><category>javascript</category><category>leadership</category></item></channel></rss>